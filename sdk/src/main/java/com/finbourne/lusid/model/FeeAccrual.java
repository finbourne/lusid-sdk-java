/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * FeeAccrual
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class FeeAccrual {
  public static final String SERIALIZED_NAME_EFFECTIVE_AT = "effectiveAt";
  @SerializedName(SERIALIZED_NAME_EFFECTIVE_AT)
  private OffsetDateTime effectiveAt;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_CALCULATION_BASE = "calculationBase";
  @SerializedName(SERIALIZED_NAME_CALCULATION_BASE)
  private java.math.BigDecimal calculationBase;

  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private java.math.BigDecimal amount;

  public static final String SERIALIZED_NAME_PREVIOUS_ACCRUAL = "previousAccrual";
  @SerializedName(SERIALIZED_NAME_PREVIOUS_ACCRUAL)
  private java.math.BigDecimal previousAccrual;

  public static final String SERIALIZED_NAME_TOTAL_ACCRUAL = "totalAccrual";
  @SerializedName(SERIALIZED_NAME_TOTAL_ACCRUAL)
  private java.math.BigDecimal totalAccrual;

  public FeeAccrual() {
  }

  
  public FeeAccrual(
     java.math.BigDecimal totalAccrual
  ) {
    this();
    this.totalAccrual = totalAccrual;
  }

  public FeeAccrual effectiveAt(OffsetDateTime effectiveAt) {
    
    this.effectiveAt = effectiveAt;
    return this;
  }

   /**
   * Get effectiveAt
   * @return effectiveAt
  **/
  @jakarta.annotation.Nullable
  public OffsetDateTime getEffectiveAt() {
    return effectiveAt;
  }


  public void setEffectiveAt(OffsetDateTime effectiveAt) {
    this.effectiveAt = effectiveAt;
  }


  public FeeAccrual name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @jakarta.annotation.Nullable
  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public FeeAccrual calculationBase(java.math.BigDecimal calculationBase) {
    
    this.calculationBase = calculationBase;
    return this;
  }

   /**
   * Get calculationBase
   * @return calculationBase
  **/
  @jakarta.annotation.Nullable
  public java.math.BigDecimal getCalculationBase() {
    return calculationBase;
  }


  public void setCalculationBase(java.math.BigDecimal calculationBase) {
    this.calculationBase = calculationBase;
  }


  public FeeAccrual amount(java.math.BigDecimal amount) {
    
    this.amount = amount;
    return this;
  }

   /**
   * Get amount
   * @return amount
  **/
  @jakarta.annotation.Nullable
  public java.math.BigDecimal getAmount() {
    return amount;
  }


  public void setAmount(java.math.BigDecimal amount) {
    this.amount = amount;
  }


  public FeeAccrual previousAccrual(java.math.BigDecimal previousAccrual) {
    
    this.previousAccrual = previousAccrual;
    return this;
  }

   /**
   * Get previousAccrual
   * @return previousAccrual
  **/
  @jakarta.annotation.Nullable
  public java.math.BigDecimal getPreviousAccrual() {
    return previousAccrual;
  }


  public void setPreviousAccrual(java.math.BigDecimal previousAccrual) {
    this.previousAccrual = previousAccrual;
  }


   /**
   * Get totalAccrual
   * @return totalAccrual
  **/
  @jakarta.annotation.Nullable
  public java.math.BigDecimal getTotalAccrual() {
    return totalAccrual;
  }





  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FeeAccrual feeAccrual = (FeeAccrual) o;
    return Objects.equals(this.effectiveAt, feeAccrual.effectiveAt) &&
        Objects.equals(this.name, feeAccrual.name) &&
        (this.calculationBase.compareTo(feeAccrual.getCalculationBase()) == 0) &&
        (this.amount.compareTo(feeAccrual.getAmount()) == 0) &&
        (this.previousAccrual.compareTo(feeAccrual.getPreviousAccrual()) == 0) &&
        (this.totalAccrual.compareTo(feeAccrual.getTotalAccrual()) == 0);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(effectiveAt, name, calculationBase, amount, previousAccrual, totalAccrual);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FeeAccrual {\n");
    sb.append("    effectiveAt: ").append(toIndentedString(effectiveAt)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    calculationBase: ").append(toIndentedString(calculationBase)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    previousAccrual: ").append(toIndentedString(previousAccrual)).append("\n");
    sb.append("    totalAccrual: ").append(toIndentedString(totalAccrual)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("effectiveAt");
    openapiFields.add("name");
    openapiFields.add("calculationBase");
    openapiFields.add("amount");
    openapiFields.add("previousAccrual");
    openapiFields.add("totalAccrual");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to FeeAccrual
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FeeAccrual.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FeeAccrual is not found in the empty JSON string", FeeAccrual.openapiRequiredFields.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FeeAccrual.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FeeAccrual' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FeeAccrual> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FeeAccrual.class));

       return (TypeAdapter<T>) new TypeAdapter<FeeAccrual>() {
           @Override
           public void write(JsonWriter out, FeeAccrual value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FeeAccrual read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of FeeAccrual given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of FeeAccrual
  * @throws IOException if the JSON string is invalid with respect to FeeAccrual
  */
  public static FeeAccrual fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FeeAccrual.class);
  }

 /**
  * Convert an instance of FeeAccrual to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
