/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import com.finbourne.lusid.model.FxConventions;
import com.finbourne.lusid.model.RelativeDateOffset;
import com.finbourne.lusid.model.Schedule;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * Schedule for notional changes based on the change in FX rate.  Used in the representation of a resettable cross currency interest rate swap.
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class FxLinkedNotionalSchedule extends Schedule {
  public static final String SERIALIZED_NAME_FX_CONVENTIONS = "fxConventions";
  @SerializedName(SERIALIZED_NAME_FX_CONVENTIONS)
  private FxConventions fxConventions;

  public static final String SERIALIZED_NAME_VARYING_NOTIONAL_CURRENCY = "varyingNotionalCurrency";
  @SerializedName(SERIALIZED_NAME_VARYING_NOTIONAL_CURRENCY)
  private String varyingNotionalCurrency;

  public static final String SERIALIZED_NAME_VARYING_NOTIONAL_FIXING_DATES = "varyingNotionalFixingDates";
  @SerializedName(SERIALIZED_NAME_VARYING_NOTIONAL_FIXING_DATES)
  private RelativeDateOffset varyingNotionalFixingDates;

  public static final String SERIALIZED_NAME_VARYING_NOTIONAL_INTERIM_EXCHANGE_PAYMENT_DATES = "varyingNotionalInterimExchangePaymentDates";
  @SerializedName(SERIALIZED_NAME_VARYING_NOTIONAL_INTERIM_EXCHANGE_PAYMENT_DATES)
  private RelativeDateOffset varyingNotionalInterimExchangePaymentDates;

  public FxLinkedNotionalSchedule() {
    // this.scheduleType = this.getClass().getSimpleName();
  }

  public FxLinkedNotionalSchedule fxConventions(FxConventions fxConventions) {
    
    this.fxConventions = fxConventions;
    return this;
  }

   /**
   * Get fxConventions
   * @return fxConventions
  **/
  @jakarta.annotation.Nonnull
  public FxConventions getFxConventions() {
    return fxConventions;
  }


  public void setFxConventions(FxConventions fxConventions) {
    this.fxConventions = fxConventions;
  }


  public FxLinkedNotionalSchedule varyingNotionalCurrency(String varyingNotionalCurrency) {
    
    this.varyingNotionalCurrency = varyingNotionalCurrency;
    return this;
  }

   /**
   * The currency of the varying notional amount.
   * @return varyingNotionalCurrency
  **/
  @jakarta.annotation.Nonnull
  public String getVaryingNotionalCurrency() {
    return varyingNotionalCurrency;
  }


  public void setVaryingNotionalCurrency(String varyingNotionalCurrency) {
    this.varyingNotionalCurrency = varyingNotionalCurrency;
  }


  public FxLinkedNotionalSchedule varyingNotionalFixingDates(RelativeDateOffset varyingNotionalFixingDates) {
    
    this.varyingNotionalFixingDates = varyingNotionalFixingDates;
    return this;
  }

   /**
   * Get varyingNotionalFixingDates
   * @return varyingNotionalFixingDates
  **/
  @jakarta.annotation.Nonnull
  public RelativeDateOffset getVaryingNotionalFixingDates() {
    return varyingNotionalFixingDates;
  }


  public void setVaryingNotionalFixingDates(RelativeDateOffset varyingNotionalFixingDates) {
    this.varyingNotionalFixingDates = varyingNotionalFixingDates;
  }


  public FxLinkedNotionalSchedule varyingNotionalInterimExchangePaymentDates(RelativeDateOffset varyingNotionalInterimExchangePaymentDates) {
    
    this.varyingNotionalInterimExchangePaymentDates = varyingNotionalInterimExchangePaymentDates;
    return this;
  }

   /**
   * Get varyingNotionalInterimExchangePaymentDates
   * @return varyingNotionalInterimExchangePaymentDates
  **/
  @jakarta.annotation.Nullable
  public RelativeDateOffset getVaryingNotionalInterimExchangePaymentDates() {
    return varyingNotionalInterimExchangePaymentDates;
  }


  public void setVaryingNotionalInterimExchangePaymentDates(RelativeDateOffset varyingNotionalInterimExchangePaymentDates) {
    this.varyingNotionalInterimExchangePaymentDates = varyingNotionalInterimExchangePaymentDates;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FxLinkedNotionalSchedule fxLinkedNotionalSchedule = (FxLinkedNotionalSchedule) o;
    return Objects.equals(this.fxConventions, fxLinkedNotionalSchedule.fxConventions) &&
        Objects.equals(this.varyingNotionalCurrency, fxLinkedNotionalSchedule.varyingNotionalCurrency) &&
        Objects.equals(this.varyingNotionalFixingDates, fxLinkedNotionalSchedule.varyingNotionalFixingDates) &&
        Objects.equals(this.varyingNotionalInterimExchangePaymentDates, fxLinkedNotionalSchedule.varyingNotionalInterimExchangePaymentDates) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(fxConventions, varyingNotionalCurrency, varyingNotionalFixingDates, varyingNotionalInterimExchangePaymentDates, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FxLinkedNotionalSchedule {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    fxConventions: ").append(toIndentedString(fxConventions)).append("\n");
    sb.append("    varyingNotionalCurrency: ").append(toIndentedString(varyingNotionalCurrency)).append("\n");
    sb.append("    varyingNotionalFixingDates: ").append(toIndentedString(varyingNotionalFixingDates)).append("\n");
    sb.append("    varyingNotionalInterimExchangePaymentDates: ").append(toIndentedString(varyingNotionalInterimExchangePaymentDates)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("scheduleType");
    openapiFields.add("fxConventions");
    openapiFields.add("varyingNotionalCurrency");
    openapiFields.add("varyingNotionalFixingDates");
    openapiFields.add("varyingNotionalInterimExchangePaymentDates");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("fxConventions");
    openapiRequiredFields.add("varyingNotionalCurrency");
    openapiRequiredFields.add("varyingNotionalFixingDates");
    openapiRequiredFields.add("scheduleType");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to FxLinkedNotionalSchedule
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FxLinkedNotionalSchedule.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FxLinkedNotionalSchedule is not found in the empty JSON string", FxLinkedNotionalSchedule.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : FxLinkedNotionalSchedule.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FxLinkedNotionalSchedule.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FxLinkedNotionalSchedule' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FxLinkedNotionalSchedule> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FxLinkedNotionalSchedule.class));

       return (TypeAdapter<T>) new TypeAdapter<FxLinkedNotionalSchedule>() {
           @Override
           public void write(JsonWriter out, FxLinkedNotionalSchedule value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FxLinkedNotionalSchedule read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of FxLinkedNotionalSchedule given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of FxLinkedNotionalSchedule
  * @throws IOException if the JSON string is invalid with respect to FxLinkedNotionalSchedule
  */
  public static FxLinkedNotionalSchedule fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FxLinkedNotionalSchedule.class);
  }

 /**
  * Convert an instance of FxLinkedNotionalSchedule to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
