/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import com.finbourne.lusid.model.InstrumentIdValue;
import com.finbourne.lusid.model.LusidInstrument;
import com.finbourne.lusid.model.Property;
import com.finbourne.lusid.model.ResourceId;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * InstrumentDefinition
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class InstrumentDefinition {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_IDENTIFIERS = "identifiers";
  @SerializedName(SERIALIZED_NAME_IDENTIFIERS)
  private Map<String, InstrumentIdValue> identifiers = new HashMap<>();

  public static final String SERIALIZED_NAME_PROPERTIES = "properties";
  @SerializedName(SERIALIZED_NAME_PROPERTIES)
  private List<Property> properties;

  public static final String SERIALIZED_NAME_LOOK_THROUGH_PORTFOLIO_ID = "lookThroughPortfolioId";
  @SerializedName(SERIALIZED_NAME_LOOK_THROUGH_PORTFOLIO_ID)
  private ResourceId lookThroughPortfolioId;

  public static final String SERIALIZED_NAME_DEFINITION = "definition";
  @SerializedName(SERIALIZED_NAME_DEFINITION)
  private LusidInstrument definition;

  public InstrumentDefinition() {
  }

  public InstrumentDefinition name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * The name of the instrument.
   * @return name
  **/
  @jakarta.annotation.Nonnull
  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public InstrumentDefinition identifiers(Map<String, InstrumentIdValue> identifiers) {
    
    this.identifiers = identifiers;
    return this;
  }

  public InstrumentDefinition putIdentifiersItem(String key, InstrumentIdValue identifiersItem) {
    if (this.identifiers == null) {
      this.identifiers = new HashMap<>();
    }
    this.identifiers.put(key, identifiersItem);
    return this;
  }

   /**
   * A set of identifiers that can be used to identify the instrument. At least one of these must be configured to be a unique identifier.
   * @return identifiers
  **/
  @jakarta.annotation.Nonnull
  public Map<String, InstrumentIdValue> getIdentifiers() {
    return identifiers;
  }


  public void setIdentifiers(Map<String, InstrumentIdValue> identifiers) {
    this.identifiers = identifiers;
  }


  public InstrumentDefinition properties(List<Property> properties) {
    
    this.properties = properties;
    return this;
  }

  public InstrumentDefinition addPropertiesItem(Property propertiesItem) {
    if (this.properties == null) {
      this.properties = new ArrayList<>();
    }
    this.properties.add(propertiesItem);
    return this;
  }

   /**
   * Set of unique instrument properties and associated values to store with the instrument. Each property must be from the &#39;Instrument&#39; domain.
   * @return properties
  **/
  @jakarta.annotation.Nullable
  public List<Property> getProperties() {
    return properties;
  }


  public void setProperties(List<Property> properties) {
    this.properties = properties;
  }


  public InstrumentDefinition lookThroughPortfolioId(ResourceId lookThroughPortfolioId) {
    
    this.lookThroughPortfolioId = lookThroughPortfolioId;
    return this;
  }

   /**
   * Get lookThroughPortfolioId
   * @return lookThroughPortfolioId
  **/
  @jakarta.annotation.Nullable
  public ResourceId getLookThroughPortfolioId() {
    return lookThroughPortfolioId;
  }


  public void setLookThroughPortfolioId(ResourceId lookThroughPortfolioId) {
    this.lookThroughPortfolioId = lookThroughPortfolioId;
  }


  public InstrumentDefinition definition(LusidInstrument definition) {
    
    this.definition = definition;
    return this;
  }

   /**
   * Get definition
   * @return definition
  **/
  @jakarta.annotation.Nullable
  public LusidInstrument getDefinition() {
    return definition;
  }


  public void setDefinition(LusidInstrument definition) {
    this.definition = definition;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InstrumentDefinition instrumentDefinition = (InstrumentDefinition) o;
    return Objects.equals(this.name, instrumentDefinition.name) &&
        Objects.equals(this.identifiers, instrumentDefinition.identifiers) &&
        Objects.equals(this.properties, instrumentDefinition.properties) &&
        Objects.equals(this.lookThroughPortfolioId, instrumentDefinition.lookThroughPortfolioId) &&
        Objects.equals(this.definition, instrumentDefinition.definition);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, identifiers, properties, lookThroughPortfolioId, definition);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InstrumentDefinition {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    identifiers: ").append(toIndentedString(identifiers)).append("\n");
    sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
    sb.append("    lookThroughPortfolioId: ").append(toIndentedString(lookThroughPortfolioId)).append("\n");
    sb.append("    definition: ").append(toIndentedString(definition)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("identifiers");
    openapiFields.add("properties");
    openapiFields.add("lookThroughPortfolioId");
    openapiFields.add("definition");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("identifiers");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to InstrumentDefinition
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!InstrumentDefinition.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InstrumentDefinition is not found in the empty JSON string", InstrumentDefinition.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!InstrumentDefinition.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InstrumentDefinition` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : InstrumentDefinition.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (jsonObj.get("properties") != null && !jsonObj.get("properties").isJsonNull()) {
        JsonArray jsonArrayproperties = jsonObj.getAsJsonArray("properties");
        if (jsonArrayproperties != null) {
          // ensure the json data is an array
          if (!jsonObj.get("properties").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `properties` to be an array in the JSON string but got `%s`", jsonObj.get("properties").toString()));
          }

          // validate the optional field `properties` (array)
          for (int i = 0; i < jsonArrayproperties.size(); i++) {
            Property.validateJsonObject(jsonArrayproperties.get(i).getAsJsonObject());
          };
        }
      }
      // validate the optional field `lookThroughPortfolioId`
      if (jsonObj.get("lookThroughPortfolioId") != null && !jsonObj.get("lookThroughPortfolioId").isJsonNull()) {
        ResourceId.validateJsonObject(jsonObj.getAsJsonObject("lookThroughPortfolioId"));
      }
      // validate the optional field `definition`
      if (jsonObj.get("definition") != null && !jsonObj.get("definition").isJsonNull()) {
        LusidInstrument.validateJsonObject(jsonObj.getAsJsonObject("definition"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InstrumentDefinition.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InstrumentDefinition' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InstrumentDefinition> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InstrumentDefinition.class));

       return (TypeAdapter<T>) new TypeAdapter<InstrumentDefinition>() {
           @Override
           public void write(JsonWriter out, InstrumentDefinition value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InstrumentDefinition read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of InstrumentDefinition given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of InstrumentDefinition
  * @throws IOException if the JSON string is invalid with respect to InstrumentDefinition
  */
  public static InstrumentDefinition fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InstrumentDefinition.class);
  }

 /**
  * Convert an instance of InstrumentDefinition to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
