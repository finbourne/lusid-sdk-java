/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import com.finbourne.lusid.model.MetricValue;
import com.finbourne.lusid.model.QuoteId;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * The details of the quote including its unique identifier, value and lineage. Please note the Unit field on MetricValue is nullable on the upsert but there is validation within the quote store to make sure this field is populated. In the absence of a real unit then we recommend putting something in line with the data in QuoteId.QuoteSeriesId.quoteType e.g. InterestRate.
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class UpsertQuoteRequest {
  public static final String SERIALIZED_NAME_QUOTE_ID = "quoteId";
  @SerializedName(SERIALIZED_NAME_QUOTE_ID)
  private QuoteId quoteId;

  public static final String SERIALIZED_NAME_METRIC_VALUE = "metricValue";
  @SerializedName(SERIALIZED_NAME_METRIC_VALUE)
  private MetricValue metricValue;

  public static final String SERIALIZED_NAME_LINEAGE = "lineage";
  @SerializedName(SERIALIZED_NAME_LINEAGE)
  private String lineage;

  public static final String SERIALIZED_NAME_SCALE_FACTOR = "scaleFactor";
  @SerializedName(SERIALIZED_NAME_SCALE_FACTOR)
  private java.math.BigDecimal scaleFactor;

  public UpsertQuoteRequest() {
  }

  public UpsertQuoteRequest quoteId(QuoteId quoteId) {
    
    this.quoteId = quoteId;
    return this;
  }

   /**
   * Get quoteId
   * @return quoteId
  **/
  @jakarta.annotation.Nonnull
  public QuoteId getQuoteId() {
    return quoteId;
  }


  public void setQuoteId(QuoteId quoteId) {
    this.quoteId = quoteId;
  }


  public UpsertQuoteRequest metricValue(MetricValue metricValue) {
    
    this.metricValue = metricValue;
    return this;
  }

   /**
   * Get metricValue
   * @return metricValue
  **/
  @jakarta.annotation.Nullable
  public MetricValue getMetricValue() {
    return metricValue;
  }


  public void setMetricValue(MetricValue metricValue) {
    this.metricValue = metricValue;
  }


  public UpsertQuoteRequest lineage(String lineage) {
    
    this.lineage = lineage;
    return this;
  }

   /**
   * Description of the quote&#39;s lineage e.g. &#39;FundAccountant_GreenQuality&#39;.
   * @return lineage
  **/
  @jakarta.annotation.Nullable
  public String getLineage() {
    return lineage;
  }


  public void setLineage(String lineage) {
    this.lineage = lineage;
  }


  public UpsertQuoteRequest scaleFactor(java.math.BigDecimal scaleFactor) {
    
    this.scaleFactor = scaleFactor;
    return this;
  }

   /**
   * An optional scale factor for non-standard scaling of quotes against the instrument. For example, if you wish the quote&#39;s Value to be scaled down by a factor of 100, enter 100. If not supplied, the default ScaleFactor is 1.
   * @return scaleFactor
  **/
  @jakarta.annotation.Nullable
  public java.math.BigDecimal getScaleFactor() {
    return scaleFactor;
  }


  public void setScaleFactor(java.math.BigDecimal scaleFactor) {
    this.scaleFactor = scaleFactor;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpsertQuoteRequest upsertQuoteRequest = (UpsertQuoteRequest) o;
    return Objects.equals(this.quoteId, upsertQuoteRequest.quoteId) &&
        Objects.equals(this.metricValue, upsertQuoteRequest.metricValue) &&
        Objects.equals(this.lineage, upsertQuoteRequest.lineage) &&
        (this.scaleFactor.compareTo(upsertQuoteRequest.getScaleFactor()) == 0);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(quoteId, metricValue, lineage, scaleFactor);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpsertQuoteRequest {\n");
    sb.append("    quoteId: ").append(toIndentedString(quoteId)).append("\n");
    sb.append("    metricValue: ").append(toIndentedString(metricValue)).append("\n");
    sb.append("    lineage: ").append(toIndentedString(lineage)).append("\n");
    sb.append("    scaleFactor: ").append(toIndentedString(scaleFactor)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("quoteId");
    openapiFields.add("metricValue");
    openapiFields.add("lineage");
    openapiFields.add("scaleFactor");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("quoteId");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to UpsertQuoteRequest
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpsertQuoteRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpsertQuoteRequest is not found in the empty JSON string", UpsertQuoteRequest.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UpsertQuoteRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `quoteId`
      QuoteId.validateJsonElement(jsonObj.get("quoteId"));
      // validate the optional field `metricValue`
      if (jsonObj.get("metricValue") != null && !jsonObj.get("metricValue").isJsonNull()) {
        MetricValue.validateJsonElement(jsonObj.get("metricValue"));
      }
      if ((jsonObj.get("lineage") != null && !jsonObj.get("lineage").isJsonNull()) && !jsonObj.get("lineage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lineage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lineage").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpsertQuoteRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpsertQuoteRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpsertQuoteRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpsertQuoteRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<UpsertQuoteRequest>() {
           @Override
           public void write(JsonWriter out, UpsertQuoteRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpsertQuoteRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of UpsertQuoteRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of UpsertQuoteRequest
  * @throws IOException if the JSON string is invalid with respect to UpsertQuoteRequest
  */
  public static UpsertQuoteRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpsertQuoteRequest.class);
  }

 /**
  * Convert an instance of UpsertQuoteRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
