/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * The version metadata.
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class Version {
  public static final String SERIALIZED_NAME_EFFECTIVE_FROM = "effectiveFrom";
  @SerializedName(SERIALIZED_NAME_EFFECTIVE_FROM)
  private OffsetDateTime effectiveFrom;

  public static final String SERIALIZED_NAME_AS_AT_DATE = "asAtDate";
  @SerializedName(SERIALIZED_NAME_AS_AT_DATE)
  private OffsetDateTime asAtDate;

  public static final String SERIALIZED_NAME_AS_AT_CREATED = "asAtCreated";
  @SerializedName(SERIALIZED_NAME_AS_AT_CREATED)
  private OffsetDateTime asAtCreated;

  public static final String SERIALIZED_NAME_USER_ID_CREATED = "userIdCreated";
  @SerializedName(SERIALIZED_NAME_USER_ID_CREATED)
  private String userIdCreated;

  public static final String SERIALIZED_NAME_REQUEST_ID_CREATED = "requestIdCreated";
  @SerializedName(SERIALIZED_NAME_REQUEST_ID_CREATED)
  private String requestIdCreated;

  public static final String SERIALIZED_NAME_AS_AT_MODIFIED = "asAtModified";
  @SerializedName(SERIALIZED_NAME_AS_AT_MODIFIED)
  private OffsetDateTime asAtModified;

  public static final String SERIALIZED_NAME_USER_ID_MODIFIED = "userIdModified";
  @SerializedName(SERIALIZED_NAME_USER_ID_MODIFIED)
  private String userIdModified;

  public static final String SERIALIZED_NAME_REQUEST_ID_MODIFIED = "requestIdModified";
  @SerializedName(SERIALIZED_NAME_REQUEST_ID_MODIFIED)
  private String requestIdModified;

  public static final String SERIALIZED_NAME_AS_AT_VERSION_NUMBER = "asAtVersionNumber";
  @SerializedName(SERIALIZED_NAME_AS_AT_VERSION_NUMBER)
  private Integer asAtVersionNumber;

  public Version() {
  }

  
  public Version(
     OffsetDateTime asAtCreated, 
     String userIdCreated, 
     String requestIdCreated, 
     OffsetDateTime asAtModified, 
     String userIdModified, 
     String requestIdModified, 
     Integer asAtVersionNumber
  ) {
    this();
    this.asAtCreated = asAtCreated;
    this.userIdCreated = userIdCreated;
    this.requestIdCreated = requestIdCreated;
    this.asAtModified = asAtModified;
    this.userIdModified = userIdModified;
    this.requestIdModified = requestIdModified;
    this.asAtVersionNumber = asAtVersionNumber;
  }

  public Version effectiveFrom(OffsetDateTime effectiveFrom) {
    
    this.effectiveFrom = effectiveFrom;
    return this;
  }

   /**
   * The effective datetime at which this version became valid. Only applies when a single entity is being interacted with.
   * @return effectiveFrom
  **/
  @jakarta.annotation.Nonnull
  public OffsetDateTime getEffectiveFrom() {
    return effectiveFrom;
  }


  public void setEffectiveFrom(OffsetDateTime effectiveFrom) {
    this.effectiveFrom = effectiveFrom;
  }


  public Version asAtDate(OffsetDateTime asAtDate) {
    
    this.asAtDate = asAtDate;
    return this;
  }

   /**
   * The asAt datetime at which the data was committed to LUSID.
   * @return asAtDate
  **/
  @jakarta.annotation.Nonnull
  public OffsetDateTime getAsAtDate() {
    return asAtDate;
  }


  public void setAsAtDate(OffsetDateTime asAtDate) {
    this.asAtDate = asAtDate;
  }


   /**
   * The asAt datetime at which the entity was first created in LUSID.
   * @return asAtCreated
  **/
  @jakarta.annotation.Nullable
  public OffsetDateTime getAsAtCreated() {
    return asAtCreated;
  }




   /**
   * The unique id of the user who created the entity.
   * @return userIdCreated
  **/
  @jakarta.annotation.Nullable
  public String getUserIdCreated() {
    return userIdCreated;
  }




   /**
   * The unique request id of the command that created the entity.
   * @return requestIdCreated
  **/
  @jakarta.annotation.Nullable
  public String getRequestIdCreated() {
    return requestIdCreated;
  }




   /**
   * The asAt datetime at which the entity (including its properties) was last updated in LUSID.
   * @return asAtModified
  **/
  @jakarta.annotation.Nullable
  public OffsetDateTime getAsAtModified() {
    return asAtModified;
  }




   /**
   * The unique id of the user who last updated the entity (including its properties) in LUSID.
   * @return userIdModified
  **/
  @jakarta.annotation.Nullable
  public String getUserIdModified() {
    return userIdModified;
  }




   /**
   * The unique request id of the command that last updated the entity (including its properties) in LUSID.
   * @return requestIdModified
  **/
  @jakarta.annotation.Nullable
  public String getRequestIdModified() {
    return requestIdModified;
  }




   /**
   * The integer version number for the entity (the entity was created at version 1)
   * @return asAtVersionNumber
  **/
  @jakarta.annotation.Nullable
  public Integer getAsAtVersionNumber() {
    return asAtVersionNumber;
  }





  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Version version = (Version) o;
    return Objects.equals(this.effectiveFrom, version.effectiveFrom) &&
        Objects.equals(this.asAtDate, version.asAtDate) &&
        Objects.equals(this.asAtCreated, version.asAtCreated) &&
        Objects.equals(this.userIdCreated, version.userIdCreated) &&
        Objects.equals(this.requestIdCreated, version.requestIdCreated) &&
        Objects.equals(this.asAtModified, version.asAtModified) &&
        Objects.equals(this.userIdModified, version.userIdModified) &&
        Objects.equals(this.requestIdModified, version.requestIdModified) &&
        Objects.equals(this.asAtVersionNumber, version.asAtVersionNumber);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(effectiveFrom, asAtDate, asAtCreated, userIdCreated, requestIdCreated, asAtModified, userIdModified, requestIdModified, asAtVersionNumber);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Version {\n");
    sb.append("    effectiveFrom: ").append(toIndentedString(effectiveFrom)).append("\n");
    sb.append("    asAtDate: ").append(toIndentedString(asAtDate)).append("\n");
    sb.append("    asAtCreated: ").append(toIndentedString(asAtCreated)).append("\n");
    sb.append("    userIdCreated: ").append(toIndentedString(userIdCreated)).append("\n");
    sb.append("    requestIdCreated: ").append(toIndentedString(requestIdCreated)).append("\n");
    sb.append("    asAtModified: ").append(toIndentedString(asAtModified)).append("\n");
    sb.append("    userIdModified: ").append(toIndentedString(userIdModified)).append("\n");
    sb.append("    requestIdModified: ").append(toIndentedString(requestIdModified)).append("\n");
    sb.append("    asAtVersionNumber: ").append(toIndentedString(asAtVersionNumber)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("effectiveFrom");
    openapiFields.add("asAtDate");
    openapiFields.add("asAtCreated");
    openapiFields.add("userIdCreated");
    openapiFields.add("requestIdCreated");
    openapiFields.add("asAtModified");
    openapiFields.add("userIdModified");
    openapiFields.add("requestIdModified");
    openapiFields.add("asAtVersionNumber");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("effectiveFrom");
    openapiRequiredFields.add("asAtDate");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to Version
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Version.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Version is not found in the empty JSON string", Version.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Version.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("userIdCreated") != null && !jsonObj.get("userIdCreated").isJsonNull()) && !jsonObj.get("userIdCreated").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userIdCreated` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userIdCreated").toString()));
      }
      if ((jsonObj.get("requestIdCreated") != null && !jsonObj.get("requestIdCreated").isJsonNull()) && !jsonObj.get("requestIdCreated").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `requestIdCreated` to be a primitive type in the JSON string but got `%s`", jsonObj.get("requestIdCreated").toString()));
      }
      if ((jsonObj.get("userIdModified") != null && !jsonObj.get("userIdModified").isJsonNull()) && !jsonObj.get("userIdModified").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userIdModified` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userIdModified").toString()));
      }
      if ((jsonObj.get("requestIdModified") != null && !jsonObj.get("requestIdModified").isJsonNull()) && !jsonObj.get("requestIdModified").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `requestIdModified` to be a primitive type in the JSON string but got `%s`", jsonObj.get("requestIdModified").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Version.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Version' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Version> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Version.class));

       return (TypeAdapter<T>) new TypeAdapter<Version>() {
           @Override
           public void write(JsonWriter out, Version value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Version read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Version given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Version
  * @throws IOException if the JSON string is invalid with respect to Version
  */
  public static Version fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Version.class);
  }

 /**
  * Convert an instance of Version to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
