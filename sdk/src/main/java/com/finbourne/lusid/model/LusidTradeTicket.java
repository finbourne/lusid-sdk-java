/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import com.finbourne.lusid.model.CurrencyAndAmount;
import com.finbourne.lusid.model.LusidInstrument;
import com.finbourne.lusid.model.Property;
import com.finbourne.lusid.model.ResourceId;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * A LUSID Trade Ticket comprising an instrument, a transaction, and a counterparty.
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class LusidTradeTicket {
  public static final String SERIALIZED_NAME_TRANSACTION_ID = "transactionId";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_ID)
  private String transactionId;

  public static final String SERIALIZED_NAME_TRANSACTION_TYPE = "transactionType";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_TYPE)
  private String transactionType;

  public static final String SERIALIZED_NAME_SOURCE = "source";
  @SerializedName(SERIALIZED_NAME_SOURCE)
  private String source;

  public static final String SERIALIZED_NAME_TRANSACTION_DATE = "transactionDate";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_DATE)
  private String transactionDate;

  public static final String SERIALIZED_NAME_SETTLEMENT_DATE = "settlementDate";
  @SerializedName(SERIALIZED_NAME_SETTLEMENT_DATE)
  private String settlementDate;

  public static final String SERIALIZED_NAME_TOTAL_CONSIDERATION = "totalConsideration";
  @SerializedName(SERIALIZED_NAME_TOTAL_CONSIDERATION)
  private CurrencyAndAmount totalConsideration;

  public static final String SERIALIZED_NAME_UNITS = "units";
  @SerializedName(SERIALIZED_NAME_UNITS)
  private java.math.BigDecimal units;

  public static final String SERIALIZED_NAME_INSTRUMENT_IDENTIFIERS = "instrumentIdentifiers";
  @SerializedName(SERIALIZED_NAME_INSTRUMENT_IDENTIFIERS)
  private Map<String, String> instrumentIdentifiers = new HashMap<>();

  public static final String SERIALIZED_NAME_INSTRUMENT_SCOPE = "instrumentScope";
  @SerializedName(SERIALIZED_NAME_INSTRUMENT_SCOPE)
  private String instrumentScope;

  public static final String SERIALIZED_NAME_INSTRUMENT_NAME = "instrumentName";
  @SerializedName(SERIALIZED_NAME_INSTRUMENT_NAME)
  private String instrumentName;

  public static final String SERIALIZED_NAME_INSTRUMENT_DEFINITION = "instrumentDefinition";
  @SerializedName(SERIALIZED_NAME_INSTRUMENT_DEFINITION)
  private LusidInstrument instrumentDefinition;

  public static final String SERIALIZED_NAME_COUNTERPARTY_AGREEMENT_ID = "counterpartyAgreementId";
  @SerializedName(SERIALIZED_NAME_COUNTERPARTY_AGREEMENT_ID)
  private ResourceId counterpartyAgreementId;

  public static final String SERIALIZED_NAME_INSTRUMENT_PROPERTIES = "instrumentProperties";
  @SerializedName(SERIALIZED_NAME_INSTRUMENT_PROPERTIES)
  private List<Property> instrumentProperties;

  public static final String SERIALIZED_NAME_TRANSACTION_PROPERTIES = "transactionProperties";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_PROPERTIES)
  private List<Property> transactionProperties;

  /**
   * The available values are: LusidTradeTicket, ExternalTradeTicket
   */
  @JsonAdapter(TradeTicketTypeEnum.Adapter.class)
  public enum TradeTicketTypeEnum {
    LUSIDTRADETICKET("LusidTradeTicket"),
    
    EXTERNALTRADETICKET("ExternalTradeTicket");

    private String value;

    TradeTicketTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TradeTicketTypeEnum fromValue(String value) {
      for (TradeTicketTypeEnum b : TradeTicketTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TradeTicketTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TradeTicketTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TradeTicketTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TradeTicketTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TRADE_TICKET_TYPE = "tradeTicketType";
  @SerializedName(SERIALIZED_NAME_TRADE_TICKET_TYPE)
  private TradeTicketTypeEnum tradeTicketType;

  public LusidTradeTicket() {
  }

  public LusidTradeTicket transactionId(String transactionId) {
    
    this.transactionId = transactionId;
    return this;
  }

   /**
   * Transaction ID. Must be unique.
   * @return transactionId
  **/
  @jakarta.annotation.Nonnull
  public String getTransactionId() {
    return transactionId;
  }


  public void setTransactionId(String transactionId) {
    this.transactionId = transactionId;
  }


  public LusidTradeTicket transactionType(String transactionType) {
    
    this.transactionType = transactionType;
    return this;
  }

   /**
   * Type of transaction for processing. Referenced by Transaction Configuration.
   * @return transactionType
  **/
  @jakarta.annotation.Nonnull
  public String getTransactionType() {
    return transactionType;
  }


  public void setTransactionType(String transactionType) {
    this.transactionType = transactionType;
  }


  public LusidTradeTicket source(String source) {
    
    this.source = source;
    return this;
  }

   /**
   * Transaction Source. Referenced by Transaction Configuration.
   * @return source
  **/
  @jakarta.annotation.Nullable
  public String getSource() {
    return source;
  }


  public void setSource(String source) {
    this.source = source;
  }


  public LusidTradeTicket transactionDate(String transactionDate) {
    
    this.transactionDate = transactionDate;
    return this;
  }

   /**
   * Transaction Date. Date at which transaction is known.
   * @return transactionDate
  **/
  @jakarta.annotation.Nonnull
  public String getTransactionDate() {
    return transactionDate;
  }


  public void setTransactionDate(String transactionDate) {
    this.transactionDate = transactionDate;
  }


  public LusidTradeTicket settlementDate(String settlementDate) {
    
    this.settlementDate = settlementDate;
    return this;
  }

   /**
   * Transaction settlement. Date at which transaction is finalised and realised into the system.
   * @return settlementDate
  **/
  @jakarta.annotation.Nonnull
  public String getSettlementDate() {
    return settlementDate;
  }


  public void setSettlementDate(String settlementDate) {
    this.settlementDate = settlementDate;
  }


  public LusidTradeTicket totalConsideration(CurrencyAndAmount totalConsideration) {
    
    this.totalConsideration = totalConsideration;
    return this;
  }

   /**
   * Get totalConsideration
   * @return totalConsideration
  **/
  @jakarta.annotation.Nonnull
  public CurrencyAndAmount getTotalConsideration() {
    return totalConsideration;
  }


  public void setTotalConsideration(CurrencyAndAmount totalConsideration) {
    this.totalConsideration = totalConsideration;
  }


  public LusidTradeTicket units(java.math.BigDecimal units) {
    
    this.units = units;
    return this;
  }

   /**
   * Number of units in the transaction. For an OTC this is somewhat interchangeable with the quantity booked in the  instrument. As M x N or N x M are equivalent it is advised a client chooses one approach and sticks to it.  Arguably either the unit or holding is best unitised.
   * @return units
  **/
  @jakarta.annotation.Nonnull
  public java.math.BigDecimal getUnits() {
    return units;
  }


  public void setUnits(java.math.BigDecimal units) {
    this.units = units;
  }


  public LusidTradeTicket instrumentIdentifiers(Map<String, String> instrumentIdentifiers) {
    
    this.instrumentIdentifiers = instrumentIdentifiers;
    return this;
  }

  public LusidTradeTicket putInstrumentIdentifiersItem(String key, String instrumentIdentifiersItem) {
    if (this.instrumentIdentifiers == null) {
      this.instrumentIdentifiers = new HashMap<>();
    }
    this.instrumentIdentifiers.put(key, instrumentIdentifiersItem);
    return this;
  }

   /**
   * Identifiers for the instrument.
   * @return instrumentIdentifiers
  **/
  @jakarta.annotation.Nonnull
  public Map<String, String> getInstrumentIdentifiers() {
    return instrumentIdentifiers;
  }


  public void setInstrumentIdentifiers(Map<String, String> instrumentIdentifiers) {
    this.instrumentIdentifiers = instrumentIdentifiers;
  }


  public LusidTradeTicket instrumentScope(String instrumentScope) {
    
    this.instrumentScope = instrumentScope;
    return this;
  }

   /**
   * Scope of instrument
   * @return instrumentScope
  **/
  @jakarta.annotation.Nullable
  public String getInstrumentScope() {
    return instrumentScope;
  }


  public void setInstrumentScope(String instrumentScope) {
    this.instrumentScope = instrumentScope;
  }


  public LusidTradeTicket instrumentName(String instrumentName) {
    
    this.instrumentName = instrumentName;
    return this;
  }

   /**
   * Name of instrument
   * @return instrumentName
  **/
  @jakarta.annotation.Nullable
  public String getInstrumentName() {
    return instrumentName;
  }


  public void setInstrumentName(String instrumentName) {
    this.instrumentName = instrumentName;
  }


  public LusidTradeTicket instrumentDefinition(LusidInstrument instrumentDefinition) {
    
    this.instrumentDefinition = instrumentDefinition;
    return this;
  }

   /**
   * Get instrumentDefinition
   * @return instrumentDefinition
  **/
  @jakarta.annotation.Nullable
  public LusidInstrument getInstrumentDefinition() {
    return instrumentDefinition;
  }


  public void setInstrumentDefinition(LusidInstrument instrumentDefinition) {
    this.instrumentDefinition = instrumentDefinition;
  }


  public LusidTradeTicket counterpartyAgreementId(ResourceId counterpartyAgreementId) {
    
    this.counterpartyAgreementId = counterpartyAgreementId;
    return this;
  }

   /**
   * Get counterpartyAgreementId
   * @return counterpartyAgreementId
  **/
  @jakarta.annotation.Nullable
  public ResourceId getCounterpartyAgreementId() {
    return counterpartyAgreementId;
  }


  public void setCounterpartyAgreementId(ResourceId counterpartyAgreementId) {
    this.counterpartyAgreementId = counterpartyAgreementId;
  }


  public LusidTradeTicket instrumentProperties(List<Property> instrumentProperties) {
    
    this.instrumentProperties = instrumentProperties;
    return this;
  }

  public LusidTradeTicket addInstrumentPropertiesItem(Property instrumentPropertiesItem) {
    if (this.instrumentProperties == null) {
      this.instrumentProperties = new ArrayList<>();
    }
    this.instrumentProperties.add(instrumentPropertiesItem);
    return this;
  }

   /**
   * Set of instrument properties (as defined by client/user).
   * @return instrumentProperties
  **/
  @jakarta.annotation.Nullable
  public List<Property> getInstrumentProperties() {
    return instrumentProperties;
  }


  public void setInstrumentProperties(List<Property> instrumentProperties) {
    this.instrumentProperties = instrumentProperties;
  }


  public LusidTradeTicket transactionProperties(List<Property> transactionProperties) {
    
    this.transactionProperties = transactionProperties;
    return this;
  }

  public LusidTradeTicket addTransactionPropertiesItem(Property transactionPropertiesItem) {
    if (this.transactionProperties == null) {
      this.transactionProperties = new ArrayList<>();
    }
    this.transactionProperties.add(transactionPropertiesItem);
    return this;
  }

   /**
   * Set of transaction properties (as defined by client/user).
   * @return transactionProperties
  **/
  @jakarta.annotation.Nullable
  public List<Property> getTransactionProperties() {
    return transactionProperties;
  }


  public void setTransactionProperties(List<Property> transactionProperties) {
    this.transactionProperties = transactionProperties;
  }


  public LusidTradeTicket tradeTicketType(TradeTicketTypeEnum tradeTicketType) {
    
    this.tradeTicketType = tradeTicketType;
    return this;
  }

   /**
   * The available values are: LusidTradeTicket, ExternalTradeTicket
   * @return tradeTicketType
  **/
  @jakarta.annotation.Nonnull
  public TradeTicketTypeEnum getTradeTicketType() {
    return tradeTicketType;
  }


  public void setTradeTicketType(TradeTicketTypeEnum tradeTicketType) {
    this.tradeTicketType = tradeTicketType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LusidTradeTicket lusidTradeTicket = (LusidTradeTicket) o;
    return Objects.equals(this.transactionId, lusidTradeTicket.transactionId) &&
        Objects.equals(this.transactionType, lusidTradeTicket.transactionType) &&
        Objects.equals(this.source, lusidTradeTicket.source) &&
        Objects.equals(this.transactionDate, lusidTradeTicket.transactionDate) &&
        Objects.equals(this.settlementDate, lusidTradeTicket.settlementDate) &&
        Objects.equals(this.totalConsideration, lusidTradeTicket.totalConsideration) &&
        (this.units.compareTo(lusidTradeTicket.getUnits()) == 0) &&
        Objects.equals(this.instrumentIdentifiers, lusidTradeTicket.instrumentIdentifiers) &&
        Objects.equals(this.instrumentScope, lusidTradeTicket.instrumentScope) &&
        Objects.equals(this.instrumentName, lusidTradeTicket.instrumentName) &&
        Objects.equals(this.instrumentDefinition, lusidTradeTicket.instrumentDefinition) &&
        Objects.equals(this.counterpartyAgreementId, lusidTradeTicket.counterpartyAgreementId) &&
        Objects.equals(this.instrumentProperties, lusidTradeTicket.instrumentProperties) &&
        Objects.equals(this.transactionProperties, lusidTradeTicket.transactionProperties) &&
        Objects.equals(this.tradeTicketType, lusidTradeTicket.tradeTicketType);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(transactionId, transactionType, source, transactionDate, settlementDate, totalConsideration, units, instrumentIdentifiers, instrumentScope, instrumentName, instrumentDefinition, counterpartyAgreementId, instrumentProperties, transactionProperties, tradeTicketType);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LusidTradeTicket {\n");
    sb.append("    transactionId: ").append(toIndentedString(transactionId)).append("\n");
    sb.append("    transactionType: ").append(toIndentedString(transactionType)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    transactionDate: ").append(toIndentedString(transactionDate)).append("\n");
    sb.append("    settlementDate: ").append(toIndentedString(settlementDate)).append("\n");
    sb.append("    totalConsideration: ").append(toIndentedString(totalConsideration)).append("\n");
    sb.append("    units: ").append(toIndentedString(units)).append("\n");
    sb.append("    instrumentIdentifiers: ").append(toIndentedString(instrumentIdentifiers)).append("\n");
    sb.append("    instrumentScope: ").append(toIndentedString(instrumentScope)).append("\n");
    sb.append("    instrumentName: ").append(toIndentedString(instrumentName)).append("\n");
    sb.append("    instrumentDefinition: ").append(toIndentedString(instrumentDefinition)).append("\n");
    sb.append("    counterpartyAgreementId: ").append(toIndentedString(counterpartyAgreementId)).append("\n");
    sb.append("    instrumentProperties: ").append(toIndentedString(instrumentProperties)).append("\n");
    sb.append("    transactionProperties: ").append(toIndentedString(transactionProperties)).append("\n");
    sb.append("    tradeTicketType: ").append(toIndentedString(tradeTicketType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("transactionId");
    openapiFields.add("transactionType");
    openapiFields.add("source");
    openapiFields.add("transactionDate");
    openapiFields.add("settlementDate");
    openapiFields.add("totalConsideration");
    openapiFields.add("units");
    openapiFields.add("instrumentIdentifiers");
    openapiFields.add("instrumentScope");
    openapiFields.add("instrumentName");
    openapiFields.add("instrumentDefinition");
    openapiFields.add("counterpartyAgreementId");
    openapiFields.add("instrumentProperties");
    openapiFields.add("transactionProperties");
    openapiFields.add("tradeTicketType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("transactionId");
    openapiRequiredFields.add("transactionType");
    openapiRequiredFields.add("transactionDate");
    openapiRequiredFields.add("settlementDate");
    openapiRequiredFields.add("totalConsideration");
    openapiRequiredFields.add("units");
    openapiRequiredFields.add("instrumentIdentifiers");
    openapiRequiredFields.add("tradeTicketType");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to LusidTradeTicket
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LusidTradeTicket.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LusidTradeTicket is not found in the empty JSON string", LusidTradeTicket.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : LusidTradeTicket.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("transactionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transactionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transactionId").toString()));
      }
      if (!jsonObj.get("transactionType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transactionType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transactionType").toString()));
      }
      if ((jsonObj.get("source") != null && !jsonObj.get("source").isJsonNull()) && !jsonObj.get("source").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `source` to be a primitive type in the JSON string but got `%s`", jsonObj.get("source").toString()));
      }
      if (!jsonObj.get("transactionDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transactionDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transactionDate").toString()));
      }
      if (!jsonObj.get("settlementDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `settlementDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("settlementDate").toString()));
      }
      // validate the required field `totalConsideration`
      CurrencyAndAmount.validateJsonElement(jsonObj.get("totalConsideration"));
      if ((jsonObj.get("instrumentScope") != null && !jsonObj.get("instrumentScope").isJsonNull()) && !jsonObj.get("instrumentScope").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `instrumentScope` to be a primitive type in the JSON string but got `%s`", jsonObj.get("instrumentScope").toString()));
      }
      if ((jsonObj.get("instrumentName") != null && !jsonObj.get("instrumentName").isJsonNull()) && !jsonObj.get("instrumentName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `instrumentName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("instrumentName").toString()));
      }
      // validate the optional field `instrumentDefinition`
      if (jsonObj.get("instrumentDefinition") != null && !jsonObj.get("instrumentDefinition").isJsonNull()) {
        LusidInstrument.validateJsonElement(jsonObj.get("instrumentDefinition"));
      }
      // validate the optional field `counterpartyAgreementId`
      if (jsonObj.get("counterpartyAgreementId") != null && !jsonObj.get("counterpartyAgreementId").isJsonNull()) {
        ResourceId.validateJsonElement(jsonObj.get("counterpartyAgreementId"));
      }
      if (jsonObj.get("instrumentProperties") != null && !jsonObj.get("instrumentProperties").isJsonNull()) {
        JsonArray jsonArrayinstrumentProperties = jsonObj.getAsJsonArray("instrumentProperties");
        if (jsonArrayinstrumentProperties != null) {
          // ensure the json data is an array
          if (!jsonObj.get("instrumentProperties").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `instrumentProperties` to be an array in the JSON string but got `%s`", jsonObj.get("instrumentProperties").toString()));
          }

          // validate the optional field `instrumentProperties` (array)
          for (int i = 0; i < jsonArrayinstrumentProperties.size(); i++) {
            Property.validateJsonElement(jsonArrayinstrumentProperties.get(i));
          };
        }
      }
      if (jsonObj.get("transactionProperties") != null && !jsonObj.get("transactionProperties").isJsonNull()) {
        JsonArray jsonArraytransactionProperties = jsonObj.getAsJsonArray("transactionProperties");
        if (jsonArraytransactionProperties != null) {
          // ensure the json data is an array
          if (!jsonObj.get("transactionProperties").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `transactionProperties` to be an array in the JSON string but got `%s`", jsonObj.get("transactionProperties").toString()));
          }

          // validate the optional field `transactionProperties` (array)
          for (int i = 0; i < jsonArraytransactionProperties.size(); i++) {
            Property.validateJsonElement(jsonArraytransactionProperties.get(i));
          };
        }
      }
      if (!jsonObj.get("tradeTicketType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tradeTicketType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tradeTicketType").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LusidTradeTicket.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LusidTradeTicket' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LusidTradeTicket> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LusidTradeTicket.class));

       return (TypeAdapter<T>) new TypeAdapter<LusidTradeTicket>() {
           @Override
           public void write(JsonWriter out, LusidTradeTicket value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LusidTradeTicket read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of LusidTradeTicket given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of LusidTradeTicket
  * @throws IOException if the JSON string is invalid with respect to LusidTradeTicket
  */
  public static LusidTradeTicket fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LusidTradeTicket.class);
  }

 /**
  * Convert an instance of LusidTradeTicket to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
