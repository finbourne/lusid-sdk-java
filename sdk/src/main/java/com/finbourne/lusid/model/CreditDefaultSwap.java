/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import java.util.Arrays;
import com.finbourne.lusid.model.CdsFlowConventions;
import com.finbourne.lusid.model.CdsProtectionDetailSpecification;
import com.finbourne.lusid.model.FlowConventionName;
import com.finbourne.lusid.model.LusidInstrument;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * LUSID representation of a Credit Default Swap (CDS).
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class CreditDefaultSwap extends LusidInstrument {
  public static final String SERIALIZED_NAME_TICKER = "ticker";
  @SerializedName(SERIALIZED_NAME_TICKER)
  private String ticker;

  public static final String SERIALIZED_NAME_START_DATE = "startDate";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  private OffsetDateTime startDate;

  public static final String SERIALIZED_NAME_MATURITY_DATE = "maturityDate";
  @SerializedName(SERIALIZED_NAME_MATURITY_DATE)
  private OffsetDateTime maturityDate;

  public static final String SERIALIZED_NAME_FLOW_CONVENTIONS = "flowConventions";
  @SerializedName(SERIALIZED_NAME_FLOW_CONVENTIONS)
  private CdsFlowConventions flowConventions;

  public static final String SERIALIZED_NAME_COUPON_RATE = "couponRate";
  @SerializedName(SERIALIZED_NAME_COUPON_RATE)
  private java.math.BigDecimal couponRate;

  public static final String SERIALIZED_NAME_CONVENTION_NAME = "conventionName";
  @SerializedName(SERIALIZED_NAME_CONVENTION_NAME)
  private FlowConventionName conventionName;

  public static final String SERIALIZED_NAME_NOTIONAL = "notional";
  @SerializedName(SERIALIZED_NAME_NOTIONAL)
  private java.math.BigDecimal notional;

  public static final String SERIALIZED_NAME_PROTECTION_DETAIL_SPECIFICATION = "protectionDetailSpecification";
  @SerializedName(SERIALIZED_NAME_PROTECTION_DETAIL_SPECIFICATION)
  private CdsProtectionDetailSpecification protectionDetailSpecification;

  public CreditDefaultSwap() {
    // this.instrumentType = this.getClass().getSimpleName();
  }

  public CreditDefaultSwap ticker(String ticker) {
    
    this.ticker = ticker;
    return this;
  }

   /**
   * A ticker to uniquely specify then entity against which the cds is written.
   * @return ticker
  **/
  @javax.annotation.Nonnull
  public String getTicker() {
    return ticker;
  }


  public void setTicker(String ticker) {
    this.ticker = ticker;
  }


  public CreditDefaultSwap startDate(OffsetDateTime startDate) {
    
    this.startDate = startDate;
    return this;
  }

   /**
   * The start date of the instrument. This is normally synonymous with the trade-date.
   * @return startDate
  **/
  @javax.annotation.Nonnull
  public OffsetDateTime getStartDate() {
    return startDate;
  }


  public void setStartDate(OffsetDateTime startDate) {
    this.startDate = startDate;
  }


  public CreditDefaultSwap maturityDate(OffsetDateTime maturityDate) {
    
    this.maturityDate = maturityDate;
    return this;
  }

   /**
   * The final maturity date of the instrument. This means the last date on which the instruments makes a payment of any amount.  For the avoidance of doubt, that is not necessarily prior to its last sensitivity date for the purposes of risk; e.g. instruments such as  Constant Maturity Swaps (CMS) often have sensitivities to rates that may well be observed or set prior to the maturity date, but refer to a termination date beyond it.
   * @return maturityDate
  **/
  @javax.annotation.Nonnull
  public OffsetDateTime getMaturityDate() {
    return maturityDate;
  }


  public void setMaturityDate(OffsetDateTime maturityDate) {
    this.maturityDate = maturityDate;
  }


  public CreditDefaultSwap flowConventions(CdsFlowConventions flowConventions) {
    
    this.flowConventions = flowConventions;
    return this;
  }

   /**
   * Get flowConventions
   * @return flowConventions
  **/
  @javax.annotation.Nullable
  public CdsFlowConventions getFlowConventions() {
    return flowConventions;
  }


  public void setFlowConventions(CdsFlowConventions flowConventions) {
    this.flowConventions = flowConventions;
  }


  public CreditDefaultSwap couponRate(java.math.BigDecimal couponRate) {
    
    this.couponRate = couponRate;
    return this;
  }

   /**
   * The coupon rate paid on each payment date of the premium leg as a fraction of 100 percent, e.g. \&quot;0.05\&quot; meaning 500 basis points or 5%.  For a standard corporate CDS (North American) this must be either 100bps or 500bps.
   * @return couponRate
  **/
  @javax.annotation.Nonnull
  public java.math.BigDecimal getCouponRate() {
    return couponRate;
  }


  public void setCouponRate(java.math.BigDecimal couponRate) {
    this.couponRate = couponRate;
  }


  public CreditDefaultSwap conventionName(FlowConventionName conventionName) {
    
    this.conventionName = conventionName;
    return this;
  }

   /**
   * Get conventionName
   * @return conventionName
  **/
  @javax.annotation.Nullable
  public FlowConventionName getConventionName() {
    return conventionName;
  }


  public void setConventionName(FlowConventionName conventionName) {
    this.conventionName = conventionName;
  }


  public CreditDefaultSwap notional(java.math.BigDecimal notional) {
    
    this.notional = notional;
    return this;
  }

   /**
   * The notional protected by the Credit Default Swap
   * @return notional
  **/
  @javax.annotation.Nullable
  public java.math.BigDecimal getNotional() {
    return notional;
  }


  public void setNotional(java.math.BigDecimal notional) {
    this.notional = notional;
  }


  public CreditDefaultSwap protectionDetailSpecification(CdsProtectionDetailSpecification protectionDetailSpecification) {
    
    this.protectionDetailSpecification = protectionDetailSpecification;
    return this;
  }

   /**
   * Get protectionDetailSpecification
   * @return protectionDetailSpecification
  **/
  @javax.annotation.Nonnull
  public CdsProtectionDetailSpecification getProtectionDetailSpecification() {
    return protectionDetailSpecification;
  }


  public void setProtectionDetailSpecification(CdsProtectionDetailSpecification protectionDetailSpecification) {
    this.protectionDetailSpecification = protectionDetailSpecification;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreditDefaultSwap creditDefaultSwap = (CreditDefaultSwap) o;
    return Objects.equals(this.ticker, creditDefaultSwap.ticker) &&
        Objects.equals(this.startDate, creditDefaultSwap.startDate) &&
        Objects.equals(this.maturityDate, creditDefaultSwap.maturityDate) &&
        Objects.equals(this.flowConventions, creditDefaultSwap.flowConventions) &&
        (this.couponRate.compareTo(creditDefaultSwap.getCouponRate()) == 0) &&
        Objects.equals(this.conventionName, creditDefaultSwap.conventionName) &&
        (this.notional.compareTo(creditDefaultSwap.getNotional()) == 0) &&
        Objects.equals(this.protectionDetailSpecification, creditDefaultSwap.protectionDetailSpecification) &&
        super.equals(o);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(ticker, startDate, maturityDate, flowConventions, couponRate, conventionName, notional, protectionDetailSpecification, super.hashCode());
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreditDefaultSwap {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    ticker: ").append(toIndentedString(ticker)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    maturityDate: ").append(toIndentedString(maturityDate)).append("\n");
    sb.append("    flowConventions: ").append(toIndentedString(flowConventions)).append("\n");
    sb.append("    couponRate: ").append(toIndentedString(couponRate)).append("\n");
    sb.append("    conventionName: ").append(toIndentedString(conventionName)).append("\n");
    sb.append("    notional: ").append(toIndentedString(notional)).append("\n");
    sb.append("    protectionDetailSpecification: ").append(toIndentedString(protectionDetailSpecification)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("instrumentType");
    openapiFields.add("ticker");
    openapiFields.add("startDate");
    openapiFields.add("maturityDate");
    openapiFields.add("flowConventions");
    openapiFields.add("couponRate");
    openapiFields.add("conventionName");
    openapiFields.add("notional");
    openapiFields.add("protectionDetailSpecification");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("ticker");
    openapiRequiredFields.add("startDate");
    openapiRequiredFields.add("maturityDate");
    openapiRequiredFields.add("couponRate");
    openapiRequiredFields.add("protectionDetailSpecification");
    openapiRequiredFields.add("instrumentType");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CreditDefaultSwap
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!CreditDefaultSwap.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreditDefaultSwap is not found in the empty JSON string", CreditDefaultSwap.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!CreditDefaultSwap.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreditDefaultSwap` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreditDefaultSwap.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreditDefaultSwap.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreditDefaultSwap' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreditDefaultSwap> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreditDefaultSwap.class));

       return (TypeAdapter<T>) new TypeAdapter<CreditDefaultSwap>() {
           @Override
           public void write(JsonWriter out, CreditDefaultSwap value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreditDefaultSwap read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CreditDefaultSwap given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CreditDefaultSwap
  * @throws IOException if the JSON string is invalid with respect to CreditDefaultSwap
  */
  public static CreditDefaultSwap fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreditDefaultSwap.class);
  }

 /**
  * Convert an instance of CreditDefaultSwap to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
