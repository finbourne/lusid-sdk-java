/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import com.finbourne.lusid.model.InstrumentEvent;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * Settlement for FX Forward, including NDF and deliverable.
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class FxForwardSettlementEvent extends InstrumentEvent {
  public static final String SERIALIZED_NAME_MATURITY_DATE = "maturityDate";
  @SerializedName(SERIALIZED_NAME_MATURITY_DATE)
  private OffsetDateTime maturityDate;

  public static final String SERIALIZED_NAME_DOM_AMOUNT_PER_UNIT = "domAmountPerUnit";
  @SerializedName(SERIALIZED_NAME_DOM_AMOUNT_PER_UNIT)
  private java.math.BigDecimal domAmountPerUnit;

  public static final String SERIALIZED_NAME_DOM_CCY = "domCcy";
  @SerializedName(SERIALIZED_NAME_DOM_CCY)
  private String domCcy;

  public static final String SERIALIZED_NAME_FGN_AMOUNT_PER_UNIT = "fgnAmountPerUnit";
  @SerializedName(SERIALIZED_NAME_FGN_AMOUNT_PER_UNIT)
  private java.math.BigDecimal fgnAmountPerUnit;

  public static final String SERIALIZED_NAME_FGN_CCY = "fgnCcy";
  @SerializedName(SERIALIZED_NAME_FGN_CCY)
  private String fgnCcy;

  public static final String SERIALIZED_NAME_IS_NDF = "isNdf";
  @SerializedName(SERIALIZED_NAME_IS_NDF)
  private Boolean isNdf;

  public static final String SERIALIZED_NAME_FIXING_DATE = "fixingDate";
  @SerializedName(SERIALIZED_NAME_FIXING_DATE)
  private OffsetDateTime fixingDate;

  public static final String SERIALIZED_NAME_SETTLEMENT_CCY = "settlementCcy";
  @SerializedName(SERIALIZED_NAME_SETTLEMENT_CCY)
  private String settlementCcy;

  public static final String SERIALIZED_NAME_CASH_FLOW_PER_UNIT = "cashFlowPerUnit";
  @SerializedName(SERIALIZED_NAME_CASH_FLOW_PER_UNIT)
  private java.math.BigDecimal cashFlowPerUnit;

  public static final String SERIALIZED_NAME_DOMESTIC_TO_FOREIGN_RATE = "domesticToForeignRate";
  @SerializedName(SERIALIZED_NAME_DOMESTIC_TO_FOREIGN_RATE)
  private java.math.BigDecimal domesticToForeignRate;

  public static final String SERIALIZED_NAME_DOMESTIC_TO_SETTLEMENT_RATE = "domesticToSettlementRate";
  @SerializedName(SERIALIZED_NAME_DOMESTIC_TO_SETTLEMENT_RATE)
  private java.math.BigDecimal domesticToSettlementRate;

  public static final String SERIALIZED_NAME_FOREIGN_TO_SETTLEMENT_RATE = "foreignToSettlementRate";
  @SerializedName(SERIALIZED_NAME_FOREIGN_TO_SETTLEMENT_RATE)
  private java.math.BigDecimal foreignToSettlementRate;

  public FxForwardSettlementEvent() {
    // this.instrumentEventType = this.getClass().getSimpleName();
  }

  
  public FxForwardSettlementEvent(
     java.math.BigDecimal foreignToSettlementRate
  ) {
    this();
    this.foreignToSettlementRate = foreignToSettlementRate;
  }

  public FxForwardSettlementEvent maturityDate(OffsetDateTime maturityDate) {
    
    this.maturityDate = maturityDate;
    return this;
  }

   /**
   * Maturity date of the forward
   * @return maturityDate
  **/
  @jakarta.annotation.Nonnull
  public OffsetDateTime getMaturityDate() {
    return maturityDate;
  }


  public void setMaturityDate(OffsetDateTime maturityDate) {
    this.maturityDate = maturityDate;
  }


  public FxForwardSettlementEvent domAmountPerUnit(java.math.BigDecimal domAmountPerUnit) {
    
    this.domAmountPerUnit = domAmountPerUnit;
    return this;
  }

   /**
   * Amount per unit in the DomCcy (domestic currency)
   * @return domAmountPerUnit
  **/
  @jakarta.annotation.Nonnull
  public java.math.BigDecimal getDomAmountPerUnit() {
    return domAmountPerUnit;
  }


  public void setDomAmountPerUnit(java.math.BigDecimal domAmountPerUnit) {
    this.domAmountPerUnit = domAmountPerUnit;
  }


  public FxForwardSettlementEvent domCcy(String domCcy) {
    
    this.domCcy = domCcy;
    return this;
  }

   /**
   * The domestic currency of the forward
   * @return domCcy
  **/
  @jakarta.annotation.Nonnull
  public String getDomCcy() {
    return domCcy;
  }


  public void setDomCcy(String domCcy) {
    this.domCcy = domCcy;
  }


  public FxForwardSettlementEvent fgnAmountPerUnit(java.math.BigDecimal fgnAmountPerUnit) {
    
    this.fgnAmountPerUnit = fgnAmountPerUnit;
    return this;
  }

   /**
   * Amount per unit in the FgnCcy (foreign currency)
   * @return fgnAmountPerUnit
  **/
  @jakarta.annotation.Nonnull
  public java.math.BigDecimal getFgnAmountPerUnit() {
    return fgnAmountPerUnit;
  }


  public void setFgnAmountPerUnit(java.math.BigDecimal fgnAmountPerUnit) {
    this.fgnAmountPerUnit = fgnAmountPerUnit;
  }


  public FxForwardSettlementEvent fgnCcy(String fgnCcy) {
    
    this.fgnCcy = fgnCcy;
    return this;
  }

   /**
   * The foreign currency of the forward.
   * @return fgnCcy
  **/
  @jakarta.annotation.Nonnull
  public String getFgnCcy() {
    return fgnCcy;
  }


  public void setFgnCcy(String fgnCcy) {
    this.fgnCcy = fgnCcy;
  }


  public FxForwardSettlementEvent isNdf(Boolean isNdf) {
    
    this.isNdf = isNdf;
    return this;
  }

   /**
   * Is this settlement corresponding to a deliverable forward, or an NDF
   * @return isNdf
  **/
  @jakarta.annotation.Nonnull
  public Boolean getIsNdf() {
    return isNdf;
  }


  public void setIsNdf(Boolean isNdf) {
    this.isNdf = isNdf;
  }


  public FxForwardSettlementEvent fixingDate(OffsetDateTime fixingDate) {
    
    this.fixingDate = fixingDate;
    return this;
  }

   /**
   * Optional. Required if the event is an NDF (i.e. if IsNdf &#x3D; true).  Date of the FxRate fixings.
   * @return fixingDate
  **/
  @jakarta.annotation.Nullable
  public OffsetDateTime getFixingDate() {
    return fixingDate;
  }


  public void setFixingDate(OffsetDateTime fixingDate) {
    this.fixingDate = fixingDate;
  }


  public FxForwardSettlementEvent settlementCcy(String settlementCcy) {
    
    this.settlementCcy = settlementCcy;
    return this;
  }

   /**
   * Optional. Required if the event is an NDF (i.e. if IsNdf &#x3D; true).  May be set to either DomCcy or FgnCcy, or a third currency.
   * @return settlementCcy
  **/
  @jakarta.annotation.Nullable
  public String getSettlementCcy() {
    return settlementCcy;
  }


  public void setSettlementCcy(String settlementCcy) {
    this.settlementCcy = settlementCcy;
  }


  public FxForwardSettlementEvent cashFlowPerUnit(java.math.BigDecimal cashFlowPerUnit) {
    
    this.cashFlowPerUnit = cashFlowPerUnit;
    return this;
  }

   /**
   * Optional. Required if the event is an NDF (i.e. if IsNdf &#x3D; true).  CashFlow per unit. Paid in the SettlementCcy.
   * @return cashFlowPerUnit
  **/
  @jakarta.annotation.Nullable
  public java.math.BigDecimal getCashFlowPerUnit() {
    return cashFlowPerUnit;
  }


  public void setCashFlowPerUnit(java.math.BigDecimal cashFlowPerUnit) {
    this.cashFlowPerUnit = cashFlowPerUnit;
  }


  public FxForwardSettlementEvent domesticToForeignRate(java.math.BigDecimal domesticToForeignRate) {
    
    this.domesticToForeignRate = domesticToForeignRate;
    return this;
  }

   /**
   * Domestic currency to foreign currency FX rate.  Not required, only used to override quotes.
   * @return domesticToForeignRate
  **/
  @jakarta.annotation.Nullable
  public java.math.BigDecimal getDomesticToForeignRate() {
    return domesticToForeignRate;
  }


  public void setDomesticToForeignRate(java.math.BigDecimal domesticToForeignRate) {
    this.domesticToForeignRate = domesticToForeignRate;
  }


  public FxForwardSettlementEvent domesticToSettlementRate(java.math.BigDecimal domesticToSettlementRate) {
    
    this.domesticToSettlementRate = domesticToSettlementRate;
    return this;
  }

   /**
   * Domestic currency to settlement currency FX rate  Not required, only used to override quotes.
   * @return domesticToSettlementRate
  **/
  @jakarta.annotation.Nullable
  public java.math.BigDecimal getDomesticToSettlementRate() {
    return domesticToSettlementRate;
  }


  public void setDomesticToSettlementRate(java.math.BigDecimal domesticToSettlementRate) {
    this.domesticToSettlementRate = domesticToSettlementRate;
  }


   /**
   * Foreign currency to settlement currency FX rate  Not required, only used to override quotes.
   * @return foreignToSettlementRate
  **/
  @jakarta.annotation.Nullable
  public java.math.BigDecimal getForeignToSettlementRate() {
    return foreignToSettlementRate;
  }





  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FxForwardSettlementEvent fxForwardSettlementEvent = (FxForwardSettlementEvent) o;
    return Objects.equals(this.maturityDate, fxForwardSettlementEvent.maturityDate) &&
        (this.domAmountPerUnit.compareTo(fxForwardSettlementEvent.getDomAmountPerUnit()) == 0) &&
        Objects.equals(this.domCcy, fxForwardSettlementEvent.domCcy) &&
        (this.fgnAmountPerUnit.compareTo(fxForwardSettlementEvent.getFgnAmountPerUnit()) == 0) &&
        Objects.equals(this.fgnCcy, fxForwardSettlementEvent.fgnCcy) &&
        Objects.equals(this.isNdf, fxForwardSettlementEvent.isNdf) &&
        Objects.equals(this.fixingDate, fxForwardSettlementEvent.fixingDate) &&
        Objects.equals(this.settlementCcy, fxForwardSettlementEvent.settlementCcy) &&
        (this.cashFlowPerUnit.compareTo(fxForwardSettlementEvent.getCashFlowPerUnit()) == 0) &&
        (this.domesticToForeignRate.compareTo(fxForwardSettlementEvent.getDomesticToForeignRate()) == 0) &&
        (this.domesticToSettlementRate.compareTo(fxForwardSettlementEvent.getDomesticToSettlementRate()) == 0) &&
        (this.foreignToSettlementRate.compareTo(fxForwardSettlementEvent.getForeignToSettlementRate()) == 0) &&
        super.equals(o);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(maturityDate, domAmountPerUnit, domCcy, fgnAmountPerUnit, fgnCcy, isNdf, fixingDate, settlementCcy, cashFlowPerUnit, domesticToForeignRate, domesticToSettlementRate, foreignToSettlementRate, super.hashCode());
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FxForwardSettlementEvent {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    maturityDate: ").append(toIndentedString(maturityDate)).append("\n");
    sb.append("    domAmountPerUnit: ").append(toIndentedString(domAmountPerUnit)).append("\n");
    sb.append("    domCcy: ").append(toIndentedString(domCcy)).append("\n");
    sb.append("    fgnAmountPerUnit: ").append(toIndentedString(fgnAmountPerUnit)).append("\n");
    sb.append("    fgnCcy: ").append(toIndentedString(fgnCcy)).append("\n");
    sb.append("    isNdf: ").append(toIndentedString(isNdf)).append("\n");
    sb.append("    fixingDate: ").append(toIndentedString(fixingDate)).append("\n");
    sb.append("    settlementCcy: ").append(toIndentedString(settlementCcy)).append("\n");
    sb.append("    cashFlowPerUnit: ").append(toIndentedString(cashFlowPerUnit)).append("\n");
    sb.append("    domesticToForeignRate: ").append(toIndentedString(domesticToForeignRate)).append("\n");
    sb.append("    domesticToSettlementRate: ").append(toIndentedString(domesticToSettlementRate)).append("\n");
    sb.append("    foreignToSettlementRate: ").append(toIndentedString(foreignToSettlementRate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("instrumentEventType");
    openapiFields.add("maturityDate");
    openapiFields.add("domAmountPerUnit");
    openapiFields.add("domCcy");
    openapiFields.add("fgnAmountPerUnit");
    openapiFields.add("fgnCcy");
    openapiFields.add("isNdf");
    openapiFields.add("fixingDate");
    openapiFields.add("settlementCcy");
    openapiFields.add("cashFlowPerUnit");
    openapiFields.add("domesticToForeignRate");
    openapiFields.add("domesticToSettlementRate");
    openapiFields.add("foreignToSettlementRate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("maturityDate");
    openapiRequiredFields.add("domAmountPerUnit");
    openapiRequiredFields.add("domCcy");
    openapiRequiredFields.add("fgnAmountPerUnit");
    openapiRequiredFields.add("fgnCcy");
    openapiRequiredFields.add("isNdf");
    openapiRequiredFields.add("instrumentEventType");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to FxForwardSettlementEvent
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FxForwardSettlementEvent.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FxForwardSettlementEvent is not found in the empty JSON string", FxForwardSettlementEvent.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : FxForwardSettlementEvent.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FxForwardSettlementEvent.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FxForwardSettlementEvent' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FxForwardSettlementEvent> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FxForwardSettlementEvent.class));

       return (TypeAdapter<T>) new TypeAdapter<FxForwardSettlementEvent>() {
           @Override
           public void write(JsonWriter out, FxForwardSettlementEvent value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FxForwardSettlementEvent read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of FxForwardSettlementEvent given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of FxForwardSettlementEvent
  * @throws IOException if the JSON string is invalid with respect to FxForwardSettlementEvent
  */
  public static FxForwardSettlementEvent fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FxForwardSettlementEvent.class);
  }

 /**
  * Convert an instance of FxForwardSettlementEvent to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
