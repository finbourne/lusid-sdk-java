/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import com.finbourne.lusid.model.ResourceId;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * Specifies the parameter to be use when performing a Transaction Reconciliation.
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class TransactionReconciliationRequest {
  public static final String SERIALIZED_NAME_LEFT_PORTFOLIO_ID = "leftPortfolioId";
  @SerializedName(SERIALIZED_NAME_LEFT_PORTFOLIO_ID)
  private ResourceId leftPortfolioId;

  public static final String SERIALIZED_NAME_RIGHT_PORTFOLIO_ID = "rightPortfolioId";
  @SerializedName(SERIALIZED_NAME_RIGHT_PORTFOLIO_ID)
  private ResourceId rightPortfolioId;

  public static final String SERIALIZED_NAME_MAPPING_ID = "mappingId";
  @SerializedName(SERIALIZED_NAME_MAPPING_ID)
  private ResourceId mappingId;

  public static final String SERIALIZED_NAME_FROM_TRANSACTION_DATE = "fromTransactionDate";
  @SerializedName(SERIALIZED_NAME_FROM_TRANSACTION_DATE)
  private OffsetDateTime fromTransactionDate;

  public static final String SERIALIZED_NAME_TO_TRANSACTION_DATE = "toTransactionDate";
  @SerializedName(SERIALIZED_NAME_TO_TRANSACTION_DATE)
  private OffsetDateTime toTransactionDate;

  public static final String SERIALIZED_NAME_AS_AT = "asAt";
  @SerializedName(SERIALIZED_NAME_AS_AT)
  private OffsetDateTime asAt;

  public static final String SERIALIZED_NAME_PROPERTY_KEYS = "propertyKeys";
  @SerializedName(SERIALIZED_NAME_PROPERTY_KEYS)
  private List<String> propertyKeys;

  public TransactionReconciliationRequest() {
  }

  public TransactionReconciliationRequest leftPortfolioId(ResourceId leftPortfolioId) {
    
    this.leftPortfolioId = leftPortfolioId;
    return this;
  }

   /**
   * Get leftPortfolioId
   * @return leftPortfolioId
  **/
  @jakarta.annotation.Nonnull
  public ResourceId getLeftPortfolioId() {
    return leftPortfolioId;
  }


  public void setLeftPortfolioId(ResourceId leftPortfolioId) {
    this.leftPortfolioId = leftPortfolioId;
  }


  public TransactionReconciliationRequest rightPortfolioId(ResourceId rightPortfolioId) {
    
    this.rightPortfolioId = rightPortfolioId;
    return this;
  }

   /**
   * Get rightPortfolioId
   * @return rightPortfolioId
  **/
  @jakarta.annotation.Nonnull
  public ResourceId getRightPortfolioId() {
    return rightPortfolioId;
  }


  public void setRightPortfolioId(ResourceId rightPortfolioId) {
    this.rightPortfolioId = rightPortfolioId;
  }


  public TransactionReconciliationRequest mappingId(ResourceId mappingId) {
    
    this.mappingId = mappingId;
    return this;
  }

   /**
   * Get mappingId
   * @return mappingId
  **/
  @jakarta.annotation.Nullable
  public ResourceId getMappingId() {
    return mappingId;
  }


  public void setMappingId(ResourceId mappingId) {
    this.mappingId = mappingId;
  }


  public TransactionReconciliationRequest fromTransactionDate(OffsetDateTime fromTransactionDate) {
    
    this.fromTransactionDate = fromTransactionDate;
    return this;
  }

   /**
   * Get fromTransactionDate
   * @return fromTransactionDate
  **/
  @jakarta.annotation.Nonnull
  public OffsetDateTime getFromTransactionDate() {
    return fromTransactionDate;
  }


  public void setFromTransactionDate(OffsetDateTime fromTransactionDate) {
    this.fromTransactionDate = fromTransactionDate;
  }


  public TransactionReconciliationRequest toTransactionDate(OffsetDateTime toTransactionDate) {
    
    this.toTransactionDate = toTransactionDate;
    return this;
  }

   /**
   * Get toTransactionDate
   * @return toTransactionDate
  **/
  @jakarta.annotation.Nonnull
  public OffsetDateTime getToTransactionDate() {
    return toTransactionDate;
  }


  public void setToTransactionDate(OffsetDateTime toTransactionDate) {
    this.toTransactionDate = toTransactionDate;
  }


  public TransactionReconciliationRequest asAt(OffsetDateTime asAt) {
    
    this.asAt = asAt;
    return this;
  }

   /**
   * Get asAt
   * @return asAt
  **/
  @jakarta.annotation.Nullable
  public OffsetDateTime getAsAt() {
    return asAt;
  }


  public void setAsAt(OffsetDateTime asAt) {
    this.asAt = asAt;
  }


  public TransactionReconciliationRequest propertyKeys(List<String> propertyKeys) {
    
    this.propertyKeys = propertyKeys;
    return this;
  }

  public TransactionReconciliationRequest addPropertyKeysItem(String propertyKeysItem) {
    if (this.propertyKeys == null) {
      this.propertyKeys = new ArrayList<>();
    }
    this.propertyKeys.add(propertyKeysItem);
    return this;
  }

   /**
   * Get propertyKeys
   * @return propertyKeys
  **/
  @jakarta.annotation.Nullable
  public List<String> getPropertyKeys() {
    return propertyKeys;
  }


  public void setPropertyKeys(List<String> propertyKeys) {
    this.propertyKeys = propertyKeys;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TransactionReconciliationRequest transactionReconciliationRequest = (TransactionReconciliationRequest) o;
    return Objects.equals(this.leftPortfolioId, transactionReconciliationRequest.leftPortfolioId) &&
        Objects.equals(this.rightPortfolioId, transactionReconciliationRequest.rightPortfolioId) &&
        Objects.equals(this.mappingId, transactionReconciliationRequest.mappingId) &&
        Objects.equals(this.fromTransactionDate, transactionReconciliationRequest.fromTransactionDate) &&
        Objects.equals(this.toTransactionDate, transactionReconciliationRequest.toTransactionDate) &&
        Objects.equals(this.asAt, transactionReconciliationRequest.asAt) &&
        Objects.equals(this.propertyKeys, transactionReconciliationRequest.propertyKeys);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(leftPortfolioId, rightPortfolioId, mappingId, fromTransactionDate, toTransactionDate, asAt, propertyKeys);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TransactionReconciliationRequest {\n");
    sb.append("    leftPortfolioId: ").append(toIndentedString(leftPortfolioId)).append("\n");
    sb.append("    rightPortfolioId: ").append(toIndentedString(rightPortfolioId)).append("\n");
    sb.append("    mappingId: ").append(toIndentedString(mappingId)).append("\n");
    sb.append("    fromTransactionDate: ").append(toIndentedString(fromTransactionDate)).append("\n");
    sb.append("    toTransactionDate: ").append(toIndentedString(toTransactionDate)).append("\n");
    sb.append("    asAt: ").append(toIndentedString(asAt)).append("\n");
    sb.append("    propertyKeys: ").append(toIndentedString(propertyKeys)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("leftPortfolioId");
    openapiFields.add("rightPortfolioId");
    openapiFields.add("mappingId");
    openapiFields.add("fromTransactionDate");
    openapiFields.add("toTransactionDate");
    openapiFields.add("asAt");
    openapiFields.add("propertyKeys");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("leftPortfolioId");
    openapiRequiredFields.add("rightPortfolioId");
    openapiRequiredFields.add("fromTransactionDate");
    openapiRequiredFields.add("toTransactionDate");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to TransactionReconciliationRequest
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TransactionReconciliationRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TransactionReconciliationRequest is not found in the empty JSON string", TransactionReconciliationRequest.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TransactionReconciliationRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `leftPortfolioId`
      ResourceId.validateJsonElement(jsonObj.get("leftPortfolioId"));
      // validate the required field `rightPortfolioId`
      ResourceId.validateJsonElement(jsonObj.get("rightPortfolioId"));
      // validate the optional field `mappingId`
      if (jsonObj.get("mappingId") != null && !jsonObj.get("mappingId").isJsonNull()) {
        ResourceId.validateJsonElement(jsonObj.get("mappingId"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("propertyKeys") != null && !jsonObj.get("propertyKeys").isJsonNull() && !jsonObj.get("propertyKeys").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `propertyKeys` to be an array in the JSON string but got `%s`", jsonObj.get("propertyKeys").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TransactionReconciliationRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TransactionReconciliationRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TransactionReconciliationRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TransactionReconciliationRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<TransactionReconciliationRequest>() {
           @Override
           public void write(JsonWriter out, TransactionReconciliationRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TransactionReconciliationRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TransactionReconciliationRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TransactionReconciliationRequest
  * @throws IOException if the JSON string is invalid with respect to TransactionReconciliationRequest
  */
  public static TransactionReconciliationRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TransactionReconciliationRequest.class);
  }

 /**
  * Convert an instance of TransactionReconciliationRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
