/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import java.util.Arrays;
import com.finbourne.lusid.model.FlowConventions;
import com.finbourne.lusid.model.Schedule;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * Schedule to define fx conversion of cashflows on complex bonds. If an fx schedule is defined then  on payment schedule generation the coupon and principal payoffs will be wrapped in an fx rate payoff method.  Either the fx rate is predefined (fixed) or relies on fx resets (floating).  Used in representation of dual currency bond.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class FxRateSchedule extends Schedule {
  public static final String SERIALIZED_NAME_FLOW_CONVENTIONS = "flowConventions";
  @SerializedName(SERIALIZED_NAME_FLOW_CONVENTIONS)
  private FlowConventions flowConventions;

  public static final String SERIALIZED_NAME_FX_CONVERSION_TYPES = "fxConversionTypes";
  @SerializedName(SERIALIZED_NAME_FX_CONVERSION_TYPES)
  private List<String> fxConversionTypes;

  public static final String SERIALIZED_NAME_RATE = "rate";
  @SerializedName(SERIALIZED_NAME_RATE)
  private java.math.BigDecimal rate;

  public static final String SERIALIZED_NAME_TO_CURRENCY = "toCurrency";
  @SerializedName(SERIALIZED_NAME_TO_CURRENCY)
  private String toCurrency;

  public FxRateSchedule() {
    // this.scheduleType = this.getClass().getSimpleName();
  }

  public FxRateSchedule flowConventions(FlowConventions flowConventions) {
    
    this.flowConventions = flowConventions;
    return this;
  }

   /**
   * Get flowConventions
   * @return flowConventions
  **/
  @javax.annotation.Nullable
  public FlowConventions getFlowConventions() {
    return flowConventions;
  }


  public void setFlowConventions(FlowConventions flowConventions) {
    this.flowConventions = flowConventions;
  }


  public FxRateSchedule fxConversionTypes(List<String> fxConversionTypes) {
    
    this.fxConversionTypes = fxConversionTypes;
    return this;
  }

  public FxRateSchedule addFxConversionTypesItem(String fxConversionTypesItem) {
    if (this.fxConversionTypes == null) {
      this.fxConversionTypes = new ArrayList<>();
    }
    this.fxConversionTypes.add(fxConversionTypesItem);
    return this;
  }

   /**
   * List of flags to indicate if coupon payments, principal payments or both are converted
   * @return fxConversionTypes
  **/
  @javax.annotation.Nullable
  public List<String> getFxConversionTypes() {
    return fxConversionTypes;
  }


  public void setFxConversionTypes(List<String> fxConversionTypes) {
    this.fxConversionTypes = fxConversionTypes;
  }


  public FxRateSchedule rate(java.math.BigDecimal rate) {
    
    this.rate = rate;
    return this;
  }

   /**
   * FxRate used to convert payments. Assumed to be in units of the ToCurrency so conversion is paymentAmount x fxRate
   * @return rate
  **/
  @javax.annotation.Nullable
  public java.math.BigDecimal getRate() {
    return rate;
  }


  public void setRate(java.math.BigDecimal rate) {
    this.rate = rate;
  }


  public FxRateSchedule toCurrency(String toCurrency) {
    
    this.toCurrency = toCurrency;
    return this;
  }

   /**
   * Currency that payments are converted to
   * @return toCurrency
  **/
  @javax.annotation.Nullable
  public String getToCurrency() {
    return toCurrency;
  }


  public void setToCurrency(String toCurrency) {
    this.toCurrency = toCurrency;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FxRateSchedule fxRateSchedule = (FxRateSchedule) o;
    return Objects.equals(this.flowConventions, fxRateSchedule.flowConventions) &&
        Objects.equals(this.fxConversionTypes, fxRateSchedule.fxConversionTypes) &&
        (this.rate.compareTo(fxRateSchedule.getRate()) == 0) &&
        Objects.equals(this.toCurrency, fxRateSchedule.toCurrency) &&
        super.equals(o);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(flowConventions, fxConversionTypes, rate, toCurrency, super.hashCode());
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FxRateSchedule {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    flowConventions: ").append(toIndentedString(flowConventions)).append("\n");
    sb.append("    fxConversionTypes: ").append(toIndentedString(fxConversionTypes)).append("\n");
    sb.append("    rate: ").append(toIndentedString(rate)).append("\n");
    sb.append("    toCurrency: ").append(toIndentedString(toCurrency)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("scheduleType");
    openapiFields.add("flowConventions");
    openapiFields.add("fxConversionTypes");
    openapiFields.add("rate");
    openapiFields.add("toCurrency");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("scheduleType");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to FxRateSchedule
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!FxRateSchedule.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FxRateSchedule is not found in the empty JSON string", FxRateSchedule.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!FxRateSchedule.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FxRateSchedule` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : FxRateSchedule.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FxRateSchedule.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FxRateSchedule' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FxRateSchedule> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FxRateSchedule.class));

       return (TypeAdapter<T>) new TypeAdapter<FxRateSchedule>() {
           @Override
           public void write(JsonWriter out, FxRateSchedule value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FxRateSchedule read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of FxRateSchedule given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of FxRateSchedule
  * @throws IOException if the JSON string is invalid with respect to FxRateSchedule
  */
  public static FxRateSchedule fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FxRateSchedule.class);
  }

 /**
  * Convert an instance of FxRateSchedule to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
