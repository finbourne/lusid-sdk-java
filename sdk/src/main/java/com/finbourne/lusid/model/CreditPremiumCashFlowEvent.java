/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import com.finbourne.lusid.model.InstrumentEvent;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * Definition of a credit premium cash flow event.  This event describes a premium cashflow for credit default instruments (CDS or CDX).
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class CreditPremiumCashFlowEvent extends InstrumentEvent {
  public static final String SERIALIZED_NAME_EX_DATE = "exDate";
  @SerializedName(SERIALIZED_NAME_EX_DATE)
  private OffsetDateTime exDate;

  public static final String SERIALIZED_NAME_PAYMENT_DATE = "paymentDate";
  @SerializedName(SERIALIZED_NAME_PAYMENT_DATE)
  private OffsetDateTime paymentDate;

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private String currency;

  public static final String SERIALIZED_NAME_CASH_FLOW_PER_UNIT = "cashFlowPerUnit";
  @SerializedName(SERIALIZED_NAME_CASH_FLOW_PER_UNIT)
  private java.math.BigDecimal cashFlowPerUnit;

  public CreditPremiumCashFlowEvent() {
    // this.instrumentEventType = this.getClass().getSimpleName();
  }

  public CreditPremiumCashFlowEvent exDate(OffsetDateTime exDate) {
    
    this.exDate = exDate;
    return this;
  }

   /**
   * The ex-dividend date of the cashflow.
   * @return exDate
  **/
  @jakarta.annotation.Nullable
  public OffsetDateTime getExDate() {
    return exDate;
  }


  public void setExDate(OffsetDateTime exDate) {
    this.exDate = exDate;
  }


  public CreditPremiumCashFlowEvent paymentDate(OffsetDateTime paymentDate) {
    
    this.paymentDate = paymentDate;
    return this;
  }

   /**
   * The payment date of the cashflow.
   * @return paymentDate
  **/
  @jakarta.annotation.Nullable
  public OffsetDateTime getPaymentDate() {
    return paymentDate;
  }


  public void setPaymentDate(OffsetDateTime paymentDate) {
    this.paymentDate = paymentDate;
  }


  public CreditPremiumCashFlowEvent currency(String currency) {
    
    this.currency = currency;
    return this;
  }

   /**
   * The currency in which the cashflow is paid.
   * @return currency
  **/
  @jakarta.annotation.Nonnull
  public String getCurrency() {
    return currency;
  }


  public void setCurrency(String currency) {
    this.currency = currency;
  }


  public CreditPremiumCashFlowEvent cashFlowPerUnit(java.math.BigDecimal cashFlowPerUnit) {
    
    this.cashFlowPerUnit = cashFlowPerUnit;
    return this;
  }

   /**
   * The cashflow amount received for each unit of the instrument held on the ex date.
   * @return cashFlowPerUnit
  **/
  @jakarta.annotation.Nullable
  public java.math.BigDecimal getCashFlowPerUnit() {
    return cashFlowPerUnit;
  }


  public void setCashFlowPerUnit(java.math.BigDecimal cashFlowPerUnit) {
    this.cashFlowPerUnit = cashFlowPerUnit;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreditPremiumCashFlowEvent creditPremiumCashFlowEvent = (CreditPremiumCashFlowEvent) o;
    return Objects.equals(this.exDate, creditPremiumCashFlowEvent.exDate) &&
        Objects.equals(this.paymentDate, creditPremiumCashFlowEvent.paymentDate) &&
        Objects.equals(this.currency, creditPremiumCashFlowEvent.currency) &&
        (this.cashFlowPerUnit.compareTo(creditPremiumCashFlowEvent.getCashFlowPerUnit()) == 0) &&
        super.equals(o);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(exDate, paymentDate, currency, cashFlowPerUnit, super.hashCode());
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreditPremiumCashFlowEvent {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    exDate: ").append(toIndentedString(exDate)).append("\n");
    sb.append("    paymentDate: ").append(toIndentedString(paymentDate)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    cashFlowPerUnit: ").append(toIndentedString(cashFlowPerUnit)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("instrumentEventType");
    openapiFields.add("exDate");
    openapiFields.add("paymentDate");
    openapiFields.add("currency");
    openapiFields.add("cashFlowPerUnit");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("currency");
    openapiRequiredFields.add("instrumentEventType");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to CreditPremiumCashFlowEvent
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreditPremiumCashFlowEvent.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreditPremiumCashFlowEvent is not found in the empty JSON string", CreditPremiumCashFlowEvent.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreditPremiumCashFlowEvent.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreditPremiumCashFlowEvent.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreditPremiumCashFlowEvent' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreditPremiumCashFlowEvent> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreditPremiumCashFlowEvent.class));

       return (TypeAdapter<T>) new TypeAdapter<CreditPremiumCashFlowEvent>() {
           @Override
           public void write(JsonWriter out, CreditPremiumCashFlowEvent value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreditPremiumCashFlowEvent read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CreditPremiumCashFlowEvent given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CreditPremiumCashFlowEvent
  * @throws IOException if the JSON string is invalid with respect to CreditPremiumCashFlowEvent
  */
  public static CreditPremiumCashFlowEvent fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreditPremiumCashFlowEvent.class);
  }

 /**
  * Convert an instance of CreditPremiumCashFlowEvent to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
