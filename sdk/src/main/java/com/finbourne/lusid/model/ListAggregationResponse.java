/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import java.util.Arrays;
import com.finbourne.lusid.model.AggregationMeasureFailureDetail;
import com.finbourne.lusid.model.Link;
import com.finbourne.lusid.model.ResultDataSchema;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.net.URI;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * ListAggregationResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ListAggregationResponse {
  public static final String SERIALIZED_NAME_AGGREGATION_EFFECTIVE_AT = "aggregationEffectiveAt";
  @SerializedName(SERIALIZED_NAME_AGGREGATION_EFFECTIVE_AT)
  private OffsetDateTime aggregationEffectiveAt;

  public static final String SERIALIZED_NAME_AGGREGATION_AS_AT = "aggregationAsAt";
  @SerializedName(SERIALIZED_NAME_AGGREGATION_AS_AT)
  private OffsetDateTime aggregationAsAt;

  public static final String SERIALIZED_NAME_HREF = "href";
  @SerializedName(SERIALIZED_NAME_HREF)
  private URI href;

  public static final String SERIALIZED_NAME_DATA = "data";
  @SerializedName(SERIALIZED_NAME_DATA)
  private List<Map<String, Object>> data;

  public static final String SERIALIZED_NAME_AGGREGATION_CURRENCY = "aggregationCurrency";
  @SerializedName(SERIALIZED_NAME_AGGREGATION_CURRENCY)
  private String aggregationCurrency;

  public static final String SERIALIZED_NAME_DATA_SCHEMA = "dataSchema";
  @SerializedName(SERIALIZED_NAME_DATA_SCHEMA)
  private ResultDataSchema dataSchema;

  public static final String SERIALIZED_NAME_AGGREGATION_FAILURES = "aggregationFailures";
  @SerializedName(SERIALIZED_NAME_AGGREGATION_FAILURES)
  private List<AggregationMeasureFailureDetail> aggregationFailures;

  public static final String SERIALIZED_NAME_LINKS = "links";
  @SerializedName(SERIALIZED_NAME_LINKS)
  private List<Link> links;

  public ListAggregationResponse() {
  }

  public ListAggregationResponse aggregationEffectiveAt(OffsetDateTime aggregationEffectiveAt) {
    
    this.aggregationEffectiveAt = aggregationEffectiveAt;
    return this;
  }

   /**
   * Get aggregationEffectiveAt
   * @return aggregationEffectiveAt
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getAggregationEffectiveAt() {
    return aggregationEffectiveAt;
  }


  public void setAggregationEffectiveAt(OffsetDateTime aggregationEffectiveAt) {
    this.aggregationEffectiveAt = aggregationEffectiveAt;
  }


  public ListAggregationResponse aggregationAsAt(OffsetDateTime aggregationAsAt) {
    
    this.aggregationAsAt = aggregationAsAt;
    return this;
  }

   /**
   * Get aggregationAsAt
   * @return aggregationAsAt
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getAggregationAsAt() {
    return aggregationAsAt;
  }


  public void setAggregationAsAt(OffsetDateTime aggregationAsAt) {
    this.aggregationAsAt = aggregationAsAt;
  }


  public ListAggregationResponse href(URI href) {
    
    this.href = href;
    return this;
  }

   /**
   * Get href
   * @return href
  **/
  @javax.annotation.Nullable
  public URI getHref() {
    return href;
  }


  public void setHref(URI href) {
    this.href = href;
  }


  public ListAggregationResponse data(List<Map<String, Object>> data) {
    
    this.data = data;
    return this;
  }

  public ListAggregationResponse addDataItem(Map<String, Object> dataItem) {
    if (this.data == null) {
      this.data = new ArrayList<>();
    }
    this.data.add(dataItem);
    return this;
  }

   /**
   * Get data
   * @return data
  **/
  @javax.annotation.Nullable
  public List<Map<String, Object>> getData() {
    return data;
  }


  public void setData(List<Map<String, Object>> data) {
    this.data = data;
  }


  public ListAggregationResponse aggregationCurrency(String aggregationCurrency) {
    
    this.aggregationCurrency = aggregationCurrency;
    return this;
  }

   /**
   * Get aggregationCurrency
   * @return aggregationCurrency
  **/
  @javax.annotation.Nullable
  public String getAggregationCurrency() {
    return aggregationCurrency;
  }


  public void setAggregationCurrency(String aggregationCurrency) {
    this.aggregationCurrency = aggregationCurrency;
  }


  public ListAggregationResponse dataSchema(ResultDataSchema dataSchema) {
    
    this.dataSchema = dataSchema;
    return this;
  }

   /**
   * Get dataSchema
   * @return dataSchema
  **/
  @javax.annotation.Nullable
  public ResultDataSchema getDataSchema() {
    return dataSchema;
  }


  public void setDataSchema(ResultDataSchema dataSchema) {
    this.dataSchema = dataSchema;
  }


  public ListAggregationResponse aggregationFailures(List<AggregationMeasureFailureDetail> aggregationFailures) {
    
    this.aggregationFailures = aggregationFailures;
    return this;
  }

  public ListAggregationResponse addAggregationFailuresItem(AggregationMeasureFailureDetail aggregationFailuresItem) {
    if (this.aggregationFailures == null) {
      this.aggregationFailures = new ArrayList<>();
    }
    this.aggregationFailures.add(aggregationFailuresItem);
    return this;
  }

   /**
   * Get aggregationFailures
   * @return aggregationFailures
  **/
  @javax.annotation.Nullable
  public List<AggregationMeasureFailureDetail> getAggregationFailures() {
    return aggregationFailures;
  }


  public void setAggregationFailures(List<AggregationMeasureFailureDetail> aggregationFailures) {
    this.aggregationFailures = aggregationFailures;
  }


  public ListAggregationResponse links(List<Link> links) {
    
    this.links = links;
    return this;
  }

  public ListAggregationResponse addLinksItem(Link linksItem) {
    if (this.links == null) {
      this.links = new ArrayList<>();
    }
    this.links.add(linksItem);
    return this;
  }

   /**
   * Get links
   * @return links
  **/
  @javax.annotation.Nullable
  public List<Link> getLinks() {
    return links;
  }


  public void setLinks(List<Link> links) {
    this.links = links;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ListAggregationResponse listAggregationResponse = (ListAggregationResponse) o;
    return Objects.equals(this.aggregationEffectiveAt, listAggregationResponse.aggregationEffectiveAt) &&
        Objects.equals(this.aggregationAsAt, listAggregationResponse.aggregationAsAt) &&
        Objects.equals(this.href, listAggregationResponse.href) &&
        Objects.equals(this.data, listAggregationResponse.data) &&
        Objects.equals(this.aggregationCurrency, listAggregationResponse.aggregationCurrency) &&
        Objects.equals(this.dataSchema, listAggregationResponse.dataSchema) &&
        Objects.equals(this.aggregationFailures, listAggregationResponse.aggregationFailures) &&
        Objects.equals(this.links, listAggregationResponse.links);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(aggregationEffectiveAt, aggregationAsAt, href, data, aggregationCurrency, dataSchema, aggregationFailures, links);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ListAggregationResponse {\n");
    sb.append("    aggregationEffectiveAt: ").append(toIndentedString(aggregationEffectiveAt)).append("\n");
    sb.append("    aggregationAsAt: ").append(toIndentedString(aggregationAsAt)).append("\n");
    sb.append("    href: ").append(toIndentedString(href)).append("\n");
    sb.append("    data: ").append(toIndentedString(data)).append("\n");
    sb.append("    aggregationCurrency: ").append(toIndentedString(aggregationCurrency)).append("\n");
    sb.append("    dataSchema: ").append(toIndentedString(dataSchema)).append("\n");
    sb.append("    aggregationFailures: ").append(toIndentedString(aggregationFailures)).append("\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("aggregationEffectiveAt");
    openapiFields.add("aggregationAsAt");
    openapiFields.add("href");
    openapiFields.add("data");
    openapiFields.add("aggregationCurrency");
    openapiFields.add("dataSchema");
    openapiFields.add("aggregationFailures");
    openapiFields.add("links");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ListAggregationResponse
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ListAggregationResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ListAggregationResponse is not found in the empty JSON string", ListAggregationResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ListAggregationResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ListAggregationResponse` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("href") != null && !jsonObj.get("href").isJsonNull()) && !jsonObj.get("href").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `href` to be a primitive type in the JSON string but got `%s`", jsonObj.get("href").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("data") != null && !jsonObj.get("data").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `data` to be an array in the JSON string but got `%s`", jsonObj.get("data").toString()));
      }
      if ((jsonObj.get("aggregationCurrency") != null && !jsonObj.get("aggregationCurrency").isJsonNull()) && !jsonObj.get("aggregationCurrency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `aggregationCurrency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("aggregationCurrency").toString()));
      }
      // validate the optional field `dataSchema`
      if (jsonObj.get("dataSchema") != null && !jsonObj.get("dataSchema").isJsonNull()) {
        ResultDataSchema.validateJsonObject(jsonObj.getAsJsonObject("dataSchema"));
      }
      if (jsonObj.get("aggregationFailures") != null && !jsonObj.get("aggregationFailures").isJsonNull()) {
        JsonArray jsonArrayaggregationFailures = jsonObj.getAsJsonArray("aggregationFailures");
        if (jsonArrayaggregationFailures != null) {
          // ensure the json data is an array
          if (!jsonObj.get("aggregationFailures").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `aggregationFailures` to be an array in the JSON string but got `%s`", jsonObj.get("aggregationFailures").toString()));
          }

          // validate the optional field `aggregationFailures` (array)
          for (int i = 0; i < jsonArrayaggregationFailures.size(); i++) {
            AggregationMeasureFailureDetail.validateJsonObject(jsonArrayaggregationFailures.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("links") != null && !jsonObj.get("links").isJsonNull()) {
        JsonArray jsonArraylinks = jsonObj.getAsJsonArray("links");
        if (jsonArraylinks != null) {
          // ensure the json data is an array
          if (!jsonObj.get("links").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `links` to be an array in the JSON string but got `%s`", jsonObj.get("links").toString()));
          }

          // validate the optional field `links` (array)
          for (int i = 0; i < jsonArraylinks.size(); i++) {
            Link.validateJsonObject(jsonArraylinks.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ListAggregationResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ListAggregationResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ListAggregationResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ListAggregationResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<ListAggregationResponse>() {
           @Override
           public void write(JsonWriter out, ListAggregationResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ListAggregationResponse read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ListAggregationResponse given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ListAggregationResponse
  * @throws IOException if the JSON string is invalid with respect to ListAggregationResponse
  */
  public static ListAggregationResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ListAggregationResponse.class);
  }

 /**
  * Convert an instance of ListAggregationResponse to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
