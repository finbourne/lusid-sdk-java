/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import com.finbourne.lusid.model.TransactionSettlementInstruction;
import com.finbourne.lusid.model.TransactionSettlementMovement;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * TransactionSettlementBucket
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class TransactionSettlementBucket {
  public static final String SERIALIZED_NAME_SETTLEMENT_CATEGORY = "settlementCategory";
  @SerializedName(SERIALIZED_NAME_SETTLEMENT_CATEGORY)
  private String settlementCategory;

  public static final String SERIALIZED_NAME_LUSID_INSTRUMENT_ID = "lusidInstrumentId";
  @SerializedName(SERIALIZED_NAME_LUSID_INSTRUMENT_ID)
  private String lusidInstrumentId;

  public static final String SERIALIZED_NAME_INSTRUMENT_SCOPE = "instrumentScope";
  @SerializedName(SERIALIZED_NAME_INSTRUMENT_SCOPE)
  private String instrumentScope;

  public static final String SERIALIZED_NAME_CONTRACTUAL_SETTLEMENT_DATE = "contractualSettlementDate";
  @SerializedName(SERIALIZED_NAME_CONTRACTUAL_SETTLEMENT_DATE)
  private OffsetDateTime contractualSettlementDate;

  public static final String SERIALIZED_NAME_CONTRACTED_UNITS = "contractedUnits";
  @SerializedName(SERIALIZED_NAME_CONTRACTED_UNITS)
  private java.math.BigDecimal contractedUnits;

  public static final String SERIALIZED_NAME_SETTLED_UNITS = "settledUnits";
  @SerializedName(SERIALIZED_NAME_SETTLED_UNITS)
  private java.math.BigDecimal settledUnits;

  public static final String SERIALIZED_NAME_UNSETTLED_UNITS = "unsettledUnits";
  @SerializedName(SERIALIZED_NAME_UNSETTLED_UNITS)
  private java.math.BigDecimal unsettledUnits;

  public static final String SERIALIZED_NAME_OVERDUE_UNITS = "overdueUnits";
  @SerializedName(SERIALIZED_NAME_OVERDUE_UNITS)
  private java.math.BigDecimal overdueUnits;

  public static final String SERIALIZED_NAME_CONFIGURED_SETTLEMENT = "configuredSettlement";
  @SerializedName(SERIALIZED_NAME_CONFIGURED_SETTLEMENT)
  private String configuredSettlement;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_SETTLEMENT_INSTRUCTIONS = "settlementInstructions";
  @SerializedName(SERIALIZED_NAME_SETTLEMENT_INSTRUCTIONS)
  private List<TransactionSettlementInstruction> settlementInstructions;

  public static final String SERIALIZED_NAME_MOVEMENTS = "movements";
  @SerializedName(SERIALIZED_NAME_MOVEMENTS)
  private List<TransactionSettlementMovement> movements;

  public TransactionSettlementBucket() {
  }

  public TransactionSettlementBucket settlementCategory(String settlementCategory) {
    
    this.settlementCategory = settlementCategory;
    return this;
  }

   /**
   * A category representing the set of movement types that this instruction applies to.
   * @return settlementCategory
  **/
  @jakarta.annotation.Nonnull
  public String getSettlementCategory() {
    return settlementCategory;
  }


  public void setSettlementCategory(String settlementCategory) {
    this.settlementCategory = settlementCategory;
  }


  public TransactionSettlementBucket lusidInstrumentId(String lusidInstrumentId) {
    
    this.lusidInstrumentId = lusidInstrumentId;
    return this;
  }

   /**
   * The LusidInstrumentId of the instrument being settled.
   * @return lusidInstrumentId
  **/
  @jakarta.annotation.Nonnull
  public String getLusidInstrumentId() {
    return lusidInstrumentId;
  }


  public void setLusidInstrumentId(String lusidInstrumentId) {
    this.lusidInstrumentId = lusidInstrumentId;
  }


  public TransactionSettlementBucket instrumentScope(String instrumentScope) {
    
    this.instrumentScope = instrumentScope;
    return this;
  }

   /**
   * The Scope of the instrument being settled.
   * @return instrumentScope
  **/
  @jakarta.annotation.Nonnull
  public String getInstrumentScope() {
    return instrumentScope;
  }


  public void setInstrumentScope(String instrumentScope) {
    this.instrumentScope = instrumentScope;
  }


  public TransactionSettlementBucket contractualSettlementDate(OffsetDateTime contractualSettlementDate) {
    
    this.contractualSettlementDate = contractualSettlementDate;
    return this;
  }

   /**
   * The contractual settlement date. Used to match the instruction to the correct settlement bucket.
   * @return contractualSettlementDate
  **/
  @jakarta.annotation.Nullable
  public OffsetDateTime getContractualSettlementDate() {
    return contractualSettlementDate;
  }


  public void setContractualSettlementDate(OffsetDateTime contractualSettlementDate) {
    this.contractualSettlementDate = contractualSettlementDate;
  }


  public TransactionSettlementBucket contractedUnits(java.math.BigDecimal contractedUnits) {
    
    this.contractedUnits = contractedUnits;
    return this;
  }

   /**
   * The contracted units.
   * @return contractedUnits
  **/
  @jakarta.annotation.Nullable
  public java.math.BigDecimal getContractedUnits() {
    return contractedUnits;
  }


  public void setContractedUnits(java.math.BigDecimal contractedUnits) {
    this.contractedUnits = contractedUnits;
  }


  public TransactionSettlementBucket settledUnits(java.math.BigDecimal settledUnits) {
    
    this.settledUnits = settledUnits;
    return this;
  }

   /**
   * The settled units.
   * @return settledUnits
  **/
  @jakarta.annotation.Nullable
  public java.math.BigDecimal getSettledUnits() {
    return settledUnits;
  }


  public void setSettledUnits(java.math.BigDecimal settledUnits) {
    this.settledUnits = settledUnits;
  }


  public TransactionSettlementBucket unsettledUnits(java.math.BigDecimal unsettledUnits) {
    
    this.unsettledUnits = unsettledUnits;
    return this;
  }

   /**
   * The unsettled units.
   * @return unsettledUnits
  **/
  @jakarta.annotation.Nullable
  public java.math.BigDecimal getUnsettledUnits() {
    return unsettledUnits;
  }


  public void setUnsettledUnits(java.math.BigDecimal unsettledUnits) {
    this.unsettledUnits = unsettledUnits;
  }


  public TransactionSettlementBucket overdueUnits(java.math.BigDecimal overdueUnits) {
    
    this.overdueUnits = overdueUnits;
    return this;
  }

   /**
   * The overdue units.
   * @return overdueUnits
  **/
  @jakarta.annotation.Nullable
  public java.math.BigDecimal getOverdueUnits() {
    return overdueUnits;
  }


  public void setOverdueUnits(java.math.BigDecimal overdueUnits) {
    this.overdueUnits = overdueUnits;
  }


  public TransactionSettlementBucket configuredSettlement(String configuredSettlement) {
    
    this.configuredSettlement = configuredSettlement;
    return this;
  }

   /**
   * The method of settlement for the settlement bucket, as defined in the portfolio&#39;s SettlementConfiguration
   * @return configuredSettlement
  **/
  @jakarta.annotation.Nullable
  public String getConfiguredSettlement() {
    return configuredSettlement;
  }


  public void setConfiguredSettlement(String configuredSettlement) {
    this.configuredSettlement = configuredSettlement;
  }


  public TransactionSettlementBucket status(String status) {
    
    this.status = status;
    return this;
  }

   /**
   * The Status of the settlement bucket - &#39;Settled&#39;, &#39;Part Settled&#39; or &#39;Unsettled&#39;.
   * @return status
  **/
  @jakarta.annotation.Nonnull
  public String getStatus() {
    return status;
  }


  public void setStatus(String status) {
    this.status = status;
  }


  public TransactionSettlementBucket settlementInstructions(List<TransactionSettlementInstruction> settlementInstructions) {
    
    this.settlementInstructions = settlementInstructions;
    return this;
  }

  public TransactionSettlementBucket addSettlementInstructionsItem(TransactionSettlementInstruction settlementInstructionsItem) {
    if (this.settlementInstructions == null) {
      this.settlementInstructions = new ArrayList<>();
    }
    this.settlementInstructions.add(settlementInstructionsItem);
    return this;
  }

   /**
   * The settlement instructions received for this settlement bucket.
   * @return settlementInstructions
  **/
  @jakarta.annotation.Nullable
  public List<TransactionSettlementInstruction> getSettlementInstructions() {
    return settlementInstructions;
  }


  public void setSettlementInstructions(List<TransactionSettlementInstruction> settlementInstructions) {
    this.settlementInstructions = settlementInstructions;
  }


  public TransactionSettlementBucket movements(List<TransactionSettlementMovement> movements) {
    
    this.movements = movements;
    return this;
  }

  public TransactionSettlementBucket addMovementsItem(TransactionSettlementMovement movementsItem) {
    if (this.movements == null) {
      this.movements = new ArrayList<>();
    }
    this.movements.add(movementsItem);
    return this;
  }

   /**
   * The movements for the settlement bucket.
   * @return movements
  **/
  @jakarta.annotation.Nullable
  public List<TransactionSettlementMovement> getMovements() {
    return movements;
  }


  public void setMovements(List<TransactionSettlementMovement> movements) {
    this.movements = movements;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TransactionSettlementBucket transactionSettlementBucket = (TransactionSettlementBucket) o;
    return Objects.equals(this.settlementCategory, transactionSettlementBucket.settlementCategory) &&
        Objects.equals(this.lusidInstrumentId, transactionSettlementBucket.lusidInstrumentId) &&
        Objects.equals(this.instrumentScope, transactionSettlementBucket.instrumentScope) &&
        Objects.equals(this.contractualSettlementDate, transactionSettlementBucket.contractualSettlementDate) &&
        (this.contractedUnits.compareTo(transactionSettlementBucket.getContractedUnits()) == 0) &&
        (this.settledUnits.compareTo(transactionSettlementBucket.getSettledUnits()) == 0) &&
        (this.unsettledUnits.compareTo(transactionSettlementBucket.getUnsettledUnits()) == 0) &&
        (this.overdueUnits.compareTo(transactionSettlementBucket.getOverdueUnits()) == 0) &&
        Objects.equals(this.configuredSettlement, transactionSettlementBucket.configuredSettlement) &&
        Objects.equals(this.status, transactionSettlementBucket.status) &&
        Objects.equals(this.settlementInstructions, transactionSettlementBucket.settlementInstructions) &&
        Objects.equals(this.movements, transactionSettlementBucket.movements);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(settlementCategory, lusidInstrumentId, instrumentScope, contractualSettlementDate, contractedUnits, settledUnits, unsettledUnits, overdueUnits, configuredSettlement, status, settlementInstructions, movements);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TransactionSettlementBucket {\n");
    sb.append("    settlementCategory: ").append(toIndentedString(settlementCategory)).append("\n");
    sb.append("    lusidInstrumentId: ").append(toIndentedString(lusidInstrumentId)).append("\n");
    sb.append("    instrumentScope: ").append(toIndentedString(instrumentScope)).append("\n");
    sb.append("    contractualSettlementDate: ").append(toIndentedString(contractualSettlementDate)).append("\n");
    sb.append("    contractedUnits: ").append(toIndentedString(contractedUnits)).append("\n");
    sb.append("    settledUnits: ").append(toIndentedString(settledUnits)).append("\n");
    sb.append("    unsettledUnits: ").append(toIndentedString(unsettledUnits)).append("\n");
    sb.append("    overdueUnits: ").append(toIndentedString(overdueUnits)).append("\n");
    sb.append("    configuredSettlement: ").append(toIndentedString(configuredSettlement)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    settlementInstructions: ").append(toIndentedString(settlementInstructions)).append("\n");
    sb.append("    movements: ").append(toIndentedString(movements)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("settlementCategory");
    openapiFields.add("lusidInstrumentId");
    openapiFields.add("instrumentScope");
    openapiFields.add("contractualSettlementDate");
    openapiFields.add("contractedUnits");
    openapiFields.add("settledUnits");
    openapiFields.add("unsettledUnits");
    openapiFields.add("overdueUnits");
    openapiFields.add("configuredSettlement");
    openapiFields.add("status");
    openapiFields.add("settlementInstructions");
    openapiFields.add("movements");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("settlementCategory");
    openapiRequiredFields.add("lusidInstrumentId");
    openapiRequiredFields.add("instrumentScope");
    openapiRequiredFields.add("status");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to TransactionSettlementBucket
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TransactionSettlementBucket.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TransactionSettlementBucket is not found in the empty JSON string", TransactionSettlementBucket.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TransactionSettlementBucket.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("settlementCategory").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `settlementCategory` to be a primitive type in the JSON string but got `%s`", jsonObj.get("settlementCategory").toString()));
      }
      if (!jsonObj.get("lusidInstrumentId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lusidInstrumentId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lusidInstrumentId").toString()));
      }
      if (!jsonObj.get("instrumentScope").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `instrumentScope` to be a primitive type in the JSON string but got `%s`", jsonObj.get("instrumentScope").toString()));
      }
      if ((jsonObj.get("configuredSettlement") != null && !jsonObj.get("configuredSettlement").isJsonNull()) && !jsonObj.get("configuredSettlement").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `configuredSettlement` to be a primitive type in the JSON string but got `%s`", jsonObj.get("configuredSettlement").toString()));
      }
      if (!jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if (jsonObj.get("settlementInstructions") != null && !jsonObj.get("settlementInstructions").isJsonNull()) {
        JsonArray jsonArraysettlementInstructions = jsonObj.getAsJsonArray("settlementInstructions");
        if (jsonArraysettlementInstructions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("settlementInstructions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `settlementInstructions` to be an array in the JSON string but got `%s`", jsonObj.get("settlementInstructions").toString()));
          }

          // validate the optional field `settlementInstructions` (array)
          for (int i = 0; i < jsonArraysettlementInstructions.size(); i++) {
            TransactionSettlementInstruction.validateJsonElement(jsonArraysettlementInstructions.get(i));
          };
        }
      }
      if (jsonObj.get("movements") != null && !jsonObj.get("movements").isJsonNull()) {
        JsonArray jsonArraymovements = jsonObj.getAsJsonArray("movements");
        if (jsonArraymovements != null) {
          // ensure the json data is an array
          if (!jsonObj.get("movements").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `movements` to be an array in the JSON string but got `%s`", jsonObj.get("movements").toString()));
          }

          // validate the optional field `movements` (array)
          for (int i = 0; i < jsonArraymovements.size(); i++) {
            TransactionSettlementMovement.validateJsonElement(jsonArraymovements.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TransactionSettlementBucket.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TransactionSettlementBucket' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TransactionSettlementBucket> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TransactionSettlementBucket.class));

       return (TypeAdapter<T>) new TypeAdapter<TransactionSettlementBucket>() {
           @Override
           public void write(JsonWriter out, TransactionSettlementBucket value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TransactionSettlementBucket read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TransactionSettlementBucket given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TransactionSettlementBucket
  * @throws IOException if the JSON string is invalid with respect to TransactionSettlementBucket
  */
  public static TransactionSettlementBucket fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TransactionSettlementBucket.class);
  }

 /**
  * Convert an instance of TransactionSettlementBucket to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
