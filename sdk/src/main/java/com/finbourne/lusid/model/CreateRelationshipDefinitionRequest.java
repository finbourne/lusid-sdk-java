/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * CreateRelationshipDefinitionRequest
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class CreateRelationshipDefinitionRequest {
  public static final String SERIALIZED_NAME_SCOPE = "scope";
  @SerializedName(SERIALIZED_NAME_SCOPE)
  private String scope;

  public static final String SERIALIZED_NAME_CODE = "code";
  @SerializedName(SERIALIZED_NAME_CODE)
  private String code;

  public static final String SERIALIZED_NAME_SOURCE_ENTITY_TYPE = "sourceEntityType";
  @SerializedName(SERIALIZED_NAME_SOURCE_ENTITY_TYPE)
  private String sourceEntityType;

  public static final String SERIALIZED_NAME_TARGET_ENTITY_TYPE = "targetEntityType";
  @SerializedName(SERIALIZED_NAME_TARGET_ENTITY_TYPE)
  private String targetEntityType;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_OUTWARD_DESCRIPTION = "outwardDescription";
  @SerializedName(SERIALIZED_NAME_OUTWARD_DESCRIPTION)
  private String outwardDescription;

  public static final String SERIALIZED_NAME_INWARD_DESCRIPTION = "inwardDescription";
  @SerializedName(SERIALIZED_NAME_INWARD_DESCRIPTION)
  private String inwardDescription;

  public static final String SERIALIZED_NAME_LIFE_TIME = "lifeTime";
  @SerializedName(SERIALIZED_NAME_LIFE_TIME)
  private String lifeTime;

  public static final String SERIALIZED_NAME_RELATIONSHIP_CARDINALITY = "relationshipCardinality";
  @SerializedName(SERIALIZED_NAME_RELATIONSHIP_CARDINALITY)
  private String relationshipCardinality;

  public CreateRelationshipDefinitionRequest() {
  }

  public CreateRelationshipDefinitionRequest scope(String scope) {
    
    this.scope = scope;
    return this;
  }

   /**
   * The scope that the relationship definition exists in.
   * @return scope
  **/
  @jakarta.annotation.Nonnull
  public String getScope() {
    return scope;
  }


  public void setScope(String scope) {
    this.scope = scope;
  }


  public CreateRelationshipDefinitionRequest code(String code) {
    
    this.code = code;
    return this;
  }

   /**
   * The code of the relationship definition. Together with the scope this uniquely defines the relationship definition.
   * @return code
  **/
  @jakarta.annotation.Nonnull
  public String getCode() {
    return code;
  }


  public void setCode(String code) {
    this.code = code;
  }


  public CreateRelationshipDefinitionRequest sourceEntityType(String sourceEntityType) {
    
    this.sourceEntityType = sourceEntityType;
    return this;
  }

   /**
   * The entity type of the source entity object. Allowed values are &#39;Portfolio&#39;, &#39;PortfolioGroup&#39;, &#39;Person&#39;, &#39;LegalEntity&#39;, &#39;Instrument&#39; or a custom entity type prefixed with &#39;~&#39;.
   * @return sourceEntityType
  **/
  @jakarta.annotation.Nonnull
  public String getSourceEntityType() {
    return sourceEntityType;
  }


  public void setSourceEntityType(String sourceEntityType) {
    this.sourceEntityType = sourceEntityType;
  }


  public CreateRelationshipDefinitionRequest targetEntityType(String targetEntityType) {
    
    this.targetEntityType = targetEntityType;
    return this;
  }

   /**
   * The entity type of the target entity object. Allowed values are &#39;Portfolio&#39;, &#39;PortfolioGroup&#39;, &#39;Person&#39;, &#39;LegalEntity&#39;, &#39;Instrument&#39; or a custom entity type prefixed with &#39;~&#39;.
   * @return targetEntityType
  **/
  @jakarta.annotation.Nonnull
  public String getTargetEntityType() {
    return targetEntityType;
  }


  public void setTargetEntityType(String targetEntityType) {
    this.targetEntityType = targetEntityType;
  }


  public CreateRelationshipDefinitionRequest displayName(String displayName) {
    
    this.displayName = displayName;
    return this;
  }

   /**
   * The display name of the relationship definition.
   * @return displayName
  **/
  @jakarta.annotation.Nonnull
  public String getDisplayName() {
    return displayName;
  }


  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public CreateRelationshipDefinitionRequest outwardDescription(String outwardDescription) {
    
    this.outwardDescription = outwardDescription;
    return this;
  }

   /**
   * The description to relate source entity object and target entity object.
   * @return outwardDescription
  **/
  @jakarta.annotation.Nonnull
  public String getOutwardDescription() {
    return outwardDescription;
  }


  public void setOutwardDescription(String outwardDescription) {
    this.outwardDescription = outwardDescription;
  }


  public CreateRelationshipDefinitionRequest inwardDescription(String inwardDescription) {
    
    this.inwardDescription = inwardDescription;
    return this;
  }

   /**
   * The description to relate target entity object and source entity object.
   * @return inwardDescription
  **/
  @jakarta.annotation.Nonnull
  public String getInwardDescription() {
    return inwardDescription;
  }


  public void setInwardDescription(String inwardDescription) {
    this.inwardDescription = inwardDescription;
  }


  public CreateRelationshipDefinitionRequest lifeTime(String lifeTime) {
    
    this.lifeTime = lifeTime;
    return this;
  }

   /**
   * Describes how the relationships can change over time. Allowed values are &#39;Perpetual&#39; and &#39;TimeVariant&#39;, defaults to &#39;Perpetual&#39; if not specified.
   * @return lifeTime
  **/
  @jakarta.annotation.Nullable
  public String getLifeTime() {
    return lifeTime;
  }


  public void setLifeTime(String lifeTime) {
    this.lifeTime = lifeTime;
  }


  public CreateRelationshipDefinitionRequest relationshipCardinality(String relationshipCardinality) {
    
    this.relationshipCardinality = relationshipCardinality;
    return this;
  }

   /**
   * Describes the cardinality of the relationship with a specific source entity object and relationships under this definition. Allowed values are &#39;ManyToMany&#39; and &#39;ManyToOne&#39;, defaults to &#39;ManyToMany&#39; if not specified.
   * @return relationshipCardinality
  **/
  @jakarta.annotation.Nullable
  public String getRelationshipCardinality() {
    return relationshipCardinality;
  }


  public void setRelationshipCardinality(String relationshipCardinality) {
    this.relationshipCardinality = relationshipCardinality;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateRelationshipDefinitionRequest createRelationshipDefinitionRequest = (CreateRelationshipDefinitionRequest) o;
    return Objects.equals(this.scope, createRelationshipDefinitionRequest.scope) &&
        Objects.equals(this.code, createRelationshipDefinitionRequest.code) &&
        Objects.equals(this.sourceEntityType, createRelationshipDefinitionRequest.sourceEntityType) &&
        Objects.equals(this.targetEntityType, createRelationshipDefinitionRequest.targetEntityType) &&
        Objects.equals(this.displayName, createRelationshipDefinitionRequest.displayName) &&
        Objects.equals(this.outwardDescription, createRelationshipDefinitionRequest.outwardDescription) &&
        Objects.equals(this.inwardDescription, createRelationshipDefinitionRequest.inwardDescription) &&
        Objects.equals(this.lifeTime, createRelationshipDefinitionRequest.lifeTime) &&
        Objects.equals(this.relationshipCardinality, createRelationshipDefinitionRequest.relationshipCardinality);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(scope, code, sourceEntityType, targetEntityType, displayName, outwardDescription, inwardDescription, lifeTime, relationshipCardinality);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateRelationshipDefinitionRequest {\n");
    sb.append("    scope: ").append(toIndentedString(scope)).append("\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    sourceEntityType: ").append(toIndentedString(sourceEntityType)).append("\n");
    sb.append("    targetEntityType: ").append(toIndentedString(targetEntityType)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    outwardDescription: ").append(toIndentedString(outwardDescription)).append("\n");
    sb.append("    inwardDescription: ").append(toIndentedString(inwardDescription)).append("\n");
    sb.append("    lifeTime: ").append(toIndentedString(lifeTime)).append("\n");
    sb.append("    relationshipCardinality: ").append(toIndentedString(relationshipCardinality)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("scope");
    openapiFields.add("code");
    openapiFields.add("sourceEntityType");
    openapiFields.add("targetEntityType");
    openapiFields.add("displayName");
    openapiFields.add("outwardDescription");
    openapiFields.add("inwardDescription");
    openapiFields.add("lifeTime");
    openapiFields.add("relationshipCardinality");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("scope");
    openapiRequiredFields.add("code");
    openapiRequiredFields.add("sourceEntityType");
    openapiRequiredFields.add("targetEntityType");
    openapiRequiredFields.add("displayName");
    openapiRequiredFields.add("outwardDescription");
    openapiRequiredFields.add("inwardDescription");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to CreateRelationshipDefinitionRequest
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateRelationshipDefinitionRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateRelationshipDefinitionRequest is not found in the empty JSON string", CreateRelationshipDefinitionRequest.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateRelationshipDefinitionRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("scope").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `scope` to be a primitive type in the JSON string but got `%s`", jsonObj.get("scope").toString()));
      }
      if (!jsonObj.get("code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("code").toString()));
      }
      if (!jsonObj.get("sourceEntityType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourceEntityType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sourceEntityType").toString()));
      }
      if (!jsonObj.get("targetEntityType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `targetEntityType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("targetEntityType").toString()));
      }
      if (!jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if (!jsonObj.get("outwardDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `outwardDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("outwardDescription").toString()));
      }
      if (!jsonObj.get("inwardDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `inwardDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("inwardDescription").toString()));
      }
      if ((jsonObj.get("lifeTime") != null && !jsonObj.get("lifeTime").isJsonNull()) && !jsonObj.get("lifeTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lifeTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lifeTime").toString()));
      }
      if ((jsonObj.get("relationshipCardinality") != null && !jsonObj.get("relationshipCardinality").isJsonNull()) && !jsonObj.get("relationshipCardinality").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `relationshipCardinality` to be a primitive type in the JSON string but got `%s`", jsonObj.get("relationshipCardinality").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateRelationshipDefinitionRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateRelationshipDefinitionRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateRelationshipDefinitionRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateRelationshipDefinitionRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateRelationshipDefinitionRequest>() {
           @Override
           public void write(JsonWriter out, CreateRelationshipDefinitionRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateRelationshipDefinitionRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CreateRelationshipDefinitionRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CreateRelationshipDefinitionRequest
  * @throws IOException if the JSON string is invalid with respect to CreateRelationshipDefinitionRequest
  */
  public static CreateRelationshipDefinitionRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateRelationshipDefinitionRequest.class);
  }

 /**
  * Convert an instance of CreateRelationshipDefinitionRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
