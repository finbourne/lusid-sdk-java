/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * CreateRelationRequest
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class CreateRelationRequest {
  public static final String SERIALIZED_NAME_SOURCE_ENTITY_ID = "sourceEntityId";
  @SerializedName(SERIALIZED_NAME_SOURCE_ENTITY_ID)
  private Map<String, String> sourceEntityId = new HashMap<>();

  public static final String SERIALIZED_NAME_TARGET_ENTITY_ID = "targetEntityId";
  @SerializedName(SERIALIZED_NAME_TARGET_ENTITY_ID)
  private Map<String, String> targetEntityId = new HashMap<>();

  public CreateRelationRequest() {
  }

  public CreateRelationRequest sourceEntityId(Map<String, String> sourceEntityId) {
    
    this.sourceEntityId = sourceEntityId;
    return this;
  }

  public CreateRelationRequest putSourceEntityIdItem(String key, String sourceEntityIdItem) {
    if (this.sourceEntityId == null) {
      this.sourceEntityId = new HashMap<>();
    }
    this.sourceEntityId.put(key, sourceEntityIdItem);
    return this;
  }

   /**
   * The identifier of the source entity.
   * @return sourceEntityId
  **/
  @jakarta.annotation.Nonnull
  public Map<String, String> getSourceEntityId() {
    return sourceEntityId;
  }


  public void setSourceEntityId(Map<String, String> sourceEntityId) {
    this.sourceEntityId = sourceEntityId;
  }


  public CreateRelationRequest targetEntityId(Map<String, String> targetEntityId) {
    
    this.targetEntityId = targetEntityId;
    return this;
  }

  public CreateRelationRequest putTargetEntityIdItem(String key, String targetEntityIdItem) {
    if (this.targetEntityId == null) {
      this.targetEntityId = new HashMap<>();
    }
    this.targetEntityId.put(key, targetEntityIdItem);
    return this;
  }

   /**
   * The identifier of the target entity.
   * @return targetEntityId
  **/
  @jakarta.annotation.Nonnull
  public Map<String, String> getTargetEntityId() {
    return targetEntityId;
  }


  public void setTargetEntityId(Map<String, String> targetEntityId) {
    this.targetEntityId = targetEntityId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateRelationRequest createRelationRequest = (CreateRelationRequest) o;
    return Objects.equals(this.sourceEntityId, createRelationRequest.sourceEntityId) &&
        Objects.equals(this.targetEntityId, createRelationRequest.targetEntityId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(sourceEntityId, targetEntityId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateRelationRequest {\n");
    sb.append("    sourceEntityId: ").append(toIndentedString(sourceEntityId)).append("\n");
    sb.append("    targetEntityId: ").append(toIndentedString(targetEntityId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("sourceEntityId");
    openapiFields.add("targetEntityId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("sourceEntityId");
    openapiRequiredFields.add("targetEntityId");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CreateRelationRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!CreateRelationRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateRelationRequest is not found in the empty JSON string", CreateRelationRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!CreateRelationRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateRelationRequest` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateRelationRequest.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateRelationRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateRelationRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateRelationRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateRelationRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateRelationRequest>() {
           @Override
           public void write(JsonWriter out, CreateRelationRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateRelationRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CreateRelationRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CreateRelationRequest
  * @throws IOException if the JSON string is invalid with respect to CreateRelationRequest
  */
  public static CreateRelationRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateRelationRequest.class);
  }

 /**
  * Convert an instance of CreateRelationRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
