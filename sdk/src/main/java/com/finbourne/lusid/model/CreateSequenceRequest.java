/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * CreateSequenceRequest
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class CreateSequenceRequest {
  public static final String SERIALIZED_NAME_CODE = "code";
  @SerializedName(SERIALIZED_NAME_CODE)
  private String code;

  public static final String SERIALIZED_NAME_INCREMENT = "increment";
  @SerializedName(SERIALIZED_NAME_INCREMENT)
  private Long increment;

  public static final String SERIALIZED_NAME_MIN_VALUE = "minValue";
  @SerializedName(SERIALIZED_NAME_MIN_VALUE)
  private Long minValue;

  public static final String SERIALIZED_NAME_MAX_VALUE = "maxValue";
  @SerializedName(SERIALIZED_NAME_MAX_VALUE)
  private Long maxValue;

  public static final String SERIALIZED_NAME_START = "start";
  @SerializedName(SERIALIZED_NAME_START)
  private Long start;

  public static final String SERIALIZED_NAME_CYCLE = "cycle";
  @SerializedName(SERIALIZED_NAME_CYCLE)
  private Boolean cycle;

  public static final String SERIALIZED_NAME_PATTERN = "pattern";
  @SerializedName(SERIALIZED_NAME_PATTERN)
  private String pattern;

  public CreateSequenceRequest() {
  }

  public CreateSequenceRequest code(String code) {
    
    this.code = code;
    return this;
  }

   /**
   * The code of the sequence definition to create
   * @return code
  **/
  @jakarta.annotation.Nonnull
  public String getCode() {
    return code;
  }


  public void setCode(String code) {
    this.code = code;
  }


  public CreateSequenceRequest increment(Long increment) {
    
    this.increment = increment;
    return this;
  }

   /**
   * The value to increment between each value in the sequence
   * @return increment
  **/
  @jakarta.annotation.Nullable
  public Long getIncrement() {
    return increment;
  }


  public void setIncrement(Long increment) {
    this.increment = increment;
  }


  public CreateSequenceRequest minValue(Long minValue) {
    
    this.minValue = minValue;
    return this;
  }

   /**
   * The minimum value of the sequence
   * @return minValue
  **/
  @jakarta.annotation.Nullable
  public Long getMinValue() {
    return minValue;
  }


  public void setMinValue(Long minValue) {
    this.minValue = minValue;
  }


  public CreateSequenceRequest maxValue(Long maxValue) {
    
    this.maxValue = maxValue;
    return this;
  }

   /**
   * The maximum value of the sequence
   * @return maxValue
  **/
  @jakarta.annotation.Nullable
  public Long getMaxValue() {
    return maxValue;
  }


  public void setMaxValue(Long maxValue) {
    this.maxValue = maxValue;
  }


  public CreateSequenceRequest start(Long start) {
    
    this.start = start;
    return this;
  }

   /**
   * The start value of the sequence
   * @return start
  **/
  @jakarta.annotation.Nullable
  public Long getStart() {
    return start;
  }


  public void setStart(Long start) {
    this.start = start;
  }


  public CreateSequenceRequest cycle(Boolean cycle) {
    
    this.cycle = cycle;
    return this;
  }

   /**
   * Set to true to start the sequence over again when it reaches the end. Defaults to false if not provided.
   * @return cycle
  **/
  @jakarta.annotation.Nullable
  public Boolean getCycle() {
    return cycle;
  }


  public void setCycle(Boolean cycle) {
    this.cycle = cycle;
  }


  public CreateSequenceRequest pattern(String pattern) {
    
    this.pattern = pattern;
    return this;
  }

   /**
   * The pattern to be used to generate next values in the sequence. Defaults to null if not provided.
   * @return pattern
  **/
  @jakarta.annotation.Nullable
  public String getPattern() {
    return pattern;
  }


  public void setPattern(String pattern) {
    this.pattern = pattern;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateSequenceRequest createSequenceRequest = (CreateSequenceRequest) o;
    return Objects.equals(this.code, createSequenceRequest.code) &&
        Objects.equals(this.increment, createSequenceRequest.increment) &&
        Objects.equals(this.minValue, createSequenceRequest.minValue) &&
        Objects.equals(this.maxValue, createSequenceRequest.maxValue) &&
        Objects.equals(this.start, createSequenceRequest.start) &&
        Objects.equals(this.cycle, createSequenceRequest.cycle) &&
        Objects.equals(this.pattern, createSequenceRequest.pattern);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(code, increment, minValue, maxValue, start, cycle, pattern);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateSequenceRequest {\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    increment: ").append(toIndentedString(increment)).append("\n");
    sb.append("    minValue: ").append(toIndentedString(minValue)).append("\n");
    sb.append("    maxValue: ").append(toIndentedString(maxValue)).append("\n");
    sb.append("    start: ").append(toIndentedString(start)).append("\n");
    sb.append("    cycle: ").append(toIndentedString(cycle)).append("\n");
    sb.append("    pattern: ").append(toIndentedString(pattern)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("code");
    openapiFields.add("increment");
    openapiFields.add("minValue");
    openapiFields.add("maxValue");
    openapiFields.add("start");
    openapiFields.add("cycle");
    openapiFields.add("pattern");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("code");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CreateSequenceRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!CreateSequenceRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateSequenceRequest is not found in the empty JSON string", CreateSequenceRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!CreateSequenceRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateSequenceRequest` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateSequenceRequest.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("code").toString()));
      }
      if ((jsonObj.get("pattern") != null && !jsonObj.get("pattern").isJsonNull()) && !jsonObj.get("pattern").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pattern` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pattern").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateSequenceRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateSequenceRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateSequenceRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateSequenceRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateSequenceRequest>() {
           @Override
           public void write(JsonWriter out, CreateSequenceRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateSequenceRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CreateSequenceRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CreateSequenceRequest
  * @throws IOException if the JSON string is invalid with respect to CreateSequenceRequest
  */
  public static CreateSequenceRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateSequenceRequest.class);
  }

 /**
  * Convert an instance of CreateSequenceRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
