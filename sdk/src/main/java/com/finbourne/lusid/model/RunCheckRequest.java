/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import com.finbourne.lusid.model.LusidEntityDataset;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * RunCheckRequest
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class RunCheckRequest {
  public static final String SERIALIZED_NAME_LUSID_ENTITY_DATASET = "lusidEntityDataset";
  @SerializedName(SERIALIZED_NAME_LUSID_ENTITY_DATASET)
  private LusidEntityDataset lusidEntityDataset;

  public static final String SERIALIZED_NAME_LIMIT_INDIVIDUAL_BREACHES_PER_RULE = "limitIndividualBreachesPerRule";
  @SerializedName(SERIALIZED_NAME_LIMIT_INDIVIDUAL_BREACHES_PER_RULE)
  private Integer limitIndividualBreachesPerRule;

  public RunCheckRequest() {
  }

  public RunCheckRequest lusidEntityDataset(LusidEntityDataset lusidEntityDataset) {
    
    this.lusidEntityDataset = lusidEntityDataset;
    return this;
  }

   /**
   * Get lusidEntityDataset
   * @return lusidEntityDataset
  **/
  @jakarta.annotation.Nullable
  public LusidEntityDataset getLusidEntityDataset() {
    return lusidEntityDataset;
  }


  public void setLusidEntityDataset(LusidEntityDataset lusidEntityDataset) {
    this.lusidEntityDataset = lusidEntityDataset;
  }


  public RunCheckRequest limitIndividualBreachesPerRule(Integer limitIndividualBreachesPerRule) {
    
    this.limitIndividualBreachesPerRule = limitIndividualBreachesPerRule;
    return this;
  }

   /**
   * The maximum number of individual breaches to return per rule. Defaults to 100 if not specified.
   * @return limitIndividualBreachesPerRule
  **/
  @jakarta.annotation.Nullable
  public Integer getLimitIndividualBreachesPerRule() {
    return limitIndividualBreachesPerRule;
  }


  public void setLimitIndividualBreachesPerRule(Integer limitIndividualBreachesPerRule) {
    this.limitIndividualBreachesPerRule = limitIndividualBreachesPerRule;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RunCheckRequest runCheckRequest = (RunCheckRequest) o;
    return Objects.equals(this.lusidEntityDataset, runCheckRequest.lusidEntityDataset) &&
        Objects.equals(this.limitIndividualBreachesPerRule, runCheckRequest.limitIndividualBreachesPerRule);
  }

  @Override
  public int hashCode() {
    return Objects.hash(lusidEntityDataset, limitIndividualBreachesPerRule);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RunCheckRequest {\n");
    sb.append("    lusidEntityDataset: ").append(toIndentedString(lusidEntityDataset)).append("\n");
    sb.append("    limitIndividualBreachesPerRule: ").append(toIndentedString(limitIndividualBreachesPerRule)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("lusidEntityDataset");
    openapiFields.add("limitIndividualBreachesPerRule");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to RunCheckRequest
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RunCheckRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RunCheckRequest is not found in the empty JSON string", RunCheckRequest.openapiRequiredFields.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `lusidEntityDataset`
      if (jsonObj.get("lusidEntityDataset") != null && !jsonObj.get("lusidEntityDataset").isJsonNull()) {
        LusidEntityDataset.validateJsonElement(jsonObj.get("lusidEntityDataset"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RunCheckRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RunCheckRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RunCheckRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RunCheckRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<RunCheckRequest>() {
           @Override
           public void write(JsonWriter out, RunCheckRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RunCheckRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of RunCheckRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of RunCheckRequest
  * @throws IOException if the JSON string is invalid with respect to RunCheckRequest
  */
  public static RunCheckRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RunCheckRequest.class);
  }

 /**
  * Convert an instance of RunCheckRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
