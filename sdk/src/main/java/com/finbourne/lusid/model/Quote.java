/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import java.util.Arrays;
import com.finbourne.lusid.model.MetricValue;
import com.finbourne.lusid.model.QuoteId;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * The quote id, value and lineage of the quotes all keyed by a unique correlation id.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class Quote {
  public static final String SERIALIZED_NAME_QUOTE_ID = "quoteId";
  @SerializedName(SERIALIZED_NAME_QUOTE_ID)
  private QuoteId quoteId;

  public static final String SERIALIZED_NAME_METRIC_VALUE = "metricValue";
  @SerializedName(SERIALIZED_NAME_METRIC_VALUE)
  private MetricValue metricValue;

  public static final String SERIALIZED_NAME_LINEAGE = "lineage";
  @SerializedName(SERIALIZED_NAME_LINEAGE)
  private String lineage;

  public static final String SERIALIZED_NAME_CUT_LABEL = "cutLabel";
  @SerializedName(SERIALIZED_NAME_CUT_LABEL)
  private String cutLabel;

  public static final String SERIALIZED_NAME_UPLOADED_BY = "uploadedBy";
  @SerializedName(SERIALIZED_NAME_UPLOADED_BY)
  private String uploadedBy;

  public static final String SERIALIZED_NAME_AS_AT = "asAt";
  @SerializedName(SERIALIZED_NAME_AS_AT)
  private OffsetDateTime asAt;

  public static final String SERIALIZED_NAME_SCALE_FACTOR = "scaleFactor";
  @SerializedName(SERIALIZED_NAME_SCALE_FACTOR)
  private java.math.BigDecimal scaleFactor;

  public Quote() {
  }

  public Quote quoteId(QuoteId quoteId) {
    
    this.quoteId = quoteId;
    return this;
  }

   /**
   * Get quoteId
   * @return quoteId
  **/
  @javax.annotation.Nonnull
  public QuoteId getQuoteId() {
    return quoteId;
  }


  public void setQuoteId(QuoteId quoteId) {
    this.quoteId = quoteId;
  }


  public Quote metricValue(MetricValue metricValue) {
    
    this.metricValue = metricValue;
    return this;
  }

   /**
   * Get metricValue
   * @return metricValue
  **/
  @javax.annotation.Nullable
  public MetricValue getMetricValue() {
    return metricValue;
  }


  public void setMetricValue(MetricValue metricValue) {
    this.metricValue = metricValue;
  }


  public Quote lineage(String lineage) {
    
    this.lineage = lineage;
    return this;
  }

   /**
   * Description of the quote&#39;s lineage e.g. &#39;FundAccountant_GreenQuality&#39;.
   * @return lineage
  **/
  @javax.annotation.Nullable
  public String getLineage() {
    return lineage;
  }


  public void setLineage(String lineage) {
    this.lineage = lineage;
  }


  public Quote cutLabel(String cutLabel) {
    
    this.cutLabel = cutLabel;
    return this;
  }

   /**
   * The cut label that this quote was updated or inserted with.
   * @return cutLabel
  **/
  @javax.annotation.Nullable
  public String getCutLabel() {
    return cutLabel;
  }


  public void setCutLabel(String cutLabel) {
    this.cutLabel = cutLabel;
  }


  public Quote uploadedBy(String uploadedBy) {
    
    this.uploadedBy = uploadedBy;
    return this;
  }

   /**
   * The unique id of the user that updated or inserted the quote.
   * @return uploadedBy
  **/
  @javax.annotation.Nonnull
  public String getUploadedBy() {
    return uploadedBy;
  }


  public void setUploadedBy(String uploadedBy) {
    this.uploadedBy = uploadedBy;
  }


  public Quote asAt(OffsetDateTime asAt) {
    
    this.asAt = asAt;
    return this;
  }

   /**
   * The asAt datetime at which the quote was committed to LUSID.
   * @return asAt
  **/
  @javax.annotation.Nonnull
  public OffsetDateTime getAsAt() {
    return asAt;
  }


  public void setAsAt(OffsetDateTime asAt) {
    this.asAt = asAt;
  }


  public Quote scaleFactor(java.math.BigDecimal scaleFactor) {
    
    this.scaleFactor = scaleFactor;
    return this;
  }

   /**
   * An optional scale factor for non-standard scaling of quotes against the instrument. For example, if you wish the quote&#39;s Value to be scaled down by a factor of 100, enter 100. If not supplied, the default ScaleFactor is 1.
   * @return scaleFactor
  **/
  @javax.annotation.Nullable
  public java.math.BigDecimal getScaleFactor() {
    return scaleFactor;
  }


  public void setScaleFactor(java.math.BigDecimal scaleFactor) {
    this.scaleFactor = scaleFactor;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Quote quote = (Quote) o;
    return Objects.equals(this.quoteId, quote.quoteId) &&
        Objects.equals(this.metricValue, quote.metricValue) &&
        Objects.equals(this.lineage, quote.lineage) &&
        Objects.equals(this.cutLabel, quote.cutLabel) &&
        Objects.equals(this.uploadedBy, quote.uploadedBy) &&
        Objects.equals(this.asAt, quote.asAt) &&
        (this.scaleFactor.compareTo(quote.getScaleFactor()) == 0);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(quoteId, metricValue, lineage, cutLabel, uploadedBy, asAt, scaleFactor);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Quote {\n");
    sb.append("    quoteId: ").append(toIndentedString(quoteId)).append("\n");
    sb.append("    metricValue: ").append(toIndentedString(metricValue)).append("\n");
    sb.append("    lineage: ").append(toIndentedString(lineage)).append("\n");
    sb.append("    cutLabel: ").append(toIndentedString(cutLabel)).append("\n");
    sb.append("    uploadedBy: ").append(toIndentedString(uploadedBy)).append("\n");
    sb.append("    asAt: ").append(toIndentedString(asAt)).append("\n");
    sb.append("    scaleFactor: ").append(toIndentedString(scaleFactor)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("quoteId");
    openapiFields.add("metricValue");
    openapiFields.add("lineage");
    openapiFields.add("cutLabel");
    openapiFields.add("uploadedBy");
    openapiFields.add("asAt");
    openapiFields.add("scaleFactor");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("quoteId");
    openapiRequiredFields.add("uploadedBy");
    openapiRequiredFields.add("asAt");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Quote
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Quote.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Quote is not found in the empty JSON string", Quote.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!Quote.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Quote` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Quote.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // validate the required field `quoteId`
      QuoteId.validateJsonObject(jsonObj.getAsJsonObject("quoteId"));
      // validate the optional field `metricValue`
      if (jsonObj.get("metricValue") != null && !jsonObj.get("metricValue").isJsonNull()) {
        MetricValue.validateJsonObject(jsonObj.getAsJsonObject("metricValue"));
      }
      if ((jsonObj.get("lineage") != null && !jsonObj.get("lineage").isJsonNull()) && !jsonObj.get("lineage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lineage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lineage").toString()));
      }
      if ((jsonObj.get("cutLabel") != null && !jsonObj.get("cutLabel").isJsonNull()) && !jsonObj.get("cutLabel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cutLabel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cutLabel").toString()));
      }
      if (!jsonObj.get("uploadedBy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uploadedBy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uploadedBy").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Quote.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Quote' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Quote> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Quote.class));

       return (TypeAdapter<T>) new TypeAdapter<Quote>() {
           @Override
           public void write(JsonWriter out, Quote value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Quote read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Quote given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Quote
  * @throws IOException if the JSON string is invalid with respect to Quote
  */
  public static Quote fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Quote.class);
  }

 /**
  * Convert an instance of Quote to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
