/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import com.finbourne.lusid.model.MarketContextSuppliers;
import com.finbourne.lusid.model.MarketDataKeyRule;
import com.finbourne.lusid.model.MarketDataSpecificRule;
import com.finbourne.lusid.model.MarketOptions;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * Market context node. This defines how LUSID processes parts of a request that require resolution of market data such as instrument prices or  Fx rates. It controls where the data is loaded from and which sources take precedence.
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class MarketContext {
  public static final String SERIALIZED_NAME_MARKET_RULES = "marketRules";
  @SerializedName(SERIALIZED_NAME_MARKET_RULES)
  private List<MarketDataKeyRule> marketRules;

  public static final String SERIALIZED_NAME_SUPPLIERS = "suppliers";
  @SerializedName(SERIALIZED_NAME_SUPPLIERS)
  private MarketContextSuppliers suppliers;

  public static final String SERIALIZED_NAME_OPTIONS = "options";
  @SerializedName(SERIALIZED_NAME_OPTIONS)
  private MarketOptions options;

  public static final String SERIALIZED_NAME_SPECIFIC_RULES = "specificRules";
  @SerializedName(SERIALIZED_NAME_SPECIFIC_RULES)
  private List<MarketDataSpecificRule> specificRules;

  public MarketContext() {
  }

  public MarketContext marketRules(List<MarketDataKeyRule> marketRules) {
    
    this.marketRules = marketRules;
    return this;
  }

  public MarketContext addMarketRulesItem(MarketDataKeyRule marketRulesItem) {
    if (this.marketRules == null) {
      this.marketRules = new ArrayList<>();
    }
    this.marketRules.add(marketRulesItem);
    return this;
  }

   /**
   * The set of rules that define how to resolve particular use cases. These can be relatively general or specific in nature.  Nominally any number are possible and will be processed in order where applicable. However, there is evidently a potential  for increased computational cost where many rules must be applied to resolve data. Ensuring that portfolios are structured in  such a way as to reduce the number of rules required is therefore sensible.
   * @return marketRules
  **/
  @jakarta.annotation.Nullable
  public List<MarketDataKeyRule> getMarketRules() {
    return marketRules;
  }


  public void setMarketRules(List<MarketDataKeyRule> marketRules) {
    this.marketRules = marketRules;
  }


  public MarketContext suppliers(MarketContextSuppliers suppliers) {
    
    this.suppliers = suppliers;
    return this;
  }

   /**
   * Get suppliers
   * @return suppliers
  **/
  @jakarta.annotation.Nullable
  public MarketContextSuppliers getSuppliers() {
    return suppliers;
  }


  public void setSuppliers(MarketContextSuppliers suppliers) {
    this.suppliers = suppliers;
  }


  public MarketContext options(MarketOptions options) {
    
    this.options = options;
    return this;
  }

   /**
   * Get options
   * @return options
  **/
  @jakarta.annotation.Nullable
  public MarketOptions getOptions() {
    return options;
  }


  public void setOptions(MarketOptions options) {
    this.options = options;
  }


  public MarketContext specificRules(List<MarketDataSpecificRule> specificRules) {
    
    this.specificRules = specificRules;
    return this;
  }

  public MarketContext addSpecificRulesItem(MarketDataSpecificRule specificRulesItem) {
    if (this.specificRules == null) {
      this.specificRules = new ArrayList<>();
    }
    this.specificRules.add(specificRulesItem);
    return this;
  }

   /**
   * Extends market data key rules to be able to catch dependencies depending on where the dependency comes from, as opposed to what the dependency is asking for.  Using two specific rules, one could instruct rates curves requested by bonds to be retrieved from a different scope than rates curves requested by swaps.  WARNING: The use of specific rules impacts performance. Where possible, one should use MarketDataKeyRules only.
   * @return specificRules
  **/
  @jakarta.annotation.Nullable
  public List<MarketDataSpecificRule> getSpecificRules() {
    return specificRules;
  }


  public void setSpecificRules(List<MarketDataSpecificRule> specificRules) {
    this.specificRules = specificRules;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MarketContext marketContext = (MarketContext) o;
    return Objects.equals(this.marketRules, marketContext.marketRules) &&
        Objects.equals(this.suppliers, marketContext.suppliers) &&
        Objects.equals(this.options, marketContext.options) &&
        Objects.equals(this.specificRules, marketContext.specificRules);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(marketRules, suppliers, options, specificRules);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MarketContext {\n");
    sb.append("    marketRules: ").append(toIndentedString(marketRules)).append("\n");
    sb.append("    suppliers: ").append(toIndentedString(suppliers)).append("\n");
    sb.append("    options: ").append(toIndentedString(options)).append("\n");
    sb.append("    specificRules: ").append(toIndentedString(specificRules)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("marketRules");
    openapiFields.add("suppliers");
    openapiFields.add("options");
    openapiFields.add("specificRules");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to MarketContext
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!MarketContext.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MarketContext is not found in the empty JSON string", MarketContext.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!MarketContext.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MarketContext` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if (jsonObj.get("marketRules") != null && !jsonObj.get("marketRules").isJsonNull()) {
        JsonArray jsonArraymarketRules = jsonObj.getAsJsonArray("marketRules");
        if (jsonArraymarketRules != null) {
          // ensure the json data is an array
          if (!jsonObj.get("marketRules").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `marketRules` to be an array in the JSON string but got `%s`", jsonObj.get("marketRules").toString()));
          }

          // validate the optional field `marketRules` (array)
          for (int i = 0; i < jsonArraymarketRules.size(); i++) {
            MarketDataKeyRule.validateJsonObject(jsonArraymarketRules.get(i).getAsJsonObject());
          };
        }
      }
      // validate the optional field `suppliers`
      if (jsonObj.get("suppliers") != null && !jsonObj.get("suppliers").isJsonNull()) {
        MarketContextSuppliers.validateJsonObject(jsonObj.getAsJsonObject("suppliers"));
      }
      // validate the optional field `options`
      if (jsonObj.get("options") != null && !jsonObj.get("options").isJsonNull()) {
        MarketOptions.validateJsonObject(jsonObj.getAsJsonObject("options"));
      }
      if (jsonObj.get("specificRules") != null && !jsonObj.get("specificRules").isJsonNull()) {
        JsonArray jsonArrayspecificRules = jsonObj.getAsJsonArray("specificRules");
        if (jsonArrayspecificRules != null) {
          // ensure the json data is an array
          if (!jsonObj.get("specificRules").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `specificRules` to be an array in the JSON string but got `%s`", jsonObj.get("specificRules").toString()));
          }

          // validate the optional field `specificRules` (array)
          for (int i = 0; i < jsonArrayspecificRules.size(); i++) {
            MarketDataSpecificRule.validateJsonObject(jsonArrayspecificRules.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MarketContext.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MarketContext' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MarketContext> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MarketContext.class));

       return (TypeAdapter<T>) new TypeAdapter<MarketContext>() {
           @Override
           public void write(JsonWriter out, MarketContext value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MarketContext read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of MarketContext given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of MarketContext
  * @throws IOException if the JSON string is invalid with respect to MarketContext
  */
  public static MarketContext fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MarketContext.class);
  }

 /**
  * Convert an instance of MarketContext to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
