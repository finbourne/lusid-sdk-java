/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import com.finbourne.lusid.model.Link;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * GroupReconciliationReviewStatuses
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class GroupReconciliationReviewStatuses {
  public static final String SERIALIZED_NAME_COUNT_PENDING = "countPending";
  @SerializedName(SERIALIZED_NAME_COUNT_PENDING)
  private Integer countPending;

  public static final String SERIALIZED_NAME_LINK_PENDING = "linkPending";
  @SerializedName(SERIALIZED_NAME_LINK_PENDING)
  private Link linkPending;

  public static final String SERIALIZED_NAME_COUNT_REVIEWED = "countReviewed";
  @SerializedName(SERIALIZED_NAME_COUNT_REVIEWED)
  private Integer countReviewed;

  public static final String SERIALIZED_NAME_LINK_REVIEWED = "linkReviewed";
  @SerializedName(SERIALIZED_NAME_LINK_REVIEWED)
  private Link linkReviewed;

  public static final String SERIALIZED_NAME_COUNT_MATCHED = "countMatched";
  @SerializedName(SERIALIZED_NAME_COUNT_MATCHED)
  private Integer countMatched;

  public static final String SERIALIZED_NAME_LINK_MATCHED = "linkMatched";
  @SerializedName(SERIALIZED_NAME_LINK_MATCHED)
  private Link linkMatched;

  public static final String SERIALIZED_NAME_COUNT_INVALID = "countInvalid";
  @SerializedName(SERIALIZED_NAME_COUNT_INVALID)
  private Integer countInvalid;

  public static final String SERIALIZED_NAME_LINK_INVALID = "linkInvalid";
  @SerializedName(SERIALIZED_NAME_LINK_INVALID)
  private Link linkInvalid;

  public GroupReconciliationReviewStatuses() {
  }

  public GroupReconciliationReviewStatuses countPending(Integer countPending) {
    
    this.countPending = countPending;
    return this;
  }

   /**
   * The number of comparison results of reviewStatus \&quot;Pending\&quot; with this instanceId and reconciliationType
   * @return countPending
  **/
  @jakarta.annotation.Nonnull
  public Integer getCountPending() {
    return countPending;
  }


  public void setCountPending(Integer countPending) {
    this.countPending = countPending;
  }


  public GroupReconciliationReviewStatuses linkPending(Link linkPending) {
    
    this.linkPending = linkPending;
    return this;
  }

   /**
   * Get linkPending
   * @return linkPending
  **/
  @jakarta.annotation.Nonnull
  public Link getLinkPending() {
    return linkPending;
  }


  public void setLinkPending(Link linkPending) {
    this.linkPending = linkPending;
  }


  public GroupReconciliationReviewStatuses countReviewed(Integer countReviewed) {
    
    this.countReviewed = countReviewed;
    return this;
  }

   /**
   * The number of comparison results of reviewStatus \&quot;Reviewed\&quot; with this instanceId and reconciliationType
   * @return countReviewed
  **/
  @jakarta.annotation.Nonnull
  public Integer getCountReviewed() {
    return countReviewed;
  }


  public void setCountReviewed(Integer countReviewed) {
    this.countReviewed = countReviewed;
  }


  public GroupReconciliationReviewStatuses linkReviewed(Link linkReviewed) {
    
    this.linkReviewed = linkReviewed;
    return this;
  }

   /**
   * Get linkReviewed
   * @return linkReviewed
  **/
  @jakarta.annotation.Nonnull
  public Link getLinkReviewed() {
    return linkReviewed;
  }


  public void setLinkReviewed(Link linkReviewed) {
    this.linkReviewed = linkReviewed;
  }


  public GroupReconciliationReviewStatuses countMatched(Integer countMatched) {
    
    this.countMatched = countMatched;
    return this;
  }

   /**
   * The number of comparison results of reviewStatus \&quot;Matched\&quot; with this instanceId and reconciliationType
   * @return countMatched
  **/
  @jakarta.annotation.Nonnull
  public Integer getCountMatched() {
    return countMatched;
  }


  public void setCountMatched(Integer countMatched) {
    this.countMatched = countMatched;
  }


  public GroupReconciliationReviewStatuses linkMatched(Link linkMatched) {
    
    this.linkMatched = linkMatched;
    return this;
  }

   /**
   * Get linkMatched
   * @return linkMatched
  **/
  @jakarta.annotation.Nonnull
  public Link getLinkMatched() {
    return linkMatched;
  }


  public void setLinkMatched(Link linkMatched) {
    this.linkMatched = linkMatched;
  }


  public GroupReconciliationReviewStatuses countInvalid(Integer countInvalid) {
    
    this.countInvalid = countInvalid;
    return this;
  }

   /**
   * The number of comparison results of reviewStatus \&quot;Invalid\&quot; with this instanceId and reconciliationType
   * @return countInvalid
  **/
  @jakarta.annotation.Nonnull
  public Integer getCountInvalid() {
    return countInvalid;
  }


  public void setCountInvalid(Integer countInvalid) {
    this.countInvalid = countInvalid;
  }


  public GroupReconciliationReviewStatuses linkInvalid(Link linkInvalid) {
    
    this.linkInvalid = linkInvalid;
    return this;
  }

   /**
   * Get linkInvalid
   * @return linkInvalid
  **/
  @jakarta.annotation.Nonnull
  public Link getLinkInvalid() {
    return linkInvalid;
  }


  public void setLinkInvalid(Link linkInvalid) {
    this.linkInvalid = linkInvalid;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GroupReconciliationReviewStatuses groupReconciliationReviewStatuses = (GroupReconciliationReviewStatuses) o;
    return Objects.equals(this.countPending, groupReconciliationReviewStatuses.countPending) &&
        Objects.equals(this.linkPending, groupReconciliationReviewStatuses.linkPending) &&
        Objects.equals(this.countReviewed, groupReconciliationReviewStatuses.countReviewed) &&
        Objects.equals(this.linkReviewed, groupReconciliationReviewStatuses.linkReviewed) &&
        Objects.equals(this.countMatched, groupReconciliationReviewStatuses.countMatched) &&
        Objects.equals(this.linkMatched, groupReconciliationReviewStatuses.linkMatched) &&
        Objects.equals(this.countInvalid, groupReconciliationReviewStatuses.countInvalid) &&
        Objects.equals(this.linkInvalid, groupReconciliationReviewStatuses.linkInvalid);
  }

  @Override
  public int hashCode() {
    return Objects.hash(countPending, linkPending, countReviewed, linkReviewed, countMatched, linkMatched, countInvalid, linkInvalid);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GroupReconciliationReviewStatuses {\n");
    sb.append("    countPending: ").append(toIndentedString(countPending)).append("\n");
    sb.append("    linkPending: ").append(toIndentedString(linkPending)).append("\n");
    sb.append("    countReviewed: ").append(toIndentedString(countReviewed)).append("\n");
    sb.append("    linkReviewed: ").append(toIndentedString(linkReviewed)).append("\n");
    sb.append("    countMatched: ").append(toIndentedString(countMatched)).append("\n");
    sb.append("    linkMatched: ").append(toIndentedString(linkMatched)).append("\n");
    sb.append("    countInvalid: ").append(toIndentedString(countInvalid)).append("\n");
    sb.append("    linkInvalid: ").append(toIndentedString(linkInvalid)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("countPending");
    openapiFields.add("linkPending");
    openapiFields.add("countReviewed");
    openapiFields.add("linkReviewed");
    openapiFields.add("countMatched");
    openapiFields.add("linkMatched");
    openapiFields.add("countInvalid");
    openapiFields.add("linkInvalid");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("countPending");
    openapiRequiredFields.add("linkPending");
    openapiRequiredFields.add("countReviewed");
    openapiRequiredFields.add("linkReviewed");
    openapiRequiredFields.add("countMatched");
    openapiRequiredFields.add("linkMatched");
    openapiRequiredFields.add("countInvalid");
    openapiRequiredFields.add("linkInvalid");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to GroupReconciliationReviewStatuses
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GroupReconciliationReviewStatuses.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GroupReconciliationReviewStatuses is not found in the empty JSON string", GroupReconciliationReviewStatuses.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GroupReconciliationReviewStatuses.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `linkPending`
      Link.validateJsonElement(jsonObj.get("linkPending"));
      // validate the required field `linkReviewed`
      Link.validateJsonElement(jsonObj.get("linkReviewed"));
      // validate the required field `linkMatched`
      Link.validateJsonElement(jsonObj.get("linkMatched"));
      // validate the required field `linkInvalid`
      Link.validateJsonElement(jsonObj.get("linkInvalid"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GroupReconciliationReviewStatuses.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GroupReconciliationReviewStatuses' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GroupReconciliationReviewStatuses> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GroupReconciliationReviewStatuses.class));

       return (TypeAdapter<T>) new TypeAdapter<GroupReconciliationReviewStatuses>() {
           @Override
           public void write(JsonWriter out, GroupReconciliationReviewStatuses value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GroupReconciliationReviewStatuses read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of GroupReconciliationReviewStatuses given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of GroupReconciliationReviewStatuses
  * @throws IOException if the JSON string is invalid with respect to GroupReconciliationReviewStatuses
  */
  public static GroupReconciliationReviewStatuses fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GroupReconciliationReviewStatuses.class);
  }

 /**
  * Convert an instance of GroupReconciliationReviewStatuses to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
