/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import com.finbourne.lusid.model.ResourceId;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * Returns entity, used for configuring the calculation of aggregated returns.
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ReturnsEntity {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private ResourceId id;

  public static final String SERIALIZED_NAME_RECIPE_ID = "recipeId";
  @SerializedName(SERIALIZED_NAME_RECIPE_ID)
  private ResourceId recipeId;

  public static final String SERIALIZED_NAME_RECIPE_ENTITY = "recipeEntity";
  @SerializedName(SERIALIZED_NAME_RECIPE_ENTITY)
  private String recipeEntity;

  public static final String SERIALIZED_NAME_FEE_HANDLING = "feeHandling";
  @SerializedName(SERIALIZED_NAME_FEE_HANDLING)
  private String feeHandling;

  public static final String SERIALIZED_NAME_FLOW_HANDLING = "flowHandling";
  @SerializedName(SERIALIZED_NAME_FLOW_HANDLING)
  private String flowHandling;

  public static final String SERIALIZED_NAME_BUSINESS_CALENDAR = "businessCalendar";
  @SerializedName(SERIALIZED_NAME_BUSINESS_CALENDAR)
  private String businessCalendar;

  public static final String SERIALIZED_NAME_HANDLE_FLOW_DISCREPANCY = "handleFlowDiscrepancy";
  @SerializedName(SERIALIZED_NAME_HANDLE_FLOW_DISCREPANCY)
  private String handleFlowDiscrepancy;

  public ReturnsEntity() {
  }

  public ReturnsEntity id(ResourceId id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @jakarta.annotation.Nonnull
  public ResourceId getId() {
    return id;
  }


  public void setId(ResourceId id) {
    this.id = id;
  }


  public ReturnsEntity recipeId(ResourceId recipeId) {
    
    this.recipeId = recipeId;
    return this;
  }

   /**
   * Get recipeId
   * @return recipeId
  **/
  @jakarta.annotation.Nullable
  public ResourceId getRecipeId() {
    return recipeId;
  }


  public void setRecipeId(ResourceId recipeId) {
    this.recipeId = recipeId;
  }


  public ReturnsEntity recipeEntity(String recipeEntity) {
    
    this.recipeEntity = recipeEntity;
    return this;
  }

   /**
   * Entity a recipe is retrieved from for use in the aggregated returns calculation. Either RecipeId or RecipeEntity must be specified.
   * @return recipeEntity
  **/
  @jakarta.annotation.Nullable
  public String getRecipeEntity() {
    return recipeEntity;
  }


  public void setRecipeEntity(String recipeEntity) {
    this.recipeEntity = recipeEntity;
  }


  public ReturnsEntity feeHandling(String feeHandling) {
    
    this.feeHandling = feeHandling;
    return this;
  }

   /**
   * Configures how fees are handled in the aggregated returns calculation.
   * @return feeHandling
  **/
  @jakarta.annotation.Nullable
  public String getFeeHandling() {
    return feeHandling;
  }


  public void setFeeHandling(String feeHandling) {
    this.feeHandling = feeHandling;
  }


  public ReturnsEntity flowHandling(String flowHandling) {
    
    this.flowHandling = flowHandling;
    return this;
  }

   /**
   * Configures how flows are handled in the aggregated returns calculation.
   * @return flowHandling
  **/
  @jakarta.annotation.Nullable
  public String getFlowHandling() {
    return flowHandling;
  }


  public void setFlowHandling(String flowHandling) {
    this.flowHandling = flowHandling;
  }


  public ReturnsEntity businessCalendar(String businessCalendar) {
    
    this.businessCalendar = businessCalendar;
    return this;
  }

   /**
   * Calendar used in the aggregated returns calculation.
   * @return businessCalendar
  **/
  @jakarta.annotation.Nullable
  public String getBusinessCalendar() {
    return businessCalendar;
  }


  public void setBusinessCalendar(String businessCalendar) {
    this.businessCalendar = businessCalendar;
  }


  public ReturnsEntity handleFlowDiscrepancy(String handleFlowDiscrepancy) {
    
    this.handleFlowDiscrepancy = handleFlowDiscrepancy;
    return this;
  }

   /**
   * Configures handling for the case where net flows do not match the sum of tagged flows.
   * @return handleFlowDiscrepancy
  **/
  @jakarta.annotation.Nullable
  public String getHandleFlowDiscrepancy() {
    return handleFlowDiscrepancy;
  }


  public void setHandleFlowDiscrepancy(String handleFlowDiscrepancy) {
    this.handleFlowDiscrepancy = handleFlowDiscrepancy;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReturnsEntity returnsEntity = (ReturnsEntity) o;
    return Objects.equals(this.id, returnsEntity.id) &&
        Objects.equals(this.recipeId, returnsEntity.recipeId) &&
        Objects.equals(this.recipeEntity, returnsEntity.recipeEntity) &&
        Objects.equals(this.feeHandling, returnsEntity.feeHandling) &&
        Objects.equals(this.flowHandling, returnsEntity.flowHandling) &&
        Objects.equals(this.businessCalendar, returnsEntity.businessCalendar) &&
        Objects.equals(this.handleFlowDiscrepancy, returnsEntity.handleFlowDiscrepancy);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, recipeId, recipeEntity, feeHandling, flowHandling, businessCalendar, handleFlowDiscrepancy);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReturnsEntity {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    recipeId: ").append(toIndentedString(recipeId)).append("\n");
    sb.append("    recipeEntity: ").append(toIndentedString(recipeEntity)).append("\n");
    sb.append("    feeHandling: ").append(toIndentedString(feeHandling)).append("\n");
    sb.append("    flowHandling: ").append(toIndentedString(flowHandling)).append("\n");
    sb.append("    businessCalendar: ").append(toIndentedString(businessCalendar)).append("\n");
    sb.append("    handleFlowDiscrepancy: ").append(toIndentedString(handleFlowDiscrepancy)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("recipeId");
    openapiFields.add("recipeEntity");
    openapiFields.add("feeHandling");
    openapiFields.add("flowHandling");
    openapiFields.add("businessCalendar");
    openapiFields.add("handleFlowDiscrepancy");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ReturnsEntity
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ReturnsEntity.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReturnsEntity is not found in the empty JSON string", ReturnsEntity.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ReturnsEntity.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `id`
      ResourceId.validateJsonElement(jsonObj.get("id"));
      // validate the optional field `recipeId`
      if (jsonObj.get("recipeId") != null && !jsonObj.get("recipeId").isJsonNull()) {
        ResourceId.validateJsonElement(jsonObj.get("recipeId"));
      }
      if ((jsonObj.get("recipeEntity") != null && !jsonObj.get("recipeEntity").isJsonNull()) && !jsonObj.get("recipeEntity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recipeEntity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recipeEntity").toString()));
      }
      if ((jsonObj.get("feeHandling") != null && !jsonObj.get("feeHandling").isJsonNull()) && !jsonObj.get("feeHandling").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `feeHandling` to be a primitive type in the JSON string but got `%s`", jsonObj.get("feeHandling").toString()));
      }
      if ((jsonObj.get("flowHandling") != null && !jsonObj.get("flowHandling").isJsonNull()) && !jsonObj.get("flowHandling").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `flowHandling` to be a primitive type in the JSON string but got `%s`", jsonObj.get("flowHandling").toString()));
      }
      if ((jsonObj.get("businessCalendar") != null && !jsonObj.get("businessCalendar").isJsonNull()) && !jsonObj.get("businessCalendar").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `businessCalendar` to be a primitive type in the JSON string but got `%s`", jsonObj.get("businessCalendar").toString()));
      }
      if ((jsonObj.get("handleFlowDiscrepancy") != null && !jsonObj.get("handleFlowDiscrepancy").isJsonNull()) && !jsonObj.get("handleFlowDiscrepancy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `handleFlowDiscrepancy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("handleFlowDiscrepancy").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReturnsEntity.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReturnsEntity' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReturnsEntity> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReturnsEntity.class));

       return (TypeAdapter<T>) new TypeAdapter<ReturnsEntity>() {
           @Override
           public void write(JsonWriter out, ReturnsEntity value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ReturnsEntity read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ReturnsEntity given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ReturnsEntity
  * @throws IOException if the JSON string is invalid with respect to ReturnsEntity
  */
  public static ReturnsEntity fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReturnsEntity.class);
  }

 /**
  * Convert an instance of ReturnsEntity to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
