/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import com.finbourne.lusid.model.InstrumentDefinition;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * A collection of instrument search results
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class InstrumentMatch {
  public static final String SERIALIZED_NAME_MASTERED_INSTRUMENTS = "masteredInstruments";
  @SerializedName(SERIALIZED_NAME_MASTERED_INSTRUMENTS)
  private List<InstrumentDefinition> masteredInstruments;

  public static final String SERIALIZED_NAME_EXTERNAL_INSTRUMENTS = "externalInstruments";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_INSTRUMENTS)
  private List<InstrumentDefinition> externalInstruments;

  public InstrumentMatch() {
  }

  public InstrumentMatch masteredInstruments(List<InstrumentDefinition> masteredInstruments) {
    
    this.masteredInstruments = masteredInstruments;
    return this;
  }

  public InstrumentMatch addMasteredInstrumentsItem(InstrumentDefinition masteredInstrumentsItem) {
    if (this.masteredInstruments == null) {
      this.masteredInstruments = new ArrayList<>();
    }
    this.masteredInstruments.add(masteredInstrumentsItem);
    return this;
  }

   /**
   * The collection of instruments found by the search which have been mastered within LUSID.
   * @return masteredInstruments
  **/
  @jakarta.annotation.Nullable
  public List<InstrumentDefinition> getMasteredInstruments() {
    return masteredInstruments;
  }


  public void setMasteredInstruments(List<InstrumentDefinition> masteredInstruments) {
    this.masteredInstruments = masteredInstruments;
  }


  public InstrumentMatch externalInstruments(List<InstrumentDefinition> externalInstruments) {
    
    this.externalInstruments = externalInstruments;
    return this;
  }

  public InstrumentMatch addExternalInstrumentsItem(InstrumentDefinition externalInstrumentsItem) {
    if (this.externalInstruments == null) {
      this.externalInstruments = new ArrayList<>();
    }
    this.externalInstruments.add(externalInstrumentsItem);
    return this;
  }

   /**
   * The collection of instruments found by the search which have not been mastered within LUSID and instead found via OpenFIGI.
   * @return externalInstruments
  **/
  @jakarta.annotation.Nullable
  public List<InstrumentDefinition> getExternalInstruments() {
    return externalInstruments;
  }


  public void setExternalInstruments(List<InstrumentDefinition> externalInstruments) {
    this.externalInstruments = externalInstruments;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InstrumentMatch instrumentMatch = (InstrumentMatch) o;
    return Objects.equals(this.masteredInstruments, instrumentMatch.masteredInstruments) &&
        Objects.equals(this.externalInstruments, instrumentMatch.externalInstruments);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(masteredInstruments, externalInstruments);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InstrumentMatch {\n");
    sb.append("    masteredInstruments: ").append(toIndentedString(masteredInstruments)).append("\n");
    sb.append("    externalInstruments: ").append(toIndentedString(externalInstruments)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("masteredInstruments");
    openapiFields.add("externalInstruments");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to InstrumentMatch
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!InstrumentMatch.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InstrumentMatch is not found in the empty JSON string", InstrumentMatch.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!InstrumentMatch.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InstrumentMatch` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if (jsonObj.get("masteredInstruments") != null && !jsonObj.get("masteredInstruments").isJsonNull()) {
        JsonArray jsonArraymasteredInstruments = jsonObj.getAsJsonArray("masteredInstruments");
        if (jsonArraymasteredInstruments != null) {
          // ensure the json data is an array
          if (!jsonObj.get("masteredInstruments").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `masteredInstruments` to be an array in the JSON string but got `%s`", jsonObj.get("masteredInstruments").toString()));
          }

          // validate the optional field `masteredInstruments` (array)
          for (int i = 0; i < jsonArraymasteredInstruments.size(); i++) {
            InstrumentDefinition.validateJsonObject(jsonArraymasteredInstruments.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("externalInstruments") != null && !jsonObj.get("externalInstruments").isJsonNull()) {
        JsonArray jsonArrayexternalInstruments = jsonObj.getAsJsonArray("externalInstruments");
        if (jsonArrayexternalInstruments != null) {
          // ensure the json data is an array
          if (!jsonObj.get("externalInstruments").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `externalInstruments` to be an array in the JSON string but got `%s`", jsonObj.get("externalInstruments").toString()));
          }

          // validate the optional field `externalInstruments` (array)
          for (int i = 0; i < jsonArrayexternalInstruments.size(); i++) {
            InstrumentDefinition.validateJsonObject(jsonArrayexternalInstruments.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InstrumentMatch.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InstrumentMatch' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InstrumentMatch> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InstrumentMatch.class));

       return (TypeAdapter<T>) new TypeAdapter<InstrumentMatch>() {
           @Override
           public void write(JsonWriter out, InstrumentMatch value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InstrumentMatch read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of InstrumentMatch given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of InstrumentMatch
  * @throws IOException if the JSON string is invalid with respect to InstrumentMatch
  */
  public static InstrumentMatch fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InstrumentMatch.class);
  }

 /**
  * Convert an instance of InstrumentMatch to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
