/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import com.finbourne.lusid.model.DayMonth;
import com.finbourne.lusid.model.Property;
import com.finbourne.lusid.model.ResourceId;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * FeeRequest
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class FeeRequest {
  public static final String SERIALIZED_NAME_CODE = "code";
  @SerializedName(SERIALIZED_NAME_CODE)
  private String code;

  public static final String SERIALIZED_NAME_FEE_TYPE = "feeType";
  @SerializedName(SERIALIZED_NAME_FEE_TYPE)
  private ResourceId feeType;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ORIGIN = "origin";
  @SerializedName(SERIALIZED_NAME_ORIGIN)
  private String origin;

  public static final String SERIALIZED_NAME_CALCULATION_BASE = "calculationBase";
  @SerializedName(SERIALIZED_NAME_CALCULATION_BASE)
  private String calculationBase;

  public static final String SERIALIZED_NAME_ACCRUAL_CURRENCY = "accrualCurrency";
  @SerializedName(SERIALIZED_NAME_ACCRUAL_CURRENCY)
  private String accrualCurrency;

  public static final String SERIALIZED_NAME_TREATMENT = "treatment";
  @SerializedName(SERIALIZED_NAME_TREATMENT)
  private String treatment;

  public static final String SERIALIZED_NAME_TOTAL_ANNUAL_ACCRUAL_AMOUNT = "totalAnnualAccrualAmount";
  @SerializedName(SERIALIZED_NAME_TOTAL_ANNUAL_ACCRUAL_AMOUNT)
  private java.math.BigDecimal totalAnnualAccrualAmount;

  public static final String SERIALIZED_NAME_FEE_RATE_PERCENTAGE = "feeRatePercentage";
  @SerializedName(SERIALIZED_NAME_FEE_RATE_PERCENTAGE)
  private java.math.BigDecimal feeRatePercentage;

  public static final String SERIALIZED_NAME_PAYABLE_FREQUENCY = "payableFrequency";
  @SerializedName(SERIALIZED_NAME_PAYABLE_FREQUENCY)
  private String payableFrequency;

  public static final String SERIALIZED_NAME_BUSINESS_DAY_CONVENTION = "businessDayConvention";
  @SerializedName(SERIALIZED_NAME_BUSINESS_DAY_CONVENTION)
  private String businessDayConvention;

  public static final String SERIALIZED_NAME_START_DATE = "startDate";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  private OffsetDateTime startDate;

  public static final String SERIALIZED_NAME_END_DATE = "endDate";
  @SerializedName(SERIALIZED_NAME_END_DATE)
  private OffsetDateTime endDate;

  public static final String SERIALIZED_NAME_ANCHOR_DATE = "anchorDate";
  @SerializedName(SERIALIZED_NAME_ANCHOR_DATE)
  private DayMonth anchorDate;

  public static final String SERIALIZED_NAME_PROPERTIES = "properties";
  @SerializedName(SERIALIZED_NAME_PROPERTIES)
  private Map<String, Property> properties;

  public static final String SERIALIZED_NAME_PORTFOLIO_ID = "portfolioId";
  @SerializedName(SERIALIZED_NAME_PORTFOLIO_ID)
  private ResourceId portfolioId;

  public FeeRequest() {
  }

  public FeeRequest code(String code) {
    
    this.code = code;
    return this;
  }

   /**
   * The code of the Fee.
   * @return code
  **/
  @jakarta.annotation.Nonnull
  public String getCode() {
    return code;
  }


  public void setCode(String code) {
    this.code = code;
  }


  public FeeRequest feeType(ResourceId feeType) {
    
    this.feeType = feeType;
    return this;
  }

   /**
   * Get feeType
   * @return feeType
  **/
  @jakarta.annotation.Nonnull
  public ResourceId getFeeType() {
    return feeType;
  }


  public void setFeeType(ResourceId feeType) {
    this.feeType = feeType;
  }


  public FeeRequest name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * The name of the Fee.
   * @return name
  **/
  @jakarta.annotation.Nonnull
  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public FeeRequest description(String description) {
    
    this.description = description;
    return this;
  }

   /**
   * A description for the Fee.
   * @return description
  **/
  @jakarta.annotation.Nullable
  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    this.description = description;
  }


  public FeeRequest origin(String origin) {
    
    this.origin = origin;
    return this;
  }

   /**
   * The origin or source of the Fee accrual.
   * @return origin
  **/
  @jakarta.annotation.Nullable
  public String getOrigin() {
    return origin;
  }


  public void setOrigin(String origin) {
    this.origin = origin;
  }


  public FeeRequest calculationBase(String calculationBase) {
    
    this.calculationBase = calculationBase;
    return this;
  }

   /**
   * The calculation base for the Fee that is calculated using a percentage. (TotalAnnualAccrualAmount and CalculationBase cannot both be present)
   * @return calculationBase
  **/
  @jakarta.annotation.Nullable
  public String getCalculationBase() {
    return calculationBase;
  }


  public void setCalculationBase(String calculationBase) {
    this.calculationBase = calculationBase;
  }


  public FeeRequest accrualCurrency(String accrualCurrency) {
    
    this.accrualCurrency = accrualCurrency;
    return this;
  }

   /**
   * The accrual currency.
   * @return accrualCurrency
  **/
  @jakarta.annotation.Nonnull
  public String getAccrualCurrency() {
    return accrualCurrency;
  }


  public void setAccrualCurrency(String accrualCurrency) {
    this.accrualCurrency = accrualCurrency;
  }


  public FeeRequest treatment(String treatment) {
    
    this.treatment = treatment;
    return this;
  }

   /**
   * The accrual period of the Fee; &#39;Monthly&#39; or &#39;Daily&#39;.
   * @return treatment
  **/
  @jakarta.annotation.Nonnull
  public String getTreatment() {
    return treatment;
  }


  public void setTreatment(String treatment) {
    this.treatment = treatment;
  }


  public FeeRequest totalAnnualAccrualAmount(java.math.BigDecimal totalAnnualAccrualAmount) {
    
    this.totalAnnualAccrualAmount = totalAnnualAccrualAmount;
    return this;
  }

   /**
   * The total annual accrued amount for the Fee. (TotalAnnualAccrualAmount and CalculationBase cannot both be present)
   * @return totalAnnualAccrualAmount
  **/
  @jakarta.annotation.Nullable
  public java.math.BigDecimal getTotalAnnualAccrualAmount() {
    return totalAnnualAccrualAmount;
  }


  public void setTotalAnnualAccrualAmount(java.math.BigDecimal totalAnnualAccrualAmount) {
    this.totalAnnualAccrualAmount = totalAnnualAccrualAmount;
  }


  public FeeRequest feeRatePercentage(java.math.BigDecimal feeRatePercentage) {
    
    this.feeRatePercentage = feeRatePercentage;
    return this;
  }

   /**
   * The fee rate percentage. (Required when CalculationBase is present and not compatible with TotalAnnualAccrualAmount)
   * @return feeRatePercentage
  **/
  @jakarta.annotation.Nullable
  public java.math.BigDecimal getFeeRatePercentage() {
    return feeRatePercentage;
  }


  public void setFeeRatePercentage(java.math.BigDecimal feeRatePercentage) {
    this.feeRatePercentage = feeRatePercentage;
  }


  public FeeRequest payableFrequency(String payableFrequency) {
    
    this.payableFrequency = payableFrequency;
    return this;
  }

   /**
   * The payable frequency for the Fee; &#39;Annually&#39;, &#39;Quarterly&#39; or &#39;Monthly&#39;.
   * @return payableFrequency
  **/
  @jakarta.annotation.Nonnull
  public String getPayableFrequency() {
    return payableFrequency;
  }


  public void setPayableFrequency(String payableFrequency) {
    this.payableFrequency = payableFrequency;
  }


  public FeeRequest businessDayConvention(String businessDayConvention) {
    
    this.businessDayConvention = businessDayConvention;
    return this;
  }

   /**
   * The business day convention to use for Fee calculations on weekends.
   * @return businessDayConvention
  **/
  @jakarta.annotation.Nonnull
  public String getBusinessDayConvention() {
    return businessDayConvention;
  }


  public void setBusinessDayConvention(String businessDayConvention) {
    this.businessDayConvention = businessDayConvention;
  }


  public FeeRequest startDate(OffsetDateTime startDate) {
    
    this.startDate = startDate;
    return this;
  }

   /**
   * The start date of the Fee.
   * @return startDate
  **/
  @jakarta.annotation.Nonnull
  public OffsetDateTime getStartDate() {
    return startDate;
  }


  public void setStartDate(OffsetDateTime startDate) {
    this.startDate = startDate;
  }


  public FeeRequest endDate(OffsetDateTime endDate) {
    
    this.endDate = endDate;
    return this;
  }

   /**
   * The end date of the Fee.
   * @return endDate
  **/
  @jakarta.annotation.Nullable
  public OffsetDateTime getEndDate() {
    return endDate;
  }


  public void setEndDate(OffsetDateTime endDate) {
    this.endDate = endDate;
  }


  public FeeRequest anchorDate(DayMonth anchorDate) {
    
    this.anchorDate = anchorDate;
    return this;
  }

   /**
   * Get anchorDate
   * @return anchorDate
  **/
  @jakarta.annotation.Nullable
  public DayMonth getAnchorDate() {
    return anchorDate;
  }


  public void setAnchorDate(DayMonth anchorDate) {
    this.anchorDate = anchorDate;
  }


  public FeeRequest properties(Map<String, Property> properties) {
    
    this.properties = properties;
    return this;
  }

  public FeeRequest putPropertiesItem(String key, Property propertiesItem) {
    if (this.properties == null) {
      this.properties = new HashMap<>();
    }
    this.properties.put(key, propertiesItem);
    return this;
  }

   /**
   * The Fee properties. These will be from the &#39;Fee&#39; domain.
   * @return properties
  **/
  @jakarta.annotation.Nullable
  public Map<String, Property> getProperties() {
    return properties;
  }


  public void setProperties(Map<String, Property> properties) {
    this.properties = properties;
  }


  public FeeRequest portfolioId(ResourceId portfolioId) {
    
    this.portfolioId = portfolioId;
    return this;
  }

   /**
   * Get portfolioId
   * @return portfolioId
  **/
  @jakarta.annotation.Nullable
  public ResourceId getPortfolioId() {
    return portfolioId;
  }


  public void setPortfolioId(ResourceId portfolioId) {
    this.portfolioId = portfolioId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FeeRequest feeRequest = (FeeRequest) o;
    return Objects.equals(this.code, feeRequest.code) &&
        Objects.equals(this.feeType, feeRequest.feeType) &&
        Objects.equals(this.name, feeRequest.name) &&
        Objects.equals(this.description, feeRequest.description) &&
        Objects.equals(this.origin, feeRequest.origin) &&
        Objects.equals(this.calculationBase, feeRequest.calculationBase) &&
        Objects.equals(this.accrualCurrency, feeRequest.accrualCurrency) &&
        Objects.equals(this.treatment, feeRequest.treatment) &&
        (this.totalAnnualAccrualAmount.compareTo(feeRequest.getTotalAnnualAccrualAmount()) == 0) &&
        (this.feeRatePercentage.compareTo(feeRequest.getFeeRatePercentage()) == 0) &&
        Objects.equals(this.payableFrequency, feeRequest.payableFrequency) &&
        Objects.equals(this.businessDayConvention, feeRequest.businessDayConvention) &&
        Objects.equals(this.startDate, feeRequest.startDate) &&
        Objects.equals(this.endDate, feeRequest.endDate) &&
        Objects.equals(this.anchorDate, feeRequest.anchorDate) &&
        Objects.equals(this.properties, feeRequest.properties) &&
        Objects.equals(this.portfolioId, feeRequest.portfolioId);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(code, feeType, name, description, origin, calculationBase, accrualCurrency, treatment, totalAnnualAccrualAmount, feeRatePercentage, payableFrequency, businessDayConvention, startDate, endDate, anchorDate, properties, portfolioId);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FeeRequest {\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    feeType: ").append(toIndentedString(feeType)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    origin: ").append(toIndentedString(origin)).append("\n");
    sb.append("    calculationBase: ").append(toIndentedString(calculationBase)).append("\n");
    sb.append("    accrualCurrency: ").append(toIndentedString(accrualCurrency)).append("\n");
    sb.append("    treatment: ").append(toIndentedString(treatment)).append("\n");
    sb.append("    totalAnnualAccrualAmount: ").append(toIndentedString(totalAnnualAccrualAmount)).append("\n");
    sb.append("    feeRatePercentage: ").append(toIndentedString(feeRatePercentage)).append("\n");
    sb.append("    payableFrequency: ").append(toIndentedString(payableFrequency)).append("\n");
    sb.append("    businessDayConvention: ").append(toIndentedString(businessDayConvention)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    endDate: ").append(toIndentedString(endDate)).append("\n");
    sb.append("    anchorDate: ").append(toIndentedString(anchorDate)).append("\n");
    sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
    sb.append("    portfolioId: ").append(toIndentedString(portfolioId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("code");
    openapiFields.add("feeType");
    openapiFields.add("name");
    openapiFields.add("description");
    openapiFields.add("origin");
    openapiFields.add("calculationBase");
    openapiFields.add("accrualCurrency");
    openapiFields.add("treatment");
    openapiFields.add("totalAnnualAccrualAmount");
    openapiFields.add("feeRatePercentage");
    openapiFields.add("payableFrequency");
    openapiFields.add("businessDayConvention");
    openapiFields.add("startDate");
    openapiFields.add("endDate");
    openapiFields.add("anchorDate");
    openapiFields.add("properties");
    openapiFields.add("portfolioId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("code");
    openapiRequiredFields.add("feeType");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("accrualCurrency");
    openapiRequiredFields.add("treatment");
    openapiRequiredFields.add("payableFrequency");
    openapiRequiredFields.add("businessDayConvention");
    openapiRequiredFields.add("startDate");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to FeeRequest
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FeeRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FeeRequest is not found in the empty JSON string", FeeRequest.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : FeeRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("code").toString()));
      }
      // validate the required field `feeType`
      ResourceId.validateJsonElement(jsonObj.get("feeType"));
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("origin") != null && !jsonObj.get("origin").isJsonNull()) && !jsonObj.get("origin").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `origin` to be a primitive type in the JSON string but got `%s`", jsonObj.get("origin").toString()));
      }
      if ((jsonObj.get("calculationBase") != null && !jsonObj.get("calculationBase").isJsonNull()) && !jsonObj.get("calculationBase").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `calculationBase` to be a primitive type in the JSON string but got `%s`", jsonObj.get("calculationBase").toString()));
      }
      if (!jsonObj.get("accrualCurrency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accrualCurrency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accrualCurrency").toString()));
      }
      if (!jsonObj.get("treatment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `treatment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("treatment").toString()));
      }
      if (!jsonObj.get("payableFrequency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payableFrequency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payableFrequency").toString()));
      }
      if (!jsonObj.get("businessDayConvention").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `businessDayConvention` to be a primitive type in the JSON string but got `%s`", jsonObj.get("businessDayConvention").toString()));
      }
      // validate the optional field `anchorDate`
      if (jsonObj.get("anchorDate") != null && !jsonObj.get("anchorDate").isJsonNull()) {
        DayMonth.validateJsonElement(jsonObj.get("anchorDate"));
      }
      // validate the optional field `portfolioId`
      if (jsonObj.get("portfolioId") != null && !jsonObj.get("portfolioId").isJsonNull()) {
        ResourceId.validateJsonElement(jsonObj.get("portfolioId"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FeeRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FeeRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FeeRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FeeRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<FeeRequest>() {
           @Override
           public void write(JsonWriter out, FeeRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FeeRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of FeeRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of FeeRequest
  * @throws IOException if the JSON string is invalid with respect to FeeRequest
  */
  public static FeeRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FeeRequest.class);
  }

 /**
  * Convert an instance of FeeRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
