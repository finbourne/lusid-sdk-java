/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import com.finbourne.lusid.model.OutputTransaction;
import com.finbourne.lusid.model.TransactionSettlementInstruction;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * A Settlement Instruction with its Matched Transaction (if any)
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class SettlementInstructionWithTransaction {
  public static final String SERIALIZED_NAME_SETTLEMENT_INSTRUCTION = "settlementInstruction";
  @SerializedName(SERIALIZED_NAME_SETTLEMENT_INSTRUCTION)
  private TransactionSettlementInstruction settlementInstruction;

  public static final String SERIALIZED_NAME_MATCHED_TRANSACTION = "matchedTransaction";
  @SerializedName(SERIALIZED_NAME_MATCHED_TRANSACTION)
  private OutputTransaction matchedTransaction;

  public SettlementInstructionWithTransaction() {
  }

  public SettlementInstructionWithTransaction settlementInstruction(TransactionSettlementInstruction settlementInstruction) {
    
    this.settlementInstruction = settlementInstruction;
    return this;
  }

   /**
   * Get settlementInstruction
   * @return settlementInstruction
  **/
  @jakarta.annotation.Nullable
  public TransactionSettlementInstruction getSettlementInstruction() {
    return settlementInstruction;
  }


  public void setSettlementInstruction(TransactionSettlementInstruction settlementInstruction) {
    this.settlementInstruction = settlementInstruction;
  }


  public SettlementInstructionWithTransaction matchedTransaction(OutputTransaction matchedTransaction) {
    
    this.matchedTransaction = matchedTransaction;
    return this;
  }

   /**
   * Get matchedTransaction
   * @return matchedTransaction
  **/
  @jakarta.annotation.Nullable
  public OutputTransaction getMatchedTransaction() {
    return matchedTransaction;
  }


  public void setMatchedTransaction(OutputTransaction matchedTransaction) {
    this.matchedTransaction = matchedTransaction;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SettlementInstructionWithTransaction settlementInstructionWithTransaction = (SettlementInstructionWithTransaction) o;
    return Objects.equals(this.settlementInstruction, settlementInstructionWithTransaction.settlementInstruction) &&
        Objects.equals(this.matchedTransaction, settlementInstructionWithTransaction.matchedTransaction);
  }

  @Override
  public int hashCode() {
    return Objects.hash(settlementInstruction, matchedTransaction);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SettlementInstructionWithTransaction {\n");
    sb.append("    settlementInstruction: ").append(toIndentedString(settlementInstruction)).append("\n");
    sb.append("    matchedTransaction: ").append(toIndentedString(matchedTransaction)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("settlementInstruction");
    openapiFields.add("matchedTransaction");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to SettlementInstructionWithTransaction
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SettlementInstructionWithTransaction.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SettlementInstructionWithTransaction is not found in the empty JSON string", SettlementInstructionWithTransaction.openapiRequiredFields.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `settlementInstruction`
      if (jsonObj.get("settlementInstruction") != null && !jsonObj.get("settlementInstruction").isJsonNull()) {
        TransactionSettlementInstruction.validateJsonElement(jsonObj.get("settlementInstruction"));
      }
      // validate the optional field `matchedTransaction`
      if (jsonObj.get("matchedTransaction") != null && !jsonObj.get("matchedTransaction").isJsonNull()) {
        OutputTransaction.validateJsonElement(jsonObj.get("matchedTransaction"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SettlementInstructionWithTransaction.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SettlementInstructionWithTransaction' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SettlementInstructionWithTransaction> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SettlementInstructionWithTransaction.class));

       return (TypeAdapter<T>) new TypeAdapter<SettlementInstructionWithTransaction>() {
           @Override
           public void write(JsonWriter out, SettlementInstructionWithTransaction value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SettlementInstructionWithTransaction read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of SettlementInstructionWithTransaction given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of SettlementInstructionWithTransaction
  * @throws IOException if the JSON string is invalid with respect to SettlementInstructionWithTransaction
  */
  public static SettlementInstructionWithTransaction fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SettlementInstructionWithTransaction.class);
  }

 /**
  * Convert an instance of SettlementInstructionWithTransaction to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
