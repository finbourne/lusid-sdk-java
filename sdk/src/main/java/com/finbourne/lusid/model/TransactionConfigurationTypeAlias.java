/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * TransactionConfigurationTypeAlias
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class TransactionConfigurationTypeAlias {
  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_TRANSACTION_CLASS = "transactionClass";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_CLASS)
  private String transactionClass;

  public static final String SERIALIZED_NAME_TRANSACTION_GROUP = "transactionGroup";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_GROUP)
  private String transactionGroup;

  public static final String SERIALIZED_NAME_SOURCE = "source";
  @SerializedName(SERIALIZED_NAME_SOURCE)
  private String source;

  /**
   * . The available values are: None, LongLonger, LongShorter, ShortShorter, Shorter, ShortLonger, Longer, AllRoles
   */
  @JsonAdapter(TransactionRolesEnum.Adapter.class)
  public enum TransactionRolesEnum {
    NONE("None"),
    
    LONGLONGER("LongLonger"),
    
    LONGSHORTER("LongShorter"),
    
    SHORTSHORTER("ShortShorter"),
    
    SHORTER("Shorter"),
    
    SHORTLONGER("ShortLonger"),
    
    LONGER("Longer"),
    
    ALLROLES("AllRoles");

    private String value;

    TransactionRolesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TransactionRolesEnum fromValue(String value) {
      for (TransactionRolesEnum b : TransactionRolesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TransactionRolesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TransactionRolesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TransactionRolesEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TransactionRolesEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TRANSACTION_ROLES = "transactionRoles";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_ROLES)
  private TransactionRolesEnum transactionRoles;

  public static final String SERIALIZED_NAME_IS_DEFAULT = "isDefault";
  @SerializedName(SERIALIZED_NAME_IS_DEFAULT)
  private Boolean isDefault;

  public TransactionConfigurationTypeAlias() {
  }

  public TransactionConfigurationTypeAlias type(String type) {
    
    this.type = type;
    return this;
  }

   /**
   * The transaction type
   * @return type
  **/
  @javax.annotation.Nonnull
  public String getType() {
    return type;
  }


  public void setType(String type) {
    this.type = type;
  }


  public TransactionConfigurationTypeAlias description(String description) {
    
    this.description = description;
    return this;
  }

   /**
   * Brief description of the transaction
   * @return description
  **/
  @javax.annotation.Nonnull
  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    this.description = description;
  }


  public TransactionConfigurationTypeAlias transactionClass(String transactionClass) {
    
    this.transactionClass = transactionClass;
    return this;
  }

   /**
   * Relates types of a similar class. E.g. Buy/Sell, StockIn/StockOut
   * @return transactionClass
  **/
  @javax.annotation.Nonnull
  public String getTransactionClass() {
    return transactionClass;
  }


  public void setTransactionClass(String transactionClass) {
    this.transactionClass = transactionClass;
  }


  public TransactionConfigurationTypeAlias transactionGroup(String transactionGroup) {
    
    this.transactionGroup = transactionGroup;
    return this;
  }

   /**
   * Group is a set of codes related to a source, or sync. DEPRECATED: This field will be removed, use &#x60;Source&#x60; instead
   * @return transactionGroup
  **/
  @javax.annotation.Nullable
  public String getTransactionGroup() {
    return transactionGroup;
  }


  public void setTransactionGroup(String transactionGroup) {
    this.transactionGroup = transactionGroup;
  }


  public TransactionConfigurationTypeAlias source(String source) {
    
    this.source = source;
    return this;
  }

   /**
   * Used to group a set of transaction types
   * @return source
  **/
  @javax.annotation.Nullable
  public String getSource() {
    return source;
  }


  public void setSource(String source) {
    this.source = source;
  }


  public TransactionConfigurationTypeAlias transactionRoles(TransactionRolesEnum transactionRoles) {
    
    this.transactionRoles = transactionRoles;
    return this;
  }

   /**
   * . The available values are: None, LongLonger, LongShorter, ShortShorter, Shorter, ShortLonger, Longer, AllRoles
   * @return transactionRoles
  **/
  @javax.annotation.Nonnull
  public TransactionRolesEnum getTransactionRoles() {
    return transactionRoles;
  }


  public void setTransactionRoles(TransactionRolesEnum transactionRoles) {
    this.transactionRoles = transactionRoles;
  }


  public TransactionConfigurationTypeAlias isDefault(Boolean isDefault) {
    
    this.isDefault = isDefault;
    return this;
  }

   /**
   * IsDefault is a flag that denotes the default alias for a source. There can only be, at most, one per source.
   * @return isDefault
  **/
  @javax.annotation.Nullable
  public Boolean getIsDefault() {
    return isDefault;
  }


  public void setIsDefault(Boolean isDefault) {
    this.isDefault = isDefault;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TransactionConfigurationTypeAlias transactionConfigurationTypeAlias = (TransactionConfigurationTypeAlias) o;
    return Objects.equals(this.type, transactionConfigurationTypeAlias.type) &&
        Objects.equals(this.description, transactionConfigurationTypeAlias.description) &&
        Objects.equals(this.transactionClass, transactionConfigurationTypeAlias.transactionClass) &&
        Objects.equals(this.transactionGroup, transactionConfigurationTypeAlias.transactionGroup) &&
        Objects.equals(this.source, transactionConfigurationTypeAlias.source) &&
        Objects.equals(this.transactionRoles, transactionConfigurationTypeAlias.transactionRoles) &&
        Objects.equals(this.isDefault, transactionConfigurationTypeAlias.isDefault);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, description, transactionClass, transactionGroup, source, transactionRoles, isDefault);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TransactionConfigurationTypeAlias {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    transactionClass: ").append(toIndentedString(transactionClass)).append("\n");
    sb.append("    transactionGroup: ").append(toIndentedString(transactionGroup)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    transactionRoles: ").append(toIndentedString(transactionRoles)).append("\n");
    sb.append("    isDefault: ").append(toIndentedString(isDefault)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("type");
    openapiFields.add("description");
    openapiFields.add("transactionClass");
    openapiFields.add("transactionGroup");
    openapiFields.add("source");
    openapiFields.add("transactionRoles");
    openapiFields.add("isDefault");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("type");
    openapiRequiredFields.add("description");
    openapiRequiredFields.add("transactionClass");
    openapiRequiredFields.add("transactionRoles");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to TransactionConfigurationTypeAlias
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!TransactionConfigurationTypeAlias.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TransactionConfigurationTypeAlias is not found in the empty JSON string", TransactionConfigurationTypeAlias.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!TransactionConfigurationTypeAlias.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TransactionConfigurationTypeAlias` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TransactionConfigurationTypeAlias.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if (!jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (!jsonObj.get("transactionClass").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transactionClass` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transactionClass").toString()));
      }
      if ((jsonObj.get("transactionGroup") != null && !jsonObj.get("transactionGroup").isJsonNull()) && !jsonObj.get("transactionGroup").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transactionGroup` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transactionGroup").toString()));
      }
      if ((jsonObj.get("source") != null && !jsonObj.get("source").isJsonNull()) && !jsonObj.get("source").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `source` to be a primitive type in the JSON string but got `%s`", jsonObj.get("source").toString()));
      }
      if (!jsonObj.get("transactionRoles").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transactionRoles` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transactionRoles").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TransactionConfigurationTypeAlias.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TransactionConfigurationTypeAlias' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TransactionConfigurationTypeAlias> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TransactionConfigurationTypeAlias.class));

       return (TypeAdapter<T>) new TypeAdapter<TransactionConfigurationTypeAlias>() {
           @Override
           public void write(JsonWriter out, TransactionConfigurationTypeAlias value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TransactionConfigurationTypeAlias read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TransactionConfigurationTypeAlias given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TransactionConfigurationTypeAlias
  * @throws IOException if the JSON string is invalid with respect to TransactionConfigurationTypeAlias
  */
  public static TransactionConfigurationTypeAlias fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TransactionConfigurationTypeAlias.class);
  }

 /**
  * Convert an instance of TransactionConfigurationTypeAlias to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
