/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import com.finbourne.lusid.model.AddressKeyOptionDefinition;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * QueryableKey
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class QueryableKey {
  public static final String SERIALIZED_NAME_ADDRESS_KEY = "addressKey";
  @SerializedName(SERIALIZED_NAME_ADDRESS_KEY)
  private String addressKey;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_FLATTENED_TYPE = "flattenedType";
  @SerializedName(SERIALIZED_NAME_FLATTENED_TYPE)
  private String flattenedType;

  public static final String SERIALIZED_NAME_HOLDING_QUANTITY_SCALING = "holdingQuantityScaling";
  @SerializedName(SERIALIZED_NAME_HOLDING_QUANTITY_SCALING)
  private String holdingQuantityScaling;

  public static final String SERIALIZED_NAME_SUPPORTED_USAGES = "supportedUsages";
  @SerializedName(SERIALIZED_NAME_SUPPORTED_USAGES)
  private List<String> supportedUsages = new ArrayList<>();

  public static final String SERIALIZED_NAME_SUPPORTED_OPERATIONS = "supportedOperations";
  @SerializedName(SERIALIZED_NAME_SUPPORTED_OPERATIONS)
  private List<String> supportedOperations = new ArrayList<>();

  public static final String SERIALIZED_NAME_LIFE_CYCLE_STATUS = "lifeCycleStatus";
  @SerializedName(SERIALIZED_NAME_LIFE_CYCLE_STATUS)
  private String lifeCycleStatus;

  public static final String SERIALIZED_NAME_REMOVAL_DATE = "removalDate";
  @SerializedName(SERIALIZED_NAME_REMOVAL_DATE)
  private OffsetDateTime removalDate;

  public static final String SERIALIZED_NAME_APPLICABLE_OPTIONS = "applicableOptions";
  @SerializedName(SERIALIZED_NAME_APPLICABLE_OPTIONS)
  private Map<String, AddressKeyOptionDefinition> applicableOptions;

  public static final String SERIALIZED_NAME_DERIVATION_FORMULA = "derivationFormula";
  @SerializedName(SERIALIZED_NAME_DERIVATION_FORMULA)
  private String derivationFormula;

  public QueryableKey() {
  }

  public QueryableKey addressKey(String addressKey) {
    
    this.addressKey = addressKey;
    return this;
  }

   /**
   * The address that is the query to be made into the system. e.g. a Valuation/PV or Instrument/MaturityDate
   * @return addressKey
  **/
  @jakarta.annotation.Nonnull
  public String getAddressKey() {
    return addressKey;
  }


  public void setAddressKey(String addressKey) {
    this.addressKey = addressKey;
  }


  public QueryableKey description(String description) {
    
    this.description = description;
    return this;
  }

   /**
   * What does the information that is being queried by the address mean. What is the address for.
   * @return description
  **/
  @jakarta.annotation.Nullable
  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    this.description = description;
  }


  public QueryableKey displayName(String displayName) {
    
    this.displayName = displayName;
    return this;
  }

   /**
   * The suggested name that the user would wish to put on to the returned information for visualisation in preference to the address.
   * @return displayName
  **/
  @jakarta.annotation.Nonnull
  public String getDisplayName() {
    return displayName;
  }


  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public QueryableKey type(String type) {
    
    this.type = type;
    return this;
  }

   /**
   * Financially meaningful results can be presented as either simple flat types or more complex expanded types. This field gives the type of the more complex representation.  For example, the present value (PV) of a holding could be represented either as a simple decimal (with currency implied) or as a decimal-currency pair. In this example, the type returned in this field would be \&quot;Result0D\&quot;, the decimal-currency pair.
   * @return type
  **/
  @jakarta.annotation.Nonnull
  public String getType() {
    return type;
  }


  public void setType(String type) {
    this.type = type;
  }


  public QueryableKey flattenedType(String flattenedType) {
    
    this.flattenedType = flattenedType;
    return this;
  }

   /**
   * Financially meaningful results can be presented as either simple flat types or more complex expanded types. This field gives the type of the simpler representation.  For example, the present value (PV) of a holding could be represented either as a simple decimal (with currency implied) or as a decimal-currency pair. In this example, the type returned in this field would be \&quot;Decimal\&quot;.
   * @return flattenedType
  **/
  @jakarta.annotation.Nonnull
  public String getFlattenedType() {
    return flattenedType;
  }


  public void setFlattenedType(String flattenedType) {
    this.flattenedType = flattenedType;
  }


  public QueryableKey holdingQuantityScaling(String holdingQuantityScaling) {
    
    this.holdingQuantityScaling = holdingQuantityScaling;
    return this;
  }

   /**
   * Is the data scaled when it is for, e.g. a holding in an instrument. A key example would be the difference between price and PV. The present value of an instrument would scale with the quantity held. The price would be that for a hypothetical unit of that instrument, typically associated with the contract size.
   * @return holdingQuantityScaling
  **/
  @jakarta.annotation.Nonnull
  public String getHoldingQuantityScaling() {
    return holdingQuantityScaling;
  }


  public void setHoldingQuantityScaling(String holdingQuantityScaling) {
    this.holdingQuantityScaling = holdingQuantityScaling;
  }


  public QueryableKey supportedUsages(List<String> supportedUsages) {
    
    this.supportedUsages = supportedUsages;
    return this;
  }

  public QueryableKey addSupportedUsagesItem(String supportedUsagesItem) {
    if (this.supportedUsages == null) {
      this.supportedUsages = new ArrayList<>();
    }
    this.supportedUsages.add(supportedUsagesItem);
    return this;
  }

   /**
   * The types of queries that support this key.
   * @return supportedUsages
  **/
  @jakarta.annotation.Nonnull
  public List<String> getSupportedUsages() {
    return supportedUsages;
  }


  public void setSupportedUsages(List<String> supportedUsages) {
    this.supportedUsages = supportedUsages;
  }


  public QueryableKey supportedOperations(List<String> supportedOperations) {
    
    this.supportedOperations = supportedOperations;
    return this;
  }

  public QueryableKey addSupportedOperationsItem(String supportedOperationsItem) {
    if (this.supportedOperations == null) {
      this.supportedOperations = new ArrayList<>();
    }
    this.supportedOperations.add(supportedOperationsItem);
    return this;
  }

   /**
   * When performing an aggregation operation, what column type operations can be performed on the data. For example, it makes sense to sum decimals but not strings. Either can be counted. With more complex types, e.g. ResultValues, operations may be linked to a semantic meaning such as the currency of the result. In such cases the operations may be supported but context specific. For example, it makes sense to sum PVs in a single currency but not when the currency is different. In such cases, an error would result (it being assumed that no fx rates for currency conversion were implicit in the context).
   * @return supportedOperations
  **/
  @jakarta.annotation.Nonnull
  public List<String> getSupportedOperations() {
    return supportedOperations;
  }


  public void setSupportedOperations(List<String> supportedOperations) {
    this.supportedOperations = supportedOperations;
  }


  public QueryableKey lifeCycleStatus(String lifeCycleStatus) {
    
    this.lifeCycleStatus = lifeCycleStatus;
    return this;
  }

   /**
   * Within an API where an item can be accessed through an address or property, there is an associated status that determines whether the item is stable or likely to change. This status is one of [Experimental, Beta, EAP, Prod, Deprecated]. If the item is deprecated it will be removed on or after the associated DateTime RemovalDate field. That field will not otherwise be set.
   * @return lifeCycleStatus
  **/
  @jakarta.annotation.Nonnull
  public String getLifeCycleStatus() {
    return lifeCycleStatus;
  }


  public void setLifeCycleStatus(String lifeCycleStatus) {
    this.lifeCycleStatus = lifeCycleStatus;
  }


  public QueryableKey removalDate(OffsetDateTime removalDate) {
    
    this.removalDate = removalDate;
    return this;
  }

   /**
   * If the life cycle status is set to deprecated then this will be populated with the date on or after which removal of the address query will happen
   * @return removalDate
  **/
  @jakarta.annotation.Nullable
  public OffsetDateTime getRemovalDate() {
    return removalDate;
  }


  public void setRemovalDate(OffsetDateTime removalDate) {
    this.removalDate = removalDate;
  }


  public QueryableKey applicableOptions(Map<String, AddressKeyOptionDefinition> applicableOptions) {
    
    this.applicableOptions = applicableOptions;
    return this;
  }

  public QueryableKey putApplicableOptionsItem(String key, AddressKeyOptionDefinition applicableOptionsItem) {
    if (this.applicableOptions == null) {
      this.applicableOptions = new HashMap<>();
    }
    this.applicableOptions.put(key, applicableOptionsItem);
    return this;
  }

   /**
   * A mapping from option names to the definition that the corresponding option value must match.
   * @return applicableOptions
  **/
  @jakarta.annotation.Nullable
  public Map<String, AddressKeyOptionDefinition> getApplicableOptions() {
    return applicableOptions;
  }


  public void setApplicableOptions(Map<String, AddressKeyOptionDefinition> applicableOptions) {
    this.applicableOptions = applicableOptions;
  }


  public QueryableKey derivationFormula(String derivationFormula) {
    
    this.derivationFormula = derivationFormula;
    return this;
  }

   /**
   * Derivation formula for when the for when the query key represents a DerivedValuation property.
   * @return derivationFormula
  **/
  @jakarta.annotation.Nullable
  public String getDerivationFormula() {
    return derivationFormula;
  }


  public void setDerivationFormula(String derivationFormula) {
    this.derivationFormula = derivationFormula;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    QueryableKey queryableKey = (QueryableKey) o;
    return Objects.equals(this.addressKey, queryableKey.addressKey) &&
        Objects.equals(this.description, queryableKey.description) &&
        Objects.equals(this.displayName, queryableKey.displayName) &&
        Objects.equals(this.type, queryableKey.type) &&
        Objects.equals(this.flattenedType, queryableKey.flattenedType) &&
        Objects.equals(this.holdingQuantityScaling, queryableKey.holdingQuantityScaling) &&
        Objects.equals(this.supportedUsages, queryableKey.supportedUsages) &&
        Objects.equals(this.supportedOperations, queryableKey.supportedOperations) &&
        Objects.equals(this.lifeCycleStatus, queryableKey.lifeCycleStatus) &&
        Objects.equals(this.removalDate, queryableKey.removalDate) &&
        Objects.equals(this.applicableOptions, queryableKey.applicableOptions) &&
        Objects.equals(this.derivationFormula, queryableKey.derivationFormula);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(addressKey, description, displayName, type, flattenedType, holdingQuantityScaling, supportedUsages, supportedOperations, lifeCycleStatus, removalDate, applicableOptions, derivationFormula);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class QueryableKey {\n");
    sb.append("    addressKey: ").append(toIndentedString(addressKey)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    flattenedType: ").append(toIndentedString(flattenedType)).append("\n");
    sb.append("    holdingQuantityScaling: ").append(toIndentedString(holdingQuantityScaling)).append("\n");
    sb.append("    supportedUsages: ").append(toIndentedString(supportedUsages)).append("\n");
    sb.append("    supportedOperations: ").append(toIndentedString(supportedOperations)).append("\n");
    sb.append("    lifeCycleStatus: ").append(toIndentedString(lifeCycleStatus)).append("\n");
    sb.append("    removalDate: ").append(toIndentedString(removalDate)).append("\n");
    sb.append("    applicableOptions: ").append(toIndentedString(applicableOptions)).append("\n");
    sb.append("    derivationFormula: ").append(toIndentedString(derivationFormula)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("addressKey");
    openapiFields.add("description");
    openapiFields.add("displayName");
    openapiFields.add("type");
    openapiFields.add("flattenedType");
    openapiFields.add("holdingQuantityScaling");
    openapiFields.add("supportedUsages");
    openapiFields.add("supportedOperations");
    openapiFields.add("lifeCycleStatus");
    openapiFields.add("removalDate");
    openapiFields.add("applicableOptions");
    openapiFields.add("derivationFormula");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("addressKey");
    openapiRequiredFields.add("displayName");
    openapiRequiredFields.add("type");
    openapiRequiredFields.add("flattenedType");
    openapiRequiredFields.add("holdingQuantityScaling");
    openapiRequiredFields.add("supportedUsages");
    openapiRequiredFields.add("supportedOperations");
    openapiRequiredFields.add("lifeCycleStatus");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to QueryableKey
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!QueryableKey.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in QueryableKey is not found in the empty JSON string", QueryableKey.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : QueryableKey.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("addressKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `addressKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("addressKey").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (!jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if (!jsonObj.get("flattenedType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `flattenedType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("flattenedType").toString()));
      }
      if (!jsonObj.get("holdingQuantityScaling").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `holdingQuantityScaling` to be a primitive type in the JSON string but got `%s`", jsonObj.get("holdingQuantityScaling").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("supportedUsages") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("supportedUsages").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `supportedUsages` to be an array in the JSON string but got `%s`", jsonObj.get("supportedUsages").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("supportedOperations") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("supportedOperations").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `supportedOperations` to be an array in the JSON string but got `%s`", jsonObj.get("supportedOperations").toString()));
      }
      if (!jsonObj.get("lifeCycleStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lifeCycleStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lifeCycleStatus").toString()));
      }
      if ((jsonObj.get("derivationFormula") != null && !jsonObj.get("derivationFormula").isJsonNull()) && !jsonObj.get("derivationFormula").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `derivationFormula` to be a primitive type in the JSON string but got `%s`", jsonObj.get("derivationFormula").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!QueryableKey.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'QueryableKey' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<QueryableKey> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(QueryableKey.class));

       return (TypeAdapter<T>) new TypeAdapter<QueryableKey>() {
           @Override
           public void write(JsonWriter out, QueryableKey value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public QueryableKey read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of QueryableKey given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of QueryableKey
  * @throws IOException if the JSON string is invalid with respect to QueryableKey
  */
  public static QueryableKey fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, QueryableKey.class);
  }

 /**
  * Convert an instance of QueryableKey to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
