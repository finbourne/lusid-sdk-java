/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import com.finbourne.lusid.model.Property;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * ComplianceRuleBreakdown
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ComplianceRuleBreakdown {
  public static final String SERIALIZED_NAME_GROUP_STATUS = "groupStatus";
  @SerializedName(SERIALIZED_NAME_GROUP_STATUS)
  private String groupStatus;

  public static final String SERIALIZED_NAME_RESULTS_USED = "resultsUsed";
  @SerializedName(SERIALIZED_NAME_RESULTS_USED)
  private Map<String, java.math.BigDecimal> resultsUsed = new HashMap<>();

  public static final String SERIALIZED_NAME_PROPERTIES_USED = "propertiesUsed";
  @SerializedName(SERIALIZED_NAME_PROPERTIES_USED)
  private Map<String, List<Property>> propertiesUsed = new HashMap<>();

  public static final String SERIALIZED_NAME_PARAMETERS_USED = "parametersUsed";
  @SerializedName(SERIALIZED_NAME_PARAMETERS_USED)
  private Map<String, String> parametersUsed = new HashMap<>();

  public static final String SERIALIZED_NAME_MISSING_DATA_INFORMATION = "missingDataInformation";
  @SerializedName(SERIALIZED_NAME_MISSING_DATA_INFORMATION)
  private List<String> missingDataInformation = new ArrayList<>();

  public ComplianceRuleBreakdown() {
  }

  public ComplianceRuleBreakdown groupStatus(String groupStatus) {
    
    this.groupStatus = groupStatus;
    return this;
  }

   /**
   * Get groupStatus
   * @return groupStatus
  **/
  @jakarta.annotation.Nonnull
  public String getGroupStatus() {
    return groupStatus;
  }


  public void setGroupStatus(String groupStatus) {
    this.groupStatus = groupStatus;
  }


  public ComplianceRuleBreakdown resultsUsed(Map<String, java.math.BigDecimal> resultsUsed) {
    
    this.resultsUsed = resultsUsed;
    return this;
  }

  public ComplianceRuleBreakdown putResultsUsedItem(String key, java.math.BigDecimal resultsUsedItem) {
    if (this.resultsUsed == null) {
      this.resultsUsed = new HashMap<>();
    }
    this.resultsUsed.put(key, resultsUsedItem);
    return this;
  }

   /**
   * Get resultsUsed
   * @return resultsUsed
  **/
  @jakarta.annotation.Nonnull
  public Map<String, java.math.BigDecimal> getResultsUsed() {
    return resultsUsed;
  }


  public void setResultsUsed(Map<String, java.math.BigDecimal> resultsUsed) {
    this.resultsUsed = resultsUsed;
  }


  public ComplianceRuleBreakdown propertiesUsed(Map<String, List<Property>> propertiesUsed) {
    
    this.propertiesUsed = propertiesUsed;
    return this;
  }

  public ComplianceRuleBreakdown putPropertiesUsedItem(String key, List<Property> propertiesUsedItem) {
    if (this.propertiesUsed == null) {
      this.propertiesUsed = new HashMap<>();
    }
    this.propertiesUsed.put(key, propertiesUsedItem);
    return this;
  }

   /**
   * Get propertiesUsed
   * @return propertiesUsed
  **/
  @jakarta.annotation.Nonnull
  public Map<String, List<Property>> getPropertiesUsed() {
    return propertiesUsed;
  }


  public void setPropertiesUsed(Map<String, List<Property>> propertiesUsed) {
    this.propertiesUsed = propertiesUsed;
  }


  public ComplianceRuleBreakdown parametersUsed(Map<String, String> parametersUsed) {
    
    this.parametersUsed = parametersUsed;
    return this;
  }

  public ComplianceRuleBreakdown putParametersUsedItem(String key, String parametersUsedItem) {
    if (this.parametersUsed == null) {
      this.parametersUsed = new HashMap<>();
    }
    this.parametersUsed.put(key, parametersUsedItem);
    return this;
  }

   /**
   * Get parametersUsed
   * @return parametersUsed
  **/
  @jakarta.annotation.Nonnull
  public Map<String, String> getParametersUsed() {
    return parametersUsed;
  }


  public void setParametersUsed(Map<String, String> parametersUsed) {
    this.parametersUsed = parametersUsed;
  }


  public ComplianceRuleBreakdown missingDataInformation(List<String> missingDataInformation) {
    
    this.missingDataInformation = missingDataInformation;
    return this;
  }

  public ComplianceRuleBreakdown addMissingDataInformationItem(String missingDataInformationItem) {
    if (this.missingDataInformation == null) {
      this.missingDataInformation = new ArrayList<>();
    }
    this.missingDataInformation.add(missingDataInformationItem);
    return this;
  }

   /**
   * Get missingDataInformation
   * @return missingDataInformation
  **/
  @jakarta.annotation.Nonnull
  public List<String> getMissingDataInformation() {
    return missingDataInformation;
  }


  public void setMissingDataInformation(List<String> missingDataInformation) {
    this.missingDataInformation = missingDataInformation;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ComplianceRuleBreakdown complianceRuleBreakdown = (ComplianceRuleBreakdown) o;
    return Objects.equals(this.groupStatus, complianceRuleBreakdown.groupStatus) &&
        Objects.equals(this.resultsUsed, complianceRuleBreakdown.resultsUsed) &&
        Objects.equals(this.propertiesUsed, complianceRuleBreakdown.propertiesUsed) &&
        Objects.equals(this.parametersUsed, complianceRuleBreakdown.parametersUsed) &&
        Objects.equals(this.missingDataInformation, complianceRuleBreakdown.missingDataInformation);
  }

  @Override
  public int hashCode() {
    return Objects.hash(groupStatus, resultsUsed, propertiesUsed, parametersUsed, missingDataInformation);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ComplianceRuleBreakdown {\n");
    sb.append("    groupStatus: ").append(toIndentedString(groupStatus)).append("\n");
    sb.append("    resultsUsed: ").append(toIndentedString(resultsUsed)).append("\n");
    sb.append("    propertiesUsed: ").append(toIndentedString(propertiesUsed)).append("\n");
    sb.append("    parametersUsed: ").append(toIndentedString(parametersUsed)).append("\n");
    sb.append("    missingDataInformation: ").append(toIndentedString(missingDataInformation)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("groupStatus");
    openapiFields.add("resultsUsed");
    openapiFields.add("propertiesUsed");
    openapiFields.add("parametersUsed");
    openapiFields.add("missingDataInformation");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("groupStatus");
    openapiRequiredFields.add("resultsUsed");
    openapiRequiredFields.add("propertiesUsed");
    openapiRequiredFields.add("parametersUsed");
    openapiRequiredFields.add("missingDataInformation");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ComplianceRuleBreakdown
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ComplianceRuleBreakdown.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ComplianceRuleBreakdown is not found in the empty JSON string", ComplianceRuleBreakdown.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ComplianceRuleBreakdown.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ComplianceRuleBreakdown` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ComplianceRuleBreakdown.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("groupStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `groupStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("groupStatus").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("missingDataInformation") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("missingDataInformation").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `missingDataInformation` to be an array in the JSON string but got `%s`", jsonObj.get("missingDataInformation").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ComplianceRuleBreakdown.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ComplianceRuleBreakdown' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ComplianceRuleBreakdown> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ComplianceRuleBreakdown.class));

       return (TypeAdapter<T>) new TypeAdapter<ComplianceRuleBreakdown>() {
           @Override
           public void write(JsonWriter out, ComplianceRuleBreakdown value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ComplianceRuleBreakdown read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ComplianceRuleBreakdown given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ComplianceRuleBreakdown
  * @throws IOException if the JSON string is invalid with respect to ComplianceRuleBreakdown
  */
  public static ComplianceRuleBreakdown fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ComplianceRuleBreakdown.class);
  }

 /**
  * Convert an instance of ComplianceRuleBreakdown to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
