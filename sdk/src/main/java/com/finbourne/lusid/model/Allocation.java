/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import java.util.Arrays;
import com.finbourne.lusid.model.CurrencyAndAmount;
import com.finbourne.lusid.model.Link;
import com.finbourne.lusid.model.PerpetualProperty;
import com.finbourne.lusid.model.ResourceId;
import com.finbourne.lusid.model.Version;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * An Allocation of a certain quantity of a specific instrument against an originating  Order.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class Allocation {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private ResourceId id;

  public static final String SERIALIZED_NAME_ALLOCATED_ORDER_ID = "allocatedOrderId";
  @SerializedName(SERIALIZED_NAME_ALLOCATED_ORDER_ID)
  private ResourceId allocatedOrderId;

  public static final String SERIALIZED_NAME_PORTFOLIO_ID = "portfolioId";
  @SerializedName(SERIALIZED_NAME_PORTFOLIO_ID)
  private ResourceId portfolioId;

  public static final String SERIALIZED_NAME_QUANTITY = "quantity";
  @SerializedName(SERIALIZED_NAME_QUANTITY)
  private java.math.BigDecimal quantity;

  public static final String SERIALIZED_NAME_INSTRUMENT_IDENTIFIERS = "instrumentIdentifiers";
  @SerializedName(SERIALIZED_NAME_INSTRUMENT_IDENTIFIERS)
  private Map<String, String> instrumentIdentifiers = new HashMap<>();

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private Version version;

  public static final String SERIALIZED_NAME_PROPERTIES = "properties";
  @SerializedName(SERIALIZED_NAME_PROPERTIES)
  private Map<String, PerpetualProperty> properties;

  public static final String SERIALIZED_NAME_INSTRUMENT_SCOPE = "instrumentScope";
  @SerializedName(SERIALIZED_NAME_INSTRUMENT_SCOPE)
  private String instrumentScope;

  public static final String SERIALIZED_NAME_LUSID_INSTRUMENT_ID = "lusidInstrumentId";
  @SerializedName(SERIALIZED_NAME_LUSID_INSTRUMENT_ID)
  private String lusidInstrumentId;

  public static final String SERIALIZED_NAME_PLACEMENT_IDS = "placementIds";
  @SerializedName(SERIALIZED_NAME_PLACEMENT_IDS)
  private List<ResourceId> placementIds;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private String state;

  public static final String SERIALIZED_NAME_SIDE = "side";
  @SerializedName(SERIALIZED_NAME_SIDE)
  private String side;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_SETTLEMENT_DATE = "settlementDate";
  @SerializedName(SERIALIZED_NAME_SETTLEMENT_DATE)
  private OffsetDateTime settlementDate;

  public static final String SERIALIZED_NAME_DATE = "date";
  @SerializedName(SERIALIZED_NAME_DATE)
  private OffsetDateTime date;

  public static final String SERIALIZED_NAME_PRICE = "price";
  @SerializedName(SERIALIZED_NAME_PRICE)
  private CurrencyAndAmount price;

  public static final String SERIALIZED_NAME_SETTLEMENT_CURRENCY = "settlementCurrency";
  @SerializedName(SERIALIZED_NAME_SETTLEMENT_CURRENCY)
  private String settlementCurrency;

  public static final String SERIALIZED_NAME_SETTLEMENT_CURRENCY_FX_RATE = "settlementCurrencyFxRate";
  @SerializedName(SERIALIZED_NAME_SETTLEMENT_CURRENCY_FX_RATE)
  private java.math.BigDecimal settlementCurrencyFxRate;

  public static final String SERIALIZED_NAME_COUNTERPARTY = "counterparty";
  @SerializedName(SERIALIZED_NAME_COUNTERPARTY)
  private String counterparty;

  public static final String SERIALIZED_NAME_EXECUTION_IDS = "executionIds";
  @SerializedName(SERIALIZED_NAME_EXECUTION_IDS)
  private List<ResourceId> executionIds;

  public static final String SERIALIZED_NAME_LINKS = "links";
  @SerializedName(SERIALIZED_NAME_LINKS)
  private List<Link> links;

  public Allocation() {
  }

  public Allocation id(ResourceId id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nonnull
  public ResourceId getId() {
    return id;
  }


  public void setId(ResourceId id) {
    this.id = id;
  }


  public Allocation allocatedOrderId(ResourceId allocatedOrderId) {
    
    this.allocatedOrderId = allocatedOrderId;
    return this;
  }

   /**
   * Get allocatedOrderId
   * @return allocatedOrderId
  **/
  @javax.annotation.Nonnull
  public ResourceId getAllocatedOrderId() {
    return allocatedOrderId;
  }


  public void setAllocatedOrderId(ResourceId allocatedOrderId) {
    this.allocatedOrderId = allocatedOrderId;
  }


  public Allocation portfolioId(ResourceId portfolioId) {
    
    this.portfolioId = portfolioId;
    return this;
  }

   /**
   * Get portfolioId
   * @return portfolioId
  **/
  @javax.annotation.Nonnull
  public ResourceId getPortfolioId() {
    return portfolioId;
  }


  public void setPortfolioId(ResourceId portfolioId) {
    this.portfolioId = portfolioId;
  }


  public Allocation quantity(java.math.BigDecimal quantity) {
    
    this.quantity = quantity;
    return this;
  }

   /**
   * The quantity of given instrument allocated.
   * @return quantity
  **/
  @javax.annotation.Nonnull
  public java.math.BigDecimal getQuantity() {
    return quantity;
  }


  public void setQuantity(java.math.BigDecimal quantity) {
    this.quantity = quantity;
  }


  public Allocation instrumentIdentifiers(Map<String, String> instrumentIdentifiers) {
    
    this.instrumentIdentifiers = instrumentIdentifiers;
    return this;
  }

  public Allocation putInstrumentIdentifiersItem(String key, String instrumentIdentifiersItem) {
    if (this.instrumentIdentifiers == null) {
      this.instrumentIdentifiers = new HashMap<>();
    }
    this.instrumentIdentifiers.put(key, instrumentIdentifiersItem);
    return this;
  }

   /**
   * The instrument allocated.
   * @return instrumentIdentifiers
  **/
  @javax.annotation.Nonnull
  public Map<String, String> getInstrumentIdentifiers() {
    return instrumentIdentifiers;
  }


  public void setInstrumentIdentifiers(Map<String, String> instrumentIdentifiers) {
    this.instrumentIdentifiers = instrumentIdentifiers;
  }


  public Allocation version(Version version) {
    
    this.version = version;
    return this;
  }

   /**
   * Get version
   * @return version
  **/
  @javax.annotation.Nullable
  public Version getVersion() {
    return version;
  }


  public void setVersion(Version version) {
    this.version = version;
  }


  public Allocation properties(Map<String, PerpetualProperty> properties) {
    
    this.properties = properties;
    return this;
  }

  public Allocation putPropertiesItem(String key, PerpetualProperty propertiesItem) {
    if (this.properties == null) {
      this.properties = new HashMap<>();
    }
    this.properties.put(key, propertiesItem);
    return this;
  }

   /**
   * Client-defined properties associated with this allocation.
   * @return properties
  **/
  @javax.annotation.Nullable
  public Map<String, PerpetualProperty> getProperties() {
    return properties;
  }


  public void setProperties(Map<String, PerpetualProperty> properties) {
    this.properties = properties;
  }


  public Allocation instrumentScope(String instrumentScope) {
    
    this.instrumentScope = instrumentScope;
    return this;
  }

   /**
   * The scope in which the instrument lies
   * @return instrumentScope
  **/
  @javax.annotation.Nullable
  public String getInstrumentScope() {
    return instrumentScope;
  }


  public void setInstrumentScope(String instrumentScope) {
    this.instrumentScope = instrumentScope;
  }


  public Allocation lusidInstrumentId(String lusidInstrumentId) {
    
    this.lusidInstrumentId = lusidInstrumentId;
    return this;
  }

   /**
   * The LUSID instrument id for the instrument allocated.
   * @return lusidInstrumentId
  **/
  @javax.annotation.Nonnull
  public String getLusidInstrumentId() {
    return lusidInstrumentId;
  }


  public void setLusidInstrumentId(String lusidInstrumentId) {
    this.lusidInstrumentId = lusidInstrumentId;
  }


  public Allocation placementIds(List<ResourceId> placementIds) {
    
    this.placementIds = placementIds;
    return this;
  }

  public Allocation addPlacementIdsItem(ResourceId placementIdsItem) {
    if (this.placementIds == null) {
      this.placementIds = new ArrayList<>();
    }
    this.placementIds.add(placementIdsItem);
    return this;
  }

   /**
   * A placement - also known as an order placed in the market - associated with this allocation.
   * @return placementIds
  **/
  @javax.annotation.Nullable
  public List<ResourceId> getPlacementIds() {
    return placementIds;
  }


  public void setPlacementIds(List<ResourceId> placementIds) {
    this.placementIds = placementIds;
  }


  public Allocation state(String state) {
    
    this.state = state;
    return this;
  }

   /**
   * The state of this allocation.
   * @return state
  **/
  @javax.annotation.Nullable
  public String getState() {
    return state;
  }


  public void setState(String state) {
    this.state = state;
  }


  public Allocation side(String side) {
    
    this.side = side;
    return this;
  }

   /**
   * The side of this allocation (examples: Buy, Sell, ...).
   * @return side
  **/
  @javax.annotation.Nullable
  public String getSide() {
    return side;
  }


  public void setSide(String side) {
    this.side = side;
  }


  public Allocation type(String type) {
    
    this.type = type;
    return this;
  }

   /**
   * The type of order associated with this allocation (examples: Limit, Market, ...).
   * @return type
  **/
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }


  public void setType(String type) {
    this.type = type;
  }


  public Allocation settlementDate(OffsetDateTime settlementDate) {
    
    this.settlementDate = settlementDate;
    return this;
  }

   /**
   * The settlement date for this allocation.
   * @return settlementDate
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getSettlementDate() {
    return settlementDate;
  }


  public void setSettlementDate(OffsetDateTime settlementDate) {
    this.settlementDate = settlementDate;
  }


  public Allocation date(OffsetDateTime date) {
    
    this.date = date;
    return this;
  }

   /**
   * The date of this allocation.
   * @return date
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getDate() {
    return date;
  }


  public void setDate(OffsetDateTime date) {
    this.date = date;
  }


  public Allocation price(CurrencyAndAmount price) {
    
    this.price = price;
    return this;
  }

   /**
   * Get price
   * @return price
  **/
  @javax.annotation.Nullable
  public CurrencyAndAmount getPrice() {
    return price;
  }


  public void setPrice(CurrencyAndAmount price) {
    this.price = price;
  }


  public Allocation settlementCurrency(String settlementCurrency) {
    
    this.settlementCurrency = settlementCurrency;
    return this;
  }

   /**
   * The settlement currency of this allocation.
   * @return settlementCurrency
  **/
  @javax.annotation.Nullable
  public String getSettlementCurrency() {
    return settlementCurrency;
  }


  public void setSettlementCurrency(String settlementCurrency) {
    this.settlementCurrency = settlementCurrency;
  }


  public Allocation settlementCurrencyFxRate(java.math.BigDecimal settlementCurrencyFxRate) {
    
    this.settlementCurrencyFxRate = settlementCurrencyFxRate;
    return this;
  }

   /**
   * The settlement currency to allocation currency FX rate.
   * @return settlementCurrencyFxRate
  **/
  @javax.annotation.Nullable
  public java.math.BigDecimal getSettlementCurrencyFxRate() {
    return settlementCurrencyFxRate;
  }


  public void setSettlementCurrencyFxRate(java.math.BigDecimal settlementCurrencyFxRate) {
    this.settlementCurrencyFxRate = settlementCurrencyFxRate;
  }


  public Allocation counterparty(String counterparty) {
    
    this.counterparty = counterparty;
    return this;
  }

   /**
   * The counterparty for this allocation.
   * @return counterparty
  **/
  @javax.annotation.Nullable
  public String getCounterparty() {
    return counterparty;
  }


  public void setCounterparty(String counterparty) {
    this.counterparty = counterparty;
  }


  public Allocation executionIds(List<ResourceId> executionIds) {
    
    this.executionIds = executionIds;
    return this;
  }

  public Allocation addExecutionIdsItem(ResourceId executionIdsItem) {
    if (this.executionIds == null) {
      this.executionIds = new ArrayList<>();
    }
    this.executionIds.add(executionIdsItem);
    return this;
  }

   /**
   * The executions associated with this allocation
   * @return executionIds
  **/
  @javax.annotation.Nullable
  public List<ResourceId> getExecutionIds() {
    return executionIds;
  }


  public void setExecutionIds(List<ResourceId> executionIds) {
    this.executionIds = executionIds;
  }


  public Allocation links(List<Link> links) {
    
    this.links = links;
    return this;
  }

  public Allocation addLinksItem(Link linksItem) {
    if (this.links == null) {
      this.links = new ArrayList<>();
    }
    this.links.add(linksItem);
    return this;
  }

   /**
   * Get links
   * @return links
  **/
  @javax.annotation.Nullable
  public List<Link> getLinks() {
    return links;
  }


  public void setLinks(List<Link> links) {
    this.links = links;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Allocation allocation = (Allocation) o;
    return Objects.equals(this.id, allocation.id) &&
        Objects.equals(this.allocatedOrderId, allocation.allocatedOrderId) &&
        Objects.equals(this.portfolioId, allocation.portfolioId) &&
        (this.quantity.compareTo(allocation.getQuantity()) == 0) &&
        Objects.equals(this.instrumentIdentifiers, allocation.instrumentIdentifiers) &&
        Objects.equals(this.version, allocation.version) &&
        Objects.equals(this.properties, allocation.properties) &&
        Objects.equals(this.instrumentScope, allocation.instrumentScope) &&
        Objects.equals(this.lusidInstrumentId, allocation.lusidInstrumentId) &&
        Objects.equals(this.placementIds, allocation.placementIds) &&
        Objects.equals(this.state, allocation.state) &&
        Objects.equals(this.side, allocation.side) &&
        Objects.equals(this.type, allocation.type) &&
        Objects.equals(this.settlementDate, allocation.settlementDate) &&
        Objects.equals(this.date, allocation.date) &&
        Objects.equals(this.price, allocation.price) &&
        Objects.equals(this.settlementCurrency, allocation.settlementCurrency) &&
        (this.settlementCurrencyFxRate.compareTo(allocation.getSettlementCurrencyFxRate()) == 0) &&
        Objects.equals(this.counterparty, allocation.counterparty) &&
        Objects.equals(this.executionIds, allocation.executionIds) &&
        Objects.equals(this.links, allocation.links);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, allocatedOrderId, portfolioId, quantity, instrumentIdentifiers, version, properties, instrumentScope, lusidInstrumentId, placementIds, state, side, type, settlementDate, date, price, settlementCurrency, settlementCurrencyFxRate, counterparty, executionIds, links);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Allocation {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    allocatedOrderId: ").append(toIndentedString(allocatedOrderId)).append("\n");
    sb.append("    portfolioId: ").append(toIndentedString(portfolioId)).append("\n");
    sb.append("    quantity: ").append(toIndentedString(quantity)).append("\n");
    sb.append("    instrumentIdentifiers: ").append(toIndentedString(instrumentIdentifiers)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
    sb.append("    instrumentScope: ").append(toIndentedString(instrumentScope)).append("\n");
    sb.append("    lusidInstrumentId: ").append(toIndentedString(lusidInstrumentId)).append("\n");
    sb.append("    placementIds: ").append(toIndentedString(placementIds)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    side: ").append(toIndentedString(side)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    settlementDate: ").append(toIndentedString(settlementDate)).append("\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("    settlementCurrency: ").append(toIndentedString(settlementCurrency)).append("\n");
    sb.append("    settlementCurrencyFxRate: ").append(toIndentedString(settlementCurrencyFxRate)).append("\n");
    sb.append("    counterparty: ").append(toIndentedString(counterparty)).append("\n");
    sb.append("    executionIds: ").append(toIndentedString(executionIds)).append("\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("allocatedOrderId");
    openapiFields.add("portfolioId");
    openapiFields.add("quantity");
    openapiFields.add("instrumentIdentifiers");
    openapiFields.add("version");
    openapiFields.add("properties");
    openapiFields.add("instrumentScope");
    openapiFields.add("lusidInstrumentId");
    openapiFields.add("placementIds");
    openapiFields.add("state");
    openapiFields.add("side");
    openapiFields.add("type");
    openapiFields.add("settlementDate");
    openapiFields.add("date");
    openapiFields.add("price");
    openapiFields.add("settlementCurrency");
    openapiFields.add("settlementCurrencyFxRate");
    openapiFields.add("counterparty");
    openapiFields.add("executionIds");
    openapiFields.add("links");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("allocatedOrderId");
    openapiRequiredFields.add("portfolioId");
    openapiRequiredFields.add("quantity");
    openapiRequiredFields.add("instrumentIdentifiers");
    openapiRequiredFields.add("lusidInstrumentId");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Allocation
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Allocation.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Allocation is not found in the empty JSON string", Allocation.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!Allocation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Allocation` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Allocation.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // validate the required field `id`
      ResourceId.validateJsonObject(jsonObj.getAsJsonObject("id"));
      // validate the required field `allocatedOrderId`
      ResourceId.validateJsonObject(jsonObj.getAsJsonObject("allocatedOrderId"));
      // validate the required field `portfolioId`
      ResourceId.validateJsonObject(jsonObj.getAsJsonObject("portfolioId"));
      // validate the optional field `version`
      if (jsonObj.get("version") != null && !jsonObj.get("version").isJsonNull()) {
        Version.validateJsonObject(jsonObj.getAsJsonObject("version"));
      }
      if ((jsonObj.get("instrumentScope") != null && !jsonObj.get("instrumentScope").isJsonNull()) && !jsonObj.get("instrumentScope").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `instrumentScope` to be a primitive type in the JSON string but got `%s`", jsonObj.get("instrumentScope").toString()));
      }
      if (!jsonObj.get("lusidInstrumentId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lusidInstrumentId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lusidInstrumentId").toString()));
      }
      if (jsonObj.get("placementIds") != null && !jsonObj.get("placementIds").isJsonNull()) {
        JsonArray jsonArrayplacementIds = jsonObj.getAsJsonArray("placementIds");
        if (jsonArrayplacementIds != null) {
          // ensure the json data is an array
          if (!jsonObj.get("placementIds").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `placementIds` to be an array in the JSON string but got `%s`", jsonObj.get("placementIds").toString()));
          }

          // validate the optional field `placementIds` (array)
          for (int i = 0; i < jsonArrayplacementIds.size(); i++) {
            ResourceId.validateJsonObject(jsonArrayplacementIds.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      if ((jsonObj.get("side") != null && !jsonObj.get("side").isJsonNull()) && !jsonObj.get("side").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `side` to be a primitive type in the JSON string but got `%s`", jsonObj.get("side").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `price`
      if (jsonObj.get("price") != null && !jsonObj.get("price").isJsonNull()) {
        CurrencyAndAmount.validateJsonObject(jsonObj.getAsJsonObject("price"));
      }
      if ((jsonObj.get("settlementCurrency") != null && !jsonObj.get("settlementCurrency").isJsonNull()) && !jsonObj.get("settlementCurrency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `settlementCurrency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("settlementCurrency").toString()));
      }
      if ((jsonObj.get("counterparty") != null && !jsonObj.get("counterparty").isJsonNull()) && !jsonObj.get("counterparty").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `counterparty` to be a primitive type in the JSON string but got `%s`", jsonObj.get("counterparty").toString()));
      }
      if (jsonObj.get("executionIds") != null && !jsonObj.get("executionIds").isJsonNull()) {
        JsonArray jsonArrayexecutionIds = jsonObj.getAsJsonArray("executionIds");
        if (jsonArrayexecutionIds != null) {
          // ensure the json data is an array
          if (!jsonObj.get("executionIds").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `executionIds` to be an array in the JSON string but got `%s`", jsonObj.get("executionIds").toString()));
          }

          // validate the optional field `executionIds` (array)
          for (int i = 0; i < jsonArrayexecutionIds.size(); i++) {
            ResourceId.validateJsonObject(jsonArrayexecutionIds.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("links") != null && !jsonObj.get("links").isJsonNull()) {
        JsonArray jsonArraylinks = jsonObj.getAsJsonArray("links");
        if (jsonArraylinks != null) {
          // ensure the json data is an array
          if (!jsonObj.get("links").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `links` to be an array in the JSON string but got `%s`", jsonObj.get("links").toString()));
          }

          // validate the optional field `links` (array)
          for (int i = 0; i < jsonArraylinks.size(); i++) {
            Link.validateJsonObject(jsonArraylinks.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Allocation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Allocation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Allocation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Allocation.class));

       return (TypeAdapter<T>) new TypeAdapter<Allocation>() {
           @Override
           public void write(JsonWriter out, Allocation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Allocation read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Allocation given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Allocation
  * @throws IOException if the JSON string is invalid with respect to Allocation
  */
  public static Allocation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Allocation.class);
  }

 /**
  * Convert an instance of Allocation to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
