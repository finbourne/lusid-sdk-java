/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * Provides information on the primary time zone of an instrument and optional cut labels  for defining times to be used by instrument events.
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class TimeZoneConventions {
  public static final String SERIALIZED_NAME_PRIMARY_TIME_ZONE = "primaryTimeZone";
  @SerializedName(SERIALIZED_NAME_PRIMARY_TIME_ZONE)
  private String primaryTimeZone;

  public static final String SERIALIZED_NAME_START_OF_DAY = "startOfDay";
  @SerializedName(SERIALIZED_NAME_START_OF_DAY)
  private String startOfDay;

  public static final String SERIALIZED_NAME_PRIMARY_MARKET_OPEN = "primaryMarketOpen";
  @SerializedName(SERIALIZED_NAME_PRIMARY_MARKET_OPEN)
  private String primaryMarketOpen;

  public TimeZoneConventions() {
  }

  public TimeZoneConventions primaryTimeZone(String primaryTimeZone) {
    
    this.primaryTimeZone = primaryTimeZone;
    return this;
  }

   /**
   * The IANA time zone code for the instrument.
   * @return primaryTimeZone
  **/
  @jakarta.annotation.Nonnull
  public String getPrimaryTimeZone() {
    return primaryTimeZone;
  }


  public void setPrimaryTimeZone(String primaryTimeZone) {
    this.primaryTimeZone = primaryTimeZone;
  }


  public TimeZoneConventions startOfDay(String startOfDay) {
    
    this.startOfDay = startOfDay;
    return this;
  }

   /**
   * A LUSID Cut Label code used for generating instrument events at a time other than local midnight.
   * @return startOfDay
  **/
  @jakarta.annotation.Nullable
  public String getStartOfDay() {
    return startOfDay;
  }


  public void setStartOfDay(String startOfDay) {
    this.startOfDay = startOfDay;
  }


  public TimeZoneConventions primaryMarketOpen(String primaryMarketOpen) {
    
    this.primaryMarketOpen = primaryMarketOpen;
    return this;
  }

   /**
   * A LUSID Cut Label code used for delaying the transaction time of certain instrument events until market open.
   * @return primaryMarketOpen
  **/
  @jakarta.annotation.Nullable
  public String getPrimaryMarketOpen() {
    return primaryMarketOpen;
  }


  public void setPrimaryMarketOpen(String primaryMarketOpen) {
    this.primaryMarketOpen = primaryMarketOpen;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TimeZoneConventions timeZoneConventions = (TimeZoneConventions) o;
    return Objects.equals(this.primaryTimeZone, timeZoneConventions.primaryTimeZone) &&
        Objects.equals(this.startOfDay, timeZoneConventions.startOfDay) &&
        Objects.equals(this.primaryMarketOpen, timeZoneConventions.primaryMarketOpen);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(primaryTimeZone, startOfDay, primaryMarketOpen);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TimeZoneConventions {\n");
    sb.append("    primaryTimeZone: ").append(toIndentedString(primaryTimeZone)).append("\n");
    sb.append("    startOfDay: ").append(toIndentedString(startOfDay)).append("\n");
    sb.append("    primaryMarketOpen: ").append(toIndentedString(primaryMarketOpen)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("primaryTimeZone");
    openapiFields.add("startOfDay");
    openapiFields.add("primaryMarketOpen");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("primaryTimeZone");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to TimeZoneConventions
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TimeZoneConventions.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TimeZoneConventions is not found in the empty JSON string", TimeZoneConventions.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TimeZoneConventions.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("primaryTimeZone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `primaryTimeZone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("primaryTimeZone").toString()));
      }
      if ((jsonObj.get("startOfDay") != null && !jsonObj.get("startOfDay").isJsonNull()) && !jsonObj.get("startOfDay").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `startOfDay` to be a primitive type in the JSON string but got `%s`", jsonObj.get("startOfDay").toString()));
      }
      if ((jsonObj.get("primaryMarketOpen") != null && !jsonObj.get("primaryMarketOpen").isJsonNull()) && !jsonObj.get("primaryMarketOpen").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `primaryMarketOpen` to be a primitive type in the JSON string but got `%s`", jsonObj.get("primaryMarketOpen").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TimeZoneConventions.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TimeZoneConventions' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TimeZoneConventions> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TimeZoneConventions.class));

       return (TypeAdapter<T>) new TypeAdapter<TimeZoneConventions>() {
           @Override
           public void write(JsonWriter out, TimeZoneConventions value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TimeZoneConventions read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TimeZoneConventions given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TimeZoneConventions
  * @throws IOException if the JSON string is invalid with respect to TimeZoneConventions
  */
  public static TimeZoneConventions fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TimeZoneConventions.class);
  }

 /**
  * Convert an instance of TimeZoneConventions to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
