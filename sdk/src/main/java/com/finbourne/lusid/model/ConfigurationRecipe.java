/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import com.finbourne.lusid.model.AggregationContext;
import com.finbourne.lusid.model.HoldingContext;
import com.finbourne.lusid.model.MarketContext;
import com.finbourne.lusid.model.PricingContext;
import com.finbourne.lusid.model.TranslationContext;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * The Configuration or Calculation Recipe controls how LUSID processes a given request.  This can be used to change where market data used in pricing is loaded from and in what order, or which model is used to  price a given instrument as well as how aggregation will process the produced results.
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ConfigurationRecipe {
  public static final String SERIALIZED_NAME_SCOPE = "scope";
  @SerializedName(SERIALIZED_NAME_SCOPE)
  private String scope;

  public static final String SERIALIZED_NAME_CODE = "code";
  @SerializedName(SERIALIZED_NAME_CODE)
  private String code;

  public static final String SERIALIZED_NAME_MARKET = "market";
  @SerializedName(SERIALIZED_NAME_MARKET)
  private MarketContext market;

  public static final String SERIALIZED_NAME_PRICING = "pricing";
  @SerializedName(SERIALIZED_NAME_PRICING)
  private PricingContext pricing;

  public static final String SERIALIZED_NAME_AGGREGATION = "aggregation";
  @SerializedName(SERIALIZED_NAME_AGGREGATION)
  private AggregationContext aggregation;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_HOLDING = "holding";
  @SerializedName(SERIALIZED_NAME_HOLDING)
  private HoldingContext holding;

  public static final String SERIALIZED_NAME_TRANSLATION = "translation";
  @SerializedName(SERIALIZED_NAME_TRANSLATION)
  private TranslationContext translation;

  public ConfigurationRecipe() {
  }

  public ConfigurationRecipe scope(String scope) {
    
    this.scope = scope;
    return this;
  }

   /**
   * The scope used when updating or inserting the Configuration Recipe.
   * @return scope
  **/
  @jakarta.annotation.Nonnull
  public String getScope() {
    return scope;
  }


  public void setScope(String scope) {
    this.scope = scope;
  }


  public ConfigurationRecipe code(String code) {
    
    this.code = code;
    return this;
  }

   /**
   * User given string name (code) to identify the recipe.
   * @return code
  **/
  @jakarta.annotation.Nonnull
  public String getCode() {
    return code;
  }


  public void setCode(String code) {
    this.code = code;
  }


  public ConfigurationRecipe market(MarketContext market) {
    
    this.market = market;
    return this;
  }

   /**
   * Get market
   * @return market
  **/
  @jakarta.annotation.Nullable
  public MarketContext getMarket() {
    return market;
  }


  public void setMarket(MarketContext market) {
    this.market = market;
  }


  public ConfigurationRecipe pricing(PricingContext pricing) {
    
    this.pricing = pricing;
    return this;
  }

   /**
   * Get pricing
   * @return pricing
  **/
  @jakarta.annotation.Nullable
  public PricingContext getPricing() {
    return pricing;
  }


  public void setPricing(PricingContext pricing) {
    this.pricing = pricing;
  }


  public ConfigurationRecipe aggregation(AggregationContext aggregation) {
    
    this.aggregation = aggregation;
    return this;
  }

   /**
   * Get aggregation
   * @return aggregation
  **/
  @jakarta.annotation.Nullable
  public AggregationContext getAggregation() {
    return aggregation;
  }


  public void setAggregation(AggregationContext aggregation) {
    this.aggregation = aggregation;
  }


  public ConfigurationRecipe description(String description) {
    
    this.description = description;
    return this;
  }

   /**
   * User can assign a description to understand more humanly the recipe.
   * @return description
  **/
  @jakarta.annotation.Nullable
  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    this.description = description;
  }


  public ConfigurationRecipe holding(HoldingContext holding) {
    
    this.holding = holding;
    return this;
  }

   /**
   * Get holding
   * @return holding
  **/
  @jakarta.annotation.Nullable
  public HoldingContext getHolding() {
    return holding;
  }


  public void setHolding(HoldingContext holding) {
    this.holding = holding;
  }


  public ConfigurationRecipe translation(TranslationContext translation) {
    
    this.translation = translation;
    return this;
  }

   /**
   * Get translation
   * @return translation
  **/
  @jakarta.annotation.Nullable
  public TranslationContext getTranslation() {
    return translation;
  }


  public void setTranslation(TranslationContext translation) {
    this.translation = translation;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConfigurationRecipe configurationRecipe = (ConfigurationRecipe) o;
    return Objects.equals(this.scope, configurationRecipe.scope) &&
        Objects.equals(this.code, configurationRecipe.code) &&
        Objects.equals(this.market, configurationRecipe.market) &&
        Objects.equals(this.pricing, configurationRecipe.pricing) &&
        Objects.equals(this.aggregation, configurationRecipe.aggregation) &&
        Objects.equals(this.description, configurationRecipe.description) &&
        Objects.equals(this.holding, configurationRecipe.holding) &&
        Objects.equals(this.translation, configurationRecipe.translation);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(scope, code, market, pricing, aggregation, description, holding, translation);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConfigurationRecipe {\n");
    sb.append("    scope: ").append(toIndentedString(scope)).append("\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    market: ").append(toIndentedString(market)).append("\n");
    sb.append("    pricing: ").append(toIndentedString(pricing)).append("\n");
    sb.append("    aggregation: ").append(toIndentedString(aggregation)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    holding: ").append(toIndentedString(holding)).append("\n");
    sb.append("    translation: ").append(toIndentedString(translation)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("scope");
    openapiFields.add("code");
    openapiFields.add("market");
    openapiFields.add("pricing");
    openapiFields.add("aggregation");
    openapiFields.add("description");
    openapiFields.add("holding");
    openapiFields.add("translation");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("scope");
    openapiRequiredFields.add("code");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ConfigurationRecipe
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ConfigurationRecipe.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ConfigurationRecipe is not found in the empty JSON string", ConfigurationRecipe.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ConfigurationRecipe.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("scope").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `scope` to be a primitive type in the JSON string but got `%s`", jsonObj.get("scope").toString()));
      }
      if (!jsonObj.get("code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("code").toString()));
      }
      // validate the optional field `market`
      if (jsonObj.get("market") != null && !jsonObj.get("market").isJsonNull()) {
        MarketContext.validateJsonElement(jsonObj.get("market"));
      }
      // validate the optional field `pricing`
      if (jsonObj.get("pricing") != null && !jsonObj.get("pricing").isJsonNull()) {
        PricingContext.validateJsonElement(jsonObj.get("pricing"));
      }
      // validate the optional field `aggregation`
      if (jsonObj.get("aggregation") != null && !jsonObj.get("aggregation").isJsonNull()) {
        AggregationContext.validateJsonElement(jsonObj.get("aggregation"));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // validate the optional field `holding`
      if (jsonObj.get("holding") != null && !jsonObj.get("holding").isJsonNull()) {
        HoldingContext.validateJsonElement(jsonObj.get("holding"));
      }
      // validate the optional field `translation`
      if (jsonObj.get("translation") != null && !jsonObj.get("translation").isJsonNull()) {
        TranslationContext.validateJsonElement(jsonObj.get("translation"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ConfigurationRecipe.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ConfigurationRecipe' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ConfigurationRecipe> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ConfigurationRecipe.class));

       return (TypeAdapter<T>) new TypeAdapter<ConfigurationRecipe>() {
           @Override
           public void write(JsonWriter out, ConfigurationRecipe value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ConfigurationRecipe read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ConfigurationRecipe given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ConfigurationRecipe
  * @throws IOException if the JSON string is invalid with respect to ConfigurationRecipe
  */
  public static ConfigurationRecipe fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ConfigurationRecipe.class);
  }

 /**
  * Convert an instance of ConfigurationRecipe to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
