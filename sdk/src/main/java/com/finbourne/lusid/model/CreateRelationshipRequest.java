/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * CreateRelationshipRequest
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class CreateRelationshipRequest {
  public static final String SERIALIZED_NAME_SOURCE_ENTITY_ID = "sourceEntityId";
  @SerializedName(SERIALIZED_NAME_SOURCE_ENTITY_ID)
  private Map<String, String> sourceEntityId = new HashMap<>();

  public static final String SERIALIZED_NAME_TARGET_ENTITY_ID = "targetEntityId";
  @SerializedName(SERIALIZED_NAME_TARGET_ENTITY_ID)
  private Map<String, String> targetEntityId = new HashMap<>();

  public static final String SERIALIZED_NAME_EFFECTIVE_FROM = "effectiveFrom";
  @SerializedName(SERIALIZED_NAME_EFFECTIVE_FROM)
  private String effectiveFrom;

  public static final String SERIALIZED_NAME_EFFECTIVE_UNTIL = "effectiveUntil";
  @SerializedName(SERIALIZED_NAME_EFFECTIVE_UNTIL)
  private String effectiveUntil;

  public CreateRelationshipRequest() {
  }

  public CreateRelationshipRequest sourceEntityId(Map<String, String> sourceEntityId) {
    
    this.sourceEntityId = sourceEntityId;
    return this;
  }

  public CreateRelationshipRequest putSourceEntityIdItem(String key, String sourceEntityIdItem) {
    if (this.sourceEntityId == null) {
      this.sourceEntityId = new HashMap<>();
    }
    this.sourceEntityId.put(key, sourceEntityIdItem);
    return this;
  }

   /**
   * The identifier of the source entity.
   * @return sourceEntityId
  **/
  @jakarta.annotation.Nonnull
  public Map<String, String> getSourceEntityId() {
    return sourceEntityId;
  }


  public void setSourceEntityId(Map<String, String> sourceEntityId) {
    this.sourceEntityId = sourceEntityId;
  }


  public CreateRelationshipRequest targetEntityId(Map<String, String> targetEntityId) {
    
    this.targetEntityId = targetEntityId;
    return this;
  }

  public CreateRelationshipRequest putTargetEntityIdItem(String key, String targetEntityIdItem) {
    if (this.targetEntityId == null) {
      this.targetEntityId = new HashMap<>();
    }
    this.targetEntityId.put(key, targetEntityIdItem);
    return this;
  }

   /**
   * The identifier of the target entity.
   * @return targetEntityId
  **/
  @jakarta.annotation.Nonnull
  public Map<String, String> getTargetEntityId() {
    return targetEntityId;
  }


  public void setTargetEntityId(Map<String, String> targetEntityId) {
    this.targetEntityId = targetEntityId;
  }


  public CreateRelationshipRequest effectiveFrom(String effectiveFrom) {
    
    this.effectiveFrom = effectiveFrom;
    return this;
  }

   /**
   * The effective date of the relationship to be created
   * @return effectiveFrom
  **/
  @jakarta.annotation.Nullable
  public String getEffectiveFrom() {
    return effectiveFrom;
  }


  public void setEffectiveFrom(String effectiveFrom) {
    this.effectiveFrom = effectiveFrom;
  }


  public CreateRelationshipRequest effectiveUntil(String effectiveUntil) {
    
    this.effectiveUntil = effectiveUntil;
    return this;
  }

   /**
   * The effective datetime until which the relationship is valid. If not supplied this will be valid indefinitely.
   * @return effectiveUntil
  **/
  @jakarta.annotation.Nullable
  public String getEffectiveUntil() {
    return effectiveUntil;
  }


  public void setEffectiveUntil(String effectiveUntil) {
    this.effectiveUntil = effectiveUntil;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateRelationshipRequest createRelationshipRequest = (CreateRelationshipRequest) o;
    return Objects.equals(this.sourceEntityId, createRelationshipRequest.sourceEntityId) &&
        Objects.equals(this.targetEntityId, createRelationshipRequest.targetEntityId) &&
        Objects.equals(this.effectiveFrom, createRelationshipRequest.effectiveFrom) &&
        Objects.equals(this.effectiveUntil, createRelationshipRequest.effectiveUntil);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(sourceEntityId, targetEntityId, effectiveFrom, effectiveUntil);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateRelationshipRequest {\n");
    sb.append("    sourceEntityId: ").append(toIndentedString(sourceEntityId)).append("\n");
    sb.append("    targetEntityId: ").append(toIndentedString(targetEntityId)).append("\n");
    sb.append("    effectiveFrom: ").append(toIndentedString(effectiveFrom)).append("\n");
    sb.append("    effectiveUntil: ").append(toIndentedString(effectiveUntil)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("sourceEntityId");
    openapiFields.add("targetEntityId");
    openapiFields.add("effectiveFrom");
    openapiFields.add("effectiveUntil");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("sourceEntityId");
    openapiRequiredFields.add("targetEntityId");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to CreateRelationshipRequest
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateRelationshipRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateRelationshipRequest is not found in the empty JSON string", CreateRelationshipRequest.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateRelationshipRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("effectiveFrom") != null && !jsonObj.get("effectiveFrom").isJsonNull()) && !jsonObj.get("effectiveFrom").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `effectiveFrom` to be a primitive type in the JSON string but got `%s`", jsonObj.get("effectiveFrom").toString()));
      }
      if ((jsonObj.get("effectiveUntil") != null && !jsonObj.get("effectiveUntil").isJsonNull()) && !jsonObj.get("effectiveUntil").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `effectiveUntil` to be a primitive type in the JSON string but got `%s`", jsonObj.get("effectiveUntil").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateRelationshipRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateRelationshipRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateRelationshipRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateRelationshipRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateRelationshipRequest>() {
           @Override
           public void write(JsonWriter out, CreateRelationshipRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateRelationshipRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CreateRelationshipRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CreateRelationshipRequest
  * @throws IOException if the JSON string is invalid with respect to CreateRelationshipRequest
  */
  public static CreateRelationshipRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateRelationshipRequest.class);
  }

 /**
  * Convert an instance of CreateRelationshipRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
