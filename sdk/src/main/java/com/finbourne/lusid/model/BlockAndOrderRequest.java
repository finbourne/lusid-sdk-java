/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import com.finbourne.lusid.model.CurrencyAndAmount;
import com.finbourne.lusid.model.PerpetualProperty;
import com.finbourne.lusid.model.ResourceId;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * BlockAndOrderRequest
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class BlockAndOrderRequest {
  public static final String SERIALIZED_NAME_BLOCK_ID = "blockId";
  @SerializedName(SERIALIZED_NAME_BLOCK_ID)
  private ResourceId blockId;

  public static final String SERIALIZED_NAME_ORDER_ID = "orderId";
  @SerializedName(SERIALIZED_NAME_ORDER_ID)
  private ResourceId orderId;

  public static final String SERIALIZED_NAME_ORDER_PROPERTIES = "orderProperties";
  @SerializedName(SERIALIZED_NAME_ORDER_PROPERTIES)
  private Map<String, PerpetualProperty> orderProperties;

  public static final String SERIALIZED_NAME_BLOCK_PROPERTIES = "blockProperties";
  @SerializedName(SERIALIZED_NAME_BLOCK_PROPERTIES)
  private Map<String, PerpetualProperty> blockProperties;

  public static final String SERIALIZED_NAME_INSTRUMENT_IDENTIFIERS = "instrumentIdentifiers";
  @SerializedName(SERIALIZED_NAME_INSTRUMENT_IDENTIFIERS)
  private Map<String, String> instrumentIdentifiers = new HashMap<>();

  public static final String SERIALIZED_NAME_QUANTITY = "quantity";
  @SerializedName(SERIALIZED_NAME_QUANTITY)
  private java.math.BigDecimal quantity;

  public static final String SERIALIZED_NAME_SIDE = "side";
  @SerializedName(SERIALIZED_NAME_SIDE)
  private String side;

  public static final String SERIALIZED_NAME_ORDER_BOOK_ID = "orderBookId";
  @SerializedName(SERIALIZED_NAME_ORDER_BOOK_ID)
  private ResourceId orderBookId;

  public static final String SERIALIZED_NAME_PORTFOLIO_ID = "portfolioId";
  @SerializedName(SERIALIZED_NAME_PORTFOLIO_ID)
  private ResourceId portfolioId;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private String state;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_TIME_IN_FORCE = "timeInForce";
  @SerializedName(SERIALIZED_NAME_TIME_IN_FORCE)
  private String timeInForce;

  public static final String SERIALIZED_NAME_DATE = "date";
  @SerializedName(SERIALIZED_NAME_DATE)
  private OffsetDateTime date;

  public static final String SERIALIZED_NAME_PRICE = "price";
  @SerializedName(SERIALIZED_NAME_PRICE)
  private CurrencyAndAmount price;

  public static final String SERIALIZED_NAME_LIMIT_PRICE = "limitPrice";
  @SerializedName(SERIALIZED_NAME_LIMIT_PRICE)
  private CurrencyAndAmount limitPrice;

  public static final String SERIALIZED_NAME_STOP_PRICE = "stopPrice";
  @SerializedName(SERIALIZED_NAME_STOP_PRICE)
  private CurrencyAndAmount stopPrice;

  public static final String SERIALIZED_NAME_ORDER_INSTRUCTION = "orderInstruction";
  @SerializedName(SERIALIZED_NAME_ORDER_INSTRUCTION)
  private ResourceId orderInstruction;

  public static final String SERIALIZED_NAME_PACKAGE = "package";
  @SerializedName(SERIALIZED_NAME_PACKAGE)
  private ResourceId _package;

  public BlockAndOrderRequest() {
  }

  public BlockAndOrderRequest blockId(ResourceId blockId) {
    
    this.blockId = blockId;
    return this;
  }

   /**
   * Get blockId
   * @return blockId
  **/
  @jakarta.annotation.Nonnull
  public ResourceId getBlockId() {
    return blockId;
  }


  public void setBlockId(ResourceId blockId) {
    this.blockId = blockId;
  }


  public BlockAndOrderRequest orderId(ResourceId orderId) {
    
    this.orderId = orderId;
    return this;
  }

   /**
   * Get orderId
   * @return orderId
  **/
  @jakarta.annotation.Nonnull
  public ResourceId getOrderId() {
    return orderId;
  }


  public void setOrderId(ResourceId orderId) {
    this.orderId = orderId;
  }


  public BlockAndOrderRequest orderProperties(Map<String, PerpetualProperty> orderProperties) {
    
    this.orderProperties = orderProperties;
    return this;
  }

  public BlockAndOrderRequest putOrderPropertiesItem(String key, PerpetualProperty orderPropertiesItem) {
    if (this.orderProperties == null) {
      this.orderProperties = new HashMap<>();
    }
    this.orderProperties.put(key, orderPropertiesItem);
    return this;
  }

   /**
   * Client-defined properties associated with this order.
   * @return orderProperties
  **/
  @jakarta.annotation.Nullable
  public Map<String, PerpetualProperty> getOrderProperties() {
    return orderProperties;
  }


  public void setOrderProperties(Map<String, PerpetualProperty> orderProperties) {
    this.orderProperties = orderProperties;
  }


  public BlockAndOrderRequest blockProperties(Map<String, PerpetualProperty> blockProperties) {
    
    this.blockProperties = blockProperties;
    return this;
  }

  public BlockAndOrderRequest putBlockPropertiesItem(String key, PerpetualProperty blockPropertiesItem) {
    if (this.blockProperties == null) {
      this.blockProperties = new HashMap<>();
    }
    this.blockProperties.put(key, blockPropertiesItem);
    return this;
  }

   /**
   * Client-defined properties associated with this block.
   * @return blockProperties
  **/
  @jakarta.annotation.Nullable
  public Map<String, PerpetualProperty> getBlockProperties() {
    return blockProperties;
  }


  public void setBlockProperties(Map<String, PerpetualProperty> blockProperties) {
    this.blockProperties = blockProperties;
  }


  public BlockAndOrderRequest instrumentIdentifiers(Map<String, String> instrumentIdentifiers) {
    
    this.instrumentIdentifiers = instrumentIdentifiers;
    return this;
  }

  public BlockAndOrderRequest putInstrumentIdentifiersItem(String key, String instrumentIdentifiersItem) {
    if (this.instrumentIdentifiers == null) {
      this.instrumentIdentifiers = new HashMap<>();
    }
    this.instrumentIdentifiers.put(key, instrumentIdentifiersItem);
    return this;
  }

   /**
   * The instrument ordered.
   * @return instrumentIdentifiers
  **/
  @jakarta.annotation.Nonnull
  public Map<String, String> getInstrumentIdentifiers() {
    return instrumentIdentifiers;
  }


  public void setInstrumentIdentifiers(Map<String, String> instrumentIdentifiers) {
    this.instrumentIdentifiers = instrumentIdentifiers;
  }


  public BlockAndOrderRequest quantity(java.math.BigDecimal quantity) {
    
    this.quantity = quantity;
    return this;
  }

   /**
   * The quantity of given instrument ordered.
   * @return quantity
  **/
  @jakarta.annotation.Nonnull
  public java.math.BigDecimal getQuantity() {
    return quantity;
  }


  public void setQuantity(java.math.BigDecimal quantity) {
    this.quantity = quantity;
  }


  public BlockAndOrderRequest side(String side) {
    
    this.side = side;
    return this;
  }

   /**
   * The client&#39;s representation of the order&#39;s side (buy, sell, short, etc)
   * @return side
  **/
  @jakarta.annotation.Nonnull
  public String getSide() {
    return side;
  }


  public void setSide(String side) {
    this.side = side;
  }


  public BlockAndOrderRequest orderBookId(ResourceId orderBookId) {
    
    this.orderBookId = orderBookId;
    return this;
  }

   /**
   * Get orderBookId
   * @return orderBookId
  **/
  @jakarta.annotation.Nullable
  public ResourceId getOrderBookId() {
    return orderBookId;
  }


  public void setOrderBookId(ResourceId orderBookId) {
    this.orderBookId = orderBookId;
  }


  public BlockAndOrderRequest portfolioId(ResourceId portfolioId) {
    
    this.portfolioId = portfolioId;
    return this;
  }

   /**
   * Get portfolioId
   * @return portfolioId
  **/
  @jakarta.annotation.Nullable
  public ResourceId getPortfolioId() {
    return portfolioId;
  }


  public void setPortfolioId(ResourceId portfolioId) {
    this.portfolioId = portfolioId;
  }


  public BlockAndOrderRequest state(String state) {
    
    this.state = state;
    return this;
  }

   /**
   * The order&#39;s state (examples: New, PartiallyFilled, ...)
   * @return state
  **/
  @jakarta.annotation.Nullable
  public String getState() {
    return state;
  }


  public void setState(String state) {
    this.state = state;
  }


  public BlockAndOrderRequest type(String type) {
    
    this.type = type;
    return this;
  }

   /**
   * The order&#39;s type (examples: Limit, Market, ...)
   * @return type
  **/
  @jakarta.annotation.Nullable
  public String getType() {
    return type;
  }


  public void setType(String type) {
    this.type = type;
  }


  public BlockAndOrderRequest timeInForce(String timeInForce) {
    
    this.timeInForce = timeInForce;
    return this;
  }

   /**
   * The order&#39;s time in force (examples: Day, GoodTilCancel, ...)
   * @return timeInForce
  **/
  @jakarta.annotation.Nullable
  public String getTimeInForce() {
    return timeInForce;
  }


  public void setTimeInForce(String timeInForce) {
    this.timeInForce = timeInForce;
  }


  public BlockAndOrderRequest date(OffsetDateTime date) {
    
    this.date = date;
    return this;
  }

   /**
   * The date on which the order was made
   * @return date
  **/
  @jakarta.annotation.Nullable
  public OffsetDateTime getDate() {
    return date;
  }


  public void setDate(OffsetDateTime date) {
    this.date = date;
  }


  public BlockAndOrderRequest price(CurrencyAndAmount price) {
    
    this.price = price;
    return this;
  }

   /**
   * Get price
   * @return price
  **/
  @jakarta.annotation.Nullable
  public CurrencyAndAmount getPrice() {
    return price;
  }


  public void setPrice(CurrencyAndAmount price) {
    this.price = price;
  }


  public BlockAndOrderRequest limitPrice(CurrencyAndAmount limitPrice) {
    
    this.limitPrice = limitPrice;
    return this;
  }

   /**
   * Get limitPrice
   * @return limitPrice
  **/
  @jakarta.annotation.Nullable
  public CurrencyAndAmount getLimitPrice() {
    return limitPrice;
  }


  public void setLimitPrice(CurrencyAndAmount limitPrice) {
    this.limitPrice = limitPrice;
  }


  public BlockAndOrderRequest stopPrice(CurrencyAndAmount stopPrice) {
    
    this.stopPrice = stopPrice;
    return this;
  }

   /**
   * Get stopPrice
   * @return stopPrice
  **/
  @jakarta.annotation.Nullable
  public CurrencyAndAmount getStopPrice() {
    return stopPrice;
  }


  public void setStopPrice(CurrencyAndAmount stopPrice) {
    this.stopPrice = stopPrice;
  }


  public BlockAndOrderRequest orderInstruction(ResourceId orderInstruction) {
    
    this.orderInstruction = orderInstruction;
    return this;
  }

   /**
   * Get orderInstruction
   * @return orderInstruction
  **/
  @jakarta.annotation.Nullable
  public ResourceId getOrderInstruction() {
    return orderInstruction;
  }


  public void setOrderInstruction(ResourceId orderInstruction) {
    this.orderInstruction = orderInstruction;
  }


  public BlockAndOrderRequest _package(ResourceId _package) {
    
    this._package = _package;
    return this;
  }

   /**
   * Get _package
   * @return _package
  **/
  @jakarta.annotation.Nullable
  public ResourceId getPackage() {
    return _package;
  }


  public void setPackage(ResourceId _package) {
    this._package = _package;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BlockAndOrderRequest blockAndOrderRequest = (BlockAndOrderRequest) o;
    return Objects.equals(this.blockId, blockAndOrderRequest.blockId) &&
        Objects.equals(this.orderId, blockAndOrderRequest.orderId) &&
        Objects.equals(this.orderProperties, blockAndOrderRequest.orderProperties) &&
        Objects.equals(this.blockProperties, blockAndOrderRequest.blockProperties) &&
        Objects.equals(this.instrumentIdentifiers, blockAndOrderRequest.instrumentIdentifiers) &&
        (this.quantity.compareTo(blockAndOrderRequest.getQuantity()) == 0) &&
        Objects.equals(this.side, blockAndOrderRequest.side) &&
        Objects.equals(this.orderBookId, blockAndOrderRequest.orderBookId) &&
        Objects.equals(this.portfolioId, blockAndOrderRequest.portfolioId) &&
        Objects.equals(this.state, blockAndOrderRequest.state) &&
        Objects.equals(this.type, blockAndOrderRequest.type) &&
        Objects.equals(this.timeInForce, blockAndOrderRequest.timeInForce) &&
        Objects.equals(this.date, blockAndOrderRequest.date) &&
        Objects.equals(this.price, blockAndOrderRequest.price) &&
        Objects.equals(this.limitPrice, blockAndOrderRequest.limitPrice) &&
        Objects.equals(this.stopPrice, blockAndOrderRequest.stopPrice) &&
        Objects.equals(this.orderInstruction, blockAndOrderRequest.orderInstruction) &&
        Objects.equals(this._package, blockAndOrderRequest._package);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(blockId, orderId, orderProperties, blockProperties, instrumentIdentifiers, quantity, side, orderBookId, portfolioId, state, type, timeInForce, date, price, limitPrice, stopPrice, orderInstruction, _package);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BlockAndOrderRequest {\n");
    sb.append("    blockId: ").append(toIndentedString(blockId)).append("\n");
    sb.append("    orderId: ").append(toIndentedString(orderId)).append("\n");
    sb.append("    orderProperties: ").append(toIndentedString(orderProperties)).append("\n");
    sb.append("    blockProperties: ").append(toIndentedString(blockProperties)).append("\n");
    sb.append("    instrumentIdentifiers: ").append(toIndentedString(instrumentIdentifiers)).append("\n");
    sb.append("    quantity: ").append(toIndentedString(quantity)).append("\n");
    sb.append("    side: ").append(toIndentedString(side)).append("\n");
    sb.append("    orderBookId: ").append(toIndentedString(orderBookId)).append("\n");
    sb.append("    portfolioId: ").append(toIndentedString(portfolioId)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    timeInForce: ").append(toIndentedString(timeInForce)).append("\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("    limitPrice: ").append(toIndentedString(limitPrice)).append("\n");
    sb.append("    stopPrice: ").append(toIndentedString(stopPrice)).append("\n");
    sb.append("    orderInstruction: ").append(toIndentedString(orderInstruction)).append("\n");
    sb.append("    _package: ").append(toIndentedString(_package)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("blockId");
    openapiFields.add("orderId");
    openapiFields.add("orderProperties");
    openapiFields.add("blockProperties");
    openapiFields.add("instrumentIdentifiers");
    openapiFields.add("quantity");
    openapiFields.add("side");
    openapiFields.add("orderBookId");
    openapiFields.add("portfolioId");
    openapiFields.add("state");
    openapiFields.add("type");
    openapiFields.add("timeInForce");
    openapiFields.add("date");
    openapiFields.add("price");
    openapiFields.add("limitPrice");
    openapiFields.add("stopPrice");
    openapiFields.add("orderInstruction");
    openapiFields.add("package");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("blockId");
    openapiRequiredFields.add("orderId");
    openapiRequiredFields.add("instrumentIdentifiers");
    openapiRequiredFields.add("quantity");
    openapiRequiredFields.add("side");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to BlockAndOrderRequest
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BlockAndOrderRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BlockAndOrderRequest is not found in the empty JSON string", BlockAndOrderRequest.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : BlockAndOrderRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `blockId`
      ResourceId.validateJsonElement(jsonObj.get("blockId"));
      // validate the required field `orderId`
      ResourceId.validateJsonElement(jsonObj.get("orderId"));
      if (!jsonObj.get("side").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `side` to be a primitive type in the JSON string but got `%s`", jsonObj.get("side").toString()));
      }
      // validate the optional field `orderBookId`
      if (jsonObj.get("orderBookId") != null && !jsonObj.get("orderBookId").isJsonNull()) {
        ResourceId.validateJsonElement(jsonObj.get("orderBookId"));
      }
      // validate the optional field `portfolioId`
      if (jsonObj.get("portfolioId") != null && !jsonObj.get("portfolioId").isJsonNull()) {
        ResourceId.validateJsonElement(jsonObj.get("portfolioId"));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if ((jsonObj.get("timeInForce") != null && !jsonObj.get("timeInForce").isJsonNull()) && !jsonObj.get("timeInForce").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timeInForce` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timeInForce").toString()));
      }
      // validate the optional field `price`
      if (jsonObj.get("price") != null && !jsonObj.get("price").isJsonNull()) {
        CurrencyAndAmount.validateJsonElement(jsonObj.get("price"));
      }
      // validate the optional field `limitPrice`
      if (jsonObj.get("limitPrice") != null && !jsonObj.get("limitPrice").isJsonNull()) {
        CurrencyAndAmount.validateJsonElement(jsonObj.get("limitPrice"));
      }
      // validate the optional field `stopPrice`
      if (jsonObj.get("stopPrice") != null && !jsonObj.get("stopPrice").isJsonNull()) {
        CurrencyAndAmount.validateJsonElement(jsonObj.get("stopPrice"));
      }
      // validate the optional field `orderInstruction`
      if (jsonObj.get("orderInstruction") != null && !jsonObj.get("orderInstruction").isJsonNull()) {
        ResourceId.validateJsonElement(jsonObj.get("orderInstruction"));
      }
      // validate the optional field `package`
      if (jsonObj.get("package") != null && !jsonObj.get("package").isJsonNull()) {
        ResourceId.validateJsonElement(jsonObj.get("package"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BlockAndOrderRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BlockAndOrderRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BlockAndOrderRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BlockAndOrderRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<BlockAndOrderRequest>() {
           @Override
           public void write(JsonWriter out, BlockAndOrderRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BlockAndOrderRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of BlockAndOrderRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of BlockAndOrderRequest
  * @throws IOException if the JSON string is invalid with respect to BlockAndOrderRequest
  */
  public static BlockAndOrderRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BlockAndOrderRequest.class);
  }

 /**
  * Convert an instance of BlockAndOrderRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
