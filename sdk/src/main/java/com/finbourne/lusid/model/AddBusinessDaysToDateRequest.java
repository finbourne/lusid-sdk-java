/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * AddBusinessDaysToDateRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class AddBusinessDaysToDateRequest {
  public static final String SERIALIZED_NAME_BUSINESS_DAY_OFFSET = "businessDayOffset";
  @SerializedName(SERIALIZED_NAME_BUSINESS_DAY_OFFSET)
  private Integer businessDayOffset;

  public static final String SERIALIZED_NAME_HOLIDAY_CODES = "holidayCodes";
  @SerializedName(SERIALIZED_NAME_HOLIDAY_CODES)
  private List<String> holidayCodes = new ArrayList<>();

  public static final String SERIALIZED_NAME_START_DATE = "startDate";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  private OffsetDateTime startDate;

  public static final String SERIALIZED_NAME_AS_AT = "asAt";
  @SerializedName(SERIALIZED_NAME_AS_AT)
  private OffsetDateTime asAt;

  public AddBusinessDaysToDateRequest() {
  }

  public AddBusinessDaysToDateRequest businessDayOffset(Integer businessDayOffset) {
    
    this.businessDayOffset = businessDayOffset;
    return this;
  }

   /**
   * Get businessDayOffset
   * @return businessDayOffset
  **/
  @javax.annotation.Nonnull
  public Integer getBusinessDayOffset() {
    return businessDayOffset;
  }


  public void setBusinessDayOffset(Integer businessDayOffset) {
    this.businessDayOffset = businessDayOffset;
  }


  public AddBusinessDaysToDateRequest holidayCodes(List<String> holidayCodes) {
    
    this.holidayCodes = holidayCodes;
    return this;
  }

  public AddBusinessDaysToDateRequest addHolidayCodesItem(String holidayCodesItem) {
    if (this.holidayCodes == null) {
      this.holidayCodes = new ArrayList<>();
    }
    this.holidayCodes.add(holidayCodesItem);
    return this;
  }

   /**
   * Get holidayCodes
   * @return holidayCodes
  **/
  @javax.annotation.Nonnull
  public List<String> getHolidayCodes() {
    return holidayCodes;
  }


  public void setHolidayCodes(List<String> holidayCodes) {
    this.holidayCodes = holidayCodes;
  }


  public AddBusinessDaysToDateRequest startDate(OffsetDateTime startDate) {
    
    this.startDate = startDate;
    return this;
  }

   /**
   * Get startDate
   * @return startDate
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getStartDate() {
    return startDate;
  }


  public void setStartDate(OffsetDateTime startDate) {
    this.startDate = startDate;
  }


  public AddBusinessDaysToDateRequest asAt(OffsetDateTime asAt) {
    
    this.asAt = asAt;
    return this;
  }

   /**
   * Get asAt
   * @return asAt
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getAsAt() {
    return asAt;
  }


  public void setAsAt(OffsetDateTime asAt) {
    this.asAt = asAt;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AddBusinessDaysToDateRequest addBusinessDaysToDateRequest = (AddBusinessDaysToDateRequest) o;
    return Objects.equals(this.businessDayOffset, addBusinessDaysToDateRequest.businessDayOffset) &&
        Objects.equals(this.holidayCodes, addBusinessDaysToDateRequest.holidayCodes) &&
        Objects.equals(this.startDate, addBusinessDaysToDateRequest.startDate) &&
        Objects.equals(this.asAt, addBusinessDaysToDateRequest.asAt);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(businessDayOffset, holidayCodes, startDate, asAt);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AddBusinessDaysToDateRequest {\n");
    sb.append("    businessDayOffset: ").append(toIndentedString(businessDayOffset)).append("\n");
    sb.append("    holidayCodes: ").append(toIndentedString(holidayCodes)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    asAt: ").append(toIndentedString(asAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("businessDayOffset");
    openapiFields.add("holidayCodes");
    openapiFields.add("startDate");
    openapiFields.add("asAt");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("businessDayOffset");
    openapiRequiredFields.add("holidayCodes");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to AddBusinessDaysToDateRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!AddBusinessDaysToDateRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AddBusinessDaysToDateRequest is not found in the empty JSON string", AddBusinessDaysToDateRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!AddBusinessDaysToDateRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AddBusinessDaysToDateRequest` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AddBusinessDaysToDateRequest.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // ensure the required json array is present
      if (jsonObj.get("holidayCodes") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("holidayCodes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `holidayCodes` to be an array in the JSON string but got `%s`", jsonObj.get("holidayCodes").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AddBusinessDaysToDateRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AddBusinessDaysToDateRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AddBusinessDaysToDateRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AddBusinessDaysToDateRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<AddBusinessDaysToDateRequest>() {
           @Override
           public void write(JsonWriter out, AddBusinessDaysToDateRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AddBusinessDaysToDateRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AddBusinessDaysToDateRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AddBusinessDaysToDateRequest
  * @throws IOException if the JSON string is invalid with respect to AddBusinessDaysToDateRequest
  */
  public static AddBusinessDaysToDateRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AddBusinessDaysToDateRequest.class);
  }

 /**
  * Convert an instance of AddBusinessDaysToDateRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
