/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import com.finbourne.lusid.model.ModelOptions;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * FxForwardModelOptions
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class FxForwardModelOptions extends ModelOptions {
  /**
   * The available values are: ForwardPoints, ForwardRate, RatesCurve, FxForwardCurve, Invalid
   */
  @JsonAdapter(ForwardRateObservableTypeEnum.Adapter.class)
  public enum ForwardRateObservableTypeEnum {
    FORWARDPOINTS("ForwardPoints"),
    
    FORWARDRATE("ForwardRate"),
    
    RATESCURVE("RatesCurve"),
    
    FXFORWARDCURVE("FxForwardCurve"),
    
    INVALID("Invalid");

    private String value;

    ForwardRateObservableTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ForwardRateObservableTypeEnum fromValue(String value) {
      for (ForwardRateObservableTypeEnum b : ForwardRateObservableTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ForwardRateObservableTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ForwardRateObservableTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ForwardRateObservableTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ForwardRateObservableTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_FORWARD_RATE_OBSERVABLE_TYPE = "forwardRateObservableType";
  @SerializedName(SERIALIZED_NAME_FORWARD_RATE_OBSERVABLE_TYPE)
  private ForwardRateObservableTypeEnum forwardRateObservableType;

  /**
   * The available values are: Standard, ConstantTimeValueOfMoney, Invalid
   */
  @JsonAdapter(DiscountingMethodEnum.Adapter.class)
  public enum DiscountingMethodEnum {
    STANDARD("Standard"),
    
    CONSTANTTIMEVALUEOFMONEY("ConstantTimeValueOfMoney"),
    
    INVALID("Invalid");

    private String value;

    DiscountingMethodEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DiscountingMethodEnum fromValue(String value) {
      for (DiscountingMethodEnum b : DiscountingMethodEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DiscountingMethodEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DiscountingMethodEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DiscountingMethodEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DiscountingMethodEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_DISCOUNTING_METHOD = "discountingMethod";
  @SerializedName(SERIALIZED_NAME_DISCOUNTING_METHOD)
  private DiscountingMethodEnum discountingMethod;

  public static final String SERIALIZED_NAME_CONVERT_TO_REPORT_CCY = "convertToReportCcy";
  @SerializedName(SERIALIZED_NAME_CONVERT_TO_REPORT_CCY)
  private Boolean convertToReportCcy;

  public FxForwardModelOptions() {
    // this.modelOptionsType = this.getClass().getSimpleName();
  }

  public FxForwardModelOptions forwardRateObservableType(ForwardRateObservableTypeEnum forwardRateObservableType) {
    
    this.forwardRateObservableType = forwardRateObservableType;
    return this;
  }

   /**
   * The available values are: ForwardPoints, ForwardRate, RatesCurve, FxForwardCurve, Invalid
   * @return forwardRateObservableType
  **/
  @jakarta.annotation.Nonnull
  public ForwardRateObservableTypeEnum getForwardRateObservableType() {
    return forwardRateObservableType;
  }


  public void setForwardRateObservableType(ForwardRateObservableTypeEnum forwardRateObservableType) {
    this.forwardRateObservableType = forwardRateObservableType;
  }


  public FxForwardModelOptions discountingMethod(DiscountingMethodEnum discountingMethod) {
    
    this.discountingMethod = discountingMethod;
    return this;
  }

   /**
   * The available values are: Standard, ConstantTimeValueOfMoney, Invalid
   * @return discountingMethod
  **/
  @jakarta.annotation.Nonnull
  public DiscountingMethodEnum getDiscountingMethod() {
    return discountingMethod;
  }


  public void setDiscountingMethod(DiscountingMethodEnum discountingMethod) {
    this.discountingMethod = discountingMethod;
  }


  public FxForwardModelOptions convertToReportCcy(Boolean convertToReportCcy) {
    
    this.convertToReportCcy = convertToReportCcy;
    return this;
  }

   /**
   * Convert all FX flows to the report currency  By setting this all FX forwards will be priced using Forward Curves that have Report Currency as the base.
   * @return convertToReportCcy
  **/
  @jakarta.annotation.Nonnull
  public Boolean getConvertToReportCcy() {
    return convertToReportCcy;
  }


  public void setConvertToReportCcy(Boolean convertToReportCcy) {
    this.convertToReportCcy = convertToReportCcy;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FxForwardModelOptions fxForwardModelOptions = (FxForwardModelOptions) o;
    return Objects.equals(this.forwardRateObservableType, fxForwardModelOptions.forwardRateObservableType) &&
        Objects.equals(this.discountingMethod, fxForwardModelOptions.discountingMethod) &&
        Objects.equals(this.convertToReportCcy, fxForwardModelOptions.convertToReportCcy) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(forwardRateObservableType, discountingMethod, convertToReportCcy, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FxForwardModelOptions {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    forwardRateObservableType: ").append(toIndentedString(forwardRateObservableType)).append("\n");
    sb.append("    discountingMethod: ").append(toIndentedString(discountingMethod)).append("\n");
    sb.append("    convertToReportCcy: ").append(toIndentedString(convertToReportCcy)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("modelOptionsType");
    openapiFields.add("forwardRateObservableType");
    openapiFields.add("discountingMethod");
    openapiFields.add("convertToReportCcy");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("forwardRateObservableType");
    openapiRequiredFields.add("discountingMethod");
    openapiRequiredFields.add("convertToReportCcy");
    openapiRequiredFields.add("modelOptionsType");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to FxForwardModelOptions
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FxForwardModelOptions.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FxForwardModelOptions is not found in the empty JSON string", FxForwardModelOptions.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : FxForwardModelOptions.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FxForwardModelOptions.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FxForwardModelOptions' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FxForwardModelOptions> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FxForwardModelOptions.class));

       return (TypeAdapter<T>) new TypeAdapter<FxForwardModelOptions>() {
           @Override
           public void write(JsonWriter out, FxForwardModelOptions value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FxForwardModelOptions read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of FxForwardModelOptions given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of FxForwardModelOptions
  * @throws IOException if the JSON string is invalid with respect to FxForwardModelOptions
  */
  public static FxForwardModelOptions fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FxForwardModelOptions.class);
  }

 /**
  * Convert an instance of FxForwardModelOptions to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
