/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * SettlementInstructionQuery
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class SettlementInstructionQuery {
  public static final String SERIALIZED_NAME_AS_AT = "asAt";
  @SerializedName(SERIALIZED_NAME_AS_AT)
  private OffsetDateTime asAt;

  public static final String SERIALIZED_NAME_START_DATE = "startDate";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  private String startDate;

  public static final String SERIALIZED_NAME_END_DATE = "endDate";
  @SerializedName(SERIALIZED_NAME_END_DATE)
  private String endDate;

  public static final String SERIALIZED_NAME_LIMIT = "limit";
  @SerializedName(SERIALIZED_NAME_LIMIT)
  private Integer limit;

  public static final String SERIALIZED_NAME_PAGE = "page";
  @SerializedName(SERIALIZED_NAME_PAGE)
  private String page;

  public static final String SERIALIZED_NAME_FILTER = "filter";
  @SerializedName(SERIALIZED_NAME_FILTER)
  private String filter;

  public static final String SERIALIZED_NAME_SETTLEMENT_INSTRUCTION_PROPERTY_KEYS = "settlementInstructionPropertyKeys";
  @SerializedName(SERIALIZED_NAME_SETTLEMENT_INSTRUCTION_PROPERTY_KEYS)
  private List<String> settlementInstructionPropertyKeys;

  public static final String SERIALIZED_NAME_TRANSACTION_PROPERTY_KEYS = "transactionPropertyKeys";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_PROPERTY_KEYS)
  private List<String> transactionPropertyKeys;

  public SettlementInstructionQuery() {
  }

  public SettlementInstructionQuery asAt(OffsetDateTime asAt) {
    
    this.asAt = asAt;
    return this;
  }

   /**
   * Get asAt
   * @return asAt
  **/
  @jakarta.annotation.Nullable
  public OffsetDateTime getAsAt() {
    return asAt;
  }


  public void setAsAt(OffsetDateTime asAt) {
    this.asAt = asAt;
  }


  public SettlementInstructionQuery startDate(String startDate) {
    
    this.startDate = startDate;
    return this;
  }

   /**
   * Get startDate
   * @return startDate
  **/
  @jakarta.annotation.Nullable
  public String getStartDate() {
    return startDate;
  }


  public void setStartDate(String startDate) {
    this.startDate = startDate;
  }


  public SettlementInstructionQuery endDate(String endDate) {
    
    this.endDate = endDate;
    return this;
  }

   /**
   * Get endDate
   * @return endDate
  **/
  @jakarta.annotation.Nullable
  public String getEndDate() {
    return endDate;
  }


  public void setEndDate(String endDate) {
    this.endDate = endDate;
  }


  public SettlementInstructionQuery limit(Integer limit) {
    
    this.limit = limit;
    return this;
  }

   /**
   * Get limit
   * @return limit
  **/
  @jakarta.annotation.Nullable
  public Integer getLimit() {
    return limit;
  }


  public void setLimit(Integer limit) {
    this.limit = limit;
  }


  public SettlementInstructionQuery page(String page) {
    
    this.page = page;
    return this;
  }

   /**
   * Get page
   * @return page
  **/
  @jakarta.annotation.Nullable
  public String getPage() {
    return page;
  }


  public void setPage(String page) {
    this.page = page;
  }


  public SettlementInstructionQuery filter(String filter) {
    
    this.filter = filter;
    return this;
  }

   /**
   * Get filter
   * @return filter
  **/
  @jakarta.annotation.Nullable
  public String getFilter() {
    return filter;
  }


  public void setFilter(String filter) {
    this.filter = filter;
  }


  public SettlementInstructionQuery settlementInstructionPropertyKeys(List<String> settlementInstructionPropertyKeys) {
    
    this.settlementInstructionPropertyKeys = settlementInstructionPropertyKeys;
    return this;
  }

  public SettlementInstructionQuery addSettlementInstructionPropertyKeysItem(String settlementInstructionPropertyKeysItem) {
    if (this.settlementInstructionPropertyKeys == null) {
      this.settlementInstructionPropertyKeys = new ArrayList<>();
    }
    this.settlementInstructionPropertyKeys.add(settlementInstructionPropertyKeysItem);
    return this;
  }

   /**
   * Get settlementInstructionPropertyKeys
   * @return settlementInstructionPropertyKeys
  **/
  @jakarta.annotation.Nullable
  public List<String> getSettlementInstructionPropertyKeys() {
    return settlementInstructionPropertyKeys;
  }


  public void setSettlementInstructionPropertyKeys(List<String> settlementInstructionPropertyKeys) {
    this.settlementInstructionPropertyKeys = settlementInstructionPropertyKeys;
  }


  public SettlementInstructionQuery transactionPropertyKeys(List<String> transactionPropertyKeys) {
    
    this.transactionPropertyKeys = transactionPropertyKeys;
    return this;
  }

  public SettlementInstructionQuery addTransactionPropertyKeysItem(String transactionPropertyKeysItem) {
    if (this.transactionPropertyKeys == null) {
      this.transactionPropertyKeys = new ArrayList<>();
    }
    this.transactionPropertyKeys.add(transactionPropertyKeysItem);
    return this;
  }

   /**
   * Get transactionPropertyKeys
   * @return transactionPropertyKeys
  **/
  @jakarta.annotation.Nullable
  public List<String> getTransactionPropertyKeys() {
    return transactionPropertyKeys;
  }


  public void setTransactionPropertyKeys(List<String> transactionPropertyKeys) {
    this.transactionPropertyKeys = transactionPropertyKeys;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SettlementInstructionQuery settlementInstructionQuery = (SettlementInstructionQuery) o;
    return Objects.equals(this.asAt, settlementInstructionQuery.asAt) &&
        Objects.equals(this.startDate, settlementInstructionQuery.startDate) &&
        Objects.equals(this.endDate, settlementInstructionQuery.endDate) &&
        Objects.equals(this.limit, settlementInstructionQuery.limit) &&
        Objects.equals(this.page, settlementInstructionQuery.page) &&
        Objects.equals(this.filter, settlementInstructionQuery.filter) &&
        Objects.equals(this.settlementInstructionPropertyKeys, settlementInstructionQuery.settlementInstructionPropertyKeys) &&
        Objects.equals(this.transactionPropertyKeys, settlementInstructionQuery.transactionPropertyKeys);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(asAt, startDate, endDate, limit, page, filter, settlementInstructionPropertyKeys, transactionPropertyKeys);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SettlementInstructionQuery {\n");
    sb.append("    asAt: ").append(toIndentedString(asAt)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    endDate: ").append(toIndentedString(endDate)).append("\n");
    sb.append("    limit: ").append(toIndentedString(limit)).append("\n");
    sb.append("    page: ").append(toIndentedString(page)).append("\n");
    sb.append("    filter: ").append(toIndentedString(filter)).append("\n");
    sb.append("    settlementInstructionPropertyKeys: ").append(toIndentedString(settlementInstructionPropertyKeys)).append("\n");
    sb.append("    transactionPropertyKeys: ").append(toIndentedString(transactionPropertyKeys)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("asAt");
    openapiFields.add("startDate");
    openapiFields.add("endDate");
    openapiFields.add("limit");
    openapiFields.add("page");
    openapiFields.add("filter");
    openapiFields.add("settlementInstructionPropertyKeys");
    openapiFields.add("transactionPropertyKeys");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to SettlementInstructionQuery
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SettlementInstructionQuery.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SettlementInstructionQuery is not found in the empty JSON string", SettlementInstructionQuery.openapiRequiredFields.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("startDate") != null && !jsonObj.get("startDate").isJsonNull()) && !jsonObj.get("startDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `startDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("startDate").toString()));
      }
      if ((jsonObj.get("endDate") != null && !jsonObj.get("endDate").isJsonNull()) && !jsonObj.get("endDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `endDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("endDate").toString()));
      }
      if ((jsonObj.get("page") != null && !jsonObj.get("page").isJsonNull()) && !jsonObj.get("page").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `page` to be a primitive type in the JSON string but got `%s`", jsonObj.get("page").toString()));
      }
      if ((jsonObj.get("filter") != null && !jsonObj.get("filter").isJsonNull()) && !jsonObj.get("filter").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `filter` to be a primitive type in the JSON string but got `%s`", jsonObj.get("filter").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("settlementInstructionPropertyKeys") != null && !jsonObj.get("settlementInstructionPropertyKeys").isJsonNull() && !jsonObj.get("settlementInstructionPropertyKeys").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `settlementInstructionPropertyKeys` to be an array in the JSON string but got `%s`", jsonObj.get("settlementInstructionPropertyKeys").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("transactionPropertyKeys") != null && !jsonObj.get("transactionPropertyKeys").isJsonNull() && !jsonObj.get("transactionPropertyKeys").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `transactionPropertyKeys` to be an array in the JSON string but got `%s`", jsonObj.get("transactionPropertyKeys").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SettlementInstructionQuery.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SettlementInstructionQuery' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SettlementInstructionQuery> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SettlementInstructionQuery.class));

       return (TypeAdapter<T>) new TypeAdapter<SettlementInstructionQuery>() {
           @Override
           public void write(JsonWriter out, SettlementInstructionQuery value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SettlementInstructionQuery read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of SettlementInstructionQuery given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of SettlementInstructionQuery
  * @throws IOException if the JSON string is invalid with respect to SettlementInstructionQuery
  */
  public static SettlementInstructionQuery fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SettlementInstructionQuery.class);
  }

 /**
  * Convert an instance of SettlementInstructionQuery to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
