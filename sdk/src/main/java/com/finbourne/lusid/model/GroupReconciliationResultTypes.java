/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import com.finbourne.lusid.model.Link;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * GroupReconciliationResultTypes
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class GroupReconciliationResultTypes {
  public static final String SERIALIZED_NAME_COUNT_MATCH = "countMatch";
  @SerializedName(SERIALIZED_NAME_COUNT_MATCH)
  private Integer countMatch;

  public static final String SERIALIZED_NAME_LINK_MATCHES = "linkMatches";
  @SerializedName(SERIALIZED_NAME_LINK_MATCHES)
  private Link linkMatches;

  public static final String SERIALIZED_NAME_COUNT_PARTIAL_MATCH = "countPartialMatch";
  @SerializedName(SERIALIZED_NAME_COUNT_PARTIAL_MATCH)
  private Integer countPartialMatch;

  public static final String SERIALIZED_NAME_LINK_PARTIAL_MATCHES = "linkPartialMatches";
  @SerializedName(SERIALIZED_NAME_LINK_PARTIAL_MATCHES)
  private Link linkPartialMatches;

  public static final String SERIALIZED_NAME_COUNT_BREAK = "countBreak";
  @SerializedName(SERIALIZED_NAME_COUNT_BREAK)
  private Integer countBreak;

  public static final String SERIALIZED_NAME_LINK_BREAKS = "linkBreaks";
  @SerializedName(SERIALIZED_NAME_LINK_BREAKS)
  private Link linkBreaks;

  public static final String SERIALIZED_NAME_COUNT_RESOLVED = "countResolved";
  @SerializedName(SERIALIZED_NAME_COUNT_RESOLVED)
  private Integer countResolved;

  public static final String SERIALIZED_NAME_LINK_RESOLVED = "linkResolved";
  @SerializedName(SERIALIZED_NAME_LINK_RESOLVED)
  private Link linkResolved;

  public GroupReconciliationResultTypes() {
  }

  public GroupReconciliationResultTypes countMatch(Integer countMatch) {
    
    this.countMatch = countMatch;
    return this;
  }

   /**
   * The number of comparison results of resultType \&quot;Match\&quot; with this instanceId and reconciliationType
   * @return countMatch
  **/
  @jakarta.annotation.Nonnull
  public Integer getCountMatch() {
    return countMatch;
  }


  public void setCountMatch(Integer countMatch) {
    this.countMatch = countMatch;
  }


  public GroupReconciliationResultTypes linkMatches(Link linkMatches) {
    
    this.linkMatches = linkMatches;
    return this;
  }

   /**
   * Get linkMatches
   * @return linkMatches
  **/
  @jakarta.annotation.Nonnull
  public Link getLinkMatches() {
    return linkMatches;
  }


  public void setLinkMatches(Link linkMatches) {
    this.linkMatches = linkMatches;
  }


  public GroupReconciliationResultTypes countPartialMatch(Integer countPartialMatch) {
    
    this.countPartialMatch = countPartialMatch;
    return this;
  }

   /**
   * The number of comparison results of resultType \&quot;PartialMatch\&quot; with this instanceId and reconciliationType
   * @return countPartialMatch
  **/
  @jakarta.annotation.Nonnull
  public Integer getCountPartialMatch() {
    return countPartialMatch;
  }


  public void setCountPartialMatch(Integer countPartialMatch) {
    this.countPartialMatch = countPartialMatch;
  }


  public GroupReconciliationResultTypes linkPartialMatches(Link linkPartialMatches) {
    
    this.linkPartialMatches = linkPartialMatches;
    return this;
  }

   /**
   * Get linkPartialMatches
   * @return linkPartialMatches
  **/
  @jakarta.annotation.Nonnull
  public Link getLinkPartialMatches() {
    return linkPartialMatches;
  }


  public void setLinkPartialMatches(Link linkPartialMatches) {
    this.linkPartialMatches = linkPartialMatches;
  }


  public GroupReconciliationResultTypes countBreak(Integer countBreak) {
    
    this.countBreak = countBreak;
    return this;
  }

   /**
   * The number of comparison results of resultType \&quot;Break\&quot; with this instanceId and reconciliationType
   * @return countBreak
  **/
  @jakarta.annotation.Nonnull
  public Integer getCountBreak() {
    return countBreak;
  }


  public void setCountBreak(Integer countBreak) {
    this.countBreak = countBreak;
  }


  public GroupReconciliationResultTypes linkBreaks(Link linkBreaks) {
    
    this.linkBreaks = linkBreaks;
    return this;
  }

   /**
   * Get linkBreaks
   * @return linkBreaks
  **/
  @jakarta.annotation.Nonnull
  public Link getLinkBreaks() {
    return linkBreaks;
  }


  public void setLinkBreaks(Link linkBreaks) {
    this.linkBreaks = linkBreaks;
  }


  public GroupReconciliationResultTypes countResolved(Integer countResolved) {
    
    this.countResolved = countResolved;
    return this;
  }

   /**
   * The number of comparison results of resultType \&quot;Resolved\&quot; with this instanceId and reconciliationType
   * @return countResolved
  **/
  @jakarta.annotation.Nonnull
  public Integer getCountResolved() {
    return countResolved;
  }


  public void setCountResolved(Integer countResolved) {
    this.countResolved = countResolved;
  }


  public GroupReconciliationResultTypes linkResolved(Link linkResolved) {
    
    this.linkResolved = linkResolved;
    return this;
  }

   /**
   * Get linkResolved
   * @return linkResolved
  **/
  @jakarta.annotation.Nonnull
  public Link getLinkResolved() {
    return linkResolved;
  }


  public void setLinkResolved(Link linkResolved) {
    this.linkResolved = linkResolved;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GroupReconciliationResultTypes groupReconciliationResultTypes = (GroupReconciliationResultTypes) o;
    return Objects.equals(this.countMatch, groupReconciliationResultTypes.countMatch) &&
        Objects.equals(this.linkMatches, groupReconciliationResultTypes.linkMatches) &&
        Objects.equals(this.countPartialMatch, groupReconciliationResultTypes.countPartialMatch) &&
        Objects.equals(this.linkPartialMatches, groupReconciliationResultTypes.linkPartialMatches) &&
        Objects.equals(this.countBreak, groupReconciliationResultTypes.countBreak) &&
        Objects.equals(this.linkBreaks, groupReconciliationResultTypes.linkBreaks) &&
        Objects.equals(this.countResolved, groupReconciliationResultTypes.countResolved) &&
        Objects.equals(this.linkResolved, groupReconciliationResultTypes.linkResolved);
  }

  @Override
  public int hashCode() {
    return Objects.hash(countMatch, linkMatches, countPartialMatch, linkPartialMatches, countBreak, linkBreaks, countResolved, linkResolved);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GroupReconciliationResultTypes {\n");
    sb.append("    countMatch: ").append(toIndentedString(countMatch)).append("\n");
    sb.append("    linkMatches: ").append(toIndentedString(linkMatches)).append("\n");
    sb.append("    countPartialMatch: ").append(toIndentedString(countPartialMatch)).append("\n");
    sb.append("    linkPartialMatches: ").append(toIndentedString(linkPartialMatches)).append("\n");
    sb.append("    countBreak: ").append(toIndentedString(countBreak)).append("\n");
    sb.append("    linkBreaks: ").append(toIndentedString(linkBreaks)).append("\n");
    sb.append("    countResolved: ").append(toIndentedString(countResolved)).append("\n");
    sb.append("    linkResolved: ").append(toIndentedString(linkResolved)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("countMatch");
    openapiFields.add("linkMatches");
    openapiFields.add("countPartialMatch");
    openapiFields.add("linkPartialMatches");
    openapiFields.add("countBreak");
    openapiFields.add("linkBreaks");
    openapiFields.add("countResolved");
    openapiFields.add("linkResolved");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("countMatch");
    openapiRequiredFields.add("linkMatches");
    openapiRequiredFields.add("countPartialMatch");
    openapiRequiredFields.add("linkPartialMatches");
    openapiRequiredFields.add("countBreak");
    openapiRequiredFields.add("linkBreaks");
    openapiRequiredFields.add("countResolved");
    openapiRequiredFields.add("linkResolved");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to GroupReconciliationResultTypes
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GroupReconciliationResultTypes.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GroupReconciliationResultTypes is not found in the empty JSON string", GroupReconciliationResultTypes.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GroupReconciliationResultTypes.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `linkMatches`
      Link.validateJsonElement(jsonObj.get("linkMatches"));
      // validate the required field `linkPartialMatches`
      Link.validateJsonElement(jsonObj.get("linkPartialMatches"));
      // validate the required field `linkBreaks`
      Link.validateJsonElement(jsonObj.get("linkBreaks"));
      // validate the required field `linkResolved`
      Link.validateJsonElement(jsonObj.get("linkResolved"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GroupReconciliationResultTypes.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GroupReconciliationResultTypes' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GroupReconciliationResultTypes> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GroupReconciliationResultTypes.class));

       return (TypeAdapter<T>) new TypeAdapter<GroupReconciliationResultTypes>() {
           @Override
           public void write(JsonWriter out, GroupReconciliationResultTypes value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GroupReconciliationResultTypes read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of GroupReconciliationResultTypes given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of GroupReconciliationResultTypes
  * @throws IOException if the JSON string is invalid with respect to GroupReconciliationResultTypes
  */
  public static GroupReconciliationResultTypes fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GroupReconciliationResultTypes.class);
  }

 /**
  * Convert an instance of GroupReconciliationResultTypes to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
