/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import com.finbourne.lusid.model.CurrencyAndAmount;
import com.finbourne.lusid.model.OtcConfirmation;
import com.finbourne.lusid.model.PerpetualProperty;
import com.finbourne.lusid.model.ResourceId;
import com.finbourne.lusid.model.Strategy;
import com.finbourne.lusid.model.TransactionPrice;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * TransactionRequest
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class TransactionRequest {
  public static final String SERIALIZED_NAME_TRANSACTION_ID = "transactionId";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_ID)
  private String transactionId;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_INSTRUMENT_IDENTIFIERS = "instrumentIdentifiers";
  @SerializedName(SERIALIZED_NAME_INSTRUMENT_IDENTIFIERS)
  private Map<String, String> instrumentIdentifiers = new HashMap<>();

  public static final String SERIALIZED_NAME_TRANSACTION_DATE = "transactionDate";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_DATE)
  private String transactionDate;

  public static final String SERIALIZED_NAME_SETTLEMENT_DATE = "settlementDate";
  @SerializedName(SERIALIZED_NAME_SETTLEMENT_DATE)
  private String settlementDate;

  public static final String SERIALIZED_NAME_UNITS = "units";
  @SerializedName(SERIALIZED_NAME_UNITS)
  private java.math.BigDecimal units;

  public static final String SERIALIZED_NAME_TRANSACTION_PRICE = "transactionPrice";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_PRICE)
  private TransactionPrice transactionPrice;

  public static final String SERIALIZED_NAME_TOTAL_CONSIDERATION = "totalConsideration";
  @SerializedName(SERIALIZED_NAME_TOTAL_CONSIDERATION)
  private CurrencyAndAmount totalConsideration;

  public static final String SERIALIZED_NAME_EXCHANGE_RATE = "exchangeRate";
  @SerializedName(SERIALIZED_NAME_EXCHANGE_RATE)
  private java.math.BigDecimal exchangeRate;

  public static final String SERIALIZED_NAME_TRANSACTION_CURRENCY = "transactionCurrency";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_CURRENCY)
  private String transactionCurrency;

  public static final String SERIALIZED_NAME_PROPERTIES = "properties";
  @SerializedName(SERIALIZED_NAME_PROPERTIES)
  private Map<String, PerpetualProperty> properties;

  public static final String SERIALIZED_NAME_COUNTERPARTY_ID = "counterpartyId";
  @SerializedName(SERIALIZED_NAME_COUNTERPARTY_ID)
  private String counterpartyId;

  public static final String SERIALIZED_NAME_SOURCE = "source";
  @SerializedName(SERIALIZED_NAME_SOURCE)
  private String source;

  public static final String SERIALIZED_NAME_OTC_CONFIRMATION = "otcConfirmation";
  @SerializedName(SERIALIZED_NAME_OTC_CONFIRMATION)
  private OtcConfirmation otcConfirmation;

  public static final String SERIALIZED_NAME_ORDER_ID = "orderId";
  @SerializedName(SERIALIZED_NAME_ORDER_ID)
  private ResourceId orderId;

  public static final String SERIALIZED_NAME_ALLOCATION_ID = "allocationId";
  @SerializedName(SERIALIZED_NAME_ALLOCATION_ID)
  private ResourceId allocationId;

  public static final String SERIALIZED_NAME_CUSTODIAN_ACCOUNT_ID = "custodianAccountId";
  @SerializedName(SERIALIZED_NAME_CUSTODIAN_ACCOUNT_ID)
  private ResourceId custodianAccountId;

  public static final String SERIALIZED_NAME_TRANSACTION_GROUP_ID = "transactionGroupId";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_GROUP_ID)
  private String transactionGroupId;

  public static final String SERIALIZED_NAME_STRATEGY_TAG = "strategyTag";
  @SerializedName(SERIALIZED_NAME_STRATEGY_TAG)
  private List<Strategy> strategyTag;

  public TransactionRequest() {
  }

  public TransactionRequest transactionId(String transactionId) {
    
    this.transactionId = transactionId;
    return this;
  }

   /**
   * The unique identifier of the transaction.
   * @return transactionId
  **/
  @jakarta.annotation.Nonnull
  public String getTransactionId() {
    return transactionId;
  }


  public void setTransactionId(String transactionId) {
    this.transactionId = transactionId;
  }


  public TransactionRequest type(String type) {
    
    this.type = type;
    return this;
  }

   /**
   * The type of the transaction, for example &#39;Buy&#39; or &#39;Sell&#39;. The transaction type must have been pre-configured using the System Configuration API. If not, this operation will succeed but you are not able to calculate holdings for the portfolio that include this transaction.
   * @return type
  **/
  @jakarta.annotation.Nonnull
  public String getType() {
    return type;
  }


  public void setType(String type) {
    this.type = type;
  }


  public TransactionRequest instrumentIdentifiers(Map<String, String> instrumentIdentifiers) {
    
    this.instrumentIdentifiers = instrumentIdentifiers;
    return this;
  }

  public TransactionRequest putInstrumentIdentifiersItem(String key, String instrumentIdentifiersItem) {
    if (this.instrumentIdentifiers == null) {
      this.instrumentIdentifiers = new HashMap<>();
    }
    this.instrumentIdentifiers.put(key, instrumentIdentifiersItem);
    return this;
  }

   /**
   * A set of instrument identifiers that can resolve the transaction to a unique instrument.
   * @return instrumentIdentifiers
  **/
  @jakarta.annotation.Nonnull
  public Map<String, String> getInstrumentIdentifiers() {
    return instrumentIdentifiers;
  }


  public void setInstrumentIdentifiers(Map<String, String> instrumentIdentifiers) {
    this.instrumentIdentifiers = instrumentIdentifiers;
  }


  public TransactionRequest transactionDate(String transactionDate) {
    
    this.transactionDate = transactionDate;
    return this;
  }

   /**
   * The date of the transaction.
   * @return transactionDate
  **/
  @jakarta.annotation.Nonnull
  public String getTransactionDate() {
    return transactionDate;
  }


  public void setTransactionDate(String transactionDate) {
    this.transactionDate = transactionDate;
  }


  public TransactionRequest settlementDate(String settlementDate) {
    
    this.settlementDate = settlementDate;
    return this;
  }

   /**
   * The settlement date of the transaction.
   * @return settlementDate
  **/
  @jakarta.annotation.Nonnull
  public String getSettlementDate() {
    return settlementDate;
  }


  public void setSettlementDate(String settlementDate) {
    this.settlementDate = settlementDate;
  }


  public TransactionRequest units(java.math.BigDecimal units) {
    
    this.units = units;
    return this;
  }

   /**
   * The number of units of the transacted instrument.
   * @return units
  **/
  @jakarta.annotation.Nonnull
  public java.math.BigDecimal getUnits() {
    return units;
  }


  public void setUnits(java.math.BigDecimal units) {
    this.units = units;
  }


  public TransactionRequest transactionPrice(TransactionPrice transactionPrice) {
    
    this.transactionPrice = transactionPrice;
    return this;
  }

   /**
   * Get transactionPrice
   * @return transactionPrice
  **/
  @jakarta.annotation.Nullable
  public TransactionPrice getTransactionPrice() {
    return transactionPrice;
  }


  public void setTransactionPrice(TransactionPrice transactionPrice) {
    this.transactionPrice = transactionPrice;
  }


  public TransactionRequest totalConsideration(CurrencyAndAmount totalConsideration) {
    
    this.totalConsideration = totalConsideration;
    return this;
  }

   /**
   * Get totalConsideration
   * @return totalConsideration
  **/
  @jakarta.annotation.Nonnull
  public CurrencyAndAmount getTotalConsideration() {
    return totalConsideration;
  }


  public void setTotalConsideration(CurrencyAndAmount totalConsideration) {
    this.totalConsideration = totalConsideration;
  }


  public TransactionRequest exchangeRate(java.math.BigDecimal exchangeRate) {
    
    this.exchangeRate = exchangeRate;
    return this;
  }

   /**
   * The exchange rate between the transaction and settlement currency (settlement currency being represented by TotalConsideration.Currency). For example, if the transaction currency is USD and the settlement currency is GBP, this would be the appropriate USD/GBP rate.
   * @return exchangeRate
  **/
  @jakarta.annotation.Nullable
  public java.math.BigDecimal getExchangeRate() {
    return exchangeRate;
  }


  public void setExchangeRate(java.math.BigDecimal exchangeRate) {
    this.exchangeRate = exchangeRate;
  }


  public TransactionRequest transactionCurrency(String transactionCurrency) {
    
    this.transactionCurrency = transactionCurrency;
    return this;
  }

   /**
   * The transaction currency.
   * @return transactionCurrency
  **/
  @jakarta.annotation.Nullable
  public String getTransactionCurrency() {
    return transactionCurrency;
  }


  public void setTransactionCurrency(String transactionCurrency) {
    this.transactionCurrency = transactionCurrency;
  }


  public TransactionRequest properties(Map<String, PerpetualProperty> properties) {
    
    this.properties = properties;
    return this;
  }

  public TransactionRequest putPropertiesItem(String key, PerpetualProperty propertiesItem) {
    if (this.properties == null) {
      this.properties = new HashMap<>();
    }
    this.properties.put(key, propertiesItem);
    return this;
  }

   /**
   * A list of unique transaction properties and associated values to store for the transaction. Each property must be from the &#39;Transaction&#39; domain.
   * @return properties
  **/
  @jakarta.annotation.Nullable
  public Map<String, PerpetualProperty> getProperties() {
    return properties;
  }


  public void setProperties(Map<String, PerpetualProperty> properties) {
    this.properties = properties;
  }


  public TransactionRequest counterpartyId(String counterpartyId) {
    
    this.counterpartyId = counterpartyId;
    return this;
  }

   /**
   * The identifier for the counterparty of the transaction.
   * @return counterpartyId
  **/
  @jakarta.annotation.Nullable
  public String getCounterpartyId() {
    return counterpartyId;
  }


  public void setCounterpartyId(String counterpartyId) {
    this.counterpartyId = counterpartyId;
  }


  public TransactionRequest source(String source) {
    
    this.source = source;
    return this;
  }

   /**
   * The source of the transaction. This is used to look up the appropriate transaction group set in the transaction type configuration.
   * @return source
  **/
  @jakarta.annotation.Nullable
  public String getSource() {
    return source;
  }


  public void setSource(String source) {
    this.source = source;
  }


  public TransactionRequest otcConfirmation(OtcConfirmation otcConfirmation) {
    
    this.otcConfirmation = otcConfirmation;
    return this;
  }

   /**
   * Get otcConfirmation
   * @return otcConfirmation
  **/
  @jakarta.annotation.Nullable
  public OtcConfirmation getOtcConfirmation() {
    return otcConfirmation;
  }


  public void setOtcConfirmation(OtcConfirmation otcConfirmation) {
    this.otcConfirmation = otcConfirmation;
  }


  public TransactionRequest orderId(ResourceId orderId) {
    
    this.orderId = orderId;
    return this;
  }

   /**
   * Get orderId
   * @return orderId
  **/
  @jakarta.annotation.Nullable
  public ResourceId getOrderId() {
    return orderId;
  }


  public void setOrderId(ResourceId orderId) {
    this.orderId = orderId;
  }


  public TransactionRequest allocationId(ResourceId allocationId) {
    
    this.allocationId = allocationId;
    return this;
  }

   /**
   * Get allocationId
   * @return allocationId
  **/
  @jakarta.annotation.Nullable
  public ResourceId getAllocationId() {
    return allocationId;
  }


  public void setAllocationId(ResourceId allocationId) {
    this.allocationId = allocationId;
  }


  public TransactionRequest custodianAccountId(ResourceId custodianAccountId) {
    
    this.custodianAccountId = custodianAccountId;
    return this;
  }

   /**
   * Get custodianAccountId
   * @return custodianAccountId
  **/
  @jakarta.annotation.Nullable
  public ResourceId getCustodianAccountId() {
    return custodianAccountId;
  }


  public void setCustodianAccountId(ResourceId custodianAccountId) {
    this.custodianAccountId = custodianAccountId;
  }


  public TransactionRequest transactionGroupId(String transactionGroupId) {
    
    this.transactionGroupId = transactionGroupId;
    return this;
  }

   /**
   * The identifier for grouping economic events across multiple transactions
   * @return transactionGroupId
  **/
  @jakarta.annotation.Nullable
  public String getTransactionGroupId() {
    return transactionGroupId;
  }


  public void setTransactionGroupId(String transactionGroupId) {
    this.transactionGroupId = transactionGroupId;
  }


  public TransactionRequest strategyTag(List<Strategy> strategyTag) {
    
    this.strategyTag = strategyTag;
    return this;
  }

  public TransactionRequest addStrategyTagItem(Strategy strategyTagItem) {
    if (this.strategyTag == null) {
      this.strategyTag = new ArrayList<>();
    }
    this.strategyTag.add(strategyTagItem);
    return this;
  }

   /**
   * A Json representing the allocation of units accross multiple sub-holding keys
   * @return strategyTag
  **/
  @jakarta.annotation.Nullable
  public List<Strategy> getStrategyTag() {
    return strategyTag;
  }


  public void setStrategyTag(List<Strategy> strategyTag) {
    this.strategyTag = strategyTag;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TransactionRequest transactionRequest = (TransactionRequest) o;
    return Objects.equals(this.transactionId, transactionRequest.transactionId) &&
        Objects.equals(this.type, transactionRequest.type) &&
        Objects.equals(this.instrumentIdentifiers, transactionRequest.instrumentIdentifiers) &&
        Objects.equals(this.transactionDate, transactionRequest.transactionDate) &&
        Objects.equals(this.settlementDate, transactionRequest.settlementDate) &&
        (this.units.compareTo(transactionRequest.getUnits()) == 0) &&
        Objects.equals(this.transactionPrice, transactionRequest.transactionPrice) &&
        Objects.equals(this.totalConsideration, transactionRequest.totalConsideration) &&
        (this.exchangeRate.compareTo(transactionRequest.getExchangeRate()) == 0) &&
        Objects.equals(this.transactionCurrency, transactionRequest.transactionCurrency) &&
        Objects.equals(this.properties, transactionRequest.properties) &&
        Objects.equals(this.counterpartyId, transactionRequest.counterpartyId) &&
        Objects.equals(this.source, transactionRequest.source) &&
        Objects.equals(this.otcConfirmation, transactionRequest.otcConfirmation) &&
        Objects.equals(this.orderId, transactionRequest.orderId) &&
        Objects.equals(this.allocationId, transactionRequest.allocationId) &&
        Objects.equals(this.custodianAccountId, transactionRequest.custodianAccountId) &&
        Objects.equals(this.transactionGroupId, transactionRequest.transactionGroupId) &&
        Objects.equals(this.strategyTag, transactionRequest.strategyTag);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(transactionId, type, instrumentIdentifiers, transactionDate, settlementDate, units, transactionPrice, totalConsideration, exchangeRate, transactionCurrency, properties, counterpartyId, source, otcConfirmation, orderId, allocationId, custodianAccountId, transactionGroupId, strategyTag);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TransactionRequest {\n");
    sb.append("    transactionId: ").append(toIndentedString(transactionId)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    instrumentIdentifiers: ").append(toIndentedString(instrumentIdentifiers)).append("\n");
    sb.append("    transactionDate: ").append(toIndentedString(transactionDate)).append("\n");
    sb.append("    settlementDate: ").append(toIndentedString(settlementDate)).append("\n");
    sb.append("    units: ").append(toIndentedString(units)).append("\n");
    sb.append("    transactionPrice: ").append(toIndentedString(transactionPrice)).append("\n");
    sb.append("    totalConsideration: ").append(toIndentedString(totalConsideration)).append("\n");
    sb.append("    exchangeRate: ").append(toIndentedString(exchangeRate)).append("\n");
    sb.append("    transactionCurrency: ").append(toIndentedString(transactionCurrency)).append("\n");
    sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
    sb.append("    counterpartyId: ").append(toIndentedString(counterpartyId)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    otcConfirmation: ").append(toIndentedString(otcConfirmation)).append("\n");
    sb.append("    orderId: ").append(toIndentedString(orderId)).append("\n");
    sb.append("    allocationId: ").append(toIndentedString(allocationId)).append("\n");
    sb.append("    custodianAccountId: ").append(toIndentedString(custodianAccountId)).append("\n");
    sb.append("    transactionGroupId: ").append(toIndentedString(transactionGroupId)).append("\n");
    sb.append("    strategyTag: ").append(toIndentedString(strategyTag)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("transactionId");
    openapiFields.add("type");
    openapiFields.add("instrumentIdentifiers");
    openapiFields.add("transactionDate");
    openapiFields.add("settlementDate");
    openapiFields.add("units");
    openapiFields.add("transactionPrice");
    openapiFields.add("totalConsideration");
    openapiFields.add("exchangeRate");
    openapiFields.add("transactionCurrency");
    openapiFields.add("properties");
    openapiFields.add("counterpartyId");
    openapiFields.add("source");
    openapiFields.add("otcConfirmation");
    openapiFields.add("orderId");
    openapiFields.add("allocationId");
    openapiFields.add("custodianAccountId");
    openapiFields.add("transactionGroupId");
    openapiFields.add("strategyTag");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("transactionId");
    openapiRequiredFields.add("type");
    openapiRequiredFields.add("instrumentIdentifiers");
    openapiRequiredFields.add("transactionDate");
    openapiRequiredFields.add("settlementDate");
    openapiRequiredFields.add("units");
    openapiRequiredFields.add("totalConsideration");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to TransactionRequest
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TransactionRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TransactionRequest is not found in the empty JSON string", TransactionRequest.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TransactionRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("transactionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transactionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transactionId").toString()));
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if (!jsonObj.get("transactionDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transactionDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transactionDate").toString()));
      }
      if (!jsonObj.get("settlementDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `settlementDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("settlementDate").toString()));
      }
      // validate the optional field `transactionPrice`
      if (jsonObj.get("transactionPrice") != null && !jsonObj.get("transactionPrice").isJsonNull()) {
        TransactionPrice.validateJsonElement(jsonObj.get("transactionPrice"));
      }
      // validate the required field `totalConsideration`
      CurrencyAndAmount.validateJsonElement(jsonObj.get("totalConsideration"));
      if ((jsonObj.get("transactionCurrency") != null && !jsonObj.get("transactionCurrency").isJsonNull()) && !jsonObj.get("transactionCurrency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transactionCurrency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transactionCurrency").toString()));
      }
      if ((jsonObj.get("counterpartyId") != null && !jsonObj.get("counterpartyId").isJsonNull()) && !jsonObj.get("counterpartyId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `counterpartyId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("counterpartyId").toString()));
      }
      if ((jsonObj.get("source") != null && !jsonObj.get("source").isJsonNull()) && !jsonObj.get("source").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `source` to be a primitive type in the JSON string but got `%s`", jsonObj.get("source").toString()));
      }
      // validate the optional field `otcConfirmation`
      if (jsonObj.get("otcConfirmation") != null && !jsonObj.get("otcConfirmation").isJsonNull()) {
        OtcConfirmation.validateJsonElement(jsonObj.get("otcConfirmation"));
      }
      // validate the optional field `orderId`
      if (jsonObj.get("orderId") != null && !jsonObj.get("orderId").isJsonNull()) {
        ResourceId.validateJsonElement(jsonObj.get("orderId"));
      }
      // validate the optional field `allocationId`
      if (jsonObj.get("allocationId") != null && !jsonObj.get("allocationId").isJsonNull()) {
        ResourceId.validateJsonElement(jsonObj.get("allocationId"));
      }
      // validate the optional field `custodianAccountId`
      if (jsonObj.get("custodianAccountId") != null && !jsonObj.get("custodianAccountId").isJsonNull()) {
        ResourceId.validateJsonElement(jsonObj.get("custodianAccountId"));
      }
      if ((jsonObj.get("transactionGroupId") != null && !jsonObj.get("transactionGroupId").isJsonNull()) && !jsonObj.get("transactionGroupId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transactionGroupId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transactionGroupId").toString()));
      }
      if (jsonObj.get("strategyTag") != null && !jsonObj.get("strategyTag").isJsonNull()) {
        JsonArray jsonArraystrategyTag = jsonObj.getAsJsonArray("strategyTag");
        if (jsonArraystrategyTag != null) {
          // ensure the json data is an array
          if (!jsonObj.get("strategyTag").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `strategyTag` to be an array in the JSON string but got `%s`", jsonObj.get("strategyTag").toString()));
          }

          // validate the optional field `strategyTag` (array)
          for (int i = 0; i < jsonArraystrategyTag.size(); i++) {
            Strategy.validateJsonElement(jsonArraystrategyTag.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TransactionRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TransactionRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TransactionRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TransactionRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<TransactionRequest>() {
           @Override
           public void write(JsonWriter out, TransactionRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TransactionRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TransactionRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TransactionRequest
  * @throws IOException if the JSON string is invalid with respect to TransactionRequest
  */
  public static TransactionRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TransactionRequest.class);
  }

 /**
  * Convert an instance of TransactionRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
