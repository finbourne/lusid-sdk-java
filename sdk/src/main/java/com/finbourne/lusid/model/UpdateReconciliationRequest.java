/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import com.finbourne.lusid.model.Property;
import com.finbourne.lusid.model.ReconciliationConfiguration;
import com.finbourne.lusid.model.ReconciliationTransactions;
import com.finbourne.lusid.model.ResourceId;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * UpdateReconciliationRequest
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class UpdateReconciliationRequest {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_IS_PORTFOLIO_GROUP = "isPortfolioGroup";
  @SerializedName(SERIALIZED_NAME_IS_PORTFOLIO_GROUP)
  private Boolean isPortfolioGroup;

  public static final String SERIALIZED_NAME_LEFT = "left";
  @SerializedName(SERIALIZED_NAME_LEFT)
  private ResourceId left;

  public static final String SERIALIZED_NAME_RIGHT = "right";
  @SerializedName(SERIALIZED_NAME_RIGHT)
  private ResourceId right;

  public static final String SERIALIZED_NAME_TRANSACTIONS = "transactions";
  @SerializedName(SERIALIZED_NAME_TRANSACTIONS)
  private ReconciliationTransactions transactions;

  public static final String SERIALIZED_NAME_POSITIONS = "positions";
  @SerializedName(SERIALIZED_NAME_POSITIONS)
  private ReconciliationConfiguration positions;

  public static final String SERIALIZED_NAME_VALUATIONS = "valuations";
  @SerializedName(SERIALIZED_NAME_VALUATIONS)
  private ReconciliationConfiguration valuations;

  public static final String SERIALIZED_NAME_PROPERTIES = "properties";
  @SerializedName(SERIALIZED_NAME_PROPERTIES)
  private Map<String, Property> properties;

  public UpdateReconciliationRequest() {
  }

  public UpdateReconciliationRequest name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * The name of the scheduled reconciliation
   * @return name
  **/
  @jakarta.annotation.Nullable
  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public UpdateReconciliationRequest description(String description) {
    
    this.description = description;
    return this;
  }

   /**
   * A description of the scheduled reconciliation
   * @return description
  **/
  @jakarta.annotation.Nullable
  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    this.description = description;
  }


  public UpdateReconciliationRequest isPortfolioGroup(Boolean isPortfolioGroup) {
    
    this.isPortfolioGroup = isPortfolioGroup;
    return this;
  }

   /**
   * Specifies whether reconciliation is between portfolios or portfolio groups
   * @return isPortfolioGroup
  **/
  @jakarta.annotation.Nullable
  public Boolean getIsPortfolioGroup() {
    return isPortfolioGroup;
  }


  public void setIsPortfolioGroup(Boolean isPortfolioGroup) {
    this.isPortfolioGroup = isPortfolioGroup;
  }


  public UpdateReconciliationRequest left(ResourceId left) {
    
    this.left = left;
    return this;
  }

   /**
   * Get left
   * @return left
  **/
  @jakarta.annotation.Nullable
  public ResourceId getLeft() {
    return left;
  }


  public void setLeft(ResourceId left) {
    this.left = left;
  }


  public UpdateReconciliationRequest right(ResourceId right) {
    
    this.right = right;
    return this;
  }

   /**
   * Get right
   * @return right
  **/
  @jakarta.annotation.Nullable
  public ResourceId getRight() {
    return right;
  }


  public void setRight(ResourceId right) {
    this.right = right;
  }


  public UpdateReconciliationRequest transactions(ReconciliationTransactions transactions) {
    
    this.transactions = transactions;
    return this;
  }

   /**
   * Get transactions
   * @return transactions
  **/
  @jakarta.annotation.Nullable
  public ReconciliationTransactions getTransactions() {
    return transactions;
  }


  public void setTransactions(ReconciliationTransactions transactions) {
    this.transactions = transactions;
  }


  public UpdateReconciliationRequest positions(ReconciliationConfiguration positions) {
    
    this.positions = positions;
    return this;
  }

   /**
   * Get positions
   * @return positions
  **/
  @jakarta.annotation.Nullable
  public ReconciliationConfiguration getPositions() {
    return positions;
  }


  public void setPositions(ReconciliationConfiguration positions) {
    this.positions = positions;
  }


  public UpdateReconciliationRequest valuations(ReconciliationConfiguration valuations) {
    
    this.valuations = valuations;
    return this;
  }

   /**
   * Get valuations
   * @return valuations
  **/
  @jakarta.annotation.Nullable
  public ReconciliationConfiguration getValuations() {
    return valuations;
  }


  public void setValuations(ReconciliationConfiguration valuations) {
    this.valuations = valuations;
  }


  public UpdateReconciliationRequest properties(Map<String, Property> properties) {
    
    this.properties = properties;
    return this;
  }

  public UpdateReconciliationRequest putPropertiesItem(String key, Property propertiesItem) {
    if (this.properties == null) {
      this.properties = new HashMap<>();
    }
    this.properties.put(key, propertiesItem);
    return this;
  }

   /**
   * Reconciliation properties
   * @return properties
  **/
  @jakarta.annotation.Nullable
  public Map<String, Property> getProperties() {
    return properties;
  }


  public void setProperties(Map<String, Property> properties) {
    this.properties = properties;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateReconciliationRequest updateReconciliationRequest = (UpdateReconciliationRequest) o;
    return Objects.equals(this.name, updateReconciliationRequest.name) &&
        Objects.equals(this.description, updateReconciliationRequest.description) &&
        Objects.equals(this.isPortfolioGroup, updateReconciliationRequest.isPortfolioGroup) &&
        Objects.equals(this.left, updateReconciliationRequest.left) &&
        Objects.equals(this.right, updateReconciliationRequest.right) &&
        Objects.equals(this.transactions, updateReconciliationRequest.transactions) &&
        Objects.equals(this.positions, updateReconciliationRequest.positions) &&
        Objects.equals(this.valuations, updateReconciliationRequest.valuations) &&
        Objects.equals(this.properties, updateReconciliationRequest.properties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, description, isPortfolioGroup, left, right, transactions, positions, valuations, properties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateReconciliationRequest {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    isPortfolioGroup: ").append(toIndentedString(isPortfolioGroup)).append("\n");
    sb.append("    left: ").append(toIndentedString(left)).append("\n");
    sb.append("    right: ").append(toIndentedString(right)).append("\n");
    sb.append("    transactions: ").append(toIndentedString(transactions)).append("\n");
    sb.append("    positions: ").append(toIndentedString(positions)).append("\n");
    sb.append("    valuations: ").append(toIndentedString(valuations)).append("\n");
    sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("description");
    openapiFields.add("isPortfolioGroup");
    openapiFields.add("left");
    openapiFields.add("right");
    openapiFields.add("transactions");
    openapiFields.add("positions");
    openapiFields.add("valuations");
    openapiFields.add("properties");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to UpdateReconciliationRequest
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateReconciliationRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateReconciliationRequest is not found in the empty JSON string", UpdateReconciliationRequest.openapiRequiredFields.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // validate the optional field `left`
      if (jsonObj.get("left") != null && !jsonObj.get("left").isJsonNull()) {
        ResourceId.validateJsonElement(jsonObj.get("left"));
      }
      // validate the optional field `right`
      if (jsonObj.get("right") != null && !jsonObj.get("right").isJsonNull()) {
        ResourceId.validateJsonElement(jsonObj.get("right"));
      }
      // validate the optional field `transactions`
      if (jsonObj.get("transactions") != null && !jsonObj.get("transactions").isJsonNull()) {
        ReconciliationTransactions.validateJsonElement(jsonObj.get("transactions"));
      }
      // validate the optional field `positions`
      if (jsonObj.get("positions") != null && !jsonObj.get("positions").isJsonNull()) {
        ReconciliationConfiguration.validateJsonElement(jsonObj.get("positions"));
      }
      // validate the optional field `valuations`
      if (jsonObj.get("valuations") != null && !jsonObj.get("valuations").isJsonNull()) {
        ReconciliationConfiguration.validateJsonElement(jsonObj.get("valuations"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateReconciliationRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateReconciliationRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateReconciliationRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateReconciliationRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateReconciliationRequest>() {
           @Override
           public void write(JsonWriter out, UpdateReconciliationRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateReconciliationRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of UpdateReconciliationRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of UpdateReconciliationRequest
  * @throws IOException if the JSON string is invalid with respect to UpdateReconciliationRequest
  */
  public static UpdateReconciliationRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateReconciliationRequest.class);
  }

 /**
  * Convert an instance of UpdateReconciliationRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
