/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * Gets or Sets InstrumentType
 */
@JsonAdapter(InstrumentType.Adapter.class)
public enum InstrumentType {
  
  QUOTEDSECURITY("QuotedSecurity"),
  
  INTERESTRATESWAP("InterestRateSwap"),
  
  FXFORWARD("FxForward"),
  
  FUTURE("Future"),
  
  EXOTICINSTRUMENT("ExoticInstrument"),
  
  FXOPTION("FxOption"),
  
  CREDITDEFAULTSWAP("CreditDefaultSwap"),
  
  INTERESTRATESWAPTION("InterestRateSwaption"),
  
  BOND("Bond"),
  
  EQUITYOPTION("EquityOption"),
  
  FIXEDLEG("FixedLeg"),
  
  FLOATINGLEG("FloatingLeg"),
  
  BESPOKECASHFLOWSLEG("BespokeCashFlowsLeg"),
  
  UNKNOWN("Unknown"),
  
  TERMDEPOSIT("TermDeposit"),
  
  CONTRACTFORDIFFERENCE("ContractForDifference"),
  
  EQUITYSWAP("EquitySwap"),
  
  CASHPERPETUAL("CashPerpetual"),
  
  CAPFLOOR("CapFloor"),
  
  CASHSETTLED("CashSettled"),
  
  CDSINDEX("CdsIndex"),
  
  BASKET("Basket"),
  
  FUNDINGLEG("FundingLeg"),
  
  FXSWAP("FxSwap"),
  
  FORWARDRATEAGREEMENT("ForwardRateAgreement"),
  
  SIMPLEINSTRUMENT("SimpleInstrument"),
  
  REPO("Repo"),
  
  EQUITY("Equity"),
  
  EXCHANGETRADEDOPTION("ExchangeTradedOption"),
  
  REFERENCEINSTRUMENT("ReferenceInstrument"),
  
  COMPLEXBOND("ComplexBond"),
  
  INFLATIONLINKEDBOND("InflationLinkedBond"),
  
  INFLATIONSWAP("InflationSwap"),
  
  SIMPLECASHFLOWLOAN("SimpleCashFlowLoan");

  private String value;

  InstrumentType(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static InstrumentType fromValue(String value) {
    for (InstrumentType b : InstrumentType.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<InstrumentType> {
    @Override
    public void write(final JsonWriter jsonWriter, final InstrumentType enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public InstrumentType read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return InstrumentType.fromValue(value);
    }
  }
}

