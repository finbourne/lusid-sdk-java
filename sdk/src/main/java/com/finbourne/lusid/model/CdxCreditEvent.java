/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import com.finbourne.lusid.model.InstrumentEvent;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * Definition of a credit event for credit default swap index (CDX) instruments.
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class CdxCreditEvent extends InstrumentEvent {
  public static final String SERIALIZED_NAME_EFFECTIVE_DATE = "effectiveDate";
  @SerializedName(SERIALIZED_NAME_EFFECTIVE_DATE)
  private OffsetDateTime effectiveDate;

  public static final String SERIALIZED_NAME_AUCTION_DATE = "auctionDate";
  @SerializedName(SERIALIZED_NAME_AUCTION_DATE)
  private OffsetDateTime auctionDate;

  public static final String SERIALIZED_NAME_RECOVERY_RATE = "recoveryRate";
  @SerializedName(SERIALIZED_NAME_RECOVERY_RATE)
  private java.math.BigDecimal recoveryRate;

  public static final String SERIALIZED_NAME_CONSTITUENT_WEIGHT = "constituentWeight";
  @SerializedName(SERIALIZED_NAME_CONSTITUENT_WEIGHT)
  private java.math.BigDecimal constituentWeight;

  public static final String SERIALIZED_NAME_CONSTITUENT_REFERENCE = "constituentReference";
  @SerializedName(SERIALIZED_NAME_CONSTITUENT_REFERENCE)
  private String constituentReference;

  public static final String SERIALIZED_NAME_PAYMENT_DATE = "paymentDate";
  @SerializedName(SERIALIZED_NAME_PAYMENT_DATE)
  private OffsetDateTime paymentDate;

  public CdxCreditEvent() {
    // this.instrumentEventType = this.getClass().getSimpleName();
  }

  public CdxCreditEvent effectiveDate(OffsetDateTime effectiveDate) {
    
    this.effectiveDate = effectiveDate;
    return this;
  }

   /**
   * The date of the credit default - i.e. date on which the debt issuer defaulted on its repayment obligation.
   * @return effectiveDate
  **/
  @jakarta.annotation.Nonnull
  public OffsetDateTime getEffectiveDate() {
    return effectiveDate;
  }


  public void setEffectiveDate(OffsetDateTime effectiveDate) {
    this.effectiveDate = effectiveDate;
  }


  public CdxCreditEvent auctionDate(OffsetDateTime auctionDate) {
    
    this.auctionDate = auctionDate;
    return this;
  }

   /**
   * The date of the credit event auction - i.e. date on which the defaulted debt is sold via auction, and a recovery rate determined.
   * @return auctionDate
  **/
  @jakarta.annotation.Nullable
  public OffsetDateTime getAuctionDate() {
    return auctionDate;
  }


  public void setAuctionDate(OffsetDateTime auctionDate) {
    this.auctionDate = auctionDate;
  }


  public CdxCreditEvent recoveryRate(java.math.BigDecimal recoveryRate) {
    
    this.recoveryRate = recoveryRate;
    return this;
  }

   /**
   * The fraction of the defaulted debt that can be recovered.
   * @return recoveryRate
  **/
  @jakarta.annotation.Nullable
  public java.math.BigDecimal getRecoveryRate() {
    return recoveryRate;
  }


  public void setRecoveryRate(java.math.BigDecimal recoveryRate) {
    this.recoveryRate = recoveryRate;
  }


  public CdxCreditEvent constituentWeight(java.math.BigDecimal constituentWeight) {
    
    this.constituentWeight = constituentWeight;
    return this;
  }

   /**
   * The relative weight of the CDX constituent.
   * @return constituentWeight
  **/
  @jakarta.annotation.Nonnull
  public java.math.BigDecimal getConstituentWeight() {
    return constituentWeight;
  }


  public void setConstituentWeight(java.math.BigDecimal constituentWeight) {
    this.constituentWeight = constituentWeight;
  }


  public CdxCreditEvent constituentReference(String constituentReference) {
    
    this.constituentReference = constituentReference;
    return this;
  }

   /**
   * Reference value used to identify the CDX constituent.
   * @return constituentReference
  **/
  @jakarta.annotation.Nullable
  public String getConstituentReference() {
    return constituentReference;
  }


  public void setConstituentReference(String constituentReference) {
    this.constituentReference = constituentReference;
  }


  public CdxCreditEvent paymentDate(OffsetDateTime paymentDate) {
    
    this.paymentDate = paymentDate;
    return this;
  }

   /**
   * The date of the credit event auction settlement.
   * @return paymentDate
  **/
  @jakarta.annotation.Nullable
  public OffsetDateTime getPaymentDate() {
    return paymentDate;
  }


  public void setPaymentDate(OffsetDateTime paymentDate) {
    this.paymentDate = paymentDate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CdxCreditEvent cdxCreditEvent = (CdxCreditEvent) o;
    return Objects.equals(this.effectiveDate, cdxCreditEvent.effectiveDate) &&
        Objects.equals(this.auctionDate, cdxCreditEvent.auctionDate) &&
        (this.recoveryRate.compareTo(cdxCreditEvent.getRecoveryRate()) == 0) &&
        (this.constituentWeight.compareTo(cdxCreditEvent.getConstituentWeight()) == 0) &&
        Objects.equals(this.constituentReference, cdxCreditEvent.constituentReference) &&
        Objects.equals(this.paymentDate, cdxCreditEvent.paymentDate) &&
        super.equals(o);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(effectiveDate, auctionDate, recoveryRate, constituentWeight, constituentReference, paymentDate, super.hashCode());
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CdxCreditEvent {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    effectiveDate: ").append(toIndentedString(effectiveDate)).append("\n");
    sb.append("    auctionDate: ").append(toIndentedString(auctionDate)).append("\n");
    sb.append("    recoveryRate: ").append(toIndentedString(recoveryRate)).append("\n");
    sb.append("    constituentWeight: ").append(toIndentedString(constituentWeight)).append("\n");
    sb.append("    constituentReference: ").append(toIndentedString(constituentReference)).append("\n");
    sb.append("    paymentDate: ").append(toIndentedString(paymentDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("instrumentEventType");
    openapiFields.add("effectiveDate");
    openapiFields.add("auctionDate");
    openapiFields.add("recoveryRate");
    openapiFields.add("constituentWeight");
    openapiFields.add("constituentReference");
    openapiFields.add("paymentDate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("effectiveDate");
    openapiRequiredFields.add("constituentWeight");
    openapiRequiredFields.add("instrumentEventType");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to CdxCreditEvent
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CdxCreditEvent.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CdxCreditEvent is not found in the empty JSON string", CdxCreditEvent.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CdxCreditEvent.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CdxCreditEvent.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CdxCreditEvent' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CdxCreditEvent> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CdxCreditEvent.class));

       return (TypeAdapter<T>) new TypeAdapter<CdxCreditEvent>() {
           @Override
           public void write(JsonWriter out, CdxCreditEvent value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CdxCreditEvent read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CdxCreditEvent given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CdxCreditEvent
  * @throws IOException if the JSON string is invalid with respect to CdxCreditEvent
  */
  public static CdxCreditEvent fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CdxCreditEvent.class);
  }

 /**
  * Convert an instance of CdxCreditEvent to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
