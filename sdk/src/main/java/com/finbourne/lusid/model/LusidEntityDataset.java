/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * Contains the run-time parameters that are appropriate for check definitions  with datasetSchema.type &#x3D; \&quot;LusidEntity\&quot;
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class LusidEntityDataset {
  public static final String SERIALIZED_NAME_AS_AT = "asAt";
  @SerializedName(SERIALIZED_NAME_AS_AT)
  private OffsetDateTime asAt;

  public static final String SERIALIZED_NAME_EFFECTIVE_AT = "effectiveAt";
  @SerializedName(SERIALIZED_NAME_EFFECTIVE_AT)
  private OffsetDateTime effectiveAt;

  public static final String SERIALIZED_NAME_SCOPE = "scope";
  @SerializedName(SERIALIZED_NAME_SCOPE)
  private String scope;

  public static final String SERIALIZED_NAME_AS_AT_MODIFIED_SINCE = "asAtModifiedSince";
  @SerializedName(SERIALIZED_NAME_AS_AT_MODIFIED_SINCE)
  private OffsetDateTime asAtModifiedSince;

  public static final String SERIALIZED_NAME_SELECTOR_ATTRIBUTE = "selectorAttribute";
  @SerializedName(SERIALIZED_NAME_SELECTOR_ATTRIBUTE)
  private String selectorAttribute;

  public static final String SERIALIZED_NAME_SELECTOR_VALUE = "selectorValue";
  @SerializedName(SERIALIZED_NAME_SELECTOR_VALUE)
  private String selectorValue;

  public static final String SERIALIZED_NAME_RETURN_IDENTIFIER_KEY = "returnIdentifierKey";
  @SerializedName(SERIALIZED_NAME_RETURN_IDENTIFIER_KEY)
  private String returnIdentifierKey;

  public LusidEntityDataset() {
  }

  public LusidEntityDataset asAt(OffsetDateTime asAt) {
    
    this.asAt = asAt;
    return this;
  }

   /**
   * The asAt date to fetch the data. Nullable. Defaults to latest.
   * @return asAt
  **/
  @jakarta.annotation.Nullable
  public OffsetDateTime getAsAt() {
    return asAt;
  }


  public void setAsAt(OffsetDateTime asAt) {
    this.asAt = asAt;
  }


  public LusidEntityDataset effectiveAt(OffsetDateTime effectiveAt) {
    
    this.effectiveAt = effectiveAt;
    return this;
  }

   /**
   * The effectiveAt date to fetch the data. Nullable. Defaults to latest.
   * @return effectiveAt
  **/
  @jakarta.annotation.Nullable
  public OffsetDateTime getEffectiveAt() {
    return effectiveAt;
  }


  public void setEffectiveAt(OffsetDateTime effectiveAt) {
    this.effectiveAt = effectiveAt;
  }


  public LusidEntityDataset scope(String scope) {
    
    this.scope = scope;
    return this;
  }

   /**
   * The scope of the entities to check. Required.
   * @return scope
  **/
  @jakarta.annotation.Nonnull
  public String getScope() {
    return scope;
  }


  public void setScope(String scope) {
    this.scope = scope;
  }


  public LusidEntityDataset asAtModifiedSince(OffsetDateTime asAtModifiedSince) {
    
    this.asAtModifiedSince = asAtModifiedSince;
    return this;
  }

   /**
   * Nullable. Filters the dataset for version.asAtModified greater than or equal to this value.
   * @return asAtModifiedSince
  **/
  @jakarta.annotation.Nullable
  public OffsetDateTime getAsAtModifiedSince() {
    return asAtModifiedSince;
  }


  public void setAsAtModifiedSince(OffsetDateTime asAtModifiedSince) {
    this.asAtModifiedSince = asAtModifiedSince;
  }


  public LusidEntityDataset selectorAttribute(String selectorAttribute) {
    
    this.selectorAttribute = selectorAttribute;
    return this;
  }

   /**
   * An attribute (field name, propertyKey or identifierKey) to use to sub-divide the dataset.
   * @return selectorAttribute
  **/
  @jakarta.annotation.Nonnull
  public String getSelectorAttribute() {
    return selectorAttribute;
  }


  public void setSelectorAttribute(String selectorAttribute) {
    this.selectorAttribute = selectorAttribute;
  }


  public LusidEntityDataset selectorValue(String selectorValue) {
    
    this.selectorValue = selectorValue;
    return this;
  }

   /**
   * The value of the above attribute used to sub-divide the dataset.
   * @return selectorValue
  **/
  @jakarta.annotation.Nonnull
  public String getSelectorValue() {
    return selectorValue;
  }


  public void setSelectorValue(String selectorValue) {
    this.selectorValue = selectorValue;
  }


  public LusidEntityDataset returnIdentifierKey(String returnIdentifierKey) {
    
    this.returnIdentifierKey = returnIdentifierKey;
    return this;
  }

   /**
   * The preferred identifier to return for entities with multiple external identifiers.
   * @return returnIdentifierKey
  **/
  @jakarta.annotation.Nullable
  public String getReturnIdentifierKey() {
    return returnIdentifierKey;
  }


  public void setReturnIdentifierKey(String returnIdentifierKey) {
    this.returnIdentifierKey = returnIdentifierKey;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LusidEntityDataset lusidEntityDataset = (LusidEntityDataset) o;
    return Objects.equals(this.asAt, lusidEntityDataset.asAt) &&
        Objects.equals(this.effectiveAt, lusidEntityDataset.effectiveAt) &&
        Objects.equals(this.scope, lusidEntityDataset.scope) &&
        Objects.equals(this.asAtModifiedSince, lusidEntityDataset.asAtModifiedSince) &&
        Objects.equals(this.selectorAttribute, lusidEntityDataset.selectorAttribute) &&
        Objects.equals(this.selectorValue, lusidEntityDataset.selectorValue) &&
        Objects.equals(this.returnIdentifierKey, lusidEntityDataset.returnIdentifierKey);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(asAt, effectiveAt, scope, asAtModifiedSince, selectorAttribute, selectorValue, returnIdentifierKey);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LusidEntityDataset {\n");
    sb.append("    asAt: ").append(toIndentedString(asAt)).append("\n");
    sb.append("    effectiveAt: ").append(toIndentedString(effectiveAt)).append("\n");
    sb.append("    scope: ").append(toIndentedString(scope)).append("\n");
    sb.append("    asAtModifiedSince: ").append(toIndentedString(asAtModifiedSince)).append("\n");
    sb.append("    selectorAttribute: ").append(toIndentedString(selectorAttribute)).append("\n");
    sb.append("    selectorValue: ").append(toIndentedString(selectorValue)).append("\n");
    sb.append("    returnIdentifierKey: ").append(toIndentedString(returnIdentifierKey)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("asAt");
    openapiFields.add("effectiveAt");
    openapiFields.add("scope");
    openapiFields.add("asAtModifiedSince");
    openapiFields.add("selectorAttribute");
    openapiFields.add("selectorValue");
    openapiFields.add("returnIdentifierKey");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("scope");
    openapiRequiredFields.add("selectorAttribute");
    openapiRequiredFields.add("selectorValue");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to LusidEntityDataset
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LusidEntityDataset.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LusidEntityDataset is not found in the empty JSON string", LusidEntityDataset.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : LusidEntityDataset.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("scope").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `scope` to be a primitive type in the JSON string but got `%s`", jsonObj.get("scope").toString()));
      }
      if (!jsonObj.get("selectorAttribute").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `selectorAttribute` to be a primitive type in the JSON string but got `%s`", jsonObj.get("selectorAttribute").toString()));
      }
      if (!jsonObj.get("selectorValue").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `selectorValue` to be a primitive type in the JSON string but got `%s`", jsonObj.get("selectorValue").toString()));
      }
      if ((jsonObj.get("returnIdentifierKey") != null && !jsonObj.get("returnIdentifierKey").isJsonNull()) && !jsonObj.get("returnIdentifierKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `returnIdentifierKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("returnIdentifierKey").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LusidEntityDataset.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LusidEntityDataset' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LusidEntityDataset> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LusidEntityDataset.class));

       return (TypeAdapter<T>) new TypeAdapter<LusidEntityDataset>() {
           @Override
           public void write(JsonWriter out, LusidEntityDataset value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LusidEntityDataset read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of LusidEntityDataset given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of LusidEntityDataset
  * @throws IOException if the JSON string is invalid with respect to LusidEntityDataset
  */
  public static LusidEntityDataset fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LusidEntityDataset.class);
  }

 /**
  * Convert an instance of LusidEntityDataset to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
