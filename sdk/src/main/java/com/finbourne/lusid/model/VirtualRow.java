/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import com.finbourne.lusid.model.ResultValue;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * Rows identified by the composite id, based on the data maps
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class VirtualRow {
  public static final String SERIALIZED_NAME_ROW_ID = "rowId";
  @SerializedName(SERIALIZED_NAME_ROW_ID)
  private Map<String, String> rowId;

  public static final String SERIALIZED_NAME_ROW_DATA = "rowData";
  @SerializedName(SERIALIZED_NAME_ROW_DATA)
  private Map<String, ResultValue> rowData;

  public VirtualRow() {
  }

  public VirtualRow rowId(Map<String, String> rowId) {
    
    this.rowId = rowId;
    return this;
  }

  public VirtualRow putRowIdItem(String key, String rowIdItem) {
    if (this.rowId == null) {
      this.rowId = new HashMap<>();
    }
    this.rowId.put(key, rowIdItem);
    return this;
  }

   /**
   * The identifier for the row. This is keyed by address keys, and values obtained through applying the data map to the documents.
   * @return rowId
  **/
  @jakarta.annotation.Nullable
  public Map<String, String> getRowId() {
    return rowId;
  }


  public void setRowId(Map<String, String> rowId) {
    this.rowId = rowId;
  }


  public VirtualRow rowData(Map<String, ResultValue> rowData) {
    
    this.rowData = rowData;
    return this;
  }

  public VirtualRow putRowDataItem(String key, ResultValue rowDataItem) {
    if (this.rowData == null) {
      this.rowData = new HashMap<>();
    }
    this.rowData.put(key, rowDataItem);
    return this;
  }

   /**
   * The data for the particular row
   * @return rowData
  **/
  @jakarta.annotation.Nullable
  public Map<String, ResultValue> getRowData() {
    return rowData;
  }


  public void setRowData(Map<String, ResultValue> rowData) {
    this.rowData = rowData;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VirtualRow virtualRow = (VirtualRow) o;
    return Objects.equals(this.rowId, virtualRow.rowId) &&
        Objects.equals(this.rowData, virtualRow.rowData);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(rowId, rowData);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VirtualRow {\n");
    sb.append("    rowId: ").append(toIndentedString(rowId)).append("\n");
    sb.append("    rowData: ").append(toIndentedString(rowData)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("rowId");
    openapiFields.add("rowData");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to VirtualRow
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VirtualRow.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VirtualRow is not found in the empty JSON string", VirtualRow.openapiRequiredFields.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VirtualRow.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VirtualRow' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VirtualRow> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VirtualRow.class));

       return (TypeAdapter<T>) new TypeAdapter<VirtualRow>() {
           @Override
           public void write(JsonWriter out, VirtualRow value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VirtualRow read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of VirtualRow given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of VirtualRow
  * @throws IOException if the JSON string is invalid with respect to VirtualRow
  */
  public static VirtualRow fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VirtualRow.class);
  }

 /**
  * Convert an instance of VirtualRow to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
