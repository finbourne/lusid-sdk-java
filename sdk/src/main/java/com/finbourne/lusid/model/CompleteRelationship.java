/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import java.util.Arrays;
import com.finbourne.lusid.model.RelatedEntity;
import com.finbourne.lusid.model.ResourceId;
import com.finbourne.lusid.model.Version;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.net.URI;
import java.time.OffsetDateTime;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * Representation of a relationship containing details of source and target entities, and both outward and inward descriptions.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class CompleteRelationship {
  public static final String SERIALIZED_NAME_HREF = "href";
  @SerializedName(SERIALIZED_NAME_HREF)
  private URI href;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private Version version;

  public static final String SERIALIZED_NAME_RELATIONSHIP_DEFINITION_ID = "relationshipDefinitionId";
  @SerializedName(SERIALIZED_NAME_RELATIONSHIP_DEFINITION_ID)
  private ResourceId relationshipDefinitionId;

  public static final String SERIALIZED_NAME_SOURCE_ENTITY = "sourceEntity";
  @SerializedName(SERIALIZED_NAME_SOURCE_ENTITY)
  private RelatedEntity sourceEntity;

  public static final String SERIALIZED_NAME_TARGET_ENTITY = "targetEntity";
  @SerializedName(SERIALIZED_NAME_TARGET_ENTITY)
  private RelatedEntity targetEntity;

  public static final String SERIALIZED_NAME_OUTWARD_DESCRIPTION = "outwardDescription";
  @SerializedName(SERIALIZED_NAME_OUTWARD_DESCRIPTION)
  private String outwardDescription;

  public static final String SERIALIZED_NAME_INWARD_DESCRIPTION = "inwardDescription";
  @SerializedName(SERIALIZED_NAME_INWARD_DESCRIPTION)
  private String inwardDescription;

  public static final String SERIALIZED_NAME_EFFECTIVE_FROM = "effectiveFrom";
  @SerializedName(SERIALIZED_NAME_EFFECTIVE_FROM)
  private OffsetDateTime effectiveFrom;

  public static final String SERIALIZED_NAME_EFFECTIVE_UNTIL = "effectiveUntil";
  @SerializedName(SERIALIZED_NAME_EFFECTIVE_UNTIL)
  private OffsetDateTime effectiveUntil;

  public CompleteRelationship() {
  }

  public CompleteRelationship href(URI href) {
    
    this.href = href;
    return this;
  }

   /**
   * The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.
   * @return href
  **/
  @javax.annotation.Nullable
  public URI getHref() {
    return href;
  }


  public void setHref(URI href) {
    this.href = href;
  }


  public CompleteRelationship version(Version version) {
    
    this.version = version;
    return this;
  }

   /**
   * Get version
   * @return version
  **/
  @javax.annotation.Nullable
  public Version getVersion() {
    return version;
  }


  public void setVersion(Version version) {
    this.version = version;
  }


  public CompleteRelationship relationshipDefinitionId(ResourceId relationshipDefinitionId) {
    
    this.relationshipDefinitionId = relationshipDefinitionId;
    return this;
  }

   /**
   * Get relationshipDefinitionId
   * @return relationshipDefinitionId
  **/
  @javax.annotation.Nonnull
  public ResourceId getRelationshipDefinitionId() {
    return relationshipDefinitionId;
  }


  public void setRelationshipDefinitionId(ResourceId relationshipDefinitionId) {
    this.relationshipDefinitionId = relationshipDefinitionId;
  }


  public CompleteRelationship sourceEntity(RelatedEntity sourceEntity) {
    
    this.sourceEntity = sourceEntity;
    return this;
  }

   /**
   * Get sourceEntity
   * @return sourceEntity
  **/
  @javax.annotation.Nonnull
  public RelatedEntity getSourceEntity() {
    return sourceEntity;
  }


  public void setSourceEntity(RelatedEntity sourceEntity) {
    this.sourceEntity = sourceEntity;
  }


  public CompleteRelationship targetEntity(RelatedEntity targetEntity) {
    
    this.targetEntity = targetEntity;
    return this;
  }

   /**
   * Get targetEntity
   * @return targetEntity
  **/
  @javax.annotation.Nonnull
  public RelatedEntity getTargetEntity() {
    return targetEntity;
  }


  public void setTargetEntity(RelatedEntity targetEntity) {
    this.targetEntity = targetEntity;
  }


  public CompleteRelationship outwardDescription(String outwardDescription) {
    
    this.outwardDescription = outwardDescription;
    return this;
  }

   /**
   * Description of the relationship based on relationship definition&#39;s outward description.
   * @return outwardDescription
  **/
  @javax.annotation.Nonnull
  public String getOutwardDescription() {
    return outwardDescription;
  }


  public void setOutwardDescription(String outwardDescription) {
    this.outwardDescription = outwardDescription;
  }


  public CompleteRelationship inwardDescription(String inwardDescription) {
    
    this.inwardDescription = inwardDescription;
    return this;
  }

   /**
   * Description of the relationship based on relationship definition&#39;s inward description.
   * @return inwardDescription
  **/
  @javax.annotation.Nonnull
  public String getInwardDescription() {
    return inwardDescription;
  }


  public void setInwardDescription(String inwardDescription) {
    this.inwardDescription = inwardDescription;
  }


  public CompleteRelationship effectiveFrom(OffsetDateTime effectiveFrom) {
    
    this.effectiveFrom = effectiveFrom;
    return this;
  }

   /**
   * The effective datetime from which the relationship is valid.
   * @return effectiveFrom
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getEffectiveFrom() {
    return effectiveFrom;
  }


  public void setEffectiveFrom(OffsetDateTime effectiveFrom) {
    this.effectiveFrom = effectiveFrom;
  }


  public CompleteRelationship effectiveUntil(OffsetDateTime effectiveUntil) {
    
    this.effectiveUntil = effectiveUntil;
    return this;
  }

   /**
   * The effective datetime to which the relationship is valid until.
   * @return effectiveUntil
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getEffectiveUntil() {
    return effectiveUntil;
  }


  public void setEffectiveUntil(OffsetDateTime effectiveUntil) {
    this.effectiveUntil = effectiveUntil;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CompleteRelationship completeRelationship = (CompleteRelationship) o;
    return Objects.equals(this.href, completeRelationship.href) &&
        Objects.equals(this.version, completeRelationship.version) &&
        Objects.equals(this.relationshipDefinitionId, completeRelationship.relationshipDefinitionId) &&
        Objects.equals(this.sourceEntity, completeRelationship.sourceEntity) &&
        Objects.equals(this.targetEntity, completeRelationship.targetEntity) &&
        Objects.equals(this.outwardDescription, completeRelationship.outwardDescription) &&
        Objects.equals(this.inwardDescription, completeRelationship.inwardDescription) &&
        Objects.equals(this.effectiveFrom, completeRelationship.effectiveFrom) &&
        Objects.equals(this.effectiveUntil, completeRelationship.effectiveUntil);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(href, version, relationshipDefinitionId, sourceEntity, targetEntity, outwardDescription, inwardDescription, effectiveFrom, effectiveUntil);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CompleteRelationship {\n");
    sb.append("    href: ").append(toIndentedString(href)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    relationshipDefinitionId: ").append(toIndentedString(relationshipDefinitionId)).append("\n");
    sb.append("    sourceEntity: ").append(toIndentedString(sourceEntity)).append("\n");
    sb.append("    targetEntity: ").append(toIndentedString(targetEntity)).append("\n");
    sb.append("    outwardDescription: ").append(toIndentedString(outwardDescription)).append("\n");
    sb.append("    inwardDescription: ").append(toIndentedString(inwardDescription)).append("\n");
    sb.append("    effectiveFrom: ").append(toIndentedString(effectiveFrom)).append("\n");
    sb.append("    effectiveUntil: ").append(toIndentedString(effectiveUntil)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("href");
    openapiFields.add("version");
    openapiFields.add("relationshipDefinitionId");
    openapiFields.add("sourceEntity");
    openapiFields.add("targetEntity");
    openapiFields.add("outwardDescription");
    openapiFields.add("inwardDescription");
    openapiFields.add("effectiveFrom");
    openapiFields.add("effectiveUntil");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("relationshipDefinitionId");
    openapiRequiredFields.add("sourceEntity");
    openapiRequiredFields.add("targetEntity");
    openapiRequiredFields.add("outwardDescription");
    openapiRequiredFields.add("inwardDescription");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CompleteRelationship
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!CompleteRelationship.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CompleteRelationship is not found in the empty JSON string", CompleteRelationship.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!CompleteRelationship.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CompleteRelationship` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CompleteRelationship.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("href") != null && !jsonObj.get("href").isJsonNull()) && !jsonObj.get("href").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `href` to be a primitive type in the JSON string but got `%s`", jsonObj.get("href").toString()));
      }
      // validate the optional field `version`
      if (jsonObj.get("version") != null && !jsonObj.get("version").isJsonNull()) {
        Version.validateJsonObject(jsonObj.getAsJsonObject("version"));
      }
      // validate the required field `relationshipDefinitionId`
      ResourceId.validateJsonObject(jsonObj.getAsJsonObject("relationshipDefinitionId"));
      // validate the required field `sourceEntity`
      RelatedEntity.validateJsonObject(jsonObj.getAsJsonObject("sourceEntity"));
      // validate the required field `targetEntity`
      RelatedEntity.validateJsonObject(jsonObj.getAsJsonObject("targetEntity"));
      if (!jsonObj.get("outwardDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `outwardDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("outwardDescription").toString()));
      }
      if (!jsonObj.get("inwardDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `inwardDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("inwardDescription").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CompleteRelationship.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CompleteRelationship' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CompleteRelationship> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CompleteRelationship.class));

       return (TypeAdapter<T>) new TypeAdapter<CompleteRelationship>() {
           @Override
           public void write(JsonWriter out, CompleteRelationship value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CompleteRelationship read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CompleteRelationship given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CompleteRelationship
  * @throws IOException if the JSON string is invalid with respect to CompleteRelationship
  */
  public static CompleteRelationship fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CompleteRelationship.class);
  }

 /**
  * Convert an instance of CompleteRelationship to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
