/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import com.finbourne.lusid.model.BreakCodeSource;
import com.finbourne.lusid.model.GroupReconciliationDefinitionComparisonRulesetIds;
import com.finbourne.lusid.model.GroupReconciliationDefinitionCurrencies;
import com.finbourne.lusid.model.GroupReconciliationDefinitionPortfolioEntityIds;
import com.finbourne.lusid.model.GroupReconciliationDefinitionRecipeIds;
import com.finbourne.lusid.model.ResourceId;
import com.finbourne.lusid.model.TransactionDateWindows;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * CreateGroupReconciliationDefinitionRequest
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class CreateGroupReconciliationDefinitionRequest {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private ResourceId id;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_PORTFOLIO_ENTITY_IDS = "portfolioEntityIds";
  @SerializedName(SERIALIZED_NAME_PORTFOLIO_ENTITY_IDS)
  private GroupReconciliationDefinitionPortfolioEntityIds portfolioEntityIds;

  public static final String SERIALIZED_NAME_RECIPE_IDS = "recipeIds";
  @SerializedName(SERIALIZED_NAME_RECIPE_IDS)
  private GroupReconciliationDefinitionRecipeIds recipeIds;

  public static final String SERIALIZED_NAME_CURRENCIES = "currencies";
  @SerializedName(SERIALIZED_NAME_CURRENCIES)
  private GroupReconciliationDefinitionCurrencies currencies;

  public static final String SERIALIZED_NAME_TRANSACTION_DATE_WINDOWS = "transactionDateWindows";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_DATE_WINDOWS)
  private TransactionDateWindows transactionDateWindows;

  public static final String SERIALIZED_NAME_COMPARISON_RULESET_IDS = "comparisonRulesetIds";
  @SerializedName(SERIALIZED_NAME_COMPARISON_RULESET_IDS)
  private GroupReconciliationDefinitionComparisonRulesetIds comparisonRulesetIds;

  public static final String SERIALIZED_NAME_BREAK_CODE_SOURCE = "breakCodeSource";
  @SerializedName(SERIALIZED_NAME_BREAK_CODE_SOURCE)
  private BreakCodeSource breakCodeSource;

  public CreateGroupReconciliationDefinitionRequest() {
  }

  public CreateGroupReconciliationDefinitionRequest id(ResourceId id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @jakarta.annotation.Nullable
  public ResourceId getId() {
    return id;
  }


  public void setId(ResourceId id) {
    this.id = id;
  }


  public CreateGroupReconciliationDefinitionRequest displayName(String displayName) {
    
    this.displayName = displayName;
    return this;
  }

   /**
   * The name of the Group Reconciliation Definition
   * @return displayName
  **/
  @jakarta.annotation.Nonnull
  public String getDisplayName() {
    return displayName;
  }


  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public CreateGroupReconciliationDefinitionRequest description(String description) {
    
    this.description = description;
    return this;
  }

   /**
   * The description of the Group Reconciliation Definition
   * @return description
  **/
  @jakarta.annotation.Nullable
  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    this.description = description;
  }


  public CreateGroupReconciliationDefinitionRequest portfolioEntityIds(GroupReconciliationDefinitionPortfolioEntityIds portfolioEntityIds) {
    
    this.portfolioEntityIds = portfolioEntityIds;
    return this;
  }

   /**
   * Get portfolioEntityIds
   * @return portfolioEntityIds
  **/
  @jakarta.annotation.Nonnull
  public GroupReconciliationDefinitionPortfolioEntityIds getPortfolioEntityIds() {
    return portfolioEntityIds;
  }


  public void setPortfolioEntityIds(GroupReconciliationDefinitionPortfolioEntityIds portfolioEntityIds) {
    this.portfolioEntityIds = portfolioEntityIds;
  }


  public CreateGroupReconciliationDefinitionRequest recipeIds(GroupReconciliationDefinitionRecipeIds recipeIds) {
    
    this.recipeIds = recipeIds;
    return this;
  }

   /**
   * Get recipeIds
   * @return recipeIds
  **/
  @jakarta.annotation.Nullable
  public GroupReconciliationDefinitionRecipeIds getRecipeIds() {
    return recipeIds;
  }


  public void setRecipeIds(GroupReconciliationDefinitionRecipeIds recipeIds) {
    this.recipeIds = recipeIds;
  }


  public CreateGroupReconciliationDefinitionRequest currencies(GroupReconciliationDefinitionCurrencies currencies) {
    
    this.currencies = currencies;
    return this;
  }

   /**
   * Get currencies
   * @return currencies
  **/
  @jakarta.annotation.Nullable
  public GroupReconciliationDefinitionCurrencies getCurrencies() {
    return currencies;
  }


  public void setCurrencies(GroupReconciliationDefinitionCurrencies currencies) {
    this.currencies = currencies;
  }


  public CreateGroupReconciliationDefinitionRequest transactionDateWindows(TransactionDateWindows transactionDateWindows) {
    
    this.transactionDateWindows = transactionDateWindows;
    return this;
  }

   /**
   * Get transactionDateWindows
   * @return transactionDateWindows
  **/
  @jakarta.annotation.Nullable
  public TransactionDateWindows getTransactionDateWindows() {
    return transactionDateWindows;
  }


  public void setTransactionDateWindows(TransactionDateWindows transactionDateWindows) {
    this.transactionDateWindows = transactionDateWindows;
  }


  public CreateGroupReconciliationDefinitionRequest comparisonRulesetIds(GroupReconciliationDefinitionComparisonRulesetIds comparisonRulesetIds) {
    
    this.comparisonRulesetIds = comparisonRulesetIds;
    return this;
  }

   /**
   * Get comparisonRulesetIds
   * @return comparisonRulesetIds
  **/
  @jakarta.annotation.Nullable
  public GroupReconciliationDefinitionComparisonRulesetIds getComparisonRulesetIds() {
    return comparisonRulesetIds;
  }


  public void setComparisonRulesetIds(GroupReconciliationDefinitionComparisonRulesetIds comparisonRulesetIds) {
    this.comparisonRulesetIds = comparisonRulesetIds;
  }


  public CreateGroupReconciliationDefinitionRequest breakCodeSource(BreakCodeSource breakCodeSource) {
    
    this.breakCodeSource = breakCodeSource;
    return this;
  }

   /**
   * Get breakCodeSource
   * @return breakCodeSource
  **/
  @jakarta.annotation.Nonnull
  public BreakCodeSource getBreakCodeSource() {
    return breakCodeSource;
  }


  public void setBreakCodeSource(BreakCodeSource breakCodeSource) {
    this.breakCodeSource = breakCodeSource;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateGroupReconciliationDefinitionRequest createGroupReconciliationDefinitionRequest = (CreateGroupReconciliationDefinitionRequest) o;
    return Objects.equals(this.id, createGroupReconciliationDefinitionRequest.id) &&
        Objects.equals(this.displayName, createGroupReconciliationDefinitionRequest.displayName) &&
        Objects.equals(this.description, createGroupReconciliationDefinitionRequest.description) &&
        Objects.equals(this.portfolioEntityIds, createGroupReconciliationDefinitionRequest.portfolioEntityIds) &&
        Objects.equals(this.recipeIds, createGroupReconciliationDefinitionRequest.recipeIds) &&
        Objects.equals(this.currencies, createGroupReconciliationDefinitionRequest.currencies) &&
        Objects.equals(this.transactionDateWindows, createGroupReconciliationDefinitionRequest.transactionDateWindows) &&
        Objects.equals(this.comparisonRulesetIds, createGroupReconciliationDefinitionRequest.comparisonRulesetIds) &&
        Objects.equals(this.breakCodeSource, createGroupReconciliationDefinitionRequest.breakCodeSource);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, displayName, description, portfolioEntityIds, recipeIds, currencies, transactionDateWindows, comparisonRulesetIds, breakCodeSource);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateGroupReconciliationDefinitionRequest {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    portfolioEntityIds: ").append(toIndentedString(portfolioEntityIds)).append("\n");
    sb.append("    recipeIds: ").append(toIndentedString(recipeIds)).append("\n");
    sb.append("    currencies: ").append(toIndentedString(currencies)).append("\n");
    sb.append("    transactionDateWindows: ").append(toIndentedString(transactionDateWindows)).append("\n");
    sb.append("    comparisonRulesetIds: ").append(toIndentedString(comparisonRulesetIds)).append("\n");
    sb.append("    breakCodeSource: ").append(toIndentedString(breakCodeSource)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("displayName");
    openapiFields.add("description");
    openapiFields.add("portfolioEntityIds");
    openapiFields.add("recipeIds");
    openapiFields.add("currencies");
    openapiFields.add("transactionDateWindows");
    openapiFields.add("comparisonRulesetIds");
    openapiFields.add("breakCodeSource");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("displayName");
    openapiRequiredFields.add("portfolioEntityIds");
    openapiRequiredFields.add("breakCodeSource");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to CreateGroupReconciliationDefinitionRequest
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateGroupReconciliationDefinitionRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateGroupReconciliationDefinitionRequest is not found in the empty JSON string", CreateGroupReconciliationDefinitionRequest.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateGroupReconciliationDefinitionRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `id`
      if (jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) {
        ResourceId.validateJsonElement(jsonObj.get("id"));
      }
      if (!jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // validate the required field `portfolioEntityIds`
      GroupReconciliationDefinitionPortfolioEntityIds.validateJsonElement(jsonObj.get("portfolioEntityIds"));
      // validate the optional field `recipeIds`
      if (jsonObj.get("recipeIds") != null && !jsonObj.get("recipeIds").isJsonNull()) {
        GroupReconciliationDefinitionRecipeIds.validateJsonElement(jsonObj.get("recipeIds"));
      }
      // validate the optional field `currencies`
      if (jsonObj.get("currencies") != null && !jsonObj.get("currencies").isJsonNull()) {
        GroupReconciliationDefinitionCurrencies.validateJsonElement(jsonObj.get("currencies"));
      }
      // validate the optional field `transactionDateWindows`
      if (jsonObj.get("transactionDateWindows") != null && !jsonObj.get("transactionDateWindows").isJsonNull()) {
        TransactionDateWindows.validateJsonElement(jsonObj.get("transactionDateWindows"));
      }
      // validate the optional field `comparisonRulesetIds`
      if (jsonObj.get("comparisonRulesetIds") != null && !jsonObj.get("comparisonRulesetIds").isJsonNull()) {
        GroupReconciliationDefinitionComparisonRulesetIds.validateJsonElement(jsonObj.get("comparisonRulesetIds"));
      }
      // validate the required field `breakCodeSource`
      BreakCodeSource.validateJsonElement(jsonObj.get("breakCodeSource"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateGroupReconciliationDefinitionRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateGroupReconciliationDefinitionRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateGroupReconciliationDefinitionRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateGroupReconciliationDefinitionRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateGroupReconciliationDefinitionRequest>() {
           @Override
           public void write(JsonWriter out, CreateGroupReconciliationDefinitionRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateGroupReconciliationDefinitionRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CreateGroupReconciliationDefinitionRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CreateGroupReconciliationDefinitionRequest
  * @throws IOException if the JSON string is invalid with respect to CreateGroupReconciliationDefinitionRequest
  */
  public static CreateGroupReconciliationDefinitionRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateGroupReconciliationDefinitionRequest.class);
  }

 /**
  * Convert an instance of CreateGroupReconciliationDefinitionRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
