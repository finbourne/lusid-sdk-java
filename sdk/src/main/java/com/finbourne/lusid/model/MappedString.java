/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * MappedString
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class MappedString {
  public static final String SERIALIZED_NAME_LEFT_VALUE = "leftValue";
  @SerializedName(SERIALIZED_NAME_LEFT_VALUE)
  private String leftValue;

  public static final String SERIALIZED_NAME_RIGHT_VALUE = "rightValue";
  @SerializedName(SERIALIZED_NAME_RIGHT_VALUE)
  private String rightValue;

  public static final String SERIALIZED_NAME_MAPPING_DIRECTION = "mappingDirection";
  @SerializedName(SERIALIZED_NAME_MAPPING_DIRECTION)
  private String mappingDirection;

  public static final String SERIALIZED_NAME_IS_CASE_SENSITIVE = "isCaseSensitive";
  @SerializedName(SERIALIZED_NAME_IS_CASE_SENSITIVE)
  private Boolean isCaseSensitive;

  public MappedString() {
  }

  public MappedString leftValue(String leftValue) {
    
    this.leftValue = leftValue;
    return this;
  }

   /**
   * Get leftValue
   * @return leftValue
  **/
  @javax.annotation.Nullable
  public String getLeftValue() {
    return leftValue;
  }


  public void setLeftValue(String leftValue) {
    this.leftValue = leftValue;
  }


  public MappedString rightValue(String rightValue) {
    
    this.rightValue = rightValue;
    return this;
  }

   /**
   * Get rightValue
   * @return rightValue
  **/
  @javax.annotation.Nullable
  public String getRightValue() {
    return rightValue;
  }


  public void setRightValue(String rightValue) {
    this.rightValue = rightValue;
  }


  public MappedString mappingDirection(String mappingDirection) {
    
    this.mappingDirection = mappingDirection;
    return this;
  }

   /**
   * Get mappingDirection
   * @return mappingDirection
  **/
  @javax.annotation.Nullable
  public String getMappingDirection() {
    return mappingDirection;
  }


  public void setMappingDirection(String mappingDirection) {
    this.mappingDirection = mappingDirection;
  }


  public MappedString isCaseSensitive(Boolean isCaseSensitive) {
    
    this.isCaseSensitive = isCaseSensitive;
    return this;
  }

   /**
   * Get isCaseSensitive
   * @return isCaseSensitive
  **/
  @javax.annotation.Nullable
  public Boolean getIsCaseSensitive() {
    return isCaseSensitive;
  }


  public void setIsCaseSensitive(Boolean isCaseSensitive) {
    this.isCaseSensitive = isCaseSensitive;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MappedString mappedString = (MappedString) o;
    return Objects.equals(this.leftValue, mappedString.leftValue) &&
        Objects.equals(this.rightValue, mappedString.rightValue) &&
        Objects.equals(this.mappingDirection, mappedString.mappingDirection) &&
        Objects.equals(this.isCaseSensitive, mappedString.isCaseSensitive);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(leftValue, rightValue, mappingDirection, isCaseSensitive);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MappedString {\n");
    sb.append("    leftValue: ").append(toIndentedString(leftValue)).append("\n");
    sb.append("    rightValue: ").append(toIndentedString(rightValue)).append("\n");
    sb.append("    mappingDirection: ").append(toIndentedString(mappingDirection)).append("\n");
    sb.append("    isCaseSensitive: ").append(toIndentedString(isCaseSensitive)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("leftValue");
    openapiFields.add("rightValue");
    openapiFields.add("mappingDirection");
    openapiFields.add("isCaseSensitive");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to MappedString
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!MappedString.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MappedString is not found in the empty JSON string", MappedString.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!MappedString.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MappedString` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("leftValue") != null && !jsonObj.get("leftValue").isJsonNull()) && !jsonObj.get("leftValue").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `leftValue` to be a primitive type in the JSON string but got `%s`", jsonObj.get("leftValue").toString()));
      }
      if ((jsonObj.get("rightValue") != null && !jsonObj.get("rightValue").isJsonNull()) && !jsonObj.get("rightValue").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rightValue` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rightValue").toString()));
      }
      if ((jsonObj.get("mappingDirection") != null && !jsonObj.get("mappingDirection").isJsonNull()) && !jsonObj.get("mappingDirection").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mappingDirection` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mappingDirection").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MappedString.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MappedString' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MappedString> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MappedString.class));

       return (TypeAdapter<T>) new TypeAdapter<MappedString>() {
           @Override
           public void write(JsonWriter out, MappedString value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MappedString read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of MappedString given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of MappedString
  * @throws IOException if the JSON string is invalid with respect to MappedString
  */
  public static MappedString fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MappedString.class);
  }

 /**
  * Convert an instance of MappedString to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
