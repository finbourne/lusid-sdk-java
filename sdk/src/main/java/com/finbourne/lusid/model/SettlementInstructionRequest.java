/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import com.finbourne.lusid.model.PerpetualProperty;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * SettlementInstructionRequest
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class SettlementInstructionRequest {
  public static final String SERIALIZED_NAME_SETTLEMENT_INSTRUCTION_ID = "settlementInstructionId";
  @SerializedName(SERIALIZED_NAME_SETTLEMENT_INSTRUCTION_ID)
  private String settlementInstructionId;

  public static final String SERIALIZED_NAME_TRANSACTION_ID = "transactionId";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_ID)
  private String transactionId;

  public static final String SERIALIZED_NAME_SETTLEMENT_CATEGORY = "settlementCategory";
  @SerializedName(SERIALIZED_NAME_SETTLEMENT_CATEGORY)
  private String settlementCategory;

  public static final String SERIALIZED_NAME_INSTRUCTION_TYPE = "instructionType";
  @SerializedName(SERIALIZED_NAME_INSTRUCTION_TYPE)
  private String instructionType;

  public static final String SERIALIZED_NAME_INSTRUMENT_IDENTIFIERS = "instrumentIdentifiers";
  @SerializedName(SERIALIZED_NAME_INSTRUMENT_IDENTIFIERS)
  private Map<String, String> instrumentIdentifiers = new HashMap<>();

  public static final String SERIALIZED_NAME_CONTRACTUAL_SETTLEMENT_DATE = "contractualSettlementDate";
  @SerializedName(SERIALIZED_NAME_CONTRACTUAL_SETTLEMENT_DATE)
  private OffsetDateTime contractualSettlementDate;

  public static final String SERIALIZED_NAME_ACTUAL_SETTLEMENT_DATE = "actualSettlementDate";
  @SerializedName(SERIALIZED_NAME_ACTUAL_SETTLEMENT_DATE)
  private OffsetDateTime actualSettlementDate;

  public static final String SERIALIZED_NAME_UNITS = "units";
  @SerializedName(SERIALIZED_NAME_UNITS)
  private java.math.BigDecimal units;

  public static final String SERIALIZED_NAME_SUB_HOLDING_KEY_OVERRIDES = "subHoldingKeyOverrides";
  @SerializedName(SERIALIZED_NAME_SUB_HOLDING_KEY_OVERRIDES)
  private Map<String, PerpetualProperty> subHoldingKeyOverrides;

  public SettlementInstructionRequest() {
  }

  public SettlementInstructionRequest settlementInstructionId(String settlementInstructionId) {
    
    this.settlementInstructionId = settlementInstructionId;
    return this;
  }

   /**
   * Get settlementInstructionId
   * @return settlementInstructionId
  **/
  @jakarta.annotation.Nonnull
  public String getSettlementInstructionId() {
    return settlementInstructionId;
  }


  public void setSettlementInstructionId(String settlementInstructionId) {
    this.settlementInstructionId = settlementInstructionId;
  }


  public SettlementInstructionRequest transactionId(String transactionId) {
    
    this.transactionId = transactionId;
    return this;
  }

   /**
   * Get transactionId
   * @return transactionId
  **/
  @jakarta.annotation.Nonnull
  public String getTransactionId() {
    return transactionId;
  }


  public void setTransactionId(String transactionId) {
    this.transactionId = transactionId;
  }


  public SettlementInstructionRequest settlementCategory(String settlementCategory) {
    
    this.settlementCategory = settlementCategory;
    return this;
  }

   /**
   * Get settlementCategory
   * @return settlementCategory
  **/
  @jakarta.annotation.Nonnull
  public String getSettlementCategory() {
    return settlementCategory;
  }


  public void setSettlementCategory(String settlementCategory) {
    this.settlementCategory = settlementCategory;
  }


  public SettlementInstructionRequest instructionType(String instructionType) {
    
    this.instructionType = instructionType;
    return this;
  }

   /**
   * Get instructionType
   * @return instructionType
  **/
  @jakarta.annotation.Nullable
  public String getInstructionType() {
    return instructionType;
  }


  public void setInstructionType(String instructionType) {
    this.instructionType = instructionType;
  }


  public SettlementInstructionRequest instrumentIdentifiers(Map<String, String> instrumentIdentifiers) {
    
    this.instrumentIdentifiers = instrumentIdentifiers;
    return this;
  }

  public SettlementInstructionRequest putInstrumentIdentifiersItem(String key, String instrumentIdentifiersItem) {
    if (this.instrumentIdentifiers == null) {
      this.instrumentIdentifiers = new HashMap<>();
    }
    this.instrumentIdentifiers.put(key, instrumentIdentifiersItem);
    return this;
  }

   /**
   * Get instrumentIdentifiers
   * @return instrumentIdentifiers
  **/
  @jakarta.annotation.Nonnull
  public Map<String, String> getInstrumentIdentifiers() {
    return instrumentIdentifiers;
  }


  public void setInstrumentIdentifiers(Map<String, String> instrumentIdentifiers) {
    this.instrumentIdentifiers = instrumentIdentifiers;
  }


  public SettlementInstructionRequest contractualSettlementDate(OffsetDateTime contractualSettlementDate) {
    
    this.contractualSettlementDate = contractualSettlementDate;
    return this;
  }

   /**
   * Get contractualSettlementDate
   * @return contractualSettlementDate
  **/
  @jakarta.annotation.Nullable
  public OffsetDateTime getContractualSettlementDate() {
    return contractualSettlementDate;
  }


  public void setContractualSettlementDate(OffsetDateTime contractualSettlementDate) {
    this.contractualSettlementDate = contractualSettlementDate;
  }


  public SettlementInstructionRequest actualSettlementDate(OffsetDateTime actualSettlementDate) {
    
    this.actualSettlementDate = actualSettlementDate;
    return this;
  }

   /**
   * Get actualSettlementDate
   * @return actualSettlementDate
  **/
  @jakarta.annotation.Nonnull
  public OffsetDateTime getActualSettlementDate() {
    return actualSettlementDate;
  }


  public void setActualSettlementDate(OffsetDateTime actualSettlementDate) {
    this.actualSettlementDate = actualSettlementDate;
  }


  public SettlementInstructionRequest units(java.math.BigDecimal units) {
    
    this.units = units;
    return this;
  }

   /**
   * Get units
   * @return units
  **/
  @jakarta.annotation.Nonnull
  public java.math.BigDecimal getUnits() {
    return units;
  }


  public void setUnits(java.math.BigDecimal units) {
    this.units = units;
  }


  public SettlementInstructionRequest subHoldingKeyOverrides(Map<String, PerpetualProperty> subHoldingKeyOverrides) {
    
    this.subHoldingKeyOverrides = subHoldingKeyOverrides;
    return this;
  }

  public SettlementInstructionRequest putSubHoldingKeyOverridesItem(String key, PerpetualProperty subHoldingKeyOverridesItem) {
    if (this.subHoldingKeyOverrides == null) {
      this.subHoldingKeyOverrides = new HashMap<>();
    }
    this.subHoldingKeyOverrides.put(key, subHoldingKeyOverridesItem);
    return this;
  }

   /**
   * Get subHoldingKeyOverrides
   * @return subHoldingKeyOverrides
  **/
  @jakarta.annotation.Nullable
  public Map<String, PerpetualProperty> getSubHoldingKeyOverrides() {
    return subHoldingKeyOverrides;
  }


  public void setSubHoldingKeyOverrides(Map<String, PerpetualProperty> subHoldingKeyOverrides) {
    this.subHoldingKeyOverrides = subHoldingKeyOverrides;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SettlementInstructionRequest settlementInstructionRequest = (SettlementInstructionRequest) o;
    return Objects.equals(this.settlementInstructionId, settlementInstructionRequest.settlementInstructionId) &&
        Objects.equals(this.transactionId, settlementInstructionRequest.transactionId) &&
        Objects.equals(this.settlementCategory, settlementInstructionRequest.settlementCategory) &&
        Objects.equals(this.instructionType, settlementInstructionRequest.instructionType) &&
        Objects.equals(this.instrumentIdentifiers, settlementInstructionRequest.instrumentIdentifiers) &&
        Objects.equals(this.contractualSettlementDate, settlementInstructionRequest.contractualSettlementDate) &&
        Objects.equals(this.actualSettlementDate, settlementInstructionRequest.actualSettlementDate) &&
        (this.units.compareTo(settlementInstructionRequest.getUnits()) == 0) &&
        Objects.equals(this.subHoldingKeyOverrides, settlementInstructionRequest.subHoldingKeyOverrides);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(settlementInstructionId, transactionId, settlementCategory, instructionType, instrumentIdentifiers, contractualSettlementDate, actualSettlementDate, units, subHoldingKeyOverrides);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SettlementInstructionRequest {\n");
    sb.append("    settlementInstructionId: ").append(toIndentedString(settlementInstructionId)).append("\n");
    sb.append("    transactionId: ").append(toIndentedString(transactionId)).append("\n");
    sb.append("    settlementCategory: ").append(toIndentedString(settlementCategory)).append("\n");
    sb.append("    instructionType: ").append(toIndentedString(instructionType)).append("\n");
    sb.append("    instrumentIdentifiers: ").append(toIndentedString(instrumentIdentifiers)).append("\n");
    sb.append("    contractualSettlementDate: ").append(toIndentedString(contractualSettlementDate)).append("\n");
    sb.append("    actualSettlementDate: ").append(toIndentedString(actualSettlementDate)).append("\n");
    sb.append("    units: ").append(toIndentedString(units)).append("\n");
    sb.append("    subHoldingKeyOverrides: ").append(toIndentedString(subHoldingKeyOverrides)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("settlementInstructionId");
    openapiFields.add("transactionId");
    openapiFields.add("settlementCategory");
    openapiFields.add("instructionType");
    openapiFields.add("instrumentIdentifiers");
    openapiFields.add("contractualSettlementDate");
    openapiFields.add("actualSettlementDate");
    openapiFields.add("units");
    openapiFields.add("subHoldingKeyOverrides");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("settlementInstructionId");
    openapiRequiredFields.add("transactionId");
    openapiRequiredFields.add("settlementCategory");
    openapiRequiredFields.add("instrumentIdentifiers");
    openapiRequiredFields.add("actualSettlementDate");
    openapiRequiredFields.add("units");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to SettlementInstructionRequest
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SettlementInstructionRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SettlementInstructionRequest is not found in the empty JSON string", SettlementInstructionRequest.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SettlementInstructionRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("settlementInstructionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `settlementInstructionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("settlementInstructionId").toString()));
      }
      if (!jsonObj.get("transactionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transactionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transactionId").toString()));
      }
      if (!jsonObj.get("settlementCategory").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `settlementCategory` to be a primitive type in the JSON string but got `%s`", jsonObj.get("settlementCategory").toString()));
      }
      if ((jsonObj.get("instructionType") != null && !jsonObj.get("instructionType").isJsonNull()) && !jsonObj.get("instructionType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `instructionType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("instructionType").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SettlementInstructionRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SettlementInstructionRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SettlementInstructionRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SettlementInstructionRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<SettlementInstructionRequest>() {
           @Override
           public void write(JsonWriter out, SettlementInstructionRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SettlementInstructionRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of SettlementInstructionRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of SettlementInstructionRequest
  * @throws IOException if the JSON string is invalid with respect to SettlementInstructionRequest
  */
  public static SettlementInstructionRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SettlementInstructionRequest.class);
  }

 /**
  * Convert an instance of SettlementInstructionRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
