/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import com.finbourne.lusid.model.LabelValueSet;
import com.finbourne.lusid.model.MetricValue;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * The value of the property.
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class PropertyValue {
  public static final String SERIALIZED_NAME_LABEL_VALUE = "labelValue";
  @SerializedName(SERIALIZED_NAME_LABEL_VALUE)
  private String labelValue;

  public static final String SERIALIZED_NAME_METRIC_VALUE = "metricValue";
  @SerializedName(SERIALIZED_NAME_METRIC_VALUE)
  private MetricValue metricValue;

  public static final String SERIALIZED_NAME_LABEL_VALUE_SET = "labelValueSet";
  @SerializedName(SERIALIZED_NAME_LABEL_VALUE_SET)
  private LabelValueSet labelValueSet;

  public PropertyValue() {
  }

  public PropertyValue labelValue(String labelValue) {
    
    this.labelValue = labelValue;
    return this;
  }

   /**
   * The text value of a property defined as having the &#39;Label&#39; type.
   * @return labelValue
  **/
  @jakarta.annotation.Nullable
  public String getLabelValue() {
    return labelValue;
  }


  public void setLabelValue(String labelValue) {
    this.labelValue = labelValue;
  }


  public PropertyValue metricValue(MetricValue metricValue) {
    
    this.metricValue = metricValue;
    return this;
  }

   /**
   * Get metricValue
   * @return metricValue
  **/
  @jakarta.annotation.Nullable
  public MetricValue getMetricValue() {
    return metricValue;
  }


  public void setMetricValue(MetricValue metricValue) {
    this.metricValue = metricValue;
  }


  public PropertyValue labelValueSet(LabelValueSet labelValueSet) {
    
    this.labelValueSet = labelValueSet;
    return this;
  }

   /**
   * Get labelValueSet
   * @return labelValueSet
  **/
  @jakarta.annotation.Nullable
  public LabelValueSet getLabelValueSet() {
    return labelValueSet;
  }


  public void setLabelValueSet(LabelValueSet labelValueSet) {
    this.labelValueSet = labelValueSet;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PropertyValue propertyValue = (PropertyValue) o;
    return Objects.equals(this.labelValue, propertyValue.labelValue) &&
        Objects.equals(this.metricValue, propertyValue.metricValue) &&
        Objects.equals(this.labelValueSet, propertyValue.labelValueSet);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(labelValue, metricValue, labelValueSet);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PropertyValue {\n");
    sb.append("    labelValue: ").append(toIndentedString(labelValue)).append("\n");
    sb.append("    metricValue: ").append(toIndentedString(metricValue)).append("\n");
    sb.append("    labelValueSet: ").append(toIndentedString(labelValueSet)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("labelValue");
    openapiFields.add("metricValue");
    openapiFields.add("labelValueSet");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to PropertyValue
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PropertyValue.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PropertyValue is not found in the empty JSON string", PropertyValue.openapiRequiredFields.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("labelValue") != null && !jsonObj.get("labelValue").isJsonNull()) && !jsonObj.get("labelValue").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `labelValue` to be a primitive type in the JSON string but got `%s`", jsonObj.get("labelValue").toString()));
      }
      // validate the optional field `metricValue`
      if (jsonObj.get("metricValue") != null && !jsonObj.get("metricValue").isJsonNull()) {
        MetricValue.validateJsonElement(jsonObj.get("metricValue"));
      }
      // validate the optional field `labelValueSet`
      if (jsonObj.get("labelValueSet") != null && !jsonObj.get("labelValueSet").isJsonNull()) {
        LabelValueSet.validateJsonElement(jsonObj.get("labelValueSet"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PropertyValue.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PropertyValue' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PropertyValue> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PropertyValue.class));

       return (TypeAdapter<T>) new TypeAdapter<PropertyValue>() {
           @Override
           public void write(JsonWriter out, PropertyValue value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PropertyValue read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PropertyValue given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PropertyValue
  * @throws IOException if the JSON string is invalid with respect to PropertyValue
  */
  public static PropertyValue fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PropertyValue.class);
  }

 /**
  * Convert an instance of PropertyValue to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
