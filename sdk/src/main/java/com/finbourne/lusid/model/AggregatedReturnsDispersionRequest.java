/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import java.util.Arrays;
import com.finbourne.lusid.model.ResourceId;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * The request used in the AggregatedReturnsDispersionMetric.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class AggregatedReturnsDispersionRequest {
  public static final String SERIALIZED_NAME_TO_EFFECTIVE_AT = "toEffectiveAt";
  @SerializedName(SERIALIZED_NAME_TO_EFFECTIVE_AT)
  private String toEffectiveAt;

  public static final String SERIALIZED_NAME_YEARS_COUNT = "yearsCount";
  @SerializedName(SERIALIZED_NAME_YEARS_COUNT)
  private Integer yearsCount;

  public static final String SERIALIZED_NAME_RETURN_IDS = "returnIds";
  @SerializedName(SERIALIZED_NAME_RETURN_IDS)
  private List<ResourceId> returnIds;

  public static final String SERIALIZED_NAME_RECIPE_ID = "recipeId";
  @SerializedName(SERIALIZED_NAME_RECIPE_ID)
  private ResourceId recipeId;

  public static final String SERIALIZED_NAME_COMPOSITE_METHOD = "compositeMethod";
  @SerializedName(SERIALIZED_NAME_COMPOSITE_METHOD)
  private String compositeMethod;

  public static final String SERIALIZED_NAME_ALTERNATIVE_INCEPTION_DATE = "alternativeInceptionDate";
  @SerializedName(SERIALIZED_NAME_ALTERNATIVE_INCEPTION_DATE)
  private String alternativeInceptionDate;

  public AggregatedReturnsDispersionRequest() {
  }

  public AggregatedReturnsDispersionRequest toEffectiveAt(String toEffectiveAt) {
    
    this.toEffectiveAt = toEffectiveAt;
    return this;
  }

   /**
   * The end date for when the you want the dispersion to be calculated.
   * @return toEffectiveAt
  **/
  @javax.annotation.Nullable
  public String getToEffectiveAt() {
    return toEffectiveAt;
  }


  public void setToEffectiveAt(String toEffectiveAt) {
    this.toEffectiveAt = toEffectiveAt;
  }


  public AggregatedReturnsDispersionRequest yearsCount(Integer yearsCount) {
    
    this.yearsCount = yearsCount;
    return this;
  }

   /**
   * For how many years to calculate the dispersion. Default to 10.
   * @return yearsCount
  **/
  @javax.annotation.Nullable
  public Integer getYearsCount() {
    return yearsCount;
  }


  public void setYearsCount(Integer yearsCount) {
    this.yearsCount = yearsCount;
  }


  public AggregatedReturnsDispersionRequest returnIds(List<ResourceId> returnIds) {
    
    this.returnIds = returnIds;
    return this;
  }

  public AggregatedReturnsDispersionRequest addReturnIdsItem(ResourceId returnIdsItem) {
    if (this.returnIds == null) {
      this.returnIds = new ArrayList<>();
    }
    this.returnIds.add(returnIdsItem);
    return this;
  }

   /**
   * The Scope and code of the returns.
   * @return returnIds
  **/
  @javax.annotation.Nullable
  public List<ResourceId> getReturnIds() {
    return returnIds;
  }


  public void setReturnIds(List<ResourceId> returnIds) {
    this.returnIds = returnIds;
  }


  public AggregatedReturnsDispersionRequest recipeId(ResourceId recipeId) {
    
    this.recipeId = recipeId;
    return this;
  }

   /**
   * Get recipeId
   * @return recipeId
  **/
  @javax.annotation.Nullable
  public ResourceId getRecipeId() {
    return recipeId;
  }


  public void setRecipeId(ResourceId recipeId) {
    this.recipeId = recipeId;
  }


  public AggregatedReturnsDispersionRequest compositeMethod(String compositeMethod) {
    
    this.compositeMethod = compositeMethod;
    return this;
  }

   /**
   * The method used to calculate the Portfolio performance: Equal/Asset.
   * @return compositeMethod
  **/
  @javax.annotation.Nullable
  public String getCompositeMethod() {
    return compositeMethod;
  }


  public void setCompositeMethod(String compositeMethod) {
    this.compositeMethod = compositeMethod;
  }


  public AggregatedReturnsDispersionRequest alternativeInceptionDate(String alternativeInceptionDate) {
    
    this.alternativeInceptionDate = alternativeInceptionDate;
    return this;
  }

   /**
   * Optional - either a date, or the key for a portfolio property containing a date. If provided, the given date will override the inception date for this request.
   * @return alternativeInceptionDate
  **/
  @javax.annotation.Nullable
  public String getAlternativeInceptionDate() {
    return alternativeInceptionDate;
  }


  public void setAlternativeInceptionDate(String alternativeInceptionDate) {
    this.alternativeInceptionDate = alternativeInceptionDate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AggregatedReturnsDispersionRequest aggregatedReturnsDispersionRequest = (AggregatedReturnsDispersionRequest) o;
    return Objects.equals(this.toEffectiveAt, aggregatedReturnsDispersionRequest.toEffectiveAt) &&
        Objects.equals(this.yearsCount, aggregatedReturnsDispersionRequest.yearsCount) &&
        Objects.equals(this.returnIds, aggregatedReturnsDispersionRequest.returnIds) &&
        Objects.equals(this.recipeId, aggregatedReturnsDispersionRequest.recipeId) &&
        Objects.equals(this.compositeMethod, aggregatedReturnsDispersionRequest.compositeMethod) &&
        Objects.equals(this.alternativeInceptionDate, aggregatedReturnsDispersionRequest.alternativeInceptionDate);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(toEffectiveAt, yearsCount, returnIds, recipeId, compositeMethod, alternativeInceptionDate);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AggregatedReturnsDispersionRequest {\n");
    sb.append("    toEffectiveAt: ").append(toIndentedString(toEffectiveAt)).append("\n");
    sb.append("    yearsCount: ").append(toIndentedString(yearsCount)).append("\n");
    sb.append("    returnIds: ").append(toIndentedString(returnIds)).append("\n");
    sb.append("    recipeId: ").append(toIndentedString(recipeId)).append("\n");
    sb.append("    compositeMethod: ").append(toIndentedString(compositeMethod)).append("\n");
    sb.append("    alternativeInceptionDate: ").append(toIndentedString(alternativeInceptionDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("toEffectiveAt");
    openapiFields.add("yearsCount");
    openapiFields.add("returnIds");
    openapiFields.add("recipeId");
    openapiFields.add("compositeMethod");
    openapiFields.add("alternativeInceptionDate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to AggregatedReturnsDispersionRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!AggregatedReturnsDispersionRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AggregatedReturnsDispersionRequest is not found in the empty JSON string", AggregatedReturnsDispersionRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!AggregatedReturnsDispersionRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AggregatedReturnsDispersionRequest` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("toEffectiveAt") != null && !jsonObj.get("toEffectiveAt").isJsonNull()) && !jsonObj.get("toEffectiveAt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `toEffectiveAt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("toEffectiveAt").toString()));
      }
      if (jsonObj.get("returnIds") != null && !jsonObj.get("returnIds").isJsonNull()) {
        JsonArray jsonArrayreturnIds = jsonObj.getAsJsonArray("returnIds");
        if (jsonArrayreturnIds != null) {
          // ensure the json data is an array
          if (!jsonObj.get("returnIds").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `returnIds` to be an array in the JSON string but got `%s`", jsonObj.get("returnIds").toString()));
          }

          // validate the optional field `returnIds` (array)
          for (int i = 0; i < jsonArrayreturnIds.size(); i++) {
            ResourceId.validateJsonObject(jsonArrayreturnIds.get(i).getAsJsonObject());
          };
        }
      }
      // validate the optional field `recipeId`
      if (jsonObj.get("recipeId") != null && !jsonObj.get("recipeId").isJsonNull()) {
        ResourceId.validateJsonObject(jsonObj.getAsJsonObject("recipeId"));
      }
      if ((jsonObj.get("compositeMethod") != null && !jsonObj.get("compositeMethod").isJsonNull()) && !jsonObj.get("compositeMethod").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `compositeMethod` to be a primitive type in the JSON string but got `%s`", jsonObj.get("compositeMethod").toString()));
      }
      if ((jsonObj.get("alternativeInceptionDate") != null && !jsonObj.get("alternativeInceptionDate").isJsonNull()) && !jsonObj.get("alternativeInceptionDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `alternativeInceptionDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("alternativeInceptionDate").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AggregatedReturnsDispersionRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AggregatedReturnsDispersionRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AggregatedReturnsDispersionRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AggregatedReturnsDispersionRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<AggregatedReturnsDispersionRequest>() {
           @Override
           public void write(JsonWriter out, AggregatedReturnsDispersionRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AggregatedReturnsDispersionRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AggregatedReturnsDispersionRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AggregatedReturnsDispersionRequest
  * @throws IOException if the JSON string is invalid with respect to AggregatedReturnsDispersionRequest
  */
  public static AggregatedReturnsDispersionRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AggregatedReturnsDispersionRequest.class);
  }

 /**
  * Convert an instance of AggregatedReturnsDispersionRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
