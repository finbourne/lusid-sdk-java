/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import com.finbourne.lusid.model.NewInstrument;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * A single constituent of a partial closure event for a Flexible Repo. Contains details of the collateral being exchanged in the Instrument field, represented as a NewInstrument object, as well as the amount being exchanged and the type of that amount (Units or Percentage of current units).
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class PartialClosureConstituent {
  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private java.math.BigDecimal amount;

  public static final String SERIALIZED_NAME_AMOUNT_TYPE = "amountType";
  @SerializedName(SERIALIZED_NAME_AMOUNT_TYPE)
  private String amountType;

  public static final String SERIALIZED_NAME_INSTRUMENT = "instrument";
  @SerializedName(SERIALIZED_NAME_INSTRUMENT)
  private NewInstrument instrument;

  public PartialClosureConstituent() {
  }

  public PartialClosureConstituent amount(java.math.BigDecimal amount) {
    
    this.amount = amount;
    return this;
  }

   /**
   * If AmountType is set to Units, this field represents the number of units of the instrument being exchanged. If AmountType is set to Percentage, this field represents the percentage of the total repoed units of the instrument being exchanged. When defining a FlexibleRepoPartialClosureEvent the AmountType can be set to either Units or Percentage, where Units represents the number of units of the instrument being exchanged, and Percentage represents the percentage of the total repoed units of the instrument being exchanged in the context of the FlexibleRepo.
   * @return amount
  **/
  @jakarta.annotation.Nonnull
  public java.math.BigDecimal getAmount() {
    return amount;
  }


  public void setAmount(java.math.BigDecimal amount) {
    this.amount = amount;
  }


  public PartialClosureConstituent amountType(String amountType) {
    
    this.amountType = amountType;
    return this;
  }

   /**
   * The type of amount represented by the Amount field. I.e., does it represent a number of units or a percentage of the total repoed units of the instrument? When defining a FlexibleRepoPartialClosureEvent AmountType can be set to either Units or Percentage.  Supported string (enumeration) values are: [Percentage, Units].
   * @return amountType
  **/
  @jakarta.annotation.Nonnull
  public String getAmountType() {
    return amountType;
  }


  public void setAmountType(String amountType) {
    this.amountType = amountType;
  }


  public PartialClosureConstituent instrument(NewInstrument instrument) {
    
    this.instrument = instrument;
    return this;
  }

   /**
   * Get instrument
   * @return instrument
  **/
  @jakarta.annotation.Nonnull
  public NewInstrument getInstrument() {
    return instrument;
  }


  public void setInstrument(NewInstrument instrument) {
    this.instrument = instrument;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PartialClosureConstituent partialClosureConstituent = (PartialClosureConstituent) o;
    return (this.amount.compareTo(partialClosureConstituent.getAmount()) == 0) &&
        Objects.equals(this.amountType, partialClosureConstituent.amountType) &&
        Objects.equals(this.instrument, partialClosureConstituent.instrument);
  }

  @Override
  public int hashCode() {
    return Objects.hash(amount, amountType, instrument);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PartialClosureConstituent {\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    amountType: ").append(toIndentedString(amountType)).append("\n");
    sb.append("    instrument: ").append(toIndentedString(instrument)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("amount");
    openapiFields.add("amountType");
    openapiFields.add("instrument");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("amount");
    openapiRequiredFields.add("amountType");
    openapiRequiredFields.add("instrument");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to PartialClosureConstituent
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PartialClosureConstituent.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PartialClosureConstituent is not found in the empty JSON string", PartialClosureConstituent.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PartialClosureConstituent.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("amountType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `amountType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("amountType").toString()));
      }
      // validate the required field `instrument`
      NewInstrument.validateJsonElement(jsonObj.get("instrument"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PartialClosureConstituent.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PartialClosureConstituent' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PartialClosureConstituent> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PartialClosureConstituent.class));

       return (TypeAdapter<T>) new TypeAdapter<PartialClosureConstituent>() {
           @Override
           public void write(JsonWriter out, PartialClosureConstituent value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PartialClosureConstituent read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PartialClosureConstituent given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PartialClosureConstituent
  * @throws IOException if the JSON string is invalid with respect to PartialClosureConstituent
  */
  public static PartialClosureConstituent fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PartialClosureConstituent.class);
  }

 /**
  * Convert an instance of PartialClosureConstituent to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
