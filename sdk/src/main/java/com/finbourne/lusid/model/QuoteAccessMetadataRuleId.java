/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * An identifier that uniquely identifies a set of Quote access control metadata.
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class QuoteAccessMetadataRuleId {
  public static final String SERIALIZED_NAME_PROVIDER = "provider";
  @SerializedName(SERIALIZED_NAME_PROVIDER)
  private String provider;

  public static final String SERIALIZED_NAME_PRICE_SOURCE = "priceSource";
  @SerializedName(SERIALIZED_NAME_PRICE_SOURCE)
  private String priceSource;

  public static final String SERIALIZED_NAME_INSTRUMENT_ID = "instrumentId";
  @SerializedName(SERIALIZED_NAME_INSTRUMENT_ID)
  private String instrumentId;

  public static final String SERIALIZED_NAME_INSTRUMENT_ID_TYPE = "instrumentIdType";
  @SerializedName(SERIALIZED_NAME_INSTRUMENT_ID_TYPE)
  private String instrumentIdType;

  public static final String SERIALIZED_NAME_QUOTE_TYPE = "quoteType";
  @SerializedName(SERIALIZED_NAME_QUOTE_TYPE)
  private String quoteType;

  public static final String SERIALIZED_NAME_FIELD = "field";
  @SerializedName(SERIALIZED_NAME_FIELD)
  private String field;

  public QuoteAccessMetadataRuleId() {
  }

  public QuoteAccessMetadataRuleId provider(String provider) {
    
    this.provider = provider;
    return this;
  }

   /**
   * The platform or vendor that provided the quote. The available values are: Client, DataScope, Lusid, Edi, TraderMade, FactSet, SIX, Bloomberg, Rimes, ICE, LSEG
   * @return provider
  **/
  @jakarta.annotation.Nullable
  public String getProvider() {
    return provider;
  }


  public void setProvider(String provider) {
    this.provider = provider;
  }


  public QuoteAccessMetadataRuleId priceSource(String priceSource) {
    
    this.priceSource = priceSource;
    return this;
  }

   /**
   * The source or originator of the quote, e.g. a bank or financial institution.
   * @return priceSource
  **/
  @jakarta.annotation.Nullable
  public String getPriceSource() {
    return priceSource;
  }


  public void setPriceSource(String priceSource) {
    this.priceSource = priceSource;
  }


  public QuoteAccessMetadataRuleId instrumentId(String instrumentId) {
    
    this.instrumentId = instrumentId;
    return this;
  }

   /**
   * The value of the instrument identifier that uniquely identifies the instrument that the quote is for, e.g. &#39;BBG00JX0P539&#39;.
   * @return instrumentId
  **/
  @jakarta.annotation.Nullable
  public String getInstrumentId() {
    return instrumentId;
  }


  public void setInstrumentId(String instrumentId) {
    this.instrumentId = instrumentId;
  }


  public QuoteAccessMetadataRuleId instrumentIdType(String instrumentIdType) {
    
    this.instrumentIdType = instrumentIdType;
    return this;
  }

   /**
   * The type of instrument identifier used to uniquely identify the instrument that the quote is for, e.g. &#39;Figi&#39;.
   * @return instrumentIdType
  **/
  @jakarta.annotation.Nullable
  public String getInstrumentIdType() {
    return instrumentIdType;
  }


  public void setInstrumentIdType(String instrumentIdType) {
    this.instrumentIdType = instrumentIdType;
  }


  public QuoteAccessMetadataRuleId quoteType(String quoteType) {
    
    this.quoteType = quoteType;
    return this;
  }

   /**
   * The type of the quote. This allows for quotes other than prices e.g. rates or spreads to be used.
   * @return quoteType
  **/
  @jakarta.annotation.Nullable
  public String getQuoteType() {
    return quoteType;
  }


  public void setQuoteType(String quoteType) {
    this.quoteType = quoteType;
  }


  public QuoteAccessMetadataRuleId field(String field) {
    
    this.field = field;
    return this;
  }

   /**
   * The field of the quote e.g. bid, mid, ask etc. This should be consistent across a time series of quotes. The allowed values depend on the provider according to the following rules: Client : *Any value is accepted*; DataScope : &#39;bid&#39;, &#39;mid&#39;, &#39;ask&#39;; Lusid : *Any value is accepted*; Edi : &#39;bid&#39;, &#39;mid&#39;, &#39;ask&#39;, &#39;open&#39;, &#39;close&#39;, &#39;last&#39;; TraderMade : &#39;bid&#39;, &#39;mid&#39;, &#39;ask&#39;, &#39;open&#39;, &#39;close&#39;, &#39;high&#39;, &#39;low&#39;; FactSet : &#39;bid&#39;, &#39;mid&#39;, &#39;ask&#39;, &#39;open&#39;, &#39;close&#39;; SIX : &#39;bid&#39;, &#39;mid&#39;, &#39;ask&#39;, &#39;open&#39;, &#39;close&#39;, &#39;last&#39;, &#39;referencePrice&#39;, &#39;highPrice&#39;, &#39;lowPrice&#39;, &#39;maxRedemptionPrice&#39;, &#39;maxSubscriptionPrice&#39;, &#39;openPrice&#39;, &#39;bestBidPrice&#39;, &#39;lastBidPrice&#39;, &#39;bestAskPrice&#39;, &#39;lastAskPrice&#39;, &#39;finalSettlementOptions&#39;, &#39;finalSettlementFutures&#39;, &#39;valuationPriceAmount&#39;; Bloomberg : &#39;bid&#39;, &#39;mid&#39;, &#39;ask&#39;, &#39;open&#39;, &#39;close&#39;, &#39;last&#39;; Rimes : &#39;bid&#39;, &#39;mid&#39;, &#39;ask&#39;, &#39;open&#39;, &#39;close&#39;, &#39;last&#39;; ICE : &#39;ask&#39;, &#39;bid&#39;; LSEG : &#39;ASK&#39;, &#39;BID&#39;, &#39;MID_PRICE&#39;
   * @return field
  **/
  @jakarta.annotation.Nullable
  public String getField() {
    return field;
  }


  public void setField(String field) {
    this.field = field;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    QuoteAccessMetadataRuleId quoteAccessMetadataRuleId = (QuoteAccessMetadataRuleId) o;
    return Objects.equals(this.provider, quoteAccessMetadataRuleId.provider) &&
        Objects.equals(this.priceSource, quoteAccessMetadataRuleId.priceSource) &&
        Objects.equals(this.instrumentId, quoteAccessMetadataRuleId.instrumentId) &&
        Objects.equals(this.instrumentIdType, quoteAccessMetadataRuleId.instrumentIdType) &&
        Objects.equals(this.quoteType, quoteAccessMetadataRuleId.quoteType) &&
        Objects.equals(this.field, quoteAccessMetadataRuleId.field);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(provider, priceSource, instrumentId, instrumentIdType, quoteType, field);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class QuoteAccessMetadataRuleId {\n");
    sb.append("    provider: ").append(toIndentedString(provider)).append("\n");
    sb.append("    priceSource: ").append(toIndentedString(priceSource)).append("\n");
    sb.append("    instrumentId: ").append(toIndentedString(instrumentId)).append("\n");
    sb.append("    instrumentIdType: ").append(toIndentedString(instrumentIdType)).append("\n");
    sb.append("    quoteType: ").append(toIndentedString(quoteType)).append("\n");
    sb.append("    field: ").append(toIndentedString(field)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("provider");
    openapiFields.add("priceSource");
    openapiFields.add("instrumentId");
    openapiFields.add("instrumentIdType");
    openapiFields.add("quoteType");
    openapiFields.add("field");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to QuoteAccessMetadataRuleId
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!QuoteAccessMetadataRuleId.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in QuoteAccessMetadataRuleId is not found in the empty JSON string", QuoteAccessMetadataRuleId.openapiRequiredFields.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("provider") != null && !jsonObj.get("provider").isJsonNull()) && !jsonObj.get("provider").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provider` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provider").toString()));
      }
      if ((jsonObj.get("priceSource") != null && !jsonObj.get("priceSource").isJsonNull()) && !jsonObj.get("priceSource").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `priceSource` to be a primitive type in the JSON string but got `%s`", jsonObj.get("priceSource").toString()));
      }
      if ((jsonObj.get("instrumentId") != null && !jsonObj.get("instrumentId").isJsonNull()) && !jsonObj.get("instrumentId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `instrumentId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("instrumentId").toString()));
      }
      if ((jsonObj.get("instrumentIdType") != null && !jsonObj.get("instrumentIdType").isJsonNull()) && !jsonObj.get("instrumentIdType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `instrumentIdType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("instrumentIdType").toString()));
      }
      if ((jsonObj.get("quoteType") != null && !jsonObj.get("quoteType").isJsonNull()) && !jsonObj.get("quoteType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `quoteType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("quoteType").toString()));
      }
      if ((jsonObj.get("field") != null && !jsonObj.get("field").isJsonNull()) && !jsonObj.get("field").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `field` to be a primitive type in the JSON string but got `%s`", jsonObj.get("field").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!QuoteAccessMetadataRuleId.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'QuoteAccessMetadataRuleId' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<QuoteAccessMetadataRuleId> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(QuoteAccessMetadataRuleId.class));

       return (TypeAdapter<T>) new TypeAdapter<QuoteAccessMetadataRuleId>() {
           @Override
           public void write(JsonWriter out, QuoteAccessMetadataRuleId value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public QuoteAccessMetadataRuleId read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of QuoteAccessMetadataRuleId given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of QuoteAccessMetadataRuleId
  * @throws IOException if the JSON string is invalid with respect to QuoteAccessMetadataRuleId
  */
  public static QuoteAccessMetadataRuleId fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, QuoteAccessMetadataRuleId.class);
  }

 /**
  * Convert an instance of QuoteAccessMetadataRuleId to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
