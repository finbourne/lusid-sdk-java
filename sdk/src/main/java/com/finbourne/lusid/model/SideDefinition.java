/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import com.finbourne.lusid.model.Link;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * SideDefinition
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class SideDefinition {
  public static final String SERIALIZED_NAME_SIDE = "side";
  @SerializedName(SERIALIZED_NAME_SIDE)
  private String side;

  public static final String SERIALIZED_NAME_SECURITY = "security";
  @SerializedName(SERIALIZED_NAME_SECURITY)
  private String security;

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private String currency;

  public static final String SERIALIZED_NAME_RATE = "rate";
  @SerializedName(SERIALIZED_NAME_RATE)
  private String rate;

  public static final String SERIALIZED_NAME_UNITS = "units";
  @SerializedName(SERIALIZED_NAME_UNITS)
  private String units;

  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private String amount;

  public static final String SERIALIZED_NAME_NOTIONAL_AMOUNT = "notionalAmount";
  @SerializedName(SERIALIZED_NAME_NOTIONAL_AMOUNT)
  private String notionalAmount;

  public static final String SERIALIZED_NAME_CURRENT_FACE = "currentFace";
  @SerializedName(SERIALIZED_NAME_CURRENT_FACE)
  private String currentFace;

  public static final String SERIALIZED_NAME_LINKS = "links";
  @SerializedName(SERIALIZED_NAME_LINKS)
  private List<Link> links;

  public SideDefinition() {
  }

  public SideDefinition side(String side) {
    
    this.side = side;
    return this;
  }

   /**
   * A unique label identifying the side definition.
   * @return side
  **/
  @jakarta.annotation.Nonnull
  public String getSide() {
    return side;
  }


  public void setSide(String side) {
    this.side = side;
  }


  public SideDefinition security(String security) {
    
    this.security = security;
    return this;
  }

   /**
   * The field or property key defining the side&#39;s security, or instrument.
   * @return security
  **/
  @jakarta.annotation.Nonnull
  public String getSecurity() {
    return security;
  }


  public void setSecurity(String security) {
    this.security = security;
  }


  public SideDefinition currency(String currency) {
    
    this.currency = currency;
    return this;
  }

   /**
   * The field or property key defining the side&#39;s currency.
   * @return currency
  **/
  @jakarta.annotation.Nonnull
  public String getCurrency() {
    return currency;
  }


  public void setCurrency(String currency) {
    this.currency = currency;
  }


  public SideDefinition rate(String rate) {
    
    this.rate = rate;
    return this;
  }

   /**
   * The field or property key defining the side&#39;s rate.
   * @return rate
  **/
  @jakarta.annotation.Nonnull
  public String getRate() {
    return rate;
  }


  public void setRate(String rate) {
    this.rate = rate;
  }


  public SideDefinition units(String units) {
    
    this.units = units;
    return this;
  }

   /**
   * The value, field or property key defining the side&#39;s units.
   * @return units
  **/
  @jakarta.annotation.Nonnull
  public String getUnits() {
    return units;
  }


  public void setUnits(String units) {
    this.units = units;
  }


  public SideDefinition amount(String amount) {
    
    this.amount = amount;
    return this;
  }

   /**
   * The value, field or property key defining the side&#39;s amount
   * @return amount
  **/
  @jakarta.annotation.Nonnull
  public String getAmount() {
    return amount;
  }


  public void setAmount(String amount) {
    this.amount = amount;
  }


  public SideDefinition notionalAmount(String notionalAmount) {
    
    this.notionalAmount = notionalAmount;
    return this;
  }

   /**
   * The value, field or property key defining the side&#39;s notional amount
   * @return notionalAmount
  **/
  @jakarta.annotation.Nullable
  public String getNotionalAmount() {
    return notionalAmount;
  }


  public void setNotionalAmount(String notionalAmount) {
    this.notionalAmount = notionalAmount;
  }


  public SideDefinition currentFace(String currentFace) {
    
    this.currentFace = currentFace;
    return this;
  }

   /**
   * The value, field or property key defining the side&#39;s current face / outstanding notional.
   * @return currentFace
  **/
  @jakarta.annotation.Nullable
  public String getCurrentFace() {
    return currentFace;
  }


  public void setCurrentFace(String currentFace) {
    this.currentFace = currentFace;
  }


  public SideDefinition links(List<Link> links) {
    
    this.links = links;
    return this;
  }

  public SideDefinition addLinksItem(Link linksItem) {
    if (this.links == null) {
      this.links = new ArrayList<>();
    }
    this.links.add(linksItem);
    return this;
  }

   /**
   * Get links
   * @return links
  **/
  @jakarta.annotation.Nullable
  public List<Link> getLinks() {
    return links;
  }


  public void setLinks(List<Link> links) {
    this.links = links;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SideDefinition sideDefinition = (SideDefinition) o;
    return Objects.equals(this.side, sideDefinition.side) &&
        Objects.equals(this.security, sideDefinition.security) &&
        Objects.equals(this.currency, sideDefinition.currency) &&
        Objects.equals(this.rate, sideDefinition.rate) &&
        Objects.equals(this.units, sideDefinition.units) &&
        Objects.equals(this.amount, sideDefinition.amount) &&
        Objects.equals(this.notionalAmount, sideDefinition.notionalAmount) &&
        Objects.equals(this.currentFace, sideDefinition.currentFace) &&
        Objects.equals(this.links, sideDefinition.links);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(side, security, currency, rate, units, amount, notionalAmount, currentFace, links);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SideDefinition {\n");
    sb.append("    side: ").append(toIndentedString(side)).append("\n");
    sb.append("    security: ").append(toIndentedString(security)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    rate: ").append(toIndentedString(rate)).append("\n");
    sb.append("    units: ").append(toIndentedString(units)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    notionalAmount: ").append(toIndentedString(notionalAmount)).append("\n");
    sb.append("    currentFace: ").append(toIndentedString(currentFace)).append("\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("side");
    openapiFields.add("security");
    openapiFields.add("currency");
    openapiFields.add("rate");
    openapiFields.add("units");
    openapiFields.add("amount");
    openapiFields.add("notionalAmount");
    openapiFields.add("currentFace");
    openapiFields.add("links");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("side");
    openapiRequiredFields.add("security");
    openapiRequiredFields.add("currency");
    openapiRequiredFields.add("rate");
    openapiRequiredFields.add("units");
    openapiRequiredFields.add("amount");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to SideDefinition
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SideDefinition.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SideDefinition is not found in the empty JSON string", SideDefinition.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SideDefinition.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("side").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `side` to be a primitive type in the JSON string but got `%s`", jsonObj.get("side").toString()));
      }
      if (!jsonObj.get("security").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `security` to be a primitive type in the JSON string but got `%s`", jsonObj.get("security").toString()));
      }
      if (!jsonObj.get("currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency").toString()));
      }
      if (!jsonObj.get("rate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rate").toString()));
      }
      if (!jsonObj.get("units").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `units` to be a primitive type in the JSON string but got `%s`", jsonObj.get("units").toString()));
      }
      if (!jsonObj.get("amount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `amount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("amount").toString()));
      }
      if ((jsonObj.get("notionalAmount") != null && !jsonObj.get("notionalAmount").isJsonNull()) && !jsonObj.get("notionalAmount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `notionalAmount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("notionalAmount").toString()));
      }
      if ((jsonObj.get("currentFace") != null && !jsonObj.get("currentFace").isJsonNull()) && !jsonObj.get("currentFace").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currentFace` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currentFace").toString()));
      }
      if (jsonObj.get("links") != null && !jsonObj.get("links").isJsonNull()) {
        JsonArray jsonArraylinks = jsonObj.getAsJsonArray("links");
        if (jsonArraylinks != null) {
          // ensure the json data is an array
          if (!jsonObj.get("links").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `links` to be an array in the JSON string but got `%s`", jsonObj.get("links").toString()));
          }

          // validate the optional field `links` (array)
          for (int i = 0; i < jsonArraylinks.size(); i++) {
            Link.validateJsonElement(jsonArraylinks.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SideDefinition.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SideDefinition' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SideDefinition> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SideDefinition.class));

       return (TypeAdapter<T>) new TypeAdapter<SideDefinition>() {
           @Override
           public void write(JsonWriter out, SideDefinition value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SideDefinition read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of SideDefinition given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of SideDefinition
  * @throws IOException if the JSON string is invalid with respect to SideDefinition
  */
  public static SideDefinition fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SideDefinition.class);
  }

 /**
  * Convert an instance of SideDefinition to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
