/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import com.finbourne.lusid.model.InstrumentResolutionDetail;
import com.finbourne.lusid.model.NavTypeDefinition;
import com.finbourne.lusid.model.PortfolioEntityId;
import com.finbourne.lusid.model.Property;
import com.finbourne.lusid.model.ResourceId;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * The request used to create a Fund.
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class FundDefinitionRequest {
  public static final String SERIALIZED_NAME_CODE = "code";
  @SerializedName(SERIALIZED_NAME_CODE)
  private String code;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_BASE_CURRENCY = "baseCurrency";
  @SerializedName(SERIALIZED_NAME_BASE_CURRENCY)
  private String baseCurrency;

  public static final String SERIALIZED_NAME_INVESTOR_STRUCTURE = "investorStructure";
  @SerializedName(SERIALIZED_NAME_INVESTOR_STRUCTURE)
  private String investorStructure;

  public static final String SERIALIZED_NAME_PORTFOLIO_IDS = "portfolioIds";
  @SerializedName(SERIALIZED_NAME_PORTFOLIO_IDS)
  private List<PortfolioEntityId> portfolioIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_FUND_CONFIGURATION_ID = "fundConfigurationId";
  @SerializedName(SERIALIZED_NAME_FUND_CONFIGURATION_ID)
  private ResourceId fundConfigurationId;

  public static final String SERIALIZED_NAME_SHARE_CLASS_INSTRUMENT_SCOPES = "shareClassInstrumentScopes";
  @SerializedName(SERIALIZED_NAME_SHARE_CLASS_INSTRUMENT_SCOPES)
  private List<String> shareClassInstrumentScopes;

  public static final String SERIALIZED_NAME_SHARE_CLASS_INSTRUMENTS = "shareClassInstruments";
  @SerializedName(SERIALIZED_NAME_SHARE_CLASS_INSTRUMENTS)
  private List<InstrumentResolutionDetail> shareClassInstruments;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_INCEPTION_DATE = "inceptionDate";
  @SerializedName(SERIALIZED_NAME_INCEPTION_DATE)
  private OffsetDateTime inceptionDate;

  public static final String SERIALIZED_NAME_DECIMAL_PLACES = "decimalPlaces";
  @SerializedName(SERIALIZED_NAME_DECIMAL_PLACES)
  private Integer decimalPlaces;

  public static final String SERIALIZED_NAME_PRIMARY_NAV_TYPE = "primaryNavType";
  @SerializedName(SERIALIZED_NAME_PRIMARY_NAV_TYPE)
  private NavTypeDefinition primaryNavType;

  public static final String SERIALIZED_NAME_ADDITIONAL_NAV_TYPES = "additionalNavTypes";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_NAV_TYPES)
  private List<NavTypeDefinition> additionalNavTypes;

  public static final String SERIALIZED_NAME_PROPERTIES = "properties";
  @SerializedName(SERIALIZED_NAME_PROPERTIES)
  private Map<String, Property> properties;

  public FundDefinitionRequest() {
  }

  public FundDefinitionRequest code(String code) {
    
    this.code = code;
    return this;
  }

   /**
   * The code given for the Fund.
   * @return code
  **/
  @jakarta.annotation.Nonnull
  public String getCode() {
    return code;
  }


  public void setCode(String code) {
    this.code = code;
  }


  public FundDefinitionRequest displayName(String displayName) {
    
    this.displayName = displayName;
    return this;
  }

   /**
   * The name of the Fund.
   * @return displayName
  **/
  @jakarta.annotation.Nonnull
  public String getDisplayName() {
    return displayName;
  }


  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public FundDefinitionRequest description(String description) {
    
    this.description = description;
    return this;
  }

   /**
   * A description for the Fund.
   * @return description
  **/
  @jakarta.annotation.Nullable
  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    this.description = description;
  }


  public FundDefinitionRequest baseCurrency(String baseCurrency) {
    
    this.baseCurrency = baseCurrency;
    return this;
  }

   /**
   * The base currency of the Fund in ISO 4217 currency code format. All portfolios must be of a matching base currency.
   * @return baseCurrency
  **/
  @jakarta.annotation.Nonnull
  public String getBaseCurrency() {
    return baseCurrency;
  }


  public void setBaseCurrency(String baseCurrency) {
    this.baseCurrency = baseCurrency;
  }


  public FundDefinitionRequest investorStructure(String investorStructure) {
    
    this.investorStructure = investorStructure;
    return this;
  }

   /**
   * The Investor structure to be used by the Fund. Supported values are &#39;NonUnitised&#39;, &#39;Classes&#39; and &#39;Custom&#39;.
   * @return investorStructure
  **/
  @jakarta.annotation.Nullable
  public String getInvestorStructure() {
    return investorStructure;
  }


  public void setInvestorStructure(String investorStructure) {
    this.investorStructure = investorStructure;
  }


  public FundDefinitionRequest portfolioIds(List<PortfolioEntityId> portfolioIds) {
    
    this.portfolioIds = portfolioIds;
    return this;
  }

  public FundDefinitionRequest addPortfolioIdsItem(PortfolioEntityId portfolioIdsItem) {
    if (this.portfolioIds == null) {
      this.portfolioIds = new ArrayList<>();
    }
    this.portfolioIds.add(portfolioIdsItem);
    return this;
  }

   /**
   * A list of the Portfolio IDs associated with the fund, which are part of the Fund. Note: These must all have the same base currency, which must also much the Fund Base Currency.
   * @return portfolioIds
  **/
  @jakarta.annotation.Nonnull
  public List<PortfolioEntityId> getPortfolioIds() {
    return portfolioIds;
  }


  public void setPortfolioIds(List<PortfolioEntityId> portfolioIds) {
    this.portfolioIds = portfolioIds;
  }


  public FundDefinitionRequest fundConfigurationId(ResourceId fundConfigurationId) {
    
    this.fundConfigurationId = fundConfigurationId;
    return this;
  }

   /**
   * Get fundConfigurationId
   * @return fundConfigurationId
  **/
  @jakarta.annotation.Nonnull
  public ResourceId getFundConfigurationId() {
    return fundConfigurationId;
  }


  public void setFundConfigurationId(ResourceId fundConfigurationId) {
    this.fundConfigurationId = fundConfigurationId;
  }


  public FundDefinitionRequest shareClassInstrumentScopes(List<String> shareClassInstrumentScopes) {
    
    this.shareClassInstrumentScopes = shareClassInstrumentScopes;
    return this;
  }

  public FundDefinitionRequest addShareClassInstrumentScopesItem(String shareClassInstrumentScopesItem) {
    if (this.shareClassInstrumentScopes == null) {
      this.shareClassInstrumentScopes = new ArrayList<>();
    }
    this.shareClassInstrumentScopes.add(shareClassInstrumentScopesItem);
    return this;
  }

   /**
   * The scopes in which the instruments lie, currently limited to one.
   * @return shareClassInstrumentScopes
  **/
  @jakarta.annotation.Nullable
  public List<String> getShareClassInstrumentScopes() {
    return shareClassInstrumentScopes;
  }


  public void setShareClassInstrumentScopes(List<String> shareClassInstrumentScopes) {
    this.shareClassInstrumentScopes = shareClassInstrumentScopes;
  }


  public FundDefinitionRequest shareClassInstruments(List<InstrumentResolutionDetail> shareClassInstruments) {
    
    this.shareClassInstruments = shareClassInstruments;
    return this;
  }

  public FundDefinitionRequest addShareClassInstrumentsItem(InstrumentResolutionDetail shareClassInstrumentsItem) {
    if (this.shareClassInstruments == null) {
      this.shareClassInstruments = new ArrayList<>();
    }
    this.shareClassInstruments.add(shareClassInstrumentsItem);
    return this;
  }

   /**
   * Details the user-provided instrument identifiers and the instrument resolved from them.
   * @return shareClassInstruments
  **/
  @jakarta.annotation.Nullable
  public List<InstrumentResolutionDetail> getShareClassInstruments() {
    return shareClassInstruments;
  }


  public void setShareClassInstruments(List<InstrumentResolutionDetail> shareClassInstruments) {
    this.shareClassInstruments = shareClassInstruments;
  }


  public FundDefinitionRequest type(String type) {
    
    this.type = type;
    return this;
  }

   /**
   * The type of fund; &#39;Standalone&#39;, &#39;Master&#39; or &#39;Feeder&#39;
   * @return type
  **/
  @jakarta.annotation.Nullable
  public String getType() {
    return type;
  }


  public void setType(String type) {
    this.type = type;
  }


  public FundDefinitionRequest inceptionDate(OffsetDateTime inceptionDate) {
    
    this.inceptionDate = inceptionDate;
    return this;
  }

   /**
   * Inception date of the Fund
   * @return inceptionDate
  **/
  @jakarta.annotation.Nonnull
  public OffsetDateTime getInceptionDate() {
    return inceptionDate;
  }


  public void setInceptionDate(OffsetDateTime inceptionDate) {
    this.inceptionDate = inceptionDate;
  }


  public FundDefinitionRequest decimalPlaces(Integer decimalPlaces) {
    
    this.decimalPlaces = decimalPlaces;
    return this;
  }

   /**
   * Number of decimal places for reporting
   * minimum: 0
   * maximum: 30
   * @return decimalPlaces
  **/
  @jakarta.annotation.Nullable
  public Integer getDecimalPlaces() {
    return decimalPlaces;
  }


  public void setDecimalPlaces(Integer decimalPlaces) {
    this.decimalPlaces = decimalPlaces;
  }


  public FundDefinitionRequest primaryNavType(NavTypeDefinition primaryNavType) {
    
    this.primaryNavType = primaryNavType;
    return this;
  }

   /**
   * Get primaryNavType
   * @return primaryNavType
  **/
  @jakarta.annotation.Nonnull
  public NavTypeDefinition getPrimaryNavType() {
    return primaryNavType;
  }


  public void setPrimaryNavType(NavTypeDefinition primaryNavType) {
    this.primaryNavType = primaryNavType;
  }


  public FundDefinitionRequest additionalNavTypes(List<NavTypeDefinition> additionalNavTypes) {
    
    this.additionalNavTypes = additionalNavTypes;
    return this;
  }

  public FundDefinitionRequest addAdditionalNavTypesItem(NavTypeDefinition additionalNavTypesItem) {
    if (this.additionalNavTypes == null) {
      this.additionalNavTypes = new ArrayList<>();
    }
    this.additionalNavTypes.add(additionalNavTypesItem);
    return this;
  }

   /**
   * The definitions for any additional NAVs on the Fund.
   * @return additionalNavTypes
  **/
  @jakarta.annotation.Nullable
  public List<NavTypeDefinition> getAdditionalNavTypes() {
    return additionalNavTypes;
  }


  public void setAdditionalNavTypes(List<NavTypeDefinition> additionalNavTypes) {
    this.additionalNavTypes = additionalNavTypes;
  }


  public FundDefinitionRequest properties(Map<String, Property> properties) {
    
    this.properties = properties;
    return this;
  }

  public FundDefinitionRequest putPropertiesItem(String key, Property propertiesItem) {
    if (this.properties == null) {
      this.properties = new HashMap<>();
    }
    this.properties.put(key, propertiesItem);
    return this;
  }

   /**
   * A set of properties for the Fund.
   * @return properties
  **/
  @jakarta.annotation.Nullable
  public Map<String, Property> getProperties() {
    return properties;
  }


  public void setProperties(Map<String, Property> properties) {
    this.properties = properties;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FundDefinitionRequest fundDefinitionRequest = (FundDefinitionRequest) o;
    return Objects.equals(this.code, fundDefinitionRequest.code) &&
        Objects.equals(this.displayName, fundDefinitionRequest.displayName) &&
        Objects.equals(this.description, fundDefinitionRequest.description) &&
        Objects.equals(this.baseCurrency, fundDefinitionRequest.baseCurrency) &&
        Objects.equals(this.investorStructure, fundDefinitionRequest.investorStructure) &&
        Objects.equals(this.portfolioIds, fundDefinitionRequest.portfolioIds) &&
        Objects.equals(this.fundConfigurationId, fundDefinitionRequest.fundConfigurationId) &&
        Objects.equals(this.shareClassInstrumentScopes, fundDefinitionRequest.shareClassInstrumentScopes) &&
        Objects.equals(this.shareClassInstruments, fundDefinitionRequest.shareClassInstruments) &&
        Objects.equals(this.type, fundDefinitionRequest.type) &&
        Objects.equals(this.inceptionDate, fundDefinitionRequest.inceptionDate) &&
        Objects.equals(this.decimalPlaces, fundDefinitionRequest.decimalPlaces) &&
        Objects.equals(this.primaryNavType, fundDefinitionRequest.primaryNavType) &&
        Objects.equals(this.additionalNavTypes, fundDefinitionRequest.additionalNavTypes) &&
        Objects.equals(this.properties, fundDefinitionRequest.properties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(code, displayName, description, baseCurrency, investorStructure, portfolioIds, fundConfigurationId, shareClassInstrumentScopes, shareClassInstruments, type, inceptionDate, decimalPlaces, primaryNavType, additionalNavTypes, properties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FundDefinitionRequest {\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    baseCurrency: ").append(toIndentedString(baseCurrency)).append("\n");
    sb.append("    investorStructure: ").append(toIndentedString(investorStructure)).append("\n");
    sb.append("    portfolioIds: ").append(toIndentedString(portfolioIds)).append("\n");
    sb.append("    fundConfigurationId: ").append(toIndentedString(fundConfigurationId)).append("\n");
    sb.append("    shareClassInstrumentScopes: ").append(toIndentedString(shareClassInstrumentScopes)).append("\n");
    sb.append("    shareClassInstruments: ").append(toIndentedString(shareClassInstruments)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    inceptionDate: ").append(toIndentedString(inceptionDate)).append("\n");
    sb.append("    decimalPlaces: ").append(toIndentedString(decimalPlaces)).append("\n");
    sb.append("    primaryNavType: ").append(toIndentedString(primaryNavType)).append("\n");
    sb.append("    additionalNavTypes: ").append(toIndentedString(additionalNavTypes)).append("\n");
    sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("code");
    openapiFields.add("displayName");
    openapiFields.add("description");
    openapiFields.add("baseCurrency");
    openapiFields.add("investorStructure");
    openapiFields.add("portfolioIds");
    openapiFields.add("fundConfigurationId");
    openapiFields.add("shareClassInstrumentScopes");
    openapiFields.add("shareClassInstruments");
    openapiFields.add("type");
    openapiFields.add("inceptionDate");
    openapiFields.add("decimalPlaces");
    openapiFields.add("primaryNavType");
    openapiFields.add("additionalNavTypes");
    openapiFields.add("properties");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("code");
    openapiRequiredFields.add("displayName");
    openapiRequiredFields.add("baseCurrency");
    openapiRequiredFields.add("portfolioIds");
    openapiRequiredFields.add("fundConfigurationId");
    openapiRequiredFields.add("inceptionDate");
    openapiRequiredFields.add("primaryNavType");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to FundDefinitionRequest
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FundDefinitionRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FundDefinitionRequest is not found in the empty JSON string", FundDefinitionRequest.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : FundDefinitionRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("code").toString()));
      }
      if (!jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (!jsonObj.get("baseCurrency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `baseCurrency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("baseCurrency").toString()));
      }
      if ((jsonObj.get("investorStructure") != null && !jsonObj.get("investorStructure").isJsonNull()) && !jsonObj.get("investorStructure").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `investorStructure` to be a primitive type in the JSON string but got `%s`", jsonObj.get("investorStructure").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("portfolioIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `portfolioIds` to be an array in the JSON string but got `%s`", jsonObj.get("portfolioIds").toString()));
      }

      JsonArray jsonArrayportfolioIds = jsonObj.getAsJsonArray("portfolioIds");
      // validate the required field `portfolioIds` (array)
      for (int i = 0; i < jsonArrayportfolioIds.size(); i++) {
        PortfolioEntityId.validateJsonElement(jsonArrayportfolioIds.get(i));
      };
      // validate the required field `fundConfigurationId`
      ResourceId.validateJsonElement(jsonObj.get("fundConfigurationId"));
      // ensure the optional json data is an array if present
      if (jsonObj.get("shareClassInstrumentScopes") != null && !jsonObj.get("shareClassInstrumentScopes").isJsonNull() && !jsonObj.get("shareClassInstrumentScopes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `shareClassInstrumentScopes` to be an array in the JSON string but got `%s`", jsonObj.get("shareClassInstrumentScopes").toString()));
      }
      if (jsonObj.get("shareClassInstruments") != null && !jsonObj.get("shareClassInstruments").isJsonNull()) {
        JsonArray jsonArrayshareClassInstruments = jsonObj.getAsJsonArray("shareClassInstruments");
        if (jsonArrayshareClassInstruments != null) {
          // ensure the json data is an array
          if (!jsonObj.get("shareClassInstruments").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `shareClassInstruments` to be an array in the JSON string but got `%s`", jsonObj.get("shareClassInstruments").toString()));
          }

          // validate the optional field `shareClassInstruments` (array)
          for (int i = 0; i < jsonArrayshareClassInstruments.size(); i++) {
            InstrumentResolutionDetail.validateJsonElement(jsonArrayshareClassInstruments.get(i));
          };
        }
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the required field `primaryNavType`
      NavTypeDefinition.validateJsonElement(jsonObj.get("primaryNavType"));
      if (jsonObj.get("additionalNavTypes") != null && !jsonObj.get("additionalNavTypes").isJsonNull()) {
        JsonArray jsonArrayadditionalNavTypes = jsonObj.getAsJsonArray("additionalNavTypes");
        if (jsonArrayadditionalNavTypes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("additionalNavTypes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `additionalNavTypes` to be an array in the JSON string but got `%s`", jsonObj.get("additionalNavTypes").toString()));
          }

          // validate the optional field `additionalNavTypes` (array)
          for (int i = 0; i < jsonArrayadditionalNavTypes.size(); i++) {
            NavTypeDefinition.validateJsonElement(jsonArrayadditionalNavTypes.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FundDefinitionRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FundDefinitionRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FundDefinitionRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FundDefinitionRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<FundDefinitionRequest>() {
           @Override
           public void write(JsonWriter out, FundDefinitionRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FundDefinitionRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of FundDefinitionRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of FundDefinitionRequest
  * @throws IOException if the JSON string is invalid with respect to FundDefinitionRequest
  */
  public static FundDefinitionRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FundDefinitionRequest.class);
  }

 /**
  * Convert an instance of FundDefinitionRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
