/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * Base class in the hierarchy for representing the full economic definition of instruments in LUSID.  These definitions are used to provide instrument analytics such as PV, accrual, cash flows, and risk.  This base class should not be directly instantiated; each supported InstrumentType has a corresponding inherited class.
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class LusidInstrument {
  /**
   * The available values are: QuotedSecurity, InterestRateSwap, FxForward, Future, ExoticInstrument, FxOption, CreditDefaultSwap, InterestRateSwaption, Bond, EquityOption, FixedLeg, FloatingLeg, BespokeCashFlowsLeg, Unknown, TermDeposit, ContractForDifference, EquitySwap, CashPerpetual, CapFloor, CashSettled, CdsIndex, Basket, FundingLeg, FxSwap, ForwardRateAgreement, SimpleInstrument, Repo, Equity, ExchangeTradedOption, ReferenceInstrument, ComplexBond, InflationLinkedBond, InflationSwap, SimpleCashFlowLoan, TotalReturnSwap, InflationLeg, FundShareClass, FlexibleLoan, UnsettledCash, Cash, MasteredInstrument
   */
  @JsonAdapter(InstrumentTypeEnum.Adapter.class)
  public enum InstrumentTypeEnum {
    QUOTEDSECURITY("QuotedSecurity"),
    
    INTERESTRATESWAP("InterestRateSwap"),
    
    FXFORWARD("FxForward"),
    
    FUTURE("Future"),
    
    EXOTICINSTRUMENT("ExoticInstrument"),
    
    FXOPTION("FxOption"),
    
    CREDITDEFAULTSWAP("CreditDefaultSwap"),
    
    INTERESTRATESWAPTION("InterestRateSwaption"),
    
    BOND("Bond"),
    
    EQUITYOPTION("EquityOption"),
    
    FIXEDLEG("FixedLeg"),
    
    FLOATINGLEG("FloatingLeg"),
    
    BESPOKECASHFLOWSLEG("BespokeCashFlowsLeg"),
    
    UNKNOWN("Unknown"),
    
    TERMDEPOSIT("TermDeposit"),
    
    CONTRACTFORDIFFERENCE("ContractForDifference"),
    
    EQUITYSWAP("EquitySwap"),
    
    CASHPERPETUAL("CashPerpetual"),
    
    CAPFLOOR("CapFloor"),
    
    CASHSETTLED("CashSettled"),
    
    CDSINDEX("CdsIndex"),
    
    BASKET("Basket"),
    
    FUNDINGLEG("FundingLeg"),
    
    FXSWAP("FxSwap"),
    
    FORWARDRATEAGREEMENT("ForwardRateAgreement"),
    
    SIMPLEINSTRUMENT("SimpleInstrument"),
    
    REPO("Repo"),
    
    EQUITY("Equity"),
    
    EXCHANGETRADEDOPTION("ExchangeTradedOption"),
    
    REFERENCEINSTRUMENT("ReferenceInstrument"),
    
    COMPLEXBOND("ComplexBond"),
    
    INFLATIONLINKEDBOND("InflationLinkedBond"),
    
    INFLATIONSWAP("InflationSwap"),
    
    SIMPLECASHFLOWLOAN("SimpleCashFlowLoan"),
    
    TOTALRETURNSWAP("TotalReturnSwap"),
    
    INFLATIONLEG("InflationLeg"),
    
    FUNDSHARECLASS("FundShareClass"),
    
    FLEXIBLELOAN("FlexibleLoan"),
    
    UNSETTLEDCASH("UnsettledCash"),
    
    CASH("Cash"),
    
    MASTEREDINSTRUMENT("MasteredInstrument");

    private String value;

    InstrumentTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static InstrumentTypeEnum fromValue(String value) {
      for (InstrumentTypeEnum b : InstrumentTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<InstrumentTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final InstrumentTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public InstrumentTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return InstrumentTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_INSTRUMENT_TYPE = "instrumentType";
  @SerializedName(SERIALIZED_NAME_INSTRUMENT_TYPE)
  protected InstrumentTypeEnum instrumentType;

  public LusidInstrument() {
  }

  public LusidInstrument instrumentType(InstrumentTypeEnum instrumentType) {
    
    this.instrumentType = instrumentType;
    return this;
  }

   /**
   * The available values are: QuotedSecurity, InterestRateSwap, FxForward, Future, ExoticInstrument, FxOption, CreditDefaultSwap, InterestRateSwaption, Bond, EquityOption, FixedLeg, FloatingLeg, BespokeCashFlowsLeg, Unknown, TermDeposit, ContractForDifference, EquitySwap, CashPerpetual, CapFloor, CashSettled, CdsIndex, Basket, FundingLeg, FxSwap, ForwardRateAgreement, SimpleInstrument, Repo, Equity, ExchangeTradedOption, ReferenceInstrument, ComplexBond, InflationLinkedBond, InflationSwap, SimpleCashFlowLoan, TotalReturnSwap, InflationLeg, FundShareClass, FlexibleLoan, UnsettledCash, Cash, MasteredInstrument
   * @return instrumentType
  **/
  @jakarta.annotation.Nonnull
  public InstrumentTypeEnum getInstrumentType() {
    return instrumentType;
  }


  public void setInstrumentType(InstrumentTypeEnum instrumentType) {
    this.instrumentType = instrumentType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LusidInstrument lusidInstrument = (LusidInstrument) o;
    return Objects.equals(this.instrumentType, lusidInstrument.instrumentType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(instrumentType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LusidInstrument {\n");
    sb.append("    instrumentType: ").append(toIndentedString(instrumentType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("instrumentType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("instrumentType");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to LusidInstrument
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LusidInstrument.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LusidInstrument is not found in the empty JSON string", LusidInstrument.openapiRequiredFields.toString()));
        }
      }

      String discriminatorValue = jsonElement.getAsJsonObject().get("instrumentType").getAsString();
      switch (discriminatorValue) {
        case "Basket":
          Basket.validateJsonElement(jsonElement);
          break;
        case "Bond":
          Bond.validateJsonElement(jsonElement);
          break;
        case "CapFloor":
          CapFloor.validateJsonElement(jsonElement);
          break;
        case "Cash":
          Cash.validateJsonElement(jsonElement);
          break;
        case "CashPerpetual":
          CashPerpetual.validateJsonElement(jsonElement);
          break;
        case "CdsIndex":
          CdsIndex.validateJsonElement(jsonElement);
          break;
        case "ComplexBond":
          ComplexBond.validateJsonElement(jsonElement);
          break;
        case "ContractForDifference":
          ContractForDifference.validateJsonElement(jsonElement);
          break;
        case "CreditDefaultSwap":
          CreditDefaultSwap.validateJsonElement(jsonElement);
          break;
        case "Equity":
          Equity.validateJsonElement(jsonElement);
          break;
        case "EquityOption":
          EquityOption.validateJsonElement(jsonElement);
          break;
        case "EquitySwap":
          EquitySwap.validateJsonElement(jsonElement);
          break;
        case "ExchangeTradedOption":
          ExchangeTradedOption.validateJsonElement(jsonElement);
          break;
        case "ExoticInstrument":
          ExoticInstrument.validateJsonElement(jsonElement);
          break;
        case "FixedLeg":
          FixedLeg.validateJsonElement(jsonElement);
          break;
        case "FlexibleLoan":
          FlexibleLoan.validateJsonElement(jsonElement);
          break;
        case "FloatingLeg":
          FloatingLeg.validateJsonElement(jsonElement);
          break;
        case "ForwardRateAgreement":
          ForwardRateAgreement.validateJsonElement(jsonElement);
          break;
        case "FundShareClass":
          FundShareClass.validateJsonElement(jsonElement);
          break;
        case "FundingLeg":
          FundingLeg.validateJsonElement(jsonElement);
          break;
        case "Future":
          Future.validateJsonElement(jsonElement);
          break;
        case "FxForward":
          FxForward.validateJsonElement(jsonElement);
          break;
        case "FxOption":
          FxOption.validateJsonElement(jsonElement);
          break;
        case "FxSwap":
          FxSwap.validateJsonElement(jsonElement);
          break;
        case "InflationLeg":
          InflationLeg.validateJsonElement(jsonElement);
          break;
        case "InflationLinkedBond":
          InflationLinkedBond.validateJsonElement(jsonElement);
          break;
        case "InflationSwap":
          InflationSwap.validateJsonElement(jsonElement);
          break;
        case "InstrumentLeg":
          InstrumentLeg.validateJsonElement(jsonElement);
          break;
        case "InterestRateSwap":
          InterestRateSwap.validateJsonElement(jsonElement);
          break;
        case "InterestRateSwaption":
          InterestRateSwaption.validateJsonElement(jsonElement);
          break;
        case "MasteredInstrument":
          MasteredInstrument.validateJsonElement(jsonElement);
          break;
        case "ReferenceInstrument":
          ReferenceInstrument.validateJsonElement(jsonElement);
          break;
        case "Repo":
          Repo.validateJsonElement(jsonElement);
          break;
        case "SimpleCashFlowLoan":
          SimpleCashFlowLoan.validateJsonElement(jsonElement);
          break;
        case "SimpleInstrument":
          SimpleInstrument.validateJsonElement(jsonElement);
          break;
        case "TermDeposit":
          TermDeposit.validateJsonElement(jsonElement);
          break;
        case "TotalReturnSwap":
          TotalReturnSwap.validateJsonElement(jsonElement);
          break;
        default:
          throw new IllegalArgumentException(String.format("The value of the `instrumentType` field `%s` does not match any key defined in the discriminator's mapping.", discriminatorValue));
      }
  }


 /**
  * Create an instance of LusidInstrument given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of LusidInstrument
  * @throws IOException if the JSON string is invalid with respect to LusidInstrument
  */
  public static LusidInstrument fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LusidInstrument.class);
  }

 /**
  * Convert an instance of LusidInstrument to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
