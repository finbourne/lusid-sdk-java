/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import com.finbourne.lusid.model.InstrumentEvent;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * Indicates when an issuer has defaulted on an obligation due to technical default, missed payments, or bankruptcy filing.
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class BondDefaultEvent extends InstrumentEvent {
  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private java.math.BigDecimal amount;

  public static final String SERIALIZED_NAME_COUPON_PAID_DATE = "couponPaidDate";
  @SerializedName(SERIALIZED_NAME_COUPON_PAID_DATE)
  private OffsetDateTime couponPaidDate;

  public static final String SERIALIZED_NAME_DEFAULT_STATUS = "defaultStatus";
  @SerializedName(SERIALIZED_NAME_DEFAULT_STATUS)
  private String defaultStatus;

  public static final String SERIALIZED_NAME_DEFAULT_TYPE = "defaultType";
  @SerializedName(SERIALIZED_NAME_DEFAULT_TYPE)
  private String defaultType;

  public static final String SERIALIZED_NAME_GRACE_END_DATE = "graceEndDate";
  @SerializedName(SERIALIZED_NAME_GRACE_END_DATE)
  private OffsetDateTime graceEndDate;

  public static final String SERIALIZED_NAME_PAYMENT_DATE = "paymentDate";
  @SerializedName(SERIALIZED_NAME_PAYMENT_DATE)
  private OffsetDateTime paymentDate;

  public BondDefaultEvent() {
    // this.instrumentEventType = this.getClass().getSimpleName();
  }

  public BondDefaultEvent amount(java.math.BigDecimal amount) {
    
    this.amount = amount;
    return this;
  }

   /**
   * Percentage or amount of each share held to be given to shareholders.
   * @return amount
  **/
  @jakarta.annotation.Nonnull
  public java.math.BigDecimal getAmount() {
    return amount;
  }


  public void setAmount(java.math.BigDecimal amount) {
    this.amount = amount;
  }


  public BondDefaultEvent couponPaidDate(OffsetDateTime couponPaidDate) {
    
    this.couponPaidDate = couponPaidDate;
    return this;
  }

   /**
   * Date that the missed coupon is paid if payment is made within grace period.
   * @return couponPaidDate
  **/
  @jakarta.annotation.Nonnull
  public OffsetDateTime getCouponPaidDate() {
    return couponPaidDate;
  }


  public void setCouponPaidDate(OffsetDateTime couponPaidDate) {
    this.couponPaidDate = couponPaidDate;
  }


  public BondDefaultEvent defaultStatus(String defaultStatus) {
    
    this.defaultStatus = defaultStatus;
    return this;
  }

   /**
   * The status of the bond default (i.e., technical or default)    Supported string (enumeration) values are: [Technical, Default].
   * @return defaultStatus
  **/
  @jakarta.annotation.Nonnull
  public String getDefaultStatus() {
    return defaultStatus;
  }


  public void setDefaultStatus(String defaultStatus) {
    this.defaultStatus = defaultStatus;
  }


  public BondDefaultEvent defaultType(String defaultType) {
    
    this.defaultType = defaultType;
    return this;
  }

   /**
   * The type of the default. (coupon payment, principal payment, covenant ...)    Supported string (enumeration) values are: [CouponPayment, CouponAndPrincipalPayment, PrincipalPayment, Covenant, Bankruptcy, BuyBackOption].
   * @return defaultType
  **/
  @jakarta.annotation.Nonnull
  public String getDefaultType() {
    return defaultType;
  }


  public void setDefaultType(String defaultType) {
    this.defaultType = defaultType;
  }


  public BondDefaultEvent graceEndDate(OffsetDateTime graceEndDate) {
    
    this.graceEndDate = graceEndDate;
    return this;
  }

   /**
   * Date the grace period for making coupon payment ends.
   * @return graceEndDate
  **/
  @jakarta.annotation.Nonnull
  public OffsetDateTime getGraceEndDate() {
    return graceEndDate;
  }


  public void setGraceEndDate(OffsetDateTime graceEndDate) {
    this.graceEndDate = graceEndDate;
  }


  public BondDefaultEvent paymentDate(OffsetDateTime paymentDate) {
    
    this.paymentDate = paymentDate;
    return this;
  }

   /**
   * The date the coupon payment was missed.
   * @return paymentDate
  **/
  @jakarta.annotation.Nonnull
  public OffsetDateTime getPaymentDate() {
    return paymentDate;
  }


  public void setPaymentDate(OffsetDateTime paymentDate) {
    this.paymentDate = paymentDate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BondDefaultEvent bondDefaultEvent = (BondDefaultEvent) o;
    return (this.amount.compareTo(bondDefaultEvent.getAmount()) == 0) &&
        Objects.equals(this.couponPaidDate, bondDefaultEvent.couponPaidDate) &&
        Objects.equals(this.defaultStatus, bondDefaultEvent.defaultStatus) &&
        Objects.equals(this.defaultType, bondDefaultEvent.defaultType) &&
        Objects.equals(this.graceEndDate, bondDefaultEvent.graceEndDate) &&
        Objects.equals(this.paymentDate, bondDefaultEvent.paymentDate) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(amount, couponPaidDate, defaultStatus, defaultType, graceEndDate, paymentDate, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BondDefaultEvent {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    couponPaidDate: ").append(toIndentedString(couponPaidDate)).append("\n");
    sb.append("    defaultStatus: ").append(toIndentedString(defaultStatus)).append("\n");
    sb.append("    defaultType: ").append(toIndentedString(defaultType)).append("\n");
    sb.append("    graceEndDate: ").append(toIndentedString(graceEndDate)).append("\n");
    sb.append("    paymentDate: ").append(toIndentedString(paymentDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("instrumentEventType");
    openapiFields.add("amount");
    openapiFields.add("couponPaidDate");
    openapiFields.add("defaultStatus");
    openapiFields.add("defaultType");
    openapiFields.add("graceEndDate");
    openapiFields.add("paymentDate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("amount");
    openapiRequiredFields.add("couponPaidDate");
    openapiRequiredFields.add("defaultStatus");
    openapiRequiredFields.add("defaultType");
    openapiRequiredFields.add("graceEndDate");
    openapiRequiredFields.add("paymentDate");
    openapiRequiredFields.add("instrumentEventType");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to BondDefaultEvent
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!BondDefaultEvent.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BondDefaultEvent is not found in the empty JSON string", BondDefaultEvent.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!BondDefaultEvent.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BondDefaultEvent` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : BondDefaultEvent.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BondDefaultEvent.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BondDefaultEvent' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BondDefaultEvent> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BondDefaultEvent.class));

       return (TypeAdapter<T>) new TypeAdapter<BondDefaultEvent>() {
           @Override
           public void write(JsonWriter out, BondDefaultEvent value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BondDefaultEvent read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of BondDefaultEvent given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of BondDefaultEvent
  * @throws IOException if the JSON string is invalid with respect to BondDefaultEvent
  */
  public static BondDefaultEvent fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BondDefaultEvent.class);
  }

 /**
  * Convert an instance of BondDefaultEvent to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
