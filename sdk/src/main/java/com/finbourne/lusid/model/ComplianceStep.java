/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * ComplianceStep
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ComplianceStep {
  /**
   * . The available values are: FilterStep, GroupByStep, GroupFilterStep, BranchStep, RecombineStep, CheckStep
   */
  @JsonAdapter(ComplianceStepTypeEnum.Adapter.class)
  public enum ComplianceStepTypeEnum {
    FILTERSTEP("FilterStep"),
    
    GROUPBYSTEP("GroupByStep"),
    
    GROUPFILTERSTEP("GroupFilterStep"),
    
    BRANCHSTEP("BranchStep"),
    
    RECOMBINESTEP("RecombineStep"),
    
    CHECKSTEP("CheckStep");

    private String value;

    ComplianceStepTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ComplianceStepTypeEnum fromValue(String value) {
      for (ComplianceStepTypeEnum b : ComplianceStepTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ComplianceStepTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ComplianceStepTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ComplianceStepTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ComplianceStepTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_COMPLIANCE_STEP_TYPE = "complianceStepType";
  @SerializedName(SERIALIZED_NAME_COMPLIANCE_STEP_TYPE)
  protected ComplianceStepTypeEnum complianceStepType;

  public ComplianceStep() {
  }

  public ComplianceStep complianceStepType(ComplianceStepTypeEnum complianceStepType) {
    
    this.complianceStepType = complianceStepType;
    return this;
  }

   /**
   * . The available values are: FilterStep, GroupByStep, GroupFilterStep, BranchStep, RecombineStep, CheckStep
   * @return complianceStepType
  **/
  @jakarta.annotation.Nonnull
  public ComplianceStepTypeEnum getComplianceStepType() {
    return complianceStepType;
  }


  public void setComplianceStepType(ComplianceStepTypeEnum complianceStepType) {
    this.complianceStepType = complianceStepType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ComplianceStep complianceStep = (ComplianceStep) o;
    return Objects.equals(this.complianceStepType, complianceStep.complianceStepType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(complianceStepType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ComplianceStep {\n");
    sb.append("    complianceStepType: ").append(toIndentedString(complianceStepType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("complianceStepType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("complianceStepType");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ComplianceStep
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ComplianceStep.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ComplianceStep is not found in the empty JSON string", ComplianceStep.openapiRequiredFields.toString()));
        }
      }

      String discriminatorValue = jsonElement.getAsJsonObject().get("complianceStepType").getAsString();
      switch (discriminatorValue) {
        case "BranchStep":
          BranchStep.validateJsonElement(jsonElement);
          break;
        case "CheckStep":
          CheckStep.validateJsonElement(jsonElement);
          break;
        case "FilterStep":
          FilterStep.validateJsonElement(jsonElement);
          break;
        case "GroupByStep":
          GroupByStep.validateJsonElement(jsonElement);
          break;
        case "GroupFilterStep":
          GroupFilterStep.validateJsonElement(jsonElement);
          break;
        case "IntermediateComplianceStep":
          IntermediateComplianceStep.validateJsonElement(jsonElement);
          break;
        case "RecombineStep":
          RecombineStep.validateJsonElement(jsonElement);
          break;
        default:
          throw new IllegalArgumentException(String.format("The value of the `complianceStepType` field `%s` does not match any key defined in the discriminator's mapping.", discriminatorValue));
      }
  }


 /**
  * Create an instance of ComplianceStep given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ComplianceStep
  * @throws IOException if the JSON string is invalid with respect to ComplianceStep
  */
  public static ComplianceStep fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ComplianceStep.class);
  }

 /**
  * Convert an instance of ComplianceStep to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
