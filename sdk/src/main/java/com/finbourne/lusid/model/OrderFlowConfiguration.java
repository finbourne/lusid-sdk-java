/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * OrderFlowConfiguration
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class OrderFlowConfiguration {
  public static final String SERIALIZED_NAME_INCLUDE_ENTITY_TYPES = "includeEntityTypes";
  @SerializedName(SERIALIZED_NAME_INCLUDE_ENTITY_TYPES)
  private String includeEntityTypes;

  public OrderFlowConfiguration() {
  }

  public OrderFlowConfiguration includeEntityTypes(String includeEntityTypes) {
    
    this.includeEntityTypes = includeEntityTypes;
    return this;
  }

   /**
   * Controls whether Orders and Allocations orders are included in the Portfolio valuation. Valid values are None (to account for Transactions only), Allocations (to include Allocations and Transactions) and OrdersAndAllocations (to include Orders, Allocations and Transactions).
   * @return includeEntityTypes
  **/
  @jakarta.annotation.Nonnull
  public String getIncludeEntityTypes() {
    return includeEntityTypes;
  }


  public void setIncludeEntityTypes(String includeEntityTypes) {
    this.includeEntityTypes = includeEntityTypes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OrderFlowConfiguration orderFlowConfiguration = (OrderFlowConfiguration) o;
    return Objects.equals(this.includeEntityTypes, orderFlowConfiguration.includeEntityTypes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(includeEntityTypes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OrderFlowConfiguration {\n");
    sb.append("    includeEntityTypes: ").append(toIndentedString(includeEntityTypes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("includeEntityTypes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("includeEntityTypes");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to OrderFlowConfiguration
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OrderFlowConfiguration.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OrderFlowConfiguration is not found in the empty JSON string", OrderFlowConfiguration.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : OrderFlowConfiguration.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("includeEntityTypes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `includeEntityTypes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("includeEntityTypes").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OrderFlowConfiguration.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OrderFlowConfiguration' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OrderFlowConfiguration> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OrderFlowConfiguration.class));

       return (TypeAdapter<T>) new TypeAdapter<OrderFlowConfiguration>() {
           @Override
           public void write(JsonWriter out, OrderFlowConfiguration value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OrderFlowConfiguration read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of OrderFlowConfiguration given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of OrderFlowConfiguration
  * @throws IOException if the JSON string is invalid with respect to OrderFlowConfiguration
  */
  public static OrderFlowConfiguration fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OrderFlowConfiguration.class);
  }

 /**
  * Convert an instance of OrderFlowConfiguration to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
