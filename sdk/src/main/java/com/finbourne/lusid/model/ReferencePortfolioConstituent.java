/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import com.finbourne.lusid.model.PerpetualProperty;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * ReferencePortfolioConstituent
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ReferencePortfolioConstituent {
  public static final String SERIALIZED_NAME_INSTRUMENT_IDENTIFIERS = "instrumentIdentifiers";
  @SerializedName(SERIALIZED_NAME_INSTRUMENT_IDENTIFIERS)
  private Map<String, String> instrumentIdentifiers;

  public static final String SERIALIZED_NAME_INSTRUMENT_UID = "instrumentUid";
  @SerializedName(SERIALIZED_NAME_INSTRUMENT_UID)
  private String instrumentUid;

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private String currency;

  public static final String SERIALIZED_NAME_PROPERTIES = "properties";
  @SerializedName(SERIALIZED_NAME_PROPERTIES)
  private Map<String, PerpetualProperty> properties;

  public static final String SERIALIZED_NAME_WEIGHT = "weight";
  @SerializedName(SERIALIZED_NAME_WEIGHT)
  private java.math.BigDecimal weight;

  public static final String SERIALIZED_NAME_FLOATING_WEIGHT = "floatingWeight";
  @SerializedName(SERIALIZED_NAME_FLOATING_WEIGHT)
  private java.math.BigDecimal floatingWeight;

  public static final String SERIALIZED_NAME_INSTRUMENT_SCOPE = "instrumentScope";
  @SerializedName(SERIALIZED_NAME_INSTRUMENT_SCOPE)
  private String instrumentScope;

  public ReferencePortfolioConstituent() {
  }

  public ReferencePortfolioConstituent instrumentIdentifiers(Map<String, String> instrumentIdentifiers) {
    
    this.instrumentIdentifiers = instrumentIdentifiers;
    return this;
  }

  public ReferencePortfolioConstituent putInstrumentIdentifiersItem(String key, String instrumentIdentifiersItem) {
    if (this.instrumentIdentifiers == null) {
      this.instrumentIdentifiers = new HashMap<>();
    }
    this.instrumentIdentifiers.put(key, instrumentIdentifiersItem);
    return this;
  }

   /**
   * Unique instrument identifiers
   * @return instrumentIdentifiers
  **/
  @jakarta.annotation.Nullable
  public Map<String, String> getInstrumentIdentifiers() {
    return instrumentIdentifiers;
  }


  public void setInstrumentIdentifiers(Map<String, String> instrumentIdentifiers) {
    this.instrumentIdentifiers = instrumentIdentifiers;
  }


  public ReferencePortfolioConstituent instrumentUid(String instrumentUid) {
    
    this.instrumentUid = instrumentUid;
    return this;
  }

   /**
   * LUSID&#39;s internal unique instrument identifier, resolved from the instrument identifiers
   * @return instrumentUid
  **/
  @jakarta.annotation.Nonnull
  public String getInstrumentUid() {
    return instrumentUid;
  }


  public void setInstrumentUid(String instrumentUid) {
    this.instrumentUid = instrumentUid;
  }


  public ReferencePortfolioConstituent currency(String currency) {
    
    this.currency = currency;
    return this;
  }

   /**
   * 
   * @return currency
  **/
  @jakarta.annotation.Nonnull
  public String getCurrency() {
    return currency;
  }


  public void setCurrency(String currency) {
    this.currency = currency;
  }


  public ReferencePortfolioConstituent properties(Map<String, PerpetualProperty> properties) {
    
    this.properties = properties;
    return this;
  }

  public ReferencePortfolioConstituent putPropertiesItem(String key, PerpetualProperty propertiesItem) {
    if (this.properties == null) {
      this.properties = new HashMap<>();
    }
    this.properties.put(key, propertiesItem);
    return this;
  }

   /**
   * Properties associated with the constituent
   * @return properties
  **/
  @jakarta.annotation.Nullable
  public Map<String, PerpetualProperty> getProperties() {
    return properties;
  }


  public void setProperties(Map<String, PerpetualProperty> properties) {
    this.properties = properties;
  }


  public ReferencePortfolioConstituent weight(java.math.BigDecimal weight) {
    
    this.weight = weight;
    return this;
  }

   /**
   * 
   * @return weight
  **/
  @jakarta.annotation.Nonnull
  public java.math.BigDecimal getWeight() {
    return weight;
  }


  public void setWeight(java.math.BigDecimal weight) {
    this.weight = weight;
  }


  public ReferencePortfolioConstituent floatingWeight(java.math.BigDecimal floatingWeight) {
    
    this.floatingWeight = floatingWeight;
    return this;
  }

   /**
   * 
   * @return floatingWeight
  **/
  @jakarta.annotation.Nullable
  public java.math.BigDecimal getFloatingWeight() {
    return floatingWeight;
  }


  public void setFloatingWeight(java.math.BigDecimal floatingWeight) {
    this.floatingWeight = floatingWeight;
  }


  public ReferencePortfolioConstituent instrumentScope(String instrumentScope) {
    
    this.instrumentScope = instrumentScope;
    return this;
  }

   /**
   * 
   * @return instrumentScope
  **/
  @jakarta.annotation.Nullable
  public String getInstrumentScope() {
    return instrumentScope;
  }


  public void setInstrumentScope(String instrumentScope) {
    this.instrumentScope = instrumentScope;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReferencePortfolioConstituent referencePortfolioConstituent = (ReferencePortfolioConstituent) o;
    return Objects.equals(this.instrumentIdentifiers, referencePortfolioConstituent.instrumentIdentifiers) &&
        Objects.equals(this.instrumentUid, referencePortfolioConstituent.instrumentUid) &&
        Objects.equals(this.currency, referencePortfolioConstituent.currency) &&
        Objects.equals(this.properties, referencePortfolioConstituent.properties) &&
        (this.weight.compareTo(referencePortfolioConstituent.getWeight()) == 0) &&
        (this.floatingWeight.compareTo(referencePortfolioConstituent.getFloatingWeight()) == 0) &&
        Objects.equals(this.instrumentScope, referencePortfolioConstituent.instrumentScope);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(instrumentIdentifiers, instrumentUid, currency, properties, weight, floatingWeight, instrumentScope);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReferencePortfolioConstituent {\n");
    sb.append("    instrumentIdentifiers: ").append(toIndentedString(instrumentIdentifiers)).append("\n");
    sb.append("    instrumentUid: ").append(toIndentedString(instrumentUid)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
    sb.append("    weight: ").append(toIndentedString(weight)).append("\n");
    sb.append("    floatingWeight: ").append(toIndentedString(floatingWeight)).append("\n");
    sb.append("    instrumentScope: ").append(toIndentedString(instrumentScope)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("instrumentIdentifiers");
    openapiFields.add("instrumentUid");
    openapiFields.add("currency");
    openapiFields.add("properties");
    openapiFields.add("weight");
    openapiFields.add("floatingWeight");
    openapiFields.add("instrumentScope");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("instrumentUid");
    openapiRequiredFields.add("currency");
    openapiRequiredFields.add("weight");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ReferencePortfolioConstituent
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ReferencePortfolioConstituent.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReferencePortfolioConstituent is not found in the empty JSON string", ReferencePortfolioConstituent.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ReferencePortfolioConstituent.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("instrumentUid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `instrumentUid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("instrumentUid").toString()));
      }
      if (!jsonObj.get("currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency").toString()));
      }
      if ((jsonObj.get("instrumentScope") != null && !jsonObj.get("instrumentScope").isJsonNull()) && !jsonObj.get("instrumentScope").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `instrumentScope` to be a primitive type in the JSON string but got `%s`", jsonObj.get("instrumentScope").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReferencePortfolioConstituent.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReferencePortfolioConstituent' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReferencePortfolioConstituent> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReferencePortfolioConstituent.class));

       return (TypeAdapter<T>) new TypeAdapter<ReferencePortfolioConstituent>() {
           @Override
           public void write(JsonWriter out, ReferencePortfolioConstituent value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ReferencePortfolioConstituent read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ReferencePortfolioConstituent given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ReferencePortfolioConstituent
  * @throws IOException if the JSON string is invalid with respect to ReferencePortfolioConstituent
  */
  public static ReferencePortfolioConstituent fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReferencePortfolioConstituent.class);
  }

 /**
  * Convert an instance of ReferencePortfolioConstituent to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
