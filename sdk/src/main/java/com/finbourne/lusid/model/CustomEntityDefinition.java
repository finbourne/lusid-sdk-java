/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import com.finbourne.lusid.model.CustomEntityFieldDefinition;
import com.finbourne.lusid.model.Version;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.net.URI;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * Representation of Custom Entity Definition on LUSID API
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class CustomEntityDefinition {
  public static final String SERIALIZED_NAME_HREF = "href";
  @SerializedName(SERIALIZED_NAME_HREF)
  private URI href;

  public static final String SERIALIZED_NAME_ENTITY_TYPE_NAME = "entityTypeName";
  @SerializedName(SERIALIZED_NAME_ENTITY_TYPE_NAME)
  private String entityTypeName;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ENTITY_TYPE = "entityType";
  @SerializedName(SERIALIZED_NAME_ENTITY_TYPE)
  private String entityType;

  public static final String SERIALIZED_NAME_FIELD_SCHEMA = "fieldSchema";
  @SerializedName(SERIALIZED_NAME_FIELD_SCHEMA)
  private List<CustomEntityFieldDefinition> fieldSchema = new ArrayList<>();

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private Version version;

  public CustomEntityDefinition() {
  }

  public CustomEntityDefinition href(URI href) {
    
    this.href = href;
    return this;
  }

   /**
   * The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.
   * @return href
  **/
  @jakarta.annotation.Nullable
  public URI getHref() {
    return href;
  }


  public void setHref(URI href) {
    this.href = href;
  }


  public CustomEntityDefinition entityTypeName(String entityTypeName) {
    
    this.entityTypeName = entityTypeName;
    return this;
  }

   /**
   * The name provided when the custom entity type was created. This has been prefixed with “~” and returned as “entityType”, which is the identifier for the custom entity type.
   * @return entityTypeName
  **/
  @jakarta.annotation.Nonnull
  public String getEntityTypeName() {
    return entityTypeName;
  }


  public void setEntityTypeName(String entityTypeName) {
    this.entityTypeName = entityTypeName;
  }


  public CustomEntityDefinition displayName(String displayName) {
    
    this.displayName = displayName;
    return this;
  }

   /**
   * A display label for the custom entity type.
   * @return displayName
  **/
  @jakarta.annotation.Nonnull
  public String getDisplayName() {
    return displayName;
  }


  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public CustomEntityDefinition description(String description) {
    
    this.description = description;
    return this;
  }

   /**
   * A description for the custom entity type.
   * @return description
  **/
  @jakarta.annotation.Nullable
  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    this.description = description;
  }


  public CustomEntityDefinition entityType(String entityType) {
    
    this.entityType = entityType;
    return this;
  }

   /**
   * The identifier for the custom entity type, derived from the “entityTypeName” provided on creation.
   * @return entityType
  **/
  @jakarta.annotation.Nonnull
  public String getEntityType() {
    return entityType;
  }


  public void setEntityType(String entityType) {
    this.entityType = entityType;
  }


  public CustomEntityDefinition fieldSchema(List<CustomEntityFieldDefinition> fieldSchema) {
    
    this.fieldSchema = fieldSchema;
    return this;
  }

  public CustomEntityDefinition addFieldSchemaItem(CustomEntityFieldDefinition fieldSchemaItem) {
    if (this.fieldSchema == null) {
      this.fieldSchema = new ArrayList<>();
    }
    this.fieldSchema.add(fieldSchemaItem);
    return this;
  }

   /**
   * The description of the fields on the custom entity type.
   * @return fieldSchema
  **/
  @jakarta.annotation.Nonnull
  public List<CustomEntityFieldDefinition> getFieldSchema() {
    return fieldSchema;
  }


  public void setFieldSchema(List<CustomEntityFieldDefinition> fieldSchema) {
    this.fieldSchema = fieldSchema;
  }


  public CustomEntityDefinition version(Version version) {
    
    this.version = version;
    return this;
  }

   /**
   * Get version
   * @return version
  **/
  @jakarta.annotation.Nonnull
  public Version getVersion() {
    return version;
  }


  public void setVersion(Version version) {
    this.version = version;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CustomEntityDefinition customEntityDefinition = (CustomEntityDefinition) o;
    return Objects.equals(this.href, customEntityDefinition.href) &&
        Objects.equals(this.entityTypeName, customEntityDefinition.entityTypeName) &&
        Objects.equals(this.displayName, customEntityDefinition.displayName) &&
        Objects.equals(this.description, customEntityDefinition.description) &&
        Objects.equals(this.entityType, customEntityDefinition.entityType) &&
        Objects.equals(this.fieldSchema, customEntityDefinition.fieldSchema) &&
        Objects.equals(this.version, customEntityDefinition.version);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(href, entityTypeName, displayName, description, entityType, fieldSchema, version);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CustomEntityDefinition {\n");
    sb.append("    href: ").append(toIndentedString(href)).append("\n");
    sb.append("    entityTypeName: ").append(toIndentedString(entityTypeName)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    entityType: ").append(toIndentedString(entityType)).append("\n");
    sb.append("    fieldSchema: ").append(toIndentedString(fieldSchema)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("href");
    openapiFields.add("entityTypeName");
    openapiFields.add("displayName");
    openapiFields.add("description");
    openapiFields.add("entityType");
    openapiFields.add("fieldSchema");
    openapiFields.add("version");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("entityTypeName");
    openapiRequiredFields.add("displayName");
    openapiRequiredFields.add("entityType");
    openapiRequiredFields.add("fieldSchema");
    openapiRequiredFields.add("version");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to CustomEntityDefinition
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CustomEntityDefinition.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CustomEntityDefinition is not found in the empty JSON string", CustomEntityDefinition.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CustomEntityDefinition.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("href") != null && !jsonObj.get("href").isJsonNull()) && !jsonObj.get("href").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `href` to be a primitive type in the JSON string but got `%s`", jsonObj.get("href").toString()));
      }
      if (!jsonObj.get("entityTypeName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `entityTypeName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("entityTypeName").toString()));
      }
      if (!jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (!jsonObj.get("entityType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `entityType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("entityType").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("fieldSchema").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `fieldSchema` to be an array in the JSON string but got `%s`", jsonObj.get("fieldSchema").toString()));
      }

      JsonArray jsonArrayfieldSchema = jsonObj.getAsJsonArray("fieldSchema");
      // validate the required field `fieldSchema` (array)
      for (int i = 0; i < jsonArrayfieldSchema.size(); i++) {
        CustomEntityFieldDefinition.validateJsonElement(jsonArrayfieldSchema.get(i));
      };
      // validate the required field `version`
      Version.validateJsonElement(jsonObj.get("version"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CustomEntityDefinition.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CustomEntityDefinition' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CustomEntityDefinition> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CustomEntityDefinition.class));

       return (TypeAdapter<T>) new TypeAdapter<CustomEntityDefinition>() {
           @Override
           public void write(JsonWriter out, CustomEntityDefinition value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CustomEntityDefinition read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CustomEntityDefinition given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CustomEntityDefinition
  * @throws IOException if the JSON string is invalid with respect to CustomEntityDefinition
  */
  public static CustomEntityDefinition fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CustomEntityDefinition.class);
  }

 /**
  * Convert an instance of CustomEntityDefinition to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
