/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import com.finbourne.lusid.model.ResourceId;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * The request used in the GetCompositeBreakdown.
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class CompositeBreakdownRequest {
  public static final String SERIALIZED_NAME_RETURN_IDS = "returnIds";
  @SerializedName(SERIALIZED_NAME_RETURN_IDS)
  private List<ResourceId> returnIds;

  public static final String SERIALIZED_NAME_RECIPE_ID = "recipeId";
  @SerializedName(SERIALIZED_NAME_RECIPE_ID)
  private ResourceId recipeId;

  public static final String SERIALIZED_NAME_COMPOSITE_METHOD = "compositeMethod";
  @SerializedName(SERIALIZED_NAME_COMPOSITE_METHOD)
  private String compositeMethod;

  public static final String SERIALIZED_NAME_PERIOD = "period";
  @SerializedName(SERIALIZED_NAME_PERIOD)
  private String period;

  public static final String SERIALIZED_NAME_HOLIDAY_CALENDARS = "holidayCalendars";
  @SerializedName(SERIALIZED_NAME_HOLIDAY_CALENDARS)
  private List<String> holidayCalendars;

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private String currency;

  public CompositeBreakdownRequest() {
  }

  public CompositeBreakdownRequest returnIds(List<ResourceId> returnIds) {
    
    this.returnIds = returnIds;
    return this;
  }

  public CompositeBreakdownRequest addReturnIdsItem(ResourceId returnIdsItem) {
    if (this.returnIds == null) {
      this.returnIds = new ArrayList<>();
    }
    this.returnIds.add(returnIdsItem);
    return this;
  }

   /**
   * The Scope and code of the returns.
   * @return returnIds
  **/
  @jakarta.annotation.Nullable
  public List<ResourceId> getReturnIds() {
    return returnIds;
  }


  public void setReturnIds(List<ResourceId> returnIds) {
    this.returnIds = returnIds;
  }


  public CompositeBreakdownRequest recipeId(ResourceId recipeId) {
    
    this.recipeId = recipeId;
    return this;
  }

   /**
   * Get recipeId
   * @return recipeId
  **/
  @jakarta.annotation.Nullable
  public ResourceId getRecipeId() {
    return recipeId;
  }


  public void setRecipeId(ResourceId recipeId) {
    this.recipeId = recipeId;
  }


  public CompositeBreakdownRequest compositeMethod(String compositeMethod) {
    
    this.compositeMethod = compositeMethod;
    return this;
  }

   /**
   * The method used to calculate the Portfolio performance: Equal/Asset.
   * @return compositeMethod
  **/
  @jakarta.annotation.Nullable
  public String getCompositeMethod() {
    return compositeMethod;
  }


  public void setCompositeMethod(String compositeMethod) {
    this.compositeMethod = compositeMethod;
  }


  public CompositeBreakdownRequest period(String period) {
    
    this.period = period;
    return this;
  }

   /**
   * The type of the returns used to calculate the aggregation result: Daily/Monthly.
   * @return period
  **/
  @jakarta.annotation.Nullable
  public String getPeriod() {
    return period;
  }


  public void setPeriod(String period) {
    this.period = period;
  }


  public CompositeBreakdownRequest holidayCalendars(List<String> holidayCalendars) {
    
    this.holidayCalendars = holidayCalendars;
    return this;
  }

  public CompositeBreakdownRequest addHolidayCalendarsItem(String holidayCalendarsItem) {
    if (this.holidayCalendars == null) {
      this.holidayCalendars = new ArrayList<>();
    }
    this.holidayCalendars.add(holidayCalendarsItem);
    return this;
  }

   /**
   * The holiday calendar(s) that should be used in determining the date schedule. Holiday calendar(s) are supplied by their codes, for example, &#39;CoppClark&#39;. Note that when the calendars are not available (e.g. when the user has insufficient permissions), a recipe setting will be used to determine whether the whole batch should then fail or whether the calendar not being available should simply be ignored.
   * @return holidayCalendars
  **/
  @jakarta.annotation.Nullable
  public List<String> getHolidayCalendars() {
    return holidayCalendars;
  }


  public void setHolidayCalendars(List<String> holidayCalendars) {
    this.holidayCalendars = holidayCalendars;
  }


  public CompositeBreakdownRequest currency(String currency) {
    
    this.currency = currency;
    return this;
  }

   /**
   * Optional - either a string or a property. If provided, the results will be converted to the specified currency
   * @return currency
  **/
  @jakarta.annotation.Nullable
  public String getCurrency() {
    return currency;
  }


  public void setCurrency(String currency) {
    this.currency = currency;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CompositeBreakdownRequest compositeBreakdownRequest = (CompositeBreakdownRequest) o;
    return Objects.equals(this.returnIds, compositeBreakdownRequest.returnIds) &&
        Objects.equals(this.recipeId, compositeBreakdownRequest.recipeId) &&
        Objects.equals(this.compositeMethod, compositeBreakdownRequest.compositeMethod) &&
        Objects.equals(this.period, compositeBreakdownRequest.period) &&
        Objects.equals(this.holidayCalendars, compositeBreakdownRequest.holidayCalendars) &&
        Objects.equals(this.currency, compositeBreakdownRequest.currency);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(returnIds, recipeId, compositeMethod, period, holidayCalendars, currency);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CompositeBreakdownRequest {\n");
    sb.append("    returnIds: ").append(toIndentedString(returnIds)).append("\n");
    sb.append("    recipeId: ").append(toIndentedString(recipeId)).append("\n");
    sb.append("    compositeMethod: ").append(toIndentedString(compositeMethod)).append("\n");
    sb.append("    period: ").append(toIndentedString(period)).append("\n");
    sb.append("    holidayCalendars: ").append(toIndentedString(holidayCalendars)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("returnIds");
    openapiFields.add("recipeId");
    openapiFields.add("compositeMethod");
    openapiFields.add("period");
    openapiFields.add("holidayCalendars");
    openapiFields.add("currency");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to CompositeBreakdownRequest
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CompositeBreakdownRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CompositeBreakdownRequest is not found in the empty JSON string", CompositeBreakdownRequest.openapiRequiredFields.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("returnIds") != null && !jsonObj.get("returnIds").isJsonNull()) {
        JsonArray jsonArrayreturnIds = jsonObj.getAsJsonArray("returnIds");
        if (jsonArrayreturnIds != null) {
          // ensure the json data is an array
          if (!jsonObj.get("returnIds").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `returnIds` to be an array in the JSON string but got `%s`", jsonObj.get("returnIds").toString()));
          }

          // validate the optional field `returnIds` (array)
          for (int i = 0; i < jsonArrayreturnIds.size(); i++) {
            ResourceId.validateJsonElement(jsonArrayreturnIds.get(i));
          };
        }
      }
      // validate the optional field `recipeId`
      if (jsonObj.get("recipeId") != null && !jsonObj.get("recipeId").isJsonNull()) {
        ResourceId.validateJsonElement(jsonObj.get("recipeId"));
      }
      if ((jsonObj.get("compositeMethod") != null && !jsonObj.get("compositeMethod").isJsonNull()) && !jsonObj.get("compositeMethod").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `compositeMethod` to be a primitive type in the JSON string but got `%s`", jsonObj.get("compositeMethod").toString()));
      }
      if ((jsonObj.get("period") != null && !jsonObj.get("period").isJsonNull()) && !jsonObj.get("period").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `period` to be a primitive type in the JSON string but got `%s`", jsonObj.get("period").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("holidayCalendars") != null && !jsonObj.get("holidayCalendars").isJsonNull() && !jsonObj.get("holidayCalendars").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `holidayCalendars` to be an array in the JSON string but got `%s`", jsonObj.get("holidayCalendars").toString()));
      }
      if ((jsonObj.get("currency") != null && !jsonObj.get("currency").isJsonNull()) && !jsonObj.get("currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CompositeBreakdownRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CompositeBreakdownRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CompositeBreakdownRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CompositeBreakdownRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CompositeBreakdownRequest>() {
           @Override
           public void write(JsonWriter out, CompositeBreakdownRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CompositeBreakdownRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CompositeBreakdownRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CompositeBreakdownRequest
  * @throws IOException if the JSON string is invalid with respect to CompositeBreakdownRequest
  */
  public static CompositeBreakdownRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CompositeBreakdownRequest.class);
  }

 /**
  * Convert an instance of CompositeBreakdownRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
