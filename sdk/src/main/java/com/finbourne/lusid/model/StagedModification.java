/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import com.finbourne.lusid.model.Link;
import com.finbourne.lusid.model.RequestedChanges;
import com.finbourne.lusid.model.StagedModificationDecision;
import com.finbourne.lusid.model.StagedModificationStagingRule;
import com.finbourne.lusid.model.StagedModificationsEntityHrefs;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * StagedModification
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class StagedModification {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_AS_AT_STAGED = "asAtStaged";
  @SerializedName(SERIALIZED_NAME_AS_AT_STAGED)
  private OffsetDateTime asAtStaged;

  public static final String SERIALIZED_NAME_USER_ID_STAGED = "userIdStaged";
  @SerializedName(SERIALIZED_NAME_USER_ID_STAGED)
  private String userIdStaged;

  public static final String SERIALIZED_NAME_REQUESTED_ID_STAGED = "requestedIdStaged";
  @SerializedName(SERIALIZED_NAME_REQUESTED_ID_STAGED)
  private String requestedIdStaged;

  public static final String SERIALIZED_NAME_REQUEST_REASON = "requestReason";
  @SerializedName(SERIALIZED_NAME_REQUEST_REASON)
  private String requestReason;

  public static final String SERIALIZED_NAME_ACTION = "action";
  @SerializedName(SERIALIZED_NAME_ACTION)
  private String action;

  public static final String SERIALIZED_NAME_STAGING_RULE = "stagingRule";
  @SerializedName(SERIALIZED_NAME_STAGING_RULE)
  private StagedModificationStagingRule stagingRule;

  public static final String SERIALIZED_NAME_DECISIONS = "decisions";
  @SerializedName(SERIALIZED_NAME_DECISIONS)
  private List<StagedModificationDecision> decisions;

  public static final String SERIALIZED_NAME_DECISIONS_COUNT = "decisionsCount";
  @SerializedName(SERIALIZED_NAME_DECISIONS_COUNT)
  private Integer decisionsCount;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_AS_AT_CLOSED = "asAtClosed";
  @SerializedName(SERIALIZED_NAME_AS_AT_CLOSED)
  private OffsetDateTime asAtClosed;

  public static final String SERIALIZED_NAME_ENTITY_TYPE = "entityType";
  @SerializedName(SERIALIZED_NAME_ENTITY_TYPE)
  private String entityType;

  public static final String SERIALIZED_NAME_SCOPE = "scope";
  @SerializedName(SERIALIZED_NAME_SCOPE)
  private String scope;

  public static final String SERIALIZED_NAME_ENTITY_UNIQUE_ID = "entityUniqueId";
  @SerializedName(SERIALIZED_NAME_ENTITY_UNIQUE_ID)
  private String entityUniqueId;

  public static final String SERIALIZED_NAME_REQUESTED_CHANGES = "requestedChanges";
  @SerializedName(SERIALIZED_NAME_REQUESTED_CHANGES)
  private RequestedChanges requestedChanges;

  public static final String SERIALIZED_NAME_ENTITY_HREFS = "entityHrefs";
  @SerializedName(SERIALIZED_NAME_ENTITY_HREFS)
  private StagedModificationsEntityHrefs entityHrefs;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_LINKS = "links";
  @SerializedName(SERIALIZED_NAME_LINKS)
  private List<Link> links;

  public StagedModification() {
  }

  public StagedModification id(String id) {
    
    this.id = id;
    return this;
  }

   /**
   * The unique Id for the staged modification
   * @return id
  **/
  @jakarta.annotation.Nullable
  public String getId() {
    return id;
  }


  public void setId(String id) {
    this.id = id;
  }


  public StagedModification asAtStaged(OffsetDateTime asAtStaged) {
    
    this.asAtStaged = asAtStaged;
    return this;
  }

   /**
   * Time at which the modification was staged.
   * @return asAtStaged
  **/
  @jakarta.annotation.Nullable
  public OffsetDateTime getAsAtStaged() {
    return asAtStaged;
  }


  public void setAsAtStaged(OffsetDateTime asAtStaged) {
    this.asAtStaged = asAtStaged;
  }


  public StagedModification userIdStaged(String userIdStaged) {
    
    this.userIdStaged = userIdStaged;
    return this;
  }

   /**
   * Id of the user who created the stage modification request.
   * @return userIdStaged
  **/
  @jakarta.annotation.Nullable
  public String getUserIdStaged() {
    return userIdStaged;
  }


  public void setUserIdStaged(String userIdStaged) {
    this.userIdStaged = userIdStaged;
  }


  public StagedModification requestedIdStaged(String requestedIdStaged) {
    
    this.requestedIdStaged = requestedIdStaged;
    return this;
  }

   /**
   * The Request Id that initiated this staged modification.
   * @return requestedIdStaged
  **/
  @jakarta.annotation.Nullable
  public String getRequestedIdStaged() {
    return requestedIdStaged;
  }


  public void setRequestedIdStaged(String requestedIdStaged) {
    this.requestedIdStaged = requestedIdStaged;
  }


  public StagedModification requestReason(String requestReason) {
    
    this.requestReason = requestReason;
    return this;
  }

   /**
   * The Request Reason from the context that initiated this staged modification.
   * @return requestReason
  **/
  @jakarta.annotation.Nullable
  public String getRequestReason() {
    return requestReason;
  }


  public void setRequestReason(String requestReason) {
    this.requestReason = requestReason;
  }


  public StagedModification action(String action) {
    
    this.action = action;
    return this;
  }

   /**
   * Type of action of the staged modification, either create, update or delete.
   * @return action
  **/
  @jakarta.annotation.Nullable
  public String getAction() {
    return action;
  }


  public void setAction(String action) {
    this.action = action;
  }


  public StagedModification stagingRule(StagedModificationStagingRule stagingRule) {
    
    this.stagingRule = stagingRule;
    return this;
  }

   /**
   * Get stagingRule
   * @return stagingRule
  **/
  @jakarta.annotation.Nullable
  public StagedModificationStagingRule getStagingRule() {
    return stagingRule;
  }


  public void setStagingRule(StagedModificationStagingRule stagingRule) {
    this.stagingRule = stagingRule;
  }


  public StagedModification decisions(List<StagedModificationDecision> decisions) {
    
    this.decisions = decisions;
    return this;
  }

  public StagedModification addDecisionsItem(StagedModificationDecision decisionsItem) {
    if (this.decisions == null) {
      this.decisions = new ArrayList<>();
    }
    this.decisions.add(decisionsItem);
    return this;
  }

   /**
   * Object containing information relating to the decision on the staged modification.
   * @return decisions
  **/
  @jakarta.annotation.Nullable
  public List<StagedModificationDecision> getDecisions() {
    return decisions;
  }


  public void setDecisions(List<StagedModificationDecision> decisions) {
    this.decisions = decisions;
  }


  public StagedModification decisionsCount(Integer decisionsCount) {
    
    this.decisionsCount = decisionsCount;
    return this;
  }

   /**
   * Number of decisions made.
   * @return decisionsCount
  **/
  @jakarta.annotation.Nullable
  public Integer getDecisionsCount() {
    return decisionsCount;
  }


  public void setDecisionsCount(Integer decisionsCount) {
    this.decisionsCount = decisionsCount;
  }


  public StagedModification status(String status) {
    
    this.status = status;
    return this;
  }

   /**
   * The status of the staged modification.
   * @return status
  **/
  @jakarta.annotation.Nullable
  public String getStatus() {
    return status;
  }


  public void setStatus(String status) {
    this.status = status;
  }


  public StagedModification asAtClosed(OffsetDateTime asAtClosed) {
    
    this.asAtClosed = asAtClosed;
    return this;
  }

   /**
   * Time at which the modification was closed by either rejection or approval.
   * @return asAtClosed
  **/
  @jakarta.annotation.Nullable
  public OffsetDateTime getAsAtClosed() {
    return asAtClosed;
  }


  public void setAsAtClosed(OffsetDateTime asAtClosed) {
    this.asAtClosed = asAtClosed;
  }


  public StagedModification entityType(String entityType) {
    
    this.entityType = entityType;
    return this;
  }

   /**
   * The type of the entity that the staged modification applies to.
   * @return entityType
  **/
  @jakarta.annotation.Nullable
  public String getEntityType() {
    return entityType;
  }


  public void setEntityType(String entityType) {
    this.entityType = entityType;
  }


  public StagedModification scope(String scope) {
    
    this.scope = scope;
    return this;
  }

   /**
   * The scope of the entity that this staged modification applies to.
   * @return scope
  **/
  @jakarta.annotation.Nullable
  public String getScope() {
    return scope;
  }


  public void setScope(String scope) {
    this.scope = scope;
  }


  public StagedModification entityUniqueId(String entityUniqueId) {
    
    this.entityUniqueId = entityUniqueId;
    return this;
  }

   /**
   * The unique Id of the entity the staged modification applies to.
   * @return entityUniqueId
  **/
  @jakarta.annotation.Nullable
  public String getEntityUniqueId() {
    return entityUniqueId;
  }


  public void setEntityUniqueId(String entityUniqueId) {
    this.entityUniqueId = entityUniqueId;
  }


  public StagedModification requestedChanges(RequestedChanges requestedChanges) {
    
    this.requestedChanges = requestedChanges;
    return this;
  }

   /**
   * Get requestedChanges
   * @return requestedChanges
  **/
  @jakarta.annotation.Nullable
  public RequestedChanges getRequestedChanges() {
    return requestedChanges;
  }


  public void setRequestedChanges(RequestedChanges requestedChanges) {
    this.requestedChanges = requestedChanges;
  }


  public StagedModification entityHrefs(StagedModificationsEntityHrefs entityHrefs) {
    
    this.entityHrefs = entityHrefs;
    return this;
  }

   /**
   * Get entityHrefs
   * @return entityHrefs
  **/
  @jakarta.annotation.Nullable
  public StagedModificationsEntityHrefs getEntityHrefs() {
    return entityHrefs;
  }


  public void setEntityHrefs(StagedModificationsEntityHrefs entityHrefs) {
    this.entityHrefs = entityHrefs;
  }


  public StagedModification displayName(String displayName) {
    
    this.displayName = displayName;
    return this;
  }

   /**
   * The display name of the entity the staged modification applies to.
   * @return displayName
  **/
  @jakarta.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }


  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public StagedModification links(List<Link> links) {
    
    this.links = links;
    return this;
  }

  public StagedModification addLinksItem(Link linksItem) {
    if (this.links == null) {
      this.links = new ArrayList<>();
    }
    this.links.add(linksItem);
    return this;
  }

   /**
   * Get links
   * @return links
  **/
  @jakarta.annotation.Nullable
  public List<Link> getLinks() {
    return links;
  }


  public void setLinks(List<Link> links) {
    this.links = links;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StagedModification stagedModification = (StagedModification) o;
    return Objects.equals(this.id, stagedModification.id) &&
        Objects.equals(this.asAtStaged, stagedModification.asAtStaged) &&
        Objects.equals(this.userIdStaged, stagedModification.userIdStaged) &&
        Objects.equals(this.requestedIdStaged, stagedModification.requestedIdStaged) &&
        Objects.equals(this.requestReason, stagedModification.requestReason) &&
        Objects.equals(this.action, stagedModification.action) &&
        Objects.equals(this.stagingRule, stagedModification.stagingRule) &&
        Objects.equals(this.decisions, stagedModification.decisions) &&
        Objects.equals(this.decisionsCount, stagedModification.decisionsCount) &&
        Objects.equals(this.status, stagedModification.status) &&
        Objects.equals(this.asAtClosed, stagedModification.asAtClosed) &&
        Objects.equals(this.entityType, stagedModification.entityType) &&
        Objects.equals(this.scope, stagedModification.scope) &&
        Objects.equals(this.entityUniqueId, stagedModification.entityUniqueId) &&
        Objects.equals(this.requestedChanges, stagedModification.requestedChanges) &&
        Objects.equals(this.entityHrefs, stagedModification.entityHrefs) &&
        Objects.equals(this.displayName, stagedModification.displayName) &&
        Objects.equals(this.links, stagedModification.links);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, asAtStaged, userIdStaged, requestedIdStaged, requestReason, action, stagingRule, decisions, decisionsCount, status, asAtClosed, entityType, scope, entityUniqueId, requestedChanges, entityHrefs, displayName, links);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StagedModification {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    asAtStaged: ").append(toIndentedString(asAtStaged)).append("\n");
    sb.append("    userIdStaged: ").append(toIndentedString(userIdStaged)).append("\n");
    sb.append("    requestedIdStaged: ").append(toIndentedString(requestedIdStaged)).append("\n");
    sb.append("    requestReason: ").append(toIndentedString(requestReason)).append("\n");
    sb.append("    action: ").append(toIndentedString(action)).append("\n");
    sb.append("    stagingRule: ").append(toIndentedString(stagingRule)).append("\n");
    sb.append("    decisions: ").append(toIndentedString(decisions)).append("\n");
    sb.append("    decisionsCount: ").append(toIndentedString(decisionsCount)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    asAtClosed: ").append(toIndentedString(asAtClosed)).append("\n");
    sb.append("    entityType: ").append(toIndentedString(entityType)).append("\n");
    sb.append("    scope: ").append(toIndentedString(scope)).append("\n");
    sb.append("    entityUniqueId: ").append(toIndentedString(entityUniqueId)).append("\n");
    sb.append("    requestedChanges: ").append(toIndentedString(requestedChanges)).append("\n");
    sb.append("    entityHrefs: ").append(toIndentedString(entityHrefs)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("asAtStaged");
    openapiFields.add("userIdStaged");
    openapiFields.add("requestedIdStaged");
    openapiFields.add("requestReason");
    openapiFields.add("action");
    openapiFields.add("stagingRule");
    openapiFields.add("decisions");
    openapiFields.add("decisionsCount");
    openapiFields.add("status");
    openapiFields.add("asAtClosed");
    openapiFields.add("entityType");
    openapiFields.add("scope");
    openapiFields.add("entityUniqueId");
    openapiFields.add("requestedChanges");
    openapiFields.add("entityHrefs");
    openapiFields.add("displayName");
    openapiFields.add("links");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to StagedModification
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StagedModification.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StagedModification is not found in the empty JSON string", StagedModification.openapiRequiredFields.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("userIdStaged") != null && !jsonObj.get("userIdStaged").isJsonNull()) && !jsonObj.get("userIdStaged").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userIdStaged` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userIdStaged").toString()));
      }
      if ((jsonObj.get("requestedIdStaged") != null && !jsonObj.get("requestedIdStaged").isJsonNull()) && !jsonObj.get("requestedIdStaged").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `requestedIdStaged` to be a primitive type in the JSON string but got `%s`", jsonObj.get("requestedIdStaged").toString()));
      }
      if ((jsonObj.get("requestReason") != null && !jsonObj.get("requestReason").isJsonNull()) && !jsonObj.get("requestReason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `requestReason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("requestReason").toString()));
      }
      if ((jsonObj.get("action") != null && !jsonObj.get("action").isJsonNull()) && !jsonObj.get("action").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `action` to be a primitive type in the JSON string but got `%s`", jsonObj.get("action").toString()));
      }
      // validate the optional field `stagingRule`
      if (jsonObj.get("stagingRule") != null && !jsonObj.get("stagingRule").isJsonNull()) {
        StagedModificationStagingRule.validateJsonElement(jsonObj.get("stagingRule"));
      }
      if (jsonObj.get("decisions") != null && !jsonObj.get("decisions").isJsonNull()) {
        JsonArray jsonArraydecisions = jsonObj.getAsJsonArray("decisions");
        if (jsonArraydecisions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("decisions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `decisions` to be an array in the JSON string but got `%s`", jsonObj.get("decisions").toString()));
          }

          // validate the optional field `decisions` (array)
          for (int i = 0; i < jsonArraydecisions.size(); i++) {
            StagedModificationDecision.validateJsonElement(jsonArraydecisions.get(i));
          };
        }
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if ((jsonObj.get("entityType") != null && !jsonObj.get("entityType").isJsonNull()) && !jsonObj.get("entityType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `entityType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("entityType").toString()));
      }
      if ((jsonObj.get("scope") != null && !jsonObj.get("scope").isJsonNull()) && !jsonObj.get("scope").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `scope` to be a primitive type in the JSON string but got `%s`", jsonObj.get("scope").toString()));
      }
      if ((jsonObj.get("entityUniqueId") != null && !jsonObj.get("entityUniqueId").isJsonNull()) && !jsonObj.get("entityUniqueId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `entityUniqueId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("entityUniqueId").toString()));
      }
      // validate the optional field `requestedChanges`
      if (jsonObj.get("requestedChanges") != null && !jsonObj.get("requestedChanges").isJsonNull()) {
        RequestedChanges.validateJsonElement(jsonObj.get("requestedChanges"));
      }
      // validate the optional field `entityHrefs`
      if (jsonObj.get("entityHrefs") != null && !jsonObj.get("entityHrefs").isJsonNull()) {
        StagedModificationsEntityHrefs.validateJsonElement(jsonObj.get("entityHrefs"));
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if (jsonObj.get("links") != null && !jsonObj.get("links").isJsonNull()) {
        JsonArray jsonArraylinks = jsonObj.getAsJsonArray("links");
        if (jsonArraylinks != null) {
          // ensure the json data is an array
          if (!jsonObj.get("links").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `links` to be an array in the JSON string but got `%s`", jsonObj.get("links").toString()));
          }

          // validate the optional field `links` (array)
          for (int i = 0; i < jsonArraylinks.size(); i++) {
            Link.validateJsonElement(jsonArraylinks.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StagedModification.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StagedModification' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StagedModification> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StagedModification.class));

       return (TypeAdapter<T>) new TypeAdapter<StagedModification>() {
           @Override
           public void write(JsonWriter out, StagedModification value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StagedModification read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of StagedModification given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of StagedModification
  * @throws IOException if the JSON string is invalid with respect to StagedModification
  */
  public static StagedModification fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StagedModification.class);
  }

 /**
  * Convert an instance of StagedModification to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
