/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * The set of options that control miscellaneous and default market resolution behaviour.  These are aimed at a &#39;crude&#39; level of control for those who do not wish to fine tune the way that data is resolved.  For clients who wish to simply match instruments to prices this is quite possibly sufficient. For those wishing to control market data sources  according to requirements based on accuracy or timeliness it is not. In more advanced cases the options should largely be ignored and rules specified  per source. Be aware that where no specified rule matches the final fallback is on to the logic implied here.
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class MarketOptions {
  public static final String SERIALIZED_NAME_DEFAULT_SUPPLIER = "defaultSupplier";
  @SerializedName(SERIALIZED_NAME_DEFAULT_SUPPLIER)
  private String defaultSupplier;

  public static final String SERIALIZED_NAME_DEFAULT_INSTRUMENT_CODE_TYPE = "defaultInstrumentCodeType";
  @SerializedName(SERIALIZED_NAME_DEFAULT_INSTRUMENT_CODE_TYPE)
  private String defaultInstrumentCodeType;

  public static final String SERIALIZED_NAME_DEFAULT_SCOPE = "defaultScope";
  @SerializedName(SERIALIZED_NAME_DEFAULT_SCOPE)
  private String defaultScope;

  public static final String SERIALIZED_NAME_ATTEMPT_TO_INFER_MISSING_FX = "attemptToInferMissingFx";
  @SerializedName(SERIALIZED_NAME_ATTEMPT_TO_INFER_MISSING_FX)
  private Boolean attemptToInferMissingFx;

  public static final String SERIALIZED_NAME_CALENDAR_SCOPE = "calendarScope";
  @SerializedName(SERIALIZED_NAME_CALENDAR_SCOPE)
  private String calendarScope;

  public static final String SERIALIZED_NAME_CONVENTION_SCOPE = "conventionScope";
  @SerializedName(SERIALIZED_NAME_CONVENTION_SCOPE)
  private String conventionScope;

  public MarketOptions() {
  }

  public MarketOptions defaultSupplier(String defaultSupplier) {
    
    this.defaultSupplier = defaultSupplier;
    return this;
  }

   /**
   * The default supplier of data. This controls which &#39;dialect&#39; is used to find particular market data. e.g. one supplier might address data by RIC, another by PermId
   * @return defaultSupplier
  **/
  @jakarta.annotation.Nullable
  public String getDefaultSupplier() {
    return defaultSupplier;
  }


  public void setDefaultSupplier(String defaultSupplier) {
    this.defaultSupplier = defaultSupplier;
  }


  public MarketOptions defaultInstrumentCodeType(String defaultInstrumentCodeType) {
    
    this.defaultInstrumentCodeType = defaultInstrumentCodeType;
    return this;
  }

   /**
   * When instrument quotes are searched for, what identifier should be used by default
   * @return defaultInstrumentCodeType
  **/
  @jakarta.annotation.Nullable
  public String getDefaultInstrumentCodeType() {
    return defaultInstrumentCodeType;
  }


  public void setDefaultInstrumentCodeType(String defaultInstrumentCodeType) {
    this.defaultInstrumentCodeType = defaultInstrumentCodeType;
  }


  public MarketOptions defaultScope(String defaultScope) {
    
    this.defaultScope = defaultScope;
    return this;
  }

   /**
   * For default rules, which scope should data be searched for in
   * @return defaultScope
  **/
  @jakarta.annotation.Nonnull
  public String getDefaultScope() {
    return defaultScope;
  }


  public void setDefaultScope(String defaultScope) {
    this.defaultScope = defaultScope;
  }


  public MarketOptions attemptToInferMissingFx(Boolean attemptToInferMissingFx) {
    
    this.attemptToInferMissingFx = attemptToInferMissingFx;
    return this;
  }

   /**
   * if true will calculate a missing Fx pair (e.g. THBJPY) from the inverse JPYTHB or from standardised pairs against USD, e.g. THBUSD and JPYUSD
   * @return attemptToInferMissingFx
  **/
  @jakarta.annotation.Nullable
  public Boolean getAttemptToInferMissingFx() {
    return attemptToInferMissingFx;
  }


  public void setAttemptToInferMissingFx(Boolean attemptToInferMissingFx) {
    this.attemptToInferMissingFx = attemptToInferMissingFx;
  }


  public MarketOptions calendarScope(String calendarScope) {
    
    this.calendarScope = calendarScope;
    return this;
  }

   /**
   * The scope in which holiday calendars stored
   * @return calendarScope
  **/
  @jakarta.annotation.Nullable
  public String getCalendarScope() {
    return calendarScope;
  }


  public void setCalendarScope(String calendarScope) {
    this.calendarScope = calendarScope;
  }


  public MarketOptions conventionScope(String conventionScope) {
    
    this.conventionScope = conventionScope;
    return this;
  }

   /**
   * The scope in which conventions stored
   * @return conventionScope
  **/
  @jakarta.annotation.Nullable
  public String getConventionScope() {
    return conventionScope;
  }


  public void setConventionScope(String conventionScope) {
    this.conventionScope = conventionScope;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MarketOptions marketOptions = (MarketOptions) o;
    return Objects.equals(this.defaultSupplier, marketOptions.defaultSupplier) &&
        Objects.equals(this.defaultInstrumentCodeType, marketOptions.defaultInstrumentCodeType) &&
        Objects.equals(this.defaultScope, marketOptions.defaultScope) &&
        Objects.equals(this.attemptToInferMissingFx, marketOptions.attemptToInferMissingFx) &&
        Objects.equals(this.calendarScope, marketOptions.calendarScope) &&
        Objects.equals(this.conventionScope, marketOptions.conventionScope);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(defaultSupplier, defaultInstrumentCodeType, defaultScope, attemptToInferMissingFx, calendarScope, conventionScope);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MarketOptions {\n");
    sb.append("    defaultSupplier: ").append(toIndentedString(defaultSupplier)).append("\n");
    sb.append("    defaultInstrumentCodeType: ").append(toIndentedString(defaultInstrumentCodeType)).append("\n");
    sb.append("    defaultScope: ").append(toIndentedString(defaultScope)).append("\n");
    sb.append("    attemptToInferMissingFx: ").append(toIndentedString(attemptToInferMissingFx)).append("\n");
    sb.append("    calendarScope: ").append(toIndentedString(calendarScope)).append("\n");
    sb.append("    conventionScope: ").append(toIndentedString(conventionScope)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("defaultSupplier");
    openapiFields.add("defaultInstrumentCodeType");
    openapiFields.add("defaultScope");
    openapiFields.add("attemptToInferMissingFx");
    openapiFields.add("calendarScope");
    openapiFields.add("conventionScope");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("defaultScope");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to MarketOptions
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!MarketOptions.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MarketOptions is not found in the empty JSON string", MarketOptions.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!MarketOptions.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MarketOptions` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : MarketOptions.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("defaultSupplier") != null && !jsonObj.get("defaultSupplier").isJsonNull()) && !jsonObj.get("defaultSupplier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `defaultSupplier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("defaultSupplier").toString()));
      }
      if ((jsonObj.get("defaultInstrumentCodeType") != null && !jsonObj.get("defaultInstrumentCodeType").isJsonNull()) && !jsonObj.get("defaultInstrumentCodeType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `defaultInstrumentCodeType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("defaultInstrumentCodeType").toString()));
      }
      if (!jsonObj.get("defaultScope").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `defaultScope` to be a primitive type in the JSON string but got `%s`", jsonObj.get("defaultScope").toString()));
      }
      if ((jsonObj.get("calendarScope") != null && !jsonObj.get("calendarScope").isJsonNull()) && !jsonObj.get("calendarScope").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `calendarScope` to be a primitive type in the JSON string but got `%s`", jsonObj.get("calendarScope").toString()));
      }
      if ((jsonObj.get("conventionScope") != null && !jsonObj.get("conventionScope").isJsonNull()) && !jsonObj.get("conventionScope").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `conventionScope` to be a primitive type in the JSON string but got `%s`", jsonObj.get("conventionScope").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MarketOptions.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MarketOptions' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MarketOptions> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MarketOptions.class));

       return (TypeAdapter<T>) new TypeAdapter<MarketOptions>() {
           @Override
           public void write(JsonWriter out, MarketOptions value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MarketOptions read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of MarketOptions given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of MarketOptions
  * @throws IOException if the JSON string is invalid with respect to MarketOptions
  */
  public static MarketOptions fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MarketOptions.class);
  }

 /**
  * Convert an instance of MarketOptions to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
