/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * Cash election for Events that result in a cash payment.
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class CashElection {
  public static final String SERIALIZED_NAME_ELECTION_KEY = "electionKey";
  @SerializedName(SERIALIZED_NAME_ELECTION_KEY)
  private String electionKey;

  public static final String SERIALIZED_NAME_EXCHANGE_RATE = "exchangeRate";
  @SerializedName(SERIALIZED_NAME_EXCHANGE_RATE)
  private java.math.BigDecimal exchangeRate;

  public static final String SERIALIZED_NAME_DIVIDEND_RATE = "dividendRate";
  @SerializedName(SERIALIZED_NAME_DIVIDEND_RATE)
  private java.math.BigDecimal dividendRate;

  public static final String SERIALIZED_NAME_IS_CHOSEN = "isChosen";
  @SerializedName(SERIALIZED_NAME_IS_CHOSEN)
  private Boolean isChosen;

  public static final String SERIALIZED_NAME_IS_DECLARED = "isDeclared";
  @SerializedName(SERIALIZED_NAME_IS_DECLARED)
  private Boolean isDeclared;

  public static final String SERIALIZED_NAME_IS_DEFAULT = "isDefault";
  @SerializedName(SERIALIZED_NAME_IS_DEFAULT)
  private Boolean isDefault;

  public static final String SERIALIZED_NAME_DIVIDEND_CURRENCY = "dividendCurrency";
  @SerializedName(SERIALIZED_NAME_DIVIDEND_CURRENCY)
  private String dividendCurrency;

  public CashElection() {
  }

  public CashElection electionKey(String electionKey) {
    
    this.electionKey = electionKey;
    return this;
  }

   /**
   * Unique key used to identify this election.
   * @return electionKey
  **/
  @jakarta.annotation.Nonnull
  public String getElectionKey() {
    return electionKey;
  }


  public void setElectionKey(String electionKey) {
    this.electionKey = electionKey;
  }


  public CashElection exchangeRate(java.math.BigDecimal exchangeRate) {
    
    this.exchangeRate = exchangeRate;
    return this;
  }

   /**
   * The exchange rate if this is not the declared CashElection. Defaults to 1 if Election is Declared.
   * @return exchangeRate
  **/
  @jakarta.annotation.Nullable
  public java.math.BigDecimal getExchangeRate() {
    return exchangeRate;
  }


  public void setExchangeRate(java.math.BigDecimal exchangeRate) {
    this.exchangeRate = exchangeRate;
  }


  public CashElection dividendRate(java.math.BigDecimal dividendRate) {
    
    this.dividendRate = dividendRate;
    return this;
  }

   /**
   * The payment rate for this CashElection.
   * @return dividendRate
  **/
  @jakarta.annotation.Nullable
  public java.math.BigDecimal getDividendRate() {
    return dividendRate;
  }


  public void setDividendRate(java.math.BigDecimal dividendRate) {
    this.dividendRate = dividendRate;
  }


  public CashElection isChosen(Boolean isChosen) {
    
    this.isChosen = isChosen;
    return this;
  }

   /**
   * Has this election been chosen. Only one Election may be Chosen per Event.
   * @return isChosen
  **/
  @jakarta.annotation.Nullable
  public Boolean getIsChosen() {
    return isChosen;
  }


  public void setIsChosen(Boolean isChosen) {
    this.isChosen = isChosen;
  }


  public CashElection isDeclared(Boolean isDeclared) {
    
    this.isDeclared = isDeclared;
    return this;
  }

   /**
   * Is this the declared CashElection. Only one Election may be Declared per Event.
   * @return isDeclared
  **/
  @jakarta.annotation.Nullable
  public Boolean getIsDeclared() {
    return isDeclared;
  }


  public void setIsDeclared(Boolean isDeclared) {
    this.isDeclared = isDeclared;
  }


  public CashElection isDefault(Boolean isDefault) {
    
    this.isDefault = isDefault;
    return this;
  }

   /**
   * Is this election the default. Only one Election may be Default per Event
   * @return isDefault
  **/
  @jakarta.annotation.Nullable
  public Boolean getIsDefault() {
    return isDefault;
  }


  public void setIsDefault(Boolean isDefault) {
    this.isDefault = isDefault;
  }


  public CashElection dividendCurrency(String dividendCurrency) {
    
    this.dividendCurrency = dividendCurrency;
    return this;
  }

   /**
   * The payment currency for this CashElection.
   * @return dividendCurrency
  **/
  @jakarta.annotation.Nonnull
  public String getDividendCurrency() {
    return dividendCurrency;
  }


  public void setDividendCurrency(String dividendCurrency) {
    this.dividendCurrency = dividendCurrency;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CashElection cashElection = (CashElection) o;
    return Objects.equals(this.electionKey, cashElection.electionKey) &&
        (this.exchangeRate.compareTo(cashElection.getExchangeRate()) == 0) &&
        (this.dividendRate.compareTo(cashElection.getDividendRate()) == 0) &&
        Objects.equals(this.isChosen, cashElection.isChosen) &&
        Objects.equals(this.isDeclared, cashElection.isDeclared) &&
        Objects.equals(this.isDefault, cashElection.isDefault) &&
        Objects.equals(this.dividendCurrency, cashElection.dividendCurrency);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(electionKey, exchangeRate, dividendRate, isChosen, isDeclared, isDefault, dividendCurrency);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CashElection {\n");
    sb.append("    electionKey: ").append(toIndentedString(electionKey)).append("\n");
    sb.append("    exchangeRate: ").append(toIndentedString(exchangeRate)).append("\n");
    sb.append("    dividendRate: ").append(toIndentedString(dividendRate)).append("\n");
    sb.append("    isChosen: ").append(toIndentedString(isChosen)).append("\n");
    sb.append("    isDeclared: ").append(toIndentedString(isDeclared)).append("\n");
    sb.append("    isDefault: ").append(toIndentedString(isDefault)).append("\n");
    sb.append("    dividendCurrency: ").append(toIndentedString(dividendCurrency)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("electionKey");
    openapiFields.add("exchangeRate");
    openapiFields.add("dividendRate");
    openapiFields.add("isChosen");
    openapiFields.add("isDeclared");
    openapiFields.add("isDefault");
    openapiFields.add("dividendCurrency");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("electionKey");
    openapiRequiredFields.add("dividendCurrency");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to CashElection
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CashElection.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CashElection is not found in the empty JSON string", CashElection.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CashElection.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("electionKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `electionKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("electionKey").toString()));
      }
      if (!jsonObj.get("dividendCurrency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dividendCurrency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dividendCurrency").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CashElection.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CashElection' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CashElection> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CashElection.class));

       return (TypeAdapter<T>) new TypeAdapter<CashElection>() {
           @Override
           public void write(JsonWriter out, CashElection value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CashElection read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CashElection given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CashElection
  * @throws IOException if the JSON string is invalid with respect to CashElection
  */
  public static CashElection fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CashElection.class);
  }

 /**
  * Convert an instance of CashElection to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
