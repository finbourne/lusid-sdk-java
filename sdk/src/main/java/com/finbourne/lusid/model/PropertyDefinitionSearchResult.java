/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import com.finbourne.lusid.model.Link;
import com.finbourne.lusid.model.ResourceId;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.net.URI;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * A property definition search result
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class PropertyDefinitionSearchResult {
  public static final String SERIALIZED_NAME_HREF = "href";
  @SerializedName(SERIALIZED_NAME_HREF)
  private URI href;

  public static final String SERIALIZED_NAME_KEY = "key";
  @SerializedName(SERIALIZED_NAME_KEY)
  private String key;

  /**
   * The type of values that can be associated with this property. This is defined by the property&#39;s data type. The available values are: String, Int, Decimal, DateTime, Boolean, Map, List, PropertyArray, Percentage, Code, Id, Uri, CurrencyAndAmount, TradePrice, Currency, MetricValue, ResourceId, ResultValue, CutLocalTime, DateOrCutLabel, UnindexedText
   */
  @JsonAdapter(ValueTypeEnum.Adapter.class)
  public enum ValueTypeEnum {
    STRING("String"),
    
    INT("Int"),
    
    DECIMAL("Decimal"),
    
    DATETIME("DateTime"),
    
    BOOLEAN("Boolean"),
    
    MAP("Map"),
    
    LIST("List"),
    
    PROPERTYARRAY("PropertyArray"),
    
    PERCENTAGE("Percentage"),
    
    CODE("Code"),
    
    ID("Id"),
    
    URI("Uri"),
    
    CURRENCYANDAMOUNT("CurrencyAndAmount"),
    
    TRADEPRICE("TradePrice"),
    
    CURRENCY("Currency"),
    
    METRICVALUE("MetricValue"),
    
    RESOURCEID("ResourceId"),
    
    RESULTVALUE("ResultValue"),
    
    CUTLOCALTIME("CutLocalTime"),
    
    DATEORCUTLABEL("DateOrCutLabel"),
    
    UNINDEXEDTEXT("UnindexedText");

    private String value;

    ValueTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ValueTypeEnum fromValue(String value) {
      for (ValueTypeEnum b : ValueTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ValueTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ValueTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ValueTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ValueTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_VALUE_TYPE = "valueType";
  @SerializedName(SERIALIZED_NAME_VALUE_TYPE)
  private ValueTypeEnum valueType;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_DATA_TYPE_ID = "dataTypeId";
  @SerializedName(SERIALIZED_NAME_DATA_TYPE_ID)
  private ResourceId dataTypeId;

  /**
   * The type of the property. The available values are: Label, Metric, Information
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    LABEL("Label"),
    
    METRIC("Metric"),
    
    INFORMATION("Information");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  /**
   * The units that can be associated with the property&#39;s values. This is defined by the property&#39;s data type. The available values are: NoUnits, Basic, Iso4217Currency
   */
  @JsonAdapter(UnitSchemaEnum.Adapter.class)
  public enum UnitSchemaEnum {
    NOUNITS("NoUnits"),
    
    BASIC("Basic"),
    
    ISO4217CURRENCY("Iso4217Currency");

    private String value;

    UnitSchemaEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static UnitSchemaEnum fromValue(String value) {
      for (UnitSchemaEnum b : UnitSchemaEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<UnitSchemaEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final UnitSchemaEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public UnitSchemaEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return UnitSchemaEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_UNIT_SCHEMA = "unitSchema";
  @SerializedName(SERIALIZED_NAME_UNIT_SCHEMA)
  private UnitSchemaEnum unitSchema;

  /**
   * The domain that the property exists in. The available values are: NotDefined, Transaction, Portfolio, Holding, ReferenceHolding, TransactionConfiguration, Instrument, CutLabelDefinition, Analytic, PortfolioGroup, Person, AccessMetadata, Order, UnitResult, MarketData, ConfigurationRecipe, Allocation, Calendar, LegalEntity, Placement, Execution, Block, Participation, Package, OrderInstruction, NextBestAction, CustomEntity, InstrumentEvent, Account, ChartOfAccounts, CustodianAccount, Abor, AborConfiguration, Reconciliation, PropertyDefinition, Compliance, DiaryEntry
   */
  @JsonAdapter(DomainEnum.Adapter.class)
  public enum DomainEnum {
    NOTDEFINED("NotDefined"),
    
    TRANSACTION("Transaction"),
    
    PORTFOLIO("Portfolio"),
    
    HOLDING("Holding"),
    
    REFERENCEHOLDING("ReferenceHolding"),
    
    TRANSACTIONCONFIGURATION("TransactionConfiguration"),
    
    INSTRUMENT("Instrument"),
    
    CUTLABELDEFINITION("CutLabelDefinition"),
    
    ANALYTIC("Analytic"),
    
    PORTFOLIOGROUP("PortfolioGroup"),
    
    PERSON("Person"),
    
    ACCESSMETADATA("AccessMetadata"),
    
    ORDER("Order"),
    
    UNITRESULT("UnitResult"),
    
    MARKETDATA("MarketData"),
    
    CONFIGURATIONRECIPE("ConfigurationRecipe"),
    
    ALLOCATION("Allocation"),
    
    CALENDAR("Calendar"),
    
    LEGALENTITY("LegalEntity"),
    
    PLACEMENT("Placement"),
    
    EXECUTION("Execution"),
    
    BLOCK("Block"),
    
    PARTICIPATION("Participation"),
    
    PACKAGE("Package"),
    
    ORDERINSTRUCTION("OrderInstruction"),
    
    NEXTBESTACTION("NextBestAction"),
    
    CUSTOMENTITY("CustomEntity"),
    
    INSTRUMENTEVENT("InstrumentEvent"),
    
    ACCOUNT("Account"),
    
    CHARTOFACCOUNTS("ChartOfAccounts"),
    
    CUSTODIANACCOUNT("CustodianAccount"),
    
    ABOR("Abor"),
    
    ABORCONFIGURATION("AborConfiguration"),
    
    RECONCILIATION("Reconciliation"),
    
    PROPERTYDEFINITION("PropertyDefinition"),
    
    COMPLIANCE("Compliance"),
    
    DIARYENTRY("DiaryEntry");

    private String value;

    DomainEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DomainEnum fromValue(String value) {
      for (DomainEnum b : DomainEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DomainEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DomainEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DomainEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DomainEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_DOMAIN = "domain";
  @SerializedName(SERIALIZED_NAME_DOMAIN)
  private DomainEnum domain;

  public static final String SERIALIZED_NAME_SCOPE = "scope";
  @SerializedName(SERIALIZED_NAME_SCOPE)
  private String scope;

  public static final String SERIALIZED_NAME_CODE = "code";
  @SerializedName(SERIALIZED_NAME_CODE)
  private String code;

  public static final String SERIALIZED_NAME_VALUE_REQUIRED = "valueRequired";
  @SerializedName(SERIALIZED_NAME_VALUE_REQUIRED)
  private Boolean valueRequired;

  /**
   * Describes how the property&#39;s values can change over time. The available values are: Perpetual, TimeVariant
   */
  @JsonAdapter(LifeTimeEnum.Adapter.class)
  public enum LifeTimeEnum {
    PERPETUAL("Perpetual"),
    
    TIMEVARIANT("TimeVariant");

    private String value;

    LifeTimeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LifeTimeEnum fromValue(String value) {
      for (LifeTimeEnum b : LifeTimeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LifeTimeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LifeTimeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LifeTimeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LifeTimeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_LIFE_TIME = "lifeTime";
  @SerializedName(SERIALIZED_NAME_LIFE_TIME)
  private LifeTimeEnum lifeTime;

  public static final String SERIALIZED_NAME_CONSTRAINT_STYLE = "constraintStyle";
  @SerializedName(SERIALIZED_NAME_CONSTRAINT_STYLE)
  private String constraintStyle;

  /**
   * The definition type (DerivedDefinition or Definition). The available values are: ValueProperty, DerivedDefinition
   */
  @JsonAdapter(PropertyDefinitionTypeEnum.Adapter.class)
  public enum PropertyDefinitionTypeEnum {
    VALUEPROPERTY("ValueProperty"),
    
    DERIVEDDEFINITION("DerivedDefinition");

    private String value;

    PropertyDefinitionTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PropertyDefinitionTypeEnum fromValue(String value) {
      for (PropertyDefinitionTypeEnum b : PropertyDefinitionTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PropertyDefinitionTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PropertyDefinitionTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PropertyDefinitionTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PropertyDefinitionTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_PROPERTY_DEFINITION_TYPE = "propertyDefinitionType";
  @SerializedName(SERIALIZED_NAME_PROPERTY_DEFINITION_TYPE)
  private PropertyDefinitionTypeEnum propertyDefinitionType;

  public static final String SERIALIZED_NAME_PROPERTY_DESCRIPTION = "propertyDescription";
  @SerializedName(SERIALIZED_NAME_PROPERTY_DESCRIPTION)
  private String propertyDescription;

  public static final String SERIALIZED_NAME_DERIVATION_FORMULA = "derivationFormula";
  @SerializedName(SERIALIZED_NAME_DERIVATION_FORMULA)
  private String derivationFormula;

  public static final String SERIALIZED_NAME_LINKS = "links";
  @SerializedName(SERIALIZED_NAME_LINKS)
  private List<Link> links;

  public PropertyDefinitionSearchResult() {
  }

  
  public PropertyDefinitionSearchResult(
     String scope, 
     String code
  ) {
    this();
    this.scope = scope;
    this.code = code;
  }

  public PropertyDefinitionSearchResult href(URI href) {
    
    this.href = href;
    return this;
  }

   /**
   * The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.
   * @return href
  **/
  @jakarta.annotation.Nullable
  public URI getHref() {
    return href;
  }


  public void setHref(URI href) {
    this.href = href;
  }


  public PropertyDefinitionSearchResult key(String key) {
    
    this.key = key;
    return this;
  }

   /**
   * The property key which uniquely identifies the property. The format for the property key is {domain}/{scope}/{code}, e.g. &#39;Portfolio/Manager/Id&#39;.
   * @return key
  **/
  @jakarta.annotation.Nullable
  public String getKey() {
    return key;
  }


  public void setKey(String key) {
    this.key = key;
  }


  public PropertyDefinitionSearchResult valueType(ValueTypeEnum valueType) {
    
    this.valueType = valueType;
    return this;
  }

   /**
   * The type of values that can be associated with this property. This is defined by the property&#39;s data type. The available values are: String, Int, Decimal, DateTime, Boolean, Map, List, PropertyArray, Percentage, Code, Id, Uri, CurrencyAndAmount, TradePrice, Currency, MetricValue, ResourceId, ResultValue, CutLocalTime, DateOrCutLabel, UnindexedText
   * @return valueType
  **/
  @jakarta.annotation.Nullable
  public ValueTypeEnum getValueType() {
    return valueType;
  }


  public void setValueType(ValueTypeEnum valueType) {
    this.valueType = valueType;
  }


  public PropertyDefinitionSearchResult displayName(String displayName) {
    
    this.displayName = displayName;
    return this;
  }

   /**
   * The display name of the property.
   * @return displayName
  **/
  @jakarta.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }


  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public PropertyDefinitionSearchResult dataTypeId(ResourceId dataTypeId) {
    
    this.dataTypeId = dataTypeId;
    return this;
  }

   /**
   * Get dataTypeId
   * @return dataTypeId
  **/
  @jakarta.annotation.Nullable
  public ResourceId getDataTypeId() {
    return dataTypeId;
  }


  public void setDataTypeId(ResourceId dataTypeId) {
    this.dataTypeId = dataTypeId;
  }


  public PropertyDefinitionSearchResult type(TypeEnum type) {
    
    this.type = type;
    return this;
  }

   /**
   * The type of the property. The available values are: Label, Metric, Information
   * @return type
  **/
  @jakarta.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }


  public void setType(TypeEnum type) {
    this.type = type;
  }


  public PropertyDefinitionSearchResult unitSchema(UnitSchemaEnum unitSchema) {
    
    this.unitSchema = unitSchema;
    return this;
  }

   /**
   * The units that can be associated with the property&#39;s values. This is defined by the property&#39;s data type. The available values are: NoUnits, Basic, Iso4217Currency
   * @return unitSchema
  **/
  @jakarta.annotation.Nullable
  public UnitSchemaEnum getUnitSchema() {
    return unitSchema;
  }


  public void setUnitSchema(UnitSchemaEnum unitSchema) {
    this.unitSchema = unitSchema;
  }


  public PropertyDefinitionSearchResult domain(DomainEnum domain) {
    
    this.domain = domain;
    return this;
  }

   /**
   * The domain that the property exists in. The available values are: NotDefined, Transaction, Portfolio, Holding, ReferenceHolding, TransactionConfiguration, Instrument, CutLabelDefinition, Analytic, PortfolioGroup, Person, AccessMetadata, Order, UnitResult, MarketData, ConfigurationRecipe, Allocation, Calendar, LegalEntity, Placement, Execution, Block, Participation, Package, OrderInstruction, NextBestAction, CustomEntity, InstrumentEvent, Account, ChartOfAccounts, CustodianAccount, Abor, AborConfiguration, Reconciliation, PropertyDefinition, Compliance, DiaryEntry
   * @return domain
  **/
  @jakarta.annotation.Nullable
  public DomainEnum getDomain() {
    return domain;
  }


  public void setDomain(DomainEnum domain) {
    this.domain = domain;
  }


   /**
   * The scope that the property exists in.
   * @return scope
  **/
  @jakarta.annotation.Nullable
  public String getScope() {
    return scope;
  }




   /**
   * The code of the property. Together with the domain and scope this uniquely identifies the property.
   * @return code
  **/
  @jakarta.annotation.Nullable
  public String getCode() {
    return code;
  }




  public PropertyDefinitionSearchResult valueRequired(Boolean valueRequired) {
    
    this.valueRequired = valueRequired;
    return this;
  }

   /**
   * This field is not implemented and should be disregarded.
   * @return valueRequired
  **/
  @jakarta.annotation.Nullable
  public Boolean getValueRequired() {
    return valueRequired;
  }


  public void setValueRequired(Boolean valueRequired) {
    this.valueRequired = valueRequired;
  }


  public PropertyDefinitionSearchResult lifeTime(LifeTimeEnum lifeTime) {
    
    this.lifeTime = lifeTime;
    return this;
  }

   /**
   * Describes how the property&#39;s values can change over time. The available values are: Perpetual, TimeVariant
   * @return lifeTime
  **/
  @jakarta.annotation.Nullable
  public LifeTimeEnum getLifeTime() {
    return lifeTime;
  }


  public void setLifeTime(LifeTimeEnum lifeTime) {
    this.lifeTime = lifeTime;
  }


  public PropertyDefinitionSearchResult constraintStyle(String constraintStyle) {
    
    this.constraintStyle = constraintStyle;
    return this;
  }

   /**
   * Describes the uniqueness and cardinality of the property for entity objects under the property domain specified in Key.
   * @return constraintStyle
  **/
  @jakarta.annotation.Nullable
  public String getConstraintStyle() {
    return constraintStyle;
  }


  public void setConstraintStyle(String constraintStyle) {
    this.constraintStyle = constraintStyle;
  }


  public PropertyDefinitionSearchResult propertyDefinitionType(PropertyDefinitionTypeEnum propertyDefinitionType) {
    
    this.propertyDefinitionType = propertyDefinitionType;
    return this;
  }

   /**
   * The definition type (DerivedDefinition or Definition). The available values are: ValueProperty, DerivedDefinition
   * @return propertyDefinitionType
  **/
  @jakarta.annotation.Nullable
  public PropertyDefinitionTypeEnum getPropertyDefinitionType() {
    return propertyDefinitionType;
  }


  public void setPropertyDefinitionType(PropertyDefinitionTypeEnum propertyDefinitionType) {
    this.propertyDefinitionType = propertyDefinitionType;
  }


  public PropertyDefinitionSearchResult propertyDescription(String propertyDescription) {
    
    this.propertyDescription = propertyDescription;
    return this;
  }

   /**
   * A brief description of what a property of this property definition contains.
   * @return propertyDescription
  **/
  @jakarta.annotation.Nullable
  public String getPropertyDescription() {
    return propertyDescription;
  }


  public void setPropertyDescription(String propertyDescription) {
    this.propertyDescription = propertyDescription;
  }


  public PropertyDefinitionSearchResult derivationFormula(String derivationFormula) {
    
    this.derivationFormula = derivationFormula;
    return this;
  }

   /**
   * The rule that defines how data is composed for a derived property.
   * @return derivationFormula
  **/
  @jakarta.annotation.Nullable
  public String getDerivationFormula() {
    return derivationFormula;
  }


  public void setDerivationFormula(String derivationFormula) {
    this.derivationFormula = derivationFormula;
  }


  public PropertyDefinitionSearchResult links(List<Link> links) {
    
    this.links = links;
    return this;
  }

  public PropertyDefinitionSearchResult addLinksItem(Link linksItem) {
    if (this.links == null) {
      this.links = new ArrayList<>();
    }
    this.links.add(linksItem);
    return this;
  }

   /**
   * Get links
   * @return links
  **/
  @jakarta.annotation.Nullable
  public List<Link> getLinks() {
    return links;
  }


  public void setLinks(List<Link> links) {
    this.links = links;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PropertyDefinitionSearchResult propertyDefinitionSearchResult = (PropertyDefinitionSearchResult) o;
    return Objects.equals(this.href, propertyDefinitionSearchResult.href) &&
        Objects.equals(this.key, propertyDefinitionSearchResult.key) &&
        Objects.equals(this.valueType, propertyDefinitionSearchResult.valueType) &&
        Objects.equals(this.displayName, propertyDefinitionSearchResult.displayName) &&
        Objects.equals(this.dataTypeId, propertyDefinitionSearchResult.dataTypeId) &&
        Objects.equals(this.type, propertyDefinitionSearchResult.type) &&
        Objects.equals(this.unitSchema, propertyDefinitionSearchResult.unitSchema) &&
        Objects.equals(this.domain, propertyDefinitionSearchResult.domain) &&
        Objects.equals(this.scope, propertyDefinitionSearchResult.scope) &&
        Objects.equals(this.code, propertyDefinitionSearchResult.code) &&
        Objects.equals(this.valueRequired, propertyDefinitionSearchResult.valueRequired) &&
        Objects.equals(this.lifeTime, propertyDefinitionSearchResult.lifeTime) &&
        Objects.equals(this.constraintStyle, propertyDefinitionSearchResult.constraintStyle) &&
        Objects.equals(this.propertyDefinitionType, propertyDefinitionSearchResult.propertyDefinitionType) &&
        Objects.equals(this.propertyDescription, propertyDefinitionSearchResult.propertyDescription) &&
        Objects.equals(this.derivationFormula, propertyDefinitionSearchResult.derivationFormula) &&
        Objects.equals(this.links, propertyDefinitionSearchResult.links);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(href, key, valueType, displayName, dataTypeId, type, unitSchema, domain, scope, code, valueRequired, lifeTime, constraintStyle, propertyDefinitionType, propertyDescription, derivationFormula, links);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PropertyDefinitionSearchResult {\n");
    sb.append("    href: ").append(toIndentedString(href)).append("\n");
    sb.append("    key: ").append(toIndentedString(key)).append("\n");
    sb.append("    valueType: ").append(toIndentedString(valueType)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    dataTypeId: ").append(toIndentedString(dataTypeId)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    unitSchema: ").append(toIndentedString(unitSchema)).append("\n");
    sb.append("    domain: ").append(toIndentedString(domain)).append("\n");
    sb.append("    scope: ").append(toIndentedString(scope)).append("\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    valueRequired: ").append(toIndentedString(valueRequired)).append("\n");
    sb.append("    lifeTime: ").append(toIndentedString(lifeTime)).append("\n");
    sb.append("    constraintStyle: ").append(toIndentedString(constraintStyle)).append("\n");
    sb.append("    propertyDefinitionType: ").append(toIndentedString(propertyDefinitionType)).append("\n");
    sb.append("    propertyDescription: ").append(toIndentedString(propertyDescription)).append("\n");
    sb.append("    derivationFormula: ").append(toIndentedString(derivationFormula)).append("\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("href");
    openapiFields.add("key");
    openapiFields.add("valueType");
    openapiFields.add("displayName");
    openapiFields.add("dataTypeId");
    openapiFields.add("type");
    openapiFields.add("unitSchema");
    openapiFields.add("domain");
    openapiFields.add("scope");
    openapiFields.add("code");
    openapiFields.add("valueRequired");
    openapiFields.add("lifeTime");
    openapiFields.add("constraintStyle");
    openapiFields.add("propertyDefinitionType");
    openapiFields.add("propertyDescription");
    openapiFields.add("derivationFormula");
    openapiFields.add("links");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to PropertyDefinitionSearchResult
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PropertyDefinitionSearchResult.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PropertyDefinitionSearchResult is not found in the empty JSON string", PropertyDefinitionSearchResult.openapiRequiredFields.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("href") != null && !jsonObj.get("href").isJsonNull()) && !jsonObj.get("href").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `href` to be a primitive type in the JSON string but got `%s`", jsonObj.get("href").toString()));
      }
      if ((jsonObj.get("key") != null && !jsonObj.get("key").isJsonNull()) && !jsonObj.get("key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("key").toString()));
      }
      if ((jsonObj.get("valueType") != null && !jsonObj.get("valueType").isJsonNull()) && !jsonObj.get("valueType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `valueType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("valueType").toString()));
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      // validate the optional field `dataTypeId`
      if (jsonObj.get("dataTypeId") != null && !jsonObj.get("dataTypeId").isJsonNull()) {
        ResourceId.validateJsonElement(jsonObj.get("dataTypeId"));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if ((jsonObj.get("unitSchema") != null && !jsonObj.get("unitSchema").isJsonNull()) && !jsonObj.get("unitSchema").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `unitSchema` to be a primitive type in the JSON string but got `%s`", jsonObj.get("unitSchema").toString()));
      }
      if ((jsonObj.get("domain") != null && !jsonObj.get("domain").isJsonNull()) && !jsonObj.get("domain").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `domain` to be a primitive type in the JSON string but got `%s`", jsonObj.get("domain").toString()));
      }
      if ((jsonObj.get("scope") != null && !jsonObj.get("scope").isJsonNull()) && !jsonObj.get("scope").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `scope` to be a primitive type in the JSON string but got `%s`", jsonObj.get("scope").toString()));
      }
      if ((jsonObj.get("code") != null && !jsonObj.get("code").isJsonNull()) && !jsonObj.get("code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("code").toString()));
      }
      if ((jsonObj.get("lifeTime") != null && !jsonObj.get("lifeTime").isJsonNull()) && !jsonObj.get("lifeTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lifeTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lifeTime").toString()));
      }
      if ((jsonObj.get("constraintStyle") != null && !jsonObj.get("constraintStyle").isJsonNull()) && !jsonObj.get("constraintStyle").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `constraintStyle` to be a primitive type in the JSON string but got `%s`", jsonObj.get("constraintStyle").toString()));
      }
      if ((jsonObj.get("propertyDefinitionType") != null && !jsonObj.get("propertyDefinitionType").isJsonNull()) && !jsonObj.get("propertyDefinitionType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `propertyDefinitionType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("propertyDefinitionType").toString()));
      }
      if ((jsonObj.get("propertyDescription") != null && !jsonObj.get("propertyDescription").isJsonNull()) && !jsonObj.get("propertyDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `propertyDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("propertyDescription").toString()));
      }
      if ((jsonObj.get("derivationFormula") != null && !jsonObj.get("derivationFormula").isJsonNull()) && !jsonObj.get("derivationFormula").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `derivationFormula` to be a primitive type in the JSON string but got `%s`", jsonObj.get("derivationFormula").toString()));
      }
      if (jsonObj.get("links") != null && !jsonObj.get("links").isJsonNull()) {
        JsonArray jsonArraylinks = jsonObj.getAsJsonArray("links");
        if (jsonArraylinks != null) {
          // ensure the json data is an array
          if (!jsonObj.get("links").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `links` to be an array in the JSON string but got `%s`", jsonObj.get("links").toString()));
          }

          // validate the optional field `links` (array)
          for (int i = 0; i < jsonArraylinks.size(); i++) {
            Link.validateJsonElement(jsonArraylinks.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PropertyDefinitionSearchResult.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PropertyDefinitionSearchResult' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PropertyDefinitionSearchResult> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PropertyDefinitionSearchResult.class));

       return (TypeAdapter<T>) new TypeAdapter<PropertyDefinitionSearchResult>() {
           @Override
           public void write(JsonWriter out, PropertyDefinitionSearchResult value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PropertyDefinitionSearchResult read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PropertyDefinitionSearchResult given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PropertyDefinitionSearchResult
  * @throws IOException if the JSON string is invalid with respect to PropertyDefinitionSearchResult
  */
  public static PropertyDefinitionSearchResult fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PropertyDefinitionSearchResult.class);
  }

 /**
  * Convert an instance of PropertyDefinitionSearchResult to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
