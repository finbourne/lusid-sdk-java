/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import java.util.Arrays;
import com.finbourne.lusid.model.CurrencyAndAmount;
import com.finbourne.lusid.model.PerpetualProperty;
import com.finbourne.lusid.model.Property;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * A reconciliation break
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ReconciliationBreak {
  public static final String SERIALIZED_NAME_INSTRUMENT_SCOPE = "instrumentScope";
  @SerializedName(SERIALIZED_NAME_INSTRUMENT_SCOPE)
  private String instrumentScope;

  public static final String SERIALIZED_NAME_INSTRUMENT_UID = "instrumentUid";
  @SerializedName(SERIALIZED_NAME_INSTRUMENT_UID)
  private String instrumentUid;

  public static final String SERIALIZED_NAME_SUB_HOLDING_KEYS = "subHoldingKeys";
  @SerializedName(SERIALIZED_NAME_SUB_HOLDING_KEYS)
  private Map<String, PerpetualProperty> subHoldingKeys = new HashMap<>();

  public static final String SERIALIZED_NAME_LEFT_UNITS = "leftUnits";
  @SerializedName(SERIALIZED_NAME_LEFT_UNITS)
  private java.math.BigDecimal leftUnits;

  public static final String SERIALIZED_NAME_RIGHT_UNITS = "rightUnits";
  @SerializedName(SERIALIZED_NAME_RIGHT_UNITS)
  private java.math.BigDecimal rightUnits;

  public static final String SERIALIZED_NAME_DIFFERENCE_UNITS = "differenceUnits";
  @SerializedName(SERIALIZED_NAME_DIFFERENCE_UNITS)
  private java.math.BigDecimal differenceUnits;

  public static final String SERIALIZED_NAME_LEFT_COST = "leftCost";
  @SerializedName(SERIALIZED_NAME_LEFT_COST)
  private CurrencyAndAmount leftCost;

  public static final String SERIALIZED_NAME_RIGHT_COST = "rightCost";
  @SerializedName(SERIALIZED_NAME_RIGHT_COST)
  private CurrencyAndAmount rightCost;

  public static final String SERIALIZED_NAME_DIFFERENCE_COST = "differenceCost";
  @SerializedName(SERIALIZED_NAME_DIFFERENCE_COST)
  private CurrencyAndAmount differenceCost;

  public static final String SERIALIZED_NAME_INSTRUMENT_PROPERTIES = "instrumentProperties";
  @SerializedName(SERIALIZED_NAME_INSTRUMENT_PROPERTIES)
  private List<Property> instrumentProperties = new ArrayList<>();

  public ReconciliationBreak() {
  }

  public ReconciliationBreak instrumentScope(String instrumentScope) {
    
    this.instrumentScope = instrumentScope;
    return this;
  }

   /**
   * The scope in which the instrument lies.
   * @return instrumentScope
  **/
  @javax.annotation.Nullable
  public String getInstrumentScope() {
    return instrumentScope;
  }


  public void setInstrumentScope(String instrumentScope) {
    this.instrumentScope = instrumentScope;
  }


  public ReconciliationBreak instrumentUid(String instrumentUid) {
    
    this.instrumentUid = instrumentUid;
    return this;
  }

   /**
   * Unique instrument identifier
   * @return instrumentUid
  **/
  @javax.annotation.Nonnull
  public String getInstrumentUid() {
    return instrumentUid;
  }


  public void setInstrumentUid(String instrumentUid) {
    this.instrumentUid = instrumentUid;
  }


  public ReconciliationBreak subHoldingKeys(Map<String, PerpetualProperty> subHoldingKeys) {
    
    this.subHoldingKeys = subHoldingKeys;
    return this;
  }

  public ReconciliationBreak putSubHoldingKeysItem(String key, PerpetualProperty subHoldingKeysItem) {
    if (this.subHoldingKeys == null) {
      this.subHoldingKeys = new HashMap<>();
    }
    this.subHoldingKeys.put(key, subHoldingKeysItem);
    return this;
  }

   /**
   * Any other properties that comprise the Sub-Holding Key
   * @return subHoldingKeys
  **/
  @javax.annotation.Nonnull
  public Map<String, PerpetualProperty> getSubHoldingKeys() {
    return subHoldingKeys;
  }


  public void setSubHoldingKeys(Map<String, PerpetualProperty> subHoldingKeys) {
    this.subHoldingKeys = subHoldingKeys;
  }


  public ReconciliationBreak leftUnits(java.math.BigDecimal leftUnits) {
    
    this.leftUnits = leftUnits;
    return this;
  }

   /**
   * Units from the left hand side
   * @return leftUnits
  **/
  @javax.annotation.Nonnull
  public java.math.BigDecimal getLeftUnits() {
    return leftUnits;
  }


  public void setLeftUnits(java.math.BigDecimal leftUnits) {
    this.leftUnits = leftUnits;
  }


  public ReconciliationBreak rightUnits(java.math.BigDecimal rightUnits) {
    
    this.rightUnits = rightUnits;
    return this;
  }

   /**
   * Units from the right hand side
   * @return rightUnits
  **/
  @javax.annotation.Nonnull
  public java.math.BigDecimal getRightUnits() {
    return rightUnits;
  }


  public void setRightUnits(java.math.BigDecimal rightUnits) {
    this.rightUnits = rightUnits;
  }


  public ReconciliationBreak differenceUnits(java.math.BigDecimal differenceUnits) {
    
    this.differenceUnits = differenceUnits;
    return this;
  }

   /**
   * Difference in units
   * @return differenceUnits
  **/
  @javax.annotation.Nonnull
  public java.math.BigDecimal getDifferenceUnits() {
    return differenceUnits;
  }


  public void setDifferenceUnits(java.math.BigDecimal differenceUnits) {
    this.differenceUnits = differenceUnits;
  }


  public ReconciliationBreak leftCost(CurrencyAndAmount leftCost) {
    
    this.leftCost = leftCost;
    return this;
  }

   /**
   * Get leftCost
   * @return leftCost
  **/
  @javax.annotation.Nonnull
  public CurrencyAndAmount getLeftCost() {
    return leftCost;
  }


  public void setLeftCost(CurrencyAndAmount leftCost) {
    this.leftCost = leftCost;
  }


  public ReconciliationBreak rightCost(CurrencyAndAmount rightCost) {
    
    this.rightCost = rightCost;
    return this;
  }

   /**
   * Get rightCost
   * @return rightCost
  **/
  @javax.annotation.Nonnull
  public CurrencyAndAmount getRightCost() {
    return rightCost;
  }


  public void setRightCost(CurrencyAndAmount rightCost) {
    this.rightCost = rightCost;
  }


  public ReconciliationBreak differenceCost(CurrencyAndAmount differenceCost) {
    
    this.differenceCost = differenceCost;
    return this;
  }

   /**
   * Get differenceCost
   * @return differenceCost
  **/
  @javax.annotation.Nonnull
  public CurrencyAndAmount getDifferenceCost() {
    return differenceCost;
  }


  public void setDifferenceCost(CurrencyAndAmount differenceCost) {
    this.differenceCost = differenceCost;
  }


  public ReconciliationBreak instrumentProperties(List<Property> instrumentProperties) {
    
    this.instrumentProperties = instrumentProperties;
    return this;
  }

  public ReconciliationBreak addInstrumentPropertiesItem(Property instrumentPropertiesItem) {
    if (this.instrumentProperties == null) {
      this.instrumentProperties = new ArrayList<>();
    }
    this.instrumentProperties.add(instrumentPropertiesItem);
    return this;
  }

   /**
   * Additional features relating to the instrument
   * @return instrumentProperties
  **/
  @javax.annotation.Nonnull
  public List<Property> getInstrumentProperties() {
    return instrumentProperties;
  }


  public void setInstrumentProperties(List<Property> instrumentProperties) {
    this.instrumentProperties = instrumentProperties;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReconciliationBreak reconciliationBreak = (ReconciliationBreak) o;
    return Objects.equals(this.instrumentScope, reconciliationBreak.instrumentScope) &&
        Objects.equals(this.instrumentUid, reconciliationBreak.instrumentUid) &&
        Objects.equals(this.subHoldingKeys, reconciliationBreak.subHoldingKeys) &&
        (this.leftUnits.compareTo(reconciliationBreak.getLeftUnits()) == 0) &&
        (this.rightUnits.compareTo(reconciliationBreak.getRightUnits()) == 0) &&
        (this.differenceUnits.compareTo(reconciliationBreak.getDifferenceUnits()) == 0) &&
        Objects.equals(this.leftCost, reconciliationBreak.leftCost) &&
        Objects.equals(this.rightCost, reconciliationBreak.rightCost) &&
        Objects.equals(this.differenceCost, reconciliationBreak.differenceCost) &&
        Objects.equals(this.instrumentProperties, reconciliationBreak.instrumentProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(instrumentScope, instrumentUid, subHoldingKeys, leftUnits, rightUnits, differenceUnits, leftCost, rightCost, differenceCost, instrumentProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReconciliationBreak {\n");
    sb.append("    instrumentScope: ").append(toIndentedString(instrumentScope)).append("\n");
    sb.append("    instrumentUid: ").append(toIndentedString(instrumentUid)).append("\n");
    sb.append("    subHoldingKeys: ").append(toIndentedString(subHoldingKeys)).append("\n");
    sb.append("    leftUnits: ").append(toIndentedString(leftUnits)).append("\n");
    sb.append("    rightUnits: ").append(toIndentedString(rightUnits)).append("\n");
    sb.append("    differenceUnits: ").append(toIndentedString(differenceUnits)).append("\n");
    sb.append("    leftCost: ").append(toIndentedString(leftCost)).append("\n");
    sb.append("    rightCost: ").append(toIndentedString(rightCost)).append("\n");
    sb.append("    differenceCost: ").append(toIndentedString(differenceCost)).append("\n");
    sb.append("    instrumentProperties: ").append(toIndentedString(instrumentProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("instrumentScope");
    openapiFields.add("instrumentUid");
    openapiFields.add("subHoldingKeys");
    openapiFields.add("leftUnits");
    openapiFields.add("rightUnits");
    openapiFields.add("differenceUnits");
    openapiFields.add("leftCost");
    openapiFields.add("rightCost");
    openapiFields.add("differenceCost");
    openapiFields.add("instrumentProperties");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("instrumentUid");
    openapiRequiredFields.add("subHoldingKeys");
    openapiRequiredFields.add("leftUnits");
    openapiRequiredFields.add("rightUnits");
    openapiRequiredFields.add("differenceUnits");
    openapiRequiredFields.add("leftCost");
    openapiRequiredFields.add("rightCost");
    openapiRequiredFields.add("differenceCost");
    openapiRequiredFields.add("instrumentProperties");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ReconciliationBreak
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ReconciliationBreak.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReconciliationBreak is not found in the empty JSON string", ReconciliationBreak.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ReconciliationBreak.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ReconciliationBreak` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ReconciliationBreak.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("instrumentScope") != null && !jsonObj.get("instrumentScope").isJsonNull()) && !jsonObj.get("instrumentScope").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `instrumentScope` to be a primitive type in the JSON string but got `%s`", jsonObj.get("instrumentScope").toString()));
      }
      if (!jsonObj.get("instrumentUid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `instrumentUid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("instrumentUid").toString()));
      }
      // validate the required field `leftCost`
      CurrencyAndAmount.validateJsonObject(jsonObj.getAsJsonObject("leftCost"));
      // validate the required field `rightCost`
      CurrencyAndAmount.validateJsonObject(jsonObj.getAsJsonObject("rightCost"));
      // validate the required field `differenceCost`
      CurrencyAndAmount.validateJsonObject(jsonObj.getAsJsonObject("differenceCost"));
      // ensure the json data is an array
      if (!jsonObj.get("instrumentProperties").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `instrumentProperties` to be an array in the JSON string but got `%s`", jsonObj.get("instrumentProperties").toString()));
      }

      JsonArray jsonArrayinstrumentProperties = jsonObj.getAsJsonArray("instrumentProperties");
      // validate the required field `instrumentProperties` (array)
      for (int i = 0; i < jsonArrayinstrumentProperties.size(); i++) {
        Property.validateJsonObject(jsonArrayinstrumentProperties.get(i).getAsJsonObject());
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReconciliationBreak.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReconciliationBreak' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReconciliationBreak> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReconciliationBreak.class));

       return (TypeAdapter<T>) new TypeAdapter<ReconciliationBreak>() {
           @Override
           public void write(JsonWriter out, ReconciliationBreak value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ReconciliationBreak read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ReconciliationBreak given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ReconciliationBreak
  * @throws IOException if the JSON string is invalid with respect to ReconciliationBreak
  */
  public static ReconciliationBreak fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReconciliationBreak.class);
  }

 /**
  * Convert an instance of ReconciliationBreak to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
