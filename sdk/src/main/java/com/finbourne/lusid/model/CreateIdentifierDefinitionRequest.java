/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import com.finbourne.lusid.model.Property;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * CreateIdentifierDefinitionRequest
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class CreateIdentifierDefinitionRequest {
  /**
   * The type of entity to which the identifier can be attached. Supported values are \&quot;Instrument\&quot;, \&quot;Person\&quot;, \&quot;LegalEntity\&quot;and \&quot;CustomEntity\&quot;. The available values are: NotDefined, Transaction, Portfolio, Holding, ReferenceHolding, TransactionConfiguration, Instrument, CutLabelDefinition, Analytic, PortfolioGroup, Person, AccessMetadata, Order, UnitResult, MarketData, ConfigurationRecipe, Allocation, Calendar, LegalEntity, InvestorRecord, Placement, Execution, Block, Participation, Package, OrderInstruction, NextBestAction, CustomEntity, InstrumentEvent, Account, ChartOfAccounts, CustodianAccount, Abor, AborConfiguration, Fund, FundConfiguration, Fee, Reconciliation, PropertyDefinition, Compliance, DiaryEntry, Leg, DerivedValuation, Timeline, ClosedPeriod, AddressKeyDefinition, AmortisationRuleSet, AnalyticsSetInventory, AtomUnitResult, CleardownModule, ComplexMarketData, ComplianceRunSummary, ComplianceRule, ComplianceRunInfo, CorporateActionSource, CounterpartyAgreement, CustomEntityDefinition, DataType, Dialect, EventHandler, GeneralLedgerProfile, PostingModule, Quote, RecipeComposer, ReconciliationRunBreak, ReferenceList, RelationDefinition, ReturnBlockIndex, SRSDocument, SRSIndex, TransactionTemplate, TransactionTemplateScope, TransactionType, TransactionTypeConfig, TranslationScript, TaskDefinition, TaskInstance, Worker, StagingRuleSet, IdentifierDefinition
   */
  @JsonAdapter(DomainEnum.Adapter.class)
  public enum DomainEnum {
    NOTDEFINED("NotDefined"),
    
    TRANSACTION("Transaction"),
    
    PORTFOLIO("Portfolio"),
    
    HOLDING("Holding"),
    
    REFERENCEHOLDING("ReferenceHolding"),
    
    TRANSACTIONCONFIGURATION("TransactionConfiguration"),
    
    INSTRUMENT("Instrument"),
    
    CUTLABELDEFINITION("CutLabelDefinition"),
    
    ANALYTIC("Analytic"),
    
    PORTFOLIOGROUP("PortfolioGroup"),
    
    PERSON("Person"),
    
    ACCESSMETADATA("AccessMetadata"),
    
    ORDER("Order"),
    
    UNITRESULT("UnitResult"),
    
    MARKETDATA("MarketData"),
    
    CONFIGURATIONRECIPE("ConfigurationRecipe"),
    
    ALLOCATION("Allocation"),
    
    CALENDAR("Calendar"),
    
    LEGALENTITY("LegalEntity"),
    
    INVESTORRECORD("InvestorRecord"),
    
    PLACEMENT("Placement"),
    
    EXECUTION("Execution"),
    
    BLOCK("Block"),
    
    PARTICIPATION("Participation"),
    
    PACKAGE("Package"),
    
    ORDERINSTRUCTION("OrderInstruction"),
    
    NEXTBESTACTION("NextBestAction"),
    
    CUSTOMENTITY("CustomEntity"),
    
    INSTRUMENTEVENT("InstrumentEvent"),
    
    ACCOUNT("Account"),
    
    CHARTOFACCOUNTS("ChartOfAccounts"),
    
    CUSTODIANACCOUNT("CustodianAccount"),
    
    ABOR("Abor"),
    
    ABORCONFIGURATION("AborConfiguration"),
    
    FUND("Fund"),
    
    FUNDCONFIGURATION("FundConfiguration"),
    
    FEE("Fee"),
    
    RECONCILIATION("Reconciliation"),
    
    PROPERTYDEFINITION("PropertyDefinition"),
    
    COMPLIANCE("Compliance"),
    
    DIARYENTRY("DiaryEntry"),
    
    LEG("Leg"),
    
    DERIVEDVALUATION("DerivedValuation"),
    
    TIMELINE("Timeline"),
    
    CLOSEDPERIOD("ClosedPeriod"),
    
    ADDRESSKEYDEFINITION("AddressKeyDefinition"),
    
    AMORTISATIONRULESET("AmortisationRuleSet"),
    
    ANALYTICSSETINVENTORY("AnalyticsSetInventory"),
    
    ATOMUNITRESULT("AtomUnitResult"),
    
    CLEARDOWNMODULE("CleardownModule"),
    
    COMPLEXMARKETDATA("ComplexMarketData"),
    
    COMPLIANCERUNSUMMARY("ComplianceRunSummary"),
    
    COMPLIANCERULE("ComplianceRule"),
    
    COMPLIANCERUNINFO("ComplianceRunInfo"),
    
    CORPORATEACTIONSOURCE("CorporateActionSource"),
    
    COUNTERPARTYAGREEMENT("CounterpartyAgreement"),
    
    CUSTOMENTITYDEFINITION("CustomEntityDefinition"),
    
    DATATYPE("DataType"),
    
    DIALECT("Dialect"),
    
    EVENTHANDLER("EventHandler"),
    
    GENERALLEDGERPROFILE("GeneralLedgerProfile"),
    
    POSTINGMODULE("PostingModule"),
    
    QUOTE("Quote"),
    
    RECIPECOMPOSER("RecipeComposer"),
    
    RECONCILIATIONRUNBREAK("ReconciliationRunBreak"),
    
    REFERENCELIST("ReferenceList"),
    
    RELATIONDEFINITION("RelationDefinition"),
    
    RETURNBLOCKINDEX("ReturnBlockIndex"),
    
    SRSDOCUMENT("SRSDocument"),
    
    SRSINDEX("SRSIndex"),
    
    TRANSACTIONTEMPLATE("TransactionTemplate"),
    
    TRANSACTIONTEMPLATESCOPE("TransactionTemplateScope"),
    
    TRANSACTIONTYPE("TransactionType"),
    
    TRANSACTIONTYPECONFIG("TransactionTypeConfig"),
    
    TRANSLATIONSCRIPT("TranslationScript"),
    
    TASKDEFINITION("TaskDefinition"),
    
    TASKINSTANCE("TaskInstance"),
    
    WORKER("Worker"),
    
    STAGINGRULESET("StagingRuleSet"),
    
    IDENTIFIERDEFINITION("IdentifierDefinition");

    private String value;

    DomainEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DomainEnum fromValue(String value) {
      for (DomainEnum b : DomainEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DomainEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DomainEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DomainEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DomainEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_DOMAIN = "domain";
  @SerializedName(SERIALIZED_NAME_DOMAIN)
  private DomainEnum domain;

  public static final String SERIALIZED_NAME_IDENTIFIER_SCOPE = "identifierScope";
  @SerializedName(SERIALIZED_NAME_IDENTIFIER_SCOPE)
  private String identifierScope;

  public static final String SERIALIZED_NAME_IDENTIFIER_TYPE = "identifierType";
  @SerializedName(SERIALIZED_NAME_IDENTIFIER_TYPE)
  private String identifierType;

  /**
   * Describes whether an identifier value is associated with an entity for all effective dates (“Perpetual”) or applies within a specified effective date range (“TimeVariant”). The available values are: Perpetual, TimeVariant
   */
  @JsonAdapter(LifeTimeEnum.Adapter.class)
  public enum LifeTimeEnum {
    PERPETUAL("Perpetual"),
    
    TIMEVARIANT("TimeVariant");

    private String value;

    LifeTimeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LifeTimeEnum fromValue(String value) {
      for (LifeTimeEnum b : LifeTimeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LifeTimeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LifeTimeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LifeTimeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LifeTimeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_LIFE_TIME = "lifeTime";
  @SerializedName(SERIALIZED_NAME_LIFE_TIME)
  private LifeTimeEnum lifeTime;

  public static final String SERIALIZED_NAME_HIERARCHY_USAGE = "hierarchyUsage";
  @SerializedName(SERIALIZED_NAME_HIERARCHY_USAGE)
  private String hierarchyUsage;

  public static final String SERIALIZED_NAME_HIERARCHY_LEVEL = "hierarchyLevel";
  @SerializedName(SERIALIZED_NAME_HIERARCHY_LEVEL)
  private String hierarchyLevel;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_PROPERTIES = "properties";
  @SerializedName(SERIALIZED_NAME_PROPERTIES)
  private Map<String, Property> properties;

  public CreateIdentifierDefinitionRequest() {
  }

  public CreateIdentifierDefinitionRequest domain(DomainEnum domain) {
    
    this.domain = domain;
    return this;
  }

   /**
   * The type of entity to which the identifier can be attached. Supported values are \&quot;Instrument\&quot;, \&quot;Person\&quot;, \&quot;LegalEntity\&quot;and \&quot;CustomEntity\&quot;. The available values are: NotDefined, Transaction, Portfolio, Holding, ReferenceHolding, TransactionConfiguration, Instrument, CutLabelDefinition, Analytic, PortfolioGroup, Person, AccessMetadata, Order, UnitResult, MarketData, ConfigurationRecipe, Allocation, Calendar, LegalEntity, InvestorRecord, Placement, Execution, Block, Participation, Package, OrderInstruction, NextBestAction, CustomEntity, InstrumentEvent, Account, ChartOfAccounts, CustodianAccount, Abor, AborConfiguration, Fund, FundConfiguration, Fee, Reconciliation, PropertyDefinition, Compliance, DiaryEntry, Leg, DerivedValuation, Timeline, ClosedPeriod, AddressKeyDefinition, AmortisationRuleSet, AnalyticsSetInventory, AtomUnitResult, CleardownModule, ComplexMarketData, ComplianceRunSummary, ComplianceRule, ComplianceRunInfo, CorporateActionSource, CounterpartyAgreement, CustomEntityDefinition, DataType, Dialect, EventHandler, GeneralLedgerProfile, PostingModule, Quote, RecipeComposer, ReconciliationRunBreak, ReferenceList, RelationDefinition, ReturnBlockIndex, SRSDocument, SRSIndex, TransactionTemplate, TransactionTemplateScope, TransactionType, TransactionTypeConfig, TranslationScript, TaskDefinition, TaskInstance, Worker, StagingRuleSet, IdentifierDefinition
   * @return domain
  **/
  @jakarta.annotation.Nonnull
  public DomainEnum getDomain() {
    return domain;
  }


  public void setDomain(DomainEnum domain) {
    this.domain = domain;
  }


  public CreateIdentifierDefinitionRequest identifierScope(String identifierScope) {
    
    this.identifierScope = identifierScope;
    return this;
  }

   /**
   * The scope that the identifier definition exists in.
   * @return identifierScope
  **/
  @jakarta.annotation.Nonnull
  public String getIdentifierScope() {
    return identifierScope;
  }


  public void setIdentifierScope(String identifierScope) {
    this.identifierScope = identifierScope;
  }


  public CreateIdentifierDefinitionRequest identifierType(String identifierType) {
    
    this.identifierType = identifierType;
    return this;
  }

   /**
   * What the identifier represents. Together with \&quot;domain\&quot; and \&quot;identifierScope\&quot; this uniquely identifies the identifier definition.
   * @return identifierType
  **/
  @jakarta.annotation.Nonnull
  public String getIdentifierType() {
    return identifierType;
  }


  public void setIdentifierType(String identifierType) {
    this.identifierType = identifierType;
  }


  public CreateIdentifierDefinitionRequest lifeTime(LifeTimeEnum lifeTime) {
    
    this.lifeTime = lifeTime;
    return this;
  }

   /**
   * Describes whether an identifier value is associated with an entity for all effective dates (“Perpetual”) or applies within a specified effective date range (“TimeVariant”). The available values are: Perpetual, TimeVariant
   * @return lifeTime
  **/
  @jakarta.annotation.Nonnull
  public LifeTimeEnum getLifeTime() {
    return lifeTime;
  }


  public void setLifeTime(LifeTimeEnum lifeTime) {
    this.lifeTime = lifeTime;
  }


  public CreateIdentifierDefinitionRequest hierarchyUsage(String hierarchyUsage) {
    
    this.hierarchyUsage = hierarchyUsage;
    return this;
  }

   /**
   * Nullable, defaults to \&quot;MasterIdentifier\&quot; if no value provided. \&quot;MasterIdentifier\&quot; (aka unique) An entity can have one value for this identifier definition on a given effective date. A value for this identifier definition can only be associated with one entity (in a given scope) on a given effective date. \&quot;ParentIdentifier\&quot; (aka non-unique) An entity can have one value for this identifier definition on a given effective date. A value for this identifier definition can be associated with many entities (in a given scope) on a given effective date.
   * @return hierarchyUsage
  **/
  @jakarta.annotation.Nullable
  public String getHierarchyUsage() {
    return hierarchyUsage;
  }


  public void setHierarchyUsage(String hierarchyUsage) {
    this.hierarchyUsage = hierarchyUsage;
  }


  public CreateIdentifierDefinitionRequest hierarchyLevel(String hierarchyLevel) {
    
    this.hierarchyLevel = hierarchyLevel;
    return this;
  }

   /**
   * Optional metadata associated with the identifier definition.
   * @return hierarchyLevel
  **/
  @jakarta.annotation.Nullable
  public String getHierarchyLevel() {
    return hierarchyLevel;
  }


  public void setHierarchyLevel(String hierarchyLevel) {
    this.hierarchyLevel = hierarchyLevel;
  }


  public CreateIdentifierDefinitionRequest displayName(String displayName) {
    
    this.displayName = displayName;
    return this;
  }

   /**
   * A display name for the identifier. E.g. Figi.
   * @return displayName
  **/
  @jakarta.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }


  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public CreateIdentifierDefinitionRequest description(String description) {
    
    this.description = description;
    return this;
  }

   /**
   * An optional description for the identifier.
   * @return description
  **/
  @jakarta.annotation.Nullable
  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    this.description = description;
  }


  public CreateIdentifierDefinitionRequest properties(Map<String, Property> properties) {
    
    this.properties = properties;
    return this;
  }

  public CreateIdentifierDefinitionRequest putPropertiesItem(String key, Property propertiesItem) {
    if (this.properties == null) {
      this.properties = new HashMap<>();
    }
    this.properties.put(key, propertiesItem);
    return this;
  }

   /**
   * A set of properties for the identifier definition.
   * @return properties
  **/
  @jakarta.annotation.Nullable
  public Map<String, Property> getProperties() {
    return properties;
  }


  public void setProperties(Map<String, Property> properties) {
    this.properties = properties;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateIdentifierDefinitionRequest createIdentifierDefinitionRequest = (CreateIdentifierDefinitionRequest) o;
    return Objects.equals(this.domain, createIdentifierDefinitionRequest.domain) &&
        Objects.equals(this.identifierScope, createIdentifierDefinitionRequest.identifierScope) &&
        Objects.equals(this.identifierType, createIdentifierDefinitionRequest.identifierType) &&
        Objects.equals(this.lifeTime, createIdentifierDefinitionRequest.lifeTime) &&
        Objects.equals(this.hierarchyUsage, createIdentifierDefinitionRequest.hierarchyUsage) &&
        Objects.equals(this.hierarchyLevel, createIdentifierDefinitionRequest.hierarchyLevel) &&
        Objects.equals(this.displayName, createIdentifierDefinitionRequest.displayName) &&
        Objects.equals(this.description, createIdentifierDefinitionRequest.description) &&
        Objects.equals(this.properties, createIdentifierDefinitionRequest.properties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(domain, identifierScope, identifierType, lifeTime, hierarchyUsage, hierarchyLevel, displayName, description, properties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateIdentifierDefinitionRequest {\n");
    sb.append("    domain: ").append(toIndentedString(domain)).append("\n");
    sb.append("    identifierScope: ").append(toIndentedString(identifierScope)).append("\n");
    sb.append("    identifierType: ").append(toIndentedString(identifierType)).append("\n");
    sb.append("    lifeTime: ").append(toIndentedString(lifeTime)).append("\n");
    sb.append("    hierarchyUsage: ").append(toIndentedString(hierarchyUsage)).append("\n");
    sb.append("    hierarchyLevel: ").append(toIndentedString(hierarchyLevel)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("domain");
    openapiFields.add("identifierScope");
    openapiFields.add("identifierType");
    openapiFields.add("lifeTime");
    openapiFields.add("hierarchyUsage");
    openapiFields.add("hierarchyLevel");
    openapiFields.add("displayName");
    openapiFields.add("description");
    openapiFields.add("properties");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("domain");
    openapiRequiredFields.add("identifierScope");
    openapiRequiredFields.add("identifierType");
    openapiRequiredFields.add("lifeTime");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to CreateIdentifierDefinitionRequest
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateIdentifierDefinitionRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateIdentifierDefinitionRequest is not found in the empty JSON string", CreateIdentifierDefinitionRequest.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateIdentifierDefinitionRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("domain").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `domain` to be a primitive type in the JSON string but got `%s`", jsonObj.get("domain").toString()));
      }
      if (!jsonObj.get("identifierScope").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `identifierScope` to be a primitive type in the JSON string but got `%s`", jsonObj.get("identifierScope").toString()));
      }
      if (!jsonObj.get("identifierType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `identifierType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("identifierType").toString()));
      }
      if (!jsonObj.get("lifeTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lifeTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lifeTime").toString()));
      }
      if ((jsonObj.get("hierarchyUsage") != null && !jsonObj.get("hierarchyUsage").isJsonNull()) && !jsonObj.get("hierarchyUsage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hierarchyUsage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hierarchyUsage").toString()));
      }
      if ((jsonObj.get("hierarchyLevel") != null && !jsonObj.get("hierarchyLevel").isJsonNull()) && !jsonObj.get("hierarchyLevel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hierarchyLevel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hierarchyLevel").toString()));
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateIdentifierDefinitionRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateIdentifierDefinitionRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateIdentifierDefinitionRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateIdentifierDefinitionRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateIdentifierDefinitionRequest>() {
           @Override
           public void write(JsonWriter out, CreateIdentifierDefinitionRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateIdentifierDefinitionRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CreateIdentifierDefinitionRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CreateIdentifierDefinitionRequest
  * @throws IOException if the JSON string is invalid with respect to CreateIdentifierDefinitionRequest
  */
  public static CreateIdentifierDefinitionRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateIdentifierDefinitionRequest.class);
  }

 /**
  * Convert an instance of CreateIdentifierDefinitionRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
