/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import com.finbourne.lusid.model.ResourceId;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * ContributionToNonPassingRuleDetail
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ContributionToNonPassingRuleDetail {
  public static final String SERIALIZED_NAME_RULE_ID = "ruleId";
  @SerializedName(SERIALIZED_NAME_RULE_ID)
  private ResourceId ruleId;

  public static final String SERIALIZED_NAME_RULE_STATUS = "ruleStatus";
  @SerializedName(SERIALIZED_NAME_RULE_STATUS)
  private String ruleStatus;

  public static final String SERIALIZED_NAME_BREACH_TASK_IDS = "breachTaskIds";
  @SerializedName(SERIALIZED_NAME_BREACH_TASK_IDS)
  private List<String> breachTaskIds;

  public static final String SERIALIZED_NAME_LIKELY_RESPONSIBLE_FOR_STATUS = "likelyResponsibleForStatus";
  @SerializedName(SERIALIZED_NAME_LIKELY_RESPONSIBLE_FOR_STATUS)
  private Boolean likelyResponsibleForStatus;

  public ContributionToNonPassingRuleDetail() {
  }

  public ContributionToNonPassingRuleDetail ruleId(ResourceId ruleId) {
    
    this.ruleId = ruleId;
    return this;
  }

   /**
   * Get ruleId
   * @return ruleId
  **/
  @jakarta.annotation.Nullable
  public ResourceId getRuleId() {
    return ruleId;
  }


  public void setRuleId(ResourceId ruleId) {
    this.ruleId = ruleId;
  }


  public ContributionToNonPassingRuleDetail ruleStatus(String ruleStatus) {
    
    this.ruleStatus = ruleStatus;
    return this;
  }

   /**
   * The status of the non-passing rule.
   * @return ruleStatus
  **/
  @jakarta.annotation.Nullable
  public String getRuleStatus() {
    return ruleStatus;
  }


  public void setRuleStatus(String ruleStatus) {
    this.ruleStatus = ruleStatus;
  }


  public ContributionToNonPassingRuleDetail breachTaskIds(List<String> breachTaskIds) {
    
    this.breachTaskIds = breachTaskIds;
    return this;
  }

  public ContributionToNonPassingRuleDetail addBreachTaskIdsItem(String breachTaskIdsItem) {
    if (this.breachTaskIds == null) {
      this.breachTaskIds = new ArrayList<>();
    }
    this.breachTaskIds.add(breachTaskIdsItem);
    return this;
  }

   /**
   * The task ids associated with the compliance breach for this order&#39;s groups (if failing).
   * @return breachTaskIds
  **/
  @jakarta.annotation.Nullable
  public List<String> getBreachTaskIds() {
    return breachTaskIds;
  }


  public void setBreachTaskIds(List<String> breachTaskIds) {
    this.breachTaskIds = breachTaskIds;
  }


  public ContributionToNonPassingRuleDetail likelyResponsibleForStatus(Boolean likelyResponsibleForStatus) {
    
    this.likelyResponsibleForStatus = likelyResponsibleForStatus;
    return this;
  }

   /**
   * Whether this order is deemed as a likely contributor to the non-passing rule for this group.
   * @return likelyResponsibleForStatus
  **/
  @jakarta.annotation.Nullable
  public Boolean getLikelyResponsibleForStatus() {
    return likelyResponsibleForStatus;
  }


  public void setLikelyResponsibleForStatus(Boolean likelyResponsibleForStatus) {
    this.likelyResponsibleForStatus = likelyResponsibleForStatus;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ContributionToNonPassingRuleDetail contributionToNonPassingRuleDetail = (ContributionToNonPassingRuleDetail) o;
    return Objects.equals(this.ruleId, contributionToNonPassingRuleDetail.ruleId) &&
        Objects.equals(this.ruleStatus, contributionToNonPassingRuleDetail.ruleStatus) &&
        Objects.equals(this.breachTaskIds, contributionToNonPassingRuleDetail.breachTaskIds) &&
        Objects.equals(this.likelyResponsibleForStatus, contributionToNonPassingRuleDetail.likelyResponsibleForStatus);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(ruleId, ruleStatus, breachTaskIds, likelyResponsibleForStatus);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ContributionToNonPassingRuleDetail {\n");
    sb.append("    ruleId: ").append(toIndentedString(ruleId)).append("\n");
    sb.append("    ruleStatus: ").append(toIndentedString(ruleStatus)).append("\n");
    sb.append("    breachTaskIds: ").append(toIndentedString(breachTaskIds)).append("\n");
    sb.append("    likelyResponsibleForStatus: ").append(toIndentedString(likelyResponsibleForStatus)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ruleId");
    openapiFields.add("ruleStatus");
    openapiFields.add("breachTaskIds");
    openapiFields.add("likelyResponsibleForStatus");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ContributionToNonPassingRuleDetail
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ContributionToNonPassingRuleDetail.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ContributionToNonPassingRuleDetail is not found in the empty JSON string", ContributionToNonPassingRuleDetail.openapiRequiredFields.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `ruleId`
      if (jsonObj.get("ruleId") != null && !jsonObj.get("ruleId").isJsonNull()) {
        ResourceId.validateJsonElement(jsonObj.get("ruleId"));
      }
      if ((jsonObj.get("ruleStatus") != null && !jsonObj.get("ruleStatus").isJsonNull()) && !jsonObj.get("ruleStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ruleStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ruleStatus").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("breachTaskIds") != null && !jsonObj.get("breachTaskIds").isJsonNull() && !jsonObj.get("breachTaskIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `breachTaskIds` to be an array in the JSON string but got `%s`", jsonObj.get("breachTaskIds").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ContributionToNonPassingRuleDetail.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ContributionToNonPassingRuleDetail' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ContributionToNonPassingRuleDetail> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ContributionToNonPassingRuleDetail.class));

       return (TypeAdapter<T>) new TypeAdapter<ContributionToNonPassingRuleDetail>() {
           @Override
           public void write(JsonWriter out, ContributionToNonPassingRuleDetail value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ContributionToNonPassingRuleDetail read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ContributionToNonPassingRuleDetail given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ContributionToNonPassingRuleDetail
  * @throws IOException if the JSON string is invalid with respect to ContributionToNonPassingRuleDetail
  */
  public static ContributionToNonPassingRuleDetail fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ContributionToNonPassingRuleDetail.class);
  }

 /**
  * Convert an instance of ContributionToNonPassingRuleDetail to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
