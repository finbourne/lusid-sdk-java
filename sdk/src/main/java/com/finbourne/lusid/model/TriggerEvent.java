/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import com.finbourne.lusid.model.InstrumentEvent;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * Definition of a trigger event.  This is an event that occurs on transformation of an option instrument being  triggered by a barrier/touch price level being hit by the underlying asset.
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class TriggerEvent extends InstrumentEvent {
  public static final String SERIALIZED_NAME_LEVEL = "level";
  @SerializedName(SERIALIZED_NAME_LEVEL)
  private java.math.BigDecimal level;

  public static final String SERIALIZED_NAME_TRIGGER_TYPE = "triggerType";
  @SerializedName(SERIALIZED_NAME_TRIGGER_TYPE)
  private String triggerType;

  public static final String SERIALIZED_NAME_TRIGGER_DIRECTION = "triggerDirection";
  @SerializedName(SERIALIZED_NAME_TRIGGER_DIRECTION)
  private String triggerDirection;

  public static final String SERIALIZED_NAME_TRIGGER_DATE = "triggerDate";
  @SerializedName(SERIALIZED_NAME_TRIGGER_DATE)
  private OffsetDateTime triggerDate;

  public static final String SERIALIZED_NAME_MATURITY_DATE = "maturityDate";
  @SerializedName(SERIALIZED_NAME_MATURITY_DATE)
  private OffsetDateTime maturityDate;

  public TriggerEvent() {
    // this.instrumentEventType = this.getClass().getSimpleName();
  }

  public TriggerEvent level(java.math.BigDecimal level) {
    
    this.level = level;
    return this;
  }

   /**
   * The underlying price level that triggers the event
   * @return level
  **/
  @jakarta.annotation.Nonnull
  public java.math.BigDecimal getLevel() {
    return level;
  }


  public void setLevel(java.math.BigDecimal level) {
    this.level = level;
  }


  public TriggerEvent triggerType(String triggerType) {
    
    this.triggerType = triggerType;
    return this;
  }

   /**
   * The type of the trigger; valid options are Knock-In, Knock-Out, Touch or No-Touch
   * @return triggerType
  **/
  @jakarta.annotation.Nonnull
  public String getTriggerType() {
    return triggerType;
  }


  public void setTriggerType(String triggerType) {
    this.triggerType = triggerType;
  }


  public TriggerEvent triggerDirection(String triggerDirection) {
    
    this.triggerDirection = triggerDirection;
    return this;
  }

   /**
   * The direction of the trigger; valid options are Up and Down
   * @return triggerDirection
  **/
  @jakarta.annotation.Nonnull
  public String getTriggerDirection() {
    return triggerDirection;
  }


  public void setTriggerDirection(String triggerDirection) {
    this.triggerDirection = triggerDirection;
  }


  public TriggerEvent triggerDate(OffsetDateTime triggerDate) {
    
    this.triggerDate = triggerDate;
    return this;
  }

   /**
   * The date the trigger happens at.
   * @return triggerDate
  **/
  @jakarta.annotation.Nonnull
  public OffsetDateTime getTriggerDate() {
    return triggerDate;
  }


  public void setTriggerDate(OffsetDateTime triggerDate) {
    this.triggerDate = triggerDate;
  }


  public TriggerEvent maturityDate(OffsetDateTime maturityDate) {
    
    this.maturityDate = maturityDate;
    return this;
  }

   /**
   * The date the trigger takes effect.
   * @return maturityDate
  **/
  @jakarta.annotation.Nonnull
  public OffsetDateTime getMaturityDate() {
    return maturityDate;
  }


  public void setMaturityDate(OffsetDateTime maturityDate) {
    this.maturityDate = maturityDate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TriggerEvent triggerEvent = (TriggerEvent) o;
    return (this.level.compareTo(triggerEvent.getLevel()) == 0) &&
        Objects.equals(this.triggerType, triggerEvent.triggerType) &&
        Objects.equals(this.triggerDirection, triggerEvent.triggerDirection) &&
        Objects.equals(this.triggerDate, triggerEvent.triggerDate) &&
        Objects.equals(this.maturityDate, triggerEvent.maturityDate) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(level, triggerType, triggerDirection, triggerDate, maturityDate, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TriggerEvent {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    level: ").append(toIndentedString(level)).append("\n");
    sb.append("    triggerType: ").append(toIndentedString(triggerType)).append("\n");
    sb.append("    triggerDirection: ").append(toIndentedString(triggerDirection)).append("\n");
    sb.append("    triggerDate: ").append(toIndentedString(triggerDate)).append("\n");
    sb.append("    maturityDate: ").append(toIndentedString(maturityDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("instrumentEventType");
    openapiFields.add("level");
    openapiFields.add("triggerType");
    openapiFields.add("triggerDirection");
    openapiFields.add("triggerDate");
    openapiFields.add("maturityDate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("level");
    openapiRequiredFields.add("triggerType");
    openapiRequiredFields.add("triggerDirection");
    openapiRequiredFields.add("triggerDate");
    openapiRequiredFields.add("maturityDate");
    openapiRequiredFields.add("instrumentEventType");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to TriggerEvent
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!TriggerEvent.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TriggerEvent is not found in the empty JSON string", TriggerEvent.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!TriggerEvent.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TriggerEvent` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TriggerEvent.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TriggerEvent.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TriggerEvent' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TriggerEvent> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TriggerEvent.class));

       return (TypeAdapter<T>) new TypeAdapter<TriggerEvent>() {
           @Override
           public void write(JsonWriter out, TriggerEvent value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TriggerEvent read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TriggerEvent given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TriggerEvent
  * @throws IOException if the JSON string is invalid with respect to TriggerEvent
  */
  public static TriggerEvent fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TriggerEvent.class);
  }

 /**
  * Convert an instance of TriggerEvent to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
