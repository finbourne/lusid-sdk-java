/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import com.finbourne.lusid.model.ApplicableEntity;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * UpsertRelationalDataPointDataSeries
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class UpsertRelationalDataPointDataSeries {
  public static final String SERIALIZED_NAME_SERIES_SCOPE = "seriesScope";
  @SerializedName(SERIALIZED_NAME_SERIES_SCOPE)
  private String seriesScope;

  public static final String SERIALIZED_NAME_APPLICABLE_ENTITY = "applicableEntity";
  @SerializedName(SERIALIZED_NAME_APPLICABLE_ENTITY)
  private ApplicableEntity applicableEntity;

  public static final String SERIALIZED_NAME_SERIES_IDENTIFIERS = "seriesIdentifiers";
  @SerializedName(SERIALIZED_NAME_SERIES_IDENTIFIERS)
  private Map<String, Object> seriesIdentifiers = new HashMap<>();

  public UpsertRelationalDataPointDataSeries() {
  }

  public UpsertRelationalDataPointDataSeries seriesScope(String seriesScope) {
    
    this.seriesScope = seriesScope;
    return this;
  }

   /**
   * The scope of the DataSeries.
   * @return seriesScope
  **/
  @jakarta.annotation.Nonnull
  public String getSeriesScope() {
    return seriesScope;
  }


  public void setSeriesScope(String seriesScope) {
    this.seriesScope = seriesScope;
  }


  public UpsertRelationalDataPointDataSeries applicableEntity(ApplicableEntity applicableEntity) {
    
    this.applicableEntity = applicableEntity;
    return this;
  }

   /**
   * Get applicableEntity
   * @return applicableEntity
  **/
  @jakarta.annotation.Nonnull
  public ApplicableEntity getApplicableEntity() {
    return applicableEntity;
  }


  public void setApplicableEntity(ApplicableEntity applicableEntity) {
    this.applicableEntity = applicableEntity;
  }


  public UpsertRelationalDataPointDataSeries seriesIdentifiers(Map<String, Object> seriesIdentifiers) {
    
    this.seriesIdentifiers = seriesIdentifiers;
    return this;
  }

  public UpsertRelationalDataPointDataSeries putSeriesIdentifiersItem(String key, Object seriesIdentifiersItem) {
    if (this.seriesIdentifiers == null) {
      this.seriesIdentifiers = new HashMap<>();
    }
    this.seriesIdentifiers.put(key, seriesIdentifiersItem);
    return this;
  }

   /**
   * The identifiers that uniquely define this DataSeries, structured according to the FieldSchema of the parent RelationalDatasetDefinition.
   * @return seriesIdentifiers
  **/
  @jakarta.annotation.Nonnull
  public Map<String, Object> getSeriesIdentifiers() {
    return seriesIdentifiers;
  }


  public void setSeriesIdentifiers(Map<String, Object> seriesIdentifiers) {
    this.seriesIdentifiers = seriesIdentifiers;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpsertRelationalDataPointDataSeries upsertRelationalDataPointDataSeries = (UpsertRelationalDataPointDataSeries) o;
    return Objects.equals(this.seriesScope, upsertRelationalDataPointDataSeries.seriesScope) &&
        Objects.equals(this.applicableEntity, upsertRelationalDataPointDataSeries.applicableEntity) &&
        Objects.equals(this.seriesIdentifiers, upsertRelationalDataPointDataSeries.seriesIdentifiers);
  }

  @Override
  public int hashCode() {
    return Objects.hash(seriesScope, applicableEntity, seriesIdentifiers);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpsertRelationalDataPointDataSeries {\n");
    sb.append("    seriesScope: ").append(toIndentedString(seriesScope)).append("\n");
    sb.append("    applicableEntity: ").append(toIndentedString(applicableEntity)).append("\n");
    sb.append("    seriesIdentifiers: ").append(toIndentedString(seriesIdentifiers)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("seriesScope");
    openapiFields.add("applicableEntity");
    openapiFields.add("seriesIdentifiers");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("seriesScope");
    openapiRequiredFields.add("applicableEntity");
    openapiRequiredFields.add("seriesIdentifiers");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to UpsertRelationalDataPointDataSeries
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpsertRelationalDataPointDataSeries.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpsertRelationalDataPointDataSeries is not found in the empty JSON string", UpsertRelationalDataPointDataSeries.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UpsertRelationalDataPointDataSeries.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("seriesScope").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `seriesScope` to be a primitive type in the JSON string but got `%s`", jsonObj.get("seriesScope").toString()));
      }
      // validate the required field `applicableEntity`
      ApplicableEntity.validateJsonElement(jsonObj.get("applicableEntity"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpsertRelationalDataPointDataSeries.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpsertRelationalDataPointDataSeries' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpsertRelationalDataPointDataSeries> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpsertRelationalDataPointDataSeries.class));

       return (TypeAdapter<T>) new TypeAdapter<UpsertRelationalDataPointDataSeries>() {
           @Override
           public void write(JsonWriter out, UpsertRelationalDataPointDataSeries value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpsertRelationalDataPointDataSeries read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of UpsertRelationalDataPointDataSeries given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of UpsertRelationalDataPointDataSeries
  * @throws IOException if the JSON string is invalid with respect to UpsertRelationalDataPointDataSeries
  */
  public static UpsertRelationalDataPointDataSeries fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpsertRelationalDataPointDataSeries.class);
  }

 /**
  * Convert an instance of UpsertRelationalDataPointDataSeries to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
