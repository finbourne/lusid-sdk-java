/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import com.finbourne.lusid.model.InstrumentEvent;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * Definition of FlexibleRepoInterestPaymentEvent, which represents the regular interest payments associated with an  open repo contract modelled as a FlexibleRepo.
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class FlexibleRepoInterestPaymentEvent extends InstrumentEvent {
  public static final String SERIALIZED_NAME_SETTLEMENT_DATE = "settlementDate";
  @SerializedName(SERIALIZED_NAME_SETTLEMENT_DATE)
  private OffsetDateTime settlementDate;

  public static final String SERIALIZED_NAME_ENTITLEMENT_DATE = "entitlementDate";
  @SerializedName(SERIALIZED_NAME_ENTITLEMENT_DATE)
  private OffsetDateTime entitlementDate;

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private String currency;

  public static final String SERIALIZED_NAME_INTEREST_PER_UNIT = "interestPerUnit";
  @SerializedName(SERIALIZED_NAME_INTEREST_PER_UNIT)
  private java.math.BigDecimal interestPerUnit;

  public FlexibleRepoInterestPaymentEvent() {
    // this.instrumentEventType = this.getClass().getSimpleName();
  }

  public FlexibleRepoInterestPaymentEvent settlementDate(OffsetDateTime settlementDate) {
    
    this.settlementDate = settlementDate;
    return this;
  }

   /**
   * Settlement date of the interest payment. This is a required field.
   * @return settlementDate
  **/
  @jakarta.annotation.Nullable
  public OffsetDateTime getSettlementDate() {
    return settlementDate;
  }


  public void setSettlementDate(OffsetDateTime settlementDate) {
    this.settlementDate = settlementDate;
  }


  public FlexibleRepoInterestPaymentEvent entitlementDate(OffsetDateTime entitlementDate) {
    
    this.entitlementDate = entitlementDate;
    return this;
  }

   /**
   * EntitlementDate of the interest payment. This is a required field.
   * @return entitlementDate
  **/
  @jakarta.annotation.Nullable
  public OffsetDateTime getEntitlementDate() {
    return entitlementDate;
  }


  public void setEntitlementDate(OffsetDateTime entitlementDate) {
    this.entitlementDate = entitlementDate;
  }


  public FlexibleRepoInterestPaymentEvent currency(String currency) {
    
    this.currency = currency;
    return this;
  }

   /**
   * Currency of the interest payment. This is a required field.
   * @return currency
  **/
  @jakarta.annotation.Nonnull
  public String getCurrency() {
    return currency;
  }


  public void setCurrency(String currency) {
    this.currency = currency;
  }


  public FlexibleRepoInterestPaymentEvent interestPerUnit(java.math.BigDecimal interestPerUnit) {
    
    this.interestPerUnit = interestPerUnit;
    return this;
  }

   /**
   * Interest payment per unit held of the FlexibleRepo. This field is optional. If not specified, the system  will not generate a virtual transaction for this event
   * @return interestPerUnit
  **/
  @jakarta.annotation.Nullable
  public java.math.BigDecimal getInterestPerUnit() {
    return interestPerUnit;
  }


  public void setInterestPerUnit(java.math.BigDecimal interestPerUnit) {
    this.interestPerUnit = interestPerUnit;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FlexibleRepoInterestPaymentEvent flexibleRepoInterestPaymentEvent = (FlexibleRepoInterestPaymentEvent) o;
    return Objects.equals(this.settlementDate, flexibleRepoInterestPaymentEvent.settlementDate) &&
        Objects.equals(this.entitlementDate, flexibleRepoInterestPaymentEvent.entitlementDate) &&
        Objects.equals(this.currency, flexibleRepoInterestPaymentEvent.currency) &&
        (this.interestPerUnit.compareTo(flexibleRepoInterestPaymentEvent.getInterestPerUnit()) == 0) &&
        super.equals(o);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(settlementDate, entitlementDate, currency, interestPerUnit, super.hashCode());
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FlexibleRepoInterestPaymentEvent {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    settlementDate: ").append(toIndentedString(settlementDate)).append("\n");
    sb.append("    entitlementDate: ").append(toIndentedString(entitlementDate)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    interestPerUnit: ").append(toIndentedString(interestPerUnit)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("instrumentEventType");
    openapiFields.add("settlementDate");
    openapiFields.add("entitlementDate");
    openapiFields.add("currency");
    openapiFields.add("interestPerUnit");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("currency");
    openapiRequiredFields.add("instrumentEventType");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to FlexibleRepoInterestPaymentEvent
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FlexibleRepoInterestPaymentEvent.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FlexibleRepoInterestPaymentEvent is not found in the empty JSON string", FlexibleRepoInterestPaymentEvent.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : FlexibleRepoInterestPaymentEvent.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FlexibleRepoInterestPaymentEvent.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FlexibleRepoInterestPaymentEvent' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FlexibleRepoInterestPaymentEvent> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FlexibleRepoInterestPaymentEvent.class));

       return (TypeAdapter<T>) new TypeAdapter<FlexibleRepoInterestPaymentEvent>() {
           @Override
           public void write(JsonWriter out, FlexibleRepoInterestPaymentEvent value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FlexibleRepoInterestPaymentEvent read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of FlexibleRepoInterestPaymentEvent given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of FlexibleRepoInterestPaymentEvent
  * @throws IOException if the JSON string is invalid with respect to FlexibleRepoInterestPaymentEvent
  */
  public static FlexibleRepoInterestPaymentEvent fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FlexibleRepoInterestPaymentEvent.class);
  }

 /**
  * Convert an instance of FlexibleRepoInterestPaymentEvent to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
