/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import com.finbourne.lusid.model.InstrumentPaymentDiaryRow;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * A leg containing a set of cashflows.
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class InstrumentPaymentDiaryLeg {
  public static final String SERIALIZED_NAME_LEG_INDEX = "legIndex";
  @SerializedName(SERIALIZED_NAME_LEG_INDEX)
  private Integer legIndex;

  public static final String SERIALIZED_NAME_LEG_ID = "legId";
  @SerializedName(SERIALIZED_NAME_LEG_ID)
  private String legId;

  public static final String SERIALIZED_NAME_ROWS = "rows";
  @SerializedName(SERIALIZED_NAME_ROWS)
  private List<InstrumentPaymentDiaryRow> rows;

  public InstrumentPaymentDiaryLeg() {
  }

  public InstrumentPaymentDiaryLeg legIndex(Integer legIndex) {
    
    this.legIndex = legIndex;
    return this;
  }

   /**
   * Index (integer) for the leg of a payment diary.
   * @return legIndex
  **/
  @jakarta.annotation.Nullable
  public Integer getLegIndex() {
    return legIndex;
  }


  public void setLegIndex(Integer legIndex) {
    this.legIndex = legIndex;
  }


  public InstrumentPaymentDiaryLeg legId(String legId) {
    
    this.legId = legId;
    return this;
  }

   /**
   * Identifier string for the leg of a payment diary.
   * @return legId
  **/
  @jakarta.annotation.Nullable
  public String getLegId() {
    return legId;
  }


  public void setLegId(String legId) {
    this.legId = legId;
  }


  public InstrumentPaymentDiaryLeg rows(List<InstrumentPaymentDiaryRow> rows) {
    
    this.rows = rows;
    return this;
  }

  public InstrumentPaymentDiaryLeg addRowsItem(InstrumentPaymentDiaryRow rowsItem) {
    if (this.rows == null) {
      this.rows = new ArrayList<>();
    }
    this.rows.add(rowsItem);
    return this;
  }

   /**
   * List of individual cashflows within the payment diary.
   * @return rows
  **/
  @jakarta.annotation.Nullable
  public List<InstrumentPaymentDiaryRow> getRows() {
    return rows;
  }


  public void setRows(List<InstrumentPaymentDiaryRow> rows) {
    this.rows = rows;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InstrumentPaymentDiaryLeg instrumentPaymentDiaryLeg = (InstrumentPaymentDiaryLeg) o;
    return Objects.equals(this.legIndex, instrumentPaymentDiaryLeg.legIndex) &&
        Objects.equals(this.legId, instrumentPaymentDiaryLeg.legId) &&
        Objects.equals(this.rows, instrumentPaymentDiaryLeg.rows);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(legIndex, legId, rows);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InstrumentPaymentDiaryLeg {\n");
    sb.append("    legIndex: ").append(toIndentedString(legIndex)).append("\n");
    sb.append("    legId: ").append(toIndentedString(legId)).append("\n");
    sb.append("    rows: ").append(toIndentedString(rows)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("legIndex");
    openapiFields.add("legId");
    openapiFields.add("rows");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to InstrumentPaymentDiaryLeg
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!InstrumentPaymentDiaryLeg.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InstrumentPaymentDiaryLeg is not found in the empty JSON string", InstrumentPaymentDiaryLeg.openapiRequiredFields.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("legId") != null && !jsonObj.get("legId").isJsonNull()) && !jsonObj.get("legId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `legId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("legId").toString()));
      }
      if (jsonObj.get("rows") != null && !jsonObj.get("rows").isJsonNull()) {
        JsonArray jsonArrayrows = jsonObj.getAsJsonArray("rows");
        if (jsonArrayrows != null) {
          // ensure the json data is an array
          if (!jsonObj.get("rows").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `rows` to be an array in the JSON string but got `%s`", jsonObj.get("rows").toString()));
          }

          // validate the optional field `rows` (array)
          for (int i = 0; i < jsonArrayrows.size(); i++) {
            InstrumentPaymentDiaryRow.validateJsonElement(jsonArrayrows.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InstrumentPaymentDiaryLeg.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InstrumentPaymentDiaryLeg' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InstrumentPaymentDiaryLeg> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InstrumentPaymentDiaryLeg.class));

       return (TypeAdapter<T>) new TypeAdapter<InstrumentPaymentDiaryLeg>() {
           @Override
           public void write(JsonWriter out, InstrumentPaymentDiaryLeg value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InstrumentPaymentDiaryLeg read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of InstrumentPaymentDiaryLeg given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of InstrumentPaymentDiaryLeg
  * @throws IOException if the JSON string is invalid with respect to InstrumentPaymentDiaryLeg
  */
  public static InstrumentPaymentDiaryLeg fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InstrumentPaymentDiaryLeg.class);
  }

 /**
  * Convert an instance of InstrumentPaymentDiaryLeg to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
