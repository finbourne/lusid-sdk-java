/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * Stream
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class Stream {
  public static final String SERIALIZED_NAME_CAN_READ = "canRead";
  @SerializedName(SERIALIZED_NAME_CAN_READ)
  private Boolean canRead;

  public static final String SERIALIZED_NAME_CAN_WRITE = "canWrite";
  @SerializedName(SERIALIZED_NAME_CAN_WRITE)
  private Boolean canWrite;

  public static final String SERIALIZED_NAME_CAN_SEEK = "canSeek";
  @SerializedName(SERIALIZED_NAME_CAN_SEEK)
  private Boolean canSeek;

  public static final String SERIALIZED_NAME_CAN_TIMEOUT = "canTimeout";
  @SerializedName(SERIALIZED_NAME_CAN_TIMEOUT)
  private Boolean canTimeout;

  public static final String SERIALIZED_NAME_LENGTH = "length";
  @SerializedName(SERIALIZED_NAME_LENGTH)
  private Long length;

  public static final String SERIALIZED_NAME_POSITION = "position";
  @SerializedName(SERIALIZED_NAME_POSITION)
  private Long position;

  public static final String SERIALIZED_NAME_READ_TIMEOUT = "readTimeout";
  @SerializedName(SERIALIZED_NAME_READ_TIMEOUT)
  private Integer readTimeout;

  public static final String SERIALIZED_NAME_WRITE_TIMEOUT = "writeTimeout";
  @SerializedName(SERIALIZED_NAME_WRITE_TIMEOUT)
  private Integer writeTimeout;

  public Stream() {
  }

  
  public Stream(
     Boolean canRead, 
     Boolean canWrite, 
     Boolean canSeek, 
     Boolean canTimeout, 
     Long length
  ) {
    this();
    this.canRead = canRead;
    this.canWrite = canWrite;
    this.canSeek = canSeek;
    this.canTimeout = canTimeout;
    this.length = length;
  }

   /**
   * Get canRead
   * @return canRead
  **/
  @jakarta.annotation.Nullable
  public Boolean getCanRead() {
    return canRead;
  }




   /**
   * Get canWrite
   * @return canWrite
  **/
  @jakarta.annotation.Nullable
  public Boolean getCanWrite() {
    return canWrite;
  }




   /**
   * Get canSeek
   * @return canSeek
  **/
  @jakarta.annotation.Nullable
  public Boolean getCanSeek() {
    return canSeek;
  }




   /**
   * Get canTimeout
   * @return canTimeout
  **/
  @jakarta.annotation.Nullable
  public Boolean getCanTimeout() {
    return canTimeout;
  }




   /**
   * Get length
   * @return length
  **/
  @jakarta.annotation.Nullable
  public Long getLength() {
    return length;
  }




  public Stream position(Long position) {
    
    this.position = position;
    return this;
  }

   /**
   * Get position
   * @return position
  **/
  @jakarta.annotation.Nullable
  public Long getPosition() {
    return position;
  }


  public void setPosition(Long position) {
    this.position = position;
  }


  public Stream readTimeout(Integer readTimeout) {
    
    this.readTimeout = readTimeout;
    return this;
  }

   /**
   * Get readTimeout
   * @return readTimeout
  **/
  @jakarta.annotation.Nullable
  public Integer getReadTimeout() {
    return readTimeout;
  }


  public void setReadTimeout(Integer readTimeout) {
    this.readTimeout = readTimeout;
  }


  public Stream writeTimeout(Integer writeTimeout) {
    
    this.writeTimeout = writeTimeout;
    return this;
  }

   /**
   * Get writeTimeout
   * @return writeTimeout
  **/
  @jakarta.annotation.Nullable
  public Integer getWriteTimeout() {
    return writeTimeout;
  }


  public void setWriteTimeout(Integer writeTimeout) {
    this.writeTimeout = writeTimeout;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Stream stream = (Stream) o;
    return Objects.equals(this.canRead, stream.canRead) &&
        Objects.equals(this.canWrite, stream.canWrite) &&
        Objects.equals(this.canSeek, stream.canSeek) &&
        Objects.equals(this.canTimeout, stream.canTimeout) &&
        Objects.equals(this.length, stream.length) &&
        Objects.equals(this.position, stream.position) &&
        Objects.equals(this.readTimeout, stream.readTimeout) &&
        Objects.equals(this.writeTimeout, stream.writeTimeout);
  }

  @Override
  public int hashCode() {
    return Objects.hash(canRead, canWrite, canSeek, canTimeout, length, position, readTimeout, writeTimeout);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Stream {\n");
    sb.append("    canRead: ").append(toIndentedString(canRead)).append("\n");
    sb.append("    canWrite: ").append(toIndentedString(canWrite)).append("\n");
    sb.append("    canSeek: ").append(toIndentedString(canSeek)).append("\n");
    sb.append("    canTimeout: ").append(toIndentedString(canTimeout)).append("\n");
    sb.append("    length: ").append(toIndentedString(length)).append("\n");
    sb.append("    position: ").append(toIndentedString(position)).append("\n");
    sb.append("    readTimeout: ").append(toIndentedString(readTimeout)).append("\n");
    sb.append("    writeTimeout: ").append(toIndentedString(writeTimeout)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("canRead");
    openapiFields.add("canWrite");
    openapiFields.add("canSeek");
    openapiFields.add("canTimeout");
    openapiFields.add("length");
    openapiFields.add("position");
    openapiFields.add("readTimeout");
    openapiFields.add("writeTimeout");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Stream
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Stream.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Stream is not found in the empty JSON string", Stream.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!Stream.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Stream` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Stream.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Stream' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Stream> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Stream.class));

       return (TypeAdapter<T>) new TypeAdapter<Stream>() {
           @Override
           public void write(JsonWriter out, Stream value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Stream read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Stream given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Stream
  * @throws IOException if the JSON string is invalid with respect to Stream
  */
  public static Stream fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Stream.class);
  }

 /**
  * Convert an instance of Stream to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
