/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * MovementSettlementSummary
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class MovementSettlementSummary {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_LUSID_INSTRUMENT_ID = "lusidInstrumentId";
  @SerializedName(SERIALIZED_NAME_LUSID_INSTRUMENT_ID)
  private String lusidInstrumentId;

  public static final String SERIALIZED_NAME_INSTRUMENT_SCOPE = "instrumentScope";
  @SerializedName(SERIALIZED_NAME_INSTRUMENT_SCOPE)
  private String instrumentScope;

  public static final String SERIALIZED_NAME_SETTLEMENT_MODE = "settlementMode";
  @SerializedName(SERIALIZED_NAME_SETTLEMENT_MODE)
  private String settlementMode;

  public static final String SERIALIZED_NAME_CONTRACTUAL_SETTLEMENT_DATE = "contractualSettlementDate";
  @SerializedName(SERIALIZED_NAME_CONTRACTUAL_SETTLEMENT_DATE)
  private String contractualSettlementDate;

  public static final String SERIALIZED_NAME_UNITS = "units";
  @SerializedName(SERIALIZED_NAME_UNITS)
  private java.math.BigDecimal units;

  public static final String SERIALIZED_NAME_SETTLED_UNITS = "settledUnits";
  @SerializedName(SERIALIZED_NAME_SETTLED_UNITS)
  private java.math.BigDecimal settledUnits;

  public static final String SERIALIZED_NAME_UNSETTLED_UNITS = "unsettledUnits";
  @SerializedName(SERIALIZED_NAME_UNSETTLED_UNITS)
  private java.math.BigDecimal unsettledUnits;

  public static final String SERIALIZED_NAME_OVERDUE_UNITS = "overdueUnits";
  @SerializedName(SERIALIZED_NAME_OVERDUE_UNITS)
  private java.math.BigDecimal overdueUnits;

  public MovementSettlementSummary() {
  }

  public MovementSettlementSummary name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @jakarta.annotation.Nullable
  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public MovementSettlementSummary type(String type) {
    
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @jakarta.annotation.Nullable
  public String getType() {
    return type;
  }


  public void setType(String type) {
    this.type = type;
  }


  public MovementSettlementSummary lusidInstrumentId(String lusidInstrumentId) {
    
    this.lusidInstrumentId = lusidInstrumentId;
    return this;
  }

   /**
   * Get lusidInstrumentId
   * @return lusidInstrumentId
  **/
  @jakarta.annotation.Nullable
  public String getLusidInstrumentId() {
    return lusidInstrumentId;
  }


  public void setLusidInstrumentId(String lusidInstrumentId) {
    this.lusidInstrumentId = lusidInstrumentId;
  }


  public MovementSettlementSummary instrumentScope(String instrumentScope) {
    
    this.instrumentScope = instrumentScope;
    return this;
  }

   /**
   * Get instrumentScope
   * @return instrumentScope
  **/
  @jakarta.annotation.Nullable
  public String getInstrumentScope() {
    return instrumentScope;
  }


  public void setInstrumentScope(String instrumentScope) {
    this.instrumentScope = instrumentScope;
  }


  public MovementSettlementSummary settlementMode(String settlementMode) {
    
    this.settlementMode = settlementMode;
    return this;
  }

   /**
   * Get settlementMode
   * @return settlementMode
  **/
  @jakarta.annotation.Nullable
  public String getSettlementMode() {
    return settlementMode;
  }


  public void setSettlementMode(String settlementMode) {
    this.settlementMode = settlementMode;
  }


  public MovementSettlementSummary contractualSettlementDate(String contractualSettlementDate) {
    
    this.contractualSettlementDate = contractualSettlementDate;
    return this;
  }

   /**
   * Get contractualSettlementDate
   * @return contractualSettlementDate
  **/
  @jakarta.annotation.Nullable
  public String getContractualSettlementDate() {
    return contractualSettlementDate;
  }


  public void setContractualSettlementDate(String contractualSettlementDate) {
    this.contractualSettlementDate = contractualSettlementDate;
  }


  public MovementSettlementSummary units(java.math.BigDecimal units) {
    
    this.units = units;
    return this;
  }

   /**
   * Get units
   * @return units
  **/
  @jakarta.annotation.Nullable
  public java.math.BigDecimal getUnits() {
    return units;
  }


  public void setUnits(java.math.BigDecimal units) {
    this.units = units;
  }


  public MovementSettlementSummary settledUnits(java.math.BigDecimal settledUnits) {
    
    this.settledUnits = settledUnits;
    return this;
  }

   /**
   * Get settledUnits
   * @return settledUnits
  **/
  @jakarta.annotation.Nullable
  public java.math.BigDecimal getSettledUnits() {
    return settledUnits;
  }


  public void setSettledUnits(java.math.BigDecimal settledUnits) {
    this.settledUnits = settledUnits;
  }


  public MovementSettlementSummary unsettledUnits(java.math.BigDecimal unsettledUnits) {
    
    this.unsettledUnits = unsettledUnits;
    return this;
  }

   /**
   * Get unsettledUnits
   * @return unsettledUnits
  **/
  @jakarta.annotation.Nullable
  public java.math.BigDecimal getUnsettledUnits() {
    return unsettledUnits;
  }


  public void setUnsettledUnits(java.math.BigDecimal unsettledUnits) {
    this.unsettledUnits = unsettledUnits;
  }


  public MovementSettlementSummary overdueUnits(java.math.BigDecimal overdueUnits) {
    
    this.overdueUnits = overdueUnits;
    return this;
  }

   /**
   * Get overdueUnits
   * @return overdueUnits
  **/
  @jakarta.annotation.Nullable
  public java.math.BigDecimal getOverdueUnits() {
    return overdueUnits;
  }


  public void setOverdueUnits(java.math.BigDecimal overdueUnits) {
    this.overdueUnits = overdueUnits;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MovementSettlementSummary movementSettlementSummary = (MovementSettlementSummary) o;
    return Objects.equals(this.name, movementSettlementSummary.name) &&
        Objects.equals(this.type, movementSettlementSummary.type) &&
        Objects.equals(this.lusidInstrumentId, movementSettlementSummary.lusidInstrumentId) &&
        Objects.equals(this.instrumentScope, movementSettlementSummary.instrumentScope) &&
        Objects.equals(this.settlementMode, movementSettlementSummary.settlementMode) &&
        Objects.equals(this.contractualSettlementDate, movementSettlementSummary.contractualSettlementDate) &&
        (this.units.compareTo(movementSettlementSummary.getUnits()) == 0) &&
        (this.settledUnits.compareTo(movementSettlementSummary.getSettledUnits()) == 0) &&
        (this.unsettledUnits.compareTo(movementSettlementSummary.getUnsettledUnits()) == 0) &&
        (this.overdueUnits.compareTo(movementSettlementSummary.getOverdueUnits()) == 0);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, type, lusidInstrumentId, instrumentScope, settlementMode, contractualSettlementDate, units, settledUnits, unsettledUnits, overdueUnits);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MovementSettlementSummary {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    lusidInstrumentId: ").append(toIndentedString(lusidInstrumentId)).append("\n");
    sb.append("    instrumentScope: ").append(toIndentedString(instrumentScope)).append("\n");
    sb.append("    settlementMode: ").append(toIndentedString(settlementMode)).append("\n");
    sb.append("    contractualSettlementDate: ").append(toIndentedString(contractualSettlementDate)).append("\n");
    sb.append("    units: ").append(toIndentedString(units)).append("\n");
    sb.append("    settledUnits: ").append(toIndentedString(settledUnits)).append("\n");
    sb.append("    unsettledUnits: ").append(toIndentedString(unsettledUnits)).append("\n");
    sb.append("    overdueUnits: ").append(toIndentedString(overdueUnits)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("type");
    openapiFields.add("lusidInstrumentId");
    openapiFields.add("instrumentScope");
    openapiFields.add("settlementMode");
    openapiFields.add("contractualSettlementDate");
    openapiFields.add("units");
    openapiFields.add("settledUnits");
    openapiFields.add("unsettledUnits");
    openapiFields.add("overdueUnits");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to MovementSettlementSummary
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MovementSettlementSummary.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MovementSettlementSummary is not found in the empty JSON string", MovementSettlementSummary.openapiRequiredFields.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if ((jsonObj.get("lusidInstrumentId") != null && !jsonObj.get("lusidInstrumentId").isJsonNull()) && !jsonObj.get("lusidInstrumentId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lusidInstrumentId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lusidInstrumentId").toString()));
      }
      if ((jsonObj.get("instrumentScope") != null && !jsonObj.get("instrumentScope").isJsonNull()) && !jsonObj.get("instrumentScope").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `instrumentScope` to be a primitive type in the JSON string but got `%s`", jsonObj.get("instrumentScope").toString()));
      }
      if ((jsonObj.get("settlementMode") != null && !jsonObj.get("settlementMode").isJsonNull()) && !jsonObj.get("settlementMode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `settlementMode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("settlementMode").toString()));
      }
      if ((jsonObj.get("contractualSettlementDate") != null && !jsonObj.get("contractualSettlementDate").isJsonNull()) && !jsonObj.get("contractualSettlementDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contractualSettlementDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contractualSettlementDate").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MovementSettlementSummary.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MovementSettlementSummary' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MovementSettlementSummary> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MovementSettlementSummary.class));

       return (TypeAdapter<T>) new TypeAdapter<MovementSettlementSummary>() {
           @Override
           public void write(JsonWriter out, MovementSettlementSummary value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MovementSettlementSummary read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of MovementSettlementSummary given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of MovementSettlementSummary
  * @throws IOException if the JSON string is invalid with respect to MovementSettlementSummary
  */
  public static MovementSettlementSummary fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MovementSettlementSummary.class);
  }

 /**
  * Convert an instance of MovementSettlementSummary to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
