/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * The request used in the AggregatedReturns.
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class PerformanceReturnsMetric {
  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_WINDOW = "window";
  @SerializedName(SERIALIZED_NAME_WINDOW)
  private String window;

  public static final String SERIALIZED_NAME_ALLOW_PARTIAL = "allowPartial";
  @SerializedName(SERIALIZED_NAME_ALLOW_PARTIAL)
  private Boolean allowPartial;

  public static final String SERIALIZED_NAME_ANNUALISED = "annualised";
  @SerializedName(SERIALIZED_NAME_ANNUALISED)
  private Boolean annualised;

  public static final String SERIALIZED_NAME_WITH_FEE = "withFee";
  @SerializedName(SERIALIZED_NAME_WITH_FEE)
  private Boolean withFee;

  public static final String SERIALIZED_NAME_SEED_AMOUNT = "seedAmount";
  @SerializedName(SERIALIZED_NAME_SEED_AMOUNT)
  private String seedAmount;

  public static final String SERIALIZED_NAME_ALIAS = "alias";
  @SerializedName(SERIALIZED_NAME_ALIAS)
  private String alias;

  public PerformanceReturnsMetric() {
  }

  public PerformanceReturnsMetric type(String type) {
    
    this.type = type;
    return this;
  }

   /**
   * The type of the metric. Default to Return
   * @return type
  **/
  @jakarta.annotation.Nullable
  public String getType() {
    return type;
  }


  public void setType(String type) {
    this.type = type;
  }


  public PerformanceReturnsMetric window(String window) {
    
    this.window = window;
    return this;
  }

   /**
   * The given metric for the calculation i.e. 1Y, 1D.
   * @return window
  **/
  @jakarta.annotation.Nullable
  public String getWindow() {
    return window;
  }


  public void setWindow(String window) {
    this.window = window;
  }


  public PerformanceReturnsMetric allowPartial(Boolean allowPartial) {
    
    this.allowPartial = allowPartial;
    return this;
  }

   /**
   * Bool if the metric is allowed partial results. Default to false.
   * @return allowPartial
  **/
  @jakarta.annotation.Nullable
  public Boolean getAllowPartial() {
    return allowPartial;
  }


  public void setAllowPartial(Boolean allowPartial) {
    this.allowPartial = allowPartial;
  }


  public PerformanceReturnsMetric annualised(Boolean annualised) {
    
    this.annualised = annualised;
    return this;
  }

   /**
   * Bool if the metric is annualized. Default to false.
   * @return annualised
  **/
  @jakarta.annotation.Nullable
  public Boolean getAnnualised() {
    return annualised;
  }


  public void setAnnualised(Boolean annualised) {
    this.annualised = annualised;
  }


  public PerformanceReturnsMetric withFee(Boolean withFee) {
    
    this.withFee = withFee;
    return this;
  }

   /**
   * Bool if the metric should consider the fees when is calculated. Default to false.
   * @return withFee
  **/
  @jakarta.annotation.Nullable
  public Boolean getWithFee() {
    return withFee;
  }


  public void setWithFee(Boolean withFee) {
    this.withFee = withFee;
  }


  public PerformanceReturnsMetric seedAmount(String seedAmount) {
    
    this.seedAmount = seedAmount;
    return this;
  }

   /**
   * The given seed amount for the calculation of the indicative amount metrics.
   * @return seedAmount
  **/
  @jakarta.annotation.Nullable
  public String getSeedAmount() {
    return seedAmount;
  }


  public void setSeedAmount(String seedAmount) {
    this.seedAmount = seedAmount;
  }


  public PerformanceReturnsMetric alias(String alias) {
    
    this.alias = alias;
    return this;
  }

   /**
   * The alias for the metric.
   * @return alias
  **/
  @jakarta.annotation.Nullable
  public String getAlias() {
    return alias;
  }


  public void setAlias(String alias) {
    this.alias = alias;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PerformanceReturnsMetric performanceReturnsMetric = (PerformanceReturnsMetric) o;
    return Objects.equals(this.type, performanceReturnsMetric.type) &&
        Objects.equals(this.window, performanceReturnsMetric.window) &&
        Objects.equals(this.allowPartial, performanceReturnsMetric.allowPartial) &&
        Objects.equals(this.annualised, performanceReturnsMetric.annualised) &&
        Objects.equals(this.withFee, performanceReturnsMetric.withFee) &&
        Objects.equals(this.seedAmount, performanceReturnsMetric.seedAmount) &&
        Objects.equals(this.alias, performanceReturnsMetric.alias);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, window, allowPartial, annualised, withFee, seedAmount, alias);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PerformanceReturnsMetric {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    window: ").append(toIndentedString(window)).append("\n");
    sb.append("    allowPartial: ").append(toIndentedString(allowPartial)).append("\n");
    sb.append("    annualised: ").append(toIndentedString(annualised)).append("\n");
    sb.append("    withFee: ").append(toIndentedString(withFee)).append("\n");
    sb.append("    seedAmount: ").append(toIndentedString(seedAmount)).append("\n");
    sb.append("    alias: ").append(toIndentedString(alias)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("type");
    openapiFields.add("window");
    openapiFields.add("allowPartial");
    openapiFields.add("annualised");
    openapiFields.add("withFee");
    openapiFields.add("seedAmount");
    openapiFields.add("alias");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to PerformanceReturnsMetric
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PerformanceReturnsMetric.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PerformanceReturnsMetric is not found in the empty JSON string", PerformanceReturnsMetric.openapiRequiredFields.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if ((jsonObj.get("window") != null && !jsonObj.get("window").isJsonNull()) && !jsonObj.get("window").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `window` to be a primitive type in the JSON string but got `%s`", jsonObj.get("window").toString()));
      }
      if ((jsonObj.get("seedAmount") != null && !jsonObj.get("seedAmount").isJsonNull()) && !jsonObj.get("seedAmount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `seedAmount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("seedAmount").toString()));
      }
      if ((jsonObj.get("alias") != null && !jsonObj.get("alias").isJsonNull()) && !jsonObj.get("alias").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `alias` to be a primitive type in the JSON string but got `%s`", jsonObj.get("alias").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PerformanceReturnsMetric.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PerformanceReturnsMetric' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PerformanceReturnsMetric> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PerformanceReturnsMetric.class));

       return (TypeAdapter<T>) new TypeAdapter<PerformanceReturnsMetric>() {
           @Override
           public void write(JsonWriter out, PerformanceReturnsMetric value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PerformanceReturnsMetric read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PerformanceReturnsMetric given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PerformanceReturnsMetric
  * @throws IOException if the JSON string is invalid with respect to PerformanceReturnsMetric
  */
  public static PerformanceReturnsMetric fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PerformanceReturnsMetric.class);
  }

 /**
  * Convert an instance of PerformanceReturnsMetric to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
