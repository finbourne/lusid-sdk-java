/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import com.finbourne.lusid.model.FeeAccrual;
import com.finbourne.lusid.model.FundAmount;
import com.finbourne.lusid.model.PreviousFundValuationPointData;
import com.finbourne.lusid.model.UnitisationData;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * The Valuation Point Data for a Fund on a specified date.
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class FundValuationPointData {
  public static final String SERIALIZED_NAME_BACK_OUT = "backOut";
  @SerializedName(SERIALIZED_NAME_BACK_OUT)
  private Map<String, FundAmount> backOut = new HashMap<>();

  public static final String SERIALIZED_NAME_DEALING = "dealing";
  @SerializedName(SERIALIZED_NAME_DEALING)
  private Map<String, FundAmount> dealing = new HashMap<>();

  public static final String SERIALIZED_NAME_PN_L = "pnL";
  @SerializedName(SERIALIZED_NAME_PN_L)
  private Map<String, FundAmount> pnL = new HashMap<>();

  public static final String SERIALIZED_NAME_GAV = "gav";
  @SerializedName(SERIALIZED_NAME_GAV)
  private java.math.BigDecimal gav;

  public static final String SERIALIZED_NAME_FEES = "fees";
  @SerializedName(SERIALIZED_NAME_FEES)
  private Map<String, FeeAccrual> fees = new HashMap<>();

  public static final String SERIALIZED_NAME_NAV = "nav";
  @SerializedName(SERIALIZED_NAME_NAV)
  private java.math.BigDecimal nav;

  public static final String SERIALIZED_NAME_UNITISATION = "unitisation";
  @SerializedName(SERIALIZED_NAME_UNITISATION)
  private UnitisationData unitisation;

  public static final String SERIALIZED_NAME_MISCELLANEOUS = "miscellaneous";
  @SerializedName(SERIALIZED_NAME_MISCELLANEOUS)
  private Map<String, FundAmount> miscellaneous;

  public static final String SERIALIZED_NAME_PREVIOUS_VALUATION_POINT_DATA = "previousValuationPointData";
  @SerializedName(SERIALIZED_NAME_PREVIOUS_VALUATION_POINT_DATA)
  private PreviousFundValuationPointData previousValuationPointData;

  public FundValuationPointData() {
  }

  public FundValuationPointData backOut(Map<String, FundAmount> backOut) {
    
    this.backOut = backOut;
    return this;
  }

  public FundValuationPointData putBackOutItem(String key, FundAmount backOutItem) {
    if (this.backOut == null) {
      this.backOut = new HashMap<>();
    }
    this.backOut.put(key, backOutItem);
    return this;
  }

   /**
   * Bucket of detail for the Valuation Point where data points have been &#39;backed out&#39;.
   * @return backOut
  **/
  @jakarta.annotation.Nonnull
  public Map<String, FundAmount> getBackOut() {
    return backOut;
  }


  public void setBackOut(Map<String, FundAmount> backOut) {
    this.backOut = backOut;
  }


  public FundValuationPointData dealing(Map<String, FundAmount> dealing) {
    
    this.dealing = dealing;
    return this;
  }

  public FundValuationPointData putDealingItem(String key, FundAmount dealingItem) {
    if (this.dealing == null) {
      this.dealing = new HashMap<>();
    }
    this.dealing.put(key, dealingItem);
    return this;
  }

   /**
   * Bucket of detail for any &#39;Dealing&#39; that has occured inside the queried period.
   * @return dealing
  **/
  @jakarta.annotation.Nonnull
  public Map<String, FundAmount> getDealing() {
    return dealing;
  }


  public void setDealing(Map<String, FundAmount> dealing) {
    this.dealing = dealing;
  }


  public FundValuationPointData pnL(Map<String, FundAmount> pnL) {
    
    this.pnL = pnL;
    return this;
  }

  public FundValuationPointData putPnLItem(String key, FundAmount pnLItem) {
    if (this.pnL == null) {
      this.pnL = new HashMap<>();
    }
    this.pnL.put(key, pnLItem);
    return this;
  }

   /**
   * Bucket of detail for &#39;PnL&#39; that has occured inside the queried period.
   * @return pnL
  **/
  @jakarta.annotation.Nonnull
  public Map<String, FundAmount> getPnL() {
    return pnL;
  }


  public void setPnL(Map<String, FundAmount> pnL) {
    this.pnL = pnL;
  }


  public FundValuationPointData gav(java.math.BigDecimal gav) {
    
    this.gav = gav;
    return this;
  }

   /**
   * The Gross Asset Value of the Fund or Share Class at the Valuation Point. This is effectively a summation of all Trial balance entries linked to accounts of types &#39;Asset&#39; and &#39;Liabilities&#39;.
   * @return gav
  **/
  @jakarta.annotation.Nonnull
  public java.math.BigDecimal getGav() {
    return gav;
  }


  public void setGav(java.math.BigDecimal gav) {
    this.gav = gav;
  }


  public FundValuationPointData fees(Map<String, FeeAccrual> fees) {
    
    this.fees = fees;
    return this;
  }

  public FundValuationPointData putFeesItem(String key, FeeAccrual feesItem) {
    if (this.fees == null) {
      this.fees = new HashMap<>();
    }
    this.fees.put(key, feesItem);
    return this;
  }

   /**
   * Bucket of detail for any &#39;Fees&#39; that have been charged in the selected period.
   * @return fees
  **/
  @jakarta.annotation.Nonnull
  public Map<String, FeeAccrual> getFees() {
    return fees;
  }


  public void setFees(Map<String, FeeAccrual> fees) {
    this.fees = fees;
  }


  public FundValuationPointData nav(java.math.BigDecimal nav) {
    
    this.nav = nav;
    return this;
  }

   /**
   * The Net Asset Value of the Fund or Share Class at the Valuation Point. This represents the GAV with any fees applied in the period.
   * @return nav
  **/
  @jakarta.annotation.Nonnull
  public java.math.BigDecimal getNav() {
    return nav;
  }


  public void setNav(java.math.BigDecimal nav) {
    this.nav = nav;
  }


  public FundValuationPointData unitisation(UnitisationData unitisation) {
    
    this.unitisation = unitisation;
    return this;
  }

   /**
   * Get unitisation
   * @return unitisation
  **/
  @jakarta.annotation.Nullable
  public UnitisationData getUnitisation() {
    return unitisation;
  }


  public void setUnitisation(UnitisationData unitisation) {
    this.unitisation = unitisation;
  }


  public FundValuationPointData miscellaneous(Map<String, FundAmount> miscellaneous) {
    
    this.miscellaneous = miscellaneous;
    return this;
  }

  public FundValuationPointData putMiscellaneousItem(String key, FundAmount miscellaneousItem) {
    if (this.miscellaneous == null) {
      this.miscellaneous = new HashMap<>();
    }
    this.miscellaneous.put(key, miscellaneousItem);
    return this;
  }

   /**
   * Not used directly by the LUSID engines but serves as a holding area for any custom derived data points that may be useful in, for example, fee calculations).
   * @return miscellaneous
  **/
  @jakarta.annotation.Nullable
  public Map<String, FundAmount> getMiscellaneous() {
    return miscellaneous;
  }


  public void setMiscellaneous(Map<String, FundAmount> miscellaneous) {
    this.miscellaneous = miscellaneous;
  }


  public FundValuationPointData previousValuationPointData(PreviousFundValuationPointData previousValuationPointData) {
    
    this.previousValuationPointData = previousValuationPointData;
    return this;
  }

   /**
   * Get previousValuationPointData
   * @return previousValuationPointData
  **/
  @jakarta.annotation.Nullable
  public PreviousFundValuationPointData getPreviousValuationPointData() {
    return previousValuationPointData;
  }


  public void setPreviousValuationPointData(PreviousFundValuationPointData previousValuationPointData) {
    this.previousValuationPointData = previousValuationPointData;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FundValuationPointData fundValuationPointData = (FundValuationPointData) o;
    return Objects.equals(this.backOut, fundValuationPointData.backOut) &&
        Objects.equals(this.dealing, fundValuationPointData.dealing) &&
        Objects.equals(this.pnL, fundValuationPointData.pnL) &&
        (this.gav.compareTo(fundValuationPointData.getGav()) == 0) &&
        Objects.equals(this.fees, fundValuationPointData.fees) &&
        (this.nav.compareTo(fundValuationPointData.getNav()) == 0) &&
        Objects.equals(this.unitisation, fundValuationPointData.unitisation) &&
        Objects.equals(this.miscellaneous, fundValuationPointData.miscellaneous) &&
        Objects.equals(this.previousValuationPointData, fundValuationPointData.previousValuationPointData);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(backOut, dealing, pnL, gav, fees, nav, unitisation, miscellaneous, previousValuationPointData);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FundValuationPointData {\n");
    sb.append("    backOut: ").append(toIndentedString(backOut)).append("\n");
    sb.append("    dealing: ").append(toIndentedString(dealing)).append("\n");
    sb.append("    pnL: ").append(toIndentedString(pnL)).append("\n");
    sb.append("    gav: ").append(toIndentedString(gav)).append("\n");
    sb.append("    fees: ").append(toIndentedString(fees)).append("\n");
    sb.append("    nav: ").append(toIndentedString(nav)).append("\n");
    sb.append("    unitisation: ").append(toIndentedString(unitisation)).append("\n");
    sb.append("    miscellaneous: ").append(toIndentedString(miscellaneous)).append("\n");
    sb.append("    previousValuationPointData: ").append(toIndentedString(previousValuationPointData)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("backOut");
    openapiFields.add("dealing");
    openapiFields.add("pnL");
    openapiFields.add("gav");
    openapiFields.add("fees");
    openapiFields.add("nav");
    openapiFields.add("unitisation");
    openapiFields.add("miscellaneous");
    openapiFields.add("previousValuationPointData");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("backOut");
    openapiRequiredFields.add("dealing");
    openapiRequiredFields.add("pnL");
    openapiRequiredFields.add("gav");
    openapiRequiredFields.add("fees");
    openapiRequiredFields.add("nav");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to FundValuationPointData
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FundValuationPointData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FundValuationPointData is not found in the empty JSON string", FundValuationPointData.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : FundValuationPointData.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `unitisation`
      if (jsonObj.get("unitisation") != null && !jsonObj.get("unitisation").isJsonNull()) {
        UnitisationData.validateJsonElement(jsonObj.get("unitisation"));
      }
      // validate the optional field `previousValuationPointData`
      if (jsonObj.get("previousValuationPointData") != null && !jsonObj.get("previousValuationPointData").isJsonNull()) {
        PreviousFundValuationPointData.validateJsonElement(jsonObj.get("previousValuationPointData"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FundValuationPointData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FundValuationPointData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FundValuationPointData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FundValuationPointData.class));

       return (TypeAdapter<T>) new TypeAdapter<FundValuationPointData>() {
           @Override
           public void write(JsonWriter out, FundValuationPointData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FundValuationPointData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of FundValuationPointData given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of FundValuationPointData
  * @throws IOException if the JSON string is invalid with respect to FundValuationPointData
  */
  public static FundValuationPointData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FundValuationPointData.class);
  }

 /**
  * Convert an instance of FundValuationPointData to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
