/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import com.finbourne.lusid.model.Link;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * GroupReconciliationResultStatuses
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class GroupReconciliationResultStatuses {
  public static final String SERIALIZED_NAME_COUNT_NEW = "countNew";
  @SerializedName(SERIALIZED_NAME_COUNT_NEW)
  private Integer countNew;

  public static final String SERIALIZED_NAME_LINK_NEW = "linkNew";
  @SerializedName(SERIALIZED_NAME_LINK_NEW)
  private Link linkNew;

  public static final String SERIALIZED_NAME_COUNT_CONFIRMED = "countConfirmed";
  @SerializedName(SERIALIZED_NAME_COUNT_CONFIRMED)
  private Integer countConfirmed;

  public static final String SERIALIZED_NAME_LINK_CONFIRMED = "linkConfirmed";
  @SerializedName(SERIALIZED_NAME_LINK_CONFIRMED)
  private Link linkConfirmed;

  public static final String SERIALIZED_NAME_COUNT_CHANGED = "countChanged";
  @SerializedName(SERIALIZED_NAME_COUNT_CHANGED)
  private Integer countChanged;

  public static final String SERIALIZED_NAME_LINK_CHANGED = "linkChanged";
  @SerializedName(SERIALIZED_NAME_LINK_CHANGED)
  private Link linkChanged;

  public GroupReconciliationResultStatuses() {
  }

  public GroupReconciliationResultStatuses countNew(Integer countNew) {
    
    this.countNew = countNew;
    return this;
  }

   /**
   * The number of comparison results of resultStatus \&quot;New\&quot; with this instanceId and reconciliationType
   * @return countNew
  **/
  @jakarta.annotation.Nonnull
  public Integer getCountNew() {
    return countNew;
  }


  public void setCountNew(Integer countNew) {
    this.countNew = countNew;
  }


  public GroupReconciliationResultStatuses linkNew(Link linkNew) {
    
    this.linkNew = linkNew;
    return this;
  }

   /**
   * Get linkNew
   * @return linkNew
  **/
  @jakarta.annotation.Nonnull
  public Link getLinkNew() {
    return linkNew;
  }


  public void setLinkNew(Link linkNew) {
    this.linkNew = linkNew;
  }


  public GroupReconciliationResultStatuses countConfirmed(Integer countConfirmed) {
    
    this.countConfirmed = countConfirmed;
    return this;
  }

   /**
   * The number of comparison results of resultStatus \&quot;Confirmed\&quot; with this instanceId and reconciliationType
   * @return countConfirmed
  **/
  @jakarta.annotation.Nonnull
  public Integer getCountConfirmed() {
    return countConfirmed;
  }


  public void setCountConfirmed(Integer countConfirmed) {
    this.countConfirmed = countConfirmed;
  }


  public GroupReconciliationResultStatuses linkConfirmed(Link linkConfirmed) {
    
    this.linkConfirmed = linkConfirmed;
    return this;
  }

   /**
   * Get linkConfirmed
   * @return linkConfirmed
  **/
  @jakarta.annotation.Nonnull
  public Link getLinkConfirmed() {
    return linkConfirmed;
  }


  public void setLinkConfirmed(Link linkConfirmed) {
    this.linkConfirmed = linkConfirmed;
  }


  public GroupReconciliationResultStatuses countChanged(Integer countChanged) {
    
    this.countChanged = countChanged;
    return this;
  }

   /**
   * The number of comparison results of resultStatus \&quot;Changed\&quot; with this instanceId and reconciliationType
   * @return countChanged
  **/
  @jakarta.annotation.Nonnull
  public Integer getCountChanged() {
    return countChanged;
  }


  public void setCountChanged(Integer countChanged) {
    this.countChanged = countChanged;
  }


  public GroupReconciliationResultStatuses linkChanged(Link linkChanged) {
    
    this.linkChanged = linkChanged;
    return this;
  }

   /**
   * Get linkChanged
   * @return linkChanged
  **/
  @jakarta.annotation.Nonnull
  public Link getLinkChanged() {
    return linkChanged;
  }


  public void setLinkChanged(Link linkChanged) {
    this.linkChanged = linkChanged;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GroupReconciliationResultStatuses groupReconciliationResultStatuses = (GroupReconciliationResultStatuses) o;
    return Objects.equals(this.countNew, groupReconciliationResultStatuses.countNew) &&
        Objects.equals(this.linkNew, groupReconciliationResultStatuses.linkNew) &&
        Objects.equals(this.countConfirmed, groupReconciliationResultStatuses.countConfirmed) &&
        Objects.equals(this.linkConfirmed, groupReconciliationResultStatuses.linkConfirmed) &&
        Objects.equals(this.countChanged, groupReconciliationResultStatuses.countChanged) &&
        Objects.equals(this.linkChanged, groupReconciliationResultStatuses.linkChanged);
  }

  @Override
  public int hashCode() {
    return Objects.hash(countNew, linkNew, countConfirmed, linkConfirmed, countChanged, linkChanged);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GroupReconciliationResultStatuses {\n");
    sb.append("    countNew: ").append(toIndentedString(countNew)).append("\n");
    sb.append("    linkNew: ").append(toIndentedString(linkNew)).append("\n");
    sb.append("    countConfirmed: ").append(toIndentedString(countConfirmed)).append("\n");
    sb.append("    linkConfirmed: ").append(toIndentedString(linkConfirmed)).append("\n");
    sb.append("    countChanged: ").append(toIndentedString(countChanged)).append("\n");
    sb.append("    linkChanged: ").append(toIndentedString(linkChanged)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("countNew");
    openapiFields.add("linkNew");
    openapiFields.add("countConfirmed");
    openapiFields.add("linkConfirmed");
    openapiFields.add("countChanged");
    openapiFields.add("linkChanged");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("countNew");
    openapiRequiredFields.add("linkNew");
    openapiRequiredFields.add("countConfirmed");
    openapiRequiredFields.add("linkConfirmed");
    openapiRequiredFields.add("countChanged");
    openapiRequiredFields.add("linkChanged");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to GroupReconciliationResultStatuses
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GroupReconciliationResultStatuses.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GroupReconciliationResultStatuses is not found in the empty JSON string", GroupReconciliationResultStatuses.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GroupReconciliationResultStatuses.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `linkNew`
      Link.validateJsonElement(jsonObj.get("linkNew"));
      // validate the required field `linkConfirmed`
      Link.validateJsonElement(jsonObj.get("linkConfirmed"));
      // validate the required field `linkChanged`
      Link.validateJsonElement(jsonObj.get("linkChanged"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GroupReconciliationResultStatuses.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GroupReconciliationResultStatuses' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GroupReconciliationResultStatuses> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GroupReconciliationResultStatuses.class));

       return (TypeAdapter<T>) new TypeAdapter<GroupReconciliationResultStatuses>() {
           @Override
           public void write(JsonWriter out, GroupReconciliationResultStatuses value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GroupReconciliationResultStatuses read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of GroupReconciliationResultStatuses given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of GroupReconciliationResultStatuses
  * @throws IOException if the JSON string is invalid with respect to GroupReconciliationResultStatuses
  */
  public static GroupReconciliationResultStatuses fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GroupReconciliationResultStatuses.class);
  }

 /**
  * Convert an instance of GroupReconciliationResultStatuses to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
