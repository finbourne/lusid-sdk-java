/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import com.finbourne.lusid.model.InstrumentEvent;
import com.finbourne.lusid.model.LapseElection;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * Event to signify the repayment of interest accrued against a loan holding.
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class LoanInterestRepaymentEvent extends InstrumentEvent {
  public static final String SERIALIZED_NAME_PAYMENT_DATE = "paymentDate";
  @SerializedName(SERIALIZED_NAME_PAYMENT_DATE)
  private OffsetDateTime paymentDate;

  public static final String SERIALIZED_NAME_EX_DATE = "exDate";
  @SerializedName(SERIALIZED_NAME_EX_DATE)
  private OffsetDateTime exDate;

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private String currency;

  public static final String SERIALIZED_NAME_FRACTION = "fraction";
  @SerializedName(SERIALIZED_NAME_FRACTION)
  private java.math.BigDecimal fraction;

  public static final String SERIALIZED_NAME_LAPSE_ELECTIONS = "lapseElections";
  @SerializedName(SERIALIZED_NAME_LAPSE_ELECTIONS)
  private List<LapseElection> lapseElections;

  public LoanInterestRepaymentEvent() {
    // this.instrumentEventType = this.getClass().getSimpleName();
  }

  public LoanInterestRepaymentEvent paymentDate(OffsetDateTime paymentDate) {
    
    this.paymentDate = paymentDate;
    return this;
  }

   /**
   * Date that the interest is due to be paid.
   * @return paymentDate
  **/
  @jakarta.annotation.Nullable
  public OffsetDateTime getPaymentDate() {
    return paymentDate;
  }


  public void setPaymentDate(OffsetDateTime paymentDate) {
    this.paymentDate = paymentDate;
  }


  public LoanInterestRepaymentEvent exDate(OffsetDateTime exDate) {
    
    this.exDate = exDate;
    return this;
  }

   /**
   * Date that the accrued interest is calculated up until.
   * @return exDate
  **/
  @jakarta.annotation.Nullable
  public OffsetDateTime getExDate() {
    return exDate;
  }


  public void setExDate(OffsetDateTime exDate) {
    this.exDate = exDate;
  }


  public LoanInterestRepaymentEvent currency(String currency) {
    
    this.currency = currency;
    return this;
  }

   /**
   * Currency of the repayment.
   * @return currency
  **/
  @jakarta.annotation.Nonnull
  public String getCurrency() {
    return currency;
  }


  public void setCurrency(String currency) {
    this.currency = currency;
  }


  public LoanInterestRepaymentEvent fraction(java.math.BigDecimal fraction) {
    
    this.fraction = fraction;
    return this;
  }

   /**
   * Fraction of the accrued on the holding to be repaid. Must be between 0 and 1, inclusive.  Defaults to 1 if not set.
   * @return fraction
  **/
  @jakarta.annotation.Nullable
  public java.math.BigDecimal getFraction() {
    return fraction;
  }


  public void setFraction(java.math.BigDecimal fraction) {
    this.fraction = fraction;
  }


  public LoanInterestRepaymentEvent lapseElections(List<LapseElection> lapseElections) {
    
    this.lapseElections = lapseElections;
    return this;
  }

  public LoanInterestRepaymentEvent addLapseElectionsItem(LapseElection lapseElectionsItem) {
    if (this.lapseElections == null) {
      this.lapseElections = new ArrayList<>();
    }
    this.lapseElections.add(lapseElectionsItem);
    return this;
  }

   /**
   * Election for controlling whether the interest is paid automatically or not.  Exactly one election must be provided.
   * @return lapseElections
  **/
  @jakarta.annotation.Nullable
  public List<LapseElection> getLapseElections() {
    return lapseElections;
  }


  public void setLapseElections(List<LapseElection> lapseElections) {
    this.lapseElections = lapseElections;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LoanInterestRepaymentEvent loanInterestRepaymentEvent = (LoanInterestRepaymentEvent) o;
    return Objects.equals(this.paymentDate, loanInterestRepaymentEvent.paymentDate) &&
        Objects.equals(this.exDate, loanInterestRepaymentEvent.exDate) &&
        Objects.equals(this.currency, loanInterestRepaymentEvent.currency) &&
        (this.fraction.compareTo(loanInterestRepaymentEvent.getFraction()) == 0) &&
        Objects.equals(this.lapseElections, loanInterestRepaymentEvent.lapseElections) &&
        super.equals(o);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(paymentDate, exDate, currency, fraction, lapseElections, super.hashCode());
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LoanInterestRepaymentEvent {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    paymentDate: ").append(toIndentedString(paymentDate)).append("\n");
    sb.append("    exDate: ").append(toIndentedString(exDate)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    fraction: ").append(toIndentedString(fraction)).append("\n");
    sb.append("    lapseElections: ").append(toIndentedString(lapseElections)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("instrumentEventType");
    openapiFields.add("paymentDate");
    openapiFields.add("exDate");
    openapiFields.add("currency");
    openapiFields.add("fraction");
    openapiFields.add("lapseElections");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("currency");
    openapiRequiredFields.add("instrumentEventType");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to LoanInterestRepaymentEvent
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LoanInterestRepaymentEvent.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LoanInterestRepaymentEvent is not found in the empty JSON string", LoanInterestRepaymentEvent.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : LoanInterestRepaymentEvent.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LoanInterestRepaymentEvent.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LoanInterestRepaymentEvent' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LoanInterestRepaymentEvent> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LoanInterestRepaymentEvent.class));

       return (TypeAdapter<T>) new TypeAdapter<LoanInterestRepaymentEvent>() {
           @Override
           public void write(JsonWriter out, LoanInterestRepaymentEvent value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LoanInterestRepaymentEvent read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of LoanInterestRepaymentEvent given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of LoanInterestRepaymentEvent
  * @throws IOException if the JSON string is invalid with respect to LoanInterestRepaymentEvent
  */
  public static LoanInterestRepaymentEvent fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LoanInterestRepaymentEvent.class);
  }

 /**
  * Convert an instance of LoanInterestRepaymentEvent to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
