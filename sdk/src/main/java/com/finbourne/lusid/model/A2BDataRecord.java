/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import com.finbourne.lusid.model.A2BCategory;
import com.finbourne.lusid.model.PerpetualProperty;
import com.finbourne.lusid.model.Property;
import com.finbourne.lusid.model.ResourceId;
import com.finbourne.lusid.model.ResponseMetaData;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * A2B Record - shows values on, and changes between two dates: A and B
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class A2BDataRecord {
  public static final String SERIALIZED_NAME_PORTFOLIO_ID = "portfolioId";
  @SerializedName(SERIALIZED_NAME_PORTFOLIO_ID)
  private ResourceId portfolioId;

  public static final String SERIALIZED_NAME_HOLDING_TYPE = "holdingType";
  @SerializedName(SERIALIZED_NAME_HOLDING_TYPE)
  private String holdingType;

  public static final String SERIALIZED_NAME_INSTRUMENT_SCOPE = "instrumentScope";
  @SerializedName(SERIALIZED_NAME_INSTRUMENT_SCOPE)
  private String instrumentScope;

  public static final String SERIALIZED_NAME_INSTRUMENT_UID = "instrumentUid";
  @SerializedName(SERIALIZED_NAME_INSTRUMENT_UID)
  private String instrumentUid;

  public static final String SERIALIZED_NAME_SUB_HOLDING_KEYS = "subHoldingKeys";
  @SerializedName(SERIALIZED_NAME_SUB_HOLDING_KEYS)
  private Map<String, PerpetualProperty> subHoldingKeys;

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private String currency;

  public static final String SERIALIZED_NAME_TRANSACTION_ID = "transactionId";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_ID)
  private String transactionId;

  public static final String SERIALIZED_NAME_START = "start";
  @SerializedName(SERIALIZED_NAME_START)
  private A2BCategory start;

  public static final String SERIALIZED_NAME_FLOWS = "flows";
  @SerializedName(SERIALIZED_NAME_FLOWS)
  private A2BCategory flows;

  public static final String SERIALIZED_NAME_GAINS = "gains";
  @SerializedName(SERIALIZED_NAME_GAINS)
  private A2BCategory gains;

  public static final String SERIALIZED_NAME_CARRY = "carry";
  @SerializedName(SERIALIZED_NAME_CARRY)
  private A2BCategory carry;

  public static final String SERIALIZED_NAME_END = "end";
  @SerializedName(SERIALIZED_NAME_END)
  private A2BCategory end;

  public static final String SERIALIZED_NAME_PROPERTIES = "properties";
  @SerializedName(SERIALIZED_NAME_PROPERTIES)
  private Map<String, Property> properties;

  public static final String SERIALIZED_NAME_GROUP_ID = "groupId";
  @SerializedName(SERIALIZED_NAME_GROUP_ID)
  private String groupId;

  public static final String SERIALIZED_NAME_ERRORS = "errors";
  @SerializedName(SERIALIZED_NAME_ERRORS)
  private List<ResponseMetaData> errors;

  public A2BDataRecord() {
  }

  public A2BDataRecord portfolioId(ResourceId portfolioId) {
    
    this.portfolioId = portfolioId;
    return this;
  }

   /**
   * Get portfolioId
   * @return portfolioId
  **/
  @jakarta.annotation.Nullable
  public ResourceId getPortfolioId() {
    return portfolioId;
  }


  public void setPortfolioId(ResourceId portfolioId) {
    this.portfolioId = portfolioId;
  }


  public A2BDataRecord holdingType(String holdingType) {
    
    this.holdingType = holdingType;
    return this;
  }

   /**
   * The code for the type of the holding e.g. P, B, C, R, F etc.
   * @return holdingType
  **/
  @jakarta.annotation.Nullable
  public String getHoldingType() {
    return holdingType;
  }


  public void setHoldingType(String holdingType) {
    this.holdingType = holdingType;
  }


  public A2BDataRecord instrumentScope(String instrumentScope) {
    
    this.instrumentScope = instrumentScope;
    return this;
  }

   /**
   * The unique Lusid Instrument Id (LUID) of the instrument that the holding is in.
   * @return instrumentScope
  **/
  @jakarta.annotation.Nullable
  public String getInstrumentScope() {
    return instrumentScope;
  }


  public void setInstrumentScope(String instrumentScope) {
    this.instrumentScope = instrumentScope;
  }


  public A2BDataRecord instrumentUid(String instrumentUid) {
    
    this.instrumentUid = instrumentUid;
    return this;
  }

   /**
   * The unique Lusid Instrument Id (LUID) of the instrument that the holding is in.
   * @return instrumentUid
  **/
  @jakarta.annotation.Nullable
  public String getInstrumentUid() {
    return instrumentUid;
  }


  public void setInstrumentUid(String instrumentUid) {
    this.instrumentUid = instrumentUid;
  }


  public A2BDataRecord subHoldingKeys(Map<String, PerpetualProperty> subHoldingKeys) {
    
    this.subHoldingKeys = subHoldingKeys;
    return this;
  }

  public A2BDataRecord putSubHoldingKeysItem(String key, PerpetualProperty subHoldingKeysItem) {
    if (this.subHoldingKeys == null) {
      this.subHoldingKeys = new HashMap<>();
    }
    this.subHoldingKeys.put(key, subHoldingKeysItem);
    return this;
  }

   /**
   * The sub-holding properties which identify the holding. Each property will be from the &#39;Transaction&#39; domain. These are configured on a transaction portfolio.
   * @return subHoldingKeys
  **/
  @jakarta.annotation.Nullable
  public Map<String, PerpetualProperty> getSubHoldingKeys() {
    return subHoldingKeys;
  }


  public void setSubHoldingKeys(Map<String, PerpetualProperty> subHoldingKeys) {
    this.subHoldingKeys = subHoldingKeys;
  }


  public A2BDataRecord currency(String currency) {
    
    this.currency = currency;
    return this;
  }

   /**
   * The holding currency.
   * @return currency
  **/
  @jakarta.annotation.Nullable
  public String getCurrency() {
    return currency;
  }


  public void setCurrency(String currency) {
    this.currency = currency;
  }


  public A2BDataRecord transactionId(String transactionId) {
    
    this.transactionId = transactionId;
    return this;
  }

   /**
   * The unique identifier for the transaction.
   * @return transactionId
  **/
  @jakarta.annotation.Nullable
  public String getTransactionId() {
    return transactionId;
  }


  public void setTransactionId(String transactionId) {
    this.transactionId = transactionId;
  }


  public A2BDataRecord start(A2BCategory start) {
    
    this.start = start;
    return this;
  }

   /**
   * Get start
   * @return start
  **/
  @jakarta.annotation.Nullable
  public A2BCategory getStart() {
    return start;
  }


  public void setStart(A2BCategory start) {
    this.start = start;
  }


  public A2BDataRecord flows(A2BCategory flows) {
    
    this.flows = flows;
    return this;
  }

   /**
   * Get flows
   * @return flows
  **/
  @jakarta.annotation.Nullable
  public A2BCategory getFlows() {
    return flows;
  }


  public void setFlows(A2BCategory flows) {
    this.flows = flows;
  }


  public A2BDataRecord gains(A2BCategory gains) {
    
    this.gains = gains;
    return this;
  }

   /**
   * Get gains
   * @return gains
  **/
  @jakarta.annotation.Nullable
  public A2BCategory getGains() {
    return gains;
  }


  public void setGains(A2BCategory gains) {
    this.gains = gains;
  }


  public A2BDataRecord carry(A2BCategory carry) {
    
    this.carry = carry;
    return this;
  }

   /**
   * Get carry
   * @return carry
  **/
  @jakarta.annotation.Nullable
  public A2BCategory getCarry() {
    return carry;
  }


  public void setCarry(A2BCategory carry) {
    this.carry = carry;
  }


  public A2BDataRecord end(A2BCategory end) {
    
    this.end = end;
    return this;
  }

   /**
   * Get end
   * @return end
  **/
  @jakarta.annotation.Nullable
  public A2BCategory getEnd() {
    return end;
  }


  public void setEnd(A2BCategory end) {
    this.end = end;
  }


  public A2BDataRecord properties(Map<String, Property> properties) {
    
    this.properties = properties;
    return this;
  }

  public A2BDataRecord putPropertiesItem(String key, Property propertiesItem) {
    if (this.properties == null) {
      this.properties = new HashMap<>();
    }
    this.properties.put(key, propertiesItem);
    return this;
  }

   /**
   * The properties which have been requested to be decorated onto the holding. These will be from the &#39;Instrument&#39; domain.
   * @return properties
  **/
  @jakarta.annotation.Nullable
  public Map<String, Property> getProperties() {
    return properties;
  }


  public void setProperties(Map<String, Property> properties) {
    this.properties = properties;
  }


  public A2BDataRecord groupId(String groupId) {
    
    this.groupId = groupId;
    return this;
  }

   /**
   * Arbitrary string that can be used to cross reference an entry in the A2B report with activity in the A2B-Movements. This should be used purely as a token. The content should not be relied upon.
   * @return groupId
  **/
  @jakarta.annotation.Nullable
  public String getGroupId() {
    return groupId;
  }


  public void setGroupId(String groupId) {
    this.groupId = groupId;
  }


  public A2BDataRecord errors(List<ResponseMetaData> errors) {
    
    this.errors = errors;
    return this;
  }

  public A2BDataRecord addErrorsItem(ResponseMetaData errorsItem) {
    if (this.errors == null) {
      this.errors = new ArrayList<>();
    }
    this.errors.add(errorsItem);
    return this;
  }

   /**
   * Any errors with the record are reported here.
   * @return errors
  **/
  @jakarta.annotation.Nullable
  public List<ResponseMetaData> getErrors() {
    return errors;
  }


  public void setErrors(List<ResponseMetaData> errors) {
    this.errors = errors;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    A2BDataRecord a2BDataRecord = (A2BDataRecord) o;
    return Objects.equals(this.portfolioId, a2BDataRecord.portfolioId) &&
        Objects.equals(this.holdingType, a2BDataRecord.holdingType) &&
        Objects.equals(this.instrumentScope, a2BDataRecord.instrumentScope) &&
        Objects.equals(this.instrumentUid, a2BDataRecord.instrumentUid) &&
        Objects.equals(this.subHoldingKeys, a2BDataRecord.subHoldingKeys) &&
        Objects.equals(this.currency, a2BDataRecord.currency) &&
        Objects.equals(this.transactionId, a2BDataRecord.transactionId) &&
        Objects.equals(this.start, a2BDataRecord.start) &&
        Objects.equals(this.flows, a2BDataRecord.flows) &&
        Objects.equals(this.gains, a2BDataRecord.gains) &&
        Objects.equals(this.carry, a2BDataRecord.carry) &&
        Objects.equals(this.end, a2BDataRecord.end) &&
        Objects.equals(this.properties, a2BDataRecord.properties) &&
        Objects.equals(this.groupId, a2BDataRecord.groupId) &&
        Objects.equals(this.errors, a2BDataRecord.errors);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(portfolioId, holdingType, instrumentScope, instrumentUid, subHoldingKeys, currency, transactionId, start, flows, gains, carry, end, properties, groupId, errors);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class A2BDataRecord {\n");
    sb.append("    portfolioId: ").append(toIndentedString(portfolioId)).append("\n");
    sb.append("    holdingType: ").append(toIndentedString(holdingType)).append("\n");
    sb.append("    instrumentScope: ").append(toIndentedString(instrumentScope)).append("\n");
    sb.append("    instrumentUid: ").append(toIndentedString(instrumentUid)).append("\n");
    sb.append("    subHoldingKeys: ").append(toIndentedString(subHoldingKeys)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    transactionId: ").append(toIndentedString(transactionId)).append("\n");
    sb.append("    start: ").append(toIndentedString(start)).append("\n");
    sb.append("    flows: ").append(toIndentedString(flows)).append("\n");
    sb.append("    gains: ").append(toIndentedString(gains)).append("\n");
    sb.append("    carry: ").append(toIndentedString(carry)).append("\n");
    sb.append("    end: ").append(toIndentedString(end)).append("\n");
    sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
    sb.append("    groupId: ").append(toIndentedString(groupId)).append("\n");
    sb.append("    errors: ").append(toIndentedString(errors)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("portfolioId");
    openapiFields.add("holdingType");
    openapiFields.add("instrumentScope");
    openapiFields.add("instrumentUid");
    openapiFields.add("subHoldingKeys");
    openapiFields.add("currency");
    openapiFields.add("transactionId");
    openapiFields.add("start");
    openapiFields.add("flows");
    openapiFields.add("gains");
    openapiFields.add("carry");
    openapiFields.add("end");
    openapiFields.add("properties");
    openapiFields.add("groupId");
    openapiFields.add("errors");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to A2BDataRecord
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!A2BDataRecord.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in A2BDataRecord is not found in the empty JSON string", A2BDataRecord.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!A2BDataRecord.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `A2BDataRecord` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      // validate the optional field `portfolioId`
      if (jsonObj.get("portfolioId") != null && !jsonObj.get("portfolioId").isJsonNull()) {
        ResourceId.validateJsonObject(jsonObj.getAsJsonObject("portfolioId"));
      }
      if ((jsonObj.get("holdingType") != null && !jsonObj.get("holdingType").isJsonNull()) && !jsonObj.get("holdingType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `holdingType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("holdingType").toString()));
      }
      if ((jsonObj.get("instrumentScope") != null && !jsonObj.get("instrumentScope").isJsonNull()) && !jsonObj.get("instrumentScope").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `instrumentScope` to be a primitive type in the JSON string but got `%s`", jsonObj.get("instrumentScope").toString()));
      }
      if ((jsonObj.get("instrumentUid") != null && !jsonObj.get("instrumentUid").isJsonNull()) && !jsonObj.get("instrumentUid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `instrumentUid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("instrumentUid").toString()));
      }
      if ((jsonObj.get("currency") != null && !jsonObj.get("currency").isJsonNull()) && !jsonObj.get("currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency").toString()));
      }
      if ((jsonObj.get("transactionId") != null && !jsonObj.get("transactionId").isJsonNull()) && !jsonObj.get("transactionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transactionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transactionId").toString()));
      }
      // validate the optional field `start`
      if (jsonObj.get("start") != null && !jsonObj.get("start").isJsonNull()) {
        A2BCategory.validateJsonObject(jsonObj.getAsJsonObject("start"));
      }
      // validate the optional field `flows`
      if (jsonObj.get("flows") != null && !jsonObj.get("flows").isJsonNull()) {
        A2BCategory.validateJsonObject(jsonObj.getAsJsonObject("flows"));
      }
      // validate the optional field `gains`
      if (jsonObj.get("gains") != null && !jsonObj.get("gains").isJsonNull()) {
        A2BCategory.validateJsonObject(jsonObj.getAsJsonObject("gains"));
      }
      // validate the optional field `carry`
      if (jsonObj.get("carry") != null && !jsonObj.get("carry").isJsonNull()) {
        A2BCategory.validateJsonObject(jsonObj.getAsJsonObject("carry"));
      }
      // validate the optional field `end`
      if (jsonObj.get("end") != null && !jsonObj.get("end").isJsonNull()) {
        A2BCategory.validateJsonObject(jsonObj.getAsJsonObject("end"));
      }
      if ((jsonObj.get("groupId") != null && !jsonObj.get("groupId").isJsonNull()) && !jsonObj.get("groupId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `groupId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("groupId").toString()));
      }
      if (jsonObj.get("errors") != null && !jsonObj.get("errors").isJsonNull()) {
        JsonArray jsonArrayerrors = jsonObj.getAsJsonArray("errors");
        if (jsonArrayerrors != null) {
          // ensure the json data is an array
          if (!jsonObj.get("errors").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `errors` to be an array in the JSON string but got `%s`", jsonObj.get("errors").toString()));
          }

          // validate the optional field `errors` (array)
          for (int i = 0; i < jsonArrayerrors.size(); i++) {
            ResponseMetaData.validateJsonObject(jsonArrayerrors.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!A2BDataRecord.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'A2BDataRecord' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<A2BDataRecord> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(A2BDataRecord.class));

       return (TypeAdapter<T>) new TypeAdapter<A2BDataRecord>() {
           @Override
           public void write(JsonWriter out, A2BDataRecord value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public A2BDataRecord read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of A2BDataRecord given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of A2BDataRecord
  * @throws IOException if the JSON string is invalid with respect to A2BDataRecord
  */
  public static A2BDataRecord fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, A2BDataRecord.class);
  }

 /**
  * Convert an instance of A2BDataRecord to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
