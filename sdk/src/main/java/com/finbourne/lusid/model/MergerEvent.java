/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import com.finbourne.lusid.model.CashAndSecurityOfferElection;
import com.finbourne.lusid.model.CashOfferElection;
import com.finbourne.lusid.model.InstrumentEvent;
import com.finbourne.lusid.model.NewInstrument;
import com.finbourne.lusid.model.SecurityOfferElection;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * Merger Event (MRGR).
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class MergerEvent extends InstrumentEvent {
  public static final String SERIALIZED_NAME_ANNOUNCEMENT_DATE = "announcementDate";
  @SerializedName(SERIALIZED_NAME_ANNOUNCEMENT_DATE)
  private OffsetDateTime announcementDate;

  public static final String SERIALIZED_NAME_CASH_AND_SECURITY_OFFER_ELECTIONS = "cashAndSecurityOfferElections";
  @SerializedName(SERIALIZED_NAME_CASH_AND_SECURITY_OFFER_ELECTIONS)
  private List<CashAndSecurityOfferElection> cashAndSecurityOfferElections;

  public static final String SERIALIZED_NAME_CASH_ELECTIONS = "cashElections";
  @SerializedName(SERIALIZED_NAME_CASH_ELECTIONS)
  private List<CashOfferElection> cashElections;

  public static final String SERIALIZED_NAME_EX_DATE = "exDate";
  @SerializedName(SERIALIZED_NAME_EX_DATE)
  private OffsetDateTime exDate;

  public static final String SERIALIZED_NAME_FRACTIONAL_UNITS_CASH_CURRENCY = "fractionalUnitsCashCurrency";
  @SerializedName(SERIALIZED_NAME_FRACTIONAL_UNITS_CASH_CURRENCY)
  private String fractionalUnitsCashCurrency;

  public static final String SERIALIZED_NAME_FRACTIONAL_UNITS_CASH_PRICE = "fractionalUnitsCashPrice";
  @SerializedName(SERIALIZED_NAME_FRACTIONAL_UNITS_CASH_PRICE)
  private java.math.BigDecimal fractionalUnitsCashPrice;

  public static final String SERIALIZED_NAME_NEW_INSTRUMENT = "newInstrument";
  @SerializedName(SERIALIZED_NAME_NEW_INSTRUMENT)
  private NewInstrument newInstrument;

  public static final String SERIALIZED_NAME_PAYMENT_DATE = "paymentDate";
  @SerializedName(SERIALIZED_NAME_PAYMENT_DATE)
  private OffsetDateTime paymentDate;

  public static final String SERIALIZED_NAME_RECORD_DATE = "recordDate";
  @SerializedName(SERIALIZED_NAME_RECORD_DATE)
  private OffsetDateTime recordDate;

  public static final String SERIALIZED_NAME_SECURITY_ELECTIONS = "securityElections";
  @SerializedName(SERIALIZED_NAME_SECURITY_ELECTIONS)
  private List<SecurityOfferElection> securityElections;

  public MergerEvent() {
    // this.instrumentEventType = this.getClass().getSimpleName();
  }

  public MergerEvent announcementDate(OffsetDateTime announcementDate) {
    
    this.announcementDate = announcementDate;
    return this;
  }

   /**
   * The date the merger is announced.
   * @return announcementDate
  **/
  @jakarta.annotation.Nullable
  public OffsetDateTime getAnnouncementDate() {
    return announcementDate;
  }


  public void setAnnouncementDate(OffsetDateTime announcementDate) {
    this.announcementDate = announcementDate;
  }


  public MergerEvent cashAndSecurityOfferElections(List<CashAndSecurityOfferElection> cashAndSecurityOfferElections) {
    
    this.cashAndSecurityOfferElections = cashAndSecurityOfferElections;
    return this;
  }

  public MergerEvent addCashAndSecurityOfferElectionsItem(CashAndSecurityOfferElection cashAndSecurityOfferElectionsItem) {
    if (this.cashAndSecurityOfferElections == null) {
      this.cashAndSecurityOfferElections = new ArrayList<>();
    }
    this.cashAndSecurityOfferElections.add(cashAndSecurityOfferElectionsItem);
    return this;
  }

   /**
   * List of possible CashAndSecurityOfferElections for this merger event
   * @return cashAndSecurityOfferElections
  **/
  @jakarta.annotation.Nullable
  public List<CashAndSecurityOfferElection> getCashAndSecurityOfferElections() {
    return cashAndSecurityOfferElections;
  }


  public void setCashAndSecurityOfferElections(List<CashAndSecurityOfferElection> cashAndSecurityOfferElections) {
    this.cashAndSecurityOfferElections = cashAndSecurityOfferElections;
  }


  public MergerEvent cashElections(List<CashOfferElection> cashElections) {
    
    this.cashElections = cashElections;
    return this;
  }

  public MergerEvent addCashElectionsItem(CashOfferElection cashElectionsItem) {
    if (this.cashElections == null) {
      this.cashElections = new ArrayList<>();
    }
    this.cashElections.add(cashElectionsItem);
    return this;
  }

   /**
   * List of possible CashOfferElections for this merger event
   * @return cashElections
  **/
  @jakarta.annotation.Nullable
  public List<CashOfferElection> getCashElections() {
    return cashElections;
  }


  public void setCashElections(List<CashOfferElection> cashElections) {
    this.cashElections = cashElections;
  }


  public MergerEvent exDate(OffsetDateTime exDate) {
    
    this.exDate = exDate;
    return this;
  }

   /**
   * The first date on which the holder of record of the original shares has entitled ownership of the new shares.
   * @return exDate
  **/
  @jakarta.annotation.Nonnull
  public OffsetDateTime getExDate() {
    return exDate;
  }


  public void setExDate(OffsetDateTime exDate) {
    this.exDate = exDate;
  }


  public MergerEvent fractionalUnitsCashCurrency(String fractionalUnitsCashCurrency) {
    
    this.fractionalUnitsCashCurrency = fractionalUnitsCashCurrency;
    return this;
  }

   /**
   * Optional. Used in calculating cash-in-lieu of fractional shares.
   * @return fractionalUnitsCashCurrency
  **/
  @jakarta.annotation.Nullable
  public String getFractionalUnitsCashCurrency() {
    return fractionalUnitsCashCurrency;
  }


  public void setFractionalUnitsCashCurrency(String fractionalUnitsCashCurrency) {
    this.fractionalUnitsCashCurrency = fractionalUnitsCashCurrency;
  }


  public MergerEvent fractionalUnitsCashPrice(java.math.BigDecimal fractionalUnitsCashPrice) {
    
    this.fractionalUnitsCashPrice = fractionalUnitsCashPrice;
    return this;
  }

   /**
   * Optional. Used in calculating cash-in-lieu of fractional shares.
   * @return fractionalUnitsCashPrice
  **/
  @jakarta.annotation.Nullable
  public java.math.BigDecimal getFractionalUnitsCashPrice() {
    return fractionalUnitsCashPrice;
  }


  public void setFractionalUnitsCashPrice(java.math.BigDecimal fractionalUnitsCashPrice) {
    this.fractionalUnitsCashPrice = fractionalUnitsCashPrice;
  }


  public MergerEvent newInstrument(NewInstrument newInstrument) {
    
    this.newInstrument = newInstrument;
    return this;
  }

   /**
   * Get newInstrument
   * @return newInstrument
  **/
  @jakarta.annotation.Nonnull
  public NewInstrument getNewInstrument() {
    return newInstrument;
  }


  public void setNewInstrument(NewInstrument newInstrument) {
    this.newInstrument = newInstrument;
  }


  public MergerEvent paymentDate(OffsetDateTime paymentDate) {
    
    this.paymentDate = paymentDate;
    return this;
  }

   /**
   * Date on which the merger takes place.
   * @return paymentDate
  **/
  @jakarta.annotation.Nonnull
  public OffsetDateTime getPaymentDate() {
    return paymentDate;
  }


  public void setPaymentDate(OffsetDateTime paymentDate) {
    this.paymentDate = paymentDate;
  }


  public MergerEvent recordDate(OffsetDateTime recordDate) {
    
    this.recordDate = recordDate;
    return this;
  }

   /**
   * Optional. Date you have to be the holder of record of the original shares in order to receive the new shares.
   * @return recordDate
  **/
  @jakarta.annotation.Nullable
  public OffsetDateTime getRecordDate() {
    return recordDate;
  }


  public void setRecordDate(OffsetDateTime recordDate) {
    this.recordDate = recordDate;
  }


  public MergerEvent securityElections(List<SecurityOfferElection> securityElections) {
    
    this.securityElections = securityElections;
    return this;
  }

  public MergerEvent addSecurityElectionsItem(SecurityOfferElection securityElectionsItem) {
    if (this.securityElections == null) {
      this.securityElections = new ArrayList<>();
    }
    this.securityElections.add(securityElectionsItem);
    return this;
  }

   /**
   * List of possible SecurityOfferElections for this merger event
   * @return securityElections
  **/
  @jakarta.annotation.Nullable
  public List<SecurityOfferElection> getSecurityElections() {
    return securityElections;
  }


  public void setSecurityElections(List<SecurityOfferElection> securityElections) {
    this.securityElections = securityElections;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MergerEvent mergerEvent = (MergerEvent) o;
    return Objects.equals(this.announcementDate, mergerEvent.announcementDate) &&
        Objects.equals(this.cashAndSecurityOfferElections, mergerEvent.cashAndSecurityOfferElections) &&
        Objects.equals(this.cashElections, mergerEvent.cashElections) &&
        Objects.equals(this.exDate, mergerEvent.exDate) &&
        Objects.equals(this.fractionalUnitsCashCurrency, mergerEvent.fractionalUnitsCashCurrency) &&
        (this.fractionalUnitsCashPrice.compareTo(mergerEvent.getFractionalUnitsCashPrice()) == 0) &&
        Objects.equals(this.newInstrument, mergerEvent.newInstrument) &&
        Objects.equals(this.paymentDate, mergerEvent.paymentDate) &&
        Objects.equals(this.recordDate, mergerEvent.recordDate) &&
        Objects.equals(this.securityElections, mergerEvent.securityElections) &&
        super.equals(o);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(announcementDate, cashAndSecurityOfferElections, cashElections, exDate, fractionalUnitsCashCurrency, fractionalUnitsCashPrice, newInstrument, paymentDate, recordDate, securityElections, super.hashCode());
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MergerEvent {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    announcementDate: ").append(toIndentedString(announcementDate)).append("\n");
    sb.append("    cashAndSecurityOfferElections: ").append(toIndentedString(cashAndSecurityOfferElections)).append("\n");
    sb.append("    cashElections: ").append(toIndentedString(cashElections)).append("\n");
    sb.append("    exDate: ").append(toIndentedString(exDate)).append("\n");
    sb.append("    fractionalUnitsCashCurrency: ").append(toIndentedString(fractionalUnitsCashCurrency)).append("\n");
    sb.append("    fractionalUnitsCashPrice: ").append(toIndentedString(fractionalUnitsCashPrice)).append("\n");
    sb.append("    newInstrument: ").append(toIndentedString(newInstrument)).append("\n");
    sb.append("    paymentDate: ").append(toIndentedString(paymentDate)).append("\n");
    sb.append("    recordDate: ").append(toIndentedString(recordDate)).append("\n");
    sb.append("    securityElections: ").append(toIndentedString(securityElections)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("instrumentEventType");
    openapiFields.add("announcementDate");
    openapiFields.add("cashAndSecurityOfferElections");
    openapiFields.add("cashElections");
    openapiFields.add("exDate");
    openapiFields.add("fractionalUnitsCashCurrency");
    openapiFields.add("fractionalUnitsCashPrice");
    openapiFields.add("newInstrument");
    openapiFields.add("paymentDate");
    openapiFields.add("recordDate");
    openapiFields.add("securityElections");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("exDate");
    openapiRequiredFields.add("newInstrument");
    openapiRequiredFields.add("paymentDate");
    openapiRequiredFields.add("instrumentEventType");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to MergerEvent
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MergerEvent.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MergerEvent is not found in the empty JSON string", MergerEvent.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : MergerEvent.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MergerEvent.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MergerEvent' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MergerEvent> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MergerEvent.class));

       return (TypeAdapter<T>) new TypeAdapter<MergerEvent>() {
           @Override
           public void write(JsonWriter out, MergerEvent value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MergerEvent read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of MergerEvent given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of MergerEvent
  * @throws IOException if the JSON string is invalid with respect to MergerEvent
  */
  public static MergerEvent fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MergerEvent.class);
  }

 /**
  * Convert an instance of MergerEvent to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
