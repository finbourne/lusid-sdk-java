/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import com.finbourne.lusid.model.TransactionFieldMap;
import com.finbourne.lusid.model.TransactionPropertyMap;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * ComponentTransaction
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ComponentTransaction {
  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_CONDITION = "condition";
  @SerializedName(SERIALIZED_NAME_CONDITION)
  private String condition;

  public static final String SERIALIZED_NAME_TRANSACTION_FIELD_MAP = "transactionFieldMap";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_FIELD_MAP)
  private TransactionFieldMap transactionFieldMap;

  public static final String SERIALIZED_NAME_TRANSACTION_PROPERTY_MAP = "transactionPropertyMap";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_PROPERTY_MAP)
  private List<TransactionPropertyMap> transactionPropertyMap = new ArrayList<>();

  public static final String SERIALIZED_NAME_PRESERVE_TAX_LOT_STRUCTURE = "preserveTaxLotStructure";
  @SerializedName(SERIALIZED_NAME_PRESERVE_TAX_LOT_STRUCTURE)
  private Boolean preserveTaxLotStructure;

  public static final String SERIALIZED_NAME_MARKET_OPEN_TIME_ADJUSTMENTS = "marketOpenTimeAdjustments";
  @SerializedName(SERIALIZED_NAME_MARKET_OPEN_TIME_ADJUSTMENTS)
  private List<String> marketOpenTimeAdjustments;

  public ComponentTransaction() {
  }

  public ComponentTransaction displayName(String displayName) {
    
    this.displayName = displayName;
    return this;
  }

   /**
   * Get displayName
   * @return displayName
  **/
  @jakarta.annotation.Nonnull
  public String getDisplayName() {
    return displayName;
  }


  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public ComponentTransaction condition(String condition) {
    
    this.condition = condition;
    return this;
  }

   /**
   * Get condition
   * @return condition
  **/
  @jakarta.annotation.Nullable
  public String getCondition() {
    return condition;
  }


  public void setCondition(String condition) {
    this.condition = condition;
  }


  public ComponentTransaction transactionFieldMap(TransactionFieldMap transactionFieldMap) {
    
    this.transactionFieldMap = transactionFieldMap;
    return this;
  }

   /**
   * Get transactionFieldMap
   * @return transactionFieldMap
  **/
  @jakarta.annotation.Nonnull
  public TransactionFieldMap getTransactionFieldMap() {
    return transactionFieldMap;
  }


  public void setTransactionFieldMap(TransactionFieldMap transactionFieldMap) {
    this.transactionFieldMap = transactionFieldMap;
  }


  public ComponentTransaction transactionPropertyMap(List<TransactionPropertyMap> transactionPropertyMap) {
    
    this.transactionPropertyMap = transactionPropertyMap;
    return this;
  }

  public ComponentTransaction addTransactionPropertyMapItem(TransactionPropertyMap transactionPropertyMapItem) {
    if (this.transactionPropertyMap == null) {
      this.transactionPropertyMap = new ArrayList<>();
    }
    this.transactionPropertyMap.add(transactionPropertyMapItem);
    return this;
  }

   /**
   * Get transactionPropertyMap
   * @return transactionPropertyMap
  **/
  @jakarta.annotation.Nonnull
  public List<TransactionPropertyMap> getTransactionPropertyMap() {
    return transactionPropertyMap;
  }


  public void setTransactionPropertyMap(List<TransactionPropertyMap> transactionPropertyMap) {
    this.transactionPropertyMap = transactionPropertyMap;
  }


  public ComponentTransaction preserveTaxLotStructure(Boolean preserveTaxLotStructure) {
    
    this.preserveTaxLotStructure = preserveTaxLotStructure;
    return this;
  }

   /**
   * Controls if tax lot structure should be preserved when cost base is transferred to a new holding. For example in Spin Off instrument events.
   * @return preserveTaxLotStructure
  **/
  @jakarta.annotation.Nullable
  public Boolean getPreserveTaxLotStructure() {
    return preserveTaxLotStructure;
  }


  public void setPreserveTaxLotStructure(Boolean preserveTaxLotStructure) {
    this.preserveTaxLotStructure = preserveTaxLotStructure;
  }


  public ComponentTransaction marketOpenTimeAdjustments(List<String> marketOpenTimeAdjustments) {
    
    this.marketOpenTimeAdjustments = marketOpenTimeAdjustments;
    return this;
  }

  public ComponentTransaction addMarketOpenTimeAdjustmentsItem(String marketOpenTimeAdjustmentsItem) {
    if (this.marketOpenTimeAdjustments == null) {
      this.marketOpenTimeAdjustments = new ArrayList<>();
    }
    this.marketOpenTimeAdjustments.add(marketOpenTimeAdjustmentsItem);
    return this;
  }

   /**
   * Get marketOpenTimeAdjustments
   * @return marketOpenTimeAdjustments
  **/
  @jakarta.annotation.Nullable
  public List<String> getMarketOpenTimeAdjustments() {
    return marketOpenTimeAdjustments;
  }


  public void setMarketOpenTimeAdjustments(List<String> marketOpenTimeAdjustments) {
    this.marketOpenTimeAdjustments = marketOpenTimeAdjustments;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ComponentTransaction componentTransaction = (ComponentTransaction) o;
    return Objects.equals(this.displayName, componentTransaction.displayName) &&
        Objects.equals(this.condition, componentTransaction.condition) &&
        Objects.equals(this.transactionFieldMap, componentTransaction.transactionFieldMap) &&
        Objects.equals(this.transactionPropertyMap, componentTransaction.transactionPropertyMap) &&
        Objects.equals(this.preserveTaxLotStructure, componentTransaction.preserveTaxLotStructure) &&
        Objects.equals(this.marketOpenTimeAdjustments, componentTransaction.marketOpenTimeAdjustments);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(displayName, condition, transactionFieldMap, transactionPropertyMap, preserveTaxLotStructure, marketOpenTimeAdjustments);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ComponentTransaction {\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    condition: ").append(toIndentedString(condition)).append("\n");
    sb.append("    transactionFieldMap: ").append(toIndentedString(transactionFieldMap)).append("\n");
    sb.append("    transactionPropertyMap: ").append(toIndentedString(transactionPropertyMap)).append("\n");
    sb.append("    preserveTaxLotStructure: ").append(toIndentedString(preserveTaxLotStructure)).append("\n");
    sb.append("    marketOpenTimeAdjustments: ").append(toIndentedString(marketOpenTimeAdjustments)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("displayName");
    openapiFields.add("condition");
    openapiFields.add("transactionFieldMap");
    openapiFields.add("transactionPropertyMap");
    openapiFields.add("preserveTaxLotStructure");
    openapiFields.add("marketOpenTimeAdjustments");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("displayName");
    openapiRequiredFields.add("transactionFieldMap");
    openapiRequiredFields.add("transactionPropertyMap");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ComponentTransaction
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ComponentTransaction.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ComponentTransaction is not found in the empty JSON string", ComponentTransaction.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ComponentTransaction.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if ((jsonObj.get("condition") != null && !jsonObj.get("condition").isJsonNull()) && !jsonObj.get("condition").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `condition` to be a primitive type in the JSON string but got `%s`", jsonObj.get("condition").toString()));
      }
      // validate the required field `transactionFieldMap`
      TransactionFieldMap.validateJsonElement(jsonObj.get("transactionFieldMap"));
      // ensure the json data is an array
      if (!jsonObj.get("transactionPropertyMap").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `transactionPropertyMap` to be an array in the JSON string but got `%s`", jsonObj.get("transactionPropertyMap").toString()));
      }

      JsonArray jsonArraytransactionPropertyMap = jsonObj.getAsJsonArray("transactionPropertyMap");
      // validate the required field `transactionPropertyMap` (array)
      for (int i = 0; i < jsonArraytransactionPropertyMap.size(); i++) {
        TransactionPropertyMap.validateJsonElement(jsonArraytransactionPropertyMap.get(i));
      };
      // ensure the optional json data is an array if present
      if (jsonObj.get("marketOpenTimeAdjustments") != null && !jsonObj.get("marketOpenTimeAdjustments").isJsonNull() && !jsonObj.get("marketOpenTimeAdjustments").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `marketOpenTimeAdjustments` to be an array in the JSON string but got `%s`", jsonObj.get("marketOpenTimeAdjustments").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ComponentTransaction.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ComponentTransaction' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ComponentTransaction> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ComponentTransaction.class));

       return (TypeAdapter<T>) new TypeAdapter<ComponentTransaction>() {
           @Override
           public void write(JsonWriter out, ComponentTransaction value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ComponentTransaction read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ComponentTransaction given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ComponentTransaction
  * @throws IOException if the JSON string is invalid with respect to ComponentTransaction
  */
  public static ComponentTransaction fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ComponentTransaction.class);
  }

 /**
  * Convert an instance of ComponentTransaction to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
