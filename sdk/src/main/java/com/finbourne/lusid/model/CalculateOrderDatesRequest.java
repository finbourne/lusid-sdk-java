/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * CalculateOrderDatesRequest
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class CalculateOrderDatesRequest {
  public static final String SERIALIZED_NAME_INSTRUMENT_IDENTIFIER_TYPE = "instrumentIdentifierType";
  @SerializedName(SERIALIZED_NAME_INSTRUMENT_IDENTIFIER_TYPE)
  private String instrumentIdentifierType;

  public static final String SERIALIZED_NAME_INSTRUMENT_IDENTIFIER = "instrumentIdentifier";
  @SerializedName(SERIALIZED_NAME_INSTRUMENT_IDENTIFIER)
  private String instrumentIdentifier;

  public static final String SERIALIZED_NAME_INSTRUMENT_SCOPE = "instrumentScope";
  @SerializedName(SERIALIZED_NAME_INSTRUMENT_SCOPE)
  private String instrumentScope;

  public static final String SERIALIZED_NAME_RECEIVED_DATE = "receivedDate";
  @SerializedName(SERIALIZED_NAME_RECEIVED_DATE)
  private OffsetDateTime receivedDate;

  public static final String SERIALIZED_NAME_PRICE_DATE = "priceDate";
  @SerializedName(SERIALIZED_NAME_PRICE_DATE)
  private OffsetDateTime priceDate;

  public static final String SERIALIZED_NAME_TRANSACTION_CATEGORY = "transactionCategory";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_CATEGORY)
  private String transactionCategory;

  public static final String SERIALIZED_NAME_LIQUIDATING_SHARE_CLASS_IDENTIFIER = "liquidatingShareClassIdentifier";
  @SerializedName(SERIALIZED_NAME_LIQUIDATING_SHARE_CLASS_IDENTIFIER)
  private String liquidatingShareClassIdentifier;

  public static final String SERIALIZED_NAME_LIQUIDATING_SHARE_CLASS_IDENTIFIER_TYPE = "liquidatingShareClassIdentifierType";
  @SerializedName(SERIALIZED_NAME_LIQUIDATING_SHARE_CLASS_IDENTIFIER_TYPE)
  private String liquidatingShareClassIdentifierType;

  public static final String SERIALIZED_NAME_LIQUIDATING_SHARE_CLASS_INSTRUMENT_SCOPE = "liquidatingShareClassInstrumentScope";
  @SerializedName(SERIALIZED_NAME_LIQUIDATING_SHARE_CLASS_INSTRUMENT_SCOPE)
  private String liquidatingShareClassInstrumentScope;

  public CalculateOrderDatesRequest() {
  }

  public CalculateOrderDatesRequest instrumentIdentifierType(String instrumentIdentifierType) {
    
    this.instrumentIdentifierType = instrumentIdentifierType;
    return this;
  }

   /**
   * Get instrumentIdentifierType
   * @return instrumentIdentifierType
  **/
  @jakarta.annotation.Nonnull
  public String getInstrumentIdentifierType() {
    return instrumentIdentifierType;
  }


  public void setInstrumentIdentifierType(String instrumentIdentifierType) {
    this.instrumentIdentifierType = instrumentIdentifierType;
  }


  public CalculateOrderDatesRequest instrumentIdentifier(String instrumentIdentifier) {
    
    this.instrumentIdentifier = instrumentIdentifier;
    return this;
  }

   /**
   * Get instrumentIdentifier
   * @return instrumentIdentifier
  **/
  @jakarta.annotation.Nonnull
  public String getInstrumentIdentifier() {
    return instrumentIdentifier;
  }


  public void setInstrumentIdentifier(String instrumentIdentifier) {
    this.instrumentIdentifier = instrumentIdentifier;
  }


  public CalculateOrderDatesRequest instrumentScope(String instrumentScope) {
    
    this.instrumentScope = instrumentScope;
    return this;
  }

   /**
   * Get instrumentScope
   * @return instrumentScope
  **/
  @jakarta.annotation.Nullable
  public String getInstrumentScope() {
    return instrumentScope;
  }


  public void setInstrumentScope(String instrumentScope) {
    this.instrumentScope = instrumentScope;
  }


  public CalculateOrderDatesRequest receivedDate(OffsetDateTime receivedDate) {
    
    this.receivedDate = receivedDate;
    return this;
  }

   /**
   * Get receivedDate
   * @return receivedDate
  **/
  @jakarta.annotation.Nullable
  public OffsetDateTime getReceivedDate() {
    return receivedDate;
  }


  public void setReceivedDate(OffsetDateTime receivedDate) {
    this.receivedDate = receivedDate;
  }


  public CalculateOrderDatesRequest priceDate(OffsetDateTime priceDate) {
    
    this.priceDate = priceDate;
    return this;
  }

   /**
   * Get priceDate
   * @return priceDate
  **/
  @jakarta.annotation.Nullable
  public OffsetDateTime getPriceDate() {
    return priceDate;
  }


  public void setPriceDate(OffsetDateTime priceDate) {
    this.priceDate = priceDate;
  }


  public CalculateOrderDatesRequest transactionCategory(String transactionCategory) {
    
    this.transactionCategory = transactionCategory;
    return this;
  }

   /**
   * Get transactionCategory
   * @return transactionCategory
  **/
  @jakarta.annotation.Nullable
  public String getTransactionCategory() {
    return transactionCategory;
  }


  public void setTransactionCategory(String transactionCategory) {
    this.transactionCategory = transactionCategory;
  }


  public CalculateOrderDatesRequest liquidatingShareClassIdentifier(String liquidatingShareClassIdentifier) {
    
    this.liquidatingShareClassIdentifier = liquidatingShareClassIdentifier;
    return this;
  }

   /**
   * Get liquidatingShareClassIdentifier
   * @return liquidatingShareClassIdentifier
  **/
  @jakarta.annotation.Nullable
  public String getLiquidatingShareClassIdentifier() {
    return liquidatingShareClassIdentifier;
  }


  public void setLiquidatingShareClassIdentifier(String liquidatingShareClassIdentifier) {
    this.liquidatingShareClassIdentifier = liquidatingShareClassIdentifier;
  }


  public CalculateOrderDatesRequest liquidatingShareClassIdentifierType(String liquidatingShareClassIdentifierType) {
    
    this.liquidatingShareClassIdentifierType = liquidatingShareClassIdentifierType;
    return this;
  }

   /**
   * Get liquidatingShareClassIdentifierType
   * @return liquidatingShareClassIdentifierType
  **/
  @jakarta.annotation.Nullable
  public String getLiquidatingShareClassIdentifierType() {
    return liquidatingShareClassIdentifierType;
  }


  public void setLiquidatingShareClassIdentifierType(String liquidatingShareClassIdentifierType) {
    this.liquidatingShareClassIdentifierType = liquidatingShareClassIdentifierType;
  }


  public CalculateOrderDatesRequest liquidatingShareClassInstrumentScope(String liquidatingShareClassInstrumentScope) {
    
    this.liquidatingShareClassInstrumentScope = liquidatingShareClassInstrumentScope;
    return this;
  }

   /**
   * Get liquidatingShareClassInstrumentScope
   * @return liquidatingShareClassInstrumentScope
  **/
  @jakarta.annotation.Nullable
  public String getLiquidatingShareClassInstrumentScope() {
    return liquidatingShareClassInstrumentScope;
  }


  public void setLiquidatingShareClassInstrumentScope(String liquidatingShareClassInstrumentScope) {
    this.liquidatingShareClassInstrumentScope = liquidatingShareClassInstrumentScope;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CalculateOrderDatesRequest calculateOrderDatesRequest = (CalculateOrderDatesRequest) o;
    return Objects.equals(this.instrumentIdentifierType, calculateOrderDatesRequest.instrumentIdentifierType) &&
        Objects.equals(this.instrumentIdentifier, calculateOrderDatesRequest.instrumentIdentifier) &&
        Objects.equals(this.instrumentScope, calculateOrderDatesRequest.instrumentScope) &&
        Objects.equals(this.receivedDate, calculateOrderDatesRequest.receivedDate) &&
        Objects.equals(this.priceDate, calculateOrderDatesRequest.priceDate) &&
        Objects.equals(this.transactionCategory, calculateOrderDatesRequest.transactionCategory) &&
        Objects.equals(this.liquidatingShareClassIdentifier, calculateOrderDatesRequest.liquidatingShareClassIdentifier) &&
        Objects.equals(this.liquidatingShareClassIdentifierType, calculateOrderDatesRequest.liquidatingShareClassIdentifierType) &&
        Objects.equals(this.liquidatingShareClassInstrumentScope, calculateOrderDatesRequest.liquidatingShareClassInstrumentScope);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(instrumentIdentifierType, instrumentIdentifier, instrumentScope, receivedDate, priceDate, transactionCategory, liquidatingShareClassIdentifier, liquidatingShareClassIdentifierType, liquidatingShareClassInstrumentScope);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CalculateOrderDatesRequest {\n");
    sb.append("    instrumentIdentifierType: ").append(toIndentedString(instrumentIdentifierType)).append("\n");
    sb.append("    instrumentIdentifier: ").append(toIndentedString(instrumentIdentifier)).append("\n");
    sb.append("    instrumentScope: ").append(toIndentedString(instrumentScope)).append("\n");
    sb.append("    receivedDate: ").append(toIndentedString(receivedDate)).append("\n");
    sb.append("    priceDate: ").append(toIndentedString(priceDate)).append("\n");
    sb.append("    transactionCategory: ").append(toIndentedString(transactionCategory)).append("\n");
    sb.append("    liquidatingShareClassIdentifier: ").append(toIndentedString(liquidatingShareClassIdentifier)).append("\n");
    sb.append("    liquidatingShareClassIdentifierType: ").append(toIndentedString(liquidatingShareClassIdentifierType)).append("\n");
    sb.append("    liquidatingShareClassInstrumentScope: ").append(toIndentedString(liquidatingShareClassInstrumentScope)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("instrumentIdentifierType");
    openapiFields.add("instrumentIdentifier");
    openapiFields.add("instrumentScope");
    openapiFields.add("receivedDate");
    openapiFields.add("priceDate");
    openapiFields.add("transactionCategory");
    openapiFields.add("liquidatingShareClassIdentifier");
    openapiFields.add("liquidatingShareClassIdentifierType");
    openapiFields.add("liquidatingShareClassInstrumentScope");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("instrumentIdentifierType");
    openapiRequiredFields.add("instrumentIdentifier");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to CalculateOrderDatesRequest
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CalculateOrderDatesRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CalculateOrderDatesRequest is not found in the empty JSON string", CalculateOrderDatesRequest.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CalculateOrderDatesRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("instrumentIdentifierType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `instrumentIdentifierType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("instrumentIdentifierType").toString()));
      }
      if (!jsonObj.get("instrumentIdentifier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `instrumentIdentifier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("instrumentIdentifier").toString()));
      }
      if ((jsonObj.get("instrumentScope") != null && !jsonObj.get("instrumentScope").isJsonNull()) && !jsonObj.get("instrumentScope").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `instrumentScope` to be a primitive type in the JSON string but got `%s`", jsonObj.get("instrumentScope").toString()));
      }
      if ((jsonObj.get("transactionCategory") != null && !jsonObj.get("transactionCategory").isJsonNull()) && !jsonObj.get("transactionCategory").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transactionCategory` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transactionCategory").toString()));
      }
      if ((jsonObj.get("liquidatingShareClassIdentifier") != null && !jsonObj.get("liquidatingShareClassIdentifier").isJsonNull()) && !jsonObj.get("liquidatingShareClassIdentifier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `liquidatingShareClassIdentifier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("liquidatingShareClassIdentifier").toString()));
      }
      if ((jsonObj.get("liquidatingShareClassIdentifierType") != null && !jsonObj.get("liquidatingShareClassIdentifierType").isJsonNull()) && !jsonObj.get("liquidatingShareClassIdentifierType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `liquidatingShareClassIdentifierType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("liquidatingShareClassIdentifierType").toString()));
      }
      if ((jsonObj.get("liquidatingShareClassInstrumentScope") != null && !jsonObj.get("liquidatingShareClassInstrumentScope").isJsonNull()) && !jsonObj.get("liquidatingShareClassInstrumentScope").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `liquidatingShareClassInstrumentScope` to be a primitive type in the JSON string but got `%s`", jsonObj.get("liquidatingShareClassInstrumentScope").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CalculateOrderDatesRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CalculateOrderDatesRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CalculateOrderDatesRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CalculateOrderDatesRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CalculateOrderDatesRequest>() {
           @Override
           public void write(JsonWriter out, CalculateOrderDatesRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CalculateOrderDatesRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CalculateOrderDatesRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CalculateOrderDatesRequest
  * @throws IOException if the JSON string is invalid with respect to CalculateOrderDatesRequest
  */
  public static CalculateOrderDatesRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CalculateOrderDatesRequest.class);
  }

 /**
  * Convert an instance of CalculateOrderDatesRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
