/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * TransactionQueryParameters
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class TransactionQueryParameters {
  public static final String SERIALIZED_NAME_START_DATE = "startDate";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  private String startDate;

  public static final String SERIALIZED_NAME_END_DATE = "endDate";
  @SerializedName(SERIALIZED_NAME_END_DATE)
  private String endDate;

  /**
   * The date to compare against the upper and lower bounds for the effective datetime or cut label. Defaults to &#39;TradeDate&#39; if not specified. The available values are: TradeDate, SettleDate
   */
  @JsonAdapter(QueryModeEnum.Adapter.class)
  public enum QueryModeEnum {
    TRADEDATE("TradeDate"),
    
    SETTLEDATE("SettleDate");

    private String value;

    QueryModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static QueryModeEnum fromValue(String value) {
      for (QueryModeEnum b : QueryModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<QueryModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final QueryModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public QueryModeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return QueryModeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_QUERY_MODE = "queryMode";
  @SerializedName(SERIALIZED_NAME_QUERY_MODE)
  private QueryModeEnum queryMode;

  public static final String SERIALIZED_NAME_SHOW_CANCELLED_TRANSACTIONS = "showCancelledTransactions";
  @SerializedName(SERIALIZED_NAME_SHOW_CANCELLED_TRANSACTIONS)
  private Boolean showCancelledTransactions;

  public static final String SERIALIZED_NAME_TIMELINE_SCOPE = "timelineScope";
  @SerializedName(SERIALIZED_NAME_TIMELINE_SCOPE)
  private String timelineScope;

  public static final String SERIALIZED_NAME_TIMELINE_CODE = "timelineCode";
  @SerializedName(SERIALIZED_NAME_TIMELINE_CODE)
  private String timelineCode;

  public static final String SERIALIZED_NAME_INCLUDE_ECONOMICS = "includeEconomics";
  @SerializedName(SERIALIZED_NAME_INCLUDE_ECONOMICS)
  private Boolean includeEconomics;

  public TransactionQueryParameters() {
  }

  public TransactionQueryParameters startDate(String startDate) {
    
    this.startDate = startDate;
    return this;
  }

   /**
   * The lower bound effective datetime or cut label (inclusive) from which to build the transactions.
   * @return startDate
  **/
  @jakarta.annotation.Nonnull
  public String getStartDate() {
    return startDate;
  }


  public void setStartDate(String startDate) {
    this.startDate = startDate;
  }


  public TransactionQueryParameters endDate(String endDate) {
    
    this.endDate = endDate;
    return this;
  }

   /**
   * The upper bound effective datetime or cut label (inclusive) from which to retrieve transactions.
   * @return endDate
  **/
  @jakarta.annotation.Nonnull
  public String getEndDate() {
    return endDate;
  }


  public void setEndDate(String endDate) {
    this.endDate = endDate;
  }


  public TransactionQueryParameters queryMode(QueryModeEnum queryMode) {
    
    this.queryMode = queryMode;
    return this;
  }

   /**
   * The date to compare against the upper and lower bounds for the effective datetime or cut label. Defaults to &#39;TradeDate&#39; if not specified. The available values are: TradeDate, SettleDate
   * @return queryMode
  **/
  @jakarta.annotation.Nullable
  public QueryModeEnum getQueryMode() {
    return queryMode;
  }


  public void setQueryMode(QueryModeEnum queryMode) {
    this.queryMode = queryMode;
  }


  public TransactionQueryParameters showCancelledTransactions(Boolean showCancelledTransactions) {
    
    this.showCancelledTransactions = showCancelledTransactions;
    return this;
  }

   /**
   * Option to specify whether or not to include cancelled transactions in the output. Defaults to False if not specified.
   * @return showCancelledTransactions
  **/
  @jakarta.annotation.Nullable
  public Boolean getShowCancelledTransactions() {
    return showCancelledTransactions;
  }


  public void setShowCancelledTransactions(Boolean showCancelledTransactions) {
    this.showCancelledTransactions = showCancelledTransactions;
  }


  public TransactionQueryParameters timelineScope(String timelineScope) {
    
    this.timelineScope = timelineScope;
    return this;
  }

   /**
   * Scope of the Timeline for the Portfolio. The Timeline to be used while building transactions
   * @return timelineScope
  **/
  @jakarta.annotation.Nullable
  public String getTimelineScope() {
    return timelineScope;
  }


  public void setTimelineScope(String timelineScope) {
    this.timelineScope = timelineScope;
  }


  public TransactionQueryParameters timelineCode(String timelineCode) {
    
    this.timelineCode = timelineCode;
    return this;
  }

   /**
   * Code of the Timeline for the Portfolio. The Timeline to be used while building transactions
   * @return timelineCode
  **/
  @jakarta.annotation.Nullable
  public String getTimelineCode() {
    return timelineCode;
  }


  public void setTimelineCode(String timelineCode) {
    this.timelineCode = timelineCode;
  }


  public TransactionQueryParameters includeEconomics(Boolean includeEconomics) {
    
    this.includeEconomics = includeEconomics;
    return this;
  }

   /**
   * By default is false. When set to true the Economics data would be populated in the response.
   * @return includeEconomics
  **/
  @jakarta.annotation.Nullable
  public Boolean getIncludeEconomics() {
    return includeEconomics;
  }


  public void setIncludeEconomics(Boolean includeEconomics) {
    this.includeEconomics = includeEconomics;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TransactionQueryParameters transactionQueryParameters = (TransactionQueryParameters) o;
    return Objects.equals(this.startDate, transactionQueryParameters.startDate) &&
        Objects.equals(this.endDate, transactionQueryParameters.endDate) &&
        Objects.equals(this.queryMode, transactionQueryParameters.queryMode) &&
        Objects.equals(this.showCancelledTransactions, transactionQueryParameters.showCancelledTransactions) &&
        Objects.equals(this.timelineScope, transactionQueryParameters.timelineScope) &&
        Objects.equals(this.timelineCode, transactionQueryParameters.timelineCode) &&
        Objects.equals(this.includeEconomics, transactionQueryParameters.includeEconomics);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(startDate, endDate, queryMode, showCancelledTransactions, timelineScope, timelineCode, includeEconomics);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TransactionQueryParameters {\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    endDate: ").append(toIndentedString(endDate)).append("\n");
    sb.append("    queryMode: ").append(toIndentedString(queryMode)).append("\n");
    sb.append("    showCancelledTransactions: ").append(toIndentedString(showCancelledTransactions)).append("\n");
    sb.append("    timelineScope: ").append(toIndentedString(timelineScope)).append("\n");
    sb.append("    timelineCode: ").append(toIndentedString(timelineCode)).append("\n");
    sb.append("    includeEconomics: ").append(toIndentedString(includeEconomics)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("startDate");
    openapiFields.add("endDate");
    openapiFields.add("queryMode");
    openapiFields.add("showCancelledTransactions");
    openapiFields.add("timelineScope");
    openapiFields.add("timelineCode");
    openapiFields.add("includeEconomics");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("startDate");
    openapiRequiredFields.add("endDate");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to TransactionQueryParameters
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TransactionQueryParameters.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TransactionQueryParameters is not found in the empty JSON string", TransactionQueryParameters.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TransactionQueryParameters.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("startDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `startDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("startDate").toString()));
      }
      if (!jsonObj.get("endDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `endDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("endDate").toString()));
      }
      if ((jsonObj.get("queryMode") != null && !jsonObj.get("queryMode").isJsonNull()) && !jsonObj.get("queryMode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `queryMode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("queryMode").toString()));
      }
      if ((jsonObj.get("timelineScope") != null && !jsonObj.get("timelineScope").isJsonNull()) && !jsonObj.get("timelineScope").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timelineScope` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timelineScope").toString()));
      }
      if ((jsonObj.get("timelineCode") != null && !jsonObj.get("timelineCode").isJsonNull()) && !jsonObj.get("timelineCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timelineCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timelineCode").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TransactionQueryParameters.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TransactionQueryParameters' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TransactionQueryParameters> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TransactionQueryParameters.class));

       return (TypeAdapter<T>) new TypeAdapter<TransactionQueryParameters>() {
           @Override
           public void write(JsonWriter out, TransactionQueryParameters value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TransactionQueryParameters read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TransactionQueryParameters given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TransactionQueryParameters
  * @throws IOException if the JSON string is invalid with respect to TransactionQueryParameters
  */
  public static TransactionQueryParameters fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TransactionQueryParameters.class);
  }

 /**
  * Convert an instance of TransactionQueryParameters to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
