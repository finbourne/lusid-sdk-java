/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import com.finbourne.lusid.model.GroupReconciliationUserReviewBreakCode;
import com.finbourne.lusid.model.GroupReconciliationUserReviewComment;
import com.finbourne.lusid.model.GroupReconciliationUserReviewMatchKey;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * GroupReconciliationUserReview
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class GroupReconciliationUserReview {
  public static final String SERIALIZED_NAME_BREAK_CODES = "breakCodes";
  @SerializedName(SERIALIZED_NAME_BREAK_CODES)
  private List<GroupReconciliationUserReviewBreakCode> breakCodes;

  public static final String SERIALIZED_NAME_MATCH_KEYS = "matchKeys";
  @SerializedName(SERIALIZED_NAME_MATCH_KEYS)
  private List<GroupReconciliationUserReviewMatchKey> matchKeys;

  public static final String SERIALIZED_NAME_COMMENTS = "comments";
  @SerializedName(SERIALIZED_NAME_COMMENTS)
  private List<GroupReconciliationUserReviewComment> comments;

  public GroupReconciliationUserReview() {
  }

  public GroupReconciliationUserReview breakCodes(List<GroupReconciliationUserReviewBreakCode> breakCodes) {
    
    this.breakCodes = breakCodes;
    return this;
  }

  public GroupReconciliationUserReview addBreakCodesItem(GroupReconciliationUserReviewBreakCode breakCodesItem) {
    if (this.breakCodes == null) {
      this.breakCodes = new ArrayList<>();
    }
    this.breakCodes.add(breakCodesItem);
    return this;
  }

   /**
   * A list of break codes shared between the reconciliation runs of the same run instance and result hash.
   * @return breakCodes
  **/
  @jakarta.annotation.Nullable
  public List<GroupReconciliationUserReviewBreakCode> getBreakCodes() {
    return breakCodes;
  }


  public void setBreakCodes(List<GroupReconciliationUserReviewBreakCode> breakCodes) {
    this.breakCodes = breakCodes;
  }


  public GroupReconciliationUserReview matchKeys(List<GroupReconciliationUserReviewMatchKey> matchKeys) {
    
    this.matchKeys = matchKeys;
    return this;
  }

  public GroupReconciliationUserReview addMatchKeysItem(GroupReconciliationUserReviewMatchKey matchKeysItem) {
    if (this.matchKeys == null) {
      this.matchKeys = new ArrayList<>();
    }
    this.matchKeys.add(matchKeysItem);
    return this;
  }

   /**
   * A list of match keys shared between the reconciliation runs of the same run instance and result hash.
   * @return matchKeys
  **/
  @jakarta.annotation.Nullable
  public List<GroupReconciliationUserReviewMatchKey> getMatchKeys() {
    return matchKeys;
  }


  public void setMatchKeys(List<GroupReconciliationUserReviewMatchKey> matchKeys) {
    this.matchKeys = matchKeys;
  }


  public GroupReconciliationUserReview comments(List<GroupReconciliationUserReviewComment> comments) {
    
    this.comments = comments;
    return this;
  }

  public GroupReconciliationUserReview addCommentsItem(GroupReconciliationUserReviewComment commentsItem) {
    if (this.comments == null) {
      this.comments = new ArrayList<>();
    }
    this.comments.add(commentsItem);
    return this;
  }

   /**
   * A list of comments shared between the reconciliation runs of the same run instance and result hash.
   * @return comments
  **/
  @jakarta.annotation.Nullable
  public List<GroupReconciliationUserReviewComment> getComments() {
    return comments;
  }


  public void setComments(List<GroupReconciliationUserReviewComment> comments) {
    this.comments = comments;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GroupReconciliationUserReview groupReconciliationUserReview = (GroupReconciliationUserReview) o;
    return Objects.equals(this.breakCodes, groupReconciliationUserReview.breakCodes) &&
        Objects.equals(this.matchKeys, groupReconciliationUserReview.matchKeys) &&
        Objects.equals(this.comments, groupReconciliationUserReview.comments);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(breakCodes, matchKeys, comments);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GroupReconciliationUserReview {\n");
    sb.append("    breakCodes: ").append(toIndentedString(breakCodes)).append("\n");
    sb.append("    matchKeys: ").append(toIndentedString(matchKeys)).append("\n");
    sb.append("    comments: ").append(toIndentedString(comments)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("breakCodes");
    openapiFields.add("matchKeys");
    openapiFields.add("comments");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to GroupReconciliationUserReview
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GroupReconciliationUserReview.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GroupReconciliationUserReview is not found in the empty JSON string", GroupReconciliationUserReview.openapiRequiredFields.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("breakCodes") != null && !jsonObj.get("breakCodes").isJsonNull()) {
        JsonArray jsonArraybreakCodes = jsonObj.getAsJsonArray("breakCodes");
        if (jsonArraybreakCodes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("breakCodes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `breakCodes` to be an array in the JSON string but got `%s`", jsonObj.get("breakCodes").toString()));
          }

          // validate the optional field `breakCodes` (array)
          for (int i = 0; i < jsonArraybreakCodes.size(); i++) {
            GroupReconciliationUserReviewBreakCode.validateJsonElement(jsonArraybreakCodes.get(i));
          };
        }
      }
      if (jsonObj.get("matchKeys") != null && !jsonObj.get("matchKeys").isJsonNull()) {
        JsonArray jsonArraymatchKeys = jsonObj.getAsJsonArray("matchKeys");
        if (jsonArraymatchKeys != null) {
          // ensure the json data is an array
          if (!jsonObj.get("matchKeys").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `matchKeys` to be an array in the JSON string but got `%s`", jsonObj.get("matchKeys").toString()));
          }

          // validate the optional field `matchKeys` (array)
          for (int i = 0; i < jsonArraymatchKeys.size(); i++) {
            GroupReconciliationUserReviewMatchKey.validateJsonElement(jsonArraymatchKeys.get(i));
          };
        }
      }
      if (jsonObj.get("comments") != null && !jsonObj.get("comments").isJsonNull()) {
        JsonArray jsonArraycomments = jsonObj.getAsJsonArray("comments");
        if (jsonArraycomments != null) {
          // ensure the json data is an array
          if (!jsonObj.get("comments").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `comments` to be an array in the JSON string but got `%s`", jsonObj.get("comments").toString()));
          }

          // validate the optional field `comments` (array)
          for (int i = 0; i < jsonArraycomments.size(); i++) {
            GroupReconciliationUserReviewComment.validateJsonElement(jsonArraycomments.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GroupReconciliationUserReview.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GroupReconciliationUserReview' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GroupReconciliationUserReview> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GroupReconciliationUserReview.class));

       return (TypeAdapter<T>) new TypeAdapter<GroupReconciliationUserReview>() {
           @Override
           public void write(JsonWriter out, GroupReconciliationUserReview value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GroupReconciliationUserReview read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of GroupReconciliationUserReview given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of GroupReconciliationUserReview
  * @throws IOException if the JSON string is invalid with respect to GroupReconciliationUserReview
  */
  public static GroupReconciliationUserReview fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GroupReconciliationUserReview.class);
  }

 /**
  * Convert an instance of GroupReconciliationUserReview to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
