/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import com.finbourne.lusid.model.ComplexMarketData;
import com.finbourne.lusid.model.MarketDataOptions;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * Contains data (i.e. dates and pips + metadata) for building fx forward curves (when combined with a spot rate to build on)
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class FxForwardPipsCurveData extends ComplexMarketData {
  public static final String SERIALIZED_NAME_BASE_DATE = "baseDate";
  @SerializedName(SERIALIZED_NAME_BASE_DATE)
  private OffsetDateTime baseDate;

  public static final String SERIALIZED_NAME_DOM_CCY = "domCcy";
  @SerializedName(SERIALIZED_NAME_DOM_CCY)
  private String domCcy;

  public static final String SERIALIZED_NAME_FGN_CCY = "fgnCcy";
  @SerializedName(SERIALIZED_NAME_FGN_CCY)
  private String fgnCcy;

  public static final String SERIALIZED_NAME_DATES = "dates";
  @SerializedName(SERIALIZED_NAME_DATES)
  private List<OffsetDateTime> dates = new ArrayList<>();

  public static final String SERIALIZED_NAME_PIP_RATES = "pipRates";
  @SerializedName(SERIALIZED_NAME_PIP_RATES)
  private List<java.math.BigDecimal> pipRates = new ArrayList<>();

  public static final String SERIALIZED_NAME_LINEAGE = "lineage";
  @SerializedName(SERIALIZED_NAME_LINEAGE)
  private String lineage;

  public static final String SERIALIZED_NAME_MARKET_DATA_OPTIONS = "marketDataOptions";
  @SerializedName(SERIALIZED_NAME_MARKET_DATA_OPTIONS)
  private MarketDataOptions marketDataOptions;

  public FxForwardPipsCurveData() {
    // this.marketDataType = this.getClass().getSimpleName();
  }

  public FxForwardPipsCurveData baseDate(OffsetDateTime baseDate) {
    
    this.baseDate = baseDate;
    return this;
  }

   /**
   * EffectiveAt date of the quoted pip rates
   * @return baseDate
  **/
  @jakarta.annotation.Nonnull
  public OffsetDateTime getBaseDate() {
    return baseDate;
  }


  public void setBaseDate(OffsetDateTime baseDate) {
    this.baseDate = baseDate;
  }


  public FxForwardPipsCurveData domCcy(String domCcy) {
    
    this.domCcy = domCcy;
    return this;
  }

   /**
   * Domestic currency of the fx forward
   * @return domCcy
  **/
  @jakarta.annotation.Nonnull
  public String getDomCcy() {
    return domCcy;
  }


  public void setDomCcy(String domCcy) {
    this.domCcy = domCcy;
  }


  public FxForwardPipsCurveData fgnCcy(String fgnCcy) {
    
    this.fgnCcy = fgnCcy;
    return this;
  }

   /**
   * Foreign currency of the fx forward
   * @return fgnCcy
  **/
  @jakarta.annotation.Nonnull
  public String getFgnCcy() {
    return fgnCcy;
  }


  public void setFgnCcy(String fgnCcy) {
    this.fgnCcy = fgnCcy;
  }


  public FxForwardPipsCurveData dates(List<OffsetDateTime> dates) {
    
    this.dates = dates;
    return this;
  }

  public FxForwardPipsCurveData addDatesItem(OffsetDateTime datesItem) {
    if (this.dates == null) {
      this.dates = new ArrayList<>();
    }
    this.dates.add(datesItem);
    return this;
  }

   /**
   * Dates for which the forward rates apply
   * @return dates
  **/
  @jakarta.annotation.Nonnull
  public List<OffsetDateTime> getDates() {
    return dates;
  }


  public void setDates(List<OffsetDateTime> dates) {
    this.dates = dates;
  }


  public FxForwardPipsCurveData pipRates(List<java.math.BigDecimal> pipRates) {
    
    this.pipRates = pipRates;
    return this;
  }

  public FxForwardPipsCurveData addPipRatesItem(java.math.BigDecimal pipRatesItem) {
    if (this.pipRates == null) {
      this.pipRates = new ArrayList<>();
    }
    this.pipRates.add(pipRatesItem);
    return this;
  }

   /**
   * Rates provided for the fx forward (price in FgnCcy per unit of DomCcy), expressed in pips
   * @return pipRates
  **/
  @jakarta.annotation.Nonnull
  public List<java.math.BigDecimal> getPipRates() {
    return pipRates;
  }


  public void setPipRates(List<java.math.BigDecimal> pipRates) {
    this.pipRates = pipRates;
  }


  public FxForwardPipsCurveData lineage(String lineage) {
    
    this.lineage = lineage;
    return this;
  }

   /**
   * Description of the complex market data&#39;s lineage e.g. &#39;FundAccountant_GreenQuality&#39;.
   * @return lineage
  **/
  @jakarta.annotation.Nullable
  public String getLineage() {
    return lineage;
  }


  public void setLineage(String lineage) {
    this.lineage = lineage;
  }


  public FxForwardPipsCurveData marketDataOptions(MarketDataOptions marketDataOptions) {
    
    this.marketDataOptions = marketDataOptions;
    return this;
  }

   /**
   * Get marketDataOptions
   * @return marketDataOptions
  **/
  @jakarta.annotation.Nullable
  public MarketDataOptions getMarketDataOptions() {
    return marketDataOptions;
  }


  public void setMarketDataOptions(MarketDataOptions marketDataOptions) {
    this.marketDataOptions = marketDataOptions;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FxForwardPipsCurveData fxForwardPipsCurveData = (FxForwardPipsCurveData) o;
    return Objects.equals(this.baseDate, fxForwardPipsCurveData.baseDate) &&
        Objects.equals(this.domCcy, fxForwardPipsCurveData.domCcy) &&
        Objects.equals(this.fgnCcy, fxForwardPipsCurveData.fgnCcy) &&
        Objects.equals(this.dates, fxForwardPipsCurveData.dates) &&
        Objects.equals(this.pipRates, fxForwardPipsCurveData.pipRates) &&
        Objects.equals(this.lineage, fxForwardPipsCurveData.lineage) &&
        Objects.equals(this.marketDataOptions, fxForwardPipsCurveData.marketDataOptions) &&
        super.equals(o);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(baseDate, domCcy, fgnCcy, dates, pipRates, lineage, marketDataOptions, super.hashCode());
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FxForwardPipsCurveData {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    baseDate: ").append(toIndentedString(baseDate)).append("\n");
    sb.append("    domCcy: ").append(toIndentedString(domCcy)).append("\n");
    sb.append("    fgnCcy: ").append(toIndentedString(fgnCcy)).append("\n");
    sb.append("    dates: ").append(toIndentedString(dates)).append("\n");
    sb.append("    pipRates: ").append(toIndentedString(pipRates)).append("\n");
    sb.append("    lineage: ").append(toIndentedString(lineage)).append("\n");
    sb.append("    marketDataOptions: ").append(toIndentedString(marketDataOptions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("marketDataType");
    openapiFields.add("baseDate");
    openapiFields.add("domCcy");
    openapiFields.add("fgnCcy");
    openapiFields.add("dates");
    openapiFields.add("pipRates");
    openapiFields.add("lineage");
    openapiFields.add("marketDataOptions");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("baseDate");
    openapiRequiredFields.add("domCcy");
    openapiRequiredFields.add("fgnCcy");
    openapiRequiredFields.add("dates");
    openapiRequiredFields.add("pipRates");
    openapiRequiredFields.add("marketDataType");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to FxForwardPipsCurveData
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FxForwardPipsCurveData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FxForwardPipsCurveData is not found in the empty JSON string", FxForwardPipsCurveData.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : FxForwardPipsCurveData.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FxForwardPipsCurveData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FxForwardPipsCurveData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FxForwardPipsCurveData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FxForwardPipsCurveData.class));

       return (TypeAdapter<T>) new TypeAdapter<FxForwardPipsCurveData>() {
           @Override
           public void write(JsonWriter out, FxForwardPipsCurveData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FxForwardPipsCurveData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of FxForwardPipsCurveData given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of FxForwardPipsCurveData
  * @throws IOException if the JSON string is invalid with respect to FxForwardPipsCurveData
  */
  public static FxForwardPipsCurveData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FxForwardPipsCurveData.class);
  }

 /**
  * Convert an instance of FxForwardPipsCurveData to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
