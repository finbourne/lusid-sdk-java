/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * Represents LUSID entity details for a data quality check result
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class LusidEntityResult {
  public static final String SERIALIZED_NAME_AS_AT = "asAt";
  @SerializedName(SERIALIZED_NAME_AS_AT)
  private OffsetDateTime asAt;

  public static final String SERIALIZED_NAME_EFFECTIVE_AT = "effectiveAt";
  @SerializedName(SERIALIZED_NAME_EFFECTIVE_AT)
  private OffsetDateTime effectiveAt;

  public static final String SERIALIZED_NAME_ENTITY_TYPE = "entityType";
  @SerializedName(SERIALIZED_NAME_ENTITY_TYPE)
  private String entityType;

  public static final String SERIALIZED_NAME_SCOPE = "scope";
  @SerializedName(SERIALIZED_NAME_SCOPE)
  private String scope;

  public static final String SERIALIZED_NAME_IDENTIFIER_KEY = "identifierKey";
  @SerializedName(SERIALIZED_NAME_IDENTIFIER_KEY)
  private String identifierKey;

  public static final String SERIALIZED_NAME_IDENTIFIER_VALUE = "identifierValue";
  @SerializedName(SERIALIZED_NAME_IDENTIFIER_VALUE)
  private String identifierValue;

  public static final String SERIALIZED_NAME_ENTITY_UNIQUE_ID = "entityUniqueId";
  @SerializedName(SERIALIZED_NAME_ENTITY_UNIQUE_ID)
  private String entityUniqueId;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public LusidEntityResult() {
  }

  public LusidEntityResult asAt(OffsetDateTime asAt) {
    
    this.asAt = asAt;
    return this;
  }

   /**
   * The as-at timestamp for the entity
   * @return asAt
  **/
  @jakarta.annotation.Nullable
  public OffsetDateTime getAsAt() {
    return asAt;
  }


  public void setAsAt(OffsetDateTime asAt) {
    this.asAt = asAt;
  }


  public LusidEntityResult effectiveAt(OffsetDateTime effectiveAt) {
    
    this.effectiveAt = effectiveAt;
    return this;
  }

   /**
   * The effective-at timestamp for the entity
   * @return effectiveAt
  **/
  @jakarta.annotation.Nullable
  public OffsetDateTime getEffectiveAt() {
    return effectiveAt;
  }


  public void setEffectiveAt(OffsetDateTime effectiveAt) {
    this.effectiveAt = effectiveAt;
  }


  public LusidEntityResult entityType(String entityType) {
    
    this.entityType = entityType;
    return this;
  }

   /**
   * The type of the LUSID entity
   * @return entityType
  **/
  @jakarta.annotation.Nullable
  public String getEntityType() {
    return entityType;
  }


  public void setEntityType(String entityType) {
    this.entityType = entityType;
  }


  public LusidEntityResult scope(String scope) {
    
    this.scope = scope;
    return this;
  }

   /**
   * The scope of the entity
   * @return scope
  **/
  @jakarta.annotation.Nullable
  public String getScope() {
    return scope;
  }


  public void setScope(String scope) {
    this.scope = scope;
  }


  public LusidEntityResult identifierKey(String identifierKey) {
    
    this.identifierKey = identifierKey;
    return this;
  }

   /**
   * The identifier key for the entity
   * @return identifierKey
  **/
  @jakarta.annotation.Nullable
  public String getIdentifierKey() {
    return identifierKey;
  }


  public void setIdentifierKey(String identifierKey) {
    this.identifierKey = identifierKey;
  }


  public LusidEntityResult identifierValue(String identifierValue) {
    
    this.identifierValue = identifierValue;
    return this;
  }

   /**
   * The identifier value for the entity
   * @return identifierValue
  **/
  @jakarta.annotation.Nullable
  public String getIdentifierValue() {
    return identifierValue;
  }


  public void setIdentifierValue(String identifierValue) {
    this.identifierValue = identifierValue;
  }


  public LusidEntityResult entityUniqueId(String entityUniqueId) {
    
    this.entityUniqueId = entityUniqueId;
    return this;
  }

   /**
   * The unique identifier for the entity
   * @return entityUniqueId
  **/
  @jakarta.annotation.Nullable
  public String getEntityUniqueId() {
    return entityUniqueId;
  }


  public void setEntityUniqueId(String entityUniqueId) {
    this.entityUniqueId = entityUniqueId;
  }


  public LusidEntityResult displayName(String displayName) {
    
    this.displayName = displayName;
    return this;
  }

   /**
   * The display name of the entity
   * @return displayName
  **/
  @jakarta.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }


  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LusidEntityResult lusidEntityResult = (LusidEntityResult) o;
    return Objects.equals(this.asAt, lusidEntityResult.asAt) &&
        Objects.equals(this.effectiveAt, lusidEntityResult.effectiveAt) &&
        Objects.equals(this.entityType, lusidEntityResult.entityType) &&
        Objects.equals(this.scope, lusidEntityResult.scope) &&
        Objects.equals(this.identifierKey, lusidEntityResult.identifierKey) &&
        Objects.equals(this.identifierValue, lusidEntityResult.identifierValue) &&
        Objects.equals(this.entityUniqueId, lusidEntityResult.entityUniqueId) &&
        Objects.equals(this.displayName, lusidEntityResult.displayName);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(asAt, effectiveAt, entityType, scope, identifierKey, identifierValue, entityUniqueId, displayName);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LusidEntityResult {\n");
    sb.append("    asAt: ").append(toIndentedString(asAt)).append("\n");
    sb.append("    effectiveAt: ").append(toIndentedString(effectiveAt)).append("\n");
    sb.append("    entityType: ").append(toIndentedString(entityType)).append("\n");
    sb.append("    scope: ").append(toIndentedString(scope)).append("\n");
    sb.append("    identifierKey: ").append(toIndentedString(identifierKey)).append("\n");
    sb.append("    identifierValue: ").append(toIndentedString(identifierValue)).append("\n");
    sb.append("    entityUniqueId: ").append(toIndentedString(entityUniqueId)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("asAt");
    openapiFields.add("effectiveAt");
    openapiFields.add("entityType");
    openapiFields.add("scope");
    openapiFields.add("identifierKey");
    openapiFields.add("identifierValue");
    openapiFields.add("entityUniqueId");
    openapiFields.add("displayName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to LusidEntityResult
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LusidEntityResult.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LusidEntityResult is not found in the empty JSON string", LusidEntityResult.openapiRequiredFields.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("entityType") != null && !jsonObj.get("entityType").isJsonNull()) && !jsonObj.get("entityType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `entityType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("entityType").toString()));
      }
      if ((jsonObj.get("scope") != null && !jsonObj.get("scope").isJsonNull()) && !jsonObj.get("scope").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `scope` to be a primitive type in the JSON string but got `%s`", jsonObj.get("scope").toString()));
      }
      if ((jsonObj.get("identifierKey") != null && !jsonObj.get("identifierKey").isJsonNull()) && !jsonObj.get("identifierKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `identifierKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("identifierKey").toString()));
      }
      if ((jsonObj.get("identifierValue") != null && !jsonObj.get("identifierValue").isJsonNull()) && !jsonObj.get("identifierValue").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `identifierValue` to be a primitive type in the JSON string but got `%s`", jsonObj.get("identifierValue").toString()));
      }
      if ((jsonObj.get("entityUniqueId") != null && !jsonObj.get("entityUniqueId").isJsonNull()) && !jsonObj.get("entityUniqueId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `entityUniqueId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("entityUniqueId").toString()));
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LusidEntityResult.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LusidEntityResult' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LusidEntityResult> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LusidEntityResult.class));

       return (TypeAdapter<T>) new TypeAdapter<LusidEntityResult>() {
           @Override
           public void write(JsonWriter out, LusidEntityResult value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LusidEntityResult read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of LusidEntityResult given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of LusidEntityResult
  * @throws IOException if the JSON string is invalid with respect to LusidEntityResult
  */
  public static LusidEntityResult fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LusidEntityResult.class);
  }

 /**
  * Convert an instance of LusidEntityResult to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
