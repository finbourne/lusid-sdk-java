/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import com.finbourne.lusid.model.InstrumentEvent;
import com.finbourne.lusid.model.PerpetualProperty;
import com.finbourne.lusid.model.YearMonthDay;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * UpsertInstrumentEventRequest
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class UpsertInstrumentEventRequest {
  public static final String SERIALIZED_NAME_INSTRUMENT_EVENT_ID = "instrumentEventId";
  @SerializedName(SERIALIZED_NAME_INSTRUMENT_EVENT_ID)
  private String instrumentEventId;

  public static final String SERIALIZED_NAME_INSTRUMENT_IDENTIFIERS = "instrumentIdentifiers";
  @SerializedName(SERIALIZED_NAME_INSTRUMENT_IDENTIFIERS)
  private Map<String, String> instrumentIdentifiers = new HashMap<>();

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_INSTRUMENT_EVENT = "instrumentEvent";
  @SerializedName(SERIALIZED_NAME_INSTRUMENT_EVENT)
  private InstrumentEvent instrumentEvent;

  public static final String SERIALIZED_NAME_PROPERTIES = "properties";
  @SerializedName(SERIALIZED_NAME_PROPERTIES)
  private List<PerpetualProperty> properties;

  public static final String SERIALIZED_NAME_SEQUENCE_NUMBER = "sequenceNumber";
  @SerializedName(SERIALIZED_NAME_SEQUENCE_NUMBER)
  private Integer sequenceNumber;

  public static final String SERIALIZED_NAME_PARTICIPATION_TYPE = "participationType";
  @SerializedName(SERIALIZED_NAME_PARTICIPATION_TYPE)
  private String participationType = "Mandatory";

  public static final String SERIALIZED_NAME_EVENT_DATE_STAMPS = "eventDateStamps";
  @SerializedName(SERIALIZED_NAME_EVENT_DATE_STAMPS)
  private Map<String, YearMonthDay> eventDateStamps;

  public UpsertInstrumentEventRequest() {
  }

  public UpsertInstrumentEventRequest instrumentEventId(String instrumentEventId) {
    
    this.instrumentEventId = instrumentEventId;
    return this;
  }

   /**
   * Free string that uniquely identifies the event within the corporate action source
   * @return instrumentEventId
  **/
  @jakarta.annotation.Nonnull
  public String getInstrumentEventId() {
    return instrumentEventId;
  }


  public void setInstrumentEventId(String instrumentEventId) {
    this.instrumentEventId = instrumentEventId;
  }


  public UpsertInstrumentEventRequest instrumentIdentifiers(Map<String, String> instrumentIdentifiers) {
    
    this.instrumentIdentifiers = instrumentIdentifiers;
    return this;
  }

  public UpsertInstrumentEventRequest putInstrumentIdentifiersItem(String key, String instrumentIdentifiersItem) {
    if (this.instrumentIdentifiers == null) {
      this.instrumentIdentifiers = new HashMap<>();
    }
    this.instrumentIdentifiers.put(key, instrumentIdentifiersItem);
    return this;
  }

   /**
   * The set of identifiers which determine the instrument this event relates to.
   * @return instrumentIdentifiers
  **/
  @jakarta.annotation.Nonnull
  public Map<String, String> getInstrumentIdentifiers() {
    return instrumentIdentifiers;
  }


  public void setInstrumentIdentifiers(Map<String, String> instrumentIdentifiers) {
    this.instrumentIdentifiers = instrumentIdentifiers;
  }


  public UpsertInstrumentEventRequest description(String description) {
    
    this.description = description;
    return this;
  }

   /**
   * The description of the instrument event.
   * @return description
  **/
  @jakarta.annotation.Nullable
  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    this.description = description;
  }


  public UpsertInstrumentEventRequest instrumentEvent(InstrumentEvent instrumentEvent) {
    
    this.instrumentEvent = instrumentEvent;
    return this;
  }

   /**
   * Get instrumentEvent
   * @return instrumentEvent
  **/
  @jakarta.annotation.Nonnull
  public InstrumentEvent getInstrumentEvent() {
    return instrumentEvent;
  }


  public void setInstrumentEvent(InstrumentEvent instrumentEvent) {
    this.instrumentEvent = instrumentEvent;
  }


  public UpsertInstrumentEventRequest properties(List<PerpetualProperty> properties) {
    
    this.properties = properties;
    return this;
  }

  public UpsertInstrumentEventRequest addPropertiesItem(PerpetualProperty propertiesItem) {
    if (this.properties == null) {
      this.properties = new ArrayList<>();
    }
    this.properties.add(propertiesItem);
    return this;
  }

   /**
   * The properties attached to this instrument event.
   * @return properties
  **/
  @jakarta.annotation.Nullable
  public List<PerpetualProperty> getProperties() {
    return properties;
  }


  public void setProperties(List<PerpetualProperty> properties) {
    this.properties = properties;
  }


  public UpsertInstrumentEventRequest sequenceNumber(Integer sequenceNumber) {
    
    this.sequenceNumber = sequenceNumber;
    return this;
  }

   /**
   * The order of the instrument event relative others on the same date (0 being processed first). Must be non negative.
   * @return sequenceNumber
  **/
  @jakarta.annotation.Nullable
  public Integer getSequenceNumber() {
    return sequenceNumber;
  }


  public void setSequenceNumber(Integer sequenceNumber) {
    this.sequenceNumber = sequenceNumber;
  }


  public UpsertInstrumentEventRequest participationType(String participationType) {
    
    this.participationType = participationType;
    return this;
  }

   /**
   * Is participation in this event Mandatory, MandatoryWithChoices, or Voluntary.
   * @return participationType
  **/
  @jakarta.annotation.Nullable
  public String getParticipationType() {
    return participationType;
  }


  public void setParticipationType(String participationType) {
    this.participationType = participationType;
  }


  public UpsertInstrumentEventRequest eventDateStamps(Map<String, YearMonthDay> eventDateStamps) {
    
    this.eventDateStamps = eventDateStamps;
    return this;
  }

  public UpsertInstrumentEventRequest putEventDateStampsItem(String key, YearMonthDay eventDateStampsItem) {
    if (this.eventDateStamps == null) {
      this.eventDateStamps = new HashMap<>();
    }
    this.eventDateStamps.put(key, eventDateStampsItem);
    return this;
  }

   /**
   * The date stamps corresponding to the relevant date-time fields for the instrument event. The key for each provided date stamp must match the field name of a valid datetime field from the InstrumentEvent DTO.
   * @return eventDateStamps
  **/
  @jakarta.annotation.Nullable
  public Map<String, YearMonthDay> getEventDateStamps() {
    return eventDateStamps;
  }


  public void setEventDateStamps(Map<String, YearMonthDay> eventDateStamps) {
    this.eventDateStamps = eventDateStamps;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpsertInstrumentEventRequest upsertInstrumentEventRequest = (UpsertInstrumentEventRequest) o;
    return Objects.equals(this.instrumentEventId, upsertInstrumentEventRequest.instrumentEventId) &&
        Objects.equals(this.instrumentIdentifiers, upsertInstrumentEventRequest.instrumentIdentifiers) &&
        Objects.equals(this.description, upsertInstrumentEventRequest.description) &&
        Objects.equals(this.instrumentEvent, upsertInstrumentEventRequest.instrumentEvent) &&
        Objects.equals(this.properties, upsertInstrumentEventRequest.properties) &&
        Objects.equals(this.sequenceNumber, upsertInstrumentEventRequest.sequenceNumber) &&
        Objects.equals(this.participationType, upsertInstrumentEventRequest.participationType) &&
        Objects.equals(this.eventDateStamps, upsertInstrumentEventRequest.eventDateStamps);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(instrumentEventId, instrumentIdentifiers, description, instrumentEvent, properties, sequenceNumber, participationType, eventDateStamps);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpsertInstrumentEventRequest {\n");
    sb.append("    instrumentEventId: ").append(toIndentedString(instrumentEventId)).append("\n");
    sb.append("    instrumentIdentifiers: ").append(toIndentedString(instrumentIdentifiers)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    instrumentEvent: ").append(toIndentedString(instrumentEvent)).append("\n");
    sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
    sb.append("    sequenceNumber: ").append(toIndentedString(sequenceNumber)).append("\n");
    sb.append("    participationType: ").append(toIndentedString(participationType)).append("\n");
    sb.append("    eventDateStamps: ").append(toIndentedString(eventDateStamps)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("instrumentEventId");
    openapiFields.add("instrumentIdentifiers");
    openapiFields.add("description");
    openapiFields.add("instrumentEvent");
    openapiFields.add("properties");
    openapiFields.add("sequenceNumber");
    openapiFields.add("participationType");
    openapiFields.add("eventDateStamps");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("instrumentEventId");
    openapiRequiredFields.add("instrumentIdentifiers");
    openapiRequiredFields.add("instrumentEvent");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to UpsertInstrumentEventRequest
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpsertInstrumentEventRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpsertInstrumentEventRequest is not found in the empty JSON string", UpsertInstrumentEventRequest.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UpsertInstrumentEventRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("instrumentEventId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `instrumentEventId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("instrumentEventId").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // validate the required field `instrumentEvent`
      InstrumentEvent.validateJsonElement(jsonObj.get("instrumentEvent"));
      if (jsonObj.get("properties") != null && !jsonObj.get("properties").isJsonNull()) {
        JsonArray jsonArrayproperties = jsonObj.getAsJsonArray("properties");
        if (jsonArrayproperties != null) {
          // ensure the json data is an array
          if (!jsonObj.get("properties").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `properties` to be an array in the JSON string but got `%s`", jsonObj.get("properties").toString()));
          }

          // validate the optional field `properties` (array)
          for (int i = 0; i < jsonArrayproperties.size(); i++) {
            PerpetualProperty.validateJsonElement(jsonArrayproperties.get(i));
          };
        }
      }
      if ((jsonObj.get("participationType") != null && !jsonObj.get("participationType").isJsonNull()) && !jsonObj.get("participationType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `participationType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("participationType").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpsertInstrumentEventRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpsertInstrumentEventRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpsertInstrumentEventRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpsertInstrumentEventRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<UpsertInstrumentEventRequest>() {
           @Override
           public void write(JsonWriter out, UpsertInstrumentEventRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpsertInstrumentEventRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of UpsertInstrumentEventRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of UpsertInstrumentEventRequest
  * @throws IOException if the JSON string is invalid with respect to UpsertInstrumentEventRequest
  */
  public static UpsertInstrumentEventRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpsertInstrumentEventRequest.class);
  }

 /**
  * Convert an instance of UpsertInstrumentEventRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
