/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * TransactionSettlementMovement
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class TransactionSettlementMovement {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_UNITS = "units";
  @SerializedName(SERIALIZED_NAME_UNITS)
  private java.math.BigDecimal units;

  public static final String SERIALIZED_NAME_DIRECTION = "direction";
  @SerializedName(SERIALIZED_NAME_DIRECTION)
  private Integer direction;

  public static final String SERIALIZED_NAME_SETTLEMENT_MODE = "settlementMode";
  @SerializedName(SERIALIZED_NAME_SETTLEMENT_MODE)
  private String settlementMode;

  public TransactionSettlementMovement() {
  }

  public TransactionSettlementMovement name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * The movement name (optional)
   * @return name
  **/
  @jakarta.annotation.Nullable
  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public TransactionSettlementMovement type(String type) {
    
    this.type = type;
    return this;
  }

   /**
   * Movement types determine the impact of the movement on the holdings. The available values are: Settlement, Traded, StockMovement, FutureCash, Commitment, Receivable, CashSettlement, CashForward, CashCommitment, CashReceivable, Accrual, CashAccrual, ForwardFx, CashFxForward, Carry, CarryAsPnl, VariationMargin, Capital, Fee, Deferred, CashDeferred.
   * @return type
  **/
  @jakarta.annotation.Nullable
  public String getType() {
    return type;
  }


  public void setType(String type) {
    this.type = type;
  }


  public TransactionSettlementMovement units(java.math.BigDecimal units) {
    
    this.units = units;
    return this;
  }

   /**
   * The number of units for the movement.
   * @return units
  **/
  @jakarta.annotation.Nullable
  public java.math.BigDecimal getUnits() {
    return units;
  }


  public void setUnits(java.math.BigDecimal units) {
    this.units = units;
  }


  public TransactionSettlementMovement direction(Integer direction) {
    
    this.direction = direction;
    return this;
  }

   /**
   *  A multiplier to apply to Transaction amounts; the values are -1 to indicate to reverse the signs and 1 to indicate to use the signed values from the Transaction directly. For a typical Transaction with unsigned values, 1 means increase, -1 means decrease
   * @return direction
  **/
  @jakarta.annotation.Nullable
  public Integer getDirection() {
    return direction;
  }


  public void setDirection(Integer direction) {
    this.direction = direction;
  }


  public TransactionSettlementMovement settlementMode(String settlementMode) {
    
    this.settlementMode = settlementMode;
    return this;
  }

   /**
   * The mode of settlement for the movement which can either be Internal or External. An Internal movement will settle automatically on the contractual settlement date using TransactionConfiguration. An External movement will be determined by portfolio configuration and settlement instruction.
   * @return settlementMode
  **/
  @jakarta.annotation.Nullable
  public String getSettlementMode() {
    return settlementMode;
  }


  public void setSettlementMode(String settlementMode) {
    this.settlementMode = settlementMode;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TransactionSettlementMovement transactionSettlementMovement = (TransactionSettlementMovement) o;
    return Objects.equals(this.name, transactionSettlementMovement.name) &&
        Objects.equals(this.type, transactionSettlementMovement.type) &&
        (this.units.compareTo(transactionSettlementMovement.getUnits()) == 0) &&
        Objects.equals(this.direction, transactionSettlementMovement.direction) &&
        Objects.equals(this.settlementMode, transactionSettlementMovement.settlementMode);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, type, units, direction, settlementMode);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TransactionSettlementMovement {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    units: ").append(toIndentedString(units)).append("\n");
    sb.append("    direction: ").append(toIndentedString(direction)).append("\n");
    sb.append("    settlementMode: ").append(toIndentedString(settlementMode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("type");
    openapiFields.add("units");
    openapiFields.add("direction");
    openapiFields.add("settlementMode");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to TransactionSettlementMovement
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TransactionSettlementMovement.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TransactionSettlementMovement is not found in the empty JSON string", TransactionSettlementMovement.openapiRequiredFields.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if ((jsonObj.get("settlementMode") != null && !jsonObj.get("settlementMode").isJsonNull()) && !jsonObj.get("settlementMode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `settlementMode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("settlementMode").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TransactionSettlementMovement.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TransactionSettlementMovement' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TransactionSettlementMovement> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TransactionSettlementMovement.class));

       return (TypeAdapter<T>) new TypeAdapter<TransactionSettlementMovement>() {
           @Override
           public void write(JsonWriter out, TransactionSettlementMovement value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TransactionSettlementMovement read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TransactionSettlementMovement given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TransactionSettlementMovement
  * @throws IOException if the JSON string is invalid with respect to TransactionSettlementMovement
  */
  public static TransactionSettlementMovement fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TransactionSettlementMovement.class);
  }

 /**
  * Convert an instance of TransactionSettlementMovement to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
