/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * The combination of a library to use and a model in that library that defines which pricing code will evaluate instruments  having a particular type/class. This allows us to control the model type and library for a given instrument.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ModelSelection {
  /**
   * The available values are: Lusid, RefinitivQps, RefinitivTracsWeb, VolMaster, IsdaCds, YieldBook, LusidCalc
   */
  @JsonAdapter(LibraryEnum.Adapter.class)
  public enum LibraryEnum {
    LUSID("Lusid"),
    
    REFINITIVQPS("RefinitivQps"),
    
    REFINITIVTRACSWEB("RefinitivTracsWeb"),
    
    VOLMASTER("VolMaster"),
    
    ISDACDS("IsdaCds"),
    
    YIELDBOOK("YieldBook"),
    
    LUSIDCALC("LusidCalc");

    private String value;

    LibraryEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LibraryEnum fromValue(String value) {
      for (LibraryEnum b : LibraryEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LibraryEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LibraryEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LibraryEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LibraryEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_LIBRARY = "library";
  @SerializedName(SERIALIZED_NAME_LIBRARY)
  private LibraryEnum library;

  /**
   * The available values are: SimpleStatic, Discounting, VendorDefault, BlackScholes, ConstantTimeValueOfMoney, Bachelier, ForwardWithPoints, ForwardWithPointsUndiscounted, ForwardSpecifiedRate, ForwardSpecifiedRateUndiscounted, IndexNav, IndexPrice, InlinedIndex, ForwardFromCurve, ForwardFromCurveUndiscounted, BlackScholesDigital, BjerksundStensland1993, LookUpPricing
   */
  @JsonAdapter(ModelEnum.Adapter.class)
  public enum ModelEnum {
    SIMPLESTATIC("SimpleStatic"),
    
    DISCOUNTING("Discounting"),
    
    VENDORDEFAULT("VendorDefault"),
    
    BLACKSCHOLES("BlackScholes"),
    
    CONSTANTTIMEVALUEOFMONEY("ConstantTimeValueOfMoney"),
    
    BACHELIER("Bachelier"),
    
    FORWARDWITHPOINTS("ForwardWithPoints"),
    
    FORWARDWITHPOINTSUNDISCOUNTED("ForwardWithPointsUndiscounted"),
    
    FORWARDSPECIFIEDRATE("ForwardSpecifiedRate"),
    
    FORWARDSPECIFIEDRATEUNDISCOUNTED("ForwardSpecifiedRateUndiscounted"),
    
    INDEXNAV("IndexNav"),
    
    INDEXPRICE("IndexPrice"),
    
    INLINEDINDEX("InlinedIndex"),
    
    FORWARDFROMCURVE("ForwardFromCurve"),
    
    FORWARDFROMCURVEUNDISCOUNTED("ForwardFromCurveUndiscounted"),
    
    BLACKSCHOLESDIGITAL("BlackScholesDigital"),
    
    BJERKSUNDSTENSLAND1993("BjerksundStensland1993"),
    
    LOOKUPPRICING("LookUpPricing");

    private String value;

    ModelEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ModelEnum fromValue(String value) {
      for (ModelEnum b : ModelEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ModelEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ModelEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ModelEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ModelEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_MODEL = "model";
  @SerializedName(SERIALIZED_NAME_MODEL)
  private ModelEnum model;

  public ModelSelection() {
  }

  public ModelSelection library(LibraryEnum library) {
    
    this.library = library;
    return this;
  }

   /**
   * The available values are: Lusid, RefinitivQps, RefinitivTracsWeb, VolMaster, IsdaCds, YieldBook, LusidCalc
   * @return library
  **/
  @javax.annotation.Nonnull
  public LibraryEnum getLibrary() {
    return library;
  }


  public void setLibrary(LibraryEnum library) {
    this.library = library;
  }


  public ModelSelection model(ModelEnum model) {
    
    this.model = model;
    return this;
  }

   /**
   * The available values are: SimpleStatic, Discounting, VendorDefault, BlackScholes, ConstantTimeValueOfMoney, Bachelier, ForwardWithPoints, ForwardWithPointsUndiscounted, ForwardSpecifiedRate, ForwardSpecifiedRateUndiscounted, IndexNav, IndexPrice, InlinedIndex, ForwardFromCurve, ForwardFromCurveUndiscounted, BlackScholesDigital, BjerksundStensland1993, LookUpPricing
   * @return model
  **/
  @javax.annotation.Nonnull
  public ModelEnum getModel() {
    return model;
  }


  public void setModel(ModelEnum model) {
    this.model = model;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ModelSelection modelSelection = (ModelSelection) o;
    return Objects.equals(this.library, modelSelection.library) &&
        Objects.equals(this.model, modelSelection.model);
  }

  @Override
  public int hashCode() {
    return Objects.hash(library, model);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ModelSelection {\n");
    sb.append("    library: ").append(toIndentedString(library)).append("\n");
    sb.append("    model: ").append(toIndentedString(model)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("library");
    openapiFields.add("model");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("library");
    openapiRequiredFields.add("model");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ModelSelection
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ModelSelection.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ModelSelection is not found in the empty JSON string", ModelSelection.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ModelSelection.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ModelSelection` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ModelSelection.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("library").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `library` to be a primitive type in the JSON string but got `%s`", jsonObj.get("library").toString()));
      }
      if (!jsonObj.get("model").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `model` to be a primitive type in the JSON string but got `%s`", jsonObj.get("model").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ModelSelection.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ModelSelection' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ModelSelection> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ModelSelection.class));

       return (TypeAdapter<T>) new TypeAdapter<ModelSelection>() {
           @Override
           public void write(JsonWriter out, ModelSelection value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ModelSelection read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ModelSelection given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ModelSelection
  * @throws IOException if the JSON string is invalid with respect to ModelSelection
  */
  public static ModelSelection fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ModelSelection.class);
  }

 /**
  * Convert an instance of ModelSelection to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
