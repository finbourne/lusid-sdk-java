/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import com.finbourne.lusid.model.LusidInstrument;
import com.finbourne.lusid.model.WeightedInstrumentInLineLookupIdentifiers;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * Specification for a holding or quantity of (weight for) an instrument on a given date.
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class WeightedInstrument {
  public static final String SERIALIZED_NAME_QUANTITY = "quantity";
  @SerializedName(SERIALIZED_NAME_QUANTITY)
  private java.math.BigDecimal quantity;

  public static final String SERIALIZED_NAME_HOLDING_IDENTIFIER = "holdingIdentifier";
  @SerializedName(SERIALIZED_NAME_HOLDING_IDENTIFIER)
  private String holdingIdentifier;

  public static final String SERIALIZED_NAME_INSTRUMENT = "instrument";
  @SerializedName(SERIALIZED_NAME_INSTRUMENT)
  private LusidInstrument instrument;

  public static final String SERIALIZED_NAME_IN_LINE_LOOKUP_IDENTIFIERS = "inLineLookupIdentifiers";
  @SerializedName(SERIALIZED_NAME_IN_LINE_LOOKUP_IDENTIFIERS)
  private WeightedInstrumentInLineLookupIdentifiers inLineLookupIdentifiers;

  public WeightedInstrument() {
  }

  public WeightedInstrument quantity(java.math.BigDecimal quantity) {
    
    this.quantity = quantity;
    return this;
  }

   /**
   * The quantity of the instrument that is owned.
   * @return quantity
  **/
  @jakarta.annotation.Nullable
  public java.math.BigDecimal getQuantity() {
    return quantity;
  }


  public void setQuantity(java.math.BigDecimal quantity) {
    this.quantity = quantity;
  }


  public WeightedInstrument holdingIdentifier(String holdingIdentifier) {
    
    this.holdingIdentifier = holdingIdentifier;
    return this;
  }

   /**
   * Identifier for the instrument.  For a single, unique trade or transaction this can be thought of as equivalent to the transaction identifier, or  a composite of the sub-holding keys for a regular sub-holding. When there are multiple transactions sharing the same underlying instrument  such as purchase of shares on multiple dates where tax implications are different this would not be the case.    In an inlined aggregation request if this is wanted to identify a line item, it can be specified in the set of aggregation keys given on the aggregation  request that accompanies the set of weighted instruments.
   * @return holdingIdentifier
  **/
  @jakarta.annotation.Nullable
  public String getHoldingIdentifier() {
    return holdingIdentifier;
  }


  public void setHoldingIdentifier(String holdingIdentifier) {
    this.holdingIdentifier = holdingIdentifier;
  }


  public WeightedInstrument instrument(LusidInstrument instrument) {
    
    this.instrument = instrument;
    return this;
  }

   /**
   * Get instrument
   * @return instrument
  **/
  @jakarta.annotation.Nullable
  public LusidInstrument getInstrument() {
    return instrument;
  }


  public void setInstrument(LusidInstrument instrument) {
    this.instrument = instrument;
  }


  public WeightedInstrument inLineLookupIdentifiers(WeightedInstrumentInLineLookupIdentifiers inLineLookupIdentifiers) {
    
    this.inLineLookupIdentifiers = inLineLookupIdentifiers;
    return this;
  }

   /**
   * Get inLineLookupIdentifiers
   * @return inLineLookupIdentifiers
  **/
  @jakarta.annotation.Nullable
  public WeightedInstrumentInLineLookupIdentifiers getInLineLookupIdentifiers() {
    return inLineLookupIdentifiers;
  }


  public void setInLineLookupIdentifiers(WeightedInstrumentInLineLookupIdentifiers inLineLookupIdentifiers) {
    this.inLineLookupIdentifiers = inLineLookupIdentifiers;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WeightedInstrument weightedInstrument = (WeightedInstrument) o;
    return (this.quantity.compareTo(weightedInstrument.getQuantity()) == 0) &&
        Objects.equals(this.holdingIdentifier, weightedInstrument.holdingIdentifier) &&
        Objects.equals(this.instrument, weightedInstrument.instrument) &&
        Objects.equals(this.inLineLookupIdentifiers, weightedInstrument.inLineLookupIdentifiers);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(quantity, holdingIdentifier, instrument, inLineLookupIdentifiers);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WeightedInstrument {\n");
    sb.append("    quantity: ").append(toIndentedString(quantity)).append("\n");
    sb.append("    holdingIdentifier: ").append(toIndentedString(holdingIdentifier)).append("\n");
    sb.append("    instrument: ").append(toIndentedString(instrument)).append("\n");
    sb.append("    inLineLookupIdentifiers: ").append(toIndentedString(inLineLookupIdentifiers)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("quantity");
    openapiFields.add("holdingIdentifier");
    openapiFields.add("instrument");
    openapiFields.add("inLineLookupIdentifiers");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to WeightedInstrument
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!WeightedInstrument.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WeightedInstrument is not found in the empty JSON string", WeightedInstrument.openapiRequiredFields.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("holdingIdentifier") != null && !jsonObj.get("holdingIdentifier").isJsonNull()) && !jsonObj.get("holdingIdentifier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `holdingIdentifier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("holdingIdentifier").toString()));
      }
      // validate the optional field `instrument`
      if (jsonObj.get("instrument") != null && !jsonObj.get("instrument").isJsonNull()) {
        LusidInstrument.validateJsonElement(jsonObj.get("instrument"));
      }
      // validate the optional field `inLineLookupIdentifiers`
      if (jsonObj.get("inLineLookupIdentifiers") != null && !jsonObj.get("inLineLookupIdentifiers").isJsonNull()) {
        WeightedInstrumentInLineLookupIdentifiers.validateJsonElement(jsonObj.get("inLineLookupIdentifiers"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WeightedInstrument.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WeightedInstrument' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WeightedInstrument> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WeightedInstrument.class));

       return (TypeAdapter<T>) new TypeAdapter<WeightedInstrument>() {
           @Override
           public void write(JsonWriter out, WeightedInstrument value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WeightedInstrument read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of WeightedInstrument given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of WeightedInstrument
  * @throws IOException if the JSON string is invalid with respect to WeightedInstrument
  */
  public static WeightedInstrument fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WeightedInstrument.class);
  }

 /**
  * Convert an instance of WeightedInstrument to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
