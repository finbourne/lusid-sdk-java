/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import com.finbourne.lusid.model.UpsertRelationalDataPointDataSeries;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * UpsertRelationalDataPointRequest
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class UpsertRelationalDataPointRequest {
  public static final String SERIALIZED_NAME_DATA_POINT_DATA_SERIES = "dataPointDataSeries";
  @SerializedName(SERIALIZED_NAME_DATA_POINT_DATA_SERIES)
  private UpsertRelationalDataPointDataSeries dataPointDataSeries;

  public static final String SERIALIZED_NAME_EFFECTIVE_AT = "effectiveAt";
  @SerializedName(SERIALIZED_NAME_EFFECTIVE_AT)
  private String effectiveAt;

  public static final String SERIALIZED_NAME_VALUE_FIELDS = "valueFields";
  @SerializedName(SERIALIZED_NAME_VALUE_FIELDS)
  private Map<String, Object> valueFields = new HashMap<>();

  public static final String SERIALIZED_NAME_META_DATA_FIELDS = "metaDataFields";
  @SerializedName(SERIALIZED_NAME_META_DATA_FIELDS)
  private Map<String, Object> metaDataFields;

  public UpsertRelationalDataPointRequest() {
  }

  public UpsertRelationalDataPointRequest dataPointDataSeries(UpsertRelationalDataPointDataSeries dataPointDataSeries) {
    
    this.dataPointDataSeries = dataPointDataSeries;
    return this;
  }

   /**
   * Get dataPointDataSeries
   * @return dataPointDataSeries
  **/
  @jakarta.annotation.Nonnull
  public UpsertRelationalDataPointDataSeries getDataPointDataSeries() {
    return dataPointDataSeries;
  }


  public void setDataPointDataSeries(UpsertRelationalDataPointDataSeries dataPointDataSeries) {
    this.dataPointDataSeries = dataPointDataSeries;
  }


  public UpsertRelationalDataPointRequest effectiveAt(String effectiveAt) {
    
    this.effectiveAt = effectiveAt;
    return this;
  }

   /**
   * The effectiveAt or cut-label datetime of the DataPoint.
   * @return effectiveAt
  **/
  @jakarta.annotation.Nonnull
  public String getEffectiveAt() {
    return effectiveAt;
  }


  public void setEffectiveAt(String effectiveAt) {
    this.effectiveAt = effectiveAt;
  }


  public UpsertRelationalDataPointRequest valueFields(Map<String, Object> valueFields) {
    
    this.valueFields = valueFields;
    return this;
  }

  public UpsertRelationalDataPointRequest putValueFieldsItem(String key, Object valueFieldsItem) {
    if (this.valueFields == null) {
      this.valueFields = new HashMap<>();
    }
    this.valueFields.put(key, valueFieldsItem);
    return this;
  }

   /**
   * The values associated with the DataPoint, structured according to the FieldSchema of the parent RelationalDatasetDefinition.
   * @return valueFields
  **/
  @jakarta.annotation.Nonnull
  public Map<String, Object> getValueFields() {
    return valueFields;
  }


  public void setValueFields(Map<String, Object> valueFields) {
    this.valueFields = valueFields;
  }


  public UpsertRelationalDataPointRequest metaDataFields(Map<String, Object> metaDataFields) {
    
    this.metaDataFields = metaDataFields;
    return this;
  }

  public UpsertRelationalDataPointRequest putMetaDataFieldsItem(String key, Object metaDataFieldsItem) {
    if (this.metaDataFields == null) {
      this.metaDataFields = new HashMap<>();
    }
    this.metaDataFields.put(key, metaDataFieldsItem);
    return this;
  }

   /**
   * The metadata associated with the DataPoint, structured according to the FieldSchema of the parent RelationalDatasetDefinition.
   * @return metaDataFields
  **/
  @jakarta.annotation.Nullable
  public Map<String, Object> getMetaDataFields() {
    return metaDataFields;
  }


  public void setMetaDataFields(Map<String, Object> metaDataFields) {
    this.metaDataFields = metaDataFields;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpsertRelationalDataPointRequest upsertRelationalDataPointRequest = (UpsertRelationalDataPointRequest) o;
    return Objects.equals(this.dataPointDataSeries, upsertRelationalDataPointRequest.dataPointDataSeries) &&
        Objects.equals(this.effectiveAt, upsertRelationalDataPointRequest.effectiveAt) &&
        Objects.equals(this.valueFields, upsertRelationalDataPointRequest.valueFields) &&
        Objects.equals(this.metaDataFields, upsertRelationalDataPointRequest.metaDataFields);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(dataPointDataSeries, effectiveAt, valueFields, metaDataFields);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpsertRelationalDataPointRequest {\n");
    sb.append("    dataPointDataSeries: ").append(toIndentedString(dataPointDataSeries)).append("\n");
    sb.append("    effectiveAt: ").append(toIndentedString(effectiveAt)).append("\n");
    sb.append("    valueFields: ").append(toIndentedString(valueFields)).append("\n");
    sb.append("    metaDataFields: ").append(toIndentedString(metaDataFields)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dataPointDataSeries");
    openapiFields.add("effectiveAt");
    openapiFields.add("valueFields");
    openapiFields.add("metaDataFields");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("dataPointDataSeries");
    openapiRequiredFields.add("effectiveAt");
    openapiRequiredFields.add("valueFields");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to UpsertRelationalDataPointRequest
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpsertRelationalDataPointRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpsertRelationalDataPointRequest is not found in the empty JSON string", UpsertRelationalDataPointRequest.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UpsertRelationalDataPointRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `dataPointDataSeries`
      UpsertRelationalDataPointDataSeries.validateJsonElement(jsonObj.get("dataPointDataSeries"));
      if (!jsonObj.get("effectiveAt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `effectiveAt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("effectiveAt").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpsertRelationalDataPointRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpsertRelationalDataPointRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpsertRelationalDataPointRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpsertRelationalDataPointRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<UpsertRelationalDataPointRequest>() {
           @Override
           public void write(JsonWriter out, UpsertRelationalDataPointRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpsertRelationalDataPointRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of UpsertRelationalDataPointRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of UpsertRelationalDataPointRequest
  * @throws IOException if the JSON string is invalid with respect to UpsertRelationalDataPointRequest
  */
  public static UpsertRelationalDataPointRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpsertRelationalDataPointRequest.class);
  }

 /**
  * Convert an instance of UpsertRelationalDataPointRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
