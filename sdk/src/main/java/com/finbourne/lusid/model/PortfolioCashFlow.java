/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import com.finbourne.lusid.model.CurrencyAndAmount;
import com.finbourne.lusid.model.Link;
import com.finbourne.lusid.model.PerpetualProperty;
import com.finbourne.lusid.model.Transaction;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * The details for the cashflow for a given portfolio.
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class PortfolioCashFlow {
  public static final String SERIALIZED_NAME_GROUP_BY_ID = "groupById";
  @SerializedName(SERIALIZED_NAME_GROUP_BY_ID)
  private Integer groupById;

  public static final String SERIALIZED_NAME_SEQUENCE_NUMBER = "sequenceNumber";
  @SerializedName(SERIALIZED_NAME_SEQUENCE_NUMBER)
  private Integer sequenceNumber;

  public static final String SERIALIZED_NAME_EFFECTIVE_DATE = "effectiveDate";
  @SerializedName(SERIALIZED_NAME_EFFECTIVE_DATE)
  private OffsetDateTime effectiveDate;

  public static final String SERIALIZED_NAME_SUB_HOLDING_KEYS = "subHoldingKeys";
  @SerializedName(SERIALIZED_NAME_SUB_HOLDING_KEYS)
  private Map<String, PerpetualProperty> subHoldingKeys;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_MOVEMENT_NAME = "movementName";
  @SerializedName(SERIALIZED_NAME_MOVEMENT_NAME)
  private String movementName;

  public static final String SERIALIZED_NAME_CASHFLOW = "cashflow";
  @SerializedName(SERIALIZED_NAME_CASHFLOW)
  private CurrencyAndAmount cashflow;

  public static final String SERIALIZED_NAME_BALANCE = "balance";
  @SerializedName(SERIALIZED_NAME_BALANCE)
  private CurrencyAndAmount balance;

  public static final String SERIALIZED_NAME_FX_RATE = "fxRate";
  @SerializedName(SERIALIZED_NAME_FX_RATE)
  private java.math.BigDecimal fxRate;

  public static final String SERIALIZED_NAME_CASHFLOW_REPORTING_CURRENCY = "cashflowReportingCurrency";
  @SerializedName(SERIALIZED_NAME_CASHFLOW_REPORTING_CURRENCY)
  private CurrencyAndAmount cashflowReportingCurrency;

  public static final String SERIALIZED_NAME_BALANCE_REPORTING_CURRENCY = "balanceReportingCurrency";
  @SerializedName(SERIALIZED_NAME_BALANCE_REPORTING_CURRENCY)
  private CurrencyAndAmount balanceReportingCurrency;

  public static final String SERIALIZED_NAME_TRANSLATION_GAIN_LOSS = "translationGainLoss";
  @SerializedName(SERIALIZED_NAME_TRANSLATION_GAIN_LOSS)
  private CurrencyAndAmount translationGainLoss;

  public static final String SERIALIZED_NAME_COST_BASIS_REPORTING_CURRENCY = "costBasisReportingCurrency";
  @SerializedName(SERIALIZED_NAME_COST_BASIS_REPORTING_CURRENCY)
  private CurrencyAndAmount costBasisReportingCurrency;

  public static final String SERIALIZED_NAME_TRANSACTION = "transaction";
  @SerializedName(SERIALIZED_NAME_TRANSACTION)
  private Transaction transaction;

  public static final String SERIALIZED_NAME_UNREALISED_GAIN_LOSS_REPORTING_CURRENCY = "unrealisedGainLossReportingCurrency";
  @SerializedName(SERIALIZED_NAME_UNREALISED_GAIN_LOSS_REPORTING_CURRENCY)
  private CurrencyAndAmount unrealisedGainLossReportingCurrency;

  public static final String SERIALIZED_NAME_LINKS = "links";
  @SerializedName(SERIALIZED_NAME_LINKS)
  private List<Link> links;

  public PortfolioCashFlow() {
  }

  public PortfolioCashFlow groupById(Integer groupById) {
    
    this.groupById = groupById;
    return this;
  }

   /**
   * The groupBy subHoldings and currency.
   * @return groupById
  **/
  @jakarta.annotation.Nonnull
  public Integer getGroupById() {
    return groupById;
  }


  public void setGroupById(Integer groupById) {
    this.groupById = groupById;
  }


  public PortfolioCashFlow sequenceNumber(Integer sequenceNumber) {
    
    this.sequenceNumber = sequenceNumber;
    return this;
  }

   /**
   * Sequence number determining the order of the cash flow records.
   * @return sequenceNumber
  **/
  @jakarta.annotation.Nonnull
  public Integer getSequenceNumber() {
    return sequenceNumber;
  }


  public void setSequenceNumber(Integer sequenceNumber) {
    this.sequenceNumber = sequenceNumber;
  }


  public PortfolioCashFlow effectiveDate(OffsetDateTime effectiveDate) {
    
    this.effectiveDate = effectiveDate;
    return this;
  }

   /**
   * Indicates the date when the cash-flow settles.
   * @return effectiveDate
  **/
  @jakarta.annotation.Nullable
  public OffsetDateTime getEffectiveDate() {
    return effectiveDate;
  }


  public void setEffectiveDate(OffsetDateTime effectiveDate) {
    this.effectiveDate = effectiveDate;
  }


  public PortfolioCashFlow subHoldingKeys(Map<String, PerpetualProperty> subHoldingKeys) {
    
    this.subHoldingKeys = subHoldingKeys;
    return this;
  }

  public PortfolioCashFlow putSubHoldingKeysItem(String key, PerpetualProperty subHoldingKeysItem) {
    if (this.subHoldingKeys == null) {
      this.subHoldingKeys = new HashMap<>();
    }
    this.subHoldingKeys.put(key, subHoldingKeysItem);
    return this;
  }

   /**
   * The sub-holding properties which identify the holding. Each property will be from the &#39;Transaction&#39; domain. These are configured on a transaction portfolio.
   * @return subHoldingKeys
  **/
  @jakarta.annotation.Nullable
  public Map<String, PerpetualProperty> getSubHoldingKeys() {
    return subHoldingKeys;
  }


  public void setSubHoldingKeys(Map<String, PerpetualProperty> subHoldingKeys) {
    this.subHoldingKeys = subHoldingKeys;
  }


  public PortfolioCashFlow type(String type) {
    
    this.type = type;
    return this;
  }

   /**
   * Indicates the record type (Closed, Open, Activity).
   * @return type
  **/
  @jakarta.annotation.Nonnull
  public String getType() {
    return type;
  }


  public void setType(String type) {
    this.type = type;
  }


  public PortfolioCashFlow movementName(String movementName) {
    
    this.movementName = movementName;
    return this;
  }

   /**
   * Indicates the specific movement of the transaction that generated this cash flow.
   * @return movementName
  **/
  @jakarta.annotation.Nonnull
  public String getMovementName() {
    return movementName;
  }


  public void setMovementName(String movementName) {
    this.movementName = movementName;
  }


  public PortfolioCashFlow cashflow(CurrencyAndAmount cashflow) {
    
    this.cashflow = cashflow;
    return this;
  }

   /**
   * Get cashflow
   * @return cashflow
  **/
  @jakarta.annotation.Nonnull
  public CurrencyAndAmount getCashflow() {
    return cashflow;
  }


  public void setCashflow(CurrencyAndAmount cashflow) {
    this.cashflow = cashflow;
  }


  public PortfolioCashFlow balance(CurrencyAndAmount balance) {
    
    this.balance = balance;
    return this;
  }

   /**
   * Get balance
   * @return balance
  **/
  @jakarta.annotation.Nonnull
  public CurrencyAndAmount getBalance() {
    return balance;
  }


  public void setBalance(CurrencyAndAmount balance) {
    this.balance = balance;
  }


  public PortfolioCashFlow fxRate(java.math.BigDecimal fxRate) {
    
    this.fxRate = fxRate;
    return this;
  }

   /**
   * Exchange rate between the currency of this cash flow and the reporting currency.
   * @return fxRate
  **/
  @jakarta.annotation.Nonnull
  public java.math.BigDecimal getFxRate() {
    return fxRate;
  }


  public void setFxRate(java.math.BigDecimal fxRate) {
    this.fxRate = fxRate;
  }


  public PortfolioCashFlow cashflowReportingCurrency(CurrencyAndAmount cashflowReportingCurrency) {
    
    this.cashflowReportingCurrency = cashflowReportingCurrency;
    return this;
  }

   /**
   * Get cashflowReportingCurrency
   * @return cashflowReportingCurrency
  **/
  @jakarta.annotation.Nonnull
  public CurrencyAndAmount getCashflowReportingCurrency() {
    return cashflowReportingCurrency;
  }


  public void setCashflowReportingCurrency(CurrencyAndAmount cashflowReportingCurrency) {
    this.cashflowReportingCurrency = cashflowReportingCurrency;
  }


  public PortfolioCashFlow balanceReportingCurrency(CurrencyAndAmount balanceReportingCurrency) {
    
    this.balanceReportingCurrency = balanceReportingCurrency;
    return this;
  }

   /**
   * Get balanceReportingCurrency
   * @return balanceReportingCurrency
  **/
  @jakarta.annotation.Nonnull
  public CurrencyAndAmount getBalanceReportingCurrency() {
    return balanceReportingCurrency;
  }


  public void setBalanceReportingCurrency(CurrencyAndAmount balanceReportingCurrency) {
    this.balanceReportingCurrency = balanceReportingCurrency;
  }


  public PortfolioCashFlow translationGainLoss(CurrencyAndAmount translationGainLoss) {
    
    this.translationGainLoss = translationGainLoss;
    return this;
  }

   /**
   * Get translationGainLoss
   * @return translationGainLoss
  **/
  @jakarta.annotation.Nonnull
  public CurrencyAndAmount getTranslationGainLoss() {
    return translationGainLoss;
  }


  public void setTranslationGainLoss(CurrencyAndAmount translationGainLoss) {
    this.translationGainLoss = translationGainLoss;
  }


  public PortfolioCashFlow costBasisReportingCurrency(CurrencyAndAmount costBasisReportingCurrency) {
    
    this.costBasisReportingCurrency = costBasisReportingCurrency;
    return this;
  }

   /**
   * Get costBasisReportingCurrency
   * @return costBasisReportingCurrency
  **/
  @jakarta.annotation.Nonnull
  public CurrencyAndAmount getCostBasisReportingCurrency() {
    return costBasisReportingCurrency;
  }


  public void setCostBasisReportingCurrency(CurrencyAndAmount costBasisReportingCurrency) {
    this.costBasisReportingCurrency = costBasisReportingCurrency;
  }


  public PortfolioCashFlow transaction(Transaction transaction) {
    
    this.transaction = transaction;
    return this;
  }

   /**
   * Get transaction
   * @return transaction
  **/
  @jakarta.annotation.Nullable
  public Transaction getTransaction() {
    return transaction;
  }


  public void setTransaction(Transaction transaction) {
    this.transaction = transaction;
  }


  public PortfolioCashFlow unrealisedGainLossReportingCurrency(CurrencyAndAmount unrealisedGainLossReportingCurrency) {
    
    this.unrealisedGainLossReportingCurrency = unrealisedGainLossReportingCurrency;
    return this;
  }

   /**
   * Get unrealisedGainLossReportingCurrency
   * @return unrealisedGainLossReportingCurrency
  **/
  @jakarta.annotation.Nonnull
  public CurrencyAndAmount getUnrealisedGainLossReportingCurrency() {
    return unrealisedGainLossReportingCurrency;
  }


  public void setUnrealisedGainLossReportingCurrency(CurrencyAndAmount unrealisedGainLossReportingCurrency) {
    this.unrealisedGainLossReportingCurrency = unrealisedGainLossReportingCurrency;
  }


  public PortfolioCashFlow links(List<Link> links) {
    
    this.links = links;
    return this;
  }

  public PortfolioCashFlow addLinksItem(Link linksItem) {
    if (this.links == null) {
      this.links = new ArrayList<>();
    }
    this.links.add(linksItem);
    return this;
  }

   /**
   * Get links
   * @return links
  **/
  @jakarta.annotation.Nullable
  public List<Link> getLinks() {
    return links;
  }


  public void setLinks(List<Link> links) {
    this.links = links;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PortfolioCashFlow portfolioCashFlow = (PortfolioCashFlow) o;
    return Objects.equals(this.groupById, portfolioCashFlow.groupById) &&
        Objects.equals(this.sequenceNumber, portfolioCashFlow.sequenceNumber) &&
        Objects.equals(this.effectiveDate, portfolioCashFlow.effectiveDate) &&
        Objects.equals(this.subHoldingKeys, portfolioCashFlow.subHoldingKeys) &&
        Objects.equals(this.type, portfolioCashFlow.type) &&
        Objects.equals(this.movementName, portfolioCashFlow.movementName) &&
        Objects.equals(this.cashflow, portfolioCashFlow.cashflow) &&
        Objects.equals(this.balance, portfolioCashFlow.balance) &&
        (this.fxRate.compareTo(portfolioCashFlow.getFxRate()) == 0) &&
        Objects.equals(this.cashflowReportingCurrency, portfolioCashFlow.cashflowReportingCurrency) &&
        Objects.equals(this.balanceReportingCurrency, portfolioCashFlow.balanceReportingCurrency) &&
        Objects.equals(this.translationGainLoss, portfolioCashFlow.translationGainLoss) &&
        Objects.equals(this.costBasisReportingCurrency, portfolioCashFlow.costBasisReportingCurrency) &&
        Objects.equals(this.transaction, portfolioCashFlow.transaction) &&
        Objects.equals(this.unrealisedGainLossReportingCurrency, portfolioCashFlow.unrealisedGainLossReportingCurrency) &&
        Objects.equals(this.links, portfolioCashFlow.links);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(groupById, sequenceNumber, effectiveDate, subHoldingKeys, type, movementName, cashflow, balance, fxRate, cashflowReportingCurrency, balanceReportingCurrency, translationGainLoss, costBasisReportingCurrency, transaction, unrealisedGainLossReportingCurrency, links);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PortfolioCashFlow {\n");
    sb.append("    groupById: ").append(toIndentedString(groupById)).append("\n");
    sb.append("    sequenceNumber: ").append(toIndentedString(sequenceNumber)).append("\n");
    sb.append("    effectiveDate: ").append(toIndentedString(effectiveDate)).append("\n");
    sb.append("    subHoldingKeys: ").append(toIndentedString(subHoldingKeys)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    movementName: ").append(toIndentedString(movementName)).append("\n");
    sb.append("    cashflow: ").append(toIndentedString(cashflow)).append("\n");
    sb.append("    balance: ").append(toIndentedString(balance)).append("\n");
    sb.append("    fxRate: ").append(toIndentedString(fxRate)).append("\n");
    sb.append("    cashflowReportingCurrency: ").append(toIndentedString(cashflowReportingCurrency)).append("\n");
    sb.append("    balanceReportingCurrency: ").append(toIndentedString(balanceReportingCurrency)).append("\n");
    sb.append("    translationGainLoss: ").append(toIndentedString(translationGainLoss)).append("\n");
    sb.append("    costBasisReportingCurrency: ").append(toIndentedString(costBasisReportingCurrency)).append("\n");
    sb.append("    transaction: ").append(toIndentedString(transaction)).append("\n");
    sb.append("    unrealisedGainLossReportingCurrency: ").append(toIndentedString(unrealisedGainLossReportingCurrency)).append("\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("groupById");
    openapiFields.add("sequenceNumber");
    openapiFields.add("effectiveDate");
    openapiFields.add("subHoldingKeys");
    openapiFields.add("type");
    openapiFields.add("movementName");
    openapiFields.add("cashflow");
    openapiFields.add("balance");
    openapiFields.add("fxRate");
    openapiFields.add("cashflowReportingCurrency");
    openapiFields.add("balanceReportingCurrency");
    openapiFields.add("translationGainLoss");
    openapiFields.add("costBasisReportingCurrency");
    openapiFields.add("transaction");
    openapiFields.add("unrealisedGainLossReportingCurrency");
    openapiFields.add("links");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("groupById");
    openapiRequiredFields.add("sequenceNumber");
    openapiRequiredFields.add("type");
    openapiRequiredFields.add("movementName");
    openapiRequiredFields.add("cashflow");
    openapiRequiredFields.add("balance");
    openapiRequiredFields.add("fxRate");
    openapiRequiredFields.add("cashflowReportingCurrency");
    openapiRequiredFields.add("balanceReportingCurrency");
    openapiRequiredFields.add("translationGainLoss");
    openapiRequiredFields.add("costBasisReportingCurrency");
    openapiRequiredFields.add("unrealisedGainLossReportingCurrency");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to PortfolioCashFlow
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PortfolioCashFlow.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PortfolioCashFlow is not found in the empty JSON string", PortfolioCashFlow.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PortfolioCashFlow.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if (!jsonObj.get("movementName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `movementName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("movementName").toString()));
      }
      // validate the required field `cashflow`
      CurrencyAndAmount.validateJsonElement(jsonObj.get("cashflow"));
      // validate the required field `balance`
      CurrencyAndAmount.validateJsonElement(jsonObj.get("balance"));
      // validate the required field `cashflowReportingCurrency`
      CurrencyAndAmount.validateJsonElement(jsonObj.get("cashflowReportingCurrency"));
      // validate the required field `balanceReportingCurrency`
      CurrencyAndAmount.validateJsonElement(jsonObj.get("balanceReportingCurrency"));
      // validate the required field `translationGainLoss`
      CurrencyAndAmount.validateJsonElement(jsonObj.get("translationGainLoss"));
      // validate the required field `costBasisReportingCurrency`
      CurrencyAndAmount.validateJsonElement(jsonObj.get("costBasisReportingCurrency"));
      // validate the optional field `transaction`
      if (jsonObj.get("transaction") != null && !jsonObj.get("transaction").isJsonNull()) {
        Transaction.validateJsonElement(jsonObj.get("transaction"));
      }
      // validate the required field `unrealisedGainLossReportingCurrency`
      CurrencyAndAmount.validateJsonElement(jsonObj.get("unrealisedGainLossReportingCurrency"));
      if (jsonObj.get("links") != null && !jsonObj.get("links").isJsonNull()) {
        JsonArray jsonArraylinks = jsonObj.getAsJsonArray("links");
        if (jsonArraylinks != null) {
          // ensure the json data is an array
          if (!jsonObj.get("links").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `links` to be an array in the JSON string but got `%s`", jsonObj.get("links").toString()));
          }

          // validate the optional field `links` (array)
          for (int i = 0; i < jsonArraylinks.size(); i++) {
            Link.validateJsonElement(jsonArraylinks.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PortfolioCashFlow.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PortfolioCashFlow' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PortfolioCashFlow> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PortfolioCashFlow.class));

       return (TypeAdapter<T>) new TypeAdapter<PortfolioCashFlow>() {
           @Override
           public void write(JsonWriter out, PortfolioCashFlow value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PortfolioCashFlow read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PortfolioCashFlow given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PortfolioCashFlow
  * @throws IOException if the JSON string is invalid with respect to PortfolioCashFlow
  */
  public static PortfolioCashFlow fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PortfolioCashFlow.class);
  }

 /**
  * Convert an instance of PortfolioCashFlow to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
