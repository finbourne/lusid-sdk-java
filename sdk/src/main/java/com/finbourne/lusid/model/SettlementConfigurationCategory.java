/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * SettlementConfigurationCategory
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class SettlementConfigurationCategory {
  public static final String SERIALIZED_NAME_METHOD = "method";
  @SerializedName(SERIALIZED_NAME_METHOD)
  private String method;

  public static final String SERIALIZED_NAME_CALCULATE_INSTRUCTION_TO_PORTFOLIO_RATE = "calculateInstructionToPortfolioRate";
  @SerializedName(SERIALIZED_NAME_CALCULATE_INSTRUCTION_TO_PORTFOLIO_RATE)
  private Boolean calculateInstructionToPortfolioRate;

  public static final String SERIALIZED_NAME_CALCULATE_IN_LIEU_SETTLEMENT_AMOUNT = "calculateInLieuSettlementAmount";
  @SerializedName(SERIALIZED_NAME_CALCULATE_IN_LIEU_SETTLEMENT_AMOUNT)
  private Boolean calculateInLieuSettlementAmount;

  public SettlementConfigurationCategory() {
  }

  public SettlementConfigurationCategory method(String method) {
    
    this.method = method;
    return this;
  }

   /**
   * The method of settlement for the movements of the relevant type(s). Allowed values: &#39;Automatic&#39; and &#39;Instructed&#39;. A value of &#39;Instructed&#39; means that such movements can only be settled with a SettlementInstruction. A value of &#39;Automatic&#39; means that such movements will settle automatically but a SettlementInstruction will still override automatic settlement.
   * @return method
  **/
  @jakarta.annotation.Nullable
  public String getMethod() {
    return method;
  }


  public void setMethod(String method) {
    this.method = method;
  }


  public SettlementConfigurationCategory calculateInstructionToPortfolioRate(Boolean calculateInstructionToPortfolioRate) {
    
    this.calculateInstructionToPortfolioRate = calculateInstructionToPortfolioRate;
    return this;
  }

   /**
   * An optional flag that allows for the calculation of the instruction to portfolio rate for instructions with settlement category CashSettlement or DeferredCashReceipt, if it is not provided on the settlement instruction. Defaults to false if not specified.
   * @return calculateInstructionToPortfolioRate
  **/
  @jakarta.annotation.Nullable
  public Boolean getCalculateInstructionToPortfolioRate() {
    return calculateInstructionToPortfolioRate;
  }


  public void setCalculateInstructionToPortfolioRate(Boolean calculateInstructionToPortfolioRate) {
    this.calculateInstructionToPortfolioRate = calculateInstructionToPortfolioRate;
  }


  public SettlementConfigurationCategory calculateInLieuSettlementAmount(Boolean calculateInLieuSettlementAmount) {
    
    this.calculateInLieuSettlementAmount = calculateInLieuSettlementAmount;
    return this;
  }

   /**
   * An optional flag that allows for the calculation of the in lieu amount for instructions with settlement category CashSettlement or DeferredCashReceipt, if it is not provided on the settlement instruction. Defaults to false if not specified.
   * @return calculateInLieuSettlementAmount
  **/
  @jakarta.annotation.Nullable
  public Boolean getCalculateInLieuSettlementAmount() {
    return calculateInLieuSettlementAmount;
  }


  public void setCalculateInLieuSettlementAmount(Boolean calculateInLieuSettlementAmount) {
    this.calculateInLieuSettlementAmount = calculateInLieuSettlementAmount;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SettlementConfigurationCategory settlementConfigurationCategory = (SettlementConfigurationCategory) o;
    return Objects.equals(this.method, settlementConfigurationCategory.method) &&
        Objects.equals(this.calculateInstructionToPortfolioRate, settlementConfigurationCategory.calculateInstructionToPortfolioRate) &&
        Objects.equals(this.calculateInLieuSettlementAmount, settlementConfigurationCategory.calculateInLieuSettlementAmount);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(method, calculateInstructionToPortfolioRate, calculateInLieuSettlementAmount);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SettlementConfigurationCategory {\n");
    sb.append("    method: ").append(toIndentedString(method)).append("\n");
    sb.append("    calculateInstructionToPortfolioRate: ").append(toIndentedString(calculateInstructionToPortfolioRate)).append("\n");
    sb.append("    calculateInLieuSettlementAmount: ").append(toIndentedString(calculateInLieuSettlementAmount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("method");
    openapiFields.add("calculateInstructionToPortfolioRate");
    openapiFields.add("calculateInLieuSettlementAmount");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to SettlementConfigurationCategory
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SettlementConfigurationCategory.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SettlementConfigurationCategory is not found in the empty JSON string", SettlementConfigurationCategory.openapiRequiredFields.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("method") != null && !jsonObj.get("method").isJsonNull()) && !jsonObj.get("method").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `method` to be a primitive type in the JSON string but got `%s`", jsonObj.get("method").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SettlementConfigurationCategory.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SettlementConfigurationCategory' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SettlementConfigurationCategory> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SettlementConfigurationCategory.class));

       return (TypeAdapter<T>) new TypeAdapter<SettlementConfigurationCategory>() {
           @Override
           public void write(JsonWriter out, SettlementConfigurationCategory value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SettlementConfigurationCategory read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of SettlementConfigurationCategory given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of SettlementConfigurationCategory
  * @throws IOException if the JSON string is invalid with respect to SettlementConfigurationCategory
  */
  public static SettlementConfigurationCategory fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SettlementConfigurationCategory.class);
  }

 /**
  * Convert an instance of SettlementConfigurationCategory to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
