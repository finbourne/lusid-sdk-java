/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import com.finbourne.lusid.model.ResourceId;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * MembershipAmendmentRequest
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class MembershipAmendmentRequest {
  public static final String SERIALIZED_NAME_CUSTOM_DATA_MODEL_ID = "customDataModelId";
  @SerializedName(SERIALIZED_NAME_CUSTOM_DATA_MODEL_ID)
  private ResourceId customDataModelId;

  public static final String SERIALIZED_NAME_ENTITY_TYPE = "entityType";
  @SerializedName(SERIALIZED_NAME_ENTITY_TYPE)
  private String entityType;

  public static final String SERIALIZED_NAME_ENTITY_UNIQUE_ID = "entityUniqueId";
  @SerializedName(SERIALIZED_NAME_ENTITY_UNIQUE_ID)
  private String entityUniqueId;

  public static final String SERIALIZED_NAME_OPERATION = "operation";
  @SerializedName(SERIALIZED_NAME_OPERATION)
  private String operation;

  public MembershipAmendmentRequest() {
  }

  public MembershipAmendmentRequest customDataModelId(ResourceId customDataModelId) {
    
    this.customDataModelId = customDataModelId;
    return this;
  }

   /**
   * Get customDataModelId
   * @return customDataModelId
  **/
  @jakarta.annotation.Nonnull
  public ResourceId getCustomDataModelId() {
    return customDataModelId;
  }


  public void setCustomDataModelId(ResourceId customDataModelId) {
    this.customDataModelId = customDataModelId;
  }


  public MembershipAmendmentRequest entityType(String entityType) {
    
    this.entityType = entityType;
    return this;
  }

   /**
   * The type of the entity that is being added or removed from the Custom Data Model.
   * @return entityType
  **/
  @jakarta.annotation.Nonnull
  public String getEntityType() {
    return entityType;
  }


  public void setEntityType(String entityType) {
    this.entityType = entityType;
  }


  public MembershipAmendmentRequest entityUniqueId(String entityUniqueId) {
    
    this.entityUniqueId = entityUniqueId;
    return this;
  }

   /**
   * The entity unique identifier of the entity that is being added or removed from the Custom Data Model.
   * @return entityUniqueId
  **/
  @jakarta.annotation.Nonnull
  public String getEntityUniqueId() {
    return entityUniqueId;
  }


  public void setEntityUniqueId(String entityUniqueId) {
    this.entityUniqueId = entityUniqueId;
  }


  public MembershipAmendmentRequest operation(String operation) {
    
    this.operation = operation;
    return this;
  }

   /**
   * The operation to be performed on the entity&#39;s membership in the Custom Data Model. Either &#39;Add&#39; or &#39;Remove&#39;.
   * @return operation
  **/
  @jakarta.annotation.Nonnull
  public String getOperation() {
    return operation;
  }


  public void setOperation(String operation) {
    this.operation = operation;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MembershipAmendmentRequest membershipAmendmentRequest = (MembershipAmendmentRequest) o;
    return Objects.equals(this.customDataModelId, membershipAmendmentRequest.customDataModelId) &&
        Objects.equals(this.entityType, membershipAmendmentRequest.entityType) &&
        Objects.equals(this.entityUniqueId, membershipAmendmentRequest.entityUniqueId) &&
        Objects.equals(this.operation, membershipAmendmentRequest.operation);
  }

  @Override
  public int hashCode() {
    return Objects.hash(customDataModelId, entityType, entityUniqueId, operation);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MembershipAmendmentRequest {\n");
    sb.append("    customDataModelId: ").append(toIndentedString(customDataModelId)).append("\n");
    sb.append("    entityType: ").append(toIndentedString(entityType)).append("\n");
    sb.append("    entityUniqueId: ").append(toIndentedString(entityUniqueId)).append("\n");
    sb.append("    operation: ").append(toIndentedString(operation)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("customDataModelId");
    openapiFields.add("entityType");
    openapiFields.add("entityUniqueId");
    openapiFields.add("operation");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("customDataModelId");
    openapiRequiredFields.add("entityType");
    openapiRequiredFields.add("entityUniqueId");
    openapiRequiredFields.add("operation");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to MembershipAmendmentRequest
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MembershipAmendmentRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MembershipAmendmentRequest is not found in the empty JSON string", MembershipAmendmentRequest.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : MembershipAmendmentRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `customDataModelId`
      ResourceId.validateJsonElement(jsonObj.get("customDataModelId"));
      if (!jsonObj.get("entityType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `entityType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("entityType").toString()));
      }
      if (!jsonObj.get("entityUniqueId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `entityUniqueId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("entityUniqueId").toString()));
      }
      if (!jsonObj.get("operation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `operation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("operation").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MembershipAmendmentRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MembershipAmendmentRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MembershipAmendmentRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MembershipAmendmentRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<MembershipAmendmentRequest>() {
           @Override
           public void write(JsonWriter out, MembershipAmendmentRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MembershipAmendmentRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of MembershipAmendmentRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of MembershipAmendmentRequest
  * @throws IOException if the JSON string is invalid with respect to MembershipAmendmentRequest
  */
  public static MembershipAmendmentRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MembershipAmendmentRequest.class);
  }

 /**
  * Convert an instance of MembershipAmendmentRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
