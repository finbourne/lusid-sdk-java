/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * LineageMember
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class LineageMember {
  public static final String SERIALIZED_NAME_INDEX = "index";
  @SerializedName(SERIALIZED_NAME_INDEX)
  private Integer index;

  public static final String SERIALIZED_NAME_LABEL = "label";
  @SerializedName(SERIALIZED_NAME_LABEL)
  private String label;

  public static final String SERIALIZED_NAME_SUB_LABEL = "subLabel";
  @SerializedName(SERIALIZED_NAME_SUB_LABEL)
  private String subLabel;

  public static final String SERIALIZED_NAME_INFO_TYPE = "infoType";
  @SerializedName(SERIALIZED_NAME_INFO_TYPE)
  private String infoType;

  public static final String SERIALIZED_NAME_INFORMATION = "information";
  @SerializedName(SERIALIZED_NAME_INFORMATION)
  private String information;

  public LineageMember() {
  }

  public LineageMember index(Integer index) {
    
    this.index = index;
    return this;
  }

   /**
   * Index to demonstrate position of lineage member in overall lineage
   * @return index
  **/
  @jakarta.annotation.Nonnull
  public Integer getIndex() {
    return index;
  }


  public void setIndex(Integer index) {
    this.index = index;
  }


  public LineageMember label(String label) {
    
    this.label = label;
    return this;
  }

   /**
   * Label of the step corresponding to this lineage member
   * @return label
  **/
  @jakarta.annotation.Nonnull
  public String getLabel() {
    return label;
  }


  public void setLabel(String label) {
    this.label = label;
  }


  public LineageMember subLabel(String subLabel) {
    
    this.subLabel = subLabel;
    return this;
  }

   /**
   * SubLabel of the step corresponding to this lineage member
   * @return subLabel
  **/
  @jakarta.annotation.Nonnull
  public String getSubLabel() {
    return subLabel;
  }


  public void setSubLabel(String subLabel) {
    this.subLabel = subLabel;
  }


  public LineageMember infoType(String infoType) {
    
    this.infoType = infoType;
    return this;
  }

   /**
   * Optional. Type of Information
   * @return infoType
  **/
  @jakarta.annotation.Nullable
  public String getInfoType() {
    return infoType;
  }


  public void setInfoType(String infoType) {
    this.infoType = infoType;
  }


  public LineageMember information(String information) {
    
    this.information = information;
    return this;
  }

   /**
   * Optional. Information for the step corresponding to this lineage member, of type InfoType
   * @return information
  **/
  @jakarta.annotation.Nullable
  public String getInformation() {
    return information;
  }


  public void setInformation(String information) {
    this.information = information;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LineageMember lineageMember = (LineageMember) o;
    return Objects.equals(this.index, lineageMember.index) &&
        Objects.equals(this.label, lineageMember.label) &&
        Objects.equals(this.subLabel, lineageMember.subLabel) &&
        Objects.equals(this.infoType, lineageMember.infoType) &&
        Objects.equals(this.information, lineageMember.information);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(index, label, subLabel, infoType, information);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LineageMember {\n");
    sb.append("    index: ").append(toIndentedString(index)).append("\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("    subLabel: ").append(toIndentedString(subLabel)).append("\n");
    sb.append("    infoType: ").append(toIndentedString(infoType)).append("\n");
    sb.append("    information: ").append(toIndentedString(information)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("index");
    openapiFields.add("label");
    openapiFields.add("subLabel");
    openapiFields.add("infoType");
    openapiFields.add("information");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("index");
    openapiRequiredFields.add("label");
    openapiRequiredFields.add("subLabel");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to LineageMember
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LineageMember.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LineageMember is not found in the empty JSON string", LineageMember.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : LineageMember.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("label").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `label` to be a primitive type in the JSON string but got `%s`", jsonObj.get("label").toString()));
      }
      if (!jsonObj.get("subLabel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subLabel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subLabel").toString()));
      }
      if ((jsonObj.get("infoType") != null && !jsonObj.get("infoType").isJsonNull()) && !jsonObj.get("infoType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `infoType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("infoType").toString()));
      }
      if ((jsonObj.get("information") != null && !jsonObj.get("information").isJsonNull()) && !jsonObj.get("information").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `information` to be a primitive type in the JSON string but got `%s`", jsonObj.get("information").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LineageMember.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LineageMember' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LineageMember> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LineageMember.class));

       return (TypeAdapter<T>) new TypeAdapter<LineageMember>() {
           @Override
           public void write(JsonWriter out, LineageMember value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LineageMember read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of LineageMember given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of LineageMember
  * @throws IOException if the JSON string is invalid with respect to LineageMember
  */
  public static LineageMember fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LineageMember.class);
  }

 /**
  * Convert an instance of LineageMember to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
