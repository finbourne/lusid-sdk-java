/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * QueryRelationalDatasetRequest
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class QueryRelationalDatasetRequest {
  public static final String SERIALIZED_NAME_QUERY_METHOD = "queryMethod";
  @SerializedName(SERIALIZED_NAME_QUERY_METHOD)
  private String queryMethod;

  public static final String SERIALIZED_NAME_FILTER = "filter";
  @SerializedName(SERIALIZED_NAME_FILTER)
  private String filter;

  public static final String SERIALIZED_NAME_CUSTOM_SORT_BY = "customSortBy";
  @SerializedName(SERIALIZED_NAME_CUSTOM_SORT_BY)
  private List<String> customSortBy;

  public QueryRelationalDatasetRequest() {
  }

  public QueryRelationalDatasetRequest queryMethod(String queryMethod) {
    
    this.queryMethod = queryMethod;
    return this;
  }

   /**
   * The method used to query data points. Can be either &#39;Latest&#39; or &#39;TimeSeries&#39;.
   * @return queryMethod
  **/
  @jakarta.annotation.Nonnull
  public String getQueryMethod() {
    return queryMethod;
  }


  public void setQueryMethod(String queryMethod) {
    this.queryMethod = queryMethod;
  }


  public QueryRelationalDatasetRequest filter(String filter) {
    
    this.filter = filter;
    return this;
  }

   /**
   * Expression to filter the result set. For more information about filtering LUSID results, see https://support.lusid.com/knowledgebase/article/KA-01914.
   * @return filter
  **/
  @jakarta.annotation.Nullable
  public String getFilter() {
    return filter;
  }


  public void setFilter(String filter) {
    this.filter = filter;
  }


  public QueryRelationalDatasetRequest customSortBy(List<String> customSortBy) {
    
    this.customSortBy = customSortBy;
    return this;
  }

  public QueryRelationalDatasetRequest addCustomSortByItem(String customSortByItem) {
    if (this.customSortBy == null) {
      this.customSortBy = new ArrayList<>();
    }
    this.customSortBy.add(customSortByItem);
    return this;
  }

   /**
   * A list of fields to sort the results by. For example, to sort by a Value field &#39;AValueField&#39; in descending order, specify &#39;AValueField DESC&#39;.
   * @return customSortBy
  **/
  @jakarta.annotation.Nullable
  public List<String> getCustomSortBy() {
    return customSortBy;
  }


  public void setCustomSortBy(List<String> customSortBy) {
    this.customSortBy = customSortBy;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    QueryRelationalDatasetRequest queryRelationalDatasetRequest = (QueryRelationalDatasetRequest) o;
    return Objects.equals(this.queryMethod, queryRelationalDatasetRequest.queryMethod) &&
        Objects.equals(this.filter, queryRelationalDatasetRequest.filter) &&
        Objects.equals(this.customSortBy, queryRelationalDatasetRequest.customSortBy);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(queryMethod, filter, customSortBy);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class QueryRelationalDatasetRequest {\n");
    sb.append("    queryMethod: ").append(toIndentedString(queryMethod)).append("\n");
    sb.append("    filter: ").append(toIndentedString(filter)).append("\n");
    sb.append("    customSortBy: ").append(toIndentedString(customSortBy)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("queryMethod");
    openapiFields.add("filter");
    openapiFields.add("customSortBy");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("queryMethod");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to QueryRelationalDatasetRequest
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!QueryRelationalDatasetRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in QueryRelationalDatasetRequest is not found in the empty JSON string", QueryRelationalDatasetRequest.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : QueryRelationalDatasetRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("queryMethod").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `queryMethod` to be a primitive type in the JSON string but got `%s`", jsonObj.get("queryMethod").toString()));
      }
      if ((jsonObj.get("filter") != null && !jsonObj.get("filter").isJsonNull()) && !jsonObj.get("filter").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `filter` to be a primitive type in the JSON string but got `%s`", jsonObj.get("filter").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("customSortBy") != null && !jsonObj.get("customSortBy").isJsonNull() && !jsonObj.get("customSortBy").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `customSortBy` to be an array in the JSON string but got `%s`", jsonObj.get("customSortBy").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!QueryRelationalDatasetRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'QueryRelationalDatasetRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<QueryRelationalDatasetRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(QueryRelationalDatasetRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<QueryRelationalDatasetRequest>() {
           @Override
           public void write(JsonWriter out, QueryRelationalDatasetRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public QueryRelationalDatasetRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of QueryRelationalDatasetRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of QueryRelationalDatasetRequest
  * @throws IOException if the JSON string is invalid with respect to QueryRelationalDatasetRequest
  */
  public static QueryRelationalDatasetRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, QueryRelationalDatasetRequest.class);
  }

 /**
  * Convert an instance of QueryRelationalDatasetRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
