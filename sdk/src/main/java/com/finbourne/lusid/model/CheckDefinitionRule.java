/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * CheckDefinitionRule
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class CheckDefinitionRule {
  public static final String SERIALIZED_NAME_RULE_KEY = "ruleKey";
  @SerializedName(SERIALIZED_NAME_RULE_KEY)
  private String ruleKey;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_RULE_FORMULA = "ruleFormula";
  @SerializedName(SERIALIZED_NAME_RULE_FORMULA)
  private String ruleFormula;

  public static final String SERIALIZED_NAME_SEVERITY = "severity";
  @SerializedName(SERIALIZED_NAME_SEVERITY)
  private Integer severity;

  public CheckDefinitionRule() {
  }

  public CheckDefinitionRule ruleKey(String ruleKey) {
    
    this.ruleKey = ruleKey;
    return this;
  }

   /**
   * The key of the Rule.
   * @return ruleKey
  **/
  @jakarta.annotation.Nullable
  public String getRuleKey() {
    return ruleKey;
  }


  public void setRuleKey(String ruleKey) {
    this.ruleKey = ruleKey;
  }


  public CheckDefinitionRule displayName(String displayName) {
    
    this.displayName = displayName;
    return this;
  }

   /**
   * The name of the Rule.
   * @return displayName
  **/
  @jakarta.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }


  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public CheckDefinitionRule description(String description) {
    
    this.description = description;
    return this;
  }

   /**
   * A description for the Rule.
   * @return description
  **/
  @jakarta.annotation.Nullable
  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    this.description = description;
  }


  public CheckDefinitionRule ruleFormula(String ruleFormula) {
    
    this.ruleFormula = ruleFormula;
    return this;
  }

   /**
   * The formula for the rule.
   * @return ruleFormula
  **/
  @jakarta.annotation.Nullable
  public String getRuleFormula() {
    return ruleFormula;
  }


  public void setRuleFormula(String ruleFormula) {
    this.ruleFormula = ruleFormula;
  }


  public CheckDefinitionRule severity(Integer severity) {
    
    this.severity = severity;
    return this;
  }

   /**
   * Severity of the rule if formaula is not satisfied.
   * @return severity
  **/
  @jakarta.annotation.Nullable
  public Integer getSeverity() {
    return severity;
  }


  public void setSeverity(Integer severity) {
    this.severity = severity;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CheckDefinitionRule checkDefinitionRule = (CheckDefinitionRule) o;
    return Objects.equals(this.ruleKey, checkDefinitionRule.ruleKey) &&
        Objects.equals(this.displayName, checkDefinitionRule.displayName) &&
        Objects.equals(this.description, checkDefinitionRule.description) &&
        Objects.equals(this.ruleFormula, checkDefinitionRule.ruleFormula) &&
        Objects.equals(this.severity, checkDefinitionRule.severity);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(ruleKey, displayName, description, ruleFormula, severity);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CheckDefinitionRule {\n");
    sb.append("    ruleKey: ").append(toIndentedString(ruleKey)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    ruleFormula: ").append(toIndentedString(ruleFormula)).append("\n");
    sb.append("    severity: ").append(toIndentedString(severity)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ruleKey");
    openapiFields.add("displayName");
    openapiFields.add("description");
    openapiFields.add("ruleFormula");
    openapiFields.add("severity");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to CheckDefinitionRule
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CheckDefinitionRule.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CheckDefinitionRule is not found in the empty JSON string", CheckDefinitionRule.openapiRequiredFields.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("ruleKey") != null && !jsonObj.get("ruleKey").isJsonNull()) && !jsonObj.get("ruleKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ruleKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ruleKey").toString()));
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("ruleFormula") != null && !jsonObj.get("ruleFormula").isJsonNull()) && !jsonObj.get("ruleFormula").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ruleFormula` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ruleFormula").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CheckDefinitionRule.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CheckDefinitionRule' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CheckDefinitionRule> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CheckDefinitionRule.class));

       return (TypeAdapter<T>) new TypeAdapter<CheckDefinitionRule>() {
           @Override
           public void write(JsonWriter out, CheckDefinitionRule value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CheckDefinitionRule read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CheckDefinitionRule given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CheckDefinitionRule
  * @throws IOException if the JSON string is invalid with respect to CheckDefinitionRule
  */
  public static CheckDefinitionRule fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CheckDefinitionRule.class);
  }

 /**
  * Convert an instance of CheckDefinitionRule to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
