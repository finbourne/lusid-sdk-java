/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * A set of conventions that describe the conventions for calculation of payments made on rates interbank lending and similar.  Based on ISDA 2006 conventions and similar documentation. Please see the knowledge base for further documentation.
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class IndexConvention {
  public static final String SERIALIZED_NAME_FIXING_REFERENCE = "fixingReference";
  @SerializedName(SERIALIZED_NAME_FIXING_REFERENCE)
  private String fixingReference;

  public static final String SERIALIZED_NAME_PUBLICATION_DAY_LAG = "publicationDayLag";
  @SerializedName(SERIALIZED_NAME_PUBLICATION_DAY_LAG)
  private Integer publicationDayLag;

  public static final String SERIALIZED_NAME_PAYMENT_TENOR = "paymentTenor";
  @SerializedName(SERIALIZED_NAME_PAYMENT_TENOR)
  private String paymentTenor;

  public static final String SERIALIZED_NAME_DAY_COUNT_CONVENTION = "dayCountConvention";
  @SerializedName(SERIALIZED_NAME_DAY_COUNT_CONVENTION)
  private String dayCountConvention;

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private String currency;

  public static final String SERIALIZED_NAME_INDEX_NAME = "indexName";
  @SerializedName(SERIALIZED_NAME_INDEX_NAME)
  private String indexName;

  public static final String SERIALIZED_NAME_SCOPE = "scope";
  @SerializedName(SERIALIZED_NAME_SCOPE)
  private String scope;

  public static final String SERIALIZED_NAME_CODE = "code";
  @SerializedName(SERIALIZED_NAME_CODE)
  private String code;

  public IndexConvention() {
  }

  public IndexConvention fixingReference(String fixingReference) {
    
    this.fixingReference = fixingReference;
    return this;
  }

   /**
   * The reference rate name for fixings.
   * @return fixingReference
  **/
  @jakarta.annotation.Nonnull
  public String getFixingReference() {
    return fixingReference;
  }


  public void setFixingReference(String fixingReference) {
    this.fixingReference = fixingReference;
  }


  public IndexConvention publicationDayLag(Integer publicationDayLag) {
    
    this.publicationDayLag = publicationDayLag;
    return this;
  }

   /**
   * Number of days between spot and publication of the rate.
   * @return publicationDayLag
  **/
  @jakarta.annotation.Nonnull
  public Integer getPublicationDayLag() {
    return publicationDayLag;
  }


  public void setPublicationDayLag(Integer publicationDayLag) {
    this.publicationDayLag = publicationDayLag;
  }


  public IndexConvention paymentTenor(String paymentTenor) {
    
    this.paymentTenor = paymentTenor;
    return this;
  }

   /**
   * The tenor of the payment. For an OIS index this is always 1 day. For other indices, e.g. LIBOR it will have a variable tenor typically between 1 day and 1 year.    For more information on tenors, see [knowledge base article KA-02097](https://support.lusid.com/knowledgebase/article/KA-02097)
   * @return paymentTenor
  **/
  @jakarta.annotation.Nonnull
  public String getPaymentTenor() {
    return paymentTenor;
  }


  public void setPaymentTenor(String paymentTenor) {
    this.paymentTenor = paymentTenor;
  }


  public IndexConvention dayCountConvention(String dayCountConvention) {
    
    this.dayCountConvention = dayCountConvention;
    return this;
  }

   /**
   * when calculating the fraction of a year between two dates, what convention is used to represent the number of days in a year  and difference between them.  For more information on day counts, see [knowledge base article KA-01798](https://support.lusid.com/knowledgebase/article/KA-01798)     Supported string (enumeration) values are: [Actual360, Act360, MoneyMarket, Actual365, Act365, Thirty360, ThirtyU360, Bond, ThirtyE360, EuroBond, ActualActual, ActAct, ActActIsda, ActActIsma, ActActIcma, OneOne, Act364, Act365F, Act365L, Act365_25, Act252, Bus252, NL360, NL365].
   * @return dayCountConvention
  **/
  @jakarta.annotation.Nonnull
  public String getDayCountConvention() {
    return dayCountConvention;
  }


  public void setDayCountConvention(String dayCountConvention) {
    this.dayCountConvention = dayCountConvention;
  }


  public IndexConvention currency(String currency) {
    
    this.currency = currency;
    return this;
  }

   /**
   * Currency of the index convention.
   * @return currency
  **/
  @jakarta.annotation.Nonnull
  public String getCurrency() {
    return currency;
  }


  public void setCurrency(String currency) {
    this.currency = currency;
  }


  public IndexConvention indexName(String indexName) {
    
    this.indexName = indexName;
    return this;
  }

   /**
   * The name of the index for which this represents the conventions of.  For instance, \&quot;SOFR\&quot;, \&quot;LIBOR\&quot;, \&quot;EURIBOR\&quot;, etc.  Defaults to \&quot;INDEX\&quot; if not specified.
   * @return indexName
  **/
  @jakarta.annotation.Nullable
  public String getIndexName() {
    return indexName;
  }


  public void setIndexName(String indexName) {
    this.indexName = indexName;
  }


  public IndexConvention scope(String scope) {
    
    this.scope = scope;
    return this;
  }

   /**
   * The scope used when updating or inserting the convention.
   * @return scope
  **/
  @jakarta.annotation.Nullable
  public String getScope() {
    return scope;
  }


  public void setScope(String scope) {
    this.scope = scope;
  }


  public IndexConvention code(String code) {
    
    this.code = code;
    return this;
  }

   /**
   * The code of the convention.
   * @return code
  **/
  @jakarta.annotation.Nullable
  public String getCode() {
    return code;
  }


  public void setCode(String code) {
    this.code = code;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IndexConvention indexConvention = (IndexConvention) o;
    return Objects.equals(this.fixingReference, indexConvention.fixingReference) &&
        Objects.equals(this.publicationDayLag, indexConvention.publicationDayLag) &&
        Objects.equals(this.paymentTenor, indexConvention.paymentTenor) &&
        Objects.equals(this.dayCountConvention, indexConvention.dayCountConvention) &&
        Objects.equals(this.currency, indexConvention.currency) &&
        Objects.equals(this.indexName, indexConvention.indexName) &&
        Objects.equals(this.scope, indexConvention.scope) &&
        Objects.equals(this.code, indexConvention.code);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(fixingReference, publicationDayLag, paymentTenor, dayCountConvention, currency, indexName, scope, code);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IndexConvention {\n");
    sb.append("    fixingReference: ").append(toIndentedString(fixingReference)).append("\n");
    sb.append("    publicationDayLag: ").append(toIndentedString(publicationDayLag)).append("\n");
    sb.append("    paymentTenor: ").append(toIndentedString(paymentTenor)).append("\n");
    sb.append("    dayCountConvention: ").append(toIndentedString(dayCountConvention)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    indexName: ").append(toIndentedString(indexName)).append("\n");
    sb.append("    scope: ").append(toIndentedString(scope)).append("\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("fixingReference");
    openapiFields.add("publicationDayLag");
    openapiFields.add("paymentTenor");
    openapiFields.add("dayCountConvention");
    openapiFields.add("currency");
    openapiFields.add("indexName");
    openapiFields.add("scope");
    openapiFields.add("code");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("fixingReference");
    openapiRequiredFields.add("publicationDayLag");
    openapiRequiredFields.add("paymentTenor");
    openapiRequiredFields.add("dayCountConvention");
    openapiRequiredFields.add("currency");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to IndexConvention
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IndexConvention.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IndexConvention is not found in the empty JSON string", IndexConvention.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : IndexConvention.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("fixingReference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fixingReference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fixingReference").toString()));
      }
      if (!jsonObj.get("paymentTenor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `paymentTenor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("paymentTenor").toString()));
      }
      if (!jsonObj.get("dayCountConvention").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dayCountConvention` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dayCountConvention").toString()));
      }
      if (!jsonObj.get("currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency").toString()));
      }
      if ((jsonObj.get("indexName") != null && !jsonObj.get("indexName").isJsonNull()) && !jsonObj.get("indexName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `indexName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("indexName").toString()));
      }
      if ((jsonObj.get("scope") != null && !jsonObj.get("scope").isJsonNull()) && !jsonObj.get("scope").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `scope` to be a primitive type in the JSON string but got `%s`", jsonObj.get("scope").toString()));
      }
      if ((jsonObj.get("code") != null && !jsonObj.get("code").isJsonNull()) && !jsonObj.get("code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("code").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IndexConvention.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IndexConvention' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IndexConvention> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IndexConvention.class));

       return (TypeAdapter<T>) new TypeAdapter<IndexConvention>() {
           @Override
           public void write(JsonWriter out, IndexConvention value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IndexConvention read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of IndexConvention given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of IndexConvention
  * @throws IOException if the JSON string is invalid with respect to IndexConvention
  */
  public static IndexConvention fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IndexConvention.class);
  }

 /**
  * Convert an instance of IndexConvention to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
