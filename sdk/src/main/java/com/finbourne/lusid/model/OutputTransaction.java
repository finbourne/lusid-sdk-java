/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import com.finbourne.lusid.model.CurrencyAndAmount;
import com.finbourne.lusid.model.PerpetualProperty;
import com.finbourne.lusid.model.RealisedGainLoss;
import com.finbourne.lusid.model.TransactionPrice;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * A list of output transactions.
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class OutputTransaction {
  public static final String SERIALIZED_NAME_TRANSACTION_ID = "transactionId";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_ID)
  private String transactionId;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_INSTRUMENT_IDENTIFIERS = "instrumentIdentifiers";
  @SerializedName(SERIALIZED_NAME_INSTRUMENT_IDENTIFIERS)
  private Map<String, String> instrumentIdentifiers;

  public static final String SERIALIZED_NAME_INSTRUMENT_SCOPE = "instrumentScope";
  @SerializedName(SERIALIZED_NAME_INSTRUMENT_SCOPE)
  private String instrumentScope;

  public static final String SERIALIZED_NAME_INSTRUMENT_UID = "instrumentUid";
  @SerializedName(SERIALIZED_NAME_INSTRUMENT_UID)
  private String instrumentUid;

  public static final String SERIALIZED_NAME_TRANSACTION_DATE = "transactionDate";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_DATE)
  private OffsetDateTime transactionDate;

  public static final String SERIALIZED_NAME_SETTLEMENT_DATE = "settlementDate";
  @SerializedName(SERIALIZED_NAME_SETTLEMENT_DATE)
  private OffsetDateTime settlementDate;

  public static final String SERIALIZED_NAME_UNITS = "units";
  @SerializedName(SERIALIZED_NAME_UNITS)
  private java.math.BigDecimal units;

  public static final String SERIALIZED_NAME_TRANSACTION_AMOUNT = "transactionAmount";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_AMOUNT)
  private java.math.BigDecimal transactionAmount;

  public static final String SERIALIZED_NAME_TRANSACTION_PRICE = "transactionPrice";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_PRICE)
  private TransactionPrice transactionPrice;

  public static final String SERIALIZED_NAME_TOTAL_CONSIDERATION = "totalConsideration";
  @SerializedName(SERIALIZED_NAME_TOTAL_CONSIDERATION)
  private CurrencyAndAmount totalConsideration;

  public static final String SERIALIZED_NAME_EXCHANGE_RATE = "exchangeRate";
  @SerializedName(SERIALIZED_NAME_EXCHANGE_RATE)
  private java.math.BigDecimal exchangeRate;

  public static final String SERIALIZED_NAME_TRANSACTION_TO_PORTFOLIO_RATE = "transactionToPortfolioRate";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_TO_PORTFOLIO_RATE)
  private java.math.BigDecimal transactionToPortfolioRate;

  public static final String SERIALIZED_NAME_TRANSACTION_CURRENCY = "transactionCurrency";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_CURRENCY)
  private String transactionCurrency;

  public static final String SERIALIZED_NAME_PROPERTIES = "properties";
  @SerializedName(SERIALIZED_NAME_PROPERTIES)
  private Map<String, PerpetualProperty> properties;

  public static final String SERIALIZED_NAME_COUNTERPARTY_ID = "counterpartyId";
  @SerializedName(SERIALIZED_NAME_COUNTERPARTY_ID)
  private String counterpartyId;

  public static final String SERIALIZED_NAME_SOURCE = "source";
  @SerializedName(SERIALIZED_NAME_SOURCE)
  private String source;

  /**
   * The status of the transaction. The available values are: Active, Amended, Cancelled
   */
  @JsonAdapter(TransactionStatusEnum.Adapter.class)
  public enum TransactionStatusEnum {
    ACTIVE("Active"),
    
    AMENDED("Amended"),
    
    CANCELLED("Cancelled");

    private String value;

    TransactionStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TransactionStatusEnum fromValue(String value) {
      for (TransactionStatusEnum b : TransactionStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TransactionStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TransactionStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TransactionStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TransactionStatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TRANSACTION_STATUS = "transactionStatus";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_STATUS)
  private TransactionStatusEnum transactionStatus;

  public static final String SERIALIZED_NAME_ENTRY_DATE_TIME = "entryDateTime";
  @SerializedName(SERIALIZED_NAME_ENTRY_DATE_TIME)
  private OffsetDateTime entryDateTime;

  public static final String SERIALIZED_NAME_CANCEL_DATE_TIME = "cancelDateTime";
  @SerializedName(SERIALIZED_NAME_CANCEL_DATE_TIME)
  private OffsetDateTime cancelDateTime;

  public static final String SERIALIZED_NAME_REALISED_GAIN_LOSS = "realisedGainLoss";
  @SerializedName(SERIALIZED_NAME_REALISED_GAIN_LOSS)
  private List<RealisedGainLoss> realisedGainLoss;

  public OutputTransaction() {
  }

  public OutputTransaction transactionId(String transactionId) {
    
    this.transactionId = transactionId;
    return this;
  }

   /**
   * The unique identifier for the transaction.
   * @return transactionId
  **/
  @jakarta.annotation.Nonnull
  public String getTransactionId() {
    return transactionId;
  }


  public void setTransactionId(String transactionId) {
    this.transactionId = transactionId;
  }


  public OutputTransaction type(String type) {
    
    this.type = type;
    return this;
  }

   /**
   * The type of the transaction e.g. &#39;Buy&#39;, &#39;Sell&#39;. The transaction type should have been pre-configured via the System Configuration API endpoint.
   * @return type
  **/
  @jakarta.annotation.Nonnull
  public String getType() {
    return type;
  }


  public void setType(String type) {
    this.type = type;
  }


  public OutputTransaction description(String description) {
    
    this.description = description;
    return this;
  }

   /**
   * The description of the transaction. This only exists on transactions generated by LUSID e.g. a holdings adjustment transaction.
   * @return description
  **/
  @jakarta.annotation.Nullable
  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    this.description = description;
  }


  public OutputTransaction instrumentIdentifiers(Map<String, String> instrumentIdentifiers) {
    
    this.instrumentIdentifiers = instrumentIdentifiers;
    return this;
  }

  public OutputTransaction putInstrumentIdentifiersItem(String key, String instrumentIdentifiersItem) {
    if (this.instrumentIdentifiers == null) {
      this.instrumentIdentifiers = new HashMap<>();
    }
    this.instrumentIdentifiers.put(key, instrumentIdentifiersItem);
    return this;
  }

   /**
   * A set of instrument identifiers that can resolve the transaction to a unique instrument.
   * @return instrumentIdentifiers
  **/
  @jakarta.annotation.Nullable
  public Map<String, String> getInstrumentIdentifiers() {
    return instrumentIdentifiers;
  }


  public void setInstrumentIdentifiers(Map<String, String> instrumentIdentifiers) {
    this.instrumentIdentifiers = instrumentIdentifiers;
  }


  public OutputTransaction instrumentScope(String instrumentScope) {
    
    this.instrumentScope = instrumentScope;
    return this;
  }

   /**
   * The scope in which the instrument lies.
   * @return instrumentScope
  **/
  @jakarta.annotation.Nullable
  public String getInstrumentScope() {
    return instrumentScope;
  }


  public void setInstrumentScope(String instrumentScope) {
    this.instrumentScope = instrumentScope;
  }


  public OutputTransaction instrumentUid(String instrumentUid) {
    
    this.instrumentUid = instrumentUid;
    return this;
  }

   /**
   * The unqiue Lusid Instrument Id (LUID) of the instrument that the transaction is in.
   * @return instrumentUid
  **/
  @jakarta.annotation.Nonnull
  public String getInstrumentUid() {
    return instrumentUid;
  }


  public void setInstrumentUid(String instrumentUid) {
    this.instrumentUid = instrumentUid;
  }


  public OutputTransaction transactionDate(OffsetDateTime transactionDate) {
    
    this.transactionDate = transactionDate;
    return this;
  }

   /**
   * The date of the transaction.
   * @return transactionDate
  **/
  @jakarta.annotation.Nonnull
  public OffsetDateTime getTransactionDate() {
    return transactionDate;
  }


  public void setTransactionDate(OffsetDateTime transactionDate) {
    this.transactionDate = transactionDate;
  }


  public OutputTransaction settlementDate(OffsetDateTime settlementDate) {
    
    this.settlementDate = settlementDate;
    return this;
  }

   /**
   * The settlement date of the transaction.
   * @return settlementDate
  **/
  @jakarta.annotation.Nonnull
  public OffsetDateTime getSettlementDate() {
    return settlementDate;
  }


  public void setSettlementDate(OffsetDateTime settlementDate) {
    this.settlementDate = settlementDate;
  }


  public OutputTransaction units(java.math.BigDecimal units) {
    
    this.units = units;
    return this;
  }

   /**
   * The number of units transacted in the associated instrument.
   * @return units
  **/
  @jakarta.annotation.Nonnull
  public java.math.BigDecimal getUnits() {
    return units;
  }


  public void setUnits(java.math.BigDecimal units) {
    this.units = units;
  }


  public OutputTransaction transactionAmount(java.math.BigDecimal transactionAmount) {
    
    this.transactionAmount = transactionAmount;
    return this;
  }

   /**
   * The total value of the transaction in the transaction currency.
   * @return transactionAmount
  **/
  @jakarta.annotation.Nullable
  public java.math.BigDecimal getTransactionAmount() {
    return transactionAmount;
  }


  public void setTransactionAmount(java.math.BigDecimal transactionAmount) {
    this.transactionAmount = transactionAmount;
  }


  public OutputTransaction transactionPrice(TransactionPrice transactionPrice) {
    
    this.transactionPrice = transactionPrice;
    return this;
  }

   /**
   * Get transactionPrice
   * @return transactionPrice
  **/
  @jakarta.annotation.Nullable
  public TransactionPrice getTransactionPrice() {
    return transactionPrice;
  }


  public void setTransactionPrice(TransactionPrice transactionPrice) {
    this.transactionPrice = transactionPrice;
  }


  public OutputTransaction totalConsideration(CurrencyAndAmount totalConsideration) {
    
    this.totalConsideration = totalConsideration;
    return this;
  }

   /**
   * Get totalConsideration
   * @return totalConsideration
  **/
  @jakarta.annotation.Nullable
  public CurrencyAndAmount getTotalConsideration() {
    return totalConsideration;
  }


  public void setTotalConsideration(CurrencyAndAmount totalConsideration) {
    this.totalConsideration = totalConsideration;
  }


  public OutputTransaction exchangeRate(java.math.BigDecimal exchangeRate) {
    
    this.exchangeRate = exchangeRate;
    return this;
  }

   /**
   * The exchange rate between the transaction and settlement currency (settlement currency being represented by the TotalConsideration.Currency). For example if the transaction currency is in USD and the settlement currency is in GBP this this the USD/GBP rate.
   * @return exchangeRate
  **/
  @jakarta.annotation.Nullable
  public java.math.BigDecimal getExchangeRate() {
    return exchangeRate;
  }


  public void setExchangeRate(java.math.BigDecimal exchangeRate) {
    this.exchangeRate = exchangeRate;
  }


  public OutputTransaction transactionToPortfolioRate(java.math.BigDecimal transactionToPortfolioRate) {
    
    this.transactionToPortfolioRate = transactionToPortfolioRate;
    return this;
  }

   /**
   * The exchange rate between the transaction and portfolio currency. For example if the transaction currency is in USD and the portfolio currency is in GBP this this the USD/GBP rate.
   * @return transactionToPortfolioRate
  **/
  @jakarta.annotation.Nullable
  public java.math.BigDecimal getTransactionToPortfolioRate() {
    return transactionToPortfolioRate;
  }


  public void setTransactionToPortfolioRate(java.math.BigDecimal transactionToPortfolioRate) {
    this.transactionToPortfolioRate = transactionToPortfolioRate;
  }


  public OutputTransaction transactionCurrency(String transactionCurrency) {
    
    this.transactionCurrency = transactionCurrency;
    return this;
  }

   /**
   * The transaction currency.
   * @return transactionCurrency
  **/
  @jakarta.annotation.Nullable
  public String getTransactionCurrency() {
    return transactionCurrency;
  }


  public void setTransactionCurrency(String transactionCurrency) {
    this.transactionCurrency = transactionCurrency;
  }


  public OutputTransaction properties(Map<String, PerpetualProperty> properties) {
    
    this.properties = properties;
    return this;
  }

  public OutputTransaction putPropertiesItem(String key, PerpetualProperty propertiesItem) {
    if (this.properties == null) {
      this.properties = new HashMap<>();
    }
    this.properties.put(key, propertiesItem);
    return this;
  }

   /**
   * Set of unique transaction properties and associated values to stored with the transaction. Each property will be from the &#39;Transaction&#39; domain.
   * @return properties
  **/
  @jakarta.annotation.Nullable
  public Map<String, PerpetualProperty> getProperties() {
    return properties;
  }


  public void setProperties(Map<String, PerpetualProperty> properties) {
    this.properties = properties;
  }


  public OutputTransaction counterpartyId(String counterpartyId) {
    
    this.counterpartyId = counterpartyId;
    return this;
  }

   /**
   * The identifier for the counterparty of the transaction.
   * @return counterpartyId
  **/
  @jakarta.annotation.Nullable
  public String getCounterpartyId() {
    return counterpartyId;
  }


  public void setCounterpartyId(String counterpartyId) {
    this.counterpartyId = counterpartyId;
  }


  public OutputTransaction source(String source) {
    
    this.source = source;
    return this;
  }

   /**
   * The source of the transaction. This is used to look up the appropriate transaction group set in the transaction type configuration.
   * @return source
  **/
  @jakarta.annotation.Nullable
  public String getSource() {
    return source;
  }


  public void setSource(String source) {
    this.source = source;
  }


  public OutputTransaction transactionStatus(TransactionStatusEnum transactionStatus) {
    
    this.transactionStatus = transactionStatus;
    return this;
  }

   /**
   * The status of the transaction. The available values are: Active, Amended, Cancelled
   * @return transactionStatus
  **/
  @jakarta.annotation.Nullable
  public TransactionStatusEnum getTransactionStatus() {
    return transactionStatus;
  }


  public void setTransactionStatus(TransactionStatusEnum transactionStatus) {
    this.transactionStatus = transactionStatus;
  }


  public OutputTransaction entryDateTime(OffsetDateTime entryDateTime) {
    
    this.entryDateTime = entryDateTime;
    return this;
  }

   /**
   * The asAt datetime that the transaction was added to LUSID.
   * @return entryDateTime
  **/
  @jakarta.annotation.Nullable
  public OffsetDateTime getEntryDateTime() {
    return entryDateTime;
  }


  public void setEntryDateTime(OffsetDateTime entryDateTime) {
    this.entryDateTime = entryDateTime;
  }


  public OutputTransaction cancelDateTime(OffsetDateTime cancelDateTime) {
    
    this.cancelDateTime = cancelDateTime;
    return this;
  }

   /**
   * If the transaction has been cancelled, the asAt datetime that the transaction was cancelled.
   * @return cancelDateTime
  **/
  @jakarta.annotation.Nullable
  public OffsetDateTime getCancelDateTime() {
    return cancelDateTime;
  }


  public void setCancelDateTime(OffsetDateTime cancelDateTime) {
    this.cancelDateTime = cancelDateTime;
  }


  public OutputTransaction realisedGainLoss(List<RealisedGainLoss> realisedGainLoss) {
    
    this.realisedGainLoss = realisedGainLoss;
    return this;
  }

  public OutputTransaction addRealisedGainLossItem(RealisedGainLoss realisedGainLossItem) {
    if (this.realisedGainLoss == null) {
      this.realisedGainLoss = new ArrayList<>();
    }
    this.realisedGainLoss.add(realisedGainLossItem);
    return this;
  }

   /**
   * The collection of realised gains or losses resulting from relevant transactions e.g. a sale transaction. The cost used in calculating the realised gain or loss is determined by the accounting method defined when the transaction portfolio is created.
   * @return realisedGainLoss
  **/
  @jakarta.annotation.Nullable
  public List<RealisedGainLoss> getRealisedGainLoss() {
    return realisedGainLoss;
  }


  public void setRealisedGainLoss(List<RealisedGainLoss> realisedGainLoss) {
    this.realisedGainLoss = realisedGainLoss;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OutputTransaction outputTransaction = (OutputTransaction) o;
    return Objects.equals(this.transactionId, outputTransaction.transactionId) &&
        Objects.equals(this.type, outputTransaction.type) &&
        Objects.equals(this.description, outputTransaction.description) &&
        Objects.equals(this.instrumentIdentifiers, outputTransaction.instrumentIdentifiers) &&
        Objects.equals(this.instrumentScope, outputTransaction.instrumentScope) &&
        Objects.equals(this.instrumentUid, outputTransaction.instrumentUid) &&
        Objects.equals(this.transactionDate, outputTransaction.transactionDate) &&
        Objects.equals(this.settlementDate, outputTransaction.settlementDate) &&
        (this.units.compareTo(outputTransaction.getUnits()) == 0) &&
        (this.transactionAmount.compareTo(outputTransaction.getTransactionAmount()) == 0) &&
        Objects.equals(this.transactionPrice, outputTransaction.transactionPrice) &&
        Objects.equals(this.totalConsideration, outputTransaction.totalConsideration) &&
        (this.exchangeRate.compareTo(outputTransaction.getExchangeRate()) == 0) &&
        (this.transactionToPortfolioRate.compareTo(outputTransaction.getTransactionToPortfolioRate()) == 0) &&
        Objects.equals(this.transactionCurrency, outputTransaction.transactionCurrency) &&
        Objects.equals(this.properties, outputTransaction.properties) &&
        Objects.equals(this.counterpartyId, outputTransaction.counterpartyId) &&
        Objects.equals(this.source, outputTransaction.source) &&
        Objects.equals(this.transactionStatus, outputTransaction.transactionStatus) &&
        Objects.equals(this.entryDateTime, outputTransaction.entryDateTime) &&
        Objects.equals(this.cancelDateTime, outputTransaction.cancelDateTime) &&
        Objects.equals(this.realisedGainLoss, outputTransaction.realisedGainLoss);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(transactionId, type, description, instrumentIdentifiers, instrumentScope, instrumentUid, transactionDate, settlementDate, units, transactionAmount, transactionPrice, totalConsideration, exchangeRate, transactionToPortfolioRate, transactionCurrency, properties, counterpartyId, source, transactionStatus, entryDateTime, cancelDateTime, realisedGainLoss);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OutputTransaction {\n");
    sb.append("    transactionId: ").append(toIndentedString(transactionId)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    instrumentIdentifiers: ").append(toIndentedString(instrumentIdentifiers)).append("\n");
    sb.append("    instrumentScope: ").append(toIndentedString(instrumentScope)).append("\n");
    sb.append("    instrumentUid: ").append(toIndentedString(instrumentUid)).append("\n");
    sb.append("    transactionDate: ").append(toIndentedString(transactionDate)).append("\n");
    sb.append("    settlementDate: ").append(toIndentedString(settlementDate)).append("\n");
    sb.append("    units: ").append(toIndentedString(units)).append("\n");
    sb.append("    transactionAmount: ").append(toIndentedString(transactionAmount)).append("\n");
    sb.append("    transactionPrice: ").append(toIndentedString(transactionPrice)).append("\n");
    sb.append("    totalConsideration: ").append(toIndentedString(totalConsideration)).append("\n");
    sb.append("    exchangeRate: ").append(toIndentedString(exchangeRate)).append("\n");
    sb.append("    transactionToPortfolioRate: ").append(toIndentedString(transactionToPortfolioRate)).append("\n");
    sb.append("    transactionCurrency: ").append(toIndentedString(transactionCurrency)).append("\n");
    sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
    sb.append("    counterpartyId: ").append(toIndentedString(counterpartyId)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    transactionStatus: ").append(toIndentedString(transactionStatus)).append("\n");
    sb.append("    entryDateTime: ").append(toIndentedString(entryDateTime)).append("\n");
    sb.append("    cancelDateTime: ").append(toIndentedString(cancelDateTime)).append("\n");
    sb.append("    realisedGainLoss: ").append(toIndentedString(realisedGainLoss)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("transactionId");
    openapiFields.add("type");
    openapiFields.add("description");
    openapiFields.add("instrumentIdentifiers");
    openapiFields.add("instrumentScope");
    openapiFields.add("instrumentUid");
    openapiFields.add("transactionDate");
    openapiFields.add("settlementDate");
    openapiFields.add("units");
    openapiFields.add("transactionAmount");
    openapiFields.add("transactionPrice");
    openapiFields.add("totalConsideration");
    openapiFields.add("exchangeRate");
    openapiFields.add("transactionToPortfolioRate");
    openapiFields.add("transactionCurrency");
    openapiFields.add("properties");
    openapiFields.add("counterpartyId");
    openapiFields.add("source");
    openapiFields.add("transactionStatus");
    openapiFields.add("entryDateTime");
    openapiFields.add("cancelDateTime");
    openapiFields.add("realisedGainLoss");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("transactionId");
    openapiRequiredFields.add("type");
    openapiRequiredFields.add("instrumentUid");
    openapiRequiredFields.add("transactionDate");
    openapiRequiredFields.add("settlementDate");
    openapiRequiredFields.add("units");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to OutputTransaction
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!OutputTransaction.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OutputTransaction is not found in the empty JSON string", OutputTransaction.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!OutputTransaction.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OutputTransaction` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : OutputTransaction.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("transactionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transactionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transactionId").toString()));
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("instrumentScope") != null && !jsonObj.get("instrumentScope").isJsonNull()) && !jsonObj.get("instrumentScope").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `instrumentScope` to be a primitive type in the JSON string but got `%s`", jsonObj.get("instrumentScope").toString()));
      }
      if (!jsonObj.get("instrumentUid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `instrumentUid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("instrumentUid").toString()));
      }
      // validate the optional field `transactionPrice`
      if (jsonObj.get("transactionPrice") != null && !jsonObj.get("transactionPrice").isJsonNull()) {
        TransactionPrice.validateJsonObject(jsonObj.getAsJsonObject("transactionPrice"));
      }
      // validate the optional field `totalConsideration`
      if (jsonObj.get("totalConsideration") != null && !jsonObj.get("totalConsideration").isJsonNull()) {
        CurrencyAndAmount.validateJsonObject(jsonObj.getAsJsonObject("totalConsideration"));
      }
      if ((jsonObj.get("transactionCurrency") != null && !jsonObj.get("transactionCurrency").isJsonNull()) && !jsonObj.get("transactionCurrency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transactionCurrency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transactionCurrency").toString()));
      }
      if ((jsonObj.get("counterpartyId") != null && !jsonObj.get("counterpartyId").isJsonNull()) && !jsonObj.get("counterpartyId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `counterpartyId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("counterpartyId").toString()));
      }
      if ((jsonObj.get("source") != null && !jsonObj.get("source").isJsonNull()) && !jsonObj.get("source").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `source` to be a primitive type in the JSON string but got `%s`", jsonObj.get("source").toString()));
      }
      if ((jsonObj.get("transactionStatus") != null && !jsonObj.get("transactionStatus").isJsonNull()) && !jsonObj.get("transactionStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transactionStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transactionStatus").toString()));
      }
      if (jsonObj.get("realisedGainLoss") != null && !jsonObj.get("realisedGainLoss").isJsonNull()) {
        JsonArray jsonArrayrealisedGainLoss = jsonObj.getAsJsonArray("realisedGainLoss");
        if (jsonArrayrealisedGainLoss != null) {
          // ensure the json data is an array
          if (!jsonObj.get("realisedGainLoss").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `realisedGainLoss` to be an array in the JSON string but got `%s`", jsonObj.get("realisedGainLoss").toString()));
          }

          // validate the optional field `realisedGainLoss` (array)
          for (int i = 0; i < jsonArrayrealisedGainLoss.size(); i++) {
            RealisedGainLoss.validateJsonObject(jsonArrayrealisedGainLoss.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OutputTransaction.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OutputTransaction' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OutputTransaction> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OutputTransaction.class));

       return (TypeAdapter<T>) new TypeAdapter<OutputTransaction>() {
           @Override
           public void write(JsonWriter out, OutputTransaction value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OutputTransaction read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of OutputTransaction given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of OutputTransaction
  * @throws IOException if the JSON string is invalid with respect to OutputTransaction
  */
  public static OutputTransaction fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OutputTransaction.class);
  }

 /**
  * Convert an instance of OutputTransaction to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
