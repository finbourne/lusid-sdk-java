/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import com.finbourne.lusid.model.FeeAccrual;
import com.finbourne.lusid.model.FundValuationPointData;
import com.finbourne.lusid.model.Link;
import com.finbourne.lusid.model.ShareClassData;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.net.URI;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * The Valuation Point Data Response for the Fund and specified date.
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ValuationPointDataResponse {
  public static final String SERIALIZED_NAME_HREF = "href";
  @SerializedName(SERIALIZED_NAME_HREF)
  private URI href;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_BACKOUT = "backout";
  @SerializedName(SERIALIZED_NAME_BACKOUT)
  private Map<String, java.math.BigDecimal> backout = new HashMap<>();

  public static final String SERIALIZED_NAME_DEALING = "dealing";
  @SerializedName(SERIALIZED_NAME_DEALING)
  private Map<String, java.math.BigDecimal> dealing = new HashMap<>();

  public static final String SERIALIZED_NAME_PN_L = "pnL";
  @SerializedName(SERIALIZED_NAME_PN_L)
  private Map<String, java.math.BigDecimal> pnL = new HashMap<>();

  public static final String SERIALIZED_NAME_GAV = "gav";
  @SerializedName(SERIALIZED_NAME_GAV)
  private java.math.BigDecimal gav;

  public static final String SERIALIZED_NAME_FEES = "fees";
  @SerializedName(SERIALIZED_NAME_FEES)
  private Map<String, FeeAccrual> fees = new HashMap<>();

  public static final String SERIALIZED_NAME_NAV = "nav";
  @SerializedName(SERIALIZED_NAME_NAV)
  private java.math.BigDecimal nav;

  public static final String SERIALIZED_NAME_PREVIOUS_NAV = "previousNav";
  @SerializedName(SERIALIZED_NAME_PREVIOUS_NAV)
  private java.math.BigDecimal previousNav;

  public static final String SERIALIZED_NAME_FUND_VALUATION_POINT_DATA = "fundValuationPointData";
  @SerializedName(SERIALIZED_NAME_FUND_VALUATION_POINT_DATA)
  private FundValuationPointData fundValuationPointData;

  public static final String SERIALIZED_NAME_SHARE_CLASS_DATA = "shareClassData";
  @SerializedName(SERIALIZED_NAME_SHARE_CLASS_DATA)
  private Map<String, ShareClassData> shareClassData = new HashMap<>();

  public static final String SERIALIZED_NAME_VALUATION_POINT_CODE = "valuationPointCode";
  @SerializedName(SERIALIZED_NAME_VALUATION_POINT_CODE)
  private String valuationPointCode;

  public static final String SERIALIZED_NAME_PREVIOUS_VALUATION_POINT_CODE = "previousValuationPointCode";
  @SerializedName(SERIALIZED_NAME_PREVIOUS_VALUATION_POINT_CODE)
  private String previousValuationPointCode;

  public static final String SERIALIZED_NAME_LINKS = "links";
  @SerializedName(SERIALIZED_NAME_LINKS)
  private List<Link> links;

  public ValuationPointDataResponse() {
  }

  public ValuationPointDataResponse href(URI href) {
    
    this.href = href;
    return this;
  }

   /**
   * The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.
   * @return href
  **/
  @jakarta.annotation.Nullable
  public URI getHref() {
    return href;
  }


  public void setHref(URI href) {
    this.href = href;
  }


  public ValuationPointDataResponse type(String type) {
    
    this.type = type;
    return this;
  }

   /**
   * The Type of the associated Diary Entry (&#39;PeriodBoundary&#39;,&#39;ValuationPoint&#39;,&#39;Other&#39; or &#39;Adhoc&#39; when a diary entry wasn&#39;t used).
   * @return type
  **/
  @jakarta.annotation.Nonnull
  public String getType() {
    return type;
  }


  public void setType(String type) {
    this.type = type;
  }


  public ValuationPointDataResponse status(String status) {
    
    this.status = status;
    return this;
  }

   /**
   * The status of a Diary Entry of Type &#39;ValuationPoint&#39;. Defaults to &#39;Estimate&#39; when upserting a diary entry, moves to &#39;Candidate&#39; or &#39;Final&#39; when a ValuationPoint is accepted, and &#39;Final&#39; when it is finalised. The status of a Diary Entry becomes &#39;Unofficial&#39; when a diary entry wasn&#39;t used.
   * @return status
  **/
  @jakarta.annotation.Nonnull
  public String getStatus() {
    return status;
  }


  public void setStatus(String status) {
    this.status = status;
  }


  public ValuationPointDataResponse backout(Map<String, java.math.BigDecimal> backout) {
    
    this.backout = backout;
    return this;
  }

  public ValuationPointDataResponse putBackoutItem(String key, java.math.BigDecimal backoutItem) {
    if (this.backout == null) {
      this.backout = new HashMap<>();
    }
    this.backout.put(key, backoutItem);
    return this;
  }

   /**
   * DEPRECATED. Bucket of detail for the Valuation Point, where data points have been &#39;backed out&#39;.
   * @return backout
  **/
  @jakarta.annotation.Nonnull
  public Map<String, java.math.BigDecimal> getBackout() {
    return backout;
  }


  public void setBackout(Map<String, java.math.BigDecimal> backout) {
    this.backout = backout;
  }


  public ValuationPointDataResponse dealing(Map<String, java.math.BigDecimal> dealing) {
    
    this.dealing = dealing;
    return this;
  }

  public ValuationPointDataResponse putDealingItem(String key, java.math.BigDecimal dealingItem) {
    if (this.dealing == null) {
      this.dealing = new HashMap<>();
    }
    this.dealing.put(key, dealingItem);
    return this;
  }

   /**
   * DEPRECATED. Bucket of detail for any &#39;Dealing&#39; that has occured inside the queried period.
   * @return dealing
  **/
  @jakarta.annotation.Nonnull
  public Map<String, java.math.BigDecimal> getDealing() {
    return dealing;
  }


  public void setDealing(Map<String, java.math.BigDecimal> dealing) {
    this.dealing = dealing;
  }


  public ValuationPointDataResponse pnL(Map<String, java.math.BigDecimal> pnL) {
    
    this.pnL = pnL;
    return this;
  }

  public ValuationPointDataResponse putPnLItem(String key, java.math.BigDecimal pnLItem) {
    if (this.pnL == null) {
      this.pnL = new HashMap<>();
    }
    this.pnL.put(key, pnLItem);
    return this;
  }

   /**
   * DEPRECATED. Bucket of detail for &#39;PnL&#39; that has occured inside the queried period.
   * @return pnL
  **/
  @jakarta.annotation.Nonnull
  public Map<String, java.math.BigDecimal> getPnL() {
    return pnL;
  }


  public void setPnL(Map<String, java.math.BigDecimal> pnL) {
    this.pnL = pnL;
  }


  public ValuationPointDataResponse gav(java.math.BigDecimal gav) {
    
    this.gav = gav;
    return this;
  }

   /**
   * DEPRECATED. The Gross Asset Value of the Fund at the Period end. This is effectively a summation of all Trial balance entries linked to accounts of types &#39;Asset&#39; and &#39;Liabilities&#39;.
   * @return gav
  **/
  @jakarta.annotation.Nonnull
  public java.math.BigDecimal getGav() {
    return gav;
  }


  public void setGav(java.math.BigDecimal gav) {
    this.gav = gav;
  }


  public ValuationPointDataResponse fees(Map<String, FeeAccrual> fees) {
    
    this.fees = fees;
    return this;
  }

  public ValuationPointDataResponse putFeesItem(String key, FeeAccrual feesItem) {
    if (this.fees == null) {
      this.fees = new HashMap<>();
    }
    this.fees.put(key, feesItem);
    return this;
  }

   /**
   * DEPRECATED. Bucket of detail for any &#39;Fees&#39; that have been charged in the selected period.
   * @return fees
  **/
  @jakarta.annotation.Nonnull
  public Map<String, FeeAccrual> getFees() {
    return fees;
  }


  public void setFees(Map<String, FeeAccrual> fees) {
    this.fees = fees;
  }


  public ValuationPointDataResponse nav(java.math.BigDecimal nav) {
    
    this.nav = nav;
    return this;
  }

   /**
   * DEPRECATED. The Net Asset Value of the Fund at the Period end. This represents the GAV with any fees applied in the period.
   * @return nav
  **/
  @jakarta.annotation.Nonnull
  public java.math.BigDecimal getNav() {
    return nav;
  }


  public void setNav(java.math.BigDecimal nav) {
    this.nav = nav;
  }


  public ValuationPointDataResponse previousNav(java.math.BigDecimal previousNav) {
    
    this.previousNav = previousNav;
    return this;
  }

   /**
   * DEPRECATED. The Net Asset Value of the Fund at the End of the last Period.
   * @return previousNav
  **/
  @jakarta.annotation.Nonnull
  public java.math.BigDecimal getPreviousNav() {
    return previousNav;
  }


  public void setPreviousNav(java.math.BigDecimal previousNav) {
    this.previousNav = previousNav;
  }


  public ValuationPointDataResponse fundValuationPointData(FundValuationPointData fundValuationPointData) {
    
    this.fundValuationPointData = fundValuationPointData;
    return this;
  }

   /**
   * Get fundValuationPointData
   * @return fundValuationPointData
  **/
  @jakarta.annotation.Nonnull
  public FundValuationPointData getFundValuationPointData() {
    return fundValuationPointData;
  }


  public void setFundValuationPointData(FundValuationPointData fundValuationPointData) {
    this.fundValuationPointData = fundValuationPointData;
  }


  public ValuationPointDataResponse shareClassData(Map<String, ShareClassData> shareClassData) {
    
    this.shareClassData = shareClassData;
    return this;
  }

  public ValuationPointDataResponse putShareClassDataItem(String key, ShareClassData shareClassDataItem) {
    if (this.shareClassData == null) {
      this.shareClassData = new HashMap<>();
    }
    this.shareClassData.put(key, shareClassDataItem);
    return this;
  }

   /**
   * The data for all share classes in fund. Share classes are identified by their short codes.
   * @return shareClassData
  **/
  @jakarta.annotation.Nonnull
  public Map<String, ShareClassData> getShareClassData() {
    return shareClassData;
  }


  public void setShareClassData(Map<String, ShareClassData> shareClassData) {
    this.shareClassData = shareClassData;
  }


  public ValuationPointDataResponse valuationPointCode(String valuationPointCode) {
    
    this.valuationPointCode = valuationPointCode;
    return this;
  }

   /**
   * The code of the valuation point.
   * @return valuationPointCode
  **/
  @jakarta.annotation.Nullable
  public String getValuationPointCode() {
    return valuationPointCode;
  }


  public void setValuationPointCode(String valuationPointCode) {
    this.valuationPointCode = valuationPointCode;
  }


  public ValuationPointDataResponse previousValuationPointCode(String previousValuationPointCode) {
    
    this.previousValuationPointCode = previousValuationPointCode;
    return this;
  }

   /**
   * The code of the previous valuation point.
   * @return previousValuationPointCode
  **/
  @jakarta.annotation.Nullable
  public String getPreviousValuationPointCode() {
    return previousValuationPointCode;
  }


  public void setPreviousValuationPointCode(String previousValuationPointCode) {
    this.previousValuationPointCode = previousValuationPointCode;
  }


  public ValuationPointDataResponse links(List<Link> links) {
    
    this.links = links;
    return this;
  }

  public ValuationPointDataResponse addLinksItem(Link linksItem) {
    if (this.links == null) {
      this.links = new ArrayList<>();
    }
    this.links.add(linksItem);
    return this;
  }

   /**
   * Get links
   * @return links
  **/
  @jakarta.annotation.Nullable
  public List<Link> getLinks() {
    return links;
  }


  public void setLinks(List<Link> links) {
    this.links = links;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ValuationPointDataResponse valuationPointDataResponse = (ValuationPointDataResponse) o;
    return Objects.equals(this.href, valuationPointDataResponse.href) &&
        Objects.equals(this.type, valuationPointDataResponse.type) &&
        Objects.equals(this.status, valuationPointDataResponse.status) &&
        Objects.equals(this.backout, valuationPointDataResponse.backout) &&
        Objects.equals(this.dealing, valuationPointDataResponse.dealing) &&
        Objects.equals(this.pnL, valuationPointDataResponse.pnL) &&
        (this.gav.compareTo(valuationPointDataResponse.getGav()) == 0) &&
        Objects.equals(this.fees, valuationPointDataResponse.fees) &&
        (this.nav.compareTo(valuationPointDataResponse.getNav()) == 0) &&
        (this.previousNav.compareTo(valuationPointDataResponse.getPreviousNav()) == 0) &&
        Objects.equals(this.fundValuationPointData, valuationPointDataResponse.fundValuationPointData) &&
        Objects.equals(this.shareClassData, valuationPointDataResponse.shareClassData) &&
        Objects.equals(this.valuationPointCode, valuationPointDataResponse.valuationPointCode) &&
        Objects.equals(this.previousValuationPointCode, valuationPointDataResponse.previousValuationPointCode) &&
        Objects.equals(this.links, valuationPointDataResponse.links);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(href, type, status, backout, dealing, pnL, gav, fees, nav, previousNav, fundValuationPointData, shareClassData, valuationPointCode, previousValuationPointCode, links);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ValuationPointDataResponse {\n");
    sb.append("    href: ").append(toIndentedString(href)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    backout: ").append(toIndentedString(backout)).append("\n");
    sb.append("    dealing: ").append(toIndentedString(dealing)).append("\n");
    sb.append("    pnL: ").append(toIndentedString(pnL)).append("\n");
    sb.append("    gav: ").append(toIndentedString(gav)).append("\n");
    sb.append("    fees: ").append(toIndentedString(fees)).append("\n");
    sb.append("    nav: ").append(toIndentedString(nav)).append("\n");
    sb.append("    previousNav: ").append(toIndentedString(previousNav)).append("\n");
    sb.append("    fundValuationPointData: ").append(toIndentedString(fundValuationPointData)).append("\n");
    sb.append("    shareClassData: ").append(toIndentedString(shareClassData)).append("\n");
    sb.append("    valuationPointCode: ").append(toIndentedString(valuationPointCode)).append("\n");
    sb.append("    previousValuationPointCode: ").append(toIndentedString(previousValuationPointCode)).append("\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("href");
    openapiFields.add("type");
    openapiFields.add("status");
    openapiFields.add("backout");
    openapiFields.add("dealing");
    openapiFields.add("pnL");
    openapiFields.add("gav");
    openapiFields.add("fees");
    openapiFields.add("nav");
    openapiFields.add("previousNav");
    openapiFields.add("fundValuationPointData");
    openapiFields.add("shareClassData");
    openapiFields.add("valuationPointCode");
    openapiFields.add("previousValuationPointCode");
    openapiFields.add("links");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("type");
    openapiRequiredFields.add("status");
    openapiRequiredFields.add("backout");
    openapiRequiredFields.add("dealing");
    openapiRequiredFields.add("pnL");
    openapiRequiredFields.add("gav");
    openapiRequiredFields.add("fees");
    openapiRequiredFields.add("nav");
    openapiRequiredFields.add("previousNav");
    openapiRequiredFields.add("fundValuationPointData");
    openapiRequiredFields.add("shareClassData");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ValuationPointDataResponse
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ValuationPointDataResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ValuationPointDataResponse is not found in the empty JSON string", ValuationPointDataResponse.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ValuationPointDataResponse.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("href") != null && !jsonObj.get("href").isJsonNull()) && !jsonObj.get("href").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `href` to be a primitive type in the JSON string but got `%s`", jsonObj.get("href").toString()));
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if (!jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the required field `fundValuationPointData`
      FundValuationPointData.validateJsonElement(jsonObj.get("fundValuationPointData"));
      if ((jsonObj.get("valuationPointCode") != null && !jsonObj.get("valuationPointCode").isJsonNull()) && !jsonObj.get("valuationPointCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `valuationPointCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("valuationPointCode").toString()));
      }
      if ((jsonObj.get("previousValuationPointCode") != null && !jsonObj.get("previousValuationPointCode").isJsonNull()) && !jsonObj.get("previousValuationPointCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `previousValuationPointCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("previousValuationPointCode").toString()));
      }
      if (jsonObj.get("links") != null && !jsonObj.get("links").isJsonNull()) {
        JsonArray jsonArraylinks = jsonObj.getAsJsonArray("links");
        if (jsonArraylinks != null) {
          // ensure the json data is an array
          if (!jsonObj.get("links").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `links` to be an array in the JSON string but got `%s`", jsonObj.get("links").toString()));
          }

          // validate the optional field `links` (array)
          for (int i = 0; i < jsonArraylinks.size(); i++) {
            Link.validateJsonElement(jsonArraylinks.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ValuationPointDataResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ValuationPointDataResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ValuationPointDataResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ValuationPointDataResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<ValuationPointDataResponse>() {
           @Override
           public void write(JsonWriter out, ValuationPointDataResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ValuationPointDataResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ValuationPointDataResponse given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ValuationPointDataResponse
  * @throws IOException if the JSON string is invalid with respect to ValuationPointDataResponse
  */
  public static ValuationPointDataResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ValuationPointDataResponse.class);
  }

 /**
  * Convert an instance of ValuationPointDataResponse to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
