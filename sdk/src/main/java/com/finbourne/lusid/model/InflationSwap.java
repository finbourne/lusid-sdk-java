/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import com.finbourne.lusid.model.FlowConventions;
import com.finbourne.lusid.model.LusidInstrument;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * LUSID representation of an Inflation Swap.  The implementation supports the following swap types:  * Zero Coupon inflation swap, with a single payment at maturity.  * LPI Swap (capped and floored)  * Year on Year inflation swap
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class InflationSwap extends LusidInstrument {
  public static final String SERIALIZED_NAME_START_DATE = "startDate";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  private OffsetDateTime startDate;

  public static final String SERIALIZED_NAME_MATURITY_DATE = "maturityDate";
  @SerializedName(SERIALIZED_NAME_MATURITY_DATE)
  private OffsetDateTime maturityDate;

  public static final String SERIALIZED_NAME_FLOW_CONVENTIONS = "flowConventions";
  @SerializedName(SERIALIZED_NAME_FLOW_CONVENTIONS)
  private FlowConventions flowConventions;

  public static final String SERIALIZED_NAME_FIXED_RATE = "fixedRate";
  @SerializedName(SERIALIZED_NAME_FIXED_RATE)
  private java.math.BigDecimal fixedRate;

  public static final String SERIALIZED_NAME_INFLATION_CAP = "inflationCap";
  @SerializedName(SERIALIZED_NAME_INFLATION_CAP)
  private java.math.BigDecimal inflationCap;

  public static final String SERIALIZED_NAME_INFLATION_FLOOR = "inflationFloor";
  @SerializedName(SERIALIZED_NAME_INFLATION_FLOOR)
  private java.math.BigDecimal inflationFloor;

  public static final String SERIALIZED_NAME_INFLATION_FREQUENCY = "inflationFrequency";
  @SerializedName(SERIALIZED_NAME_INFLATION_FREQUENCY)
  private String inflationFrequency;

  public static final String SERIALIZED_NAME_INFLATION_INDEX_NAME = "inflationIndexName";
  @SerializedName(SERIALIZED_NAME_INFLATION_INDEX_NAME)
  private String inflationIndexName;

  public static final String SERIALIZED_NAME_INFLATION_INTERPOLATION = "inflationInterpolation";
  @SerializedName(SERIALIZED_NAME_INFLATION_INTERPOLATION)
  private String inflationInterpolation;

  public static final String SERIALIZED_NAME_INFLATION_ROLL_DAY = "inflationRollDay";
  @SerializedName(SERIALIZED_NAME_INFLATION_ROLL_DAY)
  private Integer inflationRollDay;

  public static final String SERIALIZED_NAME_NOTIONAL = "notional";
  @SerializedName(SERIALIZED_NAME_NOTIONAL)
  private java.math.BigDecimal notional;

  public static final String SERIALIZED_NAME_OBSERVATION_LAG = "observationLag";
  @SerializedName(SERIALIZED_NAME_OBSERVATION_LAG)
  private String observationLag;

  public static final String SERIALIZED_NAME_PAY_RECEIVE = "payReceive";
  @SerializedName(SERIALIZED_NAME_PAY_RECEIVE)
  private String payReceive;

  public InflationSwap() {
    // this.instrumentType = this.getClass().getSimpleName();
  }

  public InflationSwap startDate(OffsetDateTime startDate) {
    
    this.startDate = startDate;
    return this;
  }

   /**
   * The start date of the instrument. This is normally synonymous with the trade-date.
   * @return startDate
  **/
  @jakarta.annotation.Nonnull
  public OffsetDateTime getStartDate() {
    return startDate;
  }


  public void setStartDate(OffsetDateTime startDate) {
    this.startDate = startDate;
  }


  public InflationSwap maturityDate(OffsetDateTime maturityDate) {
    
    this.maturityDate = maturityDate;
    return this;
  }

   /**
   * The final maturity date of the instrument. This means the last date on which the instruments makes a payment of any amount.  For the avoidance of doubt, that is not necessarily prior to its last sensitivity date for the purposes of risk; e.g. instruments such as  Constant Maturity Swaps (CMS) often have sensitivities to rates that may well be observed or set prior to the maturity date, but refer to a termination date beyond it.
   * @return maturityDate
  **/
  @jakarta.annotation.Nonnull
  public OffsetDateTime getMaturityDate() {
    return maturityDate;
  }


  public void setMaturityDate(OffsetDateTime maturityDate) {
    this.maturityDate = maturityDate;
  }


  public InflationSwap flowConventions(FlowConventions flowConventions) {
    
    this.flowConventions = flowConventions;
    return this;
  }

   /**
   * Get flowConventions
   * @return flowConventions
  **/
  @jakarta.annotation.Nonnull
  public FlowConventions getFlowConventions() {
    return flowConventions;
  }


  public void setFlowConventions(FlowConventions flowConventions) {
    this.flowConventions = flowConventions;
  }


  public InflationSwap fixedRate(java.math.BigDecimal fixedRate) {
    
    this.fixedRate = fixedRate;
    return this;
  }

   /**
   * Fixed Rate
   * @return fixedRate
  **/
  @jakarta.annotation.Nonnull
  public java.math.BigDecimal getFixedRate() {
    return fixedRate;
  }


  public void setFixedRate(java.math.BigDecimal fixedRate) {
    this.fixedRate = fixedRate;
  }


  public InflationSwap inflationCap(java.math.BigDecimal inflationCap) {
    
    this.inflationCap = inflationCap;
    return this;
  }

   /**
   * Optional cap, needed for LPI swaps. Should not be set for ZCIIS.
   * @return inflationCap
  **/
  @jakarta.annotation.Nullable
  public java.math.BigDecimal getInflationCap() {
    return inflationCap;
  }


  public void setInflationCap(java.math.BigDecimal inflationCap) {
    this.inflationCap = inflationCap;
  }


  public InflationSwap inflationFloor(java.math.BigDecimal inflationFloor) {
    
    this.inflationFloor = inflationFloor;
    return this;
  }

   /**
   * Optional floor, needed for LPI swaps. Should not be set for ZCIIS.
   * @return inflationFloor
  **/
  @jakarta.annotation.Nullable
  public java.math.BigDecimal getInflationFloor() {
    return inflationFloor;
  }


  public void setInflationFloor(java.math.BigDecimal inflationFloor) {
    this.inflationFloor = inflationFloor;
  }


  public InflationSwap inflationFrequency(String inflationFrequency) {
    
    this.inflationFrequency = inflationFrequency;
    return this;
  }

   /**
   * Frequency of inflation updated. Optional and defaults to Monthly which is the most common.  However both Australian and New Zealand inflation is published Quarterly. Only tenors of 1M or 3M are supported.
   * @return inflationFrequency
  **/
  @jakarta.annotation.Nullable
  public String getInflationFrequency() {
    return inflationFrequency;
  }


  public void setInflationFrequency(String inflationFrequency) {
    this.inflationFrequency = inflationFrequency;
  }


  public InflationSwap inflationIndexName(String inflationIndexName) {
    
    this.inflationIndexName = inflationIndexName;
    return this;
  }

   /**
   * Name of the Inflation Index
   * @return inflationIndexName
  **/
  @jakarta.annotation.Nonnull
  public String getInflationIndexName() {
    return inflationIndexName;
  }


  public void setInflationIndexName(String inflationIndexName) {
    this.inflationIndexName = inflationIndexName;
  }


  public InflationSwap inflationInterpolation(String inflationInterpolation) {
    
    this.inflationInterpolation = inflationInterpolation;
    return this;
  }

   /**
   * Inflation Interpolation flag, defaults to Linear but some older swaps require Flat.    Supported string (enumeration) values are: [Linear, Flat].
   * @return inflationInterpolation
  **/
  @jakarta.annotation.Nullable
  public String getInflationInterpolation() {
    return inflationInterpolation;
  }


  public void setInflationInterpolation(String inflationInterpolation) {
    this.inflationInterpolation = inflationInterpolation;
  }


  public InflationSwap inflationRollDay(Integer inflationRollDay) {
    
    this.inflationRollDay = inflationRollDay;
    return this;
  }

   /**
   * Day of the month that inflation rolls from one month to the next. This is optional and defaults to 1, which is  the typically value for the majority of inflation bonds (exceptions include Japan which rolls on the 10th  and some LatAm bonds which roll on the 15th).
   * @return inflationRollDay
  **/
  @jakarta.annotation.Nullable
  public Integer getInflationRollDay() {
    return inflationRollDay;
  }


  public void setInflationRollDay(Integer inflationRollDay) {
    this.inflationRollDay = inflationRollDay;
  }


  public InflationSwap notional(java.math.BigDecimal notional) {
    
    this.notional = notional;
    return this;
  }

   /**
   * The notional
   * @return notional
  **/
  @jakarta.annotation.Nonnull
  public java.math.BigDecimal getNotional() {
    return notional;
  }


  public void setNotional(java.math.BigDecimal notional) {
    this.notional = notional;
  }


  public InflationSwap observationLag(String observationLag) {
    
    this.observationLag = observationLag;
    return this;
  }

   /**
   * Observation Lag, must be a number of Months, typically 3 or 4 but sometimes 8.
   * @return observationLag
  **/
  @jakarta.annotation.Nonnull
  public String getObservationLag() {
    return observationLag;
  }


  public void setObservationLag(String observationLag) {
    this.observationLag = observationLag;
  }


  public InflationSwap payReceive(String payReceive) {
    
    this.payReceive = payReceive;
    return this;
  }

   /**
   * PayReceive flag for the inflation leg.  This field is optional and defaults to Pay.  If set to Pay, this swap pays inflation and receives fixed.    Supported string (enumeration) values are: [Pay, Receive].
   * @return payReceive
  **/
  @jakarta.annotation.Nullable
  public String getPayReceive() {
    return payReceive;
  }


  public void setPayReceive(String payReceive) {
    this.payReceive = payReceive;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InflationSwap inflationSwap = (InflationSwap) o;
    return Objects.equals(this.startDate, inflationSwap.startDate) &&
        Objects.equals(this.maturityDate, inflationSwap.maturityDate) &&
        Objects.equals(this.flowConventions, inflationSwap.flowConventions) &&
        (this.fixedRate.compareTo(inflationSwap.getFixedRate()) == 0) &&
        (this.inflationCap.compareTo(inflationSwap.getInflationCap()) == 0) &&
        (this.inflationFloor.compareTo(inflationSwap.getInflationFloor()) == 0) &&
        Objects.equals(this.inflationFrequency, inflationSwap.inflationFrequency) &&
        Objects.equals(this.inflationIndexName, inflationSwap.inflationIndexName) &&
        Objects.equals(this.inflationInterpolation, inflationSwap.inflationInterpolation) &&
        Objects.equals(this.inflationRollDay, inflationSwap.inflationRollDay) &&
        (this.notional.compareTo(inflationSwap.getNotional()) == 0) &&
        Objects.equals(this.observationLag, inflationSwap.observationLag) &&
        Objects.equals(this.payReceive, inflationSwap.payReceive) &&
        super.equals(o);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(startDate, maturityDate, flowConventions, fixedRate, inflationCap, inflationFloor, inflationFrequency, inflationIndexName, inflationInterpolation, inflationRollDay, notional, observationLag, payReceive, super.hashCode());
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InflationSwap {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    maturityDate: ").append(toIndentedString(maturityDate)).append("\n");
    sb.append("    flowConventions: ").append(toIndentedString(flowConventions)).append("\n");
    sb.append("    fixedRate: ").append(toIndentedString(fixedRate)).append("\n");
    sb.append("    inflationCap: ").append(toIndentedString(inflationCap)).append("\n");
    sb.append("    inflationFloor: ").append(toIndentedString(inflationFloor)).append("\n");
    sb.append("    inflationFrequency: ").append(toIndentedString(inflationFrequency)).append("\n");
    sb.append("    inflationIndexName: ").append(toIndentedString(inflationIndexName)).append("\n");
    sb.append("    inflationInterpolation: ").append(toIndentedString(inflationInterpolation)).append("\n");
    sb.append("    inflationRollDay: ").append(toIndentedString(inflationRollDay)).append("\n");
    sb.append("    notional: ").append(toIndentedString(notional)).append("\n");
    sb.append("    observationLag: ").append(toIndentedString(observationLag)).append("\n");
    sb.append("    payReceive: ").append(toIndentedString(payReceive)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("instrumentType");
    openapiFields.add("startDate");
    openapiFields.add("maturityDate");
    openapiFields.add("flowConventions");
    openapiFields.add("fixedRate");
    openapiFields.add("inflationCap");
    openapiFields.add("inflationFloor");
    openapiFields.add("inflationFrequency");
    openapiFields.add("inflationIndexName");
    openapiFields.add("inflationInterpolation");
    openapiFields.add("inflationRollDay");
    openapiFields.add("notional");
    openapiFields.add("observationLag");
    openapiFields.add("payReceive");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("startDate");
    openapiRequiredFields.add("maturityDate");
    openapiRequiredFields.add("flowConventions");
    openapiRequiredFields.add("fixedRate");
    openapiRequiredFields.add("inflationIndexName");
    openapiRequiredFields.add("notional");
    openapiRequiredFields.add("observationLag");
    openapiRequiredFields.add("instrumentType");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to InflationSwap
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!InflationSwap.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InflationSwap is not found in the empty JSON string", InflationSwap.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : InflationSwap.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InflationSwap.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InflationSwap' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InflationSwap> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InflationSwap.class));

       return (TypeAdapter<T>) new TypeAdapter<InflationSwap>() {
           @Override
           public void write(JsonWriter out, InflationSwap value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InflationSwap read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of InflationSwap given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of InflationSwap
  * @throws IOException if the JSON string is invalid with respect to InflationSwap
  */
  public static InflationSwap fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InflationSwap.class);
  }

 /**
  * Convert an instance of InflationSwap to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
