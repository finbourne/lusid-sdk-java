/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * Base class for representing economic dependencies. Economic dependencies are a way of indicating how one concept depends upon another. For example, when pricing an instrument with a particular model, that model will declare that it has an EconomicDependency for each bit of market data that it needs to complete the calculation. Concretely, a pricing an FxForward will declare a dependency on the exchange rate between the two currencies at the forward date.   Another example is when data is included in a data-structure only by reference. Concretely, an object depending on a FlowConvention that is referenced only semantically via a FlowConventionName will declare a FlowConventionDependency so that the full data-structure of the referenced FlowConvention can be retrieved.   For deserialization purposes, this class contains a discriminator EconomicDependencyType to indicate the derived type.
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class EconomicDependency {
  /**
   * The available values are: OpaqueDependency, CashDependency, DiscountingDependency, EquityCurveDependency, EquityVolDependency, FxDependency, FxForwardsDependency, FxVolDependency, IndexProjectionDependency, IrVolDependency, QuoteDependency, Vendor, CalendarDependency, InflationFixingDependency
   */
  @JsonAdapter(DependencyTypeEnum.Adapter.class)
  public enum DependencyTypeEnum {
    OPAQUEDEPENDENCY("OpaqueDependency"),
    
    CASHDEPENDENCY("CashDependency"),
    
    DISCOUNTINGDEPENDENCY("DiscountingDependency"),
    
    EQUITYCURVEDEPENDENCY("EquityCurveDependency"),
    
    EQUITYVOLDEPENDENCY("EquityVolDependency"),
    
    FXDEPENDENCY("FxDependency"),
    
    FXFORWARDSDEPENDENCY("FxForwardsDependency"),
    
    FXVOLDEPENDENCY("FxVolDependency"),
    
    INDEXPROJECTIONDEPENDENCY("IndexProjectionDependency"),
    
    IRVOLDEPENDENCY("IrVolDependency"),
    
    QUOTEDEPENDENCY("QuoteDependency"),
    
    VENDOR("Vendor"),
    
    CALENDARDEPENDENCY("CalendarDependency"),
    
    INFLATIONFIXINGDEPENDENCY("InflationFixingDependency");

    private String value;

    DependencyTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DependencyTypeEnum fromValue(String value) {
      for (DependencyTypeEnum b : DependencyTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DependencyTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DependencyTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DependencyTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DependencyTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_DEPENDENCY_TYPE = "dependencyType";
  @SerializedName(SERIALIZED_NAME_DEPENDENCY_TYPE)
  protected DependencyTypeEnum dependencyType;

  public EconomicDependency() {
  }

  public EconomicDependency dependencyType(DependencyTypeEnum dependencyType) {
    
    this.dependencyType = dependencyType;
    return this;
  }

   /**
   * The available values are: OpaqueDependency, CashDependency, DiscountingDependency, EquityCurveDependency, EquityVolDependency, FxDependency, FxForwardsDependency, FxVolDependency, IndexProjectionDependency, IrVolDependency, QuoteDependency, Vendor, CalendarDependency, InflationFixingDependency
   * @return dependencyType
  **/
  @jakarta.annotation.Nonnull
  public DependencyTypeEnum getDependencyType() {
    return dependencyType;
  }


  public void setDependencyType(DependencyTypeEnum dependencyType) {
    this.dependencyType = dependencyType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EconomicDependency economicDependency = (EconomicDependency) o;
    return Objects.equals(this.dependencyType, economicDependency.dependencyType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dependencyType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EconomicDependency {\n");
    sb.append("    dependencyType: ").append(toIndentedString(dependencyType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dependencyType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("dependencyType");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to EconomicDependency
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EconomicDependency.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EconomicDependency is not found in the empty JSON string", EconomicDependency.openapiRequiredFields.toString()));
        }
      }

      String discriminatorValue = jsonElement.getAsJsonObject().get("dependencyType").getAsString();
      switch (discriminatorValue) {
        case "CalendarDependency":
          CalendarDependency.validateJsonElement(jsonElement);
          break;
        case "CashDependency":
          CashDependency.validateJsonElement(jsonElement);
          break;
        case "DiscountingDependency":
          DiscountingDependency.validateJsonElement(jsonElement);
          break;
        case "EquityCurveDependency":
          EquityCurveDependency.validateJsonElement(jsonElement);
          break;
        case "EquityVolDependency":
          EquityVolDependency.validateJsonElement(jsonElement);
          break;
        case "FxDependency":
          FxDependency.validateJsonElement(jsonElement);
          break;
        case "FxForwardsDependency":
          FxForwardsDependency.validateJsonElement(jsonElement);
          break;
        case "FxVolDependency":
          FxVolDependency.validateJsonElement(jsonElement);
          break;
        case "IndexProjectionDependency":
          IndexProjectionDependency.validateJsonElement(jsonElement);
          break;
        case "InflationFixingDependency":
          InflationFixingDependency.validateJsonElement(jsonElement);
          break;
        case "IrVolDependency":
          IrVolDependency.validateJsonElement(jsonElement);
          break;
        case "OpaqueDependency":
          OpaqueDependency.validateJsonElement(jsonElement);
          break;
        case "QuoteDependency":
          QuoteDependency.validateJsonElement(jsonElement);
          break;
        case "VendorDependency":
          VendorDependency.validateJsonElement(jsonElement);
          break;
        default:
          throw new IllegalArgumentException(String.format("The value of the `dependencyType` field `%s` does not match any key defined in the discriminator's mapping.", discriminatorValue));
      }
  }


 /**
  * Create an instance of EconomicDependency given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of EconomicDependency
  * @throws IOException if the JSON string is invalid with respect to EconomicDependency
  */
  public static EconomicDependency fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EconomicDependency.class);
  }

 /**
  * Convert an instance of EconomicDependency to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
