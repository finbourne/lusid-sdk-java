/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import com.finbourne.lusid.model.SpecificHoldingPricingInfo;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * Enables price quotes to be created from Holding fields as either overrides or fallbacks to the Market Data resolution process. For example, we may wish to price an instrument at Cost if Market Data resolution fails. We may also wish to always price Bonds using the LastTradedPrice on the corresponding Holding.
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class HoldingPricingInfo {
  public static final String SERIALIZED_NAME_FALLBACK_FIELD = "fallbackField";
  @SerializedName(SERIALIZED_NAME_FALLBACK_FIELD)
  private String fallbackField;

  public static final String SERIALIZED_NAME_OVERRIDE_FIELD = "overrideField";
  @SerializedName(SERIALIZED_NAME_OVERRIDE_FIELD)
  private String overrideField;

  public static final String SERIALIZED_NAME_SPECIFIC_FALLBACKS = "specificFallbacks";
  @SerializedName(SERIALIZED_NAME_SPECIFIC_FALLBACKS)
  private List<SpecificHoldingPricingInfo> specificFallbacks;

  public static final String SERIALIZED_NAME_SPECIFIC_OVERRIDES = "specificOverrides";
  @SerializedName(SERIALIZED_NAME_SPECIFIC_OVERRIDES)
  private List<SpecificHoldingPricingInfo> specificOverrides;

  public HoldingPricingInfo() {
  }

  public HoldingPricingInfo fallbackField(String fallbackField) {
    
    this.fallbackField = fallbackField;
    return this;
  }

   /**
   * The default Holding field to fall back on if the Market Data resolution process fails to find a price quote.
   * @return fallbackField
  **/
  @jakarta.annotation.Nullable
  public String getFallbackField() {
    return fallbackField;
  }


  public void setFallbackField(String fallbackField) {
    this.fallbackField = fallbackField;
  }


  public HoldingPricingInfo overrideField(String overrideField) {
    
    this.overrideField = overrideField;
    return this;
  }

   /**
   * The default Holding field to be used as an override for instrument price quotes. This cannot be specified along with a FallbackField or any SpecificFallbacks, since we&#39;ll never attempt Market Data resolution for price quotes if this field is populated.
   * @return overrideField
  **/
  @jakarta.annotation.Nullable
  public String getOverrideField() {
    return overrideField;
  }


  public void setOverrideField(String overrideField) {
    this.overrideField = overrideField;
  }


  public HoldingPricingInfo specificFallbacks(List<SpecificHoldingPricingInfo> specificFallbacks) {
    
    this.specificFallbacks = specificFallbacks;
    return this;
  }

  public HoldingPricingInfo addSpecificFallbacksItem(SpecificHoldingPricingInfo specificFallbacksItem) {
    if (this.specificFallbacks == null) {
      this.specificFallbacks = new ArrayList<>();
    }
    this.specificFallbacks.add(specificFallbacksItem);
    return this;
  }

   /**
   * Allows a user to specify fallbacks using Holding fields for sources that match a particular DependencySourceFilter.
   * @return specificFallbacks
  **/
  @jakarta.annotation.Nullable
  public List<SpecificHoldingPricingInfo> getSpecificFallbacks() {
    return specificFallbacks;
  }


  public void setSpecificFallbacks(List<SpecificHoldingPricingInfo> specificFallbacks) {
    this.specificFallbacks = specificFallbacks;
  }


  public HoldingPricingInfo specificOverrides(List<SpecificHoldingPricingInfo> specificOverrides) {
    
    this.specificOverrides = specificOverrides;
    return this;
  }

  public HoldingPricingInfo addSpecificOverridesItem(SpecificHoldingPricingInfo specificOverridesItem) {
    if (this.specificOverrides == null) {
      this.specificOverrides = new ArrayList<>();
    }
    this.specificOverrides.add(specificOverridesItem);
    return this;
  }

   /**
   * Allows a user to specify overrides using Holding fields for sources that match a particular DependencySourceFilter.
   * @return specificOverrides
  **/
  @jakarta.annotation.Nullable
  public List<SpecificHoldingPricingInfo> getSpecificOverrides() {
    return specificOverrides;
  }


  public void setSpecificOverrides(List<SpecificHoldingPricingInfo> specificOverrides) {
    this.specificOverrides = specificOverrides;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HoldingPricingInfo holdingPricingInfo = (HoldingPricingInfo) o;
    return Objects.equals(this.fallbackField, holdingPricingInfo.fallbackField) &&
        Objects.equals(this.overrideField, holdingPricingInfo.overrideField) &&
        Objects.equals(this.specificFallbacks, holdingPricingInfo.specificFallbacks) &&
        Objects.equals(this.specificOverrides, holdingPricingInfo.specificOverrides);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(fallbackField, overrideField, specificFallbacks, specificOverrides);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HoldingPricingInfo {\n");
    sb.append("    fallbackField: ").append(toIndentedString(fallbackField)).append("\n");
    sb.append("    overrideField: ").append(toIndentedString(overrideField)).append("\n");
    sb.append("    specificFallbacks: ").append(toIndentedString(specificFallbacks)).append("\n");
    sb.append("    specificOverrides: ").append(toIndentedString(specificOverrides)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("fallbackField");
    openapiFields.add("overrideField");
    openapiFields.add("specificFallbacks");
    openapiFields.add("specificOverrides");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to HoldingPricingInfo
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!HoldingPricingInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in HoldingPricingInfo is not found in the empty JSON string", HoldingPricingInfo.openapiRequiredFields.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("fallbackField") != null && !jsonObj.get("fallbackField").isJsonNull()) && !jsonObj.get("fallbackField").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fallbackField` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fallbackField").toString()));
      }
      if ((jsonObj.get("overrideField") != null && !jsonObj.get("overrideField").isJsonNull()) && !jsonObj.get("overrideField").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `overrideField` to be a primitive type in the JSON string but got `%s`", jsonObj.get("overrideField").toString()));
      }
      if (jsonObj.get("specificFallbacks") != null && !jsonObj.get("specificFallbacks").isJsonNull()) {
        JsonArray jsonArrayspecificFallbacks = jsonObj.getAsJsonArray("specificFallbacks");
        if (jsonArrayspecificFallbacks != null) {
          // ensure the json data is an array
          if (!jsonObj.get("specificFallbacks").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `specificFallbacks` to be an array in the JSON string but got `%s`", jsonObj.get("specificFallbacks").toString()));
          }

          // validate the optional field `specificFallbacks` (array)
          for (int i = 0; i < jsonArrayspecificFallbacks.size(); i++) {
            SpecificHoldingPricingInfo.validateJsonElement(jsonArrayspecificFallbacks.get(i));
          };
        }
      }
      if (jsonObj.get("specificOverrides") != null && !jsonObj.get("specificOverrides").isJsonNull()) {
        JsonArray jsonArrayspecificOverrides = jsonObj.getAsJsonArray("specificOverrides");
        if (jsonArrayspecificOverrides != null) {
          // ensure the json data is an array
          if (!jsonObj.get("specificOverrides").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `specificOverrides` to be an array in the JSON string but got `%s`", jsonObj.get("specificOverrides").toString()));
          }

          // validate the optional field `specificOverrides` (array)
          for (int i = 0; i < jsonArrayspecificOverrides.size(); i++) {
            SpecificHoldingPricingInfo.validateJsonElement(jsonArrayspecificOverrides.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!HoldingPricingInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'HoldingPricingInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<HoldingPricingInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(HoldingPricingInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<HoldingPricingInfo>() {
           @Override
           public void write(JsonWriter out, HoldingPricingInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public HoldingPricingInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of HoldingPricingInfo given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of HoldingPricingInfo
  * @throws IOException if the JSON string is invalid with respect to HoldingPricingInfo
  */
  public static HoldingPricingInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, HoldingPricingInfo.class);
  }

 /**
  * Convert an instance of HoldingPricingInfo to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
