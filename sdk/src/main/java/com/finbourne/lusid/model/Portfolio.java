/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import com.finbourne.lusid.model.Link;
import com.finbourne.lusid.model.Property;
import com.finbourne.lusid.model.Relationship;
import com.finbourne.lusid.model.ResourceId;
import com.finbourne.lusid.model.Version;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.net.URI;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * A list of portfolios.
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class Portfolio {
  public static final String SERIALIZED_NAME_HREF = "href";
  @SerializedName(SERIALIZED_NAME_HREF)
  private URI href;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private ResourceId id;

  /**
   * The type of the portfolio. The available values are: Transaction, Reference, DerivedTransaction
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    TRANSACTION("Transaction"),
    
    REFERENCE("Reference"),
    
    DERIVEDTRANSACTION("DerivedTransaction");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_CREATED = "created";
  @SerializedName(SERIALIZED_NAME_CREATED)
  private OffsetDateTime created;

  public static final String SERIALIZED_NAME_PARENT_PORTFOLIO_ID = "parentPortfolioId";
  @SerializedName(SERIALIZED_NAME_PARENT_PORTFOLIO_ID)
  private ResourceId parentPortfolioId;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private Version version;

  public static final String SERIALIZED_NAME_IS_DERIVED = "isDerived";
  @SerializedName(SERIALIZED_NAME_IS_DERIVED)
  private Boolean isDerived;

  public static final String SERIALIZED_NAME_BASE_CURRENCY = "baseCurrency";
  @SerializedName(SERIALIZED_NAME_BASE_CURRENCY)
  private String baseCurrency;

  public static final String SERIALIZED_NAME_PROPERTIES = "properties";
  @SerializedName(SERIALIZED_NAME_PROPERTIES)
  private Map<String, Property> properties;

  public static final String SERIALIZED_NAME_RELATIONSHIPS = "relationships";
  @SerializedName(SERIALIZED_NAME_RELATIONSHIPS)
  private List<Relationship> relationships;

  public static final String SERIALIZED_NAME_INSTRUMENT_SCOPES = "instrumentScopes";
  @SerializedName(SERIALIZED_NAME_INSTRUMENT_SCOPES)
  private List<String> instrumentScopes;

  /**
   * . The available values are: Default, AverageCost, FirstInFirstOut, LastInFirstOut, HighestCostFirst, LowestCostFirst
   */
  @JsonAdapter(AccountingMethodEnum.Adapter.class)
  public enum AccountingMethodEnum {
    DEFAULT("Default"),
    
    AVERAGECOST("AverageCost"),
    
    FIRSTINFIRSTOUT("FirstInFirstOut"),
    
    LASTINFIRSTOUT("LastInFirstOut"),
    
    HIGHESTCOSTFIRST("HighestCostFirst"),
    
    LOWESTCOSTFIRST("LowestCostFirst");

    private String value;

    AccountingMethodEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AccountingMethodEnum fromValue(String value) {
      for (AccountingMethodEnum b : AccountingMethodEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AccountingMethodEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AccountingMethodEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AccountingMethodEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AccountingMethodEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_ACCOUNTING_METHOD = "accountingMethod";
  @SerializedName(SERIALIZED_NAME_ACCOUNTING_METHOD)
  private AccountingMethodEnum accountingMethod;

  public static final String SERIALIZED_NAME_AMORTISATION_METHOD = "amortisationMethod";
  @SerializedName(SERIALIZED_NAME_AMORTISATION_METHOD)
  private String amortisationMethod;

  public static final String SERIALIZED_NAME_TRANSACTION_TYPE_SCOPE = "transactionTypeScope";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_TYPE_SCOPE)
  private String transactionTypeScope;

  public static final String SERIALIZED_NAME_CASH_GAIN_LOSS_CALCULATION_DATE = "cashGainLossCalculationDate";
  @SerializedName(SERIALIZED_NAME_CASH_GAIN_LOSS_CALCULATION_DATE)
  private String cashGainLossCalculationDate;

  public static final String SERIALIZED_NAME_LINKS = "links";
  @SerializedName(SERIALIZED_NAME_LINKS)
  private List<Link> links;

  public Portfolio() {
  }

  public Portfolio href(URI href) {
    
    this.href = href;
    return this;
  }

   /**
   * The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.
   * @return href
  **/
  @jakarta.annotation.Nullable
  public URI getHref() {
    return href;
  }


  public void setHref(URI href) {
    this.href = href;
  }


  public Portfolio id(ResourceId id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @jakarta.annotation.Nonnull
  public ResourceId getId() {
    return id;
  }


  public void setId(ResourceId id) {
    this.id = id;
  }


  public Portfolio type(TypeEnum type) {
    
    this.type = type;
    return this;
  }

   /**
   * The type of the portfolio. The available values are: Transaction, Reference, DerivedTransaction
   * @return type
  **/
  @jakarta.annotation.Nonnull
  public TypeEnum getType() {
    return type;
  }


  public void setType(TypeEnum type) {
    this.type = type;
  }


  public Portfolio displayName(String displayName) {
    
    this.displayName = displayName;
    return this;
  }

   /**
   * The name of the portfolio.
   * @return displayName
  **/
  @jakarta.annotation.Nonnull
  public String getDisplayName() {
    return displayName;
  }


  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public Portfolio description(String description) {
    
    this.description = description;
    return this;
  }

   /**
   * The long form description of the portfolio.
   * @return description
  **/
  @jakarta.annotation.Nullable
  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    this.description = description;
  }


  public Portfolio created(OffsetDateTime created) {
    
    this.created = created;
    return this;
  }

   /**
   * The effective datetime at which the portfolio was created. No transactions or constituents can be added to the portfolio before this date.
   * @return created
  **/
  @jakarta.annotation.Nonnull
  public OffsetDateTime getCreated() {
    return created;
  }


  public void setCreated(OffsetDateTime created) {
    this.created = created;
  }


  public Portfolio parentPortfolioId(ResourceId parentPortfolioId) {
    
    this.parentPortfolioId = parentPortfolioId;
    return this;
  }

   /**
   * Get parentPortfolioId
   * @return parentPortfolioId
  **/
  @jakarta.annotation.Nullable
  public ResourceId getParentPortfolioId() {
    return parentPortfolioId;
  }


  public void setParentPortfolioId(ResourceId parentPortfolioId) {
    this.parentPortfolioId = parentPortfolioId;
  }


  public Portfolio version(Version version) {
    
    this.version = version;
    return this;
  }

   /**
   * Get version
   * @return version
  **/
  @jakarta.annotation.Nullable
  public Version getVersion() {
    return version;
  }


  public void setVersion(Version version) {
    this.version = version;
  }


  public Portfolio isDerived(Boolean isDerived) {
    
    this.isDerived = isDerived;
    return this;
  }

   /**
   * Whether or not this is a derived portfolio.
   * @return isDerived
  **/
  @jakarta.annotation.Nullable
  public Boolean getIsDerived() {
    return isDerived;
  }


  public void setIsDerived(Boolean isDerived) {
    this.isDerived = isDerived;
  }


  public Portfolio baseCurrency(String baseCurrency) {
    
    this.baseCurrency = baseCurrency;
    return this;
  }

   /**
   * The base currency of the portfolio.
   * @return baseCurrency
  **/
  @jakarta.annotation.Nullable
  public String getBaseCurrency() {
    return baseCurrency;
  }


  public void setBaseCurrency(String baseCurrency) {
    this.baseCurrency = baseCurrency;
  }


  public Portfolio properties(Map<String, Property> properties) {
    
    this.properties = properties;
    return this;
  }

  public Portfolio putPropertiesItem(String key, Property propertiesItem) {
    if (this.properties == null) {
      this.properties = new HashMap<>();
    }
    this.properties.put(key, propertiesItem);
    return this;
  }

   /**
   * The requested portfolio properties. These will be from the &#39;Portfolio&#39; domain.
   * @return properties
  **/
  @jakarta.annotation.Nullable
  public Map<String, Property> getProperties() {
    return properties;
  }


  public void setProperties(Map<String, Property> properties) {
    this.properties = properties;
  }


  public Portfolio relationships(List<Relationship> relationships) {
    
    this.relationships = relationships;
    return this;
  }

  public Portfolio addRelationshipsItem(Relationship relationshipsItem) {
    if (this.relationships == null) {
      this.relationships = new ArrayList<>();
    }
    this.relationships.add(relationshipsItem);
    return this;
  }

   /**
   * A set of relationships associated to the portfolio.
   * @return relationships
  **/
  @jakarta.annotation.Nullable
  public List<Relationship> getRelationships() {
    return relationships;
  }


  public void setRelationships(List<Relationship> relationships) {
    this.relationships = relationships;
  }


  public Portfolio instrumentScopes(List<String> instrumentScopes) {
    
    this.instrumentScopes = instrumentScopes;
    return this;
  }

  public Portfolio addInstrumentScopesItem(String instrumentScopesItem) {
    if (this.instrumentScopes == null) {
      this.instrumentScopes = new ArrayList<>();
    }
    this.instrumentScopes.add(instrumentScopesItem);
    return this;
  }

   /**
   * The instrument scope resolution strategy of this portfolio.
   * @return instrumentScopes
  **/
  @jakarta.annotation.Nullable
  public List<String> getInstrumentScopes() {
    return instrumentScopes;
  }


  public void setInstrumentScopes(List<String> instrumentScopes) {
    this.instrumentScopes = instrumentScopes;
  }


  public Portfolio accountingMethod(AccountingMethodEnum accountingMethod) {
    
    this.accountingMethod = accountingMethod;
    return this;
  }

   /**
   * . The available values are: Default, AverageCost, FirstInFirstOut, LastInFirstOut, HighestCostFirst, LowestCostFirst
   * @return accountingMethod
  **/
  @jakarta.annotation.Nullable
  public AccountingMethodEnum getAccountingMethod() {
    return accountingMethod;
  }


  public void setAccountingMethod(AccountingMethodEnum accountingMethod) {
    this.accountingMethod = accountingMethod;
  }


  public Portfolio amortisationMethod(String amortisationMethod) {
    
    this.amortisationMethod = amortisationMethod;
    return this;
  }

   /**
   * The amortisation method the portfolio is using in the calculation. This can be &#39;NoAmortisation&#39;, &#39;StraightLine&#39; or &#39;EffectiveYield&#39;.
   * @return amortisationMethod
  **/
  @jakarta.annotation.Nullable
  public String getAmortisationMethod() {
    return amortisationMethod;
  }


  public void setAmortisationMethod(String amortisationMethod) {
    this.amortisationMethod = amortisationMethod;
  }


  public Portfolio transactionTypeScope(String transactionTypeScope) {
    
    this.transactionTypeScope = transactionTypeScope;
    return this;
  }

   /**
   * The scope of the transaction types.
   * @return transactionTypeScope
  **/
  @jakarta.annotation.Nullable
  public String getTransactionTypeScope() {
    return transactionTypeScope;
  }


  public void setTransactionTypeScope(String transactionTypeScope) {
    this.transactionTypeScope = transactionTypeScope;
  }


  public Portfolio cashGainLossCalculationDate(String cashGainLossCalculationDate) {
    
    this.cashGainLossCalculationDate = cashGainLossCalculationDate;
    return this;
  }

   /**
   * The scope of the transaction types.
   * @return cashGainLossCalculationDate
  **/
  @jakarta.annotation.Nullable
  public String getCashGainLossCalculationDate() {
    return cashGainLossCalculationDate;
  }


  public void setCashGainLossCalculationDate(String cashGainLossCalculationDate) {
    this.cashGainLossCalculationDate = cashGainLossCalculationDate;
  }


  public Portfolio links(List<Link> links) {
    
    this.links = links;
    return this;
  }

  public Portfolio addLinksItem(Link linksItem) {
    if (this.links == null) {
      this.links = new ArrayList<>();
    }
    this.links.add(linksItem);
    return this;
  }

   /**
   * Get links
   * @return links
  **/
  @jakarta.annotation.Nullable
  public List<Link> getLinks() {
    return links;
  }


  public void setLinks(List<Link> links) {
    this.links = links;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Portfolio portfolio = (Portfolio) o;
    return Objects.equals(this.href, portfolio.href) &&
        Objects.equals(this.id, portfolio.id) &&
        Objects.equals(this.type, portfolio.type) &&
        Objects.equals(this.displayName, portfolio.displayName) &&
        Objects.equals(this.description, portfolio.description) &&
        Objects.equals(this.created, portfolio.created) &&
        Objects.equals(this.parentPortfolioId, portfolio.parentPortfolioId) &&
        Objects.equals(this.version, portfolio.version) &&
        Objects.equals(this.isDerived, portfolio.isDerived) &&
        Objects.equals(this.baseCurrency, portfolio.baseCurrency) &&
        Objects.equals(this.properties, portfolio.properties) &&
        Objects.equals(this.relationships, portfolio.relationships) &&
        Objects.equals(this.instrumentScopes, portfolio.instrumentScopes) &&
        Objects.equals(this.accountingMethod, portfolio.accountingMethod) &&
        Objects.equals(this.amortisationMethod, portfolio.amortisationMethod) &&
        Objects.equals(this.transactionTypeScope, portfolio.transactionTypeScope) &&
        Objects.equals(this.cashGainLossCalculationDate, portfolio.cashGainLossCalculationDate) &&
        Objects.equals(this.links, portfolio.links);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(href, id, type, displayName, description, created, parentPortfolioId, version, isDerived, baseCurrency, properties, relationships, instrumentScopes, accountingMethod, amortisationMethod, transactionTypeScope, cashGainLossCalculationDate, links);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Portfolio {\n");
    sb.append("    href: ").append(toIndentedString(href)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    parentPortfolioId: ").append(toIndentedString(parentPortfolioId)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    isDerived: ").append(toIndentedString(isDerived)).append("\n");
    sb.append("    baseCurrency: ").append(toIndentedString(baseCurrency)).append("\n");
    sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
    sb.append("    relationships: ").append(toIndentedString(relationships)).append("\n");
    sb.append("    instrumentScopes: ").append(toIndentedString(instrumentScopes)).append("\n");
    sb.append("    accountingMethod: ").append(toIndentedString(accountingMethod)).append("\n");
    sb.append("    amortisationMethod: ").append(toIndentedString(amortisationMethod)).append("\n");
    sb.append("    transactionTypeScope: ").append(toIndentedString(transactionTypeScope)).append("\n");
    sb.append("    cashGainLossCalculationDate: ").append(toIndentedString(cashGainLossCalculationDate)).append("\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("href");
    openapiFields.add("id");
    openapiFields.add("type");
    openapiFields.add("displayName");
    openapiFields.add("description");
    openapiFields.add("created");
    openapiFields.add("parentPortfolioId");
    openapiFields.add("version");
    openapiFields.add("isDerived");
    openapiFields.add("baseCurrency");
    openapiFields.add("properties");
    openapiFields.add("relationships");
    openapiFields.add("instrumentScopes");
    openapiFields.add("accountingMethod");
    openapiFields.add("amortisationMethod");
    openapiFields.add("transactionTypeScope");
    openapiFields.add("cashGainLossCalculationDate");
    openapiFields.add("links");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("type");
    openapiRequiredFields.add("displayName");
    openapiRequiredFields.add("created");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to Portfolio
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Portfolio.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Portfolio is not found in the empty JSON string", Portfolio.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Portfolio.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("href") != null && !jsonObj.get("href").isJsonNull()) && !jsonObj.get("href").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `href` to be a primitive type in the JSON string but got `%s`", jsonObj.get("href").toString()));
      }
      // validate the required field `id`
      ResourceId.validateJsonElement(jsonObj.get("id"));
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if (!jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // validate the optional field `parentPortfolioId`
      if (jsonObj.get("parentPortfolioId") != null && !jsonObj.get("parentPortfolioId").isJsonNull()) {
        ResourceId.validateJsonElement(jsonObj.get("parentPortfolioId"));
      }
      // validate the optional field `version`
      if (jsonObj.get("version") != null && !jsonObj.get("version").isJsonNull()) {
        Version.validateJsonElement(jsonObj.get("version"));
      }
      if ((jsonObj.get("baseCurrency") != null && !jsonObj.get("baseCurrency").isJsonNull()) && !jsonObj.get("baseCurrency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `baseCurrency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("baseCurrency").toString()));
      }
      if (jsonObj.get("relationships") != null && !jsonObj.get("relationships").isJsonNull()) {
        JsonArray jsonArrayrelationships = jsonObj.getAsJsonArray("relationships");
        if (jsonArrayrelationships != null) {
          // ensure the json data is an array
          if (!jsonObj.get("relationships").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `relationships` to be an array in the JSON string but got `%s`", jsonObj.get("relationships").toString()));
          }

          // validate the optional field `relationships` (array)
          for (int i = 0; i < jsonArrayrelationships.size(); i++) {
            Relationship.validateJsonElement(jsonArrayrelationships.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("instrumentScopes") != null && !jsonObj.get("instrumentScopes").isJsonNull() && !jsonObj.get("instrumentScopes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `instrumentScopes` to be an array in the JSON string but got `%s`", jsonObj.get("instrumentScopes").toString()));
      }
      if ((jsonObj.get("accountingMethod") != null && !jsonObj.get("accountingMethod").isJsonNull()) && !jsonObj.get("accountingMethod").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountingMethod` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountingMethod").toString()));
      }
      if ((jsonObj.get("amortisationMethod") != null && !jsonObj.get("amortisationMethod").isJsonNull()) && !jsonObj.get("amortisationMethod").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `amortisationMethod` to be a primitive type in the JSON string but got `%s`", jsonObj.get("amortisationMethod").toString()));
      }
      if ((jsonObj.get("transactionTypeScope") != null && !jsonObj.get("transactionTypeScope").isJsonNull()) && !jsonObj.get("transactionTypeScope").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transactionTypeScope` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transactionTypeScope").toString()));
      }
      if ((jsonObj.get("cashGainLossCalculationDate") != null && !jsonObj.get("cashGainLossCalculationDate").isJsonNull()) && !jsonObj.get("cashGainLossCalculationDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cashGainLossCalculationDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cashGainLossCalculationDate").toString()));
      }
      if (jsonObj.get("links") != null && !jsonObj.get("links").isJsonNull()) {
        JsonArray jsonArraylinks = jsonObj.getAsJsonArray("links");
        if (jsonArraylinks != null) {
          // ensure the json data is an array
          if (!jsonObj.get("links").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `links` to be an array in the JSON string but got `%s`", jsonObj.get("links").toString()));
          }

          // validate the optional field `links` (array)
          for (int i = 0; i < jsonArraylinks.size(); i++) {
            Link.validateJsonElement(jsonArraylinks.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Portfolio.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Portfolio' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Portfolio> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Portfolio.class));

       return (TypeAdapter<T>) new TypeAdapter<Portfolio>() {
           @Override
           public void write(JsonWriter out, Portfolio value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Portfolio read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Portfolio given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Portfolio
  * @throws IOException if the JSON string is invalid with respect to Portfolio
  */
  public static Portfolio fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Portfolio.class);
  }

 /**
  * Convert an instance of Portfolio to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
