/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import java.util.Arrays;
import com.finbourne.lusid.model.MappedString;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * An individual mapping rule, for mapping between a left and right field/property.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class MappingRule {
  public static final String SERIALIZED_NAME_LEFT = "left";
  @SerializedName(SERIALIZED_NAME_LEFT)
  private String left;

  public static final String SERIALIZED_NAME_RIGHT = "right";
  @SerializedName(SERIALIZED_NAME_RIGHT)
  private String right;

  public static final String SERIALIZED_NAME_COMPARISON_TYPE = "comparisonType";
  @SerializedName(SERIALIZED_NAME_COMPARISON_TYPE)
  private String comparisonType;

  public static final String SERIALIZED_NAME_COMPARISON_VALUE = "comparisonValue";
  @SerializedName(SERIALIZED_NAME_COMPARISON_VALUE)
  private java.math.BigDecimal comparisonValue;

  public static final String SERIALIZED_NAME_WEIGHT = "weight";
  @SerializedName(SERIALIZED_NAME_WEIGHT)
  private java.math.BigDecimal weight;

  public static final String SERIALIZED_NAME_MAPPED_STRINGS = "mappedStrings";
  @SerializedName(SERIALIZED_NAME_MAPPED_STRINGS)
  private List<MappedString> mappedStrings;

  public static final String SERIALIZED_NAME_IS_CASE_SENSITIVE = "isCaseSensitive";
  @SerializedName(SERIALIZED_NAME_IS_CASE_SENSITIVE)
  private Boolean isCaseSensitive;

  public MappingRule() {
  }

  public MappingRule left(String left) {
    
    this.left = left;
    return this;
  }

   /**
   * The name of the field/property in the left resource (e.g. a transaction)
   * @return left
  **/
  @javax.annotation.Nullable
  public String getLeft() {
    return left;
  }


  public void setLeft(String left) {
    this.left = left;
  }


  public MappingRule right(String right) {
    
    this.right = right;
    return this;
  }

   /**
   * The name of the field/property in the right resource (e.g. a transaction)
   * @return right
  **/
  @javax.annotation.Nullable
  public String getRight() {
    return right;
  }


  public void setRight(String right) {
    this.right = right;
  }


  public MappingRule comparisonType(String comparisonType) {
    
    this.comparisonType = comparisonType;
    return this;
  }

   /**
   * The type of comparison to be performed
   * @return comparisonType
  **/
  @javax.annotation.Nullable
  public String getComparisonType() {
    return comparisonType;
  }


  public void setComparisonType(String comparisonType) {
    this.comparisonType = comparisonType;
  }


  public MappingRule comparisonValue(java.math.BigDecimal comparisonValue) {
    
    this.comparisonValue = comparisonValue;
    return this;
  }

   /**
   * The (optional) value used with Finbourne.WebApi.Interface.Dto.Mappings.MappingRule.ComparisonType
   * @return comparisonValue
  **/
  @javax.annotation.Nullable
  public java.math.BigDecimal getComparisonValue() {
    return comparisonValue;
  }


  public void setComparisonValue(java.math.BigDecimal comparisonValue) {
    this.comparisonValue = comparisonValue;
  }


  public MappingRule weight(java.math.BigDecimal weight) {
    
    this.weight = weight;
    return this;
  }

   /**
   * A factor used to influence the importance of this item.
   * @return weight
  **/
  @javax.annotation.Nullable
  public java.math.BigDecimal getWeight() {
    return weight;
  }


  public void setWeight(java.math.BigDecimal weight) {
    this.weight = weight;
  }


  public MappingRule mappedStrings(List<MappedString> mappedStrings) {
    
    this.mappedStrings = mappedStrings;
    return this;
  }

  public MappingRule addMappedStringsItem(MappedString mappedStringsItem) {
    if (this.mappedStrings == null) {
      this.mappedStrings = new ArrayList<>();
    }
    this.mappedStrings.add(mappedStringsItem);
    return this;
  }

   /**
   * The (optional) value used to map string values.
   * @return mappedStrings
  **/
  @javax.annotation.Nullable
  public List<MappedString> getMappedStrings() {
    return mappedStrings;
  }


  public void setMappedStrings(List<MappedString> mappedStrings) {
    this.mappedStrings = mappedStrings;
  }


  public MappingRule isCaseSensitive(Boolean isCaseSensitive) {
    
    this.isCaseSensitive = isCaseSensitive;
    return this;
  }

   /**
   * Should string comparisons take case into account, defaults to &#x60;false&#x60;.
   * @return isCaseSensitive
  **/
  @javax.annotation.Nullable
  public Boolean getIsCaseSensitive() {
    return isCaseSensitive;
  }


  public void setIsCaseSensitive(Boolean isCaseSensitive) {
    this.isCaseSensitive = isCaseSensitive;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MappingRule mappingRule = (MappingRule) o;
    return Objects.equals(this.left, mappingRule.left) &&
        Objects.equals(this.right, mappingRule.right) &&
        Objects.equals(this.comparisonType, mappingRule.comparisonType) &&
        (this.comparisonValue.compareTo(mappingRule.getComparisonValue()) == 0) &&
        (this.weight.compareTo(mappingRule.getWeight()) == 0) &&
        Objects.equals(this.mappedStrings, mappingRule.mappedStrings) &&
        Objects.equals(this.isCaseSensitive, mappingRule.isCaseSensitive);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(left, right, comparisonType, comparisonValue, weight, mappedStrings, isCaseSensitive);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MappingRule {\n");
    sb.append("    left: ").append(toIndentedString(left)).append("\n");
    sb.append("    right: ").append(toIndentedString(right)).append("\n");
    sb.append("    comparisonType: ").append(toIndentedString(comparisonType)).append("\n");
    sb.append("    comparisonValue: ").append(toIndentedString(comparisonValue)).append("\n");
    sb.append("    weight: ").append(toIndentedString(weight)).append("\n");
    sb.append("    mappedStrings: ").append(toIndentedString(mappedStrings)).append("\n");
    sb.append("    isCaseSensitive: ").append(toIndentedString(isCaseSensitive)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("left");
    openapiFields.add("right");
    openapiFields.add("comparisonType");
    openapiFields.add("comparisonValue");
    openapiFields.add("weight");
    openapiFields.add("mappedStrings");
    openapiFields.add("isCaseSensitive");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to MappingRule
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!MappingRule.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MappingRule is not found in the empty JSON string", MappingRule.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!MappingRule.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MappingRule` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("left") != null && !jsonObj.get("left").isJsonNull()) && !jsonObj.get("left").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `left` to be a primitive type in the JSON string but got `%s`", jsonObj.get("left").toString()));
      }
      if ((jsonObj.get("right") != null && !jsonObj.get("right").isJsonNull()) && !jsonObj.get("right").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `right` to be a primitive type in the JSON string but got `%s`", jsonObj.get("right").toString()));
      }
      if ((jsonObj.get("comparisonType") != null && !jsonObj.get("comparisonType").isJsonNull()) && !jsonObj.get("comparisonType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `comparisonType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("comparisonType").toString()));
      }
      if (jsonObj.get("mappedStrings") != null && !jsonObj.get("mappedStrings").isJsonNull()) {
        JsonArray jsonArraymappedStrings = jsonObj.getAsJsonArray("mappedStrings");
        if (jsonArraymappedStrings != null) {
          // ensure the json data is an array
          if (!jsonObj.get("mappedStrings").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `mappedStrings` to be an array in the JSON string but got `%s`", jsonObj.get("mappedStrings").toString()));
          }

          // validate the optional field `mappedStrings` (array)
          for (int i = 0; i < jsonArraymappedStrings.size(); i++) {
            MappedString.validateJsonObject(jsonArraymappedStrings.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MappingRule.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MappingRule' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MappingRule> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MappingRule.class));

       return (TypeAdapter<T>) new TypeAdapter<MappingRule>() {
           @Override
           public void write(JsonWriter out, MappingRule value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MappingRule read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of MappingRule given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of MappingRule
  * @throws IOException if the JSON string is invalid with respect to MappingRule
  */
  public static MappingRule fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MappingRule.class);
  }

 /**
  * Convert an instance of MappingRule to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
