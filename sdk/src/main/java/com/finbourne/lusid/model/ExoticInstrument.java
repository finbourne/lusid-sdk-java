/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import com.finbourne.lusid.model.InstrumentDefinitionFormat;
import com.finbourne.lusid.model.LusidInstrument;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * LUSID representation of a generic OTC Exotic Instrument that is not fully defined within other LUSID models.
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ExoticInstrument extends LusidInstrument {
  public static final String SERIALIZED_NAME_INSTRUMENT_FORMAT = "instrumentFormat";
  @SerializedName(SERIALIZED_NAME_INSTRUMENT_FORMAT)
  private InstrumentDefinitionFormat instrumentFormat;

  public static final String SERIALIZED_NAME_CONTENT = "content";
  @SerializedName(SERIALIZED_NAME_CONTENT)
  private String content;

  public ExoticInstrument() {
    // this.instrumentType = this.getClass().getSimpleName();
  }

  public ExoticInstrument instrumentFormat(InstrumentDefinitionFormat instrumentFormat) {
    
    this.instrumentFormat = instrumentFormat;
    return this;
  }

   /**
   * Get instrumentFormat
   * @return instrumentFormat
  **/
  @jakarta.annotation.Nonnull
  public InstrumentDefinitionFormat getInstrumentFormat() {
    return instrumentFormat;
  }


  public void setInstrumentFormat(InstrumentDefinitionFormat instrumentFormat) {
    this.instrumentFormat = instrumentFormat;
  }


  public ExoticInstrument content(String content) {
    
    this.content = content;
    return this;
  }

   /**
   * The original document received into the system. This format could potentially be anything though is most likely to be either Json or Xml. In the case where no other  interface is supported it is possible to fall back onto this.  For example, a trade from an external client system. This may be recognized internally by Lusid or simply passed through to another vendor system.
   * @return content
  **/
  @jakarta.annotation.Nonnull
  public String getContent() {
    return content;
  }


  public void setContent(String content) {
    this.content = content;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExoticInstrument exoticInstrument = (ExoticInstrument) o;
    return Objects.equals(this.instrumentFormat, exoticInstrument.instrumentFormat) &&
        Objects.equals(this.content, exoticInstrument.content) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(instrumentFormat, content, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExoticInstrument {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    instrumentFormat: ").append(toIndentedString(instrumentFormat)).append("\n");
    sb.append("    content: ").append(toIndentedString(content)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("instrumentType");
    openapiFields.add("instrumentFormat");
    openapiFields.add("content");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("instrumentFormat");
    openapiRequiredFields.add("content");
    openapiRequiredFields.add("instrumentType");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ExoticInstrument
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ExoticInstrument.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ExoticInstrument is not found in the empty JSON string", ExoticInstrument.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ExoticInstrument.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ExoticInstrument.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ExoticInstrument' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ExoticInstrument> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ExoticInstrument.class));

       return (TypeAdapter<T>) new TypeAdapter<ExoticInstrument>() {
           @Override
           public void write(JsonWriter out, ExoticInstrument value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ExoticInstrument read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ExoticInstrument given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ExoticInstrument
  * @throws IOException if the JSON string is invalid with respect to ExoticInstrument
  */
  public static ExoticInstrument fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ExoticInstrument.class);
  }

 /**
  * Convert an instance of ExoticInstrument to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
