/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import com.finbourne.lusid.model.AddressDefinition;
import com.finbourne.lusid.model.FieldSchema;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * The shape and type of the returned data. The AddressSchema gives information about the requested keys, including the return type, links to further documentation, lifecycle status and removal date if they are deprecated.   Note: the NodeValueSchema and PropertySchema fields have been deprecated. Please use the AddressSchema instead.
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ResultDataSchema {
  public static final String SERIALIZED_NAME_NODE_VALUE_SCHEMA = "nodeValueSchema";
  @SerializedName(SERIALIZED_NAME_NODE_VALUE_SCHEMA)
  private Map<String, FieldSchema> nodeValueSchema;

  public static final String SERIALIZED_NAME_PROPERTY_SCHEMA = "propertySchema";
  @SerializedName(SERIALIZED_NAME_PROPERTY_SCHEMA)
  private Map<String, FieldSchema> propertySchema;

  public static final String SERIALIZED_NAME_ADDRESS_SCHEMA = "addressSchema";
  @SerializedName(SERIALIZED_NAME_ADDRESS_SCHEMA)
  private Map<String, AddressDefinition> addressSchema;

  public ResultDataSchema() {
  }

  public ResultDataSchema nodeValueSchema(Map<String, FieldSchema> nodeValueSchema) {
    
    this.nodeValueSchema = nodeValueSchema;
    return this;
  }

  public ResultDataSchema putNodeValueSchemaItem(String key, FieldSchema nodeValueSchemaItem) {
    if (this.nodeValueSchema == null) {
      this.nodeValueSchema = new HashMap<>();
    }
    this.nodeValueSchema.put(key, nodeValueSchemaItem);
    return this;
  }

   /**
   * This has been deprecated. Please use AddressSchema instead.
   * @return nodeValueSchema
  **/
  @jakarta.annotation.Nullable
  public Map<String, FieldSchema> getNodeValueSchema() {
    return nodeValueSchema;
  }


  public void setNodeValueSchema(Map<String, FieldSchema> nodeValueSchema) {
    this.nodeValueSchema = nodeValueSchema;
  }


  public ResultDataSchema propertySchema(Map<String, FieldSchema> propertySchema) {
    
    this.propertySchema = propertySchema;
    return this;
  }

  public ResultDataSchema putPropertySchemaItem(String key, FieldSchema propertySchemaItem) {
    if (this.propertySchema == null) {
      this.propertySchema = new HashMap<>();
    }
    this.propertySchema.put(key, propertySchemaItem);
    return this;
  }

   /**
   * This has been deprecated. Please use AddressSchema instead.
   * @return propertySchema
  **/
  @jakarta.annotation.Nullable
  public Map<String, FieldSchema> getPropertySchema() {
    return propertySchema;
  }


  public void setPropertySchema(Map<String, FieldSchema> propertySchema) {
    this.propertySchema = propertySchema;
  }


  public ResultDataSchema addressSchema(Map<String, AddressDefinition> addressSchema) {
    
    this.addressSchema = addressSchema;
    return this;
  }

  public ResultDataSchema putAddressSchemaItem(String key, AddressDefinition addressSchemaItem) {
    if (this.addressSchema == null) {
      this.addressSchema = new HashMap<>();
    }
    this.addressSchema.put(key, addressSchemaItem);
    return this;
  }

   /**
   * Get addressSchema
   * @return addressSchema
  **/
  @jakarta.annotation.Nullable
  public Map<String, AddressDefinition> getAddressSchema() {
    return addressSchema;
  }


  public void setAddressSchema(Map<String, AddressDefinition> addressSchema) {
    this.addressSchema = addressSchema;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ResultDataSchema resultDataSchema = (ResultDataSchema) o;
    return Objects.equals(this.nodeValueSchema, resultDataSchema.nodeValueSchema) &&
        Objects.equals(this.propertySchema, resultDataSchema.propertySchema) &&
        Objects.equals(this.addressSchema, resultDataSchema.addressSchema);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(nodeValueSchema, propertySchema, addressSchema);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ResultDataSchema {\n");
    sb.append("    nodeValueSchema: ").append(toIndentedString(nodeValueSchema)).append("\n");
    sb.append("    propertySchema: ").append(toIndentedString(propertySchema)).append("\n");
    sb.append("    addressSchema: ").append(toIndentedString(addressSchema)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("nodeValueSchema");
    openapiFields.add("propertySchema");
    openapiFields.add("addressSchema");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ResultDataSchema
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ResultDataSchema.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ResultDataSchema is not found in the empty JSON string", ResultDataSchema.openapiRequiredFields.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ResultDataSchema.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ResultDataSchema' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ResultDataSchema> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ResultDataSchema.class));

       return (TypeAdapter<T>) new TypeAdapter<ResultDataSchema>() {
           @Override
           public void write(JsonWriter out, ResultDataSchema value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ResultDataSchema read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ResultDataSchema given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ResultDataSchema
  * @throws IOException if the JSON string is invalid with respect to ResultDataSchema
  */
  public static ResultDataSchema fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ResultDataSchema.class);
  }

 /**
  * Convert an instance of ResultDataSchema to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
