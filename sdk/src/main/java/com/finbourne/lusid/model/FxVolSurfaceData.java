/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import com.finbourne.lusid.model.ComplexMarketData;
import com.finbourne.lusid.model.LusidInstrument;
import com.finbourne.lusid.model.MarketQuote;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * Market Data for an fx vol surface, represented by a list of fx options and corresponding market quotes
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class FxVolSurfaceData extends ComplexMarketData {
  public static final String SERIALIZED_NAME_BASE_DATE = "baseDate";
  @SerializedName(SERIALIZED_NAME_BASE_DATE)
  private OffsetDateTime baseDate;

  public static final String SERIALIZED_NAME_INSTRUMENTS = "instruments";
  @SerializedName(SERIALIZED_NAME_INSTRUMENTS)
  private List<LusidInstrument> instruments = new ArrayList<>();

  public static final String SERIALIZED_NAME_QUOTES = "quotes";
  @SerializedName(SERIALIZED_NAME_QUOTES)
  private List<MarketQuote> quotes = new ArrayList<>();

  public static final String SERIALIZED_NAME_LINEAGE = "lineage";
  @SerializedName(SERIALIZED_NAME_LINEAGE)
  private String lineage;

  public FxVolSurfaceData() {
    // this.marketDataType = this.getClass().getSimpleName();
  }

  public FxVolSurfaceData baseDate(OffsetDateTime baseDate) {
    
    this.baseDate = baseDate;
    return this;
  }

   /**
   * Base date of the surface
   * @return baseDate
  **/
  @jakarta.annotation.Nonnull
  public OffsetDateTime getBaseDate() {
    return baseDate;
  }


  public void setBaseDate(OffsetDateTime baseDate) {
    this.baseDate = baseDate;
  }


  public FxVolSurfaceData instruments(List<LusidInstrument> instruments) {
    
    this.instruments = instruments;
    return this;
  }

  public FxVolSurfaceData addInstrumentsItem(LusidInstrument instrumentsItem) {
    if (this.instruments == null) {
      this.instruments = new ArrayList<>();
    }
    this.instruments.add(instrumentsItem);
    return this;
  }

   /**
   * The set of instruments that define the surface.
   * @return instruments
  **/
  @jakarta.annotation.Nonnull
  public List<LusidInstrument> getInstruments() {
    return instruments;
  }


  public void setInstruments(List<LusidInstrument> instruments) {
    this.instruments = instruments;
  }


  public FxVolSurfaceData quotes(List<MarketQuote> quotes) {
    
    this.quotes = quotes;
    return this;
  }

  public FxVolSurfaceData addQuotesItem(MarketQuote quotesItem) {
    if (this.quotes == null) {
      this.quotes = new ArrayList<>();
    }
    this.quotes.add(quotesItem);
    return this;
  }

   /**
   * The set of market quotes that define the surface, in NormalVol or LogNormalVol terms.
   * @return quotes
  **/
  @jakarta.annotation.Nonnull
  public List<MarketQuote> getQuotes() {
    return quotes;
  }


  public void setQuotes(List<MarketQuote> quotes) {
    this.quotes = quotes;
  }


  public FxVolSurfaceData lineage(String lineage) {
    
    this.lineage = lineage;
    return this;
  }

   /**
   * Description of the complex market data&#39;s lineage e.g. &#39;FundAccountant_GreenQuality&#39;.
   * @return lineage
  **/
  @jakarta.annotation.Nullable
  public String getLineage() {
    return lineage;
  }


  public void setLineage(String lineage) {
    this.lineage = lineage;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FxVolSurfaceData fxVolSurfaceData = (FxVolSurfaceData) o;
    return Objects.equals(this.baseDate, fxVolSurfaceData.baseDate) &&
        Objects.equals(this.instruments, fxVolSurfaceData.instruments) &&
        Objects.equals(this.quotes, fxVolSurfaceData.quotes) &&
        Objects.equals(this.lineage, fxVolSurfaceData.lineage) &&
        super.equals(o);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(baseDate, instruments, quotes, lineage, super.hashCode());
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FxVolSurfaceData {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    baseDate: ").append(toIndentedString(baseDate)).append("\n");
    sb.append("    instruments: ").append(toIndentedString(instruments)).append("\n");
    sb.append("    quotes: ").append(toIndentedString(quotes)).append("\n");
    sb.append("    lineage: ").append(toIndentedString(lineage)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("marketDataType");
    openapiFields.add("baseDate");
    openapiFields.add("instruments");
    openapiFields.add("quotes");
    openapiFields.add("lineage");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("baseDate");
    openapiRequiredFields.add("instruments");
    openapiRequiredFields.add("quotes");
    openapiRequiredFields.add("marketDataType");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to FxVolSurfaceData
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!FxVolSurfaceData.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FxVolSurfaceData is not found in the empty JSON string", FxVolSurfaceData.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!FxVolSurfaceData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FxVolSurfaceData` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : FxVolSurfaceData.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FxVolSurfaceData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FxVolSurfaceData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FxVolSurfaceData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FxVolSurfaceData.class));

       return (TypeAdapter<T>) new TypeAdapter<FxVolSurfaceData>() {
           @Override
           public void write(JsonWriter out, FxVolSurfaceData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FxVolSurfaceData read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of FxVolSurfaceData given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of FxVolSurfaceData
  * @throws IOException if the JSON string is invalid with respect to FxVolSurfaceData
  */
  public static FxVolSurfaceData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FxVolSurfaceData.class);
  }

 /**
  * Convert an instance of FxVolSurfaceData to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
