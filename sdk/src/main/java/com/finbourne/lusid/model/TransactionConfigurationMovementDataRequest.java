/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import com.finbourne.lusid.model.PerpetualProperty;
import com.finbourne.lusid.model.TransactionPropertyMappingRequest;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * TransactionConfigurationMovementDataRequest
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class TransactionConfigurationMovementDataRequest {
  /**
   * . The available values are: Settlement, Traded, StockMovement, FutureCash, Commitment, Receivable, CashSettlement, CashForward, CashCommitment, CashReceivable, Accrual, CashAccrual, ForwardFx, CashFxForward, Carry, CarryAsPnl, VariationMargin, Capital, Fee, LimitAdjustment, BalanceAdjustment, Deferred, CashDeferred
   */
  @JsonAdapter(MovementTypesEnum.Adapter.class)
  public enum MovementTypesEnum {
    SETTLEMENT("Settlement"),
    
    TRADED("Traded"),
    
    STOCKMOVEMENT("StockMovement"),
    
    FUTURECASH("FutureCash"),
    
    COMMITMENT("Commitment"),
    
    RECEIVABLE("Receivable"),
    
    CASHSETTLEMENT("CashSettlement"),
    
    CASHFORWARD("CashForward"),
    
    CASHCOMMITMENT("CashCommitment"),
    
    CASHRECEIVABLE("CashReceivable"),
    
    ACCRUAL("Accrual"),
    
    CASHACCRUAL("CashAccrual"),
    
    FORWARDFX("ForwardFx"),
    
    CASHFXFORWARD("CashFxForward"),
    
    CARRY("Carry"),
    
    CARRYASPNL("CarryAsPnl"),
    
    VARIATIONMARGIN("VariationMargin"),
    
    CAPITAL("Capital"),
    
    FEE("Fee"),
    
    LIMITADJUSTMENT("LimitAdjustment"),
    
    BALANCEADJUSTMENT("BalanceAdjustment"),
    
    DEFERRED("Deferred"),
    
    CASHDEFERRED("CashDeferred");

    private String value;

    MovementTypesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MovementTypesEnum fromValue(String value) {
      for (MovementTypesEnum b : MovementTypesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MovementTypesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MovementTypesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MovementTypesEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MovementTypesEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_MOVEMENT_TYPES = "movementTypes";
  @SerializedName(SERIALIZED_NAME_MOVEMENT_TYPES)
  private MovementTypesEnum movementTypes;

  public static final String SERIALIZED_NAME_SIDE = "side";
  @SerializedName(SERIALIZED_NAME_SIDE)
  private String side;

  public static final String SERIALIZED_NAME_DIRECTION = "direction";
  @SerializedName(SERIALIZED_NAME_DIRECTION)
  private Integer direction;

  public static final String SERIALIZED_NAME_PROPERTIES = "properties";
  @SerializedName(SERIALIZED_NAME_PROPERTIES)
  private Map<String, PerpetualProperty> properties;

  public static final String SERIALIZED_NAME_MAPPINGS = "mappings";
  @SerializedName(SERIALIZED_NAME_MAPPINGS)
  private List<TransactionPropertyMappingRequest> mappings;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_MOVEMENT_OPTIONS = "movementOptions";
  @SerializedName(SERIALIZED_NAME_MOVEMENT_OPTIONS)
  private List<String> movementOptions;

  public TransactionConfigurationMovementDataRequest() {
  }

  public TransactionConfigurationMovementDataRequest movementTypes(MovementTypesEnum movementTypes) {
    
    this.movementTypes = movementTypes;
    return this;
  }

   /**
   * . The available values are: Settlement, Traded, StockMovement, FutureCash, Commitment, Receivable, CashSettlement, CashForward, CashCommitment, CashReceivable, Accrual, CashAccrual, ForwardFx, CashFxForward, Carry, CarryAsPnl, VariationMargin, Capital, Fee, LimitAdjustment, BalanceAdjustment, Deferred, CashDeferred
   * @return movementTypes
  **/
  @jakarta.annotation.Nonnull
  public MovementTypesEnum getMovementTypes() {
    return movementTypes;
  }


  public void setMovementTypes(MovementTypesEnum movementTypes) {
    this.movementTypes = movementTypes;
  }


  public TransactionConfigurationMovementDataRequest side(String side) {
    
    this.side = side;
    return this;
  }

   /**
   * The movement side
   * @return side
  **/
  @jakarta.annotation.Nonnull
  public String getSide() {
    return side;
  }


  public void setSide(String side) {
    this.side = side;
  }


  public TransactionConfigurationMovementDataRequest direction(Integer direction) {
    
    this.direction = direction;
    return this;
  }

   /**
   * The movement direction
   * @return direction
  **/
  @jakarta.annotation.Nonnull
  public Integer getDirection() {
    return direction;
  }


  public void setDirection(Integer direction) {
    this.direction = direction;
  }


  public TransactionConfigurationMovementDataRequest properties(Map<String, PerpetualProperty> properties) {
    
    this.properties = properties;
    return this;
  }

  public TransactionConfigurationMovementDataRequest putPropertiesItem(String key, PerpetualProperty propertiesItem) {
    if (this.properties == null) {
      this.properties = new HashMap<>();
    }
    this.properties.put(key, propertiesItem);
    return this;
  }

   /**
   * The properties associated with the underlying Movement.
   * @return properties
  **/
  @jakarta.annotation.Nullable
  public Map<String, PerpetualProperty> getProperties() {
    return properties;
  }


  public void setProperties(Map<String, PerpetualProperty> properties) {
    this.properties = properties;
  }


  public TransactionConfigurationMovementDataRequest mappings(List<TransactionPropertyMappingRequest> mappings) {
    
    this.mappings = mappings;
    return this;
  }

  public TransactionConfigurationMovementDataRequest addMappingsItem(TransactionPropertyMappingRequest mappingsItem) {
    if (this.mappings == null) {
      this.mappings = new ArrayList<>();
    }
    this.mappings.add(mappingsItem);
    return this;
  }

   /**
   * This allows you to map a transaction property to a property on the underlying holding.
   * @return mappings
  **/
  @jakarta.annotation.Nullable
  public List<TransactionPropertyMappingRequest> getMappings() {
    return mappings;
  }


  public void setMappings(List<TransactionPropertyMappingRequest> mappings) {
    this.mappings = mappings;
  }


  public TransactionConfigurationMovementDataRequest name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * The movement name (optional)
   * @return name
  **/
  @jakarta.annotation.Nullable
  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public TransactionConfigurationMovementDataRequest movementOptions(List<String> movementOptions) {
    
    this.movementOptions = movementOptions;
    return this;
  }

  public TransactionConfigurationMovementDataRequest addMovementOptionsItem(String movementOptionsItem) {
    if (this.movementOptions == null) {
      this.movementOptions = new ArrayList<>();
    }
    this.movementOptions.add(movementOptionsItem);
    return this;
  }

   /**
   * Allows extra specifications for the movement. The options currently available are &#39;DirectAdjustment&#39;, &#39;IncludesTradedInterest&#39;, &#39;Virtual&#39; and &#39;Income&#39; (works only with the movement type &#39;StockMovement&#39;). A movement type of &#39;StockMovement&#39; with an option of &#39;DirectAdjusment&#39; will allow you to adjust the units of a holding without affecting its cost base. You will, therefore, be able to reflect the impact of a stock split by loading a Transaction.
   * @return movementOptions
  **/
  @jakarta.annotation.Nullable
  public List<String> getMovementOptions() {
    return movementOptions;
  }


  public void setMovementOptions(List<String> movementOptions) {
    this.movementOptions = movementOptions;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TransactionConfigurationMovementDataRequest transactionConfigurationMovementDataRequest = (TransactionConfigurationMovementDataRequest) o;
    return Objects.equals(this.movementTypes, transactionConfigurationMovementDataRequest.movementTypes) &&
        Objects.equals(this.side, transactionConfigurationMovementDataRequest.side) &&
        Objects.equals(this.direction, transactionConfigurationMovementDataRequest.direction) &&
        Objects.equals(this.properties, transactionConfigurationMovementDataRequest.properties) &&
        Objects.equals(this.mappings, transactionConfigurationMovementDataRequest.mappings) &&
        Objects.equals(this.name, transactionConfigurationMovementDataRequest.name) &&
        Objects.equals(this.movementOptions, transactionConfigurationMovementDataRequest.movementOptions);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(movementTypes, side, direction, properties, mappings, name, movementOptions);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TransactionConfigurationMovementDataRequest {\n");
    sb.append("    movementTypes: ").append(toIndentedString(movementTypes)).append("\n");
    sb.append("    side: ").append(toIndentedString(side)).append("\n");
    sb.append("    direction: ").append(toIndentedString(direction)).append("\n");
    sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
    sb.append("    mappings: ").append(toIndentedString(mappings)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    movementOptions: ").append(toIndentedString(movementOptions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("movementTypes");
    openapiFields.add("side");
    openapiFields.add("direction");
    openapiFields.add("properties");
    openapiFields.add("mappings");
    openapiFields.add("name");
    openapiFields.add("movementOptions");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("movementTypes");
    openapiRequiredFields.add("side");
    openapiRequiredFields.add("direction");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to TransactionConfigurationMovementDataRequest
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TransactionConfigurationMovementDataRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TransactionConfigurationMovementDataRequest is not found in the empty JSON string", TransactionConfigurationMovementDataRequest.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TransactionConfigurationMovementDataRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("movementTypes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `movementTypes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("movementTypes").toString()));
      }
      if (!jsonObj.get("side").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `side` to be a primitive type in the JSON string but got `%s`", jsonObj.get("side").toString()));
      }
      if (jsonObj.get("mappings") != null && !jsonObj.get("mappings").isJsonNull()) {
        JsonArray jsonArraymappings = jsonObj.getAsJsonArray("mappings");
        if (jsonArraymappings != null) {
          // ensure the json data is an array
          if (!jsonObj.get("mappings").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `mappings` to be an array in the JSON string but got `%s`", jsonObj.get("mappings").toString()));
          }

          // validate the optional field `mappings` (array)
          for (int i = 0; i < jsonArraymappings.size(); i++) {
            TransactionPropertyMappingRequest.validateJsonElement(jsonArraymappings.get(i));
          };
        }
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("movementOptions") != null && !jsonObj.get("movementOptions").isJsonNull() && !jsonObj.get("movementOptions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `movementOptions` to be an array in the JSON string but got `%s`", jsonObj.get("movementOptions").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TransactionConfigurationMovementDataRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TransactionConfigurationMovementDataRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TransactionConfigurationMovementDataRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TransactionConfigurationMovementDataRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<TransactionConfigurationMovementDataRequest>() {
           @Override
           public void write(JsonWriter out, TransactionConfigurationMovementDataRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TransactionConfigurationMovementDataRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TransactionConfigurationMovementDataRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TransactionConfigurationMovementDataRequest
  * @throws IOException if the JSON string is invalid with respect to TransactionConfigurationMovementDataRequest
  */
  public static TransactionConfigurationMovementDataRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TransactionConfigurationMovementDataRequest.class);
  }

 /**
  * Convert an instance of TransactionConfigurationMovementDataRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
