/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import com.finbourne.lusid.model.EconomicDependency;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * Represents either a dependency on projections of an index.  E.g. If the interest leg of a swap is a FloatingLeg, then it will declare an IndexProjectionDependency upon pricing.  This is to indicate that pricing the floating leg requires predictions of future fixings of the index.
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class IndexProjectionDependency extends EconomicDependency {
  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private String currency;

  public static final String SERIALIZED_NAME_TENOR = "tenor";
  @SerializedName(SERIALIZED_NAME_TENOR)
  private String tenor;

  public static final String SERIALIZED_NAME_INDEX_NAME = "indexName";
  @SerializedName(SERIALIZED_NAME_INDEX_NAME)
  private String indexName;

  public static final String SERIALIZED_NAME_DATE = "date";
  @SerializedName(SERIALIZED_NAME_DATE)
  private OffsetDateTime date;

  public IndexProjectionDependency() {
    // this.dependencyType = this.getClass().getSimpleName();
  }

  public IndexProjectionDependency currency(String currency) {
    
    this.currency = currency;
    return this;
  }

   /**
   * The currency of the corresponding IndexConvention. E.g. this would be USD for a convention named USD.6M.LIBOR
   * @return currency
  **/
  @jakarta.annotation.Nonnull
  public String getCurrency() {
    return currency;
  }


  public void setCurrency(String currency) {
    this.currency = currency;
  }


  public IndexProjectionDependency tenor(String tenor) {
    
    this.tenor = tenor;
    return this;
  }

   /**
   * The tenor of the corresponding IndexConvention. E.g. this would be \&quot;6M\&quot; for a convention named USD.6M.LIBOR
   * @return tenor
  **/
  @jakarta.annotation.Nonnull
  public String getTenor() {
    return tenor;
  }


  public void setTenor(String tenor) {
    this.tenor = tenor;
  }


  public IndexProjectionDependency indexName(String indexName) {
    
    this.indexName = indexName;
    return this;
  }

   /**
   * The IndexName of the corresponding IndexConvention. E.g. this would be \&quot;LIBOR\&quot; for a convention named USD.6M.LIBOR
   * @return indexName
  **/
  @jakarta.annotation.Nonnull
  public String getIndexName() {
    return indexName;
  }


  public void setIndexName(String indexName) {
    this.indexName = indexName;
  }


  public IndexProjectionDependency date(OffsetDateTime date) {
    
    this.date = date;
    return this;
  }

   /**
   * The effectiveDate of the entity that this is a dependency for.  Unless there is an obvious date this should be, like for a historic reset, then this is the valuation date.
   * @return date
  **/
  @jakarta.annotation.Nonnull
  public OffsetDateTime getDate() {
    return date;
  }


  public void setDate(OffsetDateTime date) {
    this.date = date;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IndexProjectionDependency indexProjectionDependency = (IndexProjectionDependency) o;
    return Objects.equals(this.currency, indexProjectionDependency.currency) &&
        Objects.equals(this.tenor, indexProjectionDependency.tenor) &&
        Objects.equals(this.indexName, indexProjectionDependency.indexName) &&
        Objects.equals(this.date, indexProjectionDependency.date) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(currency, tenor, indexName, date, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IndexProjectionDependency {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    tenor: ").append(toIndentedString(tenor)).append("\n");
    sb.append("    indexName: ").append(toIndentedString(indexName)).append("\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dependencyType");
    openapiFields.add("currency");
    openapiFields.add("tenor");
    openapiFields.add("indexName");
    openapiFields.add("date");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("currency");
    openapiRequiredFields.add("tenor");
    openapiRequiredFields.add("indexName");
    openapiRequiredFields.add("date");
    openapiRequiredFields.add("dependencyType");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to IndexProjectionDependency
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!IndexProjectionDependency.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IndexProjectionDependency is not found in the empty JSON string", IndexProjectionDependency.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!IndexProjectionDependency.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IndexProjectionDependency` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : IndexProjectionDependency.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IndexProjectionDependency.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IndexProjectionDependency' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IndexProjectionDependency> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IndexProjectionDependency.class));

       return (TypeAdapter<T>) new TypeAdapter<IndexProjectionDependency>() {
           @Override
           public void write(JsonWriter out, IndexProjectionDependency value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IndexProjectionDependency read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of IndexProjectionDependency given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of IndexProjectionDependency
  * @throws IOException if the JSON string is invalid with respect to IndexProjectionDependency
  */
  public static IndexProjectionDependency fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IndexProjectionDependency.class);
  }

 /**
  * Convert an instance of IndexProjectionDependency to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
