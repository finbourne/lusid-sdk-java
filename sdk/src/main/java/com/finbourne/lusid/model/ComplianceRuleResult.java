/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import com.finbourne.lusid.model.ResourceId;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * ComplianceRuleResult
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ComplianceRuleResult {
  public static final String SERIALIZED_NAME_RULE_ID = "ruleId";
  @SerializedName(SERIALIZED_NAME_RULE_ID)
  private String ruleId;

  public static final String SERIALIZED_NAME_RULE_NAME = "ruleName";
  @SerializedName(SERIALIZED_NAME_RULE_NAME)
  private String ruleName;

  public static final String SERIALIZED_NAME_RULE_DESCRIPTION = "ruleDescription";
  @SerializedName(SERIALIZED_NAME_RULE_DESCRIPTION)
  private String ruleDescription;

  public static final String SERIALIZED_NAME_PORTFOLIO = "portfolio";
  @SerializedName(SERIALIZED_NAME_PORTFOLIO)
  private ResourceId portfolio;

  public static final String SERIALIZED_NAME_PASSED = "passed";
  @SerializedName(SERIALIZED_NAME_PASSED)
  private Boolean passed;

  public static final String SERIALIZED_NAME_RESULT_VALUE = "resultValue";
  @SerializedName(SERIALIZED_NAME_RESULT_VALUE)
  private java.math.BigDecimal resultValue;

  public static final String SERIALIZED_NAME_RULE_INFORMATION_MATCH = "ruleInformationMatch";
  @SerializedName(SERIALIZED_NAME_RULE_INFORMATION_MATCH)
  private String ruleInformationMatch;

  public static final String SERIALIZED_NAME_RULE_INFORMATION_KEY = "ruleInformationKey";
  @SerializedName(SERIALIZED_NAME_RULE_INFORMATION_KEY)
  private String ruleInformationKey;

  public static final String SERIALIZED_NAME_RULE_LOWER_LIMIT = "ruleLowerLimit";
  @SerializedName(SERIALIZED_NAME_RULE_LOWER_LIMIT)
  private java.math.BigDecimal ruleLowerLimit;

  public static final String SERIALIZED_NAME_RULE_UPPER_LIMIT = "ruleUpperLimit";
  @SerializedName(SERIALIZED_NAME_RULE_UPPER_LIMIT)
  private java.math.BigDecimal ruleUpperLimit;

  public ComplianceRuleResult() {
  }

  public ComplianceRuleResult ruleId(String ruleId) {
    
    this.ruleId = ruleId;
    return this;
  }

   /**
   * The unique identifierof a compliance rule
   * @return ruleId
  **/
  @jakarta.annotation.Nonnull
  public String getRuleId() {
    return ruleId;
  }


  public void setRuleId(String ruleId) {
    this.ruleId = ruleId;
  }


  public ComplianceRuleResult ruleName(String ruleName) {
    
    this.ruleName = ruleName;
    return this;
  }

   /**
   * The User-given name of the rule
   * @return ruleName
  **/
  @jakarta.annotation.Nonnull
  public String getRuleName() {
    return ruleName;
  }


  public void setRuleName(String ruleName) {
    this.ruleName = ruleName;
  }


  public ComplianceRuleResult ruleDescription(String ruleDescription) {
    
    this.ruleDescription = ruleDescription;
    return this;
  }

   /**
   * The User-given description of the rule
   * @return ruleDescription
  **/
  @jakarta.annotation.Nonnull
  public String getRuleDescription() {
    return ruleDescription;
  }


  public void setRuleDescription(String ruleDescription) {
    this.ruleDescription = ruleDescription;
  }


  public ComplianceRuleResult portfolio(ResourceId portfolio) {
    
    this.portfolio = portfolio;
    return this;
  }

   /**
   * Get portfolio
   * @return portfolio
  **/
  @jakarta.annotation.Nonnull
  public ResourceId getPortfolio() {
    return portfolio;
  }


  public void setPortfolio(ResourceId portfolio) {
    this.portfolio = portfolio;
  }


  public ComplianceRuleResult passed(Boolean passed) {
    
    this.passed = passed;
    return this;
  }

   /**
   * The result of an individual compliance run, true if passed
   * @return passed
  **/
  @jakarta.annotation.Nonnull
  public Boolean getPassed() {
    return passed;
  }


  public void setPassed(Boolean passed) {
    this.passed = passed;
  }


  public ComplianceRuleResult resultValue(java.math.BigDecimal resultValue) {
    
    this.resultValue = resultValue;
    return this;
  }

   /**
   * The calculation result that was used to confirm a pass/fail
   * @return resultValue
  **/
  @jakarta.annotation.Nonnull
  public java.math.BigDecimal getResultValue() {
    return resultValue;
  }


  public void setResultValue(java.math.BigDecimal resultValue) {
    this.resultValue = resultValue;
  }


  public ComplianceRuleResult ruleInformationMatch(String ruleInformationMatch) {
    
    this.ruleInformationMatch = ruleInformationMatch;
    return this;
  }

   /**
   * The value matched by the rule
   * @return ruleInformationMatch
  **/
  @jakarta.annotation.Nonnull
  public String getRuleInformationMatch() {
    return ruleInformationMatch;
  }


  public void setRuleInformationMatch(String ruleInformationMatch) {
    this.ruleInformationMatch = ruleInformationMatch;
  }


  public ComplianceRuleResult ruleInformationKey(String ruleInformationKey) {
    
    this.ruleInformationKey = ruleInformationKey;
    return this;
  }

   /**
   * The property key matched by the rule
   * @return ruleInformationKey
  **/
  @jakarta.annotation.Nonnull
  public String getRuleInformationKey() {
    return ruleInformationKey;
  }


  public void setRuleInformationKey(String ruleInformationKey) {
    this.ruleInformationKey = ruleInformationKey;
  }


  public ComplianceRuleResult ruleLowerLimit(java.math.BigDecimal ruleLowerLimit) {
    
    this.ruleLowerLimit = ruleLowerLimit;
    return this;
  }

   /**
   * The lower limit of the rule
   * @return ruleLowerLimit
  **/
  @jakarta.annotation.Nonnull
  public java.math.BigDecimal getRuleLowerLimit() {
    return ruleLowerLimit;
  }


  public void setRuleLowerLimit(java.math.BigDecimal ruleLowerLimit) {
    this.ruleLowerLimit = ruleLowerLimit;
  }


  public ComplianceRuleResult ruleUpperLimit(java.math.BigDecimal ruleUpperLimit) {
    
    this.ruleUpperLimit = ruleUpperLimit;
    return this;
  }

   /**
   * The upper limit of the rule
   * @return ruleUpperLimit
  **/
  @jakarta.annotation.Nonnull
  public java.math.BigDecimal getRuleUpperLimit() {
    return ruleUpperLimit;
  }


  public void setRuleUpperLimit(java.math.BigDecimal ruleUpperLimit) {
    this.ruleUpperLimit = ruleUpperLimit;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ComplianceRuleResult complianceRuleResult = (ComplianceRuleResult) o;
    return Objects.equals(this.ruleId, complianceRuleResult.ruleId) &&
        Objects.equals(this.ruleName, complianceRuleResult.ruleName) &&
        Objects.equals(this.ruleDescription, complianceRuleResult.ruleDescription) &&
        Objects.equals(this.portfolio, complianceRuleResult.portfolio) &&
        Objects.equals(this.passed, complianceRuleResult.passed) &&
        (this.resultValue.compareTo(complianceRuleResult.getResultValue()) == 0) &&
        Objects.equals(this.ruleInformationMatch, complianceRuleResult.ruleInformationMatch) &&
        Objects.equals(this.ruleInformationKey, complianceRuleResult.ruleInformationKey) &&
        (this.ruleLowerLimit.compareTo(complianceRuleResult.getRuleLowerLimit()) == 0) &&
        (this.ruleUpperLimit.compareTo(complianceRuleResult.getRuleUpperLimit()) == 0);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ruleId, ruleName, ruleDescription, portfolio, passed, resultValue, ruleInformationMatch, ruleInformationKey, ruleLowerLimit, ruleUpperLimit);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ComplianceRuleResult {\n");
    sb.append("    ruleId: ").append(toIndentedString(ruleId)).append("\n");
    sb.append("    ruleName: ").append(toIndentedString(ruleName)).append("\n");
    sb.append("    ruleDescription: ").append(toIndentedString(ruleDescription)).append("\n");
    sb.append("    portfolio: ").append(toIndentedString(portfolio)).append("\n");
    sb.append("    passed: ").append(toIndentedString(passed)).append("\n");
    sb.append("    resultValue: ").append(toIndentedString(resultValue)).append("\n");
    sb.append("    ruleInformationMatch: ").append(toIndentedString(ruleInformationMatch)).append("\n");
    sb.append("    ruleInformationKey: ").append(toIndentedString(ruleInformationKey)).append("\n");
    sb.append("    ruleLowerLimit: ").append(toIndentedString(ruleLowerLimit)).append("\n");
    sb.append("    ruleUpperLimit: ").append(toIndentedString(ruleUpperLimit)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ruleId");
    openapiFields.add("ruleName");
    openapiFields.add("ruleDescription");
    openapiFields.add("portfolio");
    openapiFields.add("passed");
    openapiFields.add("resultValue");
    openapiFields.add("ruleInformationMatch");
    openapiFields.add("ruleInformationKey");
    openapiFields.add("ruleLowerLimit");
    openapiFields.add("ruleUpperLimit");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("ruleId");
    openapiRequiredFields.add("ruleName");
    openapiRequiredFields.add("ruleDescription");
    openapiRequiredFields.add("portfolio");
    openapiRequiredFields.add("passed");
    openapiRequiredFields.add("resultValue");
    openapiRequiredFields.add("ruleInformationMatch");
    openapiRequiredFields.add("ruleInformationKey");
    openapiRequiredFields.add("ruleLowerLimit");
    openapiRequiredFields.add("ruleUpperLimit");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ComplianceRuleResult
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ComplianceRuleResult.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ComplianceRuleResult is not found in the empty JSON string", ComplianceRuleResult.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ComplianceRuleResult.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ComplianceRuleResult` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ComplianceRuleResult.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("ruleId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ruleId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ruleId").toString()));
      }
      if (!jsonObj.get("ruleName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ruleName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ruleName").toString()));
      }
      if (!jsonObj.get("ruleDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ruleDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ruleDescription").toString()));
      }
      // validate the required field `portfolio`
      ResourceId.validateJsonObject(jsonObj.getAsJsonObject("portfolio"));
      if (!jsonObj.get("ruleInformationMatch").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ruleInformationMatch` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ruleInformationMatch").toString()));
      }
      if (!jsonObj.get("ruleInformationKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ruleInformationKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ruleInformationKey").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ComplianceRuleResult.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ComplianceRuleResult' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ComplianceRuleResult> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ComplianceRuleResult.class));

       return (TypeAdapter<T>) new TypeAdapter<ComplianceRuleResult>() {
           @Override
           public void write(JsonWriter out, ComplianceRuleResult value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ComplianceRuleResult read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ComplianceRuleResult given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ComplianceRuleResult
  * @throws IOException if the JSON string is invalid with respect to ComplianceRuleResult
  */
  public static ComplianceRuleResult fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ComplianceRuleResult.class);
  }

 /**
  * Convert an instance of ComplianceRuleResult to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
