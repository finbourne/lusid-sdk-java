/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import com.finbourne.lusid.model.CurrencyAndAmount;
import com.finbourne.lusid.model.PerpetualProperty;
import com.finbourne.lusid.model.ResourceId;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * A request to create or update an Allocation.
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class AllocationRequest {
  public static final String SERIALIZED_NAME_PROPERTIES = "properties";
  @SerializedName(SERIALIZED_NAME_PROPERTIES)
  private Map<String, PerpetualProperty> properties;

  public static final String SERIALIZED_NAME_INSTRUMENT_IDENTIFIERS = "instrumentIdentifiers";
  @SerializedName(SERIALIZED_NAME_INSTRUMENT_IDENTIFIERS)
  private Map<String, String> instrumentIdentifiers = new HashMap<>();

  public static final String SERIALIZED_NAME_QUANTITY = "quantity";
  @SerializedName(SERIALIZED_NAME_QUANTITY)
  private java.math.BigDecimal quantity;

  public static final String SERIALIZED_NAME_PORTFOLIO_ID = "portfolioId";
  @SerializedName(SERIALIZED_NAME_PORTFOLIO_ID)
  private ResourceId portfolioId;

  public static final String SERIALIZED_NAME_ALLOCATED_ORDER_ID = "allocatedOrderId";
  @SerializedName(SERIALIZED_NAME_ALLOCATED_ORDER_ID)
  private ResourceId allocatedOrderId;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private ResourceId id;

  public static final String SERIALIZED_NAME_PLACEMENT_IDS = "placementIds";
  @SerializedName(SERIALIZED_NAME_PLACEMENT_IDS)
  private List<ResourceId> placementIds;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private String state;

  public static final String SERIALIZED_NAME_SIDE = "side";
  @SerializedName(SERIALIZED_NAME_SIDE)
  private String side;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_SETTLEMENT_DATE = "settlementDate";
  @SerializedName(SERIALIZED_NAME_SETTLEMENT_DATE)
  private OffsetDateTime settlementDate;

  public static final String SERIALIZED_NAME_DATE = "date";
  @SerializedName(SERIALIZED_NAME_DATE)
  private OffsetDateTime date;

  public static final String SERIALIZED_NAME_PRICE = "price";
  @SerializedName(SERIALIZED_NAME_PRICE)
  private CurrencyAndAmount price;

  public static final String SERIALIZED_NAME_SETTLEMENT_CURRENCY = "settlementCurrency";
  @SerializedName(SERIALIZED_NAME_SETTLEMENT_CURRENCY)
  private String settlementCurrency;

  public static final String SERIALIZED_NAME_SETTLEMENT_CURRENCY_FX_RATE = "settlementCurrencyFxRate";
  @SerializedName(SERIALIZED_NAME_SETTLEMENT_CURRENCY_FX_RATE)
  private java.math.BigDecimal settlementCurrencyFxRate;

  public static final String SERIALIZED_NAME_COUNTERPARTY = "counterparty";
  @SerializedName(SERIALIZED_NAME_COUNTERPARTY)
  private String counterparty;

  public static final String SERIALIZED_NAME_EXECUTION_IDS = "executionIds";
  @SerializedName(SERIALIZED_NAME_EXECUTION_IDS)
  private List<ResourceId> executionIds;

  public AllocationRequest() {
  }

  public AllocationRequest properties(Map<String, PerpetualProperty> properties) {
    
    this.properties = properties;
    return this;
  }

  public AllocationRequest putPropertiesItem(String key, PerpetualProperty propertiesItem) {
    if (this.properties == null) {
      this.properties = new HashMap<>();
    }
    this.properties.put(key, propertiesItem);
    return this;
  }

   /**
   * Client-defined properties associated with this allocation.
   * @return properties
  **/
  @jakarta.annotation.Nullable
  public Map<String, PerpetualProperty> getProperties() {
    return properties;
  }


  public void setProperties(Map<String, PerpetualProperty> properties) {
    this.properties = properties;
  }


  public AllocationRequest instrumentIdentifiers(Map<String, String> instrumentIdentifiers) {
    
    this.instrumentIdentifiers = instrumentIdentifiers;
    return this;
  }

  public AllocationRequest putInstrumentIdentifiersItem(String key, String instrumentIdentifiersItem) {
    if (this.instrumentIdentifiers == null) {
      this.instrumentIdentifiers = new HashMap<>();
    }
    this.instrumentIdentifiers.put(key, instrumentIdentifiersItem);
    return this;
  }

   /**
   * The instrument allocated.
   * @return instrumentIdentifiers
  **/
  @jakarta.annotation.Nonnull
  public Map<String, String> getInstrumentIdentifiers() {
    return instrumentIdentifiers;
  }


  public void setInstrumentIdentifiers(Map<String, String> instrumentIdentifiers) {
    this.instrumentIdentifiers = instrumentIdentifiers;
  }


  public AllocationRequest quantity(java.math.BigDecimal quantity) {
    
    this.quantity = quantity;
    return this;
  }

   /**
   * The quantity of given instrument allocated.
   * @return quantity
  **/
  @jakarta.annotation.Nonnull
  public java.math.BigDecimal getQuantity() {
    return quantity;
  }


  public void setQuantity(java.math.BigDecimal quantity) {
    this.quantity = quantity;
  }


  public AllocationRequest portfolioId(ResourceId portfolioId) {
    
    this.portfolioId = portfolioId;
    return this;
  }

   /**
   * Get portfolioId
   * @return portfolioId
  **/
  @jakarta.annotation.Nonnull
  public ResourceId getPortfolioId() {
    return portfolioId;
  }


  public void setPortfolioId(ResourceId portfolioId) {
    this.portfolioId = portfolioId;
  }


  public AllocationRequest allocatedOrderId(ResourceId allocatedOrderId) {
    
    this.allocatedOrderId = allocatedOrderId;
    return this;
  }

   /**
   * Get allocatedOrderId
   * @return allocatedOrderId
  **/
  @jakarta.annotation.Nonnull
  public ResourceId getAllocatedOrderId() {
    return allocatedOrderId;
  }


  public void setAllocatedOrderId(ResourceId allocatedOrderId) {
    this.allocatedOrderId = allocatedOrderId;
  }


  public AllocationRequest id(ResourceId id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @jakarta.annotation.Nonnull
  public ResourceId getId() {
    return id;
  }


  public void setId(ResourceId id) {
    this.id = id;
  }


  public AllocationRequest placementIds(List<ResourceId> placementIds) {
    
    this.placementIds = placementIds;
    return this;
  }

  public AllocationRequest addPlacementIdsItem(ResourceId placementIdsItem) {
    if (this.placementIds == null) {
      this.placementIds = new ArrayList<>();
    }
    this.placementIds.add(placementIdsItem);
    return this;
  }

   /**
   * A placement - also known as an order placed in the market - associated with this allocation.
   * @return placementIds
  **/
  @jakarta.annotation.Nullable
  public List<ResourceId> getPlacementIds() {
    return placementIds;
  }


  public void setPlacementIds(List<ResourceId> placementIds) {
    this.placementIds = placementIds;
  }


  public AllocationRequest state(String state) {
    
    this.state = state;
    return this;
  }

   /**
   * The state of this allocation.
   * @return state
  **/
  @jakarta.annotation.Nullable
  public String getState() {
    return state;
  }


  public void setState(String state) {
    this.state = state;
  }


  public AllocationRequest side(String side) {
    
    this.side = side;
    return this;
  }

   /**
   * The side of this allocation (examples: Buy, Sell, ...).
   * @return side
  **/
  @jakarta.annotation.Nullable
  public String getSide() {
    return side;
  }


  public void setSide(String side) {
    this.side = side;
  }


  public AllocationRequest type(String type) {
    
    this.type = type;
    return this;
  }

   /**
   * The type of order associated with this allocation (examples: Limit, Market, ...).
   * @return type
  **/
  @jakarta.annotation.Nullable
  public String getType() {
    return type;
  }


  public void setType(String type) {
    this.type = type;
  }


  public AllocationRequest settlementDate(OffsetDateTime settlementDate) {
    
    this.settlementDate = settlementDate;
    return this;
  }

   /**
   * The settlement date for this allocation.
   * @return settlementDate
  **/
  @jakarta.annotation.Nullable
  public OffsetDateTime getSettlementDate() {
    return settlementDate;
  }


  public void setSettlementDate(OffsetDateTime settlementDate) {
    this.settlementDate = settlementDate;
  }


  public AllocationRequest date(OffsetDateTime date) {
    
    this.date = date;
    return this;
  }

   /**
   * The date of this allocation.
   * @return date
  **/
  @jakarta.annotation.Nullable
  public OffsetDateTime getDate() {
    return date;
  }


  public void setDate(OffsetDateTime date) {
    this.date = date;
  }


  public AllocationRequest price(CurrencyAndAmount price) {
    
    this.price = price;
    return this;
  }

   /**
   * Get price
   * @return price
  **/
  @jakarta.annotation.Nullable
  public CurrencyAndAmount getPrice() {
    return price;
  }


  public void setPrice(CurrencyAndAmount price) {
    this.price = price;
  }


  public AllocationRequest settlementCurrency(String settlementCurrency) {
    
    this.settlementCurrency = settlementCurrency;
    return this;
  }

   /**
   * The settlement currency of this allocation.
   * @return settlementCurrency
  **/
  @jakarta.annotation.Nullable
  public String getSettlementCurrency() {
    return settlementCurrency;
  }


  public void setSettlementCurrency(String settlementCurrency) {
    this.settlementCurrency = settlementCurrency;
  }


  public AllocationRequest settlementCurrencyFxRate(java.math.BigDecimal settlementCurrencyFxRate) {
    
    this.settlementCurrencyFxRate = settlementCurrencyFxRate;
    return this;
  }

   /**
   * The settlement currency to allocation currency FX rate.
   * @return settlementCurrencyFxRate
  **/
  @jakarta.annotation.Nullable
  public java.math.BigDecimal getSettlementCurrencyFxRate() {
    return settlementCurrencyFxRate;
  }


  public void setSettlementCurrencyFxRate(java.math.BigDecimal settlementCurrencyFxRate) {
    this.settlementCurrencyFxRate = settlementCurrencyFxRate;
  }


  public AllocationRequest counterparty(String counterparty) {
    
    this.counterparty = counterparty;
    return this;
  }

   /**
   * The counterparty for this allocation.
   * @return counterparty
  **/
  @jakarta.annotation.Nullable
  public String getCounterparty() {
    return counterparty;
  }


  public void setCounterparty(String counterparty) {
    this.counterparty = counterparty;
  }


  public AllocationRequest executionIds(List<ResourceId> executionIds) {
    
    this.executionIds = executionIds;
    return this;
  }

  public AllocationRequest addExecutionIdsItem(ResourceId executionIdsItem) {
    if (this.executionIds == null) {
      this.executionIds = new ArrayList<>();
    }
    this.executionIds.add(executionIdsItem);
    return this;
  }

   /**
   * The executions associated with this allocation
   * @return executionIds
  **/
  @jakarta.annotation.Nullable
  public List<ResourceId> getExecutionIds() {
    return executionIds;
  }


  public void setExecutionIds(List<ResourceId> executionIds) {
    this.executionIds = executionIds;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AllocationRequest allocationRequest = (AllocationRequest) o;
    return Objects.equals(this.properties, allocationRequest.properties) &&
        Objects.equals(this.instrumentIdentifiers, allocationRequest.instrumentIdentifiers) &&
        (this.quantity.compareTo(allocationRequest.getQuantity()) == 0) &&
        Objects.equals(this.portfolioId, allocationRequest.portfolioId) &&
        Objects.equals(this.allocatedOrderId, allocationRequest.allocatedOrderId) &&
        Objects.equals(this.id, allocationRequest.id) &&
        Objects.equals(this.placementIds, allocationRequest.placementIds) &&
        Objects.equals(this.state, allocationRequest.state) &&
        Objects.equals(this.side, allocationRequest.side) &&
        Objects.equals(this.type, allocationRequest.type) &&
        Objects.equals(this.settlementDate, allocationRequest.settlementDate) &&
        Objects.equals(this.date, allocationRequest.date) &&
        Objects.equals(this.price, allocationRequest.price) &&
        Objects.equals(this.settlementCurrency, allocationRequest.settlementCurrency) &&
        (this.settlementCurrencyFxRate.compareTo(allocationRequest.getSettlementCurrencyFxRate()) == 0) &&
        Objects.equals(this.counterparty, allocationRequest.counterparty) &&
        Objects.equals(this.executionIds, allocationRequest.executionIds);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(properties, instrumentIdentifiers, quantity, portfolioId, allocatedOrderId, id, placementIds, state, side, type, settlementDate, date, price, settlementCurrency, settlementCurrencyFxRate, counterparty, executionIds);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AllocationRequest {\n");
    sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
    sb.append("    instrumentIdentifiers: ").append(toIndentedString(instrumentIdentifiers)).append("\n");
    sb.append("    quantity: ").append(toIndentedString(quantity)).append("\n");
    sb.append("    portfolioId: ").append(toIndentedString(portfolioId)).append("\n");
    sb.append("    allocatedOrderId: ").append(toIndentedString(allocatedOrderId)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    placementIds: ").append(toIndentedString(placementIds)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    side: ").append(toIndentedString(side)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    settlementDate: ").append(toIndentedString(settlementDate)).append("\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("    settlementCurrency: ").append(toIndentedString(settlementCurrency)).append("\n");
    sb.append("    settlementCurrencyFxRate: ").append(toIndentedString(settlementCurrencyFxRate)).append("\n");
    sb.append("    counterparty: ").append(toIndentedString(counterparty)).append("\n");
    sb.append("    executionIds: ").append(toIndentedString(executionIds)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("properties");
    openapiFields.add("instrumentIdentifiers");
    openapiFields.add("quantity");
    openapiFields.add("portfolioId");
    openapiFields.add("allocatedOrderId");
    openapiFields.add("id");
    openapiFields.add("placementIds");
    openapiFields.add("state");
    openapiFields.add("side");
    openapiFields.add("type");
    openapiFields.add("settlementDate");
    openapiFields.add("date");
    openapiFields.add("price");
    openapiFields.add("settlementCurrency");
    openapiFields.add("settlementCurrencyFxRate");
    openapiFields.add("counterparty");
    openapiFields.add("executionIds");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("instrumentIdentifiers");
    openapiRequiredFields.add("quantity");
    openapiRequiredFields.add("portfolioId");
    openapiRequiredFields.add("allocatedOrderId");
    openapiRequiredFields.add("id");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to AllocationRequest
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AllocationRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AllocationRequest is not found in the empty JSON string", AllocationRequest.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AllocationRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `portfolioId`
      ResourceId.validateJsonElement(jsonObj.get("portfolioId"));
      // validate the required field `allocatedOrderId`
      ResourceId.validateJsonElement(jsonObj.get("allocatedOrderId"));
      // validate the required field `id`
      ResourceId.validateJsonElement(jsonObj.get("id"));
      if (jsonObj.get("placementIds") != null && !jsonObj.get("placementIds").isJsonNull()) {
        JsonArray jsonArrayplacementIds = jsonObj.getAsJsonArray("placementIds");
        if (jsonArrayplacementIds != null) {
          // ensure the json data is an array
          if (!jsonObj.get("placementIds").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `placementIds` to be an array in the JSON string but got `%s`", jsonObj.get("placementIds").toString()));
          }

          // validate the optional field `placementIds` (array)
          for (int i = 0; i < jsonArrayplacementIds.size(); i++) {
            ResourceId.validateJsonElement(jsonArrayplacementIds.get(i));
          };
        }
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      if ((jsonObj.get("side") != null && !jsonObj.get("side").isJsonNull()) && !jsonObj.get("side").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `side` to be a primitive type in the JSON string but got `%s`", jsonObj.get("side").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `price`
      if (jsonObj.get("price") != null && !jsonObj.get("price").isJsonNull()) {
        CurrencyAndAmount.validateJsonElement(jsonObj.get("price"));
      }
      if ((jsonObj.get("settlementCurrency") != null && !jsonObj.get("settlementCurrency").isJsonNull()) && !jsonObj.get("settlementCurrency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `settlementCurrency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("settlementCurrency").toString()));
      }
      if ((jsonObj.get("counterparty") != null && !jsonObj.get("counterparty").isJsonNull()) && !jsonObj.get("counterparty").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `counterparty` to be a primitive type in the JSON string but got `%s`", jsonObj.get("counterparty").toString()));
      }
      if (jsonObj.get("executionIds") != null && !jsonObj.get("executionIds").isJsonNull()) {
        JsonArray jsonArrayexecutionIds = jsonObj.getAsJsonArray("executionIds");
        if (jsonArrayexecutionIds != null) {
          // ensure the json data is an array
          if (!jsonObj.get("executionIds").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `executionIds` to be an array in the JSON string but got `%s`", jsonObj.get("executionIds").toString()));
          }

          // validate the optional field `executionIds` (array)
          for (int i = 0; i < jsonArrayexecutionIds.size(); i++) {
            ResourceId.validateJsonElement(jsonArrayexecutionIds.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AllocationRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AllocationRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AllocationRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AllocationRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<AllocationRequest>() {
           @Override
           public void write(JsonWriter out, AllocationRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AllocationRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AllocationRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AllocationRequest
  * @throws IOException if the JSON string is invalid with respect to AllocationRequest
  */
  public static AllocationRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AllocationRequest.class);
  }

 /**
  * Convert an instance of AllocationRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
