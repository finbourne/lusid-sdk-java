/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import com.finbourne.lusid.model.PerpetualProperty;
import com.finbourne.lusid.model.TransactionTypePropertyMapping;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * TransactionTypeMovement
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class TransactionTypeMovement {
  public static final String SERIALIZED_NAME_MOVEMENT_TYPES = "movementTypes";
  @SerializedName(SERIALIZED_NAME_MOVEMENT_TYPES)
  private String movementTypes;

  public static final String SERIALIZED_NAME_SIDE = "side";
  @SerializedName(SERIALIZED_NAME_SIDE)
  private String side;

  public static final String SERIALIZED_NAME_DIRECTION = "direction";
  @SerializedName(SERIALIZED_NAME_DIRECTION)
  private Integer direction;

  public static final String SERIALIZED_NAME_PROPERTIES = "properties";
  @SerializedName(SERIALIZED_NAME_PROPERTIES)
  private Map<String, PerpetualProperty> properties;

  public static final String SERIALIZED_NAME_MAPPINGS = "mappings";
  @SerializedName(SERIALIZED_NAME_MAPPINGS)
  private List<TransactionTypePropertyMapping> mappings;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_MOVEMENT_OPTIONS = "movementOptions";
  @SerializedName(SERIALIZED_NAME_MOVEMENT_OPTIONS)
  private List<String> movementOptions;

  public static final String SERIALIZED_NAME_SETTLEMENT_DATE_OVERRIDE = "settlementDateOverride";
  @SerializedName(SERIALIZED_NAME_SETTLEMENT_DATE_OVERRIDE)
  private String settlementDateOverride;

  public TransactionTypeMovement() {
  }

  public TransactionTypeMovement movementTypes(String movementTypes) {
    
    this.movementTypes = movementTypes;
    return this;
  }

   /**
   * Movement types determine the impact of the movement on the holdings
   * @return movementTypes
  **/
  @jakarta.annotation.Nonnull
  public String getMovementTypes() {
    return movementTypes;
  }


  public void setMovementTypes(String movementTypes) {
    this.movementTypes = movementTypes;
  }


  public TransactionTypeMovement side(String side) {
    
    this.side = side;
    return this;
  }

   /**
   * The Side determines which of the fields from our transaction are used to generate the Movement. Side1 means the &#39;security&#39; side of the transaction, ie the Instrument and Units; Side2 means the &#39;cash&#39; side, ie the Total Consideration
   * @return side
  **/
  @jakarta.annotation.Nonnull
  public String getSide() {
    return side;
  }


  public void setSide(String side) {
    this.side = side;
  }


  public TransactionTypeMovement direction(Integer direction) {
    
    this.direction = direction;
    return this;
  }

   /**
   *  A multiplier to apply to Transaction amounts; the values are -1 to indicate to reverse the signs and 1 to indicate to use the signed values from the Transaction directly. For a typical Transaction with unsigned values, 1 means increase, -1 means decrease
   * @return direction
  **/
  @jakarta.annotation.Nonnull
  public Integer getDirection() {
    return direction;
  }


  public void setDirection(Integer direction) {
    this.direction = direction;
  }


  public TransactionTypeMovement properties(Map<String, PerpetualProperty> properties) {
    
    this.properties = properties;
    return this;
  }

  public TransactionTypeMovement putPropertiesItem(String key, PerpetualProperty propertiesItem) {
    if (this.properties == null) {
      this.properties = new HashMap<>();
    }
    this.properties.put(key, propertiesItem);
    return this;
  }

   /**
   * The properties associated with the underlying Movement
   * @return properties
  **/
  @jakarta.annotation.Nullable
  public Map<String, PerpetualProperty> getProperties() {
    return properties;
  }


  public void setProperties(Map<String, PerpetualProperty> properties) {
    this.properties = properties;
  }


  public TransactionTypeMovement mappings(List<TransactionTypePropertyMapping> mappings) {
    
    this.mappings = mappings;
    return this;
  }

  public TransactionTypeMovement addMappingsItem(TransactionTypePropertyMapping mappingsItem) {
    if (this.mappings == null) {
      this.mappings = new ArrayList<>();
    }
    this.mappings.add(mappingsItem);
    return this;
  }

   /**
   * This allows you to map a transaction property to a property on the underlying holding
   * @return mappings
  **/
  @jakarta.annotation.Nullable
  public List<TransactionTypePropertyMapping> getMappings() {
    return mappings;
  }


  public void setMappings(List<TransactionTypePropertyMapping> mappings) {
    this.mappings = mappings;
  }


  public TransactionTypeMovement name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * The movement name (optional)
   * @return name
  **/
  @jakarta.annotation.Nullable
  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public TransactionTypeMovement movementOptions(List<String> movementOptions) {
    
    this.movementOptions = movementOptions;
    return this;
  }

  public TransactionTypeMovement addMovementOptionsItem(String movementOptionsItem) {
    if (this.movementOptions == null) {
      this.movementOptions = new ArrayList<>();
    }
    this.movementOptions.add(movementOptionsItem);
    return this;
  }

   /**
   * Allows extra specifications for the movement. The only option currently available is &#39;DirectAdjustment&#39;. A movement type of &#39;StockMovement&#39; with an option of &#39;DirectAdjusment&#39; will allow you to adjust the unitsof a holding without affecting its cost base. You will, therefore, be able to reflect the impact of a stock split by loading a Transaction.
   * @return movementOptions
  **/
  @jakarta.annotation.Nullable
  public List<String> getMovementOptions() {
    return movementOptions;
  }


  public void setMovementOptions(List<String> movementOptions) {
    this.movementOptions = movementOptions;
  }


  public TransactionTypeMovement settlementDateOverride(String settlementDateOverride) {
    
    this.settlementDateOverride = settlementDateOverride;
    return this;
  }

   /**
   * Optional property key that must be in the Transaction domain when specified. When the movement is processed and the transaction has this property set to a valid date, then the property value will override the SettlementDate of the transaction.
   * @return settlementDateOverride
  **/
  @jakarta.annotation.Nullable
  public String getSettlementDateOverride() {
    return settlementDateOverride;
  }


  public void setSettlementDateOverride(String settlementDateOverride) {
    this.settlementDateOverride = settlementDateOverride;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TransactionTypeMovement transactionTypeMovement = (TransactionTypeMovement) o;
    return Objects.equals(this.movementTypes, transactionTypeMovement.movementTypes) &&
        Objects.equals(this.side, transactionTypeMovement.side) &&
        Objects.equals(this.direction, transactionTypeMovement.direction) &&
        Objects.equals(this.properties, transactionTypeMovement.properties) &&
        Objects.equals(this.mappings, transactionTypeMovement.mappings) &&
        Objects.equals(this.name, transactionTypeMovement.name) &&
        Objects.equals(this.movementOptions, transactionTypeMovement.movementOptions) &&
        Objects.equals(this.settlementDateOverride, transactionTypeMovement.settlementDateOverride);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(movementTypes, side, direction, properties, mappings, name, movementOptions, settlementDateOverride);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TransactionTypeMovement {\n");
    sb.append("    movementTypes: ").append(toIndentedString(movementTypes)).append("\n");
    sb.append("    side: ").append(toIndentedString(side)).append("\n");
    sb.append("    direction: ").append(toIndentedString(direction)).append("\n");
    sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
    sb.append("    mappings: ").append(toIndentedString(mappings)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    movementOptions: ").append(toIndentedString(movementOptions)).append("\n");
    sb.append("    settlementDateOverride: ").append(toIndentedString(settlementDateOverride)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("movementTypes");
    openapiFields.add("side");
    openapiFields.add("direction");
    openapiFields.add("properties");
    openapiFields.add("mappings");
    openapiFields.add("name");
    openapiFields.add("movementOptions");
    openapiFields.add("settlementDateOverride");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("movementTypes");
    openapiRequiredFields.add("side");
    openapiRequiredFields.add("direction");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to TransactionTypeMovement
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!TransactionTypeMovement.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TransactionTypeMovement is not found in the empty JSON string", TransactionTypeMovement.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!TransactionTypeMovement.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TransactionTypeMovement` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TransactionTypeMovement.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("movementTypes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `movementTypes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("movementTypes").toString()));
      }
      if (!jsonObj.get("side").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `side` to be a primitive type in the JSON string but got `%s`", jsonObj.get("side").toString()));
      }
      if (jsonObj.get("mappings") != null && !jsonObj.get("mappings").isJsonNull()) {
        JsonArray jsonArraymappings = jsonObj.getAsJsonArray("mappings");
        if (jsonArraymappings != null) {
          // ensure the json data is an array
          if (!jsonObj.get("mappings").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `mappings` to be an array in the JSON string but got `%s`", jsonObj.get("mappings").toString()));
          }

          // validate the optional field `mappings` (array)
          for (int i = 0; i < jsonArraymappings.size(); i++) {
            TransactionTypePropertyMapping.validateJsonObject(jsonArraymappings.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("movementOptions") != null && !jsonObj.get("movementOptions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `movementOptions` to be an array in the JSON string but got `%s`", jsonObj.get("movementOptions").toString()));
      }
      if ((jsonObj.get("settlementDateOverride") != null && !jsonObj.get("settlementDateOverride").isJsonNull()) && !jsonObj.get("settlementDateOverride").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `settlementDateOverride` to be a primitive type in the JSON string but got `%s`", jsonObj.get("settlementDateOverride").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TransactionTypeMovement.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TransactionTypeMovement' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TransactionTypeMovement> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TransactionTypeMovement.class));

       return (TypeAdapter<T>) new TypeAdapter<TransactionTypeMovement>() {
           @Override
           public void write(JsonWriter out, TransactionTypeMovement value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TransactionTypeMovement read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TransactionTypeMovement given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TransactionTypeMovement
  * @throws IOException if the JSON string is invalid with respect to TransactionTypeMovement
  */
  public static TransactionTypeMovement fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TransactionTypeMovement.class);
  }

 /**
  * Convert an instance of TransactionTypeMovement to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
