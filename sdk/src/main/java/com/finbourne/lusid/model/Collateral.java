/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import com.finbourne.lusid.model.CollateralInstrument;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * Representation of the collateral of a repurchase agreement, along with related details of the agreement.
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class Collateral {
  public static final String SERIALIZED_NAME_BUYER_RECEIVES_CASHFLOWS = "buyerReceivesCashflows";
  @SerializedName(SERIALIZED_NAME_BUYER_RECEIVES_CASHFLOWS)
  private Boolean buyerReceivesCashflows;

  public static final String SERIALIZED_NAME_BUYER_RECEIVES_CORPORATE_ACTION_PAYMENTS = "buyerReceivesCorporateActionPayments";
  @SerializedName(SERIALIZED_NAME_BUYER_RECEIVES_CORPORATE_ACTION_PAYMENTS)
  private Boolean buyerReceivesCorporateActionPayments;

  public static final String SERIALIZED_NAME_COLLATERAL_INSTRUMENTS = "collateralInstruments";
  @SerializedName(SERIALIZED_NAME_COLLATERAL_INSTRUMENTS)
  private List<CollateralInstrument> collateralInstruments;

  public static final String SERIALIZED_NAME_COLLATERAL_VALUE = "collateralValue";
  @SerializedName(SERIALIZED_NAME_COLLATERAL_VALUE)
  private java.math.BigDecimal collateralValue;

  public Collateral() {
  }

  public Collateral buyerReceivesCashflows(Boolean buyerReceivesCashflows) {
    
    this.buyerReceivesCashflows = buyerReceivesCashflows;
    return this;
  }

   /**
   * Does the buyer of the FlexibleRepo receive the cashflows from any collateral instruments, or do they get paid to the seller.
   * @return buyerReceivesCashflows
  **/
  @jakarta.annotation.Nonnull
  public Boolean getBuyerReceivesCashflows() {
    return buyerReceivesCashflows;
  }


  public void setBuyerReceivesCashflows(Boolean buyerReceivesCashflows) {
    this.buyerReceivesCashflows = buyerReceivesCashflows;
  }


  public Collateral buyerReceivesCorporateActionPayments(Boolean buyerReceivesCorporateActionPayments) {
    
    this.buyerReceivesCorporateActionPayments = buyerReceivesCorporateActionPayments;
    return this;
  }

   /**
   * Does the buyer of the FlexibleRepo receive any dividend or cash payments as the result of a corporate action on any of the collateral instruments, or are these amounts paid to the seller. Referred to as \&quot;manufactured payments\&quot; in the UK, and valid only under a repo with GMRA in Europe
   * @return buyerReceivesCorporateActionPayments
  **/
  @jakarta.annotation.Nonnull
  public Boolean getBuyerReceivesCorporateActionPayments() {
    return buyerReceivesCorporateActionPayments;
  }


  public void setBuyerReceivesCorporateActionPayments(Boolean buyerReceivesCorporateActionPayments) {
    this.buyerReceivesCorporateActionPayments = buyerReceivesCorporateActionPayments;
  }


  public Collateral collateralInstruments(List<CollateralInstrument> collateralInstruments) {
    
    this.collateralInstruments = collateralInstruments;
    return this;
  }

  public Collateral addCollateralInstrumentsItem(CollateralInstrument collateralInstrumentsItem) {
    if (this.collateralInstruments == null) {
      this.collateralInstruments = new ArrayList<>();
    }
    this.collateralInstruments.add(collateralInstrumentsItem);
    return this;
  }

   /**
   * List of any collateral instruments.
   * @return collateralInstruments
  **/
  @jakarta.annotation.Nullable
  public List<CollateralInstrument> getCollateralInstruments() {
    return collateralInstruments;
  }


  public void setCollateralInstruments(List<CollateralInstrument> collateralInstruments) {
    this.collateralInstruments = collateralInstruments;
  }


  public Collateral collateralValue(java.math.BigDecimal collateralValue) {
    
    this.collateralValue = collateralValue;
    return this;
  }

   /**
   * Total value of the collateral before any margin or haircut applied. Can be provided instead of PurchasePrice, so that PurchasePrice can be inferred from the CollateralValue and one of Haircut or Margin.
   * @return collateralValue
  **/
  @jakarta.annotation.Nullable
  public java.math.BigDecimal getCollateralValue() {
    return collateralValue;
  }


  public void setCollateralValue(java.math.BigDecimal collateralValue) {
    this.collateralValue = collateralValue;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Collateral collateral = (Collateral) o;
    return Objects.equals(this.buyerReceivesCashflows, collateral.buyerReceivesCashflows) &&
        Objects.equals(this.buyerReceivesCorporateActionPayments, collateral.buyerReceivesCorporateActionPayments) &&
        Objects.equals(this.collateralInstruments, collateral.collateralInstruments) &&
        (this.collateralValue.compareTo(collateral.getCollateralValue()) == 0);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(buyerReceivesCashflows, buyerReceivesCorporateActionPayments, collateralInstruments, collateralValue);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Collateral {\n");
    sb.append("    buyerReceivesCashflows: ").append(toIndentedString(buyerReceivesCashflows)).append("\n");
    sb.append("    buyerReceivesCorporateActionPayments: ").append(toIndentedString(buyerReceivesCorporateActionPayments)).append("\n");
    sb.append("    collateralInstruments: ").append(toIndentedString(collateralInstruments)).append("\n");
    sb.append("    collateralValue: ").append(toIndentedString(collateralValue)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("buyerReceivesCashflows");
    openapiFields.add("buyerReceivesCorporateActionPayments");
    openapiFields.add("collateralInstruments");
    openapiFields.add("collateralValue");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("buyerReceivesCashflows");
    openapiRequiredFields.add("buyerReceivesCorporateActionPayments");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to Collateral
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Collateral.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Collateral is not found in the empty JSON string", Collateral.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Collateral.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("collateralInstruments") != null && !jsonObj.get("collateralInstruments").isJsonNull()) {
        JsonArray jsonArraycollateralInstruments = jsonObj.getAsJsonArray("collateralInstruments");
        if (jsonArraycollateralInstruments != null) {
          // ensure the json data is an array
          if (!jsonObj.get("collateralInstruments").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `collateralInstruments` to be an array in the JSON string but got `%s`", jsonObj.get("collateralInstruments").toString()));
          }

          // validate the optional field `collateralInstruments` (array)
          for (int i = 0; i < jsonArraycollateralInstruments.size(); i++) {
            CollateralInstrument.validateJsonElement(jsonArraycollateralInstruments.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Collateral.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Collateral' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Collateral> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Collateral.class));

       return (TypeAdapter<T>) new TypeAdapter<Collateral>() {
           @Override
           public void write(JsonWriter out, Collateral value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Collateral read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Collateral given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Collateral
  * @throws IOException if the JSON string is invalid with respect to Collateral
  */
  public static Collateral fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Collateral.class);
  }

 /**
  * Convert an instance of Collateral to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
