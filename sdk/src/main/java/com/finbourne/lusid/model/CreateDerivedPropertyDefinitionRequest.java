/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import com.finbourne.lusid.model.ResourceId;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * CreateDerivedPropertyDefinitionRequest
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class CreateDerivedPropertyDefinitionRequest {
  /**
   * The domain that the property exists in. Not all available values are currently supported, please check the documentation: https://support.lusid.com/knowledgebase/article/KA-01719/. The available values are: NotDefined, Transaction, Portfolio, Holding, ReferenceHolding, TransactionConfiguration, Instrument, CutLabelDefinition, Analytic, PortfolioGroup, Person, AccessMetadata, Order, UnitResult, MarketData, ConfigurationRecipe, Allocation, Calendar, LegalEntity, Placement, Execution, Block, Participation, Package, OrderInstruction, NextBestAction, CustomEntity, InstrumentEvent, Account, ChartOfAccounts, CustodianAccount, Abor, AborConfiguration, Fund, FundConfiguration, Fee, Reconciliation, PropertyDefinition, Compliance, DiaryEntry, Leg, DerivedValuation, Timeline, AddressKeyDefinition, AmortisationRuleSet, AnalyticsSetInventory, AtomUnitResult, CleardownModule, ComplexMarketData, ComplianceRunSummary, ComplianceRule, ComplianceRunInfo, CorporateActionSource, CounterpartyAgreement, CustomEntityDefinition, DataType, Dialect, EventHandler, GeneralLedgerProfile, PostingModule, Quote, RecipeComposer, ReconciliationRunBreak, ReferenceList, RelationDefinition, ReturnBlockIndex, SRSDocument, SRSIndex, TransactionTemplate, TransactionTemplateScope, TransactionType, TransactionTypeConfig, TranslationScript, TaskDefinition, TaskInstance, Worker, StagingRuleSet
   */
  @JsonAdapter(DomainEnum.Adapter.class)
  public enum DomainEnum {
    NOTDEFINED("NotDefined"),
    
    TRANSACTION("Transaction"),
    
    PORTFOLIO("Portfolio"),
    
    HOLDING("Holding"),
    
    REFERENCEHOLDING("ReferenceHolding"),
    
    TRANSACTIONCONFIGURATION("TransactionConfiguration"),
    
    INSTRUMENT("Instrument"),
    
    CUTLABELDEFINITION("CutLabelDefinition"),
    
    ANALYTIC("Analytic"),
    
    PORTFOLIOGROUP("PortfolioGroup"),
    
    PERSON("Person"),
    
    ACCESSMETADATA("AccessMetadata"),
    
    ORDER("Order"),
    
    UNITRESULT("UnitResult"),
    
    MARKETDATA("MarketData"),
    
    CONFIGURATIONRECIPE("ConfigurationRecipe"),
    
    ALLOCATION("Allocation"),
    
    CALENDAR("Calendar"),
    
    LEGALENTITY("LegalEntity"),
    
    PLACEMENT("Placement"),
    
    EXECUTION("Execution"),
    
    BLOCK("Block"),
    
    PARTICIPATION("Participation"),
    
    PACKAGE("Package"),
    
    ORDERINSTRUCTION("OrderInstruction"),
    
    NEXTBESTACTION("NextBestAction"),
    
    CUSTOMENTITY("CustomEntity"),
    
    INSTRUMENTEVENT("InstrumentEvent"),
    
    ACCOUNT("Account"),
    
    CHARTOFACCOUNTS("ChartOfAccounts"),
    
    CUSTODIANACCOUNT("CustodianAccount"),
    
    ABOR("Abor"),
    
    ABORCONFIGURATION("AborConfiguration"),
    
    FUND("Fund"),
    
    FUNDCONFIGURATION("FundConfiguration"),
    
    FEE("Fee"),
    
    RECONCILIATION("Reconciliation"),
    
    PROPERTYDEFINITION("PropertyDefinition"),
    
    COMPLIANCE("Compliance"),
    
    DIARYENTRY("DiaryEntry"),
    
    LEG("Leg"),
    
    DERIVEDVALUATION("DerivedValuation"),
    
    TIMELINE("Timeline"),
    
    ADDRESSKEYDEFINITION("AddressKeyDefinition"),
    
    AMORTISATIONRULESET("AmortisationRuleSet"),
    
    ANALYTICSSETINVENTORY("AnalyticsSetInventory"),
    
    ATOMUNITRESULT("AtomUnitResult"),
    
    CLEARDOWNMODULE("CleardownModule"),
    
    COMPLEXMARKETDATA("ComplexMarketData"),
    
    COMPLIANCERUNSUMMARY("ComplianceRunSummary"),
    
    COMPLIANCERULE("ComplianceRule"),
    
    COMPLIANCERUNINFO("ComplianceRunInfo"),
    
    CORPORATEACTIONSOURCE("CorporateActionSource"),
    
    COUNTERPARTYAGREEMENT("CounterpartyAgreement"),
    
    CUSTOMENTITYDEFINITION("CustomEntityDefinition"),
    
    DATATYPE("DataType"),
    
    DIALECT("Dialect"),
    
    EVENTHANDLER("EventHandler"),
    
    GENERALLEDGERPROFILE("GeneralLedgerProfile"),
    
    POSTINGMODULE("PostingModule"),
    
    QUOTE("Quote"),
    
    RECIPECOMPOSER("RecipeComposer"),
    
    RECONCILIATIONRUNBREAK("ReconciliationRunBreak"),
    
    REFERENCELIST("ReferenceList"),
    
    RELATIONDEFINITION("RelationDefinition"),
    
    RETURNBLOCKINDEX("ReturnBlockIndex"),
    
    SRSDOCUMENT("SRSDocument"),
    
    SRSINDEX("SRSIndex"),
    
    TRANSACTIONTEMPLATE("TransactionTemplate"),
    
    TRANSACTIONTEMPLATESCOPE("TransactionTemplateScope"),
    
    TRANSACTIONTYPE("TransactionType"),
    
    TRANSACTIONTYPECONFIG("TransactionTypeConfig"),
    
    TRANSLATIONSCRIPT("TranslationScript"),
    
    TASKDEFINITION("TaskDefinition"),
    
    TASKINSTANCE("TaskInstance"),
    
    WORKER("Worker"),
    
    STAGINGRULESET("StagingRuleSet");

    private String value;

    DomainEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DomainEnum fromValue(String value) {
      for (DomainEnum b : DomainEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DomainEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DomainEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DomainEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DomainEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_DOMAIN = "domain";
  @SerializedName(SERIALIZED_NAME_DOMAIN)
  private DomainEnum domain;

  public static final String SERIALIZED_NAME_SCOPE = "scope";
  @SerializedName(SERIALIZED_NAME_SCOPE)
  private String scope;

  public static final String SERIALIZED_NAME_CODE = "code";
  @SerializedName(SERIALIZED_NAME_CODE)
  private String code;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_DATA_TYPE_ID = "dataTypeId";
  @SerializedName(SERIALIZED_NAME_DATA_TYPE_ID)
  private ResourceId dataTypeId;

  public static final String SERIALIZED_NAME_PROPERTY_DESCRIPTION = "propertyDescription";
  @SerializedName(SERIALIZED_NAME_PROPERTY_DESCRIPTION)
  private String propertyDescription;

  public static final String SERIALIZED_NAME_DERIVATION_FORMULA = "derivationFormula";
  @SerializedName(SERIALIZED_NAME_DERIVATION_FORMULA)
  private String derivationFormula;

  public CreateDerivedPropertyDefinitionRequest() {
  }

  public CreateDerivedPropertyDefinitionRequest domain(DomainEnum domain) {
    
    this.domain = domain;
    return this;
  }

   /**
   * The domain that the property exists in. Not all available values are currently supported, please check the documentation: https://support.lusid.com/knowledgebase/article/KA-01719/. The available values are: NotDefined, Transaction, Portfolio, Holding, ReferenceHolding, TransactionConfiguration, Instrument, CutLabelDefinition, Analytic, PortfolioGroup, Person, AccessMetadata, Order, UnitResult, MarketData, ConfigurationRecipe, Allocation, Calendar, LegalEntity, Placement, Execution, Block, Participation, Package, OrderInstruction, NextBestAction, CustomEntity, InstrumentEvent, Account, ChartOfAccounts, CustodianAccount, Abor, AborConfiguration, Fund, FundConfiguration, Fee, Reconciliation, PropertyDefinition, Compliance, DiaryEntry, Leg, DerivedValuation, Timeline, AddressKeyDefinition, AmortisationRuleSet, AnalyticsSetInventory, AtomUnitResult, CleardownModule, ComplexMarketData, ComplianceRunSummary, ComplianceRule, ComplianceRunInfo, CorporateActionSource, CounterpartyAgreement, CustomEntityDefinition, DataType, Dialect, EventHandler, GeneralLedgerProfile, PostingModule, Quote, RecipeComposer, ReconciliationRunBreak, ReferenceList, RelationDefinition, ReturnBlockIndex, SRSDocument, SRSIndex, TransactionTemplate, TransactionTemplateScope, TransactionType, TransactionTypeConfig, TranslationScript, TaskDefinition, TaskInstance, Worker, StagingRuleSet
   * @return domain
  **/
  @jakarta.annotation.Nonnull
  public DomainEnum getDomain() {
    return domain;
  }


  public void setDomain(DomainEnum domain) {
    this.domain = domain;
  }


  public CreateDerivedPropertyDefinitionRequest scope(String scope) {
    
    this.scope = scope;
    return this;
  }

   /**
   * The scope that the property exists in.
   * @return scope
  **/
  @jakarta.annotation.Nonnull
  public String getScope() {
    return scope;
  }


  public void setScope(String scope) {
    this.scope = scope;
  }


  public CreateDerivedPropertyDefinitionRequest code(String code) {
    
    this.code = code;
    return this;
  }

   /**
   * The code of the property. Together with the domain and scope this uniquely identifies the property.
   * @return code
  **/
  @jakarta.annotation.Nonnull
  public String getCode() {
    return code;
  }


  public void setCode(String code) {
    this.code = code;
  }


  public CreateDerivedPropertyDefinitionRequest displayName(String displayName) {
    
    this.displayName = displayName;
    return this;
  }

   /**
   * The display name of the property.
   * @return displayName
  **/
  @jakarta.annotation.Nonnull
  public String getDisplayName() {
    return displayName;
  }


  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public CreateDerivedPropertyDefinitionRequest dataTypeId(ResourceId dataTypeId) {
    
    this.dataTypeId = dataTypeId;
    return this;
  }

   /**
   * Get dataTypeId
   * @return dataTypeId
  **/
  @jakarta.annotation.Nonnull
  public ResourceId getDataTypeId() {
    return dataTypeId;
  }


  public void setDataTypeId(ResourceId dataTypeId) {
    this.dataTypeId = dataTypeId;
  }


  public CreateDerivedPropertyDefinitionRequest propertyDescription(String propertyDescription) {
    
    this.propertyDescription = propertyDescription;
    return this;
  }

   /**
   * Describes the property
   * @return propertyDescription
  **/
  @jakarta.annotation.Nullable
  public String getPropertyDescription() {
    return propertyDescription;
  }


  public void setPropertyDescription(String propertyDescription) {
    this.propertyDescription = propertyDescription;
  }


  public CreateDerivedPropertyDefinitionRequest derivationFormula(String derivationFormula) {
    
    this.derivationFormula = derivationFormula;
    return this;
  }

   /**
   * The rule that defines how data is composed for a derived property.
   * @return derivationFormula
  **/
  @jakarta.annotation.Nonnull
  public String getDerivationFormula() {
    return derivationFormula;
  }


  public void setDerivationFormula(String derivationFormula) {
    this.derivationFormula = derivationFormula;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateDerivedPropertyDefinitionRequest createDerivedPropertyDefinitionRequest = (CreateDerivedPropertyDefinitionRequest) o;
    return Objects.equals(this.domain, createDerivedPropertyDefinitionRequest.domain) &&
        Objects.equals(this.scope, createDerivedPropertyDefinitionRequest.scope) &&
        Objects.equals(this.code, createDerivedPropertyDefinitionRequest.code) &&
        Objects.equals(this.displayName, createDerivedPropertyDefinitionRequest.displayName) &&
        Objects.equals(this.dataTypeId, createDerivedPropertyDefinitionRequest.dataTypeId) &&
        Objects.equals(this.propertyDescription, createDerivedPropertyDefinitionRequest.propertyDescription) &&
        Objects.equals(this.derivationFormula, createDerivedPropertyDefinitionRequest.derivationFormula);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(domain, scope, code, displayName, dataTypeId, propertyDescription, derivationFormula);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateDerivedPropertyDefinitionRequest {\n");
    sb.append("    domain: ").append(toIndentedString(domain)).append("\n");
    sb.append("    scope: ").append(toIndentedString(scope)).append("\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    dataTypeId: ").append(toIndentedString(dataTypeId)).append("\n");
    sb.append("    propertyDescription: ").append(toIndentedString(propertyDescription)).append("\n");
    sb.append("    derivationFormula: ").append(toIndentedString(derivationFormula)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("domain");
    openapiFields.add("scope");
    openapiFields.add("code");
    openapiFields.add("displayName");
    openapiFields.add("dataTypeId");
    openapiFields.add("propertyDescription");
    openapiFields.add("derivationFormula");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("domain");
    openapiRequiredFields.add("scope");
    openapiRequiredFields.add("code");
    openapiRequiredFields.add("displayName");
    openapiRequiredFields.add("dataTypeId");
    openapiRequiredFields.add("derivationFormula");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to CreateDerivedPropertyDefinitionRequest
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateDerivedPropertyDefinitionRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateDerivedPropertyDefinitionRequest is not found in the empty JSON string", CreateDerivedPropertyDefinitionRequest.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateDerivedPropertyDefinitionRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("domain").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `domain` to be a primitive type in the JSON string but got `%s`", jsonObj.get("domain").toString()));
      }
      if (!jsonObj.get("scope").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `scope` to be a primitive type in the JSON string but got `%s`", jsonObj.get("scope").toString()));
      }
      if (!jsonObj.get("code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("code").toString()));
      }
      if (!jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      // validate the required field `dataTypeId`
      ResourceId.validateJsonElement(jsonObj.get("dataTypeId"));
      if ((jsonObj.get("propertyDescription") != null && !jsonObj.get("propertyDescription").isJsonNull()) && !jsonObj.get("propertyDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `propertyDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("propertyDescription").toString()));
      }
      if (!jsonObj.get("derivationFormula").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `derivationFormula` to be a primitive type in the JSON string but got `%s`", jsonObj.get("derivationFormula").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateDerivedPropertyDefinitionRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateDerivedPropertyDefinitionRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateDerivedPropertyDefinitionRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateDerivedPropertyDefinitionRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateDerivedPropertyDefinitionRequest>() {
           @Override
           public void write(JsonWriter out, CreateDerivedPropertyDefinitionRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateDerivedPropertyDefinitionRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CreateDerivedPropertyDefinitionRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CreateDerivedPropertyDefinitionRequest
  * @throws IOException if the JSON string is invalid with respect to CreateDerivedPropertyDefinitionRequest
  */
  public static CreateDerivedPropertyDefinitionRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateDerivedPropertyDefinitionRequest.class);
  }

 /**
  * Convert an instance of CreateDerivedPropertyDefinitionRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
