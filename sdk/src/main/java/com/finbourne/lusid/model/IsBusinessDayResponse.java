/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * Whether or not a DateTimeOffset is a business DateTime
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class IsBusinessDayResponse {
  public static final String SERIALIZED_NAME_REQUESTED_DATE_TIME = "requestedDateTime";
  @SerializedName(SERIALIZED_NAME_REQUESTED_DATE_TIME)
  private OffsetDateTime requestedDateTime;

  public static final String SERIALIZED_NAME_IS_BUSINESS_DAY = "isBusinessDay";
  @SerializedName(SERIALIZED_NAME_IS_BUSINESS_DAY)
  private Boolean isBusinessDay;

  public IsBusinessDayResponse() {
  }

  public IsBusinessDayResponse requestedDateTime(OffsetDateTime requestedDateTime) {
    
    this.requestedDateTime = requestedDateTime;
    return this;
  }

   /**
   * Get requestedDateTime
   * @return requestedDateTime
  **/
  @javax.annotation.Nonnull
  public OffsetDateTime getRequestedDateTime() {
    return requestedDateTime;
  }


  public void setRequestedDateTime(OffsetDateTime requestedDateTime) {
    this.requestedDateTime = requestedDateTime;
  }


  public IsBusinessDayResponse isBusinessDay(Boolean isBusinessDay) {
    
    this.isBusinessDay = isBusinessDay;
    return this;
  }

   /**
   * Get isBusinessDay
   * @return isBusinessDay
  **/
  @javax.annotation.Nonnull
  public Boolean getIsBusinessDay() {
    return isBusinessDay;
  }


  public void setIsBusinessDay(Boolean isBusinessDay) {
    this.isBusinessDay = isBusinessDay;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IsBusinessDayResponse isBusinessDayResponse = (IsBusinessDayResponse) o;
    return Objects.equals(this.requestedDateTime, isBusinessDayResponse.requestedDateTime) &&
        Objects.equals(this.isBusinessDay, isBusinessDayResponse.isBusinessDay);
  }

  @Override
  public int hashCode() {
    return Objects.hash(requestedDateTime, isBusinessDay);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IsBusinessDayResponse {\n");
    sb.append("    requestedDateTime: ").append(toIndentedString(requestedDateTime)).append("\n");
    sb.append("    isBusinessDay: ").append(toIndentedString(isBusinessDay)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("requestedDateTime");
    openapiFields.add("isBusinessDay");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("requestedDateTime");
    openapiRequiredFields.add("isBusinessDay");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to IsBusinessDayResponse
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!IsBusinessDayResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IsBusinessDayResponse is not found in the empty JSON string", IsBusinessDayResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!IsBusinessDayResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IsBusinessDayResponse` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : IsBusinessDayResponse.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IsBusinessDayResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IsBusinessDayResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IsBusinessDayResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IsBusinessDayResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<IsBusinessDayResponse>() {
           @Override
           public void write(JsonWriter out, IsBusinessDayResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IsBusinessDayResponse read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of IsBusinessDayResponse given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of IsBusinessDayResponse
  * @throws IOException if the JSON string is invalid with respect to IsBusinessDayResponse
  */
  public static IsBusinessDayResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IsBusinessDayResponse.class);
  }

 /**
  * Convert an instance of IsBusinessDayResponse to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
