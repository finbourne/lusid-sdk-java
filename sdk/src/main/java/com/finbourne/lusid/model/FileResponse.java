/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import com.finbourne.lusid.model.Stream;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * Allows a file (represented as a stream) to be returned from an Api call
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class FileResponse {
  public static final String SERIALIZED_NAME_FILE_STREAM = "fileStream";
  @SerializedName(SERIALIZED_NAME_FILE_STREAM)
  private Stream fileStream;

  public static final String SERIALIZED_NAME_CONTENT_TYPE = "contentType";
  @SerializedName(SERIALIZED_NAME_CONTENT_TYPE)
  private String contentType;

  public static final String SERIALIZED_NAME_DOWNLOADED_FILENAME = "downloadedFilename";
  @SerializedName(SERIALIZED_NAME_DOWNLOADED_FILENAME)
  private String downloadedFilename;

  public FileResponse() {
  }

  public FileResponse fileStream(Stream fileStream) {
    
    this.fileStream = fileStream;
    return this;
  }

   /**
   * Get fileStream
   * @return fileStream
  **/
  @jakarta.annotation.Nullable
  public Stream getFileStream() {
    return fileStream;
  }


  public void setFileStream(Stream fileStream) {
    this.fileStream = fileStream;
  }


  public FileResponse contentType(String contentType) {
    
    this.contentType = contentType;
    return this;
  }

   /**
   * Get contentType
   * @return contentType
  **/
  @jakarta.annotation.Nullable
  public String getContentType() {
    return contentType;
  }


  public void setContentType(String contentType) {
    this.contentType = contentType;
  }


  public FileResponse downloadedFilename(String downloadedFilename) {
    
    this.downloadedFilename = downloadedFilename;
    return this;
  }

   /**
   * Get downloadedFilename
   * @return downloadedFilename
  **/
  @jakarta.annotation.Nullable
  public String getDownloadedFilename() {
    return downloadedFilename;
  }


  public void setDownloadedFilename(String downloadedFilename) {
    this.downloadedFilename = downloadedFilename;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FileResponse fileResponse = (FileResponse) o;
    return Objects.equals(this.fileStream, fileResponse.fileStream) &&
        Objects.equals(this.contentType, fileResponse.contentType) &&
        Objects.equals(this.downloadedFilename, fileResponse.downloadedFilename);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(fileStream, contentType, downloadedFilename);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FileResponse {\n");
    sb.append("    fileStream: ").append(toIndentedString(fileStream)).append("\n");
    sb.append("    contentType: ").append(toIndentedString(contentType)).append("\n");
    sb.append("    downloadedFilename: ").append(toIndentedString(downloadedFilename)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("fileStream");
    openapiFields.add("contentType");
    openapiFields.add("downloadedFilename");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to FileResponse
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!FileResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FileResponse is not found in the empty JSON string", FileResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!FileResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FileResponse` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      // validate the optional field `fileStream`
      if (jsonObj.get("fileStream") != null && !jsonObj.get("fileStream").isJsonNull()) {
        Stream.validateJsonObject(jsonObj.getAsJsonObject("fileStream"));
      }
      if ((jsonObj.get("contentType") != null && !jsonObj.get("contentType").isJsonNull()) && !jsonObj.get("contentType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contentType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contentType").toString()));
      }
      if ((jsonObj.get("downloadedFilename") != null && !jsonObj.get("downloadedFilename").isJsonNull()) && !jsonObj.get("downloadedFilename").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `downloadedFilename` to be a primitive type in the JSON string but got `%s`", jsonObj.get("downloadedFilename").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FileResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FileResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FileResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FileResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<FileResponse>() {
           @Override
           public void write(JsonWriter out, FileResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FileResponse read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of FileResponse given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of FileResponse
  * @throws IOException if the JSON string is invalid with respect to FileResponse
  */
  public static FileResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FileResponse.class);
  }

 /**
  * Convert an instance of FileResponse to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
