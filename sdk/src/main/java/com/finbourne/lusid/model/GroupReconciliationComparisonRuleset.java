/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import com.finbourne.lusid.model.GroupReconciliationAggregateAttributeRule;
import com.finbourne.lusid.model.GroupReconciliationCoreAttributeRule;
import com.finbourne.lusid.model.Link;
import com.finbourne.lusid.model.ResourceId;
import com.finbourne.lusid.model.Version;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.net.URI;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * GroupReconciliationComparisonRuleset
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class GroupReconciliationComparisonRuleset {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private ResourceId id;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_RECONCILIATION_TYPE = "reconciliationType";
  @SerializedName(SERIALIZED_NAME_RECONCILIATION_TYPE)
  private String reconciliationType;

  public static final String SERIALIZED_NAME_CORE_ATTRIBUTE_RULES = "coreAttributeRules";
  @SerializedName(SERIALIZED_NAME_CORE_ATTRIBUTE_RULES)
  private List<GroupReconciliationCoreAttributeRule> coreAttributeRules = new ArrayList<>();

  public static final String SERIALIZED_NAME_AGGREGATE_ATTRIBUTE_RULES = "aggregateAttributeRules";
  @SerializedName(SERIALIZED_NAME_AGGREGATE_ATTRIBUTE_RULES)
  private List<GroupReconciliationAggregateAttributeRule> aggregateAttributeRules = new ArrayList<>();

  public static final String SERIALIZED_NAME_HREF = "href";
  @SerializedName(SERIALIZED_NAME_HREF)
  private URI href;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private Version version;

  public static final String SERIALIZED_NAME_LINKS = "links";
  @SerializedName(SERIALIZED_NAME_LINKS)
  private List<Link> links;

  public GroupReconciliationComparisonRuleset() {
  }

  public GroupReconciliationComparisonRuleset id(ResourceId id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @jakarta.annotation.Nonnull
  public ResourceId getId() {
    return id;
  }


  public void setId(ResourceId id) {
    this.id = id;
  }


  public GroupReconciliationComparisonRuleset displayName(String displayName) {
    
    this.displayName = displayName;
    return this;
  }

   /**
   * The name of the ruleset
   * @return displayName
  **/
  @jakarta.annotation.Nonnull
  public String getDisplayName() {
    return displayName;
  }


  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public GroupReconciliationComparisonRuleset reconciliationType(String reconciliationType) {
    
    this.reconciliationType = reconciliationType;
    return this;
  }

   /**
   * The type of reconciliation to perform. \&quot;Holding\&quot; | \&quot;Transaction\&quot; | \&quot;Valuation\&quot;
   * @return reconciliationType
  **/
  @jakarta.annotation.Nonnull
  public String getReconciliationType() {
    return reconciliationType;
  }


  public void setReconciliationType(String reconciliationType) {
    this.reconciliationType = reconciliationType;
  }


  public GroupReconciliationComparisonRuleset coreAttributeRules(List<GroupReconciliationCoreAttributeRule> coreAttributeRules) {
    
    this.coreAttributeRules = coreAttributeRules;
    return this;
  }

  public GroupReconciliationComparisonRuleset addCoreAttributeRulesItem(GroupReconciliationCoreAttributeRule coreAttributeRulesItem) {
    if (this.coreAttributeRules == null) {
      this.coreAttributeRules = new ArrayList<>();
    }
    this.coreAttributeRules.add(coreAttributeRulesItem);
    return this;
  }

   /**
   * The core comparison rules
   * @return coreAttributeRules
  **/
  @jakarta.annotation.Nonnull
  public List<GroupReconciliationCoreAttributeRule> getCoreAttributeRules() {
    return coreAttributeRules;
  }


  public void setCoreAttributeRules(List<GroupReconciliationCoreAttributeRule> coreAttributeRules) {
    this.coreAttributeRules = coreAttributeRules;
  }


  public GroupReconciliationComparisonRuleset aggregateAttributeRules(List<GroupReconciliationAggregateAttributeRule> aggregateAttributeRules) {
    
    this.aggregateAttributeRules = aggregateAttributeRules;
    return this;
  }

  public GroupReconciliationComparisonRuleset addAggregateAttributeRulesItem(GroupReconciliationAggregateAttributeRule aggregateAttributeRulesItem) {
    if (this.aggregateAttributeRules == null) {
      this.aggregateAttributeRules = new ArrayList<>();
    }
    this.aggregateAttributeRules.add(aggregateAttributeRulesItem);
    return this;
  }

   /**
   * The aggregate comparison rules
   * @return aggregateAttributeRules
  **/
  @jakarta.annotation.Nonnull
  public List<GroupReconciliationAggregateAttributeRule> getAggregateAttributeRules() {
    return aggregateAttributeRules;
  }


  public void setAggregateAttributeRules(List<GroupReconciliationAggregateAttributeRule> aggregateAttributeRules) {
    this.aggregateAttributeRules = aggregateAttributeRules;
  }


  public GroupReconciliationComparisonRuleset href(URI href) {
    
    this.href = href;
    return this;
  }

   /**
   * The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.
   * @return href
  **/
  @jakarta.annotation.Nullable
  public URI getHref() {
    return href;
  }


  public void setHref(URI href) {
    this.href = href;
  }


  public GroupReconciliationComparisonRuleset version(Version version) {
    
    this.version = version;
    return this;
  }

   /**
   * Get version
   * @return version
  **/
  @jakarta.annotation.Nullable
  public Version getVersion() {
    return version;
  }


  public void setVersion(Version version) {
    this.version = version;
  }


  public GroupReconciliationComparisonRuleset links(List<Link> links) {
    
    this.links = links;
    return this;
  }

  public GroupReconciliationComparisonRuleset addLinksItem(Link linksItem) {
    if (this.links == null) {
      this.links = new ArrayList<>();
    }
    this.links.add(linksItem);
    return this;
  }

   /**
   * Get links
   * @return links
  **/
  @jakarta.annotation.Nullable
  public List<Link> getLinks() {
    return links;
  }


  public void setLinks(List<Link> links) {
    this.links = links;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GroupReconciliationComparisonRuleset groupReconciliationComparisonRuleset = (GroupReconciliationComparisonRuleset) o;
    return Objects.equals(this.id, groupReconciliationComparisonRuleset.id) &&
        Objects.equals(this.displayName, groupReconciliationComparisonRuleset.displayName) &&
        Objects.equals(this.reconciliationType, groupReconciliationComparisonRuleset.reconciliationType) &&
        Objects.equals(this.coreAttributeRules, groupReconciliationComparisonRuleset.coreAttributeRules) &&
        Objects.equals(this.aggregateAttributeRules, groupReconciliationComparisonRuleset.aggregateAttributeRules) &&
        Objects.equals(this.href, groupReconciliationComparisonRuleset.href) &&
        Objects.equals(this.version, groupReconciliationComparisonRuleset.version) &&
        Objects.equals(this.links, groupReconciliationComparisonRuleset.links);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, displayName, reconciliationType, coreAttributeRules, aggregateAttributeRules, href, version, links);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GroupReconciliationComparisonRuleset {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    reconciliationType: ").append(toIndentedString(reconciliationType)).append("\n");
    sb.append("    coreAttributeRules: ").append(toIndentedString(coreAttributeRules)).append("\n");
    sb.append("    aggregateAttributeRules: ").append(toIndentedString(aggregateAttributeRules)).append("\n");
    sb.append("    href: ").append(toIndentedString(href)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("displayName");
    openapiFields.add("reconciliationType");
    openapiFields.add("coreAttributeRules");
    openapiFields.add("aggregateAttributeRules");
    openapiFields.add("href");
    openapiFields.add("version");
    openapiFields.add("links");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("displayName");
    openapiRequiredFields.add("reconciliationType");
    openapiRequiredFields.add("coreAttributeRules");
    openapiRequiredFields.add("aggregateAttributeRules");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to GroupReconciliationComparisonRuleset
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GroupReconciliationComparisonRuleset.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GroupReconciliationComparisonRuleset is not found in the empty JSON string", GroupReconciliationComparisonRuleset.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GroupReconciliationComparisonRuleset.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `id`
      ResourceId.validateJsonElement(jsonObj.get("id"));
      if (!jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if (!jsonObj.get("reconciliationType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reconciliationType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reconciliationType").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("coreAttributeRules").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `coreAttributeRules` to be an array in the JSON string but got `%s`", jsonObj.get("coreAttributeRules").toString()));
      }

      JsonArray jsonArraycoreAttributeRules = jsonObj.getAsJsonArray("coreAttributeRules");
      // validate the required field `coreAttributeRules` (array)
      for (int i = 0; i < jsonArraycoreAttributeRules.size(); i++) {
        GroupReconciliationCoreAttributeRule.validateJsonElement(jsonArraycoreAttributeRules.get(i));
      };
      // ensure the json data is an array
      if (!jsonObj.get("aggregateAttributeRules").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `aggregateAttributeRules` to be an array in the JSON string but got `%s`", jsonObj.get("aggregateAttributeRules").toString()));
      }

      JsonArray jsonArrayaggregateAttributeRules = jsonObj.getAsJsonArray("aggregateAttributeRules");
      // validate the required field `aggregateAttributeRules` (array)
      for (int i = 0; i < jsonArrayaggregateAttributeRules.size(); i++) {
        GroupReconciliationAggregateAttributeRule.validateJsonElement(jsonArrayaggregateAttributeRules.get(i));
      };
      if ((jsonObj.get("href") != null && !jsonObj.get("href").isJsonNull()) && !jsonObj.get("href").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `href` to be a primitive type in the JSON string but got `%s`", jsonObj.get("href").toString()));
      }
      // validate the optional field `version`
      if (jsonObj.get("version") != null && !jsonObj.get("version").isJsonNull()) {
        Version.validateJsonElement(jsonObj.get("version"));
      }
      if (jsonObj.get("links") != null && !jsonObj.get("links").isJsonNull()) {
        JsonArray jsonArraylinks = jsonObj.getAsJsonArray("links");
        if (jsonArraylinks != null) {
          // ensure the json data is an array
          if (!jsonObj.get("links").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `links` to be an array in the JSON string but got `%s`", jsonObj.get("links").toString()));
          }

          // validate the optional field `links` (array)
          for (int i = 0; i < jsonArraylinks.size(); i++) {
            Link.validateJsonElement(jsonArraylinks.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GroupReconciliationComparisonRuleset.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GroupReconciliationComparisonRuleset' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GroupReconciliationComparisonRuleset> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GroupReconciliationComparisonRuleset.class));

       return (TypeAdapter<T>) new TypeAdapter<GroupReconciliationComparisonRuleset>() {
           @Override
           public void write(JsonWriter out, GroupReconciliationComparisonRuleset value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GroupReconciliationComparisonRuleset read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of GroupReconciliationComparisonRuleset given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of GroupReconciliationComparisonRuleset
  * @throws IOException if the JSON string is invalid with respect to GroupReconciliationComparisonRuleset
  */
  public static GroupReconciliationComparisonRuleset fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GroupReconciliationComparisonRuleset.class);
  }

 /**
  * Convert an instance of GroupReconciliationComparisonRuleset to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
