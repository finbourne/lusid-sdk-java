/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import com.finbourne.lusid.model.Property;
import com.finbourne.lusid.model.WeekendMask;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * UpdateCalendarRequest
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class UpdateCalendarRequest {
  public static final String SERIALIZED_NAME_WEEKEND_MASK = "weekendMask";
  @SerializedName(SERIALIZED_NAME_WEEKEND_MASK)
  private WeekendMask weekendMask;

  public static final String SERIALIZED_NAME_SOURCE_PROVIDER = "sourceProvider";
  @SerializedName(SERIALIZED_NAME_SOURCE_PROVIDER)
  private String sourceProvider;

  public static final String SERIALIZED_NAME_PROPERTIES = "properties";
  @SerializedName(SERIALIZED_NAME_PROPERTIES)
  private List<Property> properties = new ArrayList<>();

  public UpdateCalendarRequest() {
  }

  public UpdateCalendarRequest weekendMask(WeekendMask weekendMask) {
    
    this.weekendMask = weekendMask;
    return this;
  }

   /**
   * Get weekendMask
   * @return weekendMask
  **/
  @jakarta.annotation.Nonnull
  public WeekendMask getWeekendMask() {
    return weekendMask;
  }


  public void setWeekendMask(WeekendMask weekendMask) {
    this.weekendMask = weekendMask;
  }


  public UpdateCalendarRequest sourceProvider(String sourceProvider) {
    
    this.sourceProvider = sourceProvider;
    return this;
  }

   /**
   * Get sourceProvider
   * @return sourceProvider
  **/
  @jakarta.annotation.Nonnull
  public String getSourceProvider() {
    return sourceProvider;
  }


  public void setSourceProvider(String sourceProvider) {
    this.sourceProvider = sourceProvider;
  }


  public UpdateCalendarRequest properties(List<Property> properties) {
    
    this.properties = properties;
    return this;
  }

  public UpdateCalendarRequest addPropertiesItem(Property propertiesItem) {
    if (this.properties == null) {
      this.properties = new ArrayList<>();
    }
    this.properties.add(propertiesItem);
    return this;
  }

   /**
   * Get properties
   * @return properties
  **/
  @jakarta.annotation.Nonnull
  public List<Property> getProperties() {
    return properties;
  }


  public void setProperties(List<Property> properties) {
    this.properties = properties;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateCalendarRequest updateCalendarRequest = (UpdateCalendarRequest) o;
    return Objects.equals(this.weekendMask, updateCalendarRequest.weekendMask) &&
        Objects.equals(this.sourceProvider, updateCalendarRequest.sourceProvider) &&
        Objects.equals(this.properties, updateCalendarRequest.properties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(weekendMask, sourceProvider, properties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateCalendarRequest {\n");
    sb.append("    weekendMask: ").append(toIndentedString(weekendMask)).append("\n");
    sb.append("    sourceProvider: ").append(toIndentedString(sourceProvider)).append("\n");
    sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("weekendMask");
    openapiFields.add("sourceProvider");
    openapiFields.add("properties");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("weekendMask");
    openapiRequiredFields.add("sourceProvider");
    openapiRequiredFields.add("properties");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to UpdateCalendarRequest
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateCalendarRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateCalendarRequest is not found in the empty JSON string", UpdateCalendarRequest.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UpdateCalendarRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `weekendMask`
      WeekendMask.validateJsonElement(jsonObj.get("weekendMask"));
      if (!jsonObj.get("sourceProvider").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourceProvider` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sourceProvider").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("properties").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `properties` to be an array in the JSON string but got `%s`", jsonObj.get("properties").toString()));
      }

      JsonArray jsonArrayproperties = jsonObj.getAsJsonArray("properties");
      // validate the required field `properties` (array)
      for (int i = 0; i < jsonArrayproperties.size(); i++) {
        Property.validateJsonElement(jsonArrayproperties.get(i));
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateCalendarRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateCalendarRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateCalendarRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateCalendarRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateCalendarRequest>() {
           @Override
           public void write(JsonWriter out, UpdateCalendarRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateCalendarRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of UpdateCalendarRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of UpdateCalendarRequest
  * @throws IOException if the JSON string is invalid with respect to UpdateCalendarRequest
  */
  public static UpdateCalendarRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateCalendarRequest.class);
  }

 /**
  * Convert an instance of UpdateCalendarRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
