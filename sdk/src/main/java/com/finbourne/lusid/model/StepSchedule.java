/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import com.finbourne.lusid.model.LevelStep;
import com.finbourne.lusid.model.Schedule;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * Schedule that steps at known dated points in time.  Used in representation of a sinking bond, also called amortisation, steps in coupons for fixed bonds and spreads for floating bonds.
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class StepSchedule extends Schedule {
  public static final String SERIALIZED_NAME_LEVEL_TYPE = "levelType";
  @SerializedName(SERIALIZED_NAME_LEVEL_TYPE)
  private String levelType;

  public static final String SERIALIZED_NAME_STEP_SCHEDULE_TYPE = "stepScheduleType";
  @SerializedName(SERIALIZED_NAME_STEP_SCHEDULE_TYPE)
  private String stepScheduleType;

  public static final String SERIALIZED_NAME_STEPS = "steps";
  @SerializedName(SERIALIZED_NAME_STEPS)
  private List<LevelStep> steps = new ArrayList<>();

  public StepSchedule() {
    // this.scheduleType = this.getClass().getSimpleName();
  }

  public StepSchedule levelType(String levelType) {
    
    this.levelType = levelType;
    return this;
  }

   /**
   * The type of shift or adjustment that the quantity represents.    Supported string (enumeration) values are: [Absolute, AbsoluteShift, Percentage, AbsolutePercentage].
   * @return levelType
  **/
  @jakarta.annotation.Nonnull
  public String getLevelType() {
    return levelType;
  }


  public void setLevelType(String levelType) {
    this.levelType = levelType;
  }


  public StepSchedule stepScheduleType(String stepScheduleType) {
    
    this.stepScheduleType = stepScheduleType;
    return this;
  }

   /**
   * The type of step that this schedule is for.  Supported string (enumeration) values are: [Coupon, Notional, Spread].
   * @return stepScheduleType
  **/
  @jakarta.annotation.Nonnull
  public String getStepScheduleType() {
    return stepScheduleType;
  }


  public void setStepScheduleType(String stepScheduleType) {
    this.stepScheduleType = stepScheduleType;
  }


  public StepSchedule steps(List<LevelStep> steps) {
    
    this.steps = steps;
    return this;
  }

  public StepSchedule addStepsItem(LevelStep stepsItem) {
    if (this.steps == null) {
      this.steps = new ArrayList<>();
    }
    this.steps.add(stepsItem);
    return this;
  }

   /**
   * The level steps which are applied.
   * @return steps
  **/
  @jakarta.annotation.Nonnull
  public List<LevelStep> getSteps() {
    return steps;
  }


  public void setSteps(List<LevelStep> steps) {
    this.steps = steps;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StepSchedule stepSchedule = (StepSchedule) o;
    return Objects.equals(this.levelType, stepSchedule.levelType) &&
        Objects.equals(this.stepScheduleType, stepSchedule.stepScheduleType) &&
        Objects.equals(this.steps, stepSchedule.steps) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(levelType, stepScheduleType, steps, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StepSchedule {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    levelType: ").append(toIndentedString(levelType)).append("\n");
    sb.append("    stepScheduleType: ").append(toIndentedString(stepScheduleType)).append("\n");
    sb.append("    steps: ").append(toIndentedString(steps)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("scheduleType");
    openapiFields.add("levelType");
    openapiFields.add("stepScheduleType");
    openapiFields.add("steps");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("levelType");
    openapiRequiredFields.add("stepScheduleType");
    openapiRequiredFields.add("steps");
    openapiRequiredFields.add("scheduleType");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to StepSchedule
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StepSchedule.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StepSchedule is not found in the empty JSON string", StepSchedule.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : StepSchedule.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StepSchedule.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StepSchedule' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StepSchedule> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StepSchedule.class));

       return (TypeAdapter<T>) new TypeAdapter<StepSchedule>() {
           @Override
           public void write(JsonWriter out, StepSchedule value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StepSchedule read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of StepSchedule given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of StepSchedule
  * @throws IOException if the JSON string is invalid with respect to StepSchedule
  */
  public static StepSchedule fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StepSchedule.class);
  }

 /**
  * Convert an instance of StepSchedule to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
