/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import java.util.Arrays;
import com.finbourne.lusid.model.ResourceId;
import com.finbourne.lusid.model.Version;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.net.URI;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * Representation of a relation containing details of source and target entities, and both outward and inward descriptions.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class CompleteRelation {
  public static final String SERIALIZED_NAME_HREF = "href";
  @SerializedName(SERIALIZED_NAME_HREF)
  private URI href;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private Version version;

  public static final String SERIALIZED_NAME_RELATION_DEFINITION_ID = "relationDefinitionId";
  @SerializedName(SERIALIZED_NAME_RELATION_DEFINITION_ID)
  private ResourceId relationDefinitionId;

  public static final String SERIALIZED_NAME_SOURCE_ENTITY_ID = "sourceEntityId";
  @SerializedName(SERIALIZED_NAME_SOURCE_ENTITY_ID)
  private Map<String, String> sourceEntityId = new HashMap<>();

  public static final String SERIALIZED_NAME_TARGET_ENTITY_ID = "targetEntityId";
  @SerializedName(SERIALIZED_NAME_TARGET_ENTITY_ID)
  private Map<String, String> targetEntityId = new HashMap<>();

  public static final String SERIALIZED_NAME_OUTWARD_DESCRIPTION = "outwardDescription";
  @SerializedName(SERIALIZED_NAME_OUTWARD_DESCRIPTION)
  private String outwardDescription;

  public static final String SERIALIZED_NAME_INWARD_DESCRIPTION = "inwardDescription";
  @SerializedName(SERIALIZED_NAME_INWARD_DESCRIPTION)
  private String inwardDescription;

  public static final String SERIALIZED_NAME_EFFECTIVE_FROM = "effectiveFrom";
  @SerializedName(SERIALIZED_NAME_EFFECTIVE_FROM)
  private OffsetDateTime effectiveFrom;

  public CompleteRelation() {
  }

  public CompleteRelation href(URI href) {
    
    this.href = href;
    return this;
  }

   /**
   * Get href
   * @return href
  **/
  @javax.annotation.Nullable
  public URI getHref() {
    return href;
  }


  public void setHref(URI href) {
    this.href = href;
  }


  public CompleteRelation version(Version version) {
    
    this.version = version;
    return this;
  }

   /**
   * Get version
   * @return version
  **/
  @javax.annotation.Nullable
  public Version getVersion() {
    return version;
  }


  public void setVersion(Version version) {
    this.version = version;
  }


  public CompleteRelation relationDefinitionId(ResourceId relationDefinitionId) {
    
    this.relationDefinitionId = relationDefinitionId;
    return this;
  }

   /**
   * Get relationDefinitionId
   * @return relationDefinitionId
  **/
  @javax.annotation.Nonnull
  public ResourceId getRelationDefinitionId() {
    return relationDefinitionId;
  }


  public void setRelationDefinitionId(ResourceId relationDefinitionId) {
    this.relationDefinitionId = relationDefinitionId;
  }


  public CompleteRelation sourceEntityId(Map<String, String> sourceEntityId) {
    
    this.sourceEntityId = sourceEntityId;
    return this;
  }

  public CompleteRelation putSourceEntityIdItem(String key, String sourceEntityIdItem) {
    if (this.sourceEntityId == null) {
      this.sourceEntityId = new HashMap<>();
    }
    this.sourceEntityId.put(key, sourceEntityIdItem);
    return this;
  }

   /**
   * Get sourceEntityId
   * @return sourceEntityId
  **/
  @javax.annotation.Nonnull
  public Map<String, String> getSourceEntityId() {
    return sourceEntityId;
  }


  public void setSourceEntityId(Map<String, String> sourceEntityId) {
    this.sourceEntityId = sourceEntityId;
  }


  public CompleteRelation targetEntityId(Map<String, String> targetEntityId) {
    
    this.targetEntityId = targetEntityId;
    return this;
  }

  public CompleteRelation putTargetEntityIdItem(String key, String targetEntityIdItem) {
    if (this.targetEntityId == null) {
      this.targetEntityId = new HashMap<>();
    }
    this.targetEntityId.put(key, targetEntityIdItem);
    return this;
  }

   /**
   * Get targetEntityId
   * @return targetEntityId
  **/
  @javax.annotation.Nonnull
  public Map<String, String> getTargetEntityId() {
    return targetEntityId;
  }


  public void setTargetEntityId(Map<String, String> targetEntityId) {
    this.targetEntityId = targetEntityId;
  }


  public CompleteRelation outwardDescription(String outwardDescription) {
    
    this.outwardDescription = outwardDescription;
    return this;
  }

   /**
   * Get outwardDescription
   * @return outwardDescription
  **/
  @javax.annotation.Nonnull
  public String getOutwardDescription() {
    return outwardDescription;
  }


  public void setOutwardDescription(String outwardDescription) {
    this.outwardDescription = outwardDescription;
  }


  public CompleteRelation inwardDescription(String inwardDescription) {
    
    this.inwardDescription = inwardDescription;
    return this;
  }

   /**
   * Get inwardDescription
   * @return inwardDescription
  **/
  @javax.annotation.Nonnull
  public String getInwardDescription() {
    return inwardDescription;
  }


  public void setInwardDescription(String inwardDescription) {
    this.inwardDescription = inwardDescription;
  }


  public CompleteRelation effectiveFrom(OffsetDateTime effectiveFrom) {
    
    this.effectiveFrom = effectiveFrom;
    return this;
  }

   /**
   * Get effectiveFrom
   * @return effectiveFrom
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getEffectiveFrom() {
    return effectiveFrom;
  }


  public void setEffectiveFrom(OffsetDateTime effectiveFrom) {
    this.effectiveFrom = effectiveFrom;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CompleteRelation completeRelation = (CompleteRelation) o;
    return Objects.equals(this.href, completeRelation.href) &&
        Objects.equals(this.version, completeRelation.version) &&
        Objects.equals(this.relationDefinitionId, completeRelation.relationDefinitionId) &&
        Objects.equals(this.sourceEntityId, completeRelation.sourceEntityId) &&
        Objects.equals(this.targetEntityId, completeRelation.targetEntityId) &&
        Objects.equals(this.outwardDescription, completeRelation.outwardDescription) &&
        Objects.equals(this.inwardDescription, completeRelation.inwardDescription) &&
        Objects.equals(this.effectiveFrom, completeRelation.effectiveFrom);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(href, version, relationDefinitionId, sourceEntityId, targetEntityId, outwardDescription, inwardDescription, effectiveFrom);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CompleteRelation {\n");
    sb.append("    href: ").append(toIndentedString(href)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    relationDefinitionId: ").append(toIndentedString(relationDefinitionId)).append("\n");
    sb.append("    sourceEntityId: ").append(toIndentedString(sourceEntityId)).append("\n");
    sb.append("    targetEntityId: ").append(toIndentedString(targetEntityId)).append("\n");
    sb.append("    outwardDescription: ").append(toIndentedString(outwardDescription)).append("\n");
    sb.append("    inwardDescription: ").append(toIndentedString(inwardDescription)).append("\n");
    sb.append("    effectiveFrom: ").append(toIndentedString(effectiveFrom)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("href");
    openapiFields.add("version");
    openapiFields.add("relationDefinitionId");
    openapiFields.add("sourceEntityId");
    openapiFields.add("targetEntityId");
    openapiFields.add("outwardDescription");
    openapiFields.add("inwardDescription");
    openapiFields.add("effectiveFrom");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("relationDefinitionId");
    openapiRequiredFields.add("sourceEntityId");
    openapiRequiredFields.add("targetEntityId");
    openapiRequiredFields.add("outwardDescription");
    openapiRequiredFields.add("inwardDescription");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CompleteRelation
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!CompleteRelation.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CompleteRelation is not found in the empty JSON string", CompleteRelation.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!CompleteRelation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CompleteRelation` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CompleteRelation.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("href") != null && !jsonObj.get("href").isJsonNull()) && !jsonObj.get("href").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `href` to be a primitive type in the JSON string but got `%s`", jsonObj.get("href").toString()));
      }
      // validate the optional field `version`
      if (jsonObj.get("version") != null && !jsonObj.get("version").isJsonNull()) {
        Version.validateJsonObject(jsonObj.getAsJsonObject("version"));
      }
      // validate the required field `relationDefinitionId`
      ResourceId.validateJsonObject(jsonObj.getAsJsonObject("relationDefinitionId"));
      if (!jsonObj.get("outwardDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `outwardDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("outwardDescription").toString()));
      }
      if (!jsonObj.get("inwardDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `inwardDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("inwardDescription").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CompleteRelation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CompleteRelation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CompleteRelation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CompleteRelation.class));

       return (TypeAdapter<T>) new TypeAdapter<CompleteRelation>() {
           @Override
           public void write(JsonWriter out, CompleteRelation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CompleteRelation read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CompleteRelation given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CompleteRelation
  * @throws IOException if the JSON string is invalid with respect to CompleteRelation
  */
  public static CompleteRelation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CompleteRelation.class);
  }

 /**
  * Convert an instance of CompleteRelation to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
