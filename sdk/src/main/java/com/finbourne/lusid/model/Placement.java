/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import java.util.Arrays;
import com.finbourne.lusid.model.CurrencyAndAmount;
import com.finbourne.lusid.model.Link;
import com.finbourne.lusid.model.PerpetualProperty;
import com.finbourne.lusid.model.ResourceId;
import com.finbourne.lusid.model.Version;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * A street order for a quantity of a single instrument placed with a single market entity.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class Placement {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private ResourceId id;

  public static final String SERIALIZED_NAME_PARENT_PLACEMENT_ID = "parentPlacementId";
  @SerializedName(SERIALIZED_NAME_PARENT_PLACEMENT_ID)
  private ResourceId parentPlacementId;

  public static final String SERIALIZED_NAME_BLOCK_IDS = "blockIds";
  @SerializedName(SERIALIZED_NAME_BLOCK_IDS)
  private List<ResourceId> blockIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_PROPERTIES = "properties";
  @SerializedName(SERIALIZED_NAME_PROPERTIES)
  private Map<String, PerpetualProperty> properties;

  public static final String SERIALIZED_NAME_INSTRUMENT_IDENTIFIERS = "instrumentIdentifiers";
  @SerializedName(SERIALIZED_NAME_INSTRUMENT_IDENTIFIERS)
  private Map<String, String> instrumentIdentifiers = new HashMap<>();

  public static final String SERIALIZED_NAME_LUSID_INSTRUMENT_ID = "lusidInstrumentId";
  @SerializedName(SERIALIZED_NAME_LUSID_INSTRUMENT_ID)
  private String lusidInstrumentId;

  public static final String SERIALIZED_NAME_QUANTITY = "quantity";
  @SerializedName(SERIALIZED_NAME_QUANTITY)
  private java.math.BigDecimal quantity;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private String state;

  public static final String SERIALIZED_NAME_SIDE = "side";
  @SerializedName(SERIALIZED_NAME_SIDE)
  private String side;

  public static final String SERIALIZED_NAME_TIME_IN_FORCE = "timeInForce";
  @SerializedName(SERIALIZED_NAME_TIME_IN_FORCE)
  private String timeInForce;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_CREATED_DATE = "createdDate";
  @SerializedName(SERIALIZED_NAME_CREATED_DATE)
  private OffsetDateTime createdDate;

  public static final String SERIALIZED_NAME_LIMIT_PRICE = "limitPrice";
  @SerializedName(SERIALIZED_NAME_LIMIT_PRICE)
  private CurrencyAndAmount limitPrice;

  public static final String SERIALIZED_NAME_STOP_PRICE = "stopPrice";
  @SerializedName(SERIALIZED_NAME_STOP_PRICE)
  private CurrencyAndAmount stopPrice;

  public static final String SERIALIZED_NAME_COUNTERPARTY = "counterparty";
  @SerializedName(SERIALIZED_NAME_COUNTERPARTY)
  private String counterparty;

  public static final String SERIALIZED_NAME_EXECUTION_SYSTEM = "executionSystem";
  @SerializedName(SERIALIZED_NAME_EXECUTION_SYSTEM)
  private String executionSystem;

  public static final String SERIALIZED_NAME_ENTRY_TYPE = "entryType";
  @SerializedName(SERIALIZED_NAME_ENTRY_TYPE)
  private String entryType;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private Version version;

  public static final String SERIALIZED_NAME_LINKS = "links";
  @SerializedName(SERIALIZED_NAME_LINKS)
  private List<Link> links;

  public Placement() {
  }

  public Placement id(ResourceId id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nonnull
  public ResourceId getId() {
    return id;
  }


  public void setId(ResourceId id) {
    this.id = id;
  }


  public Placement parentPlacementId(ResourceId parentPlacementId) {
    
    this.parentPlacementId = parentPlacementId;
    return this;
  }

   /**
   * Get parentPlacementId
   * @return parentPlacementId
  **/
  @javax.annotation.Nullable
  public ResourceId getParentPlacementId() {
    return parentPlacementId;
  }


  public void setParentPlacementId(ResourceId parentPlacementId) {
    this.parentPlacementId = parentPlacementId;
  }


  public Placement blockIds(List<ResourceId> blockIds) {
    
    this.blockIds = blockIds;
    return this;
  }

  public Placement addBlockIdsItem(ResourceId blockIdsItem) {
    if (this.blockIds == null) {
      this.blockIds = new ArrayList<>();
    }
    this.blockIds.add(blockIdsItem);
    return this;
  }

   /**
   * The IDs of the Blocks associated with this placement.
   * @return blockIds
  **/
  @javax.annotation.Nonnull
  public List<ResourceId> getBlockIds() {
    return blockIds;
  }


  public void setBlockIds(List<ResourceId> blockIds) {
    this.blockIds = blockIds;
  }


  public Placement properties(Map<String, PerpetualProperty> properties) {
    
    this.properties = properties;
    return this;
  }

  public Placement putPropertiesItem(String key, PerpetualProperty propertiesItem) {
    if (this.properties == null) {
      this.properties = new HashMap<>();
    }
    this.properties.put(key, propertiesItem);
    return this;
  }

   /**
   * Client-defined properties associated with this placement.
   * @return properties
  **/
  @javax.annotation.Nullable
  public Map<String, PerpetualProperty> getProperties() {
    return properties;
  }


  public void setProperties(Map<String, PerpetualProperty> properties) {
    this.properties = properties;
  }


  public Placement instrumentIdentifiers(Map<String, String> instrumentIdentifiers) {
    
    this.instrumentIdentifiers = instrumentIdentifiers;
    return this;
  }

  public Placement putInstrumentIdentifiersItem(String key, String instrumentIdentifiersItem) {
    if (this.instrumentIdentifiers == null) {
      this.instrumentIdentifiers = new HashMap<>();
    }
    this.instrumentIdentifiers.put(key, instrumentIdentifiersItem);
    return this;
  }

   /**
   * The instrument ordered.
   * @return instrumentIdentifiers
  **/
  @javax.annotation.Nonnull
  public Map<String, String> getInstrumentIdentifiers() {
    return instrumentIdentifiers;
  }


  public void setInstrumentIdentifiers(Map<String, String> instrumentIdentifiers) {
    this.instrumentIdentifiers = instrumentIdentifiers;
  }


  public Placement lusidInstrumentId(String lusidInstrumentId) {
    
    this.lusidInstrumentId = lusidInstrumentId;
    return this;
  }

   /**
   * The LUSID instrument id for the instrument placement.
   * @return lusidInstrumentId
  **/
  @javax.annotation.Nonnull
  public String getLusidInstrumentId() {
    return lusidInstrumentId;
  }


  public void setLusidInstrumentId(String lusidInstrumentId) {
    this.lusidInstrumentId = lusidInstrumentId;
  }


  public Placement quantity(java.math.BigDecimal quantity) {
    
    this.quantity = quantity;
    return this;
  }

   /**
   * The quantity of given instrument ordered.
   * @return quantity
  **/
  @javax.annotation.Nonnull
  public java.math.BigDecimal getQuantity() {
    return quantity;
  }


  public void setQuantity(java.math.BigDecimal quantity) {
    this.quantity = quantity;
  }


  public Placement state(String state) {
    
    this.state = state;
    return this;
  }

   /**
   * The state of this placement (typically a FIX state; Open, Filled, etc).
   * @return state
  **/
  @javax.annotation.Nonnull
  public String getState() {
    return state;
  }


  public void setState(String state) {
    this.state = state;
  }


  public Placement side(String side) {
    
    this.side = side;
    return this;
  }

   /**
   * The side (Buy, Sell, ...) of this placement.
   * @return side
  **/
  @javax.annotation.Nonnull
  public String getSide() {
    return side;
  }


  public void setSide(String side) {
    this.side = side;
  }


  public Placement timeInForce(String timeInForce) {
    
    this.timeInForce = timeInForce;
    return this;
  }

   /**
   * The time in force applicable to this placement (GTC, FOK, Day, etc)
   * @return timeInForce
  **/
  @javax.annotation.Nonnull
  public String getTimeInForce() {
    return timeInForce;
  }


  public void setTimeInForce(String timeInForce) {
    this.timeInForce = timeInForce;
  }


  public Placement type(String type) {
    
    this.type = type;
    return this;
  }

   /**
   * The type of this placement (Market, Limit, etc).
   * @return type
  **/
  @javax.annotation.Nonnull
  public String getType() {
    return type;
  }


  public void setType(String type) {
    this.type = type;
  }


  public Placement createdDate(OffsetDateTime createdDate) {
    
    this.createdDate = createdDate;
    return this;
  }

   /**
   * The active date of this placement.
   * @return createdDate
  **/
  @javax.annotation.Nonnull
  public OffsetDateTime getCreatedDate() {
    return createdDate;
  }


  public void setCreatedDate(OffsetDateTime createdDate) {
    this.createdDate = createdDate;
  }


  public Placement limitPrice(CurrencyAndAmount limitPrice) {
    
    this.limitPrice = limitPrice;
    return this;
  }

   /**
   * Get limitPrice
   * @return limitPrice
  **/
  @javax.annotation.Nullable
  public CurrencyAndAmount getLimitPrice() {
    return limitPrice;
  }


  public void setLimitPrice(CurrencyAndAmount limitPrice) {
    this.limitPrice = limitPrice;
  }


  public Placement stopPrice(CurrencyAndAmount stopPrice) {
    
    this.stopPrice = stopPrice;
    return this;
  }

   /**
   * Get stopPrice
   * @return stopPrice
  **/
  @javax.annotation.Nullable
  public CurrencyAndAmount getStopPrice() {
    return stopPrice;
  }


  public void setStopPrice(CurrencyAndAmount stopPrice) {
    this.stopPrice = stopPrice;
  }


  public Placement counterparty(String counterparty) {
    
    this.counterparty = counterparty;
    return this;
  }

   /**
   * Optionally specifies the market entity this placement is placed with.
   * @return counterparty
  **/
  @javax.annotation.Nullable
  public String getCounterparty() {
    return counterparty;
  }


  public void setCounterparty(String counterparty) {
    this.counterparty = counterparty;
  }


  public Placement executionSystem(String executionSystem) {
    
    this.executionSystem = executionSystem;
    return this;
  }

   /**
   * Optionally specifies the execution system in use.
   * @return executionSystem
  **/
  @javax.annotation.Nullable
  public String getExecutionSystem() {
    return executionSystem;
  }


  public void setExecutionSystem(String executionSystem) {
    this.executionSystem = executionSystem;
  }


  public Placement entryType(String entryType) {
    
    this.entryType = entryType;
    return this;
  }

   /**
   * Optionally specifies the entry type of this placement.
   * @return entryType
  **/
  @javax.annotation.Nullable
  public String getEntryType() {
    return entryType;
  }


  public void setEntryType(String entryType) {
    this.entryType = entryType;
  }


  public Placement version(Version version) {
    
    this.version = version;
    return this;
  }

   /**
   * Get version
   * @return version
  **/
  @javax.annotation.Nullable
  public Version getVersion() {
    return version;
  }


  public void setVersion(Version version) {
    this.version = version;
  }


  public Placement links(List<Link> links) {
    
    this.links = links;
    return this;
  }

  public Placement addLinksItem(Link linksItem) {
    if (this.links == null) {
      this.links = new ArrayList<>();
    }
    this.links.add(linksItem);
    return this;
  }

   /**
   * Get links
   * @return links
  **/
  @javax.annotation.Nullable
  public List<Link> getLinks() {
    return links;
  }


  public void setLinks(List<Link> links) {
    this.links = links;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Placement placement = (Placement) o;
    return Objects.equals(this.id, placement.id) &&
        Objects.equals(this.parentPlacementId, placement.parentPlacementId) &&
        Objects.equals(this.blockIds, placement.blockIds) &&
        Objects.equals(this.properties, placement.properties) &&
        Objects.equals(this.instrumentIdentifiers, placement.instrumentIdentifiers) &&
        Objects.equals(this.lusidInstrumentId, placement.lusidInstrumentId) &&
        (this.quantity.compareTo(placement.getQuantity()) == 0) &&
        Objects.equals(this.state, placement.state) &&
        Objects.equals(this.side, placement.side) &&
        Objects.equals(this.timeInForce, placement.timeInForce) &&
        Objects.equals(this.type, placement.type) &&
        Objects.equals(this.createdDate, placement.createdDate) &&
        Objects.equals(this.limitPrice, placement.limitPrice) &&
        Objects.equals(this.stopPrice, placement.stopPrice) &&
        Objects.equals(this.counterparty, placement.counterparty) &&
        Objects.equals(this.executionSystem, placement.executionSystem) &&
        Objects.equals(this.entryType, placement.entryType) &&
        Objects.equals(this.version, placement.version) &&
        Objects.equals(this.links, placement.links);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, parentPlacementId, blockIds, properties, instrumentIdentifiers, lusidInstrumentId, quantity, state, side, timeInForce, type, createdDate, limitPrice, stopPrice, counterparty, executionSystem, entryType, version, links);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Placement {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    parentPlacementId: ").append(toIndentedString(parentPlacementId)).append("\n");
    sb.append("    blockIds: ").append(toIndentedString(blockIds)).append("\n");
    sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
    sb.append("    instrumentIdentifiers: ").append(toIndentedString(instrumentIdentifiers)).append("\n");
    sb.append("    lusidInstrumentId: ").append(toIndentedString(lusidInstrumentId)).append("\n");
    sb.append("    quantity: ").append(toIndentedString(quantity)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    side: ").append(toIndentedString(side)).append("\n");
    sb.append("    timeInForce: ").append(toIndentedString(timeInForce)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    createdDate: ").append(toIndentedString(createdDate)).append("\n");
    sb.append("    limitPrice: ").append(toIndentedString(limitPrice)).append("\n");
    sb.append("    stopPrice: ").append(toIndentedString(stopPrice)).append("\n");
    sb.append("    counterparty: ").append(toIndentedString(counterparty)).append("\n");
    sb.append("    executionSystem: ").append(toIndentedString(executionSystem)).append("\n");
    sb.append("    entryType: ").append(toIndentedString(entryType)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("parentPlacementId");
    openapiFields.add("blockIds");
    openapiFields.add("properties");
    openapiFields.add("instrumentIdentifiers");
    openapiFields.add("lusidInstrumentId");
    openapiFields.add("quantity");
    openapiFields.add("state");
    openapiFields.add("side");
    openapiFields.add("timeInForce");
    openapiFields.add("type");
    openapiFields.add("createdDate");
    openapiFields.add("limitPrice");
    openapiFields.add("stopPrice");
    openapiFields.add("counterparty");
    openapiFields.add("executionSystem");
    openapiFields.add("entryType");
    openapiFields.add("version");
    openapiFields.add("links");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("blockIds");
    openapiRequiredFields.add("instrumentIdentifiers");
    openapiRequiredFields.add("lusidInstrumentId");
    openapiRequiredFields.add("quantity");
    openapiRequiredFields.add("state");
    openapiRequiredFields.add("side");
    openapiRequiredFields.add("timeInForce");
    openapiRequiredFields.add("type");
    openapiRequiredFields.add("createdDate");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Placement
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Placement.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Placement is not found in the empty JSON string", Placement.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!Placement.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Placement` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Placement.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // validate the required field `id`
      ResourceId.validateJsonObject(jsonObj.getAsJsonObject("id"));
      // validate the optional field `parentPlacementId`
      if (jsonObj.get("parentPlacementId") != null && !jsonObj.get("parentPlacementId").isJsonNull()) {
        ResourceId.validateJsonObject(jsonObj.getAsJsonObject("parentPlacementId"));
      }
      // ensure the json data is an array
      if (!jsonObj.get("blockIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `blockIds` to be an array in the JSON string but got `%s`", jsonObj.get("blockIds").toString()));
      }

      JsonArray jsonArrayblockIds = jsonObj.getAsJsonArray("blockIds");
      // validate the required field `blockIds` (array)
      for (int i = 0; i < jsonArrayblockIds.size(); i++) {
        ResourceId.validateJsonObject(jsonArrayblockIds.get(i).getAsJsonObject());
      };
      if (!jsonObj.get("lusidInstrumentId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lusidInstrumentId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lusidInstrumentId").toString()));
      }
      if (!jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      if (!jsonObj.get("side").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `side` to be a primitive type in the JSON string but got `%s`", jsonObj.get("side").toString()));
      }
      if (!jsonObj.get("timeInForce").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timeInForce` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timeInForce").toString()));
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `limitPrice`
      if (jsonObj.get("limitPrice") != null && !jsonObj.get("limitPrice").isJsonNull()) {
        CurrencyAndAmount.validateJsonObject(jsonObj.getAsJsonObject("limitPrice"));
      }
      // validate the optional field `stopPrice`
      if (jsonObj.get("stopPrice") != null && !jsonObj.get("stopPrice").isJsonNull()) {
        CurrencyAndAmount.validateJsonObject(jsonObj.getAsJsonObject("stopPrice"));
      }
      if ((jsonObj.get("counterparty") != null && !jsonObj.get("counterparty").isJsonNull()) && !jsonObj.get("counterparty").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `counterparty` to be a primitive type in the JSON string but got `%s`", jsonObj.get("counterparty").toString()));
      }
      if ((jsonObj.get("executionSystem") != null && !jsonObj.get("executionSystem").isJsonNull()) && !jsonObj.get("executionSystem").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `executionSystem` to be a primitive type in the JSON string but got `%s`", jsonObj.get("executionSystem").toString()));
      }
      if ((jsonObj.get("entryType") != null && !jsonObj.get("entryType").isJsonNull()) && !jsonObj.get("entryType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `entryType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("entryType").toString()));
      }
      // validate the optional field `version`
      if (jsonObj.get("version") != null && !jsonObj.get("version").isJsonNull()) {
        Version.validateJsonObject(jsonObj.getAsJsonObject("version"));
      }
      if (jsonObj.get("links") != null && !jsonObj.get("links").isJsonNull()) {
        JsonArray jsonArraylinks = jsonObj.getAsJsonArray("links");
        if (jsonArraylinks != null) {
          // ensure the json data is an array
          if (!jsonObj.get("links").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `links` to be an array in the JSON string but got `%s`", jsonObj.get("links").toString()));
          }

          // validate the optional field `links` (array)
          for (int i = 0; i < jsonArraylinks.size(); i++) {
            Link.validateJsonObject(jsonArraylinks.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Placement.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Placement' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Placement> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Placement.class));

       return (TypeAdapter<T>) new TypeAdapter<Placement>() {
           @Override
           public void write(JsonWriter out, Placement value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Placement read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Placement given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Placement
  * @throws IOException if the JSON string is invalid with respect to Placement
  */
  public static Placement fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Placement.class);
  }

 /**
  * Convert an instance of Placement to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
