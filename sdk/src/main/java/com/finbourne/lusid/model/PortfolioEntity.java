/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import com.finbourne.lusid.model.Link;
import com.finbourne.lusid.model.PortfolioWithoutHref;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.net.URI;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * A list of portfolios.
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class PortfolioEntity {
  public static final String SERIALIZED_NAME_HREF = "href";
  @SerializedName(SERIALIZED_NAME_HREF)
  private URI href;

  public static final String SERIALIZED_NAME_ENTITY_UNIQUE_ID = "entityUniqueId";
  @SerializedName(SERIALIZED_NAME_ENTITY_UNIQUE_ID)
  private String entityUniqueId;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_EFFECTIVE_AT_CREATED = "effectiveAtCreated";
  @SerializedName(SERIALIZED_NAME_EFFECTIVE_AT_CREATED)
  private OffsetDateTime effectiveAtCreated;

  public static final String SERIALIZED_NAME_PREVAILING_PORTFOLIO = "prevailingPortfolio";
  @SerializedName(SERIALIZED_NAME_PREVAILING_PORTFOLIO)
  private PortfolioWithoutHref prevailingPortfolio;

  public static final String SERIALIZED_NAME_DELETED_PORTFOLIO = "deletedPortfolio";
  @SerializedName(SERIALIZED_NAME_DELETED_PORTFOLIO)
  private PortfolioWithoutHref deletedPortfolio;

  public static final String SERIALIZED_NAME_LINKS = "links";
  @SerializedName(SERIALIZED_NAME_LINKS)
  private List<Link> links;

  public PortfolioEntity() {
  }

  public PortfolioEntity href(URI href) {
    
    this.href = href;
    return this;
  }

   /**
   * The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.
   * @return href
  **/
  @jakarta.annotation.Nonnull
  public URI getHref() {
    return href;
  }


  public void setHref(URI href) {
    this.href = href;
  }


  public PortfolioEntity entityUniqueId(String entityUniqueId) {
    
    this.entityUniqueId = entityUniqueId;
    return this;
  }

   /**
   * The unique id of the entity
   * @return entityUniqueId
  **/
  @jakarta.annotation.Nonnull
  public String getEntityUniqueId() {
    return entityUniqueId;
  }


  public void setEntityUniqueId(String entityUniqueId) {
    this.entityUniqueId = entityUniqueId;
  }


  public PortfolioEntity status(String status) {
    
    this.status = status;
    return this;
  }

   /**
   * The status of the entity at the current time
   * @return status
  **/
  @jakarta.annotation.Nonnull
  public String getStatus() {
    return status;
  }


  public void setStatus(String status) {
    this.status = status;
  }


  public PortfolioEntity effectiveAtCreated(OffsetDateTime effectiveAtCreated) {
    
    this.effectiveAtCreated = effectiveAtCreated;
    return this;
  }

   /**
   * The EffectiveAt this Entity is created, if entity does not currently exist in EffectiveAt
   * @return effectiveAtCreated
  **/
  @jakarta.annotation.Nullable
  public OffsetDateTime getEffectiveAtCreated() {
    return effectiveAtCreated;
  }


  public void setEffectiveAtCreated(OffsetDateTime effectiveAtCreated) {
    this.effectiveAtCreated = effectiveAtCreated;
  }


  public PortfolioEntity prevailingPortfolio(PortfolioWithoutHref prevailingPortfolio) {
    
    this.prevailingPortfolio = prevailingPortfolio;
    return this;
  }

   /**
   * Get prevailingPortfolio
   * @return prevailingPortfolio
  **/
  @jakarta.annotation.Nullable
  public PortfolioWithoutHref getPrevailingPortfolio() {
    return prevailingPortfolio;
  }


  public void setPrevailingPortfolio(PortfolioWithoutHref prevailingPortfolio) {
    this.prevailingPortfolio = prevailingPortfolio;
  }


  public PortfolioEntity deletedPortfolio(PortfolioWithoutHref deletedPortfolio) {
    
    this.deletedPortfolio = deletedPortfolio;
    return this;
  }

   /**
   * Get deletedPortfolio
   * @return deletedPortfolio
  **/
  @jakarta.annotation.Nullable
  public PortfolioWithoutHref getDeletedPortfolio() {
    return deletedPortfolio;
  }


  public void setDeletedPortfolio(PortfolioWithoutHref deletedPortfolio) {
    this.deletedPortfolio = deletedPortfolio;
  }


  public PortfolioEntity links(List<Link> links) {
    
    this.links = links;
    return this;
  }

  public PortfolioEntity addLinksItem(Link linksItem) {
    if (this.links == null) {
      this.links = new ArrayList<>();
    }
    this.links.add(linksItem);
    return this;
  }

   /**
   * Get links
   * @return links
  **/
  @jakarta.annotation.Nullable
  public List<Link> getLinks() {
    return links;
  }


  public void setLinks(List<Link> links) {
    this.links = links;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PortfolioEntity portfolioEntity = (PortfolioEntity) o;
    return Objects.equals(this.href, portfolioEntity.href) &&
        Objects.equals(this.entityUniqueId, portfolioEntity.entityUniqueId) &&
        Objects.equals(this.status, portfolioEntity.status) &&
        Objects.equals(this.effectiveAtCreated, portfolioEntity.effectiveAtCreated) &&
        Objects.equals(this.prevailingPortfolio, portfolioEntity.prevailingPortfolio) &&
        Objects.equals(this.deletedPortfolio, portfolioEntity.deletedPortfolio) &&
        Objects.equals(this.links, portfolioEntity.links);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(href, entityUniqueId, status, effectiveAtCreated, prevailingPortfolio, deletedPortfolio, links);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PortfolioEntity {\n");
    sb.append("    href: ").append(toIndentedString(href)).append("\n");
    sb.append("    entityUniqueId: ").append(toIndentedString(entityUniqueId)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    effectiveAtCreated: ").append(toIndentedString(effectiveAtCreated)).append("\n");
    sb.append("    prevailingPortfolio: ").append(toIndentedString(prevailingPortfolio)).append("\n");
    sb.append("    deletedPortfolio: ").append(toIndentedString(deletedPortfolio)).append("\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("href");
    openapiFields.add("entityUniqueId");
    openapiFields.add("status");
    openapiFields.add("effectiveAtCreated");
    openapiFields.add("prevailingPortfolio");
    openapiFields.add("deletedPortfolio");
    openapiFields.add("links");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("href");
    openapiRequiredFields.add("entityUniqueId");
    openapiRequiredFields.add("status");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to PortfolioEntity
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PortfolioEntity.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PortfolioEntity is not found in the empty JSON string", PortfolioEntity.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PortfolioEntity.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("href").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `href` to be a primitive type in the JSON string but got `%s`", jsonObj.get("href").toString()));
      }
      if (!jsonObj.get("entityUniqueId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `entityUniqueId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("entityUniqueId").toString()));
      }
      if (!jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the optional field `prevailingPortfolio`
      if (jsonObj.get("prevailingPortfolio") != null && !jsonObj.get("prevailingPortfolio").isJsonNull()) {
        PortfolioWithoutHref.validateJsonElement(jsonObj.get("prevailingPortfolio"));
      }
      // validate the optional field `deletedPortfolio`
      if (jsonObj.get("deletedPortfolio") != null && !jsonObj.get("deletedPortfolio").isJsonNull()) {
        PortfolioWithoutHref.validateJsonElement(jsonObj.get("deletedPortfolio"));
      }
      if (jsonObj.get("links") != null && !jsonObj.get("links").isJsonNull()) {
        JsonArray jsonArraylinks = jsonObj.getAsJsonArray("links");
        if (jsonArraylinks != null) {
          // ensure the json data is an array
          if (!jsonObj.get("links").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `links` to be an array in the JSON string but got `%s`", jsonObj.get("links").toString()));
          }

          // validate the optional field `links` (array)
          for (int i = 0; i < jsonArraylinks.size(); i++) {
            Link.validateJsonElement(jsonArraylinks.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PortfolioEntity.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PortfolioEntity' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PortfolioEntity> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PortfolioEntity.class));

       return (TypeAdapter<T>) new TypeAdapter<PortfolioEntity>() {
           @Override
           public void write(JsonWriter out, PortfolioEntity value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PortfolioEntity read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PortfolioEntity given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PortfolioEntity
  * @throws IOException if the JSON string is invalid with respect to PortfolioEntity
  */
  public static PortfolioEntity fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PortfolioEntity.class);
  }

 /**
  * Convert an instance of PortfolioEntity to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
