/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import com.finbourne.lusid.model.CurrencyAndAmount;
import com.finbourne.lusid.model.CustodianAccount;
import com.finbourne.lusid.model.OtcConfirmation;
import com.finbourne.lusid.model.PerpetualProperty;
import com.finbourne.lusid.model.ResourceId;
import com.finbourne.lusid.model.TransactionPrice;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * A list of transactions.
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class Transaction {
  public static final String SERIALIZED_NAME_TRANSACTION_ID = "transactionId";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_ID)
  private String transactionId;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_INSTRUMENT_IDENTIFIERS = "instrumentIdentifiers";
  @SerializedName(SERIALIZED_NAME_INSTRUMENT_IDENTIFIERS)
  private Map<String, String> instrumentIdentifiers;

  public static final String SERIALIZED_NAME_INSTRUMENT_SCOPE = "instrumentScope";
  @SerializedName(SERIALIZED_NAME_INSTRUMENT_SCOPE)
  private String instrumentScope;

  public static final String SERIALIZED_NAME_INSTRUMENT_UID = "instrumentUid";
  @SerializedName(SERIALIZED_NAME_INSTRUMENT_UID)
  private String instrumentUid;

  public static final String SERIALIZED_NAME_TRANSACTION_DATE = "transactionDate";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_DATE)
  private OffsetDateTime transactionDate;

  public static final String SERIALIZED_NAME_SETTLEMENT_DATE = "settlementDate";
  @SerializedName(SERIALIZED_NAME_SETTLEMENT_DATE)
  private OffsetDateTime settlementDate;

  public static final String SERIALIZED_NAME_UNITS = "units";
  @SerializedName(SERIALIZED_NAME_UNITS)
  private java.math.BigDecimal units;

  public static final String SERIALIZED_NAME_TRANSACTION_PRICE = "transactionPrice";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_PRICE)
  private TransactionPrice transactionPrice;

  public static final String SERIALIZED_NAME_TOTAL_CONSIDERATION = "totalConsideration";
  @SerializedName(SERIALIZED_NAME_TOTAL_CONSIDERATION)
  private CurrencyAndAmount totalConsideration;

  public static final String SERIALIZED_NAME_EXCHANGE_RATE = "exchangeRate";
  @SerializedName(SERIALIZED_NAME_EXCHANGE_RATE)
  private java.math.BigDecimal exchangeRate;

  public static final String SERIALIZED_NAME_TRANSACTION_CURRENCY = "transactionCurrency";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_CURRENCY)
  private String transactionCurrency;

  public static final String SERIALIZED_NAME_PROPERTIES = "properties";
  @SerializedName(SERIALIZED_NAME_PROPERTIES)
  private Map<String, PerpetualProperty> properties;

  public static final String SERIALIZED_NAME_COUNTERPARTY_ID = "counterpartyId";
  @SerializedName(SERIALIZED_NAME_COUNTERPARTY_ID)
  private String counterpartyId;

  public static final String SERIALIZED_NAME_SOURCE = "source";
  @SerializedName(SERIALIZED_NAME_SOURCE)
  private String source;

  public static final String SERIALIZED_NAME_ENTRY_DATE_TIME = "entryDateTime";
  @SerializedName(SERIALIZED_NAME_ENTRY_DATE_TIME)
  private OffsetDateTime entryDateTime;

  public static final String SERIALIZED_NAME_OTC_CONFIRMATION = "otcConfirmation";
  @SerializedName(SERIALIZED_NAME_OTC_CONFIRMATION)
  private OtcConfirmation otcConfirmation;

  /**
   * The status of the transaction. The available values are: Active, Amended, Cancelled
   */
  @JsonAdapter(TransactionStatusEnum.Adapter.class)
  public enum TransactionStatusEnum {
    ACTIVE("Active"),
    
    AMENDED("Amended"),
    
    CANCELLED("Cancelled");

    private String value;

    TransactionStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TransactionStatusEnum fromValue(String value) {
      for (TransactionStatusEnum b : TransactionStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TransactionStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TransactionStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TransactionStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TransactionStatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TRANSACTION_STATUS = "transactionStatus";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_STATUS)
  private TransactionStatusEnum transactionStatus;

  public static final String SERIALIZED_NAME_CANCEL_DATE_TIME = "cancelDateTime";
  @SerializedName(SERIALIZED_NAME_CANCEL_DATE_TIME)
  private OffsetDateTime cancelDateTime;

  public static final String SERIALIZED_NAME_ORDER_ID = "orderId";
  @SerializedName(SERIALIZED_NAME_ORDER_ID)
  private ResourceId orderId;

  public static final String SERIALIZED_NAME_ALLOCATION_ID = "allocationId";
  @SerializedName(SERIALIZED_NAME_ALLOCATION_ID)
  private ResourceId allocationId;

  public static final String SERIALIZED_NAME_CUSTODIAN_ACCOUNT = "custodianAccount";
  @SerializedName(SERIALIZED_NAME_CUSTODIAN_ACCOUNT)
  private CustodianAccount custodianAccount;

  public Transaction() {
  }

  public Transaction transactionId(String transactionId) {
    
    this.transactionId = transactionId;
    return this;
  }

   /**
   * The unique identifier for the transaction.
   * @return transactionId
  **/
  @jakarta.annotation.Nonnull
  public String getTransactionId() {
    return transactionId;
  }


  public void setTransactionId(String transactionId) {
    this.transactionId = transactionId;
  }


  public Transaction type(String type) {
    
    this.type = type;
    return this;
  }

   /**
   * The type of the transaction e.g. &#39;Buy&#39;, &#39;Sell&#39;. The transaction type should have been pre-configured via the System Configuration API endpoint.
   * @return type
  **/
  @jakarta.annotation.Nonnull
  public String getType() {
    return type;
  }


  public void setType(String type) {
    this.type = type;
  }


  public Transaction instrumentIdentifiers(Map<String, String> instrumentIdentifiers) {
    
    this.instrumentIdentifiers = instrumentIdentifiers;
    return this;
  }

  public Transaction putInstrumentIdentifiersItem(String key, String instrumentIdentifiersItem) {
    if (this.instrumentIdentifiers == null) {
      this.instrumentIdentifiers = new HashMap<>();
    }
    this.instrumentIdentifiers.put(key, instrumentIdentifiersItem);
    return this;
  }

   /**
   * A set of instrument identifiers that can resolve the transaction to a unique instrument.
   * @return instrumentIdentifiers
  **/
  @jakarta.annotation.Nullable
  public Map<String, String> getInstrumentIdentifiers() {
    return instrumentIdentifiers;
  }


  public void setInstrumentIdentifiers(Map<String, String> instrumentIdentifiers) {
    this.instrumentIdentifiers = instrumentIdentifiers;
  }


  public Transaction instrumentScope(String instrumentScope) {
    
    this.instrumentScope = instrumentScope;
    return this;
  }

   /**
   * The scope in which the transaction&#39;s instrument lies.
   * @return instrumentScope
  **/
  @jakarta.annotation.Nullable
  public String getInstrumentScope() {
    return instrumentScope;
  }


  public void setInstrumentScope(String instrumentScope) {
    this.instrumentScope = instrumentScope;
  }


  public Transaction instrumentUid(String instrumentUid) {
    
    this.instrumentUid = instrumentUid;
    return this;
  }

   /**
   * The unique Lusid Instrument Id (LUID) of the instrument that the transaction is in.
   * @return instrumentUid
  **/
  @jakarta.annotation.Nonnull
  public String getInstrumentUid() {
    return instrumentUid;
  }


  public void setInstrumentUid(String instrumentUid) {
    this.instrumentUid = instrumentUid;
  }


  public Transaction transactionDate(OffsetDateTime transactionDate) {
    
    this.transactionDate = transactionDate;
    return this;
  }

   /**
   * The date of the transaction.
   * @return transactionDate
  **/
  @jakarta.annotation.Nonnull
  public OffsetDateTime getTransactionDate() {
    return transactionDate;
  }


  public void setTransactionDate(OffsetDateTime transactionDate) {
    this.transactionDate = transactionDate;
  }


  public Transaction settlementDate(OffsetDateTime settlementDate) {
    
    this.settlementDate = settlementDate;
    return this;
  }

   /**
   * The settlement date of the transaction.
   * @return settlementDate
  **/
  @jakarta.annotation.Nonnull
  public OffsetDateTime getSettlementDate() {
    return settlementDate;
  }


  public void setSettlementDate(OffsetDateTime settlementDate) {
    this.settlementDate = settlementDate;
  }


  public Transaction units(java.math.BigDecimal units) {
    
    this.units = units;
    return this;
  }

   /**
   * The number of units transacted in the associated instrument.
   * @return units
  **/
  @jakarta.annotation.Nonnull
  public java.math.BigDecimal getUnits() {
    return units;
  }


  public void setUnits(java.math.BigDecimal units) {
    this.units = units;
  }


  public Transaction transactionPrice(TransactionPrice transactionPrice) {
    
    this.transactionPrice = transactionPrice;
    return this;
  }

   /**
   * Get transactionPrice
   * @return transactionPrice
  **/
  @jakarta.annotation.Nullable
  public TransactionPrice getTransactionPrice() {
    return transactionPrice;
  }


  public void setTransactionPrice(TransactionPrice transactionPrice) {
    this.transactionPrice = transactionPrice;
  }


  public Transaction totalConsideration(CurrencyAndAmount totalConsideration) {
    
    this.totalConsideration = totalConsideration;
    return this;
  }

   /**
   * Get totalConsideration
   * @return totalConsideration
  **/
  @jakarta.annotation.Nonnull
  public CurrencyAndAmount getTotalConsideration() {
    return totalConsideration;
  }


  public void setTotalConsideration(CurrencyAndAmount totalConsideration) {
    this.totalConsideration = totalConsideration;
  }


  public Transaction exchangeRate(java.math.BigDecimal exchangeRate) {
    
    this.exchangeRate = exchangeRate;
    return this;
  }

   /**
   * The exchange rate between the transaction and settlement currency (settlement currency being represented by the TotalConsideration.Currency). For example if the transaction currency is in USD and the settlement currency is in GBP this this the USD/GBP rate.
   * @return exchangeRate
  **/
  @jakarta.annotation.Nullable
  public java.math.BigDecimal getExchangeRate() {
    return exchangeRate;
  }


  public void setExchangeRate(java.math.BigDecimal exchangeRate) {
    this.exchangeRate = exchangeRate;
  }


  public Transaction transactionCurrency(String transactionCurrency) {
    
    this.transactionCurrency = transactionCurrency;
    return this;
  }

   /**
   * The transaction currency.
   * @return transactionCurrency
  **/
  @jakarta.annotation.Nullable
  public String getTransactionCurrency() {
    return transactionCurrency;
  }


  public void setTransactionCurrency(String transactionCurrency) {
    this.transactionCurrency = transactionCurrency;
  }


  public Transaction properties(Map<String, PerpetualProperty> properties) {
    
    this.properties = properties;
    return this;
  }

  public Transaction putPropertiesItem(String key, PerpetualProperty propertiesItem) {
    if (this.properties == null) {
      this.properties = new HashMap<>();
    }
    this.properties.put(key, propertiesItem);
    return this;
  }

   /**
   * Set of unique transaction properties and associated values to stored with the transaction. Each property will be from the &#39;Transaction&#39; domain.
   * @return properties
  **/
  @jakarta.annotation.Nullable
  public Map<String, PerpetualProperty> getProperties() {
    return properties;
  }


  public void setProperties(Map<String, PerpetualProperty> properties) {
    this.properties = properties;
  }


  public Transaction counterpartyId(String counterpartyId) {
    
    this.counterpartyId = counterpartyId;
    return this;
  }

   /**
   * The identifier for the counterparty of the transaction.
   * @return counterpartyId
  **/
  @jakarta.annotation.Nullable
  public String getCounterpartyId() {
    return counterpartyId;
  }


  public void setCounterpartyId(String counterpartyId) {
    this.counterpartyId = counterpartyId;
  }


  public Transaction source(String source) {
    
    this.source = source;
    return this;
  }

   /**
   * The source of the transaction. This is used to look up the appropriate transaction group set in the transaction type configuration.
   * @return source
  **/
  @jakarta.annotation.Nullable
  public String getSource() {
    return source;
  }


  public void setSource(String source) {
    this.source = source;
  }


  public Transaction entryDateTime(OffsetDateTime entryDateTime) {
    
    this.entryDateTime = entryDateTime;
    return this;
  }

   /**
   * The asAt datetime that the transaction was added to LUSID.
   * @return entryDateTime
  **/
  @jakarta.annotation.Nullable
  public OffsetDateTime getEntryDateTime() {
    return entryDateTime;
  }


  public void setEntryDateTime(OffsetDateTime entryDateTime) {
    this.entryDateTime = entryDateTime;
  }


  public Transaction otcConfirmation(OtcConfirmation otcConfirmation) {
    
    this.otcConfirmation = otcConfirmation;
    return this;
  }

   /**
   * Get otcConfirmation
   * @return otcConfirmation
  **/
  @jakarta.annotation.Nullable
  public OtcConfirmation getOtcConfirmation() {
    return otcConfirmation;
  }


  public void setOtcConfirmation(OtcConfirmation otcConfirmation) {
    this.otcConfirmation = otcConfirmation;
  }


  public Transaction transactionStatus(TransactionStatusEnum transactionStatus) {
    
    this.transactionStatus = transactionStatus;
    return this;
  }

   /**
   * The status of the transaction. The available values are: Active, Amended, Cancelled
   * @return transactionStatus
  **/
  @jakarta.annotation.Nullable
  public TransactionStatusEnum getTransactionStatus() {
    return transactionStatus;
  }


  public void setTransactionStatus(TransactionStatusEnum transactionStatus) {
    this.transactionStatus = transactionStatus;
  }


  public Transaction cancelDateTime(OffsetDateTime cancelDateTime) {
    
    this.cancelDateTime = cancelDateTime;
    return this;
  }

   /**
   * If the transaction has been cancelled, the asAt datetime that the transaction was cancelled.
   * @return cancelDateTime
  **/
  @jakarta.annotation.Nullable
  public OffsetDateTime getCancelDateTime() {
    return cancelDateTime;
  }


  public void setCancelDateTime(OffsetDateTime cancelDateTime) {
    this.cancelDateTime = cancelDateTime;
  }


  public Transaction orderId(ResourceId orderId) {
    
    this.orderId = orderId;
    return this;
  }

   /**
   * Get orderId
   * @return orderId
  **/
  @jakarta.annotation.Nullable
  public ResourceId getOrderId() {
    return orderId;
  }


  public void setOrderId(ResourceId orderId) {
    this.orderId = orderId;
  }


  public Transaction allocationId(ResourceId allocationId) {
    
    this.allocationId = allocationId;
    return this;
  }

   /**
   * Get allocationId
   * @return allocationId
  **/
  @jakarta.annotation.Nullable
  public ResourceId getAllocationId() {
    return allocationId;
  }


  public void setAllocationId(ResourceId allocationId) {
    this.allocationId = allocationId;
  }


  public Transaction custodianAccount(CustodianAccount custodianAccount) {
    
    this.custodianAccount = custodianAccount;
    return this;
  }

   /**
   * Get custodianAccount
   * @return custodianAccount
  **/
  @jakarta.annotation.Nullable
  public CustodianAccount getCustodianAccount() {
    return custodianAccount;
  }


  public void setCustodianAccount(CustodianAccount custodianAccount) {
    this.custodianAccount = custodianAccount;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Transaction transaction = (Transaction) o;
    return Objects.equals(this.transactionId, transaction.transactionId) &&
        Objects.equals(this.type, transaction.type) &&
        Objects.equals(this.instrumentIdentifiers, transaction.instrumentIdentifiers) &&
        Objects.equals(this.instrumentScope, transaction.instrumentScope) &&
        Objects.equals(this.instrumentUid, transaction.instrumentUid) &&
        Objects.equals(this.transactionDate, transaction.transactionDate) &&
        Objects.equals(this.settlementDate, transaction.settlementDate) &&
        (this.units.compareTo(transaction.getUnits()) == 0) &&
        Objects.equals(this.transactionPrice, transaction.transactionPrice) &&
        Objects.equals(this.totalConsideration, transaction.totalConsideration) &&
        (this.exchangeRate.compareTo(transaction.getExchangeRate()) == 0) &&
        Objects.equals(this.transactionCurrency, transaction.transactionCurrency) &&
        Objects.equals(this.properties, transaction.properties) &&
        Objects.equals(this.counterpartyId, transaction.counterpartyId) &&
        Objects.equals(this.source, transaction.source) &&
        Objects.equals(this.entryDateTime, transaction.entryDateTime) &&
        Objects.equals(this.otcConfirmation, transaction.otcConfirmation) &&
        Objects.equals(this.transactionStatus, transaction.transactionStatus) &&
        Objects.equals(this.cancelDateTime, transaction.cancelDateTime) &&
        Objects.equals(this.orderId, transaction.orderId) &&
        Objects.equals(this.allocationId, transaction.allocationId) &&
        Objects.equals(this.custodianAccount, transaction.custodianAccount);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(transactionId, type, instrumentIdentifiers, instrumentScope, instrumentUid, transactionDate, settlementDate, units, transactionPrice, totalConsideration, exchangeRate, transactionCurrency, properties, counterpartyId, source, entryDateTime, otcConfirmation, transactionStatus, cancelDateTime, orderId, allocationId, custodianAccount);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Transaction {\n");
    sb.append("    transactionId: ").append(toIndentedString(transactionId)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    instrumentIdentifiers: ").append(toIndentedString(instrumentIdentifiers)).append("\n");
    sb.append("    instrumentScope: ").append(toIndentedString(instrumentScope)).append("\n");
    sb.append("    instrumentUid: ").append(toIndentedString(instrumentUid)).append("\n");
    sb.append("    transactionDate: ").append(toIndentedString(transactionDate)).append("\n");
    sb.append("    settlementDate: ").append(toIndentedString(settlementDate)).append("\n");
    sb.append("    units: ").append(toIndentedString(units)).append("\n");
    sb.append("    transactionPrice: ").append(toIndentedString(transactionPrice)).append("\n");
    sb.append("    totalConsideration: ").append(toIndentedString(totalConsideration)).append("\n");
    sb.append("    exchangeRate: ").append(toIndentedString(exchangeRate)).append("\n");
    sb.append("    transactionCurrency: ").append(toIndentedString(transactionCurrency)).append("\n");
    sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
    sb.append("    counterpartyId: ").append(toIndentedString(counterpartyId)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    entryDateTime: ").append(toIndentedString(entryDateTime)).append("\n");
    sb.append("    otcConfirmation: ").append(toIndentedString(otcConfirmation)).append("\n");
    sb.append("    transactionStatus: ").append(toIndentedString(transactionStatus)).append("\n");
    sb.append("    cancelDateTime: ").append(toIndentedString(cancelDateTime)).append("\n");
    sb.append("    orderId: ").append(toIndentedString(orderId)).append("\n");
    sb.append("    allocationId: ").append(toIndentedString(allocationId)).append("\n");
    sb.append("    custodianAccount: ").append(toIndentedString(custodianAccount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("transactionId");
    openapiFields.add("type");
    openapiFields.add("instrumentIdentifiers");
    openapiFields.add("instrumentScope");
    openapiFields.add("instrumentUid");
    openapiFields.add("transactionDate");
    openapiFields.add("settlementDate");
    openapiFields.add("units");
    openapiFields.add("transactionPrice");
    openapiFields.add("totalConsideration");
    openapiFields.add("exchangeRate");
    openapiFields.add("transactionCurrency");
    openapiFields.add("properties");
    openapiFields.add("counterpartyId");
    openapiFields.add("source");
    openapiFields.add("entryDateTime");
    openapiFields.add("otcConfirmation");
    openapiFields.add("transactionStatus");
    openapiFields.add("cancelDateTime");
    openapiFields.add("orderId");
    openapiFields.add("allocationId");
    openapiFields.add("custodianAccount");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("transactionId");
    openapiRequiredFields.add("type");
    openapiRequiredFields.add("instrumentUid");
    openapiRequiredFields.add("transactionDate");
    openapiRequiredFields.add("settlementDate");
    openapiRequiredFields.add("units");
    openapiRequiredFields.add("totalConsideration");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to Transaction
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Transaction.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Transaction is not found in the empty JSON string", Transaction.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Transaction.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("transactionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transactionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transactionId").toString()));
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if ((jsonObj.get("instrumentScope") != null && !jsonObj.get("instrumentScope").isJsonNull()) && !jsonObj.get("instrumentScope").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `instrumentScope` to be a primitive type in the JSON string but got `%s`", jsonObj.get("instrumentScope").toString()));
      }
      if (!jsonObj.get("instrumentUid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `instrumentUid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("instrumentUid").toString()));
      }
      // validate the optional field `transactionPrice`
      if (jsonObj.get("transactionPrice") != null && !jsonObj.get("transactionPrice").isJsonNull()) {
        TransactionPrice.validateJsonElement(jsonObj.get("transactionPrice"));
      }
      // validate the required field `totalConsideration`
      CurrencyAndAmount.validateJsonElement(jsonObj.get("totalConsideration"));
      if ((jsonObj.get("transactionCurrency") != null && !jsonObj.get("transactionCurrency").isJsonNull()) && !jsonObj.get("transactionCurrency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transactionCurrency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transactionCurrency").toString()));
      }
      if ((jsonObj.get("counterpartyId") != null && !jsonObj.get("counterpartyId").isJsonNull()) && !jsonObj.get("counterpartyId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `counterpartyId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("counterpartyId").toString()));
      }
      if ((jsonObj.get("source") != null && !jsonObj.get("source").isJsonNull()) && !jsonObj.get("source").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `source` to be a primitive type in the JSON string but got `%s`", jsonObj.get("source").toString()));
      }
      // validate the optional field `otcConfirmation`
      if (jsonObj.get("otcConfirmation") != null && !jsonObj.get("otcConfirmation").isJsonNull()) {
        OtcConfirmation.validateJsonElement(jsonObj.get("otcConfirmation"));
      }
      if ((jsonObj.get("transactionStatus") != null && !jsonObj.get("transactionStatus").isJsonNull()) && !jsonObj.get("transactionStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transactionStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transactionStatus").toString()));
      }
      // validate the optional field `orderId`
      if (jsonObj.get("orderId") != null && !jsonObj.get("orderId").isJsonNull()) {
        ResourceId.validateJsonElement(jsonObj.get("orderId"));
      }
      // validate the optional field `allocationId`
      if (jsonObj.get("allocationId") != null && !jsonObj.get("allocationId").isJsonNull()) {
        ResourceId.validateJsonElement(jsonObj.get("allocationId"));
      }
      // validate the optional field `custodianAccount`
      if (jsonObj.get("custodianAccount") != null && !jsonObj.get("custodianAccount").isJsonNull()) {
        CustodianAccount.validateJsonElement(jsonObj.get("custodianAccount"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Transaction.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Transaction' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Transaction> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Transaction.class));

       return (TypeAdapter<T>) new TypeAdapter<Transaction>() {
           @Override
           public void write(JsonWriter out, Transaction value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Transaction read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Transaction given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Transaction
  * @throws IOException if the JSON string is invalid with respect to Transaction
  */
  public static Transaction fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Transaction.class);
  }

 /**
  * Convert an instance of Transaction to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
