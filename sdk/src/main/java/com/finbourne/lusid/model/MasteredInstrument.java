/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import com.finbourne.lusid.model.LusidInstrument;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * LUSID representation of a reference to another instrument that has already been upserted (Mastered)
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class MasteredInstrument extends LusidInstrument {
  public static final String SERIALIZED_NAME_IDENTIFIERS = "identifiers";
  @SerializedName(SERIALIZED_NAME_IDENTIFIERS)
  private Map<String, String> identifiers = new HashMap<>();

  public static final String SERIALIZED_NAME_MASTERED_DOM_CCY = "masteredDomCcy";
  @SerializedName(SERIALIZED_NAME_MASTERED_DOM_CCY)
  private String masteredDomCcy;

  public static final String SERIALIZED_NAME_MASTERED_INSTRUMENT_TYPE = "masteredInstrumentType";
  @SerializedName(SERIALIZED_NAME_MASTERED_INSTRUMENT_TYPE)
  private String masteredInstrumentType;

  public static final String SERIALIZED_NAME_MASTERED_LUSID_INSTRUMENT_ID = "masteredLusidInstrumentId";
  @SerializedName(SERIALIZED_NAME_MASTERED_LUSID_INSTRUMENT_ID)
  private String masteredLusidInstrumentId;

  public static final String SERIALIZED_NAME_MASTERED_NAME = "masteredName";
  @SerializedName(SERIALIZED_NAME_MASTERED_NAME)
  private String masteredName;

  public static final String SERIALIZED_NAME_MASTERED_SCOPE = "masteredScope";
  @SerializedName(SERIALIZED_NAME_MASTERED_SCOPE)
  private String masteredScope;

  public static final String SERIALIZED_NAME_MASTERED_ASSET_CLASS = "masteredAssetClass";
  @SerializedName(SERIALIZED_NAME_MASTERED_ASSET_CLASS)
  private String masteredAssetClass;

  public MasteredInstrument() {
    // this.instrumentType = this.getClass().getSimpleName();
  }

  
  public MasteredInstrument(
     String masteredDomCcy, 
     String masteredInstrumentType, 
     String masteredLusidInstrumentId, 
     String masteredName, 
     String masteredScope, 
     String masteredAssetClass
  ) {
    this();
    this.masteredDomCcy = masteredDomCcy;
    this.masteredInstrumentType = masteredInstrumentType;
    this.masteredLusidInstrumentId = masteredLusidInstrumentId;
    this.masteredName = masteredName;
    this.masteredScope = masteredScope;
    this.masteredAssetClass = masteredAssetClass;
  }

  public MasteredInstrument identifiers(Map<String, String> identifiers) {
    
    this.identifiers = identifiers;
    return this;
  }

  public MasteredInstrument putIdentifiersItem(String key, String identifiersItem) {
    if (this.identifiers == null) {
      this.identifiers = new HashMap<>();
    }
    this.identifiers.put(key, identifiersItem);
    return this;
  }

   /**
   * Dictionary of identifiers of the mastered instrument
   * @return identifiers
  **/
  @jakarta.annotation.Nonnull
  public Map<String, String> getIdentifiers() {
    return identifiers;
  }


  public void setIdentifiers(Map<String, String> identifiers) {
    this.identifiers = identifiers;
  }


   /**
   * DomCcy of the Instrument that Mastered Instrument points to - read only field
   * @return masteredDomCcy
  **/
  @jakarta.annotation.Nullable
  public String getMasteredDomCcy() {
    return masteredDomCcy;
  }




   /**
   * Type of the Instrument that Mastered Instrument points to - read only field
   * @return masteredInstrumentType
  **/
  @jakarta.annotation.Nullable
  public String getMasteredInstrumentType() {
    return masteredInstrumentType;
  }




   /**
   * Luid of the Instrument that Mastered Instrument points to - read only field
   * @return masteredLusidInstrumentId
  **/
  @jakarta.annotation.Nullable
  public String getMasteredLusidInstrumentId() {
    return masteredLusidInstrumentId;
  }




   /**
   * Name of the Instrument that Mastered Instrument points to - read only field
   * @return masteredName
  **/
  @jakarta.annotation.Nullable
  public String getMasteredName() {
    return masteredName;
  }




   /**
   * Scope of the Instrument that Mastered Instrument points to - read only field
   * @return masteredScope
  **/
  @jakarta.annotation.Nullable
  public String getMasteredScope() {
    return masteredScope;
  }




   /**
   * Asset class of the underlying mastered instrument - read only field    Supported string (enumeration) values are: [InterestRates, FX, Inflation, Equities, Credit, Commodities, Money].  Defaults to \&quot;Unknown\&quot; if not set.
   * @return masteredAssetClass
  **/
  @jakarta.annotation.Nullable
  public String getMasteredAssetClass() {
    return masteredAssetClass;
  }





  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MasteredInstrument masteredInstrument = (MasteredInstrument) o;
    return Objects.equals(this.identifiers, masteredInstrument.identifiers) &&
        Objects.equals(this.masteredDomCcy, masteredInstrument.masteredDomCcy) &&
        Objects.equals(this.masteredInstrumentType, masteredInstrument.masteredInstrumentType) &&
        Objects.equals(this.masteredLusidInstrumentId, masteredInstrument.masteredLusidInstrumentId) &&
        Objects.equals(this.masteredName, masteredInstrument.masteredName) &&
        Objects.equals(this.masteredScope, masteredInstrument.masteredScope) &&
        Objects.equals(this.masteredAssetClass, masteredInstrument.masteredAssetClass) &&
        super.equals(o);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(identifiers, masteredDomCcy, masteredInstrumentType, masteredLusidInstrumentId, masteredName, masteredScope, masteredAssetClass, super.hashCode());
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MasteredInstrument {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    identifiers: ").append(toIndentedString(identifiers)).append("\n");
    sb.append("    masteredDomCcy: ").append(toIndentedString(masteredDomCcy)).append("\n");
    sb.append("    masteredInstrumentType: ").append(toIndentedString(masteredInstrumentType)).append("\n");
    sb.append("    masteredLusidInstrumentId: ").append(toIndentedString(masteredLusidInstrumentId)).append("\n");
    sb.append("    masteredName: ").append(toIndentedString(masteredName)).append("\n");
    sb.append("    masteredScope: ").append(toIndentedString(masteredScope)).append("\n");
    sb.append("    masteredAssetClass: ").append(toIndentedString(masteredAssetClass)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("instrumentType");
    openapiFields.add("identifiers");
    openapiFields.add("masteredDomCcy");
    openapiFields.add("masteredInstrumentType");
    openapiFields.add("masteredLusidInstrumentId");
    openapiFields.add("masteredName");
    openapiFields.add("masteredScope");
    openapiFields.add("masteredAssetClass");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("identifiers");
    openapiRequiredFields.add("instrumentType");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to MasteredInstrument
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MasteredInstrument.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MasteredInstrument is not found in the empty JSON string", MasteredInstrument.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : MasteredInstrument.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MasteredInstrument.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MasteredInstrument' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MasteredInstrument> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MasteredInstrument.class));

       return (TypeAdapter<T>) new TypeAdapter<MasteredInstrument>() {
           @Override
           public void write(JsonWriter out, MasteredInstrument value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MasteredInstrument read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of MasteredInstrument given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of MasteredInstrument
  * @throws IOException if the JSON string is invalid with respect to MasteredInstrument
  */
  public static MasteredInstrument fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MasteredInstrument.class);
  }

 /**
  * Convert an instance of MasteredInstrument to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
