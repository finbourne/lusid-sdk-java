/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import com.finbourne.lusid.model.TransactionCurrencyAndAmount;
import com.finbourne.lusid.model.TransactionPriceAndType;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * TransactionFieldMap
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class TransactionFieldMap {
  public static final String SERIALIZED_NAME_TRANSACTION_ID = "transactionId";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_ID)
  private String transactionId;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_SOURCE = "source";
  @SerializedName(SERIALIZED_NAME_SOURCE)
  private String source;

  public static final String SERIALIZED_NAME_LUSID_INSTRUMENT_ID = "lusidInstrumentId";
  @SerializedName(SERIALIZED_NAME_LUSID_INSTRUMENT_ID)
  private String lusidInstrumentId;

  public static final String SERIALIZED_NAME_INSTRUMENT_SCOPE = "instrumentScope";
  @SerializedName(SERIALIZED_NAME_INSTRUMENT_SCOPE)
  private String instrumentScope;

  public static final String SERIALIZED_NAME_TRADE_DATE = "tradeDate";
  @SerializedName(SERIALIZED_NAME_TRADE_DATE)
  private String tradeDate;

  public static final String SERIALIZED_NAME_SETTLEMENT_DATE = "settlementDate";
  @SerializedName(SERIALIZED_NAME_SETTLEMENT_DATE)
  private String settlementDate;

  public static final String SERIALIZED_NAME_UNITS = "units";
  @SerializedName(SERIALIZED_NAME_UNITS)
  private String units;

  public static final String SERIALIZED_NAME_TRANSACTION_PRICE = "transactionPrice";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_PRICE)
  private TransactionPriceAndType transactionPrice;

  public static final String SERIALIZED_NAME_TRANSACTION_CURRENCY = "transactionCurrency";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_CURRENCY)
  private String transactionCurrency;

  public static final String SERIALIZED_NAME_EXCHANGE_RATE = "exchangeRate";
  @SerializedName(SERIALIZED_NAME_EXCHANGE_RATE)
  private String exchangeRate;

  public static final String SERIALIZED_NAME_TOTAL_CONSIDERATION = "totalConsideration";
  @SerializedName(SERIALIZED_NAME_TOTAL_CONSIDERATION)
  private TransactionCurrencyAndAmount totalConsideration;

  public static final String SERIALIZED_NAME_SETTLEMENT_CURRENCY = "settlementCurrency";
  @SerializedName(SERIALIZED_NAME_SETTLEMENT_CURRENCY)
  private String settlementCurrency;

  public TransactionFieldMap() {
  }

  public TransactionFieldMap transactionId(String transactionId) {
    
    this.transactionId = transactionId;
    return this;
  }

   /**
   * Get transactionId
   * @return transactionId
  **/
  @jakarta.annotation.Nonnull
  public String getTransactionId() {
    return transactionId;
  }


  public void setTransactionId(String transactionId) {
    this.transactionId = transactionId;
  }


  public TransactionFieldMap type(String type) {
    
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @jakarta.annotation.Nonnull
  public String getType() {
    return type;
  }


  public void setType(String type) {
    this.type = type;
  }


  public TransactionFieldMap source(String source) {
    
    this.source = source;
    return this;
  }

   /**
   * Get source
   * @return source
  **/
  @jakarta.annotation.Nonnull
  public String getSource() {
    return source;
  }


  public void setSource(String source) {
    this.source = source;
  }


  public TransactionFieldMap lusidInstrumentId(String lusidInstrumentId) {
    
    this.lusidInstrumentId = lusidInstrumentId;
    return this;
  }

   /**
   * Get lusidInstrumentId
   * @return lusidInstrumentId
  **/
  @jakarta.annotation.Nonnull
  public String getLusidInstrumentId() {
    return lusidInstrumentId;
  }


  public void setLusidInstrumentId(String lusidInstrumentId) {
    this.lusidInstrumentId = lusidInstrumentId;
  }


  public TransactionFieldMap instrumentScope(String instrumentScope) {
    
    this.instrumentScope = instrumentScope;
    return this;
  }

   /**
   * Get instrumentScope
   * @return instrumentScope
  **/
  @jakarta.annotation.Nonnull
  public String getInstrumentScope() {
    return instrumentScope;
  }


  public void setInstrumentScope(String instrumentScope) {
    this.instrumentScope = instrumentScope;
  }


  public TransactionFieldMap tradeDate(String tradeDate) {
    
    this.tradeDate = tradeDate;
    return this;
  }

   /**
   * Get tradeDate
   * @return tradeDate
  **/
  @jakarta.annotation.Nonnull
  public String getTradeDate() {
    return tradeDate;
  }


  public void setTradeDate(String tradeDate) {
    this.tradeDate = tradeDate;
  }


  public TransactionFieldMap settlementDate(String settlementDate) {
    
    this.settlementDate = settlementDate;
    return this;
  }

   /**
   * Get settlementDate
   * @return settlementDate
  **/
  @jakarta.annotation.Nonnull
  public String getSettlementDate() {
    return settlementDate;
  }


  public void setSettlementDate(String settlementDate) {
    this.settlementDate = settlementDate;
  }


  public TransactionFieldMap units(String units) {
    
    this.units = units;
    return this;
  }

   /**
   * Get units
   * @return units
  **/
  @jakarta.annotation.Nonnull
  public String getUnits() {
    return units;
  }


  public void setUnits(String units) {
    this.units = units;
  }


  public TransactionFieldMap transactionPrice(TransactionPriceAndType transactionPrice) {
    
    this.transactionPrice = transactionPrice;
    return this;
  }

   /**
   * Get transactionPrice
   * @return transactionPrice
  **/
  @jakarta.annotation.Nonnull
  public TransactionPriceAndType getTransactionPrice() {
    return transactionPrice;
  }


  public void setTransactionPrice(TransactionPriceAndType transactionPrice) {
    this.transactionPrice = transactionPrice;
  }


  public TransactionFieldMap transactionCurrency(String transactionCurrency) {
    
    this.transactionCurrency = transactionCurrency;
    return this;
  }

   /**
   * Get transactionCurrency
   * @return transactionCurrency
  **/
  @jakarta.annotation.Nonnull
  public String getTransactionCurrency() {
    return transactionCurrency;
  }


  public void setTransactionCurrency(String transactionCurrency) {
    this.transactionCurrency = transactionCurrency;
  }


  public TransactionFieldMap exchangeRate(String exchangeRate) {
    
    this.exchangeRate = exchangeRate;
    return this;
  }

   /**
   * Get exchangeRate
   * @return exchangeRate
  **/
  @jakarta.annotation.Nonnull
  public String getExchangeRate() {
    return exchangeRate;
  }


  public void setExchangeRate(String exchangeRate) {
    this.exchangeRate = exchangeRate;
  }


  public TransactionFieldMap totalConsideration(TransactionCurrencyAndAmount totalConsideration) {
    
    this.totalConsideration = totalConsideration;
    return this;
  }

   /**
   * Get totalConsideration
   * @return totalConsideration
  **/
  @jakarta.annotation.Nonnull
  public TransactionCurrencyAndAmount getTotalConsideration() {
    return totalConsideration;
  }


  public void setTotalConsideration(TransactionCurrencyAndAmount totalConsideration) {
    this.totalConsideration = totalConsideration;
  }


  public TransactionFieldMap settlementCurrency(String settlementCurrency) {
    
    this.settlementCurrency = settlementCurrency;
    return this;
  }

   /**
   * Get settlementCurrency
   * @return settlementCurrency
  **/
  @jakarta.annotation.Nonnull
  public String getSettlementCurrency() {
    return settlementCurrency;
  }


  public void setSettlementCurrency(String settlementCurrency) {
    this.settlementCurrency = settlementCurrency;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TransactionFieldMap transactionFieldMap = (TransactionFieldMap) o;
    return Objects.equals(this.transactionId, transactionFieldMap.transactionId) &&
        Objects.equals(this.type, transactionFieldMap.type) &&
        Objects.equals(this.source, transactionFieldMap.source) &&
        Objects.equals(this.lusidInstrumentId, transactionFieldMap.lusidInstrumentId) &&
        Objects.equals(this.instrumentScope, transactionFieldMap.instrumentScope) &&
        Objects.equals(this.tradeDate, transactionFieldMap.tradeDate) &&
        Objects.equals(this.settlementDate, transactionFieldMap.settlementDate) &&
        Objects.equals(this.units, transactionFieldMap.units) &&
        Objects.equals(this.transactionPrice, transactionFieldMap.transactionPrice) &&
        Objects.equals(this.transactionCurrency, transactionFieldMap.transactionCurrency) &&
        Objects.equals(this.exchangeRate, transactionFieldMap.exchangeRate) &&
        Objects.equals(this.totalConsideration, transactionFieldMap.totalConsideration) &&
        Objects.equals(this.settlementCurrency, transactionFieldMap.settlementCurrency);
  }

  @Override
  public int hashCode() {
    return Objects.hash(transactionId, type, source, lusidInstrumentId, instrumentScope, tradeDate, settlementDate, units, transactionPrice, transactionCurrency, exchangeRate, totalConsideration, settlementCurrency);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TransactionFieldMap {\n");
    sb.append("    transactionId: ").append(toIndentedString(transactionId)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    lusidInstrumentId: ").append(toIndentedString(lusidInstrumentId)).append("\n");
    sb.append("    instrumentScope: ").append(toIndentedString(instrumentScope)).append("\n");
    sb.append("    tradeDate: ").append(toIndentedString(tradeDate)).append("\n");
    sb.append("    settlementDate: ").append(toIndentedString(settlementDate)).append("\n");
    sb.append("    units: ").append(toIndentedString(units)).append("\n");
    sb.append("    transactionPrice: ").append(toIndentedString(transactionPrice)).append("\n");
    sb.append("    transactionCurrency: ").append(toIndentedString(transactionCurrency)).append("\n");
    sb.append("    exchangeRate: ").append(toIndentedString(exchangeRate)).append("\n");
    sb.append("    totalConsideration: ").append(toIndentedString(totalConsideration)).append("\n");
    sb.append("    settlementCurrency: ").append(toIndentedString(settlementCurrency)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("transactionId");
    openapiFields.add("type");
    openapiFields.add("source");
    openapiFields.add("lusidInstrumentId");
    openapiFields.add("instrumentScope");
    openapiFields.add("tradeDate");
    openapiFields.add("settlementDate");
    openapiFields.add("units");
    openapiFields.add("transactionPrice");
    openapiFields.add("transactionCurrency");
    openapiFields.add("exchangeRate");
    openapiFields.add("totalConsideration");
    openapiFields.add("settlementCurrency");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("transactionId");
    openapiRequiredFields.add("type");
    openapiRequiredFields.add("source");
    openapiRequiredFields.add("lusidInstrumentId");
    openapiRequiredFields.add("instrumentScope");
    openapiRequiredFields.add("tradeDate");
    openapiRequiredFields.add("settlementDate");
    openapiRequiredFields.add("units");
    openapiRequiredFields.add("transactionPrice");
    openapiRequiredFields.add("transactionCurrency");
    openapiRequiredFields.add("exchangeRate");
    openapiRequiredFields.add("totalConsideration");
    openapiRequiredFields.add("settlementCurrency");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to TransactionFieldMap
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TransactionFieldMap.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TransactionFieldMap is not found in the empty JSON string", TransactionFieldMap.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TransactionFieldMap.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("transactionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transactionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transactionId").toString()));
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if (!jsonObj.get("source").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `source` to be a primitive type in the JSON string but got `%s`", jsonObj.get("source").toString()));
      }
      if (!jsonObj.get("lusidInstrumentId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lusidInstrumentId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lusidInstrumentId").toString()));
      }
      if (!jsonObj.get("instrumentScope").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `instrumentScope` to be a primitive type in the JSON string but got `%s`", jsonObj.get("instrumentScope").toString()));
      }
      if (!jsonObj.get("tradeDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tradeDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tradeDate").toString()));
      }
      if (!jsonObj.get("settlementDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `settlementDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("settlementDate").toString()));
      }
      if (!jsonObj.get("units").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `units` to be a primitive type in the JSON string but got `%s`", jsonObj.get("units").toString()));
      }
      // validate the required field `transactionPrice`
      TransactionPriceAndType.validateJsonElement(jsonObj.get("transactionPrice"));
      if (!jsonObj.get("transactionCurrency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transactionCurrency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transactionCurrency").toString()));
      }
      if (!jsonObj.get("exchangeRate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `exchangeRate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("exchangeRate").toString()));
      }
      // validate the required field `totalConsideration`
      TransactionCurrencyAndAmount.validateJsonElement(jsonObj.get("totalConsideration"));
      if (!jsonObj.get("settlementCurrency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `settlementCurrency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("settlementCurrency").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TransactionFieldMap.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TransactionFieldMap' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TransactionFieldMap> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TransactionFieldMap.class));

       return (TypeAdapter<T>) new TypeAdapter<TransactionFieldMap>() {
           @Override
           public void write(JsonWriter out, TransactionFieldMap value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TransactionFieldMap read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TransactionFieldMap given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TransactionFieldMap
  * @throws IOException if the JSON string is invalid with respect to TransactionFieldMap
  */
  public static TransactionFieldMap fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TransactionFieldMap.class);
  }

 /**
  * Convert an instance of TransactionFieldMap to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
