/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * The individual event types.
 */
@JsonAdapter(InstrumentEventType.Adapter.class)
public enum InstrumentEventType {
  
  TRANSITIONEVENT("TransitionEvent"),
  
  INFORMATIONALEVENT("InformationalEvent"),
  
  OPENEVENT("OpenEvent"),
  
  CLOSEEVENT("CloseEvent"),
  
  STOCKSPLITEVENT("StockSplitEvent"),
  
  BONDDEFAULTEVENT("BondDefaultEvent"),
  
  CASHDIVIDENDEVENT("CashDividendEvent"),
  
  AMORTISATIONEVENT("AmortisationEvent"),
  
  CASHFLOWEVENT("CashFlowEvent"),
  
  EXERCISEEVENT("ExerciseEvent"),
  
  RESETEVENT("ResetEvent"),
  
  TRIGGEREVENT("TriggerEvent"),
  
  RAWVENDOREVENT("RawVendorEvent"),
  
  INFORMATIONALERROREVENT("InformationalErrorEvent"),
  
  BONDCOUPONEVENT("BondCouponEvent"),
  
  DIVIDENDREINVESTMENTEVENT("DividendReinvestmentEvent"),
  
  ACCUMULATIONEVENT("AccumulationEvent"),
  
  BONDPRINCIPALEVENT("BondPrincipalEvent"),
  
  DIVIDENDOPTIONEVENT("DividendOptionEvent"),
  
  MATURITYEVENT("MaturityEvent"),
  
  FXFORWARDSETTLEMENTEVENT("FxForwardSettlementEvent"),
  
  EXPIRYEVENT("ExpiryEvent"),
  
  SCRIPDIVIDENDEVENT("ScripDividendEvent"),
  
  STOCKDIVIDENDEVENT("StockDividendEvent"),
  
  REVERSESTOCKSPLITEVENT("ReverseStockSplitEvent"),
  
  CAPITALDISTRIBUTIONEVENT("CapitalDistributionEvent"),
  
  SPINOFFEVENT("SpinOffEvent"),
  
  MERGEREVENT("MergerEvent"),
  
  FUTUREEXPIRYEVENT("FutureExpiryEvent"),
  
  SWAPCASHFLOWEVENT("SwapCashFlowEvent"),
  
  SWAPPRINCIPALEVENT("SwapPrincipalEvent"),
  
  CREDITPREMIUMCASHFLOWEVENT("CreditPremiumCashFlowEvent"),
  
  CDSCREDITEVENT("CdsCreditEvent"),
  
  CDXCREDITEVENT("CdxCreditEvent"),
  
  MBSCOUPONEVENT("MbsCouponEvent"),
  
  MBSPRINCIPALEVENT("MbsPrincipalEvent"),
  
  BONUSISSUEEVENT("BonusIssueEvent"),
  
  MBSPRINCIPALWRITEOFFEVENT("MbsPrincipalWriteOffEvent"),
  
  MBSINTERESTDEFERRALEVENT("MbsInterestDeferralEvent"),
  
  MBSINTERESTSHORTFALLEVENT("MbsInterestShortfallEvent"),
  
  TENDEREVENT("TenderEvent"),
  
  CALLONINTERMEDIATESECURITIESEVENT("CallOnIntermediateSecuritiesEvent"),
  
  INTERMEDIATESECURITIESDISTRIBUTIONEVENT("IntermediateSecuritiesDistributionEvent"),
  
  OPTIONEXERCISEPHYSICALEVENT("OptionExercisePhysicalEvent"),
  
  OPTIONEXERCISECASHEVENT("OptionExerciseCashEvent"),
  
  PROTECTIONPAYOUTCASHFLOWEVENT("ProtectionPayoutCashFlowEvent"),
  
  TERMDEPOSITINTERESTEVENT("TermDepositInterestEvent"),
  
  TERMDEPOSITPRINCIPALEVENT("TermDepositPrincipalEvent"),
  
  EARLYREDEMPTIONEVENT("EarlyRedemptionEvent"),
  
  FUTUREMARKTOMARKETEVENT("FutureMarkToMarketEvent"),
  
  ADJUSTGLOBALCOMMITMENTEVENT("AdjustGlobalCommitmentEvent"),
  
  CONTRACTINITIALISATIONEVENT("ContractInitialisationEvent"),
  
  DRAWDOWNEVENT("DrawdownEvent"),
  
  LOANINTERESTREPAYMENTEVENT("LoanInterestRepaymentEvent"),
  
  UPDATEDEPOSITAMOUNTEVENT("UpdateDepositAmountEvent"),
  
  LOANPRINCIPALREPAYMENTEVENT("LoanPrincipalRepaymentEvent"),
  
  DEPOSITINTERESTPAYMENTEVENT("DepositInterestPaymentEvent"),
  
  DEPOSITCLOSEEVENT("DepositCloseEvent"),
  
  LOANFACILITYCONTRACTROLLOVEREVENT("LoanFacilityContractRolloverEvent"),
  
  REPURCHASEOFFEREVENT("RepurchaseOfferEvent"),
  
  REPOPARTIALCLOSUREEVENT("RepoPartialClosureEvent"),
  
  REPOCASHFLOWEVENT("RepoCashFlowEvent"),
  
  FLEXIBLEREPOINTERESTPAYMENTEVENT("FlexibleRepoInterestPaymentEvent"),
  
  FLEXIBLEREPOCASHFLOWEVENT("FlexibleRepoCashFlowEvent"),
  
  FLEXIBLEREPOCOLLATERALEVENT("FlexibleRepoCollateralEvent"),
  
  CONVERSIONEVENT("ConversionEvent"),
  
  FLEXIBLEREPOPARTIALCLOSUREEVENT("FlexibleRepoPartialClosureEvent"),
  
  FLEXIBLEREPOFULLCLOSUREEVENT("FlexibleRepoFullClosureEvent"),
  
  CAPLETFLOORLETCASHFLOWEVENT("CapletFloorletCashFlowEvent");

  private String value;

  InstrumentEventType(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static InstrumentEventType fromValue(String value) {
    for (InstrumentEventType b : InstrumentEventType.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<InstrumentEventType> {
    @Override
    public void write(final JsonWriter jsonWriter, final InstrumentEventType enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public InstrumentEventType read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return InstrumentEventType.fromValue(value);
    }
  }
}

