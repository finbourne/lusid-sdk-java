/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import java.util.Arrays;
import com.finbourne.lusid.model.ResourceId;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * A list of Composite Breakdowns.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class PortfolioReturnBreakdown {
  public static final String SERIALIZED_NAME_PORTFOLIO_ID = "portfolioId";
  @SerializedName(SERIALIZED_NAME_PORTFOLIO_ID)
  private ResourceId portfolioId;

  public static final String SERIALIZED_NAME_RATE_OF_RETURN = "rateOfReturn";
  @SerializedName(SERIALIZED_NAME_RATE_OF_RETURN)
  private java.math.BigDecimal rateOfReturn;

  public static final String SERIALIZED_NAME_OPENING_MARKET_VALUE = "openingMarketValue";
  @SerializedName(SERIALIZED_NAME_OPENING_MARKET_VALUE)
  private java.math.BigDecimal openingMarketValue;

  public static final String SERIALIZED_NAME_CLOSING_MARKET_VALUE = "closingMarketValue";
  @SerializedName(SERIALIZED_NAME_CLOSING_MARKET_VALUE)
  private java.math.BigDecimal closingMarketValue;

  public static final String SERIALIZED_NAME_WEIGHT = "weight";
  @SerializedName(SERIALIZED_NAME_WEIGHT)
  private java.math.BigDecimal weight;

  public static final String SERIALIZED_NAME_CONSTITUENTS_IN_THE_COMPOSITE = "constituentsInTheComposite";
  @SerializedName(SERIALIZED_NAME_CONSTITUENTS_IN_THE_COMPOSITE)
  private Integer constituentsInTheComposite;

  public static final String SERIALIZED_NAME_CONSTITUENTS_MISSING = "constituentsMissing";
  @SerializedName(SERIALIZED_NAME_CONSTITUENTS_MISSING)
  private Integer constituentsMissing;

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private String currency;

  public static final String SERIALIZED_NAME_OPEN_FX_RATE = "openFxRate";
  @SerializedName(SERIALIZED_NAME_OPEN_FX_RATE)
  private java.math.BigDecimal openFxRate;

  public static final String SERIALIZED_NAME_CLOSE_FX_RATE = "closeFxRate";
  @SerializedName(SERIALIZED_NAME_CLOSE_FX_RATE)
  private java.math.BigDecimal closeFxRate;

  public static final String SERIALIZED_NAME_LOCAL_RATE_OF_RETURN = "localRateOfReturn";
  @SerializedName(SERIALIZED_NAME_LOCAL_RATE_OF_RETURN)
  private java.math.BigDecimal localRateOfReturn;

  public static final String SERIALIZED_NAME_LOCAL_OPENING_MARKET_VALUE = "localOpeningMarketValue";
  @SerializedName(SERIALIZED_NAME_LOCAL_OPENING_MARKET_VALUE)
  private java.math.BigDecimal localOpeningMarketValue;

  public static final String SERIALIZED_NAME_LOCAL_CLOSING_MARKET_VALUE = "localClosingMarketValue";
  @SerializedName(SERIALIZED_NAME_LOCAL_CLOSING_MARKET_VALUE)
  private java.math.BigDecimal localClosingMarketValue;

  public PortfolioReturnBreakdown() {
  }

  public PortfolioReturnBreakdown portfolioId(ResourceId portfolioId) {
    
    this.portfolioId = portfolioId;
    return this;
  }

   /**
   * Get portfolioId
   * @return portfolioId
  **/
  @javax.annotation.Nonnull
  public ResourceId getPortfolioId() {
    return portfolioId;
  }


  public void setPortfolioId(ResourceId portfolioId) {
    this.portfolioId = portfolioId;
  }


  public PortfolioReturnBreakdown rateOfReturn(java.math.BigDecimal rateOfReturn) {
    
    this.rateOfReturn = rateOfReturn;
    return this;
  }

   /**
   * The return number.
   * @return rateOfReturn
  **/
  @javax.annotation.Nullable
  public java.math.BigDecimal getRateOfReturn() {
    return rateOfReturn;
  }


  public void setRateOfReturn(java.math.BigDecimal rateOfReturn) {
    this.rateOfReturn = rateOfReturn;
  }


  public PortfolioReturnBreakdown openingMarketValue(java.math.BigDecimal openingMarketValue) {
    
    this.openingMarketValue = openingMarketValue;
    return this;
  }

   /**
   * The opening market value.
   * @return openingMarketValue
  **/
  @javax.annotation.Nullable
  public java.math.BigDecimal getOpeningMarketValue() {
    return openingMarketValue;
  }


  public void setOpeningMarketValue(java.math.BigDecimal openingMarketValue) {
    this.openingMarketValue = openingMarketValue;
  }


  public PortfolioReturnBreakdown closingMarketValue(java.math.BigDecimal closingMarketValue) {
    
    this.closingMarketValue = closingMarketValue;
    return this;
  }

   /**
   * The closing market value.
   * @return closingMarketValue
  **/
  @javax.annotation.Nullable
  public java.math.BigDecimal getClosingMarketValue() {
    return closingMarketValue;
  }


  public void setClosingMarketValue(java.math.BigDecimal closingMarketValue) {
    this.closingMarketValue = closingMarketValue;
  }


  public PortfolioReturnBreakdown weight(java.math.BigDecimal weight) {
    
    this.weight = weight;
    return this;
  }

   /**
   * The weight of the constituent into the composite.
   * @return weight
  **/
  @javax.annotation.Nullable
  public java.math.BigDecimal getWeight() {
    return weight;
  }


  public void setWeight(java.math.BigDecimal weight) {
    this.weight = weight;
  }


  public PortfolioReturnBreakdown constituentsInTheComposite(Integer constituentsInTheComposite) {
    
    this.constituentsInTheComposite = constituentsInTheComposite;
    return this;
  }

   /**
   * The number of members in the Composite on the given day.
   * @return constituentsInTheComposite
  **/
  @javax.annotation.Nullable
  public Integer getConstituentsInTheComposite() {
    return constituentsInTheComposite;
  }


  public void setConstituentsInTheComposite(Integer constituentsInTheComposite) {
    this.constituentsInTheComposite = constituentsInTheComposite;
  }


  public PortfolioReturnBreakdown constituentsMissing(Integer constituentsMissing) {
    
    this.constituentsMissing = constituentsMissing;
    return this;
  }

   /**
   * The number of the constituents which have a missing return on that day.
   * @return constituentsMissing
  **/
  @javax.annotation.Nullable
  public Integer getConstituentsMissing() {
    return constituentsMissing;
  }


  public void setConstituentsMissing(Integer constituentsMissing) {
    this.constituentsMissing = constituentsMissing;
  }


  public PortfolioReturnBreakdown currency(String currency) {
    
    this.currency = currency;
    return this;
  }

   /**
   * The currency of the portfolio.
   * @return currency
  **/
  @javax.annotation.Nullable
  public String getCurrency() {
    return currency;
  }


  public void setCurrency(String currency) {
    this.currency = currency;
  }


  public PortfolioReturnBreakdown openFxRate(java.math.BigDecimal openFxRate) {
    
    this.openFxRate = openFxRate;
    return this;
  }

   /**
   * The opening fxRate which is used in calculation.
   * @return openFxRate
  **/
  @javax.annotation.Nullable
  public java.math.BigDecimal getOpenFxRate() {
    return openFxRate;
  }


  public void setOpenFxRate(java.math.BigDecimal openFxRate) {
    this.openFxRate = openFxRate;
  }


  public PortfolioReturnBreakdown closeFxRate(java.math.BigDecimal closeFxRate) {
    
    this.closeFxRate = closeFxRate;
    return this;
  }

   /**
   * The closing fxRate which is used in calculation.
   * @return closeFxRate
  **/
  @javax.annotation.Nullable
  public java.math.BigDecimal getCloseFxRate() {
    return closeFxRate;
  }


  public void setCloseFxRate(java.math.BigDecimal closeFxRate) {
    this.closeFxRate = closeFxRate;
  }


  public PortfolioReturnBreakdown localRateOfReturn(java.math.BigDecimal localRateOfReturn) {
    
    this.localRateOfReturn = localRateOfReturn;
    return this;
  }

   /**
   * The rate of return in the local currency.
   * @return localRateOfReturn
  **/
  @javax.annotation.Nullable
  public java.math.BigDecimal getLocalRateOfReturn() {
    return localRateOfReturn;
  }


  public void setLocalRateOfReturn(java.math.BigDecimal localRateOfReturn) {
    this.localRateOfReturn = localRateOfReturn;
  }


  public PortfolioReturnBreakdown localOpeningMarketValue(java.math.BigDecimal localOpeningMarketValue) {
    
    this.localOpeningMarketValue = localOpeningMarketValue;
    return this;
  }

   /**
   * The opening market value in the local currency.
   * @return localOpeningMarketValue
  **/
  @javax.annotation.Nullable
  public java.math.BigDecimal getLocalOpeningMarketValue() {
    return localOpeningMarketValue;
  }


  public void setLocalOpeningMarketValue(java.math.BigDecimal localOpeningMarketValue) {
    this.localOpeningMarketValue = localOpeningMarketValue;
  }


  public PortfolioReturnBreakdown localClosingMarketValue(java.math.BigDecimal localClosingMarketValue) {
    
    this.localClosingMarketValue = localClosingMarketValue;
    return this;
  }

   /**
   * The closing market value in the local currency.
   * @return localClosingMarketValue
  **/
  @javax.annotation.Nullable
  public java.math.BigDecimal getLocalClosingMarketValue() {
    return localClosingMarketValue;
  }


  public void setLocalClosingMarketValue(java.math.BigDecimal localClosingMarketValue) {
    this.localClosingMarketValue = localClosingMarketValue;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PortfolioReturnBreakdown portfolioReturnBreakdown = (PortfolioReturnBreakdown) o;
    return Objects.equals(this.portfolioId, portfolioReturnBreakdown.portfolioId) &&
        (this.rateOfReturn.compareTo(portfolioReturnBreakdown.getRateOfReturn()) == 0) &&
        (this.openingMarketValue.compareTo(portfolioReturnBreakdown.getOpeningMarketValue()) == 0) &&
        (this.closingMarketValue.compareTo(portfolioReturnBreakdown.getClosingMarketValue()) == 0) &&
        (this.weight.compareTo(portfolioReturnBreakdown.getWeight()) == 0) &&
        Objects.equals(this.constituentsInTheComposite, portfolioReturnBreakdown.constituentsInTheComposite) &&
        Objects.equals(this.constituentsMissing, portfolioReturnBreakdown.constituentsMissing) &&
        Objects.equals(this.currency, portfolioReturnBreakdown.currency) &&
        (this.openFxRate.compareTo(portfolioReturnBreakdown.getOpenFxRate()) == 0) &&
        (this.closeFxRate.compareTo(portfolioReturnBreakdown.getCloseFxRate()) == 0) &&
        (this.localRateOfReturn.compareTo(portfolioReturnBreakdown.getLocalRateOfReturn()) == 0) &&
        (this.localOpeningMarketValue.compareTo(portfolioReturnBreakdown.getLocalOpeningMarketValue()) == 0) &&
        (this.localClosingMarketValue.compareTo(portfolioReturnBreakdown.getLocalClosingMarketValue()) == 0);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(portfolioId, rateOfReturn, openingMarketValue, closingMarketValue, weight, constituentsInTheComposite, constituentsMissing, currency, openFxRate, closeFxRate, localRateOfReturn, localOpeningMarketValue, localClosingMarketValue);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PortfolioReturnBreakdown {\n");
    sb.append("    portfolioId: ").append(toIndentedString(portfolioId)).append("\n");
    sb.append("    rateOfReturn: ").append(toIndentedString(rateOfReturn)).append("\n");
    sb.append("    openingMarketValue: ").append(toIndentedString(openingMarketValue)).append("\n");
    sb.append("    closingMarketValue: ").append(toIndentedString(closingMarketValue)).append("\n");
    sb.append("    weight: ").append(toIndentedString(weight)).append("\n");
    sb.append("    constituentsInTheComposite: ").append(toIndentedString(constituentsInTheComposite)).append("\n");
    sb.append("    constituentsMissing: ").append(toIndentedString(constituentsMissing)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    openFxRate: ").append(toIndentedString(openFxRate)).append("\n");
    sb.append("    closeFxRate: ").append(toIndentedString(closeFxRate)).append("\n");
    sb.append("    localRateOfReturn: ").append(toIndentedString(localRateOfReturn)).append("\n");
    sb.append("    localOpeningMarketValue: ").append(toIndentedString(localOpeningMarketValue)).append("\n");
    sb.append("    localClosingMarketValue: ").append(toIndentedString(localClosingMarketValue)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("portfolioId");
    openapiFields.add("rateOfReturn");
    openapiFields.add("openingMarketValue");
    openapiFields.add("closingMarketValue");
    openapiFields.add("weight");
    openapiFields.add("constituentsInTheComposite");
    openapiFields.add("constituentsMissing");
    openapiFields.add("currency");
    openapiFields.add("openFxRate");
    openapiFields.add("closeFxRate");
    openapiFields.add("localRateOfReturn");
    openapiFields.add("localOpeningMarketValue");
    openapiFields.add("localClosingMarketValue");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("portfolioId");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to PortfolioReturnBreakdown
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!PortfolioReturnBreakdown.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PortfolioReturnBreakdown is not found in the empty JSON string", PortfolioReturnBreakdown.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!PortfolioReturnBreakdown.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PortfolioReturnBreakdown` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PortfolioReturnBreakdown.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // validate the required field `portfolioId`
      ResourceId.validateJsonObject(jsonObj.getAsJsonObject("portfolioId"));
      if ((jsonObj.get("currency") != null && !jsonObj.get("currency").isJsonNull()) && !jsonObj.get("currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PortfolioReturnBreakdown.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PortfolioReturnBreakdown' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PortfolioReturnBreakdown> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PortfolioReturnBreakdown.class));

       return (TypeAdapter<T>) new TypeAdapter<PortfolioReturnBreakdown>() {
           @Override
           public void write(JsonWriter out, PortfolioReturnBreakdown value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PortfolioReturnBreakdown read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PortfolioReturnBreakdown given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PortfolioReturnBreakdown
  * @throws IOException if the JSON string is invalid with respect to PortfolioReturnBreakdown
  */
  public static PortfolioReturnBreakdown fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PortfolioReturnBreakdown.class);
  }

 /**
  * Convert an instance of PortfolioReturnBreakdown to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
