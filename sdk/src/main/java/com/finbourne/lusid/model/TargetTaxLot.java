/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import java.util.Arrays;
import com.finbourne.lusid.model.CurrencyAndAmount;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * Used to specify holdings target amounts at the tax-lot level
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class TargetTaxLot {
  public static final String SERIALIZED_NAME_UNITS = "units";
  @SerializedName(SERIALIZED_NAME_UNITS)
  private java.math.BigDecimal units;

  public static final String SERIALIZED_NAME_COST = "cost";
  @SerializedName(SERIALIZED_NAME_COST)
  private CurrencyAndAmount cost;

  public static final String SERIALIZED_NAME_PORTFOLIO_COST = "portfolioCost";
  @SerializedName(SERIALIZED_NAME_PORTFOLIO_COST)
  private java.math.BigDecimal portfolioCost;

  public static final String SERIALIZED_NAME_PRICE = "price";
  @SerializedName(SERIALIZED_NAME_PRICE)
  private java.math.BigDecimal price;

  public static final String SERIALIZED_NAME_PURCHASE_DATE = "purchaseDate";
  @SerializedName(SERIALIZED_NAME_PURCHASE_DATE)
  private OffsetDateTime purchaseDate;

  public static final String SERIALIZED_NAME_SETTLEMENT_DATE = "settlementDate";
  @SerializedName(SERIALIZED_NAME_SETTLEMENT_DATE)
  private OffsetDateTime settlementDate;

  public TargetTaxLot() {
  }

  public TargetTaxLot units(java.math.BigDecimal units) {
    
    this.units = units;
    return this;
  }

   /**
   * The number of units of the instrument in this tax-lot.
   * @return units
  **/
  @javax.annotation.Nonnull
  public java.math.BigDecimal getUnits() {
    return units;
  }


  public void setUnits(java.math.BigDecimal units) {
    this.units = units;
  }


  public TargetTaxLot cost(CurrencyAndAmount cost) {
    
    this.cost = cost;
    return this;
  }

   /**
   * Get cost
   * @return cost
  **/
  @javax.annotation.Nullable
  public CurrencyAndAmount getCost() {
    return cost;
  }


  public void setCost(CurrencyAndAmount cost) {
    this.cost = cost;
  }


  public TargetTaxLot portfolioCost(java.math.BigDecimal portfolioCost) {
    
    this.portfolioCost = portfolioCost;
    return this;
  }

   /**
   * The total cost of the tax-lot in the transaction portfolio&#39;s base currency.
   * @return portfolioCost
  **/
  @javax.annotation.Nullable
  public java.math.BigDecimal getPortfolioCost() {
    return portfolioCost;
  }


  public void setPortfolioCost(java.math.BigDecimal portfolioCost) {
    this.portfolioCost = portfolioCost;
  }


  public TargetTaxLot price(java.math.BigDecimal price) {
    
    this.price = price;
    return this;
  }

   /**
   * The purchase price of each unit of the instrument held in this tax-lot. This forms part of the unique key required for multiple tax-lots.
   * @return price
  **/
  @javax.annotation.Nullable
  public java.math.BigDecimal getPrice() {
    return price;
  }


  public void setPrice(java.math.BigDecimal price) {
    this.price = price;
  }


  public TargetTaxLot purchaseDate(OffsetDateTime purchaseDate) {
    
    this.purchaseDate = purchaseDate;
    return this;
  }

   /**
   * The purchase date of this tax-lot. This forms part of the unique key required for multiple tax-lots.
   * @return purchaseDate
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getPurchaseDate() {
    return purchaseDate;
  }


  public void setPurchaseDate(OffsetDateTime purchaseDate) {
    this.purchaseDate = purchaseDate;
  }


  public TargetTaxLot settlementDate(OffsetDateTime settlementDate) {
    
    this.settlementDate = settlementDate;
    return this;
  }

   /**
   * The settlement date of the tax-lot&#39;s opening transaction.
   * @return settlementDate
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getSettlementDate() {
    return settlementDate;
  }


  public void setSettlementDate(OffsetDateTime settlementDate) {
    this.settlementDate = settlementDate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TargetTaxLot targetTaxLot = (TargetTaxLot) o;
    return (this.units.compareTo(targetTaxLot.getUnits()) == 0) &&
        Objects.equals(this.cost, targetTaxLot.cost) &&
        (this.portfolioCost.compareTo(targetTaxLot.getPortfolioCost()) == 0) &&
        (this.price.compareTo(targetTaxLot.getPrice()) == 0) &&
        Objects.equals(this.purchaseDate, targetTaxLot.purchaseDate) &&
        Objects.equals(this.settlementDate, targetTaxLot.settlementDate);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(units, cost, portfolioCost, price, purchaseDate, settlementDate);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TargetTaxLot {\n");
    sb.append("    units: ").append(toIndentedString(units)).append("\n");
    sb.append("    cost: ").append(toIndentedString(cost)).append("\n");
    sb.append("    portfolioCost: ").append(toIndentedString(portfolioCost)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("    purchaseDate: ").append(toIndentedString(purchaseDate)).append("\n");
    sb.append("    settlementDate: ").append(toIndentedString(settlementDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("units");
    openapiFields.add("cost");
    openapiFields.add("portfolioCost");
    openapiFields.add("price");
    openapiFields.add("purchaseDate");
    openapiFields.add("settlementDate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("units");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to TargetTaxLot
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!TargetTaxLot.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TargetTaxLot is not found in the empty JSON string", TargetTaxLot.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!TargetTaxLot.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TargetTaxLot` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TargetTaxLot.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // validate the optional field `cost`
      if (jsonObj.get("cost") != null && !jsonObj.get("cost").isJsonNull()) {
        CurrencyAndAmount.validateJsonObject(jsonObj.getAsJsonObject("cost"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TargetTaxLot.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TargetTaxLot' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TargetTaxLot> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TargetTaxLot.class));

       return (TypeAdapter<T>) new TypeAdapter<TargetTaxLot>() {
           @Override
           public void write(JsonWriter out, TargetTaxLot value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TargetTaxLot read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TargetTaxLot given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TargetTaxLot
  * @throws IOException if the JSON string is invalid with respect to TargetTaxLot
  */
  public static TargetTaxLot fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TargetTaxLot.class);
  }

 /**
  * Convert an instance of TargetTaxLot to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
