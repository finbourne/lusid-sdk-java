/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * CreateRelationDefinitionRequest
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class CreateRelationDefinitionRequest {
  public static final String SERIALIZED_NAME_SCOPE = "scope";
  @SerializedName(SERIALIZED_NAME_SCOPE)
  private String scope;

  public static final String SERIALIZED_NAME_CODE = "code";
  @SerializedName(SERIALIZED_NAME_CODE)
  private String code;

  public static final String SERIALIZED_NAME_SOURCE_ENTITY_DOMAIN = "sourceEntityDomain";
  @SerializedName(SERIALIZED_NAME_SOURCE_ENTITY_DOMAIN)
  private String sourceEntityDomain;

  public static final String SERIALIZED_NAME_TARGET_ENTITY_DOMAIN = "targetEntityDomain";
  @SerializedName(SERIALIZED_NAME_TARGET_ENTITY_DOMAIN)
  private String targetEntityDomain;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_OUTWARD_DESCRIPTION = "outwardDescription";
  @SerializedName(SERIALIZED_NAME_OUTWARD_DESCRIPTION)
  private String outwardDescription;

  public static final String SERIALIZED_NAME_INWARD_DESCRIPTION = "inwardDescription";
  @SerializedName(SERIALIZED_NAME_INWARD_DESCRIPTION)
  private String inwardDescription;

  public static final String SERIALIZED_NAME_LIFE_TIME = "lifeTime";
  @SerializedName(SERIALIZED_NAME_LIFE_TIME)
  private String lifeTime;

  public static final String SERIALIZED_NAME_CONSTRAINT_STYLE = "constraintStyle";
  @SerializedName(SERIALIZED_NAME_CONSTRAINT_STYLE)
  private String constraintStyle;

  public CreateRelationDefinitionRequest() {
  }

  public CreateRelationDefinitionRequest scope(String scope) {
    
    this.scope = scope;
    return this;
  }

   /**
   * The scope that the relation exists in.
   * @return scope
  **/
  @jakarta.annotation.Nonnull
  public String getScope() {
    return scope;
  }


  public void setScope(String scope) {
    this.scope = scope;
  }


  public CreateRelationDefinitionRequest code(String code) {
    
    this.code = code;
    return this;
  }

   /**
   * The code of the relation. Together with the scope this uniquely defines the relation.
   * @return code
  **/
  @jakarta.annotation.Nonnull
  public String getCode() {
    return code;
  }


  public void setCode(String code) {
    this.code = code;
  }


  public CreateRelationDefinitionRequest sourceEntityDomain(String sourceEntityDomain) {
    
    this.sourceEntityDomain = sourceEntityDomain;
    return this;
  }

   /**
   * The entity domain of the source entity object must be, allowed values are \&quot;Portfolio\&quot; and \&quot;Person\&quot;
   * @return sourceEntityDomain
  **/
  @jakarta.annotation.Nonnull
  public String getSourceEntityDomain() {
    return sourceEntityDomain;
  }


  public void setSourceEntityDomain(String sourceEntityDomain) {
    this.sourceEntityDomain = sourceEntityDomain;
  }


  public CreateRelationDefinitionRequest targetEntityDomain(String targetEntityDomain) {
    
    this.targetEntityDomain = targetEntityDomain;
    return this;
  }

   /**
   * The entity domain of the target entity object must be, allowed values are \&quot;Portfolio\&quot; and \&quot;Person\&quot;
   * @return targetEntityDomain
  **/
  @jakarta.annotation.Nonnull
  public String getTargetEntityDomain() {
    return targetEntityDomain;
  }


  public void setTargetEntityDomain(String targetEntityDomain) {
    this.targetEntityDomain = targetEntityDomain;
  }


  public CreateRelationDefinitionRequest displayName(String displayName) {
    
    this.displayName = displayName;
    return this;
  }

   /**
   * The display name of the relation.
   * @return displayName
  **/
  @jakarta.annotation.Nonnull
  public String getDisplayName() {
    return displayName;
  }


  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public CreateRelationDefinitionRequest outwardDescription(String outwardDescription) {
    
    this.outwardDescription = outwardDescription;
    return this;
  }

   /**
   * The description to relate source entity object and target entity object.
   * @return outwardDescription
  **/
  @jakarta.annotation.Nonnull
  public String getOutwardDescription() {
    return outwardDescription;
  }


  public void setOutwardDescription(String outwardDescription) {
    this.outwardDescription = outwardDescription;
  }


  public CreateRelationDefinitionRequest inwardDescription(String inwardDescription) {
    
    this.inwardDescription = inwardDescription;
    return this;
  }

   /**
   * The description to relate target entity object and source entity object.
   * @return inwardDescription
  **/
  @jakarta.annotation.Nonnull
  public String getInwardDescription() {
    return inwardDescription;
  }


  public void setInwardDescription(String inwardDescription) {
    this.inwardDescription = inwardDescription;
  }


  public CreateRelationDefinitionRequest lifeTime(String lifeTime) {
    
    this.lifeTime = lifeTime;
    return this;
  }

   /**
   * Describes how the relations can change over time, allowed values are \&quot;Perpetual\&quot; and \&quot;TimeVariant\&quot;
   * @return lifeTime
  **/
  @jakarta.annotation.Nullable
  public String getLifeTime() {
    return lifeTime;
  }


  public void setLifeTime(String lifeTime) {
    this.lifeTime = lifeTime;
  }


  public CreateRelationDefinitionRequest constraintStyle(String constraintStyle) {
    
    this.constraintStyle = constraintStyle;
    return this;
  }

   /**
   * Describes the uniqueness and cardinality for relations with a specific source entity object and relations under this definition. Allowed values are \&quot;Property\&quot; and \&quot;Collection\&quot;, defaults to \&quot;Collection\&quot; if not specified.
   * @return constraintStyle
  **/
  @jakarta.annotation.Nullable
  public String getConstraintStyle() {
    return constraintStyle;
  }


  public void setConstraintStyle(String constraintStyle) {
    this.constraintStyle = constraintStyle;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateRelationDefinitionRequest createRelationDefinitionRequest = (CreateRelationDefinitionRequest) o;
    return Objects.equals(this.scope, createRelationDefinitionRequest.scope) &&
        Objects.equals(this.code, createRelationDefinitionRequest.code) &&
        Objects.equals(this.sourceEntityDomain, createRelationDefinitionRequest.sourceEntityDomain) &&
        Objects.equals(this.targetEntityDomain, createRelationDefinitionRequest.targetEntityDomain) &&
        Objects.equals(this.displayName, createRelationDefinitionRequest.displayName) &&
        Objects.equals(this.outwardDescription, createRelationDefinitionRequest.outwardDescription) &&
        Objects.equals(this.inwardDescription, createRelationDefinitionRequest.inwardDescription) &&
        Objects.equals(this.lifeTime, createRelationDefinitionRequest.lifeTime) &&
        Objects.equals(this.constraintStyle, createRelationDefinitionRequest.constraintStyle);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(scope, code, sourceEntityDomain, targetEntityDomain, displayName, outwardDescription, inwardDescription, lifeTime, constraintStyle);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateRelationDefinitionRequest {\n");
    sb.append("    scope: ").append(toIndentedString(scope)).append("\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    sourceEntityDomain: ").append(toIndentedString(sourceEntityDomain)).append("\n");
    sb.append("    targetEntityDomain: ").append(toIndentedString(targetEntityDomain)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    outwardDescription: ").append(toIndentedString(outwardDescription)).append("\n");
    sb.append("    inwardDescription: ").append(toIndentedString(inwardDescription)).append("\n");
    sb.append("    lifeTime: ").append(toIndentedString(lifeTime)).append("\n");
    sb.append("    constraintStyle: ").append(toIndentedString(constraintStyle)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("scope");
    openapiFields.add("code");
    openapiFields.add("sourceEntityDomain");
    openapiFields.add("targetEntityDomain");
    openapiFields.add("displayName");
    openapiFields.add("outwardDescription");
    openapiFields.add("inwardDescription");
    openapiFields.add("lifeTime");
    openapiFields.add("constraintStyle");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("scope");
    openapiRequiredFields.add("code");
    openapiRequiredFields.add("sourceEntityDomain");
    openapiRequiredFields.add("targetEntityDomain");
    openapiRequiredFields.add("displayName");
    openapiRequiredFields.add("outwardDescription");
    openapiRequiredFields.add("inwardDescription");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CreateRelationDefinitionRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!CreateRelationDefinitionRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateRelationDefinitionRequest is not found in the empty JSON string", CreateRelationDefinitionRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!CreateRelationDefinitionRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateRelationDefinitionRequest` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateRelationDefinitionRequest.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("scope").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `scope` to be a primitive type in the JSON string but got `%s`", jsonObj.get("scope").toString()));
      }
      if (!jsonObj.get("code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("code").toString()));
      }
      if (!jsonObj.get("sourceEntityDomain").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourceEntityDomain` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sourceEntityDomain").toString()));
      }
      if (!jsonObj.get("targetEntityDomain").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `targetEntityDomain` to be a primitive type in the JSON string but got `%s`", jsonObj.get("targetEntityDomain").toString()));
      }
      if (!jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if (!jsonObj.get("outwardDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `outwardDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("outwardDescription").toString()));
      }
      if (!jsonObj.get("inwardDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `inwardDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("inwardDescription").toString()));
      }
      if ((jsonObj.get("lifeTime") != null && !jsonObj.get("lifeTime").isJsonNull()) && !jsonObj.get("lifeTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lifeTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lifeTime").toString()));
      }
      if ((jsonObj.get("constraintStyle") != null && !jsonObj.get("constraintStyle").isJsonNull()) && !jsonObj.get("constraintStyle").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `constraintStyle` to be a primitive type in the JSON string but got `%s`", jsonObj.get("constraintStyle").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateRelationDefinitionRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateRelationDefinitionRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateRelationDefinitionRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateRelationDefinitionRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateRelationDefinitionRequest>() {
           @Override
           public void write(JsonWriter out, CreateRelationDefinitionRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateRelationDefinitionRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CreateRelationDefinitionRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CreateRelationDefinitionRequest
  * @throws IOException if the JSON string is invalid with respect to CreateRelationDefinitionRequest
  */
  public static CreateRelationDefinitionRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateRelationDefinitionRequest.class);
  }

 /**
  * Convert an instance of CreateRelationDefinitionRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
