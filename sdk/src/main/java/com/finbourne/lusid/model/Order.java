/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import com.finbourne.lusid.model.CurrencyAndAmount;
import com.finbourne.lusid.model.DataModelMembership;
import com.finbourne.lusid.model.Link;
import com.finbourne.lusid.model.PerpetualProperty;
import com.finbourne.lusid.model.ResourceId;
import com.finbourne.lusid.model.Version;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * An Order for a certain quantity of a specific instrument
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class Order {
  public static final String SERIALIZED_NAME_PROPERTIES = "properties";
  @SerializedName(SERIALIZED_NAME_PROPERTIES)
  private Map<String, PerpetualProperty> properties;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private Version version;

  public static final String SERIALIZED_NAME_INSTRUMENT_IDENTIFIERS = "instrumentIdentifiers";
  @SerializedName(SERIALIZED_NAME_INSTRUMENT_IDENTIFIERS)
  private Map<String, String> instrumentIdentifiers = new HashMap<>();

  public static final String SERIALIZED_NAME_QUANTITY = "quantity";
  @SerializedName(SERIALIZED_NAME_QUANTITY)
  private java.math.BigDecimal quantity;

  public static final String SERIALIZED_NAME_SIDE = "side";
  @SerializedName(SERIALIZED_NAME_SIDE)
  private String side;

  public static final String SERIALIZED_NAME_ORDER_BOOK_ID = "orderBookId";
  @SerializedName(SERIALIZED_NAME_ORDER_BOOK_ID)
  private ResourceId orderBookId;

  public static final String SERIALIZED_NAME_PORTFOLIO_ID = "portfolioId";
  @SerializedName(SERIALIZED_NAME_PORTFOLIO_ID)
  private ResourceId portfolioId;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private ResourceId id;

  public static final String SERIALIZED_NAME_INSTRUMENT_SCOPE = "instrumentScope";
  @SerializedName(SERIALIZED_NAME_INSTRUMENT_SCOPE)
  private String instrumentScope;

  public static final String SERIALIZED_NAME_LUSID_INSTRUMENT_ID = "lusidInstrumentId";
  @SerializedName(SERIALIZED_NAME_LUSID_INSTRUMENT_ID)
  private String lusidInstrumentId;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private String state;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_TIME_IN_FORCE = "timeInForce";
  @SerializedName(SERIALIZED_NAME_TIME_IN_FORCE)
  private String timeInForce;

  public static final String SERIALIZED_NAME_DATE = "date";
  @SerializedName(SERIALIZED_NAME_DATE)
  private OffsetDateTime date;

  public static final String SERIALIZED_NAME_PRICE = "price";
  @SerializedName(SERIALIZED_NAME_PRICE)
  private CurrencyAndAmount price;

  public static final String SERIALIZED_NAME_LIMIT_PRICE = "limitPrice";
  @SerializedName(SERIALIZED_NAME_LIMIT_PRICE)
  private CurrencyAndAmount limitPrice;

  public static final String SERIALIZED_NAME_STOP_PRICE = "stopPrice";
  @SerializedName(SERIALIZED_NAME_STOP_PRICE)
  private CurrencyAndAmount stopPrice;

  public static final String SERIALIZED_NAME_ORDER_INSTRUCTION_ID = "orderInstructionId";
  @SerializedName(SERIALIZED_NAME_ORDER_INSTRUCTION_ID)
  private ResourceId orderInstructionId;

  public static final String SERIALIZED_NAME_PACKAGE_ID = "packageId";
  @SerializedName(SERIALIZED_NAME_PACKAGE_ID)
  private ResourceId packageId;

  public static final String SERIALIZED_NAME_WEIGHT = "weight";
  @SerializedName(SERIALIZED_NAME_WEIGHT)
  private java.math.BigDecimal weight;

  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private CurrencyAndAmount amount;

  public static final String SERIALIZED_NAME_DATA_MODEL_MEMBERSHIP = "dataModelMembership";
  @SerializedName(SERIALIZED_NAME_DATA_MODEL_MEMBERSHIP)
  private DataModelMembership dataModelMembership;

  public static final String SERIALIZED_NAME_LINKS = "links";
  @SerializedName(SERIALIZED_NAME_LINKS)
  private List<Link> links;

  public Order() {
  }

  public Order properties(Map<String, PerpetualProperty> properties) {
    
    this.properties = properties;
    return this;
  }

  public Order putPropertiesItem(String key, PerpetualProperty propertiesItem) {
    if (this.properties == null) {
      this.properties = new HashMap<>();
    }
    this.properties.put(key, propertiesItem);
    return this;
  }

   /**
   * Client-defined properties associated with this order.
   * @return properties
  **/
  @jakarta.annotation.Nullable
  public Map<String, PerpetualProperty> getProperties() {
    return properties;
  }


  public void setProperties(Map<String, PerpetualProperty> properties) {
    this.properties = properties;
  }


  public Order version(Version version) {
    
    this.version = version;
    return this;
  }

   /**
   * Get version
   * @return version
  **/
  @jakarta.annotation.Nullable
  public Version getVersion() {
    return version;
  }


  public void setVersion(Version version) {
    this.version = version;
  }


  public Order instrumentIdentifiers(Map<String, String> instrumentIdentifiers) {
    
    this.instrumentIdentifiers = instrumentIdentifiers;
    return this;
  }

  public Order putInstrumentIdentifiersItem(String key, String instrumentIdentifiersItem) {
    if (this.instrumentIdentifiers == null) {
      this.instrumentIdentifiers = new HashMap<>();
    }
    this.instrumentIdentifiers.put(key, instrumentIdentifiersItem);
    return this;
  }

   /**
   * The instrument ordered.
   * @return instrumentIdentifiers
  **/
  @jakarta.annotation.Nonnull
  public Map<String, String> getInstrumentIdentifiers() {
    return instrumentIdentifiers;
  }


  public void setInstrumentIdentifiers(Map<String, String> instrumentIdentifiers) {
    this.instrumentIdentifiers = instrumentIdentifiers;
  }


  public Order quantity(java.math.BigDecimal quantity) {
    
    this.quantity = quantity;
    return this;
  }

   /**
   * The quantity of the given instrument ordered.
   * @return quantity
  **/
  @jakarta.annotation.Nullable
  public java.math.BigDecimal getQuantity() {
    return quantity;
  }


  public void setQuantity(java.math.BigDecimal quantity) {
    this.quantity = quantity;
  }


  public Order side(String side) {
    
    this.side = side;
    return this;
  }

   /**
   * The client&#39;s representation of the order&#39;s side (buy, sell, short, etc)
   * @return side
  **/
  @jakarta.annotation.Nonnull
  public String getSide() {
    return side;
  }


  public void setSide(String side) {
    this.side = side;
  }


  public Order orderBookId(ResourceId orderBookId) {
    
    this.orderBookId = orderBookId;
    return this;
  }

   /**
   * Get orderBookId
   * @return orderBookId
  **/
  @jakarta.annotation.Nullable
  public ResourceId getOrderBookId() {
    return orderBookId;
  }


  public void setOrderBookId(ResourceId orderBookId) {
    this.orderBookId = orderBookId;
  }


  public Order portfolioId(ResourceId portfolioId) {
    
    this.portfolioId = portfolioId;
    return this;
  }

   /**
   * Get portfolioId
   * @return portfolioId
  **/
  @jakarta.annotation.Nullable
  public ResourceId getPortfolioId() {
    return portfolioId;
  }


  public void setPortfolioId(ResourceId portfolioId) {
    this.portfolioId = portfolioId;
  }


  public Order id(ResourceId id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @jakarta.annotation.Nonnull
  public ResourceId getId() {
    return id;
  }


  public void setId(ResourceId id) {
    this.id = id;
  }


  public Order instrumentScope(String instrumentScope) {
    
    this.instrumentScope = instrumentScope;
    return this;
  }

   /**
   * The scope in which the instrument lies
   * @return instrumentScope
  **/
  @jakarta.annotation.Nullable
  public String getInstrumentScope() {
    return instrumentScope;
  }


  public void setInstrumentScope(String instrumentScope) {
    this.instrumentScope = instrumentScope;
  }


  public Order lusidInstrumentId(String lusidInstrumentId) {
    
    this.lusidInstrumentId = lusidInstrumentId;
    return this;
  }

   /**
   * The LUSID instrument id for the instrument ordered.
   * @return lusidInstrumentId
  **/
  @jakarta.annotation.Nonnull
  public String getLusidInstrumentId() {
    return lusidInstrumentId;
  }


  public void setLusidInstrumentId(String lusidInstrumentId) {
    this.lusidInstrumentId = lusidInstrumentId;
  }


  public Order state(String state) {
    
    this.state = state;
    return this;
  }

   /**
   * The order&#39;s state (examples: New, PartiallyFilled, ...)
   * @return state
  **/
  @jakarta.annotation.Nullable
  public String getState() {
    return state;
  }


  public void setState(String state) {
    this.state = state;
  }


  public Order type(String type) {
    
    this.type = type;
    return this;
  }

   /**
   * The order&#39;s type (examples: Limit, Market, ...)
   * @return type
  **/
  @jakarta.annotation.Nullable
  public String getType() {
    return type;
  }


  public void setType(String type) {
    this.type = type;
  }


  public Order timeInForce(String timeInForce) {
    
    this.timeInForce = timeInForce;
    return this;
  }

   /**
   * The order&#39;s time in force (examples: Day, GoodTilCancel, ...)
   * @return timeInForce
  **/
  @jakarta.annotation.Nullable
  public String getTimeInForce() {
    return timeInForce;
  }


  public void setTimeInForce(String timeInForce) {
    this.timeInForce = timeInForce;
  }


  public Order date(OffsetDateTime date) {
    
    this.date = date;
    return this;
  }

   /**
   * The date on which the order was made
   * @return date
  **/
  @jakarta.annotation.Nullable
  public OffsetDateTime getDate() {
    return date;
  }


  public void setDate(OffsetDateTime date) {
    this.date = date;
  }


  public Order price(CurrencyAndAmount price) {
    
    this.price = price;
    return this;
  }

   /**
   * Get price
   * @return price
  **/
  @jakarta.annotation.Nullable
  public CurrencyAndAmount getPrice() {
    return price;
  }


  public void setPrice(CurrencyAndAmount price) {
    this.price = price;
  }


  public Order limitPrice(CurrencyAndAmount limitPrice) {
    
    this.limitPrice = limitPrice;
    return this;
  }

   /**
   * Get limitPrice
   * @return limitPrice
  **/
  @jakarta.annotation.Nullable
  public CurrencyAndAmount getLimitPrice() {
    return limitPrice;
  }


  public void setLimitPrice(CurrencyAndAmount limitPrice) {
    this.limitPrice = limitPrice;
  }


  public Order stopPrice(CurrencyAndAmount stopPrice) {
    
    this.stopPrice = stopPrice;
    return this;
  }

   /**
   * Get stopPrice
   * @return stopPrice
  **/
  @jakarta.annotation.Nullable
  public CurrencyAndAmount getStopPrice() {
    return stopPrice;
  }


  public void setStopPrice(CurrencyAndAmount stopPrice) {
    this.stopPrice = stopPrice;
  }


  public Order orderInstructionId(ResourceId orderInstructionId) {
    
    this.orderInstructionId = orderInstructionId;
    return this;
  }

   /**
   * Get orderInstructionId
   * @return orderInstructionId
  **/
  @jakarta.annotation.Nullable
  public ResourceId getOrderInstructionId() {
    return orderInstructionId;
  }


  public void setOrderInstructionId(ResourceId orderInstructionId) {
    this.orderInstructionId = orderInstructionId;
  }


  public Order packageId(ResourceId packageId) {
    
    this.packageId = packageId;
    return this;
  }

   /**
   * Get packageId
   * @return packageId
  **/
  @jakarta.annotation.Nullable
  public ResourceId getPackageId() {
    return packageId;
  }


  public void setPackageId(ResourceId packageId) {
    this.packageId = packageId;
  }


  public Order weight(java.math.BigDecimal weight) {
    
    this.weight = weight;
    return this;
  }

   /**
   * The proportion of the total portfolio value ordered for the given instrument ordered.
   * @return weight
  **/
  @jakarta.annotation.Nullable
  public java.math.BigDecimal getWeight() {
    return weight;
  }


  public void setWeight(java.math.BigDecimal weight) {
    this.weight = weight;
  }


  public Order amount(CurrencyAndAmount amount) {
    
    this.amount = amount;
    return this;
  }

   /**
   * Get amount
   * @return amount
  **/
  @jakarta.annotation.Nullable
  public CurrencyAndAmount getAmount() {
    return amount;
  }


  public void setAmount(CurrencyAndAmount amount) {
    this.amount = amount;
  }


  public Order dataModelMembership(DataModelMembership dataModelMembership) {
    
    this.dataModelMembership = dataModelMembership;
    return this;
  }

   /**
   * Get dataModelMembership
   * @return dataModelMembership
  **/
  @jakarta.annotation.Nullable
  public DataModelMembership getDataModelMembership() {
    return dataModelMembership;
  }


  public void setDataModelMembership(DataModelMembership dataModelMembership) {
    this.dataModelMembership = dataModelMembership;
  }


  public Order links(List<Link> links) {
    
    this.links = links;
    return this;
  }

  public Order addLinksItem(Link linksItem) {
    if (this.links == null) {
      this.links = new ArrayList<>();
    }
    this.links.add(linksItem);
    return this;
  }

   /**
   * Get links
   * @return links
  **/
  @jakarta.annotation.Nullable
  public List<Link> getLinks() {
    return links;
  }


  public void setLinks(List<Link> links) {
    this.links = links;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Order order = (Order) o;
    return Objects.equals(this.properties, order.properties) &&
        Objects.equals(this.version, order.version) &&
        Objects.equals(this.instrumentIdentifiers, order.instrumentIdentifiers) &&
        (this.quantity.compareTo(order.getQuantity()) == 0) &&
        Objects.equals(this.side, order.side) &&
        Objects.equals(this.orderBookId, order.orderBookId) &&
        Objects.equals(this.portfolioId, order.portfolioId) &&
        Objects.equals(this.id, order.id) &&
        Objects.equals(this.instrumentScope, order.instrumentScope) &&
        Objects.equals(this.lusidInstrumentId, order.lusidInstrumentId) &&
        Objects.equals(this.state, order.state) &&
        Objects.equals(this.type, order.type) &&
        Objects.equals(this.timeInForce, order.timeInForce) &&
        Objects.equals(this.date, order.date) &&
        Objects.equals(this.price, order.price) &&
        Objects.equals(this.limitPrice, order.limitPrice) &&
        Objects.equals(this.stopPrice, order.stopPrice) &&
        Objects.equals(this.orderInstructionId, order.orderInstructionId) &&
        Objects.equals(this.packageId, order.packageId) &&
        (this.weight.compareTo(order.getWeight()) == 0) &&
        Objects.equals(this.amount, order.amount) &&
        Objects.equals(this.dataModelMembership, order.dataModelMembership) &&
        Objects.equals(this.links, order.links);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(properties, version, instrumentIdentifiers, quantity, side, orderBookId, portfolioId, id, instrumentScope, lusidInstrumentId, state, type, timeInForce, date, price, limitPrice, stopPrice, orderInstructionId, packageId, weight, amount, dataModelMembership, links);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Order {\n");
    sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    instrumentIdentifiers: ").append(toIndentedString(instrumentIdentifiers)).append("\n");
    sb.append("    quantity: ").append(toIndentedString(quantity)).append("\n");
    sb.append("    side: ").append(toIndentedString(side)).append("\n");
    sb.append("    orderBookId: ").append(toIndentedString(orderBookId)).append("\n");
    sb.append("    portfolioId: ").append(toIndentedString(portfolioId)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    instrumentScope: ").append(toIndentedString(instrumentScope)).append("\n");
    sb.append("    lusidInstrumentId: ").append(toIndentedString(lusidInstrumentId)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    timeInForce: ").append(toIndentedString(timeInForce)).append("\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("    limitPrice: ").append(toIndentedString(limitPrice)).append("\n");
    sb.append("    stopPrice: ").append(toIndentedString(stopPrice)).append("\n");
    sb.append("    orderInstructionId: ").append(toIndentedString(orderInstructionId)).append("\n");
    sb.append("    packageId: ").append(toIndentedString(packageId)).append("\n");
    sb.append("    weight: ").append(toIndentedString(weight)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    dataModelMembership: ").append(toIndentedString(dataModelMembership)).append("\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("properties");
    openapiFields.add("version");
    openapiFields.add("instrumentIdentifiers");
    openapiFields.add("quantity");
    openapiFields.add("side");
    openapiFields.add("orderBookId");
    openapiFields.add("portfolioId");
    openapiFields.add("id");
    openapiFields.add("instrumentScope");
    openapiFields.add("lusidInstrumentId");
    openapiFields.add("state");
    openapiFields.add("type");
    openapiFields.add("timeInForce");
    openapiFields.add("date");
    openapiFields.add("price");
    openapiFields.add("limitPrice");
    openapiFields.add("stopPrice");
    openapiFields.add("orderInstructionId");
    openapiFields.add("packageId");
    openapiFields.add("weight");
    openapiFields.add("amount");
    openapiFields.add("dataModelMembership");
    openapiFields.add("links");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("instrumentIdentifiers");
    openapiRequiredFields.add("side");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("lusidInstrumentId");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to Order
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Order.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Order is not found in the empty JSON string", Order.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Order.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `version`
      if (jsonObj.get("version") != null && !jsonObj.get("version").isJsonNull()) {
        Version.validateJsonElement(jsonObj.get("version"));
      }
      if (!jsonObj.get("side").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `side` to be a primitive type in the JSON string but got `%s`", jsonObj.get("side").toString()));
      }
      // validate the optional field `orderBookId`
      if (jsonObj.get("orderBookId") != null && !jsonObj.get("orderBookId").isJsonNull()) {
        ResourceId.validateJsonElement(jsonObj.get("orderBookId"));
      }
      // validate the optional field `portfolioId`
      if (jsonObj.get("portfolioId") != null && !jsonObj.get("portfolioId").isJsonNull()) {
        ResourceId.validateJsonElement(jsonObj.get("portfolioId"));
      }
      // validate the required field `id`
      ResourceId.validateJsonElement(jsonObj.get("id"));
      if ((jsonObj.get("instrumentScope") != null && !jsonObj.get("instrumentScope").isJsonNull()) && !jsonObj.get("instrumentScope").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `instrumentScope` to be a primitive type in the JSON string but got `%s`", jsonObj.get("instrumentScope").toString()));
      }
      if (!jsonObj.get("lusidInstrumentId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lusidInstrumentId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lusidInstrumentId").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if ((jsonObj.get("timeInForce") != null && !jsonObj.get("timeInForce").isJsonNull()) && !jsonObj.get("timeInForce").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timeInForce` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timeInForce").toString()));
      }
      // validate the optional field `price`
      if (jsonObj.get("price") != null && !jsonObj.get("price").isJsonNull()) {
        CurrencyAndAmount.validateJsonElement(jsonObj.get("price"));
      }
      // validate the optional field `limitPrice`
      if (jsonObj.get("limitPrice") != null && !jsonObj.get("limitPrice").isJsonNull()) {
        CurrencyAndAmount.validateJsonElement(jsonObj.get("limitPrice"));
      }
      // validate the optional field `stopPrice`
      if (jsonObj.get("stopPrice") != null && !jsonObj.get("stopPrice").isJsonNull()) {
        CurrencyAndAmount.validateJsonElement(jsonObj.get("stopPrice"));
      }
      // validate the optional field `orderInstructionId`
      if (jsonObj.get("orderInstructionId") != null && !jsonObj.get("orderInstructionId").isJsonNull()) {
        ResourceId.validateJsonElement(jsonObj.get("orderInstructionId"));
      }
      // validate the optional field `packageId`
      if (jsonObj.get("packageId") != null && !jsonObj.get("packageId").isJsonNull()) {
        ResourceId.validateJsonElement(jsonObj.get("packageId"));
      }
      // validate the optional field `amount`
      if (jsonObj.get("amount") != null && !jsonObj.get("amount").isJsonNull()) {
        CurrencyAndAmount.validateJsonElement(jsonObj.get("amount"));
      }
      // validate the optional field `dataModelMembership`
      if (jsonObj.get("dataModelMembership") != null && !jsonObj.get("dataModelMembership").isJsonNull()) {
        DataModelMembership.validateJsonElement(jsonObj.get("dataModelMembership"));
      }
      if (jsonObj.get("links") != null && !jsonObj.get("links").isJsonNull()) {
        JsonArray jsonArraylinks = jsonObj.getAsJsonArray("links");
        if (jsonArraylinks != null) {
          // ensure the json data is an array
          if (!jsonObj.get("links").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `links` to be an array in the JSON string but got `%s`", jsonObj.get("links").toString()));
          }

          // validate the optional field `links` (array)
          for (int i = 0; i < jsonArraylinks.size(); i++) {
            Link.validateJsonElement(jsonArraylinks.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Order.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Order' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Order> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Order.class));

       return (TypeAdapter<T>) new TypeAdapter<Order>() {
           @Override
           public void write(JsonWriter out, Order value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Order read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Order given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Order
  * @throws IOException if the JSON string is invalid with respect to Order
  */
  public static Order fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Order.class);
  }

 /**
  * Convert an instance of Order to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
