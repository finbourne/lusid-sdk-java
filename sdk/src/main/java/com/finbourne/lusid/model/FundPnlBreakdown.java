/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import com.finbourne.lusid.model.FundAmount;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * The breakdown of PnL for a Fund on a specified date.
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class FundPnlBreakdown {
  public static final String SERIALIZED_NAME_NON_CLASS_SPECIFIC_PNL = "nonClassSpecificPnl";
  @SerializedName(SERIALIZED_NAME_NON_CLASS_SPECIFIC_PNL)
  private Map<String, FundAmount> nonClassSpecificPnl = new HashMap<>();

  public static final String SERIALIZED_NAME_AGGREGATED_CLASS_PNL = "aggregatedClassPnl";
  @SerializedName(SERIALIZED_NAME_AGGREGATED_CLASS_PNL)
  private Map<String, FundAmount> aggregatedClassPnl = new HashMap<>();

  public static final String SERIALIZED_NAME_TOTAL_PNL = "totalPnl";
  @SerializedName(SERIALIZED_NAME_TOTAL_PNL)
  private Map<String, FundAmount> totalPnl = new HashMap<>();

  public FundPnlBreakdown() {
  }

  public FundPnlBreakdown nonClassSpecificPnl(Map<String, FundAmount> nonClassSpecificPnl) {
    
    this.nonClassSpecificPnl = nonClassSpecificPnl;
    return this;
  }

  public FundPnlBreakdown putNonClassSpecificPnlItem(String key, FundAmount nonClassSpecificPnlItem) {
    if (this.nonClassSpecificPnl == null) {
      this.nonClassSpecificPnl = new HashMap<>();
    }
    this.nonClassSpecificPnl.put(key, nonClassSpecificPnlItem);
    return this;
  }

   /**
   * Bucket of detail for PnL within the queried period that is not specific to any share class.
   * @return nonClassSpecificPnl
  **/
  @jakarta.annotation.Nonnull
  public Map<String, FundAmount> getNonClassSpecificPnl() {
    return nonClassSpecificPnl;
  }


  public void setNonClassSpecificPnl(Map<String, FundAmount> nonClassSpecificPnl) {
    this.nonClassSpecificPnl = nonClassSpecificPnl;
  }


  public FundPnlBreakdown aggregatedClassPnl(Map<String, FundAmount> aggregatedClassPnl) {
    
    this.aggregatedClassPnl = aggregatedClassPnl;
    return this;
  }

  public FundPnlBreakdown putAggregatedClassPnlItem(String key, FundAmount aggregatedClassPnlItem) {
    if (this.aggregatedClassPnl == null) {
      this.aggregatedClassPnl = new HashMap<>();
    }
    this.aggregatedClassPnl.put(key, aggregatedClassPnlItem);
    return this;
  }

   /**
   * Bucket of detail for the sum of class PnL across all share classes in a fund and within the queried period.
   * @return aggregatedClassPnl
  **/
  @jakarta.annotation.Nonnull
  public Map<String, FundAmount> getAggregatedClassPnl() {
    return aggregatedClassPnl;
  }


  public void setAggregatedClassPnl(Map<String, FundAmount> aggregatedClassPnl) {
    this.aggregatedClassPnl = aggregatedClassPnl;
  }


  public FundPnlBreakdown totalPnl(Map<String, FundAmount> totalPnl) {
    
    this.totalPnl = totalPnl;
    return this;
  }

  public FundPnlBreakdown putTotalPnlItem(String key, FundAmount totalPnlItem) {
    if (this.totalPnl == null) {
      this.totalPnl = new HashMap<>();
    }
    this.totalPnl.put(key, totalPnlItem);
    return this;
  }

   /**
   * Bucket of detail for the sum of class PnL and PnL not specific to a class within the queried period.
   * @return totalPnl
  **/
  @jakarta.annotation.Nonnull
  public Map<String, FundAmount> getTotalPnl() {
    return totalPnl;
  }


  public void setTotalPnl(Map<String, FundAmount> totalPnl) {
    this.totalPnl = totalPnl;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FundPnlBreakdown fundPnlBreakdown = (FundPnlBreakdown) o;
    return Objects.equals(this.nonClassSpecificPnl, fundPnlBreakdown.nonClassSpecificPnl) &&
        Objects.equals(this.aggregatedClassPnl, fundPnlBreakdown.aggregatedClassPnl) &&
        Objects.equals(this.totalPnl, fundPnlBreakdown.totalPnl);
  }

  @Override
  public int hashCode() {
    return Objects.hash(nonClassSpecificPnl, aggregatedClassPnl, totalPnl);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FundPnlBreakdown {\n");
    sb.append("    nonClassSpecificPnl: ").append(toIndentedString(nonClassSpecificPnl)).append("\n");
    sb.append("    aggregatedClassPnl: ").append(toIndentedString(aggregatedClassPnl)).append("\n");
    sb.append("    totalPnl: ").append(toIndentedString(totalPnl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("nonClassSpecificPnl");
    openapiFields.add("aggregatedClassPnl");
    openapiFields.add("totalPnl");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("nonClassSpecificPnl");
    openapiRequiredFields.add("aggregatedClassPnl");
    openapiRequiredFields.add("totalPnl");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to FundPnlBreakdown
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FundPnlBreakdown.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FundPnlBreakdown is not found in the empty JSON string", FundPnlBreakdown.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : FundPnlBreakdown.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FundPnlBreakdown.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FundPnlBreakdown' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FundPnlBreakdown> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FundPnlBreakdown.class));

       return (TypeAdapter<T>) new TypeAdapter<FundPnlBreakdown>() {
           @Override
           public void write(JsonWriter out, FundPnlBreakdown value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FundPnlBreakdown read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of FundPnlBreakdown given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of FundPnlBreakdown
  * @throws IOException if the JSON string is invalid with respect to FundPnlBreakdown
  */
  public static FundPnlBreakdown fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FundPnlBreakdown.class);
  }

 /**
  * Convert an instance of FundPnlBreakdown to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
