/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * A list of Returns.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class PerformanceReturn {
  public static final String SERIALIZED_NAME_EFFECTIVE_AT = "effectiveAt";
  @SerializedName(SERIALIZED_NAME_EFFECTIVE_AT)
  private OffsetDateTime effectiveAt;

  public static final String SERIALIZED_NAME_RATE_OF_RETURN = "rateOfReturn";
  @SerializedName(SERIALIZED_NAME_RATE_OF_RETURN)
  private java.math.BigDecimal rateOfReturn;

  public static final String SERIALIZED_NAME_OPENING_MARKET_VALUE = "openingMarketValue";
  @SerializedName(SERIALIZED_NAME_OPENING_MARKET_VALUE)
  private java.math.BigDecimal openingMarketValue;

  public static final String SERIALIZED_NAME_CLOSING_MARKET_VALUE = "closingMarketValue";
  @SerializedName(SERIALIZED_NAME_CLOSING_MARKET_VALUE)
  private java.math.BigDecimal closingMarketValue;

  public static final String SERIALIZED_NAME_PERIOD = "period";
  @SerializedName(SERIALIZED_NAME_PERIOD)
  private String period;

  public PerformanceReturn() {
  }

  public PerformanceReturn effectiveAt(OffsetDateTime effectiveAt) {
    
    this.effectiveAt = effectiveAt;
    return this;
  }

   /**
   * The effectiveAt for the return.
   * @return effectiveAt
  **/
  @javax.annotation.Nonnull
  public OffsetDateTime getEffectiveAt() {
    return effectiveAt;
  }


  public void setEffectiveAt(OffsetDateTime effectiveAt) {
    this.effectiveAt = effectiveAt;
  }


  public PerformanceReturn rateOfReturn(java.math.BigDecimal rateOfReturn) {
    
    this.rateOfReturn = rateOfReturn;
    return this;
  }

   /**
   * The return number.
   * @return rateOfReturn
  **/
  @javax.annotation.Nonnull
  public java.math.BigDecimal getRateOfReturn() {
    return rateOfReturn;
  }


  public void setRateOfReturn(java.math.BigDecimal rateOfReturn) {
    this.rateOfReturn = rateOfReturn;
  }


  public PerformanceReturn openingMarketValue(java.math.BigDecimal openingMarketValue) {
    
    this.openingMarketValue = openingMarketValue;
    return this;
  }

   /**
   * The opening market value.
   * @return openingMarketValue
  **/
  @javax.annotation.Nullable
  public java.math.BigDecimal getOpeningMarketValue() {
    return openingMarketValue;
  }


  public void setOpeningMarketValue(java.math.BigDecimal openingMarketValue) {
    this.openingMarketValue = openingMarketValue;
  }


  public PerformanceReturn closingMarketValue(java.math.BigDecimal closingMarketValue) {
    
    this.closingMarketValue = closingMarketValue;
    return this;
  }

   /**
   * The closing market value.
   * @return closingMarketValue
  **/
  @javax.annotation.Nullable
  public java.math.BigDecimal getClosingMarketValue() {
    return closingMarketValue;
  }


  public void setClosingMarketValue(java.math.BigDecimal closingMarketValue) {
    this.closingMarketValue = closingMarketValue;
  }


  public PerformanceReturn period(String period) {
    
    this.period = period;
    return this;
  }

   /**
   * Upsert the returns on a Daily or Monthly period. Defaults to Daily.
   * @return period
  **/
  @javax.annotation.Nullable
  public String getPeriod() {
    return period;
  }


  public void setPeriod(String period) {
    this.period = period;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PerformanceReturn performanceReturn = (PerformanceReturn) o;
    return Objects.equals(this.effectiveAt, performanceReturn.effectiveAt) &&
        (this.rateOfReturn.compareTo(performanceReturn.getRateOfReturn()) == 0) &&
        (this.openingMarketValue.compareTo(performanceReturn.getOpeningMarketValue()) == 0) &&
        (this.closingMarketValue.compareTo(performanceReturn.getClosingMarketValue()) == 0) &&
        Objects.equals(this.period, performanceReturn.period);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(effectiveAt, rateOfReturn, openingMarketValue, closingMarketValue, period);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PerformanceReturn {\n");
    sb.append("    effectiveAt: ").append(toIndentedString(effectiveAt)).append("\n");
    sb.append("    rateOfReturn: ").append(toIndentedString(rateOfReturn)).append("\n");
    sb.append("    openingMarketValue: ").append(toIndentedString(openingMarketValue)).append("\n");
    sb.append("    closingMarketValue: ").append(toIndentedString(closingMarketValue)).append("\n");
    sb.append("    period: ").append(toIndentedString(period)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("effectiveAt");
    openapiFields.add("rateOfReturn");
    openapiFields.add("openingMarketValue");
    openapiFields.add("closingMarketValue");
    openapiFields.add("period");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("effectiveAt");
    openapiRequiredFields.add("rateOfReturn");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to PerformanceReturn
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!PerformanceReturn.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PerformanceReturn is not found in the empty JSON string", PerformanceReturn.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!PerformanceReturn.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PerformanceReturn` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PerformanceReturn.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("period") != null && !jsonObj.get("period").isJsonNull()) && !jsonObj.get("period").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `period` to be a primitive type in the JSON string but got `%s`", jsonObj.get("period").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PerformanceReturn.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PerformanceReturn' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PerformanceReturn> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PerformanceReturn.class));

       return (TypeAdapter<T>) new TypeAdapter<PerformanceReturn>() {
           @Override
           public void write(JsonWriter out, PerformanceReturn value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PerformanceReturn read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PerformanceReturn given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PerformanceReturn
  * @throws IOException if the JSON string is invalid with respect to PerformanceReturn
  */
  public static PerformanceReturn fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PerformanceReturn.class);
  }

 /**
  * Convert an instance of PerformanceReturn to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
