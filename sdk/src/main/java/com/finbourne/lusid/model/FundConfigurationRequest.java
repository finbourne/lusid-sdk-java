/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import com.finbourne.lusid.model.ComponentFilter;
import com.finbourne.lusid.model.Property;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * FundConfigurationRequest
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class FundConfigurationRequest {
  public static final String SERIALIZED_NAME_CODE = "code";
  @SerializedName(SERIALIZED_NAME_CODE)
  private String code;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DEALING_FILTERS = "dealingFilters";
  @SerializedName(SERIALIZED_NAME_DEALING_FILTERS)
  private List<ComponentFilter> dealingFilters = new ArrayList<>();

  public static final String SERIALIZED_NAME_PNL_FILTERS = "pnlFilters";
  @SerializedName(SERIALIZED_NAME_PNL_FILTERS)
  private List<ComponentFilter> pnlFilters = new ArrayList<>();

  public static final String SERIALIZED_NAME_BACK_OUT_FILTERS = "backOutFilters";
  @SerializedName(SERIALIZED_NAME_BACK_OUT_FILTERS)
  private List<ComponentFilter> backOutFilters = new ArrayList<>();

  public static final String SERIALIZED_NAME_PROPERTIES = "properties";
  @SerializedName(SERIALIZED_NAME_PROPERTIES)
  private Map<String, Property> properties;

  public FundConfigurationRequest() {
  }

  public FundConfigurationRequest code(String code) {
    
    this.code = code;
    return this;
  }

   /**
   * 
   * @return code
  **/
  @jakarta.annotation.Nonnull
  public String getCode() {
    return code;
  }


  public void setCode(String code) {
    this.code = code;
  }


  public FundConfigurationRequest displayName(String displayName) {
    
    this.displayName = displayName;
    return this;
  }

   /**
   * The name of the Fund.
   * @return displayName
  **/
  @jakarta.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }


  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public FundConfigurationRequest description(String description) {
    
    this.description = description;
    return this;
  }

   /**
   * A description for the Fund.
   * @return description
  **/
  @jakarta.annotation.Nullable
  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    this.description = description;
  }


  public FundConfigurationRequest dealingFilters(List<ComponentFilter> dealingFilters) {
    
    this.dealingFilters = dealingFilters;
    return this;
  }

  public FundConfigurationRequest addDealingFiltersItem(ComponentFilter dealingFiltersItem) {
    if (this.dealingFilters == null) {
      this.dealingFilters = new ArrayList<>();
    }
    this.dealingFilters.add(dealingFiltersItem);
    return this;
  }

   /**
   * The set of filters used to decide which JE lines are included in the dealing.
   * @return dealingFilters
  **/
  @jakarta.annotation.Nonnull
  public List<ComponentFilter> getDealingFilters() {
    return dealingFilters;
  }


  public void setDealingFilters(List<ComponentFilter> dealingFilters) {
    this.dealingFilters = dealingFilters;
  }


  public FundConfigurationRequest pnlFilters(List<ComponentFilter> pnlFilters) {
    
    this.pnlFilters = pnlFilters;
    return this;
  }

  public FundConfigurationRequest addPnlFiltersItem(ComponentFilter pnlFiltersItem) {
    if (this.pnlFilters == null) {
      this.pnlFilters = new ArrayList<>();
    }
    this.pnlFilters.add(pnlFiltersItem);
    return this;
  }

   /**
   * The set of filters used to decide which JE lines are included in the PnL.
   * @return pnlFilters
  **/
  @jakarta.annotation.Nonnull
  public List<ComponentFilter> getPnlFilters() {
    return pnlFilters;
  }


  public void setPnlFilters(List<ComponentFilter> pnlFilters) {
    this.pnlFilters = pnlFilters;
  }


  public FundConfigurationRequest backOutFilters(List<ComponentFilter> backOutFilters) {
    
    this.backOutFilters = backOutFilters;
    return this;
  }

  public FundConfigurationRequest addBackOutFiltersItem(ComponentFilter backOutFiltersItem) {
    if (this.backOutFilters == null) {
      this.backOutFilters = new ArrayList<>();
    }
    this.backOutFilters.add(backOutFiltersItem);
    return this;
  }

   /**
   * The set of filters used to decide which JE lines are included in the back outs.
   * @return backOutFilters
  **/
  @jakarta.annotation.Nonnull
  public List<ComponentFilter> getBackOutFilters() {
    return backOutFilters;
  }


  public void setBackOutFilters(List<ComponentFilter> backOutFilters) {
    this.backOutFilters = backOutFilters;
  }


  public FundConfigurationRequest properties(Map<String, Property> properties) {
    
    this.properties = properties;
    return this;
  }

  public FundConfigurationRequest putPropertiesItem(String key, Property propertiesItem) {
    if (this.properties == null) {
      this.properties = new HashMap<>();
    }
    this.properties.put(key, propertiesItem);
    return this;
  }

   /**
   * A set of properties for the Fund Configuration.
   * @return properties
  **/
  @jakarta.annotation.Nullable
  public Map<String, Property> getProperties() {
    return properties;
  }


  public void setProperties(Map<String, Property> properties) {
    this.properties = properties;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FundConfigurationRequest fundConfigurationRequest = (FundConfigurationRequest) o;
    return Objects.equals(this.code, fundConfigurationRequest.code) &&
        Objects.equals(this.displayName, fundConfigurationRequest.displayName) &&
        Objects.equals(this.description, fundConfigurationRequest.description) &&
        Objects.equals(this.dealingFilters, fundConfigurationRequest.dealingFilters) &&
        Objects.equals(this.pnlFilters, fundConfigurationRequest.pnlFilters) &&
        Objects.equals(this.backOutFilters, fundConfigurationRequest.backOutFilters) &&
        Objects.equals(this.properties, fundConfigurationRequest.properties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(code, displayName, description, dealingFilters, pnlFilters, backOutFilters, properties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FundConfigurationRequest {\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    dealingFilters: ").append(toIndentedString(dealingFilters)).append("\n");
    sb.append("    pnlFilters: ").append(toIndentedString(pnlFilters)).append("\n");
    sb.append("    backOutFilters: ").append(toIndentedString(backOutFilters)).append("\n");
    sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("code");
    openapiFields.add("displayName");
    openapiFields.add("description");
    openapiFields.add("dealingFilters");
    openapiFields.add("pnlFilters");
    openapiFields.add("backOutFilters");
    openapiFields.add("properties");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("code");
    openapiRequiredFields.add("dealingFilters");
    openapiRequiredFields.add("pnlFilters");
    openapiRequiredFields.add("backOutFilters");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to FundConfigurationRequest
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FundConfigurationRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FundConfigurationRequest is not found in the empty JSON string", FundConfigurationRequest.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : FundConfigurationRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("code").toString()));
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("dealingFilters").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `dealingFilters` to be an array in the JSON string but got `%s`", jsonObj.get("dealingFilters").toString()));
      }

      JsonArray jsonArraydealingFilters = jsonObj.getAsJsonArray("dealingFilters");
      // validate the required field `dealingFilters` (array)
      for (int i = 0; i < jsonArraydealingFilters.size(); i++) {
        ComponentFilter.validateJsonElement(jsonArraydealingFilters.get(i));
      };
      // ensure the json data is an array
      if (!jsonObj.get("pnlFilters").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `pnlFilters` to be an array in the JSON string but got `%s`", jsonObj.get("pnlFilters").toString()));
      }

      JsonArray jsonArraypnlFilters = jsonObj.getAsJsonArray("pnlFilters");
      // validate the required field `pnlFilters` (array)
      for (int i = 0; i < jsonArraypnlFilters.size(); i++) {
        ComponentFilter.validateJsonElement(jsonArraypnlFilters.get(i));
      };
      // ensure the json data is an array
      if (!jsonObj.get("backOutFilters").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `backOutFilters` to be an array in the JSON string but got `%s`", jsonObj.get("backOutFilters").toString()));
      }

      JsonArray jsonArraybackOutFilters = jsonObj.getAsJsonArray("backOutFilters");
      // validate the required field `backOutFilters` (array)
      for (int i = 0; i < jsonArraybackOutFilters.size(); i++) {
        ComponentFilter.validateJsonElement(jsonArraybackOutFilters.get(i));
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FundConfigurationRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FundConfigurationRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FundConfigurationRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FundConfigurationRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<FundConfigurationRequest>() {
           @Override
           public void write(JsonWriter out, FundConfigurationRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FundConfigurationRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of FundConfigurationRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of FundConfigurationRequest
  * @throws IOException if the JSON string is invalid with respect to FundConfigurationRequest
  */
  public static FundConfigurationRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FundConfigurationRequest.class);
  }

 /**
  * Convert an instance of FundConfigurationRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
