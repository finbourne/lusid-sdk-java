/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import com.finbourne.lusid.model.InstrumentEvent;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * Definition of an Amortisation event. This is an event that describes the occurence of amortisation.
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class AmortisationEvent extends InstrumentEvent {
  public static final String SERIALIZED_NAME_AMOUNT_REDUCED = "amountReduced";
  @SerializedName(SERIALIZED_NAME_AMOUNT_REDUCED)
  private java.math.BigDecimal amountReduced;

  public static final String SERIALIZED_NAME_DOM_CCY = "domCcy";
  @SerializedName(SERIALIZED_NAME_DOM_CCY)
  private String domCcy;

  public static final String SERIALIZED_NAME_PAY_RECEIVE = "payReceive";
  @SerializedName(SERIALIZED_NAME_PAY_RECEIVE)
  private String payReceive;

  public static final String SERIALIZED_NAME_PAYMENT_DATE = "paymentDate";
  @SerializedName(SERIALIZED_NAME_PAYMENT_DATE)
  private OffsetDateTime paymentDate;

  public AmortisationEvent() {
    // this.instrumentEventType = this.getClass().getSimpleName();
  }

  public AmortisationEvent amountReduced(java.math.BigDecimal amountReduced) {
    
    this.amountReduced = amountReduced;
    return this;
  }

   /**
   * The amount reduced in this amortisation event. That is, the difference between the previous notional amount and the current notional amount as set in this event.
   * @return amountReduced
  **/
  @jakarta.annotation.Nonnull
  public java.math.BigDecimal getAmountReduced() {
    return amountReduced;
  }


  public void setAmountReduced(java.math.BigDecimal amountReduced) {
    this.amountReduced = amountReduced;
  }


  public AmortisationEvent domCcy(String domCcy) {
    
    this.domCcy = domCcy;
    return this;
  }

   /**
   * Domestic currency of the originating instrument
   * @return domCcy
  **/
  @jakarta.annotation.Nonnull
  public String getDomCcy() {
    return domCcy;
  }


  public void setDomCcy(String domCcy) {
    this.domCcy = domCcy;
  }


  public AmortisationEvent payReceive(String payReceive) {
    
    this.payReceive = payReceive;
    return this;
  }

   /**
   * Is this event in relation to the Pay or Receive leg
   * @return payReceive
  **/
  @jakarta.annotation.Nonnull
  public String getPayReceive() {
    return payReceive;
  }


  public void setPayReceive(String payReceive) {
    this.payReceive = payReceive;
  }


  public AmortisationEvent paymentDate(OffsetDateTime paymentDate) {
    
    this.paymentDate = paymentDate;
    return this;
  }

   /**
   * The date the principal payment is to be made.
   * @return paymentDate
  **/
  @jakarta.annotation.Nonnull
  public OffsetDateTime getPaymentDate() {
    return paymentDate;
  }


  public void setPaymentDate(OffsetDateTime paymentDate) {
    this.paymentDate = paymentDate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AmortisationEvent amortisationEvent = (AmortisationEvent) o;
    return (this.amountReduced.compareTo(amortisationEvent.getAmountReduced()) == 0) &&
        Objects.equals(this.domCcy, amortisationEvent.domCcy) &&
        Objects.equals(this.payReceive, amortisationEvent.payReceive) &&
        Objects.equals(this.paymentDate, amortisationEvent.paymentDate) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(amountReduced, domCcy, payReceive, paymentDate, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AmortisationEvent {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    amountReduced: ").append(toIndentedString(amountReduced)).append("\n");
    sb.append("    domCcy: ").append(toIndentedString(domCcy)).append("\n");
    sb.append("    payReceive: ").append(toIndentedString(payReceive)).append("\n");
    sb.append("    paymentDate: ").append(toIndentedString(paymentDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("instrumentEventType");
    openapiFields.add("amountReduced");
    openapiFields.add("domCcy");
    openapiFields.add("payReceive");
    openapiFields.add("paymentDate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("amountReduced");
    openapiRequiredFields.add("domCcy");
    openapiRequiredFields.add("payReceive");
    openapiRequiredFields.add("paymentDate");
    openapiRequiredFields.add("instrumentEventType");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to AmortisationEvent
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AmortisationEvent.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AmortisationEvent is not found in the empty JSON string", AmortisationEvent.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AmortisationEvent.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AmortisationEvent.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AmortisationEvent' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AmortisationEvent> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AmortisationEvent.class));

       return (TypeAdapter<T>) new TypeAdapter<AmortisationEvent>() {
           @Override
           public void write(JsonWriter out, AmortisationEvent value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AmortisationEvent read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AmortisationEvent given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AmortisationEvent
  * @throws IOException if the JSON string is invalid with respect to AmortisationEvent
  */
  public static AmortisationEvent fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AmortisationEvent.class);
  }

 /**
  * Convert an instance of AmortisationEvent to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
