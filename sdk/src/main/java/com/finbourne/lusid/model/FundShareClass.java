/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import com.finbourne.lusid.model.LusidInstrument;
import com.finbourne.lusid.model.SimpleRoundingConvention;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * LUSID representation of a FundShareClass.  A ShareClass represents a pool of shares, held by investors, within a fund.   A ShareClass can represent a differing investment approach by either Fees,   Income, Currency Risk and Investor type.
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class FundShareClass extends LusidInstrument {
  public static final String SERIALIZED_NAME_SHORT_CODE = "shortCode";
  @SerializedName(SERIALIZED_NAME_SHORT_CODE)
  private String shortCode;

  public static final String SERIALIZED_NAME_FUND_SHARE_CLASS_TYPE = "fundShareClassType";
  @SerializedName(SERIALIZED_NAME_FUND_SHARE_CLASS_TYPE)
  private String fundShareClassType;

  public static final String SERIALIZED_NAME_DISTRIBUTION_PAYMENT_TYPE = "distributionPaymentType";
  @SerializedName(SERIALIZED_NAME_DISTRIBUTION_PAYMENT_TYPE)
  private String distributionPaymentType;

  public static final String SERIALIZED_NAME_HEDGING = "hedging";
  @SerializedName(SERIALIZED_NAME_HEDGING)
  private String hedging;

  public static final String SERIALIZED_NAME_DOM_CCY = "domCcy";
  @SerializedName(SERIALIZED_NAME_DOM_CCY)
  private String domCcy;

  public static final String SERIALIZED_NAME_ROUNDING_CONVENTIONS = "roundingConventions";
  @SerializedName(SERIALIZED_NAME_ROUNDING_CONVENTIONS)
  private List<SimpleRoundingConvention> roundingConventions;

  public FundShareClass() {
    // this.instrumentType = this.getClass().getSimpleName();
  }

  public FundShareClass shortCode(String shortCode) {
    
    this.shortCode = shortCode;
    return this;
  }

   /**
   * A short identifier, unique across a single fund, usually made up of the ShareClass components. Eg \&quot;A Accumulation Euro Hedged Class\&quot; could become \&quot;A Acc H EUR\&quot;.
   * @return shortCode
  **/
  @jakarta.annotation.Nonnull
  public String getShortCode() {
    return shortCode;
  }


  public void setShortCode(String shortCode) {
    this.shortCode = shortCode;
  }


  public FundShareClass fundShareClassType(String fundShareClassType) {
    
    this.fundShareClassType = fundShareClassType;
    return this;
  }

   /**
   * The type of distribution that the ShareClass will calculate. Can be either &#39;Income&#39; or &#39;Accumulation&#39; - Income classes will pay out and Accumulation classes will retain their ShareClass attributable income.    Supported string (enumeration) values are: [Income, Accumulation].
   * @return fundShareClassType
  **/
  @jakarta.annotation.Nonnull
  public String getFundShareClassType() {
    return fundShareClassType;
  }


  public void setFundShareClassType(String fundShareClassType) {
    this.fundShareClassType = fundShareClassType;
  }


  public FundShareClass distributionPaymentType(String distributionPaymentType) {
    
    this.distributionPaymentType = distributionPaymentType;
    return this;
  }

   /**
   * The tax treatment applied to any distributions calculated within the ShareClass. Can be either &#39;Net&#39; (Distribution Calculated net of tax) or &#39;Gross&#39; (Distribution calculated gross of tax).    Supported string (enumeration) values are: [Gross, Net].
   * @return distributionPaymentType
  **/
  @jakarta.annotation.Nonnull
  public String getDistributionPaymentType() {
    return distributionPaymentType;
  }


  public void setDistributionPaymentType(String distributionPaymentType) {
    this.distributionPaymentType = distributionPaymentType;
  }


  public FundShareClass hedging(String hedging) {
    
    this.hedging = hedging;
    return this;
  }

   /**
   * A flag to indicate the ShareClass is operating currency hedging as a means to limit currency risk as part of it&#39;s investment strategy.    Supported string (enumeration) values are: [Invalid, None, ApplyHedging].
   * @return hedging
  **/
  @jakarta.annotation.Nonnull
  public String getHedging() {
    return hedging;
  }


  public void setHedging(String hedging) {
    this.hedging = hedging;
  }


  public FundShareClass domCcy(String domCcy) {
    
    this.domCcy = domCcy;
    return this;
  }

   /**
   * The domestic currency of the instrument.
   * @return domCcy
  **/
  @jakarta.annotation.Nonnull
  public String getDomCcy() {
    return domCcy;
  }


  public void setDomCcy(String domCcy) {
    this.domCcy = domCcy;
  }


  public FundShareClass roundingConventions(List<SimpleRoundingConvention> roundingConventions) {
    
    this.roundingConventions = roundingConventions;
    return this;
  }

  public FundShareClass addRoundingConventionsItem(SimpleRoundingConvention roundingConventionsItem) {
    if (this.roundingConventions == null) {
      this.roundingConventions = new ArrayList<>();
    }
    this.roundingConventions.add(roundingConventionsItem);
    return this;
  }

   /**
   * Rounding Convention used for the FundShareClass quotes
   * @return roundingConventions
  **/
  @jakarta.annotation.Nullable
  public List<SimpleRoundingConvention> getRoundingConventions() {
    return roundingConventions;
  }


  public void setRoundingConventions(List<SimpleRoundingConvention> roundingConventions) {
    this.roundingConventions = roundingConventions;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FundShareClass fundShareClass = (FundShareClass) o;
    return Objects.equals(this.shortCode, fundShareClass.shortCode) &&
        Objects.equals(this.fundShareClassType, fundShareClass.fundShareClassType) &&
        Objects.equals(this.distributionPaymentType, fundShareClass.distributionPaymentType) &&
        Objects.equals(this.hedging, fundShareClass.hedging) &&
        Objects.equals(this.domCcy, fundShareClass.domCcy) &&
        Objects.equals(this.roundingConventions, fundShareClass.roundingConventions) &&
        super.equals(o);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(shortCode, fundShareClassType, distributionPaymentType, hedging, domCcy, roundingConventions, super.hashCode());
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FundShareClass {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    shortCode: ").append(toIndentedString(shortCode)).append("\n");
    sb.append("    fundShareClassType: ").append(toIndentedString(fundShareClassType)).append("\n");
    sb.append("    distributionPaymentType: ").append(toIndentedString(distributionPaymentType)).append("\n");
    sb.append("    hedging: ").append(toIndentedString(hedging)).append("\n");
    sb.append("    domCcy: ").append(toIndentedString(domCcy)).append("\n");
    sb.append("    roundingConventions: ").append(toIndentedString(roundingConventions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("instrumentType");
    openapiFields.add("shortCode");
    openapiFields.add("fundShareClassType");
    openapiFields.add("distributionPaymentType");
    openapiFields.add("hedging");
    openapiFields.add("domCcy");
    openapiFields.add("roundingConventions");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("shortCode");
    openapiRequiredFields.add("fundShareClassType");
    openapiRequiredFields.add("distributionPaymentType");
    openapiRequiredFields.add("hedging");
    openapiRequiredFields.add("domCcy");
    openapiRequiredFields.add("instrumentType");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to FundShareClass
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FundShareClass.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FundShareClass is not found in the empty JSON string", FundShareClass.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : FundShareClass.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FundShareClass.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FundShareClass' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FundShareClass> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FundShareClass.class));

       return (TypeAdapter<T>) new TypeAdapter<FundShareClass>() {
           @Override
           public void write(JsonWriter out, FundShareClass value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FundShareClass read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of FundShareClass given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of FundShareClass
  * @throws IOException if the JSON string is invalid with respect to FundShareClass
  */
  public static FundShareClass fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FundShareClass.class);
  }

 /**
  * Convert an instance of FundShareClass to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
