/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import java.util.Arrays;
import com.finbourne.lusid.model.AddressKeyFilter;
import com.finbourne.lusid.model.ModelOptions;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * A rule that identifies the set of preferences to be used for a given library, model and instrument type.  There can be many such rules, though only the first found for a given combination would be used.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class VendorModelRule {
  /**
   * The available values are: Lusid, RefinitivQps, RefinitivTracsWeb, VolMaster, IsdaCds, YieldBook, LusidCalc
   */
  @JsonAdapter(SupplierEnum.Adapter.class)
  public enum SupplierEnum {
    LUSID("Lusid"),
    
    REFINITIVQPS("RefinitivQps"),
    
    REFINITIVTRACSWEB("RefinitivTracsWeb"),
    
    VOLMASTER("VolMaster"),
    
    ISDACDS("IsdaCds"),
    
    YIELDBOOK("YieldBook"),
    
    LUSIDCALC("LusidCalc");

    private String value;

    SupplierEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SupplierEnum fromValue(String value) {
      for (SupplierEnum b : SupplierEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SupplierEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SupplierEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SupplierEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SupplierEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_SUPPLIER = "supplier";
  @SerializedName(SERIALIZED_NAME_SUPPLIER)
  private SupplierEnum supplier;

  public static final String SERIALIZED_NAME_MODEL_NAME = "modelName";
  @SerializedName(SERIALIZED_NAME_MODEL_NAME)
  private String modelName;

  public static final String SERIALIZED_NAME_INSTRUMENT_TYPE = "instrumentType";
  @SerializedName(SERIALIZED_NAME_INSTRUMENT_TYPE)
  private String instrumentType;

  public static final String SERIALIZED_NAME_PARAMETERS = "parameters";
  @SerializedName(SERIALIZED_NAME_PARAMETERS)
  private String parameters;

  public static final String SERIALIZED_NAME_MODEL_OPTIONS = "modelOptions";
  @SerializedName(SERIALIZED_NAME_MODEL_OPTIONS)
  private ModelOptions modelOptions;

  public static final String SERIALIZED_NAME_INSTRUMENT_ID = "instrumentId";
  @SerializedName(SERIALIZED_NAME_INSTRUMENT_ID)
  private String instrumentId;

  public static final String SERIALIZED_NAME_ADDRESS_KEY_FILTERS = "addressKeyFilters";
  @SerializedName(SERIALIZED_NAME_ADDRESS_KEY_FILTERS)
  private List<AddressKeyFilter> addressKeyFilters;

  public VendorModelRule() {
  }

  public VendorModelRule supplier(SupplierEnum supplier) {
    
    this.supplier = supplier;
    return this;
  }

   /**
   * The available values are: Lusid, RefinitivQps, RefinitivTracsWeb, VolMaster, IsdaCds, YieldBook, LusidCalc
   * @return supplier
  **/
  @javax.annotation.Nonnull
  public SupplierEnum getSupplier() {
    return supplier;
  }


  public void setSupplier(SupplierEnum supplier) {
    this.supplier = supplier;
  }


  public VendorModelRule modelName(String modelName) {
    
    this.modelName = modelName;
    return this;
  }

   /**
   * The vendor library model name
   * @return modelName
  **/
  @javax.annotation.Nonnull
  public String getModelName() {
    return modelName;
  }


  public void setModelName(String modelName) {
    this.modelName = modelName;
  }


  public VendorModelRule instrumentType(String instrumentType) {
    
    this.instrumentType = instrumentType;
    return this;
  }

   /**
   * The vendor library instrument type
   * @return instrumentType
  **/
  @javax.annotation.Nonnull
  public String getInstrumentType() {
    return instrumentType;
  }


  public void setInstrumentType(String instrumentType) {
    this.instrumentType = instrumentType;
  }


  public VendorModelRule parameters(String parameters) {
    
    this.parameters = parameters;
    return this;
  }

   /**
   * THIS FIELD IS DEPRECATED - use ModelOptions  The set of opaque model parameters, provided as a Json object, that is a string object which will internally be converted to a dictionary of string to object.  Note that this is not intended as the final form of this object. It will be replaced with a more structured object as the set of parameters that are possible is  better understood.
   * @return parameters
  **/
  @javax.annotation.Nullable
  public String getParameters() {
    return parameters;
  }


  public void setParameters(String parameters) {
    this.parameters = parameters;
  }


  public VendorModelRule modelOptions(ModelOptions modelOptions) {
    
    this.modelOptions = modelOptions;
    return this;
  }

   /**
   * Get modelOptions
   * @return modelOptions
  **/
  @javax.annotation.Nullable
  public ModelOptions getModelOptions() {
    return modelOptions;
  }


  public void setModelOptions(ModelOptions modelOptions) {
    this.modelOptions = modelOptions;
  }


  public VendorModelRule instrumentId(String instrumentId) {
    
    this.instrumentId = instrumentId;
    return this;
  }

   /**
   * This field should generally not be required. It indicates a specific case where there is a particular need to make a rule apply to only a single instrument  specified by an identifier on that instrument such as its LUID. One particular example would be to control the behaviour of a look-through portfolio scaling  methodology, such as where there is a mixture of indices and credit-debit portfolios where scaling on the sum of valuation would be deemed incorrectly for one  set but desired in general.
   * @return instrumentId
  **/
  @javax.annotation.Nullable
  public String getInstrumentId() {
    return instrumentId;
  }


  public void setInstrumentId(String instrumentId) {
    this.instrumentId = instrumentId;
  }


  public VendorModelRule addressKeyFilters(List<AddressKeyFilter> addressKeyFilters) {
    
    this.addressKeyFilters = addressKeyFilters;
    return this;
  }

  public VendorModelRule addAddressKeyFiltersItem(AddressKeyFilter addressKeyFiltersItem) {
    if (this.addressKeyFilters == null) {
      this.addressKeyFilters = new ArrayList<>();
    }
    this.addressKeyFilters.add(addressKeyFiltersItem);
    return this;
  }

   /**
   * Condition for model selection. If a condition is satisfied the default model for valuation is overridden (for that instrument).
   * @return addressKeyFilters
  **/
  @javax.annotation.Nullable
  public List<AddressKeyFilter> getAddressKeyFilters() {
    return addressKeyFilters;
  }


  public void setAddressKeyFilters(List<AddressKeyFilter> addressKeyFilters) {
    this.addressKeyFilters = addressKeyFilters;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VendorModelRule vendorModelRule = (VendorModelRule) o;
    return Objects.equals(this.supplier, vendorModelRule.supplier) &&
        Objects.equals(this.modelName, vendorModelRule.modelName) &&
        Objects.equals(this.instrumentType, vendorModelRule.instrumentType) &&
        Objects.equals(this.parameters, vendorModelRule.parameters) &&
        Objects.equals(this.modelOptions, vendorModelRule.modelOptions) &&
        Objects.equals(this.instrumentId, vendorModelRule.instrumentId) &&
        Objects.equals(this.addressKeyFilters, vendorModelRule.addressKeyFilters);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(supplier, modelName, instrumentType, parameters, modelOptions, instrumentId, addressKeyFilters);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VendorModelRule {\n");
    sb.append("    supplier: ").append(toIndentedString(supplier)).append("\n");
    sb.append("    modelName: ").append(toIndentedString(modelName)).append("\n");
    sb.append("    instrumentType: ").append(toIndentedString(instrumentType)).append("\n");
    sb.append("    parameters: ").append(toIndentedString(parameters)).append("\n");
    sb.append("    modelOptions: ").append(toIndentedString(modelOptions)).append("\n");
    sb.append("    instrumentId: ").append(toIndentedString(instrumentId)).append("\n");
    sb.append("    addressKeyFilters: ").append(toIndentedString(addressKeyFilters)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("supplier");
    openapiFields.add("modelName");
    openapiFields.add("instrumentType");
    openapiFields.add("parameters");
    openapiFields.add("modelOptions");
    openapiFields.add("instrumentId");
    openapiFields.add("addressKeyFilters");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("supplier");
    openapiRequiredFields.add("modelName");
    openapiRequiredFields.add("instrumentType");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to VendorModelRule
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!VendorModelRule.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VendorModelRule is not found in the empty JSON string", VendorModelRule.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!VendorModelRule.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VendorModelRule` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : VendorModelRule.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("supplier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `supplier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("supplier").toString()));
      }
      if (!jsonObj.get("modelName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `modelName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("modelName").toString()));
      }
      if (!jsonObj.get("instrumentType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `instrumentType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("instrumentType").toString()));
      }
      if ((jsonObj.get("parameters") != null && !jsonObj.get("parameters").isJsonNull()) && !jsonObj.get("parameters").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `parameters` to be a primitive type in the JSON string but got `%s`", jsonObj.get("parameters").toString()));
      }
      // validate the optional field `modelOptions`
      if (jsonObj.get("modelOptions") != null && !jsonObj.get("modelOptions").isJsonNull()) {
        ModelOptions.validateJsonObject(jsonObj.getAsJsonObject("modelOptions"));
      }
      if ((jsonObj.get("instrumentId") != null && !jsonObj.get("instrumentId").isJsonNull()) && !jsonObj.get("instrumentId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `instrumentId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("instrumentId").toString()));
      }
      if (jsonObj.get("addressKeyFilters") != null && !jsonObj.get("addressKeyFilters").isJsonNull()) {
        JsonArray jsonArrayaddressKeyFilters = jsonObj.getAsJsonArray("addressKeyFilters");
        if (jsonArrayaddressKeyFilters != null) {
          // ensure the json data is an array
          if (!jsonObj.get("addressKeyFilters").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `addressKeyFilters` to be an array in the JSON string but got `%s`", jsonObj.get("addressKeyFilters").toString()));
          }

          // validate the optional field `addressKeyFilters` (array)
          for (int i = 0; i < jsonArrayaddressKeyFilters.size(); i++) {
            AddressKeyFilter.validateJsonObject(jsonArrayaddressKeyFilters.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VendorModelRule.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VendorModelRule' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VendorModelRule> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VendorModelRule.class));

       return (TypeAdapter<T>) new TypeAdapter<VendorModelRule>() {
           @Override
           public void write(JsonWriter out, VendorModelRule value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VendorModelRule read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of VendorModelRule given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of VendorModelRule
  * @throws IOException if the JSON string is invalid with respect to VendorModelRule
  */
  public static VendorModelRule fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VendorModelRule.class);
  }

 /**
  * Convert an instance of VendorModelRule to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
