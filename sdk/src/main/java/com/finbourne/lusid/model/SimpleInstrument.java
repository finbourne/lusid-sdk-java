/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import com.finbourne.lusid.model.LusidInstrument;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * LUSID representation of a Simple Instrument, used as a basic definition of a generic instrument.  No analytics can be obtained for this.
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class SimpleInstrument extends LusidInstrument {
  public static final String SERIALIZED_NAME_MATURITY_DATE = "maturityDate";
  @SerializedName(SERIALIZED_NAME_MATURITY_DATE)
  private OffsetDateTime maturityDate;

  public static final String SERIALIZED_NAME_DOM_CCY = "domCcy";
  @SerializedName(SERIALIZED_NAME_DOM_CCY)
  private String domCcy;

  /**
   * The available values are: InterestRates, FX, Inflation, Equities, Credit, Commodities, Money, Unknown
   */
  @JsonAdapter(AssetClassEnum.Adapter.class)
  public enum AssetClassEnum {
    INTERESTRATES("InterestRates"),
    
    FX("FX"),
    
    INFLATION("Inflation"),
    
    EQUITIES("Equities"),
    
    CREDIT("Credit"),
    
    COMMODITIES("Commodities"),
    
    MONEY("Money"),
    
    UNKNOWN("Unknown");

    private String value;

    AssetClassEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AssetClassEnum fromValue(String value) {
      for (AssetClassEnum b : AssetClassEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AssetClassEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AssetClassEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AssetClassEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AssetClassEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_ASSET_CLASS = "assetClass";
  @SerializedName(SERIALIZED_NAME_ASSET_CLASS)
  private AssetClassEnum assetClass;

  public static final String SERIALIZED_NAME_FGN_CCYS = "fgnCcys";
  @SerializedName(SERIALIZED_NAME_FGN_CCYS)
  private List<String> fgnCcys;

  public static final String SERIALIZED_NAME_SIMPLE_INSTRUMENT_TYPE = "simpleInstrumentType";
  @SerializedName(SERIALIZED_NAME_SIMPLE_INSTRUMENT_TYPE)
  private String simpleInstrumentType;

  public SimpleInstrument() {
    // this.instrumentType = this.getClass().getSimpleName();
  }

  public SimpleInstrument maturityDate(OffsetDateTime maturityDate) {
    
    this.maturityDate = maturityDate;
    return this;
  }

   /**
   * The final maturity date of the instrument. This means the last date on which the instruments makes a payment of any amount.  For the avoidance of doubt, that is not necessarily prior to its last sensitivity date for the purposes of risk; e.g. instruments such as  Constant Maturity Swaps (CMS) often have sensitivities to rates that may well be observed or set prior to the maturity date, but refer to a termination date beyond it.
   * @return maturityDate
  **/
  @jakarta.annotation.Nullable
  public OffsetDateTime getMaturityDate() {
    return maturityDate;
  }


  public void setMaturityDate(OffsetDateTime maturityDate) {
    this.maturityDate = maturityDate;
  }


  public SimpleInstrument domCcy(String domCcy) {
    
    this.domCcy = domCcy;
    return this;
  }

   /**
   * The domestic currency.
   * @return domCcy
  **/
  @jakarta.annotation.Nonnull
  public String getDomCcy() {
    return domCcy;
  }


  public void setDomCcy(String domCcy) {
    this.domCcy = domCcy;
  }


  public SimpleInstrument assetClass(AssetClassEnum assetClass) {
    
    this.assetClass = assetClass;
    return this;
  }

   /**
   * The available values are: InterestRates, FX, Inflation, Equities, Credit, Commodities, Money, Unknown
   * @return assetClass
  **/
  @jakarta.annotation.Nonnull
  public AssetClassEnum getAssetClass() {
    return assetClass;
  }


  public void setAssetClass(AssetClassEnum assetClass) {
    this.assetClass = assetClass;
  }


  public SimpleInstrument fgnCcys(List<String> fgnCcys) {
    
    this.fgnCcys = fgnCcys;
    return this;
  }

  public SimpleInstrument addFgnCcysItem(String fgnCcysItem) {
    if (this.fgnCcys == null) {
      this.fgnCcys = new ArrayList<>();
    }
    this.fgnCcys.add(fgnCcysItem);
    return this;
  }

   /**
   * The set of foreign currencies, if any (optional).
   * @return fgnCcys
  **/
  @jakarta.annotation.Nullable
  public List<String> getFgnCcys() {
    return fgnCcys;
  }


  public void setFgnCcys(List<String> fgnCcys) {
    this.fgnCcys = fgnCcys;
  }


  public SimpleInstrument simpleInstrumentType(String simpleInstrumentType) {
    
    this.simpleInstrumentType = simpleInstrumentType;
    return this;
  }

   /**
   * The Instrument type of the simple instrument.
   * @return simpleInstrumentType
  **/
  @jakarta.annotation.Nonnull
  public String getSimpleInstrumentType() {
    return simpleInstrumentType;
  }


  public void setSimpleInstrumentType(String simpleInstrumentType) {
    this.simpleInstrumentType = simpleInstrumentType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SimpleInstrument simpleInstrument = (SimpleInstrument) o;
    return Objects.equals(this.maturityDate, simpleInstrument.maturityDate) &&
        Objects.equals(this.domCcy, simpleInstrument.domCcy) &&
        Objects.equals(this.assetClass, simpleInstrument.assetClass) &&
        Objects.equals(this.fgnCcys, simpleInstrument.fgnCcys) &&
        Objects.equals(this.simpleInstrumentType, simpleInstrument.simpleInstrumentType) &&
        super.equals(o);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(maturityDate, domCcy, assetClass, fgnCcys, simpleInstrumentType, super.hashCode());
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SimpleInstrument {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    maturityDate: ").append(toIndentedString(maturityDate)).append("\n");
    sb.append("    domCcy: ").append(toIndentedString(domCcy)).append("\n");
    sb.append("    assetClass: ").append(toIndentedString(assetClass)).append("\n");
    sb.append("    fgnCcys: ").append(toIndentedString(fgnCcys)).append("\n");
    sb.append("    simpleInstrumentType: ").append(toIndentedString(simpleInstrumentType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("instrumentType");
    openapiFields.add("maturityDate");
    openapiFields.add("domCcy");
    openapiFields.add("assetClass");
    openapiFields.add("fgnCcys");
    openapiFields.add("simpleInstrumentType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("domCcy");
    openapiRequiredFields.add("assetClass");
    openapiRequiredFields.add("simpleInstrumentType");
    openapiRequiredFields.add("instrumentType");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to SimpleInstrument
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SimpleInstrument.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SimpleInstrument is not found in the empty JSON string", SimpleInstrument.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SimpleInstrument.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SimpleInstrument.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SimpleInstrument' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SimpleInstrument> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SimpleInstrument.class));

       return (TypeAdapter<T>) new TypeAdapter<SimpleInstrument>() {
           @Override
           public void write(JsonWriter out, SimpleInstrument value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SimpleInstrument read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of SimpleInstrument given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of SimpleInstrument
  * @throws IOException if the JSON string is invalid with respect to SimpleInstrument
  */
  public static SimpleInstrument fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SimpleInstrument.class);
  }

 /**
  * Convert an instance of SimpleInstrument to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
