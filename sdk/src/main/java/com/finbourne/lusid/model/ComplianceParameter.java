/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * ComplianceParameter
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ComplianceParameter {
  /**
   * The parameter type. The available values are: BoolComplianceParameter, StringComplianceParameter, DecimalComplianceParameter, DateTimeComplianceParameter, PropertyKeyComplianceParameter, AddressKeyComplianceParameter, PortfolioIdComplianceParameter, PortfolioGroupIdComplianceParameter, StringListComplianceParameter, BoolListComplianceParameter, DateTimeListComplianceParameter, DecimalListComplianceParameter, PropertyKeyListComplianceParameter, AddressKeyListComplianceParameter, PortfolioIdListComplianceParameter, PortfolioGroupIdListComplianceParameter, InstrumentListComplianceParameter, FilterPredicateComplianceParameter, GroupFilterPredicateComplianceParameter, GroupBySelectorComplianceParameter, PropertyListComplianceParameter
   */
  @JsonAdapter(ComplianceParameterTypeEnum.Adapter.class)
  public enum ComplianceParameterTypeEnum {
    BOOLCOMPLIANCEPARAMETER("BoolComplianceParameter"),
    
    STRINGCOMPLIANCEPARAMETER("StringComplianceParameter"),
    
    DECIMALCOMPLIANCEPARAMETER("DecimalComplianceParameter"),
    
    DATETIMECOMPLIANCEPARAMETER("DateTimeComplianceParameter"),
    
    PROPERTYKEYCOMPLIANCEPARAMETER("PropertyKeyComplianceParameter"),
    
    ADDRESSKEYCOMPLIANCEPARAMETER("AddressKeyComplianceParameter"),
    
    PORTFOLIOIDCOMPLIANCEPARAMETER("PortfolioIdComplianceParameter"),
    
    PORTFOLIOGROUPIDCOMPLIANCEPARAMETER("PortfolioGroupIdComplianceParameter"),
    
    STRINGLISTCOMPLIANCEPARAMETER("StringListComplianceParameter"),
    
    BOOLLISTCOMPLIANCEPARAMETER("BoolListComplianceParameter"),
    
    DATETIMELISTCOMPLIANCEPARAMETER("DateTimeListComplianceParameter"),
    
    DECIMALLISTCOMPLIANCEPARAMETER("DecimalListComplianceParameter"),
    
    PROPERTYKEYLISTCOMPLIANCEPARAMETER("PropertyKeyListComplianceParameter"),
    
    ADDRESSKEYLISTCOMPLIANCEPARAMETER("AddressKeyListComplianceParameter"),
    
    PORTFOLIOIDLISTCOMPLIANCEPARAMETER("PortfolioIdListComplianceParameter"),
    
    PORTFOLIOGROUPIDLISTCOMPLIANCEPARAMETER("PortfolioGroupIdListComplianceParameter"),
    
    INSTRUMENTLISTCOMPLIANCEPARAMETER("InstrumentListComplianceParameter"),
    
    FILTERPREDICATECOMPLIANCEPARAMETER("FilterPredicateComplianceParameter"),
    
    GROUPFILTERPREDICATECOMPLIANCEPARAMETER("GroupFilterPredicateComplianceParameter"),
    
    GROUPBYSELECTORCOMPLIANCEPARAMETER("GroupBySelectorComplianceParameter"),
    
    PROPERTYLISTCOMPLIANCEPARAMETER("PropertyListComplianceParameter");

    private String value;

    ComplianceParameterTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ComplianceParameterTypeEnum fromValue(String value) {
      for (ComplianceParameterTypeEnum b : ComplianceParameterTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ComplianceParameterTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ComplianceParameterTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ComplianceParameterTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ComplianceParameterTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_COMPLIANCE_PARAMETER_TYPE = "complianceParameterType";
  @SerializedName(SERIALIZED_NAME_COMPLIANCE_PARAMETER_TYPE)
  protected ComplianceParameterTypeEnum complianceParameterType;

  public ComplianceParameter() {
  }

  public ComplianceParameter complianceParameterType(ComplianceParameterTypeEnum complianceParameterType) {
    
    this.complianceParameterType = complianceParameterType;
    return this;
  }

   /**
   * The parameter type. The available values are: BoolComplianceParameter, StringComplianceParameter, DecimalComplianceParameter, DateTimeComplianceParameter, PropertyKeyComplianceParameter, AddressKeyComplianceParameter, PortfolioIdComplianceParameter, PortfolioGroupIdComplianceParameter, StringListComplianceParameter, BoolListComplianceParameter, DateTimeListComplianceParameter, DecimalListComplianceParameter, PropertyKeyListComplianceParameter, AddressKeyListComplianceParameter, PortfolioIdListComplianceParameter, PortfolioGroupIdListComplianceParameter, InstrumentListComplianceParameter, FilterPredicateComplianceParameter, GroupFilterPredicateComplianceParameter, GroupBySelectorComplianceParameter, PropertyListComplianceParameter
   * @return complianceParameterType
  **/
  @jakarta.annotation.Nonnull
  public ComplianceParameterTypeEnum getComplianceParameterType() {
    return complianceParameterType;
  }


  public void setComplianceParameterType(ComplianceParameterTypeEnum complianceParameterType) {
    this.complianceParameterType = complianceParameterType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ComplianceParameter complianceParameter = (ComplianceParameter) o;
    return Objects.equals(this.complianceParameterType, complianceParameter.complianceParameterType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(complianceParameterType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ComplianceParameter {\n");
    sb.append("    complianceParameterType: ").append(toIndentedString(complianceParameterType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("complianceParameterType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("complianceParameterType");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ComplianceParameter
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ComplianceParameter.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ComplianceParameter is not found in the empty JSON string", ComplianceParameter.openapiRequiredFields.toString()));
        }
      }

      String discriminatorValue = jsonElement.getAsJsonObject().get("complianceParameterType").getAsString();
      switch (discriminatorValue) {
        case "AddressKeyComplianceParameter":
          AddressKeyComplianceParameter.validateJsonElement(jsonElement);
          break;
        case "AddressKeyListComplianceParameter":
          AddressKeyListComplianceParameter.validateJsonElement(jsonElement);
          break;
        case "BoolComplianceParameter":
          BoolComplianceParameter.validateJsonElement(jsonElement);
          break;
        case "BoolListComplianceParameter":
          BoolListComplianceParameter.validateJsonElement(jsonElement);
          break;
        case "DateTimeComplianceParameter":
          DateTimeComplianceParameter.validateJsonElement(jsonElement);
          break;
        case "DateTimeListComplianceParameter":
          DateTimeListComplianceParameter.validateJsonElement(jsonElement);
          break;
        case "DecimalComplianceParameter":
          DecimalComplianceParameter.validateJsonElement(jsonElement);
          break;
        case "DecimalListComplianceParameter":
          DecimalListComplianceParameter.validateJsonElement(jsonElement);
          break;
        case "FilterPredicateComplianceParameter":
          FilterPredicateComplianceParameter.validateJsonElement(jsonElement);
          break;
        case "GroupBySelectorComplianceParameter":
          GroupBySelectorComplianceParameter.validateJsonElement(jsonElement);
          break;
        case "GroupFilterPredicateComplianceParameter":
          GroupFilterPredicateComplianceParameter.validateJsonElement(jsonElement);
          break;
        case "InstrumentListComplianceParameter":
          InstrumentListComplianceParameter.validateJsonElement(jsonElement);
          break;
        case "PortfolioGroupIdComplianceParameter":
          PortfolioGroupIdComplianceParameter.validateJsonElement(jsonElement);
          break;
        case "PortfolioGroupIdListComplianceParameter":
          PortfolioGroupIdListComplianceParameter.validateJsonElement(jsonElement);
          break;
        case "PortfolioIdComplianceParameter":
          PortfolioIdComplianceParameter.validateJsonElement(jsonElement);
          break;
        case "PortfolioIdListComplianceParameter":
          PortfolioIdListComplianceParameter.validateJsonElement(jsonElement);
          break;
        case "PropertyKeyComplianceParameter":
          PropertyKeyComplianceParameter.validateJsonElement(jsonElement);
          break;
        case "PropertyKeyListComplianceParameter":
          PropertyKeyListComplianceParameter.validateJsonElement(jsonElement);
          break;
        case "PropertyListComplianceParameter":
          PropertyListComplianceParameter.validateJsonElement(jsonElement);
          break;
        case "StringComplianceParameter":
          StringComplianceParameter.validateJsonElement(jsonElement);
          break;
        case "StringListComplianceParameter":
          StringListComplianceParameter.validateJsonElement(jsonElement);
          break;
        default:
          throw new IllegalArgumentException(String.format("The value of the `complianceParameterType` field `%s` does not match any key defined in the discriminator's mapping.", discriminatorValue));
      }
  }


 /**
  * Create an instance of ComplianceParameter given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ComplianceParameter
  * @throws IOException if the JSON string is invalid with respect to ComplianceParameter
  */
  public static ComplianceParameter fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ComplianceParameter.class);
  }

 /**
  * Convert an instance of ComplianceParameter to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
