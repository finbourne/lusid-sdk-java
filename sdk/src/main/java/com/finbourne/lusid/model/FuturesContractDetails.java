/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * Most, if not all, information about contracts is standardized. See, e.g. https://www.cmegroup.com/ for  common codes and similar data. This appears to be in common use by well known market information providers, e.g. Bloomberg and Refinitiv.
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class FuturesContractDetails {
  public static final String SERIALIZED_NAME_DOM_CCY = "domCcy";
  @SerializedName(SERIALIZED_NAME_DOM_CCY)
  private String domCcy;

  public static final String SERIALIZED_NAME_FGN_CCY = "fgnCcy";
  @SerializedName(SERIALIZED_NAME_FGN_CCY)
  private String fgnCcy;

  public static final String SERIALIZED_NAME_ASSET_CLASS = "assetClass";
  @SerializedName(SERIALIZED_NAME_ASSET_CLASS)
  private String assetClass;

  public static final String SERIALIZED_NAME_CONTRACT_CODE = "contractCode";
  @SerializedName(SERIALIZED_NAME_CONTRACT_CODE)
  private String contractCode;

  public static final String SERIALIZED_NAME_CONTRACT_MONTH = "contractMonth";
  @SerializedName(SERIALIZED_NAME_CONTRACT_MONTH)
  private String contractMonth;

  public static final String SERIALIZED_NAME_CONTRACT_SIZE = "contractSize";
  @SerializedName(SERIALIZED_NAME_CONTRACT_SIZE)
  private java.math.BigDecimal contractSize;

  public static final String SERIALIZED_NAME_CONVENTION = "convention";
  @SerializedName(SERIALIZED_NAME_CONVENTION)
  private String convention;

  public static final String SERIALIZED_NAME_COUNTRY = "country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  private String country;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_EXCHANGE_CODE = "exchangeCode";
  @SerializedName(SERIALIZED_NAME_EXCHANGE_CODE)
  private String exchangeCode;

  public static final String SERIALIZED_NAME_EXCHANGE_NAME = "exchangeName";
  @SerializedName(SERIALIZED_NAME_EXCHANGE_NAME)
  private String exchangeName;

  public static final String SERIALIZED_NAME_TICKER_STEP = "tickerStep";
  @SerializedName(SERIALIZED_NAME_TICKER_STEP)
  private java.math.BigDecimal tickerStep;

  public static final String SERIALIZED_NAME_UNIT_VALUE = "unitValue";
  @SerializedName(SERIALIZED_NAME_UNIT_VALUE)
  private java.math.BigDecimal unitValue;

  public static final String SERIALIZED_NAME_CALENDARS = "calendars";
  @SerializedName(SERIALIZED_NAME_CALENDARS)
  private List<String> calendars;

  public static final String SERIALIZED_NAME_DELIVERY_TYPE = "deliveryType";
  @SerializedName(SERIALIZED_NAME_DELIVERY_TYPE)
  private String deliveryType;

  public FuturesContractDetails() {
  }

  public FuturesContractDetails domCcy(String domCcy) {
    
    this.domCcy = domCcy;
    return this;
  }

   /**
   * Currency in which the contract is paid.
   * @return domCcy
  **/
  @jakarta.annotation.Nonnull
  public String getDomCcy() {
    return domCcy;
  }


  public void setDomCcy(String domCcy) {
    this.domCcy = domCcy;
  }


  public FuturesContractDetails fgnCcy(String fgnCcy) {
    
    this.fgnCcy = fgnCcy;
    return this;
  }

   /**
   * Currency of the underlying, for use with FX Futures
   * @return fgnCcy
  **/
  @jakarta.annotation.Nullable
  public String getFgnCcy() {
    return fgnCcy;
  }


  public void setFgnCcy(String fgnCcy) {
    this.fgnCcy = fgnCcy;
  }


  public FuturesContractDetails assetClass(String assetClass) {
    
    this.assetClass = assetClass;
    return this;
  }

   /**
   * The asset class of the underlying. Optional and will default to Unknown if not set.    Supported string (enumeration) values are: [InterestRates, FX, Inflation, Equities, Credit, Commodities, Money].
   * @return assetClass
  **/
  @jakarta.annotation.Nullable
  public String getAssetClass() {
    return assetClass;
  }


  public void setAssetClass(String assetClass) {
    this.assetClass = assetClass;
  }


  public FuturesContractDetails contractCode(String contractCode) {
    
    this.contractCode = contractCode;
    return this;
  }

   /**
   * The contract code used by the exchange, e.g. “CL” for Crude Oil, “ES” for E-mini SP 500, “FGBL” for Bund Futures, etc.
   * @return contractCode
  **/
  @jakarta.annotation.Nonnull
  public String getContractCode() {
    return contractCode;
  }


  public void setContractCode(String contractCode) {
    this.contractCode = contractCode;
  }


  public FuturesContractDetails contractMonth(String contractMonth) {
    
    this.contractMonth = contractMonth;
    return this;
  }

   /**
   * Which month does the contract trade for.    Supported string (enumeration) values are: [F, G, H, J, K, M, N, Q, U, V, X, Z].
   * @return contractMonth
  **/
  @jakarta.annotation.Nonnull
  public String getContractMonth() {
    return contractMonth;
  }


  public void setContractMonth(String contractMonth) {
    this.contractMonth = contractMonth;
  }


  public FuturesContractDetails contractSize(java.math.BigDecimal contractSize) {
    
    this.contractSize = contractSize;
    return this;
  }

   /**
   * Size of a single contract.
   * @return contractSize
  **/
  @jakarta.annotation.Nonnull
  public java.math.BigDecimal getContractSize() {
    return contractSize;
  }


  public void setContractSize(java.math.BigDecimal contractSize) {
    this.contractSize = contractSize;
  }


  public FuturesContractDetails convention(String convention) {
    
    this.convention = convention;
    return this;
  }

   /**
   * If appropriate, the day count convention method used in pricing (rates futures).  For more information on day counts, see [knowledge base article KA-01798](https://support.lusid.com/knowledgebase/article/KA-01798)     Supported string (enumeration) values are: [Actual360, Act360, MoneyMarket, Actual365, Act365, Thirty360, ThirtyU360, Bond, ThirtyE360, EuroBond, ActualActual, ActAct, ActActIsda, ActActIsma, ActActIcma, OneOne, Act364, Act365F, Act365L, Act365_25, Act252, Bus252, NL360, NL365, ActActAFB, Act365Cad, ThirtyActIsda, Thirty365Isda, ThirtyEActIsda, ThirtyE360Isda, ThirtyE365Isda, ThirtyU360EOM].
   * @return convention
  **/
  @jakarta.annotation.Nullable
  public String getConvention() {
    return convention;
  }


  public void setConvention(String convention) {
    this.convention = convention;
  }


  public FuturesContractDetails country(String country) {
    
    this.country = country;
    return this;
  }

   /**
   * Country (code) for the exchange.
   * @return country
  **/
  @jakarta.annotation.Nullable
  public String getCountry() {
    return country;
  }


  public void setCountry(String country) {
    this.country = country;
  }


  public FuturesContractDetails description(String description) {
    
    this.description = description;
    return this;
  }

   /**
   * Description of contract.
   * @return description
  **/
  @jakarta.annotation.Nullable
  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    this.description = description;
  }


  public FuturesContractDetails exchangeCode(String exchangeCode) {
    
    this.exchangeCode = exchangeCode;
    return this;
  }

   /**
   * Exchange code for contract. This can be any string to uniquely identify the exchange (e.g. Exchange Name, MIC, BBG code).
   * @return exchangeCode
  **/
  @jakarta.annotation.Nonnull
  public String getExchangeCode() {
    return exchangeCode;
  }


  public void setExchangeCode(String exchangeCode) {
    this.exchangeCode = exchangeCode;
  }


  public FuturesContractDetails exchangeName(String exchangeName) {
    
    this.exchangeName = exchangeName;
    return this;
  }

   /**
   * Exchange name (for when code is not automatically recognised).
   * @return exchangeName
  **/
  @jakarta.annotation.Nullable
  public String getExchangeName() {
    return exchangeName;
  }


  public void setExchangeName(String exchangeName) {
    this.exchangeName = exchangeName;
  }


  public FuturesContractDetails tickerStep(java.math.BigDecimal tickerStep) {
    
    this.tickerStep = tickerStep;
    return this;
  }

   /**
   * Minimal step size change in ticker.
   * @return tickerStep
  **/
  @jakarta.annotation.Nullable
  public java.math.BigDecimal getTickerStep() {
    return tickerStep;
  }


  public void setTickerStep(java.math.BigDecimal tickerStep) {
    this.tickerStep = tickerStep;
  }


  public FuturesContractDetails unitValue(java.math.BigDecimal unitValue) {
    
    this.unitValue = unitValue;
    return this;
  }

   /**
   * The value in the currency of a 1 unit change in the contract price.
   * @return unitValue
  **/
  @jakarta.annotation.Nullable
  public java.math.BigDecimal getUnitValue() {
    return unitValue;
  }


  public void setUnitValue(java.math.BigDecimal unitValue) {
    this.unitValue = unitValue;
  }


  public FuturesContractDetails calendars(List<String> calendars) {
    
    this.calendars = calendars;
    return this;
  }

  public FuturesContractDetails addCalendarsItem(String calendarsItem) {
    if (this.calendars == null) {
      this.calendars = new ArrayList<>();
    }
    this.calendars.add(calendarsItem);
    return this;
  }

   /**
   * Holiday calendars that apply to yield-to-price conversions (i.e. for BRL futures).
   * @return calendars
  **/
  @jakarta.annotation.Nullable
  public List<String> getCalendars() {
    return calendars;
  }


  public void setCalendars(List<String> calendars) {
    this.calendars = calendars;
  }


  public FuturesContractDetails deliveryType(String deliveryType) {
    
    this.deliveryType = deliveryType;
    return this;
  }

   /**
   * Delivery type to be used on settling the contract.  Optional: Defaults to DeliveryType.Physical if not provided.    Supported string (enumeration) values are: [Cash, Physical].
   * @return deliveryType
  **/
  @jakarta.annotation.Nullable
  public String getDeliveryType() {
    return deliveryType;
  }


  public void setDeliveryType(String deliveryType) {
    this.deliveryType = deliveryType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FuturesContractDetails futuresContractDetails = (FuturesContractDetails) o;
    return Objects.equals(this.domCcy, futuresContractDetails.domCcy) &&
        Objects.equals(this.fgnCcy, futuresContractDetails.fgnCcy) &&
        Objects.equals(this.assetClass, futuresContractDetails.assetClass) &&
        Objects.equals(this.contractCode, futuresContractDetails.contractCode) &&
        Objects.equals(this.contractMonth, futuresContractDetails.contractMonth) &&
        (this.contractSize.compareTo(futuresContractDetails.getContractSize()) == 0) &&
        Objects.equals(this.convention, futuresContractDetails.convention) &&
        Objects.equals(this.country, futuresContractDetails.country) &&
        Objects.equals(this.description, futuresContractDetails.description) &&
        Objects.equals(this.exchangeCode, futuresContractDetails.exchangeCode) &&
        Objects.equals(this.exchangeName, futuresContractDetails.exchangeName) &&
        (this.tickerStep.compareTo(futuresContractDetails.getTickerStep()) == 0) &&
        (this.unitValue.compareTo(futuresContractDetails.getUnitValue()) == 0) &&
        Objects.equals(this.calendars, futuresContractDetails.calendars) &&
        Objects.equals(this.deliveryType, futuresContractDetails.deliveryType);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(domCcy, fgnCcy, assetClass, contractCode, contractMonth, contractSize, convention, country, description, exchangeCode, exchangeName, tickerStep, unitValue, calendars, deliveryType);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FuturesContractDetails {\n");
    sb.append("    domCcy: ").append(toIndentedString(domCcy)).append("\n");
    sb.append("    fgnCcy: ").append(toIndentedString(fgnCcy)).append("\n");
    sb.append("    assetClass: ").append(toIndentedString(assetClass)).append("\n");
    sb.append("    contractCode: ").append(toIndentedString(contractCode)).append("\n");
    sb.append("    contractMonth: ").append(toIndentedString(contractMonth)).append("\n");
    sb.append("    contractSize: ").append(toIndentedString(contractSize)).append("\n");
    sb.append("    convention: ").append(toIndentedString(convention)).append("\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    exchangeCode: ").append(toIndentedString(exchangeCode)).append("\n");
    sb.append("    exchangeName: ").append(toIndentedString(exchangeName)).append("\n");
    sb.append("    tickerStep: ").append(toIndentedString(tickerStep)).append("\n");
    sb.append("    unitValue: ").append(toIndentedString(unitValue)).append("\n");
    sb.append("    calendars: ").append(toIndentedString(calendars)).append("\n");
    sb.append("    deliveryType: ").append(toIndentedString(deliveryType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("domCcy");
    openapiFields.add("fgnCcy");
    openapiFields.add("assetClass");
    openapiFields.add("contractCode");
    openapiFields.add("contractMonth");
    openapiFields.add("contractSize");
    openapiFields.add("convention");
    openapiFields.add("country");
    openapiFields.add("description");
    openapiFields.add("exchangeCode");
    openapiFields.add("exchangeName");
    openapiFields.add("tickerStep");
    openapiFields.add("unitValue");
    openapiFields.add("calendars");
    openapiFields.add("deliveryType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("domCcy");
    openapiRequiredFields.add("contractCode");
    openapiRequiredFields.add("contractMonth");
    openapiRequiredFields.add("contractSize");
    openapiRequiredFields.add("exchangeCode");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to FuturesContractDetails
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FuturesContractDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FuturesContractDetails is not found in the empty JSON string", FuturesContractDetails.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : FuturesContractDetails.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("domCcy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `domCcy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("domCcy").toString()));
      }
      if ((jsonObj.get("fgnCcy") != null && !jsonObj.get("fgnCcy").isJsonNull()) && !jsonObj.get("fgnCcy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fgnCcy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fgnCcy").toString()));
      }
      if ((jsonObj.get("assetClass") != null && !jsonObj.get("assetClass").isJsonNull()) && !jsonObj.get("assetClass").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `assetClass` to be a primitive type in the JSON string but got `%s`", jsonObj.get("assetClass").toString()));
      }
      if (!jsonObj.get("contractCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contractCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contractCode").toString()));
      }
      if (!jsonObj.get("contractMonth").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contractMonth` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contractMonth").toString()));
      }
      if ((jsonObj.get("convention") != null && !jsonObj.get("convention").isJsonNull()) && !jsonObj.get("convention").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `convention` to be a primitive type in the JSON string but got `%s`", jsonObj.get("convention").toString()));
      }
      if ((jsonObj.get("country") != null && !jsonObj.get("country").isJsonNull()) && !jsonObj.get("country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (!jsonObj.get("exchangeCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `exchangeCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("exchangeCode").toString()));
      }
      if ((jsonObj.get("exchangeName") != null && !jsonObj.get("exchangeName").isJsonNull()) && !jsonObj.get("exchangeName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `exchangeName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("exchangeName").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("calendars") != null && !jsonObj.get("calendars").isJsonNull() && !jsonObj.get("calendars").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `calendars` to be an array in the JSON string but got `%s`", jsonObj.get("calendars").toString()));
      }
      if ((jsonObj.get("deliveryType") != null && !jsonObj.get("deliveryType").isJsonNull()) && !jsonObj.get("deliveryType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deliveryType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deliveryType").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FuturesContractDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FuturesContractDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FuturesContractDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FuturesContractDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<FuturesContractDetails>() {
           @Override
           public void write(JsonWriter out, FuturesContractDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FuturesContractDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of FuturesContractDetails given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of FuturesContractDetails
  * @throws IOException if the JSON string is invalid with respect to FuturesContractDetails
  */
  public static FuturesContractDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FuturesContractDetails.class);
  }

 /**
  * Convert an instance of FuturesContractDetails to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
