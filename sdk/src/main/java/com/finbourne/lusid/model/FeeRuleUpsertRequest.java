/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import java.util.Arrays;
import com.finbourne.lusid.model.CalculationInfo;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * FeeRuleUpsertRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class FeeRuleUpsertRequest {
  public static final String SERIALIZED_NAME_CODE = "code";
  @SerializedName(SERIALIZED_NAME_CODE)
  private String code;

  public static final String SERIALIZED_NAME_TRANSACTION_PROPERTY_KEY = "transactionPropertyKey";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_PROPERTY_KEY)
  private String transactionPropertyKey;

  public static final String SERIALIZED_NAME_TRANSACTION_TYPE = "transactionType";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_TYPE)
  private String transactionType;

  public static final String SERIALIZED_NAME_COUNTRY = "country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  private String country;

  public static final String SERIALIZED_NAME_COUNTERPARTY = "counterparty";
  @SerializedName(SERIALIZED_NAME_COUNTERPARTY)
  private String counterparty;

  public static final String SERIALIZED_NAME_TRANSACTION_CURRENCY = "transactionCurrency";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_CURRENCY)
  private String transactionCurrency;

  public static final String SERIALIZED_NAME_SETTLEMENT_CURRENCY = "settlementCurrency";
  @SerializedName(SERIALIZED_NAME_SETTLEMENT_CURRENCY)
  private String settlementCurrency;

  public static final String SERIALIZED_NAME_EXECUTION_BROKER = "executionBroker";
  @SerializedName(SERIALIZED_NAME_EXECUTION_BROKER)
  private String executionBroker;

  public static final String SERIALIZED_NAME_CUSTODIAN = "custodian";
  @SerializedName(SERIALIZED_NAME_CUSTODIAN)
  private String custodian;

  public static final String SERIALIZED_NAME_EXCHANGE = "exchange";
  @SerializedName(SERIALIZED_NAME_EXCHANGE)
  private String exchange;

  public static final String SERIALIZED_NAME_FEE = "fee";
  @SerializedName(SERIALIZED_NAME_FEE)
  private CalculationInfo fee;

  public static final String SERIALIZED_NAME_MIN_FEE = "minFee";
  @SerializedName(SERIALIZED_NAME_MIN_FEE)
  private CalculationInfo minFee;

  public static final String SERIALIZED_NAME_MAX_FEE = "maxFee";
  @SerializedName(SERIALIZED_NAME_MAX_FEE)
  private CalculationInfo maxFee;

  public static final String SERIALIZED_NAME_ADDITIONAL_KEYS = "additionalKeys";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_KEYS)
  private Map<String, String> additionalKeys;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public FeeRuleUpsertRequest() {
  }

  public FeeRuleUpsertRequest code(String code) {
    
    this.code = code;
    return this;
  }

   /**
   * 
   * @return code
  **/
  @javax.annotation.Nullable
  public String getCode() {
    return code;
  }


  public void setCode(String code) {
    this.code = code;
  }


  public FeeRuleUpsertRequest transactionPropertyKey(String transactionPropertyKey) {
    
    this.transactionPropertyKey = transactionPropertyKey;
    return this;
  }

   /**
   * 
   * @return transactionPropertyKey
  **/
  @javax.annotation.Nonnull
  public String getTransactionPropertyKey() {
    return transactionPropertyKey;
  }


  public void setTransactionPropertyKey(String transactionPropertyKey) {
    this.transactionPropertyKey = transactionPropertyKey;
  }


  public FeeRuleUpsertRequest transactionType(String transactionType) {
    
    this.transactionType = transactionType;
    return this;
  }

   /**
   * 
   * @return transactionType
  **/
  @javax.annotation.Nonnull
  public String getTransactionType() {
    return transactionType;
  }


  public void setTransactionType(String transactionType) {
    this.transactionType = transactionType;
  }


  public FeeRuleUpsertRequest country(String country) {
    
    this.country = country;
    return this;
  }

   /**
   * 
   * @return country
  **/
  @javax.annotation.Nonnull
  public String getCountry() {
    return country;
  }


  public void setCountry(String country) {
    this.country = country;
  }


  public FeeRuleUpsertRequest counterparty(String counterparty) {
    
    this.counterparty = counterparty;
    return this;
  }

   /**
   * 
   * @return counterparty
  **/
  @javax.annotation.Nonnull
  public String getCounterparty() {
    return counterparty;
  }


  public void setCounterparty(String counterparty) {
    this.counterparty = counterparty;
  }


  public FeeRuleUpsertRequest transactionCurrency(String transactionCurrency) {
    
    this.transactionCurrency = transactionCurrency;
    return this;
  }

   /**
   * 
   * @return transactionCurrency
  **/
  @javax.annotation.Nonnull
  public String getTransactionCurrency() {
    return transactionCurrency;
  }


  public void setTransactionCurrency(String transactionCurrency) {
    this.transactionCurrency = transactionCurrency;
  }


  public FeeRuleUpsertRequest settlementCurrency(String settlementCurrency) {
    
    this.settlementCurrency = settlementCurrency;
    return this;
  }

   /**
   * 
   * @return settlementCurrency
  **/
  @javax.annotation.Nonnull
  public String getSettlementCurrency() {
    return settlementCurrency;
  }


  public void setSettlementCurrency(String settlementCurrency) {
    this.settlementCurrency = settlementCurrency;
  }


  public FeeRuleUpsertRequest executionBroker(String executionBroker) {
    
    this.executionBroker = executionBroker;
    return this;
  }

   /**
   * 
   * @return executionBroker
  **/
  @javax.annotation.Nonnull
  public String getExecutionBroker() {
    return executionBroker;
  }


  public void setExecutionBroker(String executionBroker) {
    this.executionBroker = executionBroker;
  }


  public FeeRuleUpsertRequest custodian(String custodian) {
    
    this.custodian = custodian;
    return this;
  }

   /**
   * 
   * @return custodian
  **/
  @javax.annotation.Nonnull
  public String getCustodian() {
    return custodian;
  }


  public void setCustodian(String custodian) {
    this.custodian = custodian;
  }


  public FeeRuleUpsertRequest exchange(String exchange) {
    
    this.exchange = exchange;
    return this;
  }

   /**
   * 
   * @return exchange
  **/
  @javax.annotation.Nonnull
  public String getExchange() {
    return exchange;
  }


  public void setExchange(String exchange) {
    this.exchange = exchange;
  }


  public FeeRuleUpsertRequest fee(CalculationInfo fee) {
    
    this.fee = fee;
    return this;
  }

   /**
   * Get fee
   * @return fee
  **/
  @javax.annotation.Nonnull
  public CalculationInfo getFee() {
    return fee;
  }


  public void setFee(CalculationInfo fee) {
    this.fee = fee;
  }


  public FeeRuleUpsertRequest minFee(CalculationInfo minFee) {
    
    this.minFee = minFee;
    return this;
  }

   /**
   * Get minFee
   * @return minFee
  **/
  @javax.annotation.Nullable
  public CalculationInfo getMinFee() {
    return minFee;
  }


  public void setMinFee(CalculationInfo minFee) {
    this.minFee = minFee;
  }


  public FeeRuleUpsertRequest maxFee(CalculationInfo maxFee) {
    
    this.maxFee = maxFee;
    return this;
  }

   /**
   * Get maxFee
   * @return maxFee
  **/
  @javax.annotation.Nullable
  public CalculationInfo getMaxFee() {
    return maxFee;
  }


  public void setMaxFee(CalculationInfo maxFee) {
    this.maxFee = maxFee;
  }


  public FeeRuleUpsertRequest additionalKeys(Map<String, String> additionalKeys) {
    
    this.additionalKeys = additionalKeys;
    return this;
  }

  public FeeRuleUpsertRequest putAdditionalKeysItem(String key, String additionalKeysItem) {
    if (this.additionalKeys == null) {
      this.additionalKeys = new HashMap<>();
    }
    this.additionalKeys.put(key, additionalKeysItem);
    return this;
  }

   /**
   * 
   * @return additionalKeys
  **/
  @javax.annotation.Nullable
  public Map<String, String> getAdditionalKeys() {
    return additionalKeys;
  }


  public void setAdditionalKeys(Map<String, String> additionalKeys) {
    this.additionalKeys = additionalKeys;
  }


  public FeeRuleUpsertRequest description(String description) {
    
    this.description = description;
    return this;
  }

   /**
   * 
   * @return description
  **/
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    this.description = description;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FeeRuleUpsertRequest feeRuleUpsertRequest = (FeeRuleUpsertRequest) o;
    return Objects.equals(this.code, feeRuleUpsertRequest.code) &&
        Objects.equals(this.transactionPropertyKey, feeRuleUpsertRequest.transactionPropertyKey) &&
        Objects.equals(this.transactionType, feeRuleUpsertRequest.transactionType) &&
        Objects.equals(this.country, feeRuleUpsertRequest.country) &&
        Objects.equals(this.counterparty, feeRuleUpsertRequest.counterparty) &&
        Objects.equals(this.transactionCurrency, feeRuleUpsertRequest.transactionCurrency) &&
        Objects.equals(this.settlementCurrency, feeRuleUpsertRequest.settlementCurrency) &&
        Objects.equals(this.executionBroker, feeRuleUpsertRequest.executionBroker) &&
        Objects.equals(this.custodian, feeRuleUpsertRequest.custodian) &&
        Objects.equals(this.exchange, feeRuleUpsertRequest.exchange) &&
        Objects.equals(this.fee, feeRuleUpsertRequest.fee) &&
        Objects.equals(this.minFee, feeRuleUpsertRequest.minFee) &&
        Objects.equals(this.maxFee, feeRuleUpsertRequest.maxFee) &&
        Objects.equals(this.additionalKeys, feeRuleUpsertRequest.additionalKeys) &&
        Objects.equals(this.description, feeRuleUpsertRequest.description);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(code, transactionPropertyKey, transactionType, country, counterparty, transactionCurrency, settlementCurrency, executionBroker, custodian, exchange, fee, minFee, maxFee, additionalKeys, description);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FeeRuleUpsertRequest {\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    transactionPropertyKey: ").append(toIndentedString(transactionPropertyKey)).append("\n");
    sb.append("    transactionType: ").append(toIndentedString(transactionType)).append("\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    counterparty: ").append(toIndentedString(counterparty)).append("\n");
    sb.append("    transactionCurrency: ").append(toIndentedString(transactionCurrency)).append("\n");
    sb.append("    settlementCurrency: ").append(toIndentedString(settlementCurrency)).append("\n");
    sb.append("    executionBroker: ").append(toIndentedString(executionBroker)).append("\n");
    sb.append("    custodian: ").append(toIndentedString(custodian)).append("\n");
    sb.append("    exchange: ").append(toIndentedString(exchange)).append("\n");
    sb.append("    fee: ").append(toIndentedString(fee)).append("\n");
    sb.append("    minFee: ").append(toIndentedString(minFee)).append("\n");
    sb.append("    maxFee: ").append(toIndentedString(maxFee)).append("\n");
    sb.append("    additionalKeys: ").append(toIndentedString(additionalKeys)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("code");
    openapiFields.add("transactionPropertyKey");
    openapiFields.add("transactionType");
    openapiFields.add("country");
    openapiFields.add("counterparty");
    openapiFields.add("transactionCurrency");
    openapiFields.add("settlementCurrency");
    openapiFields.add("executionBroker");
    openapiFields.add("custodian");
    openapiFields.add("exchange");
    openapiFields.add("fee");
    openapiFields.add("minFee");
    openapiFields.add("maxFee");
    openapiFields.add("additionalKeys");
    openapiFields.add("description");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("transactionPropertyKey");
    openapiRequiredFields.add("transactionType");
    openapiRequiredFields.add("country");
    openapiRequiredFields.add("counterparty");
    openapiRequiredFields.add("transactionCurrency");
    openapiRequiredFields.add("settlementCurrency");
    openapiRequiredFields.add("executionBroker");
    openapiRequiredFields.add("custodian");
    openapiRequiredFields.add("exchange");
    openapiRequiredFields.add("fee");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to FeeRuleUpsertRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!FeeRuleUpsertRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FeeRuleUpsertRequest is not found in the empty JSON string", FeeRuleUpsertRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!FeeRuleUpsertRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FeeRuleUpsertRequest` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : FeeRuleUpsertRequest.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("code") != null && !jsonObj.get("code").isJsonNull()) && !jsonObj.get("code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("code").toString()));
      }
      if (!jsonObj.get("transactionPropertyKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transactionPropertyKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transactionPropertyKey").toString()));
      }
      if (!jsonObj.get("transactionType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transactionType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transactionType").toString()));
      }
      if (!jsonObj.get("country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country").toString()));
      }
      if (!jsonObj.get("counterparty").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `counterparty` to be a primitive type in the JSON string but got `%s`", jsonObj.get("counterparty").toString()));
      }
      if (!jsonObj.get("transactionCurrency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transactionCurrency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transactionCurrency").toString()));
      }
      if (!jsonObj.get("settlementCurrency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `settlementCurrency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("settlementCurrency").toString()));
      }
      if (!jsonObj.get("executionBroker").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `executionBroker` to be a primitive type in the JSON string but got `%s`", jsonObj.get("executionBroker").toString()));
      }
      if (!jsonObj.get("custodian").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `custodian` to be a primitive type in the JSON string but got `%s`", jsonObj.get("custodian").toString()));
      }
      if (!jsonObj.get("exchange").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `exchange` to be a primitive type in the JSON string but got `%s`", jsonObj.get("exchange").toString()));
      }
      // validate the required field `fee`
      CalculationInfo.validateJsonObject(jsonObj.getAsJsonObject("fee"));
      // validate the optional field `minFee`
      if (jsonObj.get("minFee") != null && !jsonObj.get("minFee").isJsonNull()) {
        CalculationInfo.validateJsonObject(jsonObj.getAsJsonObject("minFee"));
      }
      // validate the optional field `maxFee`
      if (jsonObj.get("maxFee") != null && !jsonObj.get("maxFee").isJsonNull()) {
        CalculationInfo.validateJsonObject(jsonObj.getAsJsonObject("maxFee"));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FeeRuleUpsertRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FeeRuleUpsertRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FeeRuleUpsertRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FeeRuleUpsertRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<FeeRuleUpsertRequest>() {
           @Override
           public void write(JsonWriter out, FeeRuleUpsertRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FeeRuleUpsertRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of FeeRuleUpsertRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of FeeRuleUpsertRequest
  * @throws IOException if the JSON string is invalid with respect to FeeRuleUpsertRequest
  */
  public static FeeRuleUpsertRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FeeRuleUpsertRequest.class);
  }

 /**
  * Convert an instance of FeeRuleUpsertRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
