/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import com.finbourne.lusid.model.InstrumentEventConfiguration;
import com.finbourne.lusid.model.Link;
import com.finbourne.lusid.model.ResourceId;
import com.finbourne.lusid.model.StagedModificationsInfo;
import com.finbourne.lusid.model.Version;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.net.URI;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * PortfolioDetails
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class PortfolioDetails {
  public static final String SERIALIZED_NAME_HREF = "href";
  @SerializedName(SERIALIZED_NAME_HREF)
  private URI href;

  public static final String SERIALIZED_NAME_ORIGIN_PORTFOLIO_ID = "originPortfolioId";
  @SerializedName(SERIALIZED_NAME_ORIGIN_PORTFOLIO_ID)
  private ResourceId originPortfolioId;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private Version version;

  public static final String SERIALIZED_NAME_BASE_CURRENCY = "baseCurrency";
  @SerializedName(SERIALIZED_NAME_BASE_CURRENCY)
  private String baseCurrency;

  public static final String SERIALIZED_NAME_CORPORATE_ACTION_SOURCE_ID = "corporateActionSourceId";
  @SerializedName(SERIALIZED_NAME_CORPORATE_ACTION_SOURCE_ID)
  private ResourceId corporateActionSourceId;

  public static final String SERIALIZED_NAME_SUB_HOLDING_KEYS = "subHoldingKeys";
  @SerializedName(SERIALIZED_NAME_SUB_HOLDING_KEYS)
  private List<String> subHoldingKeys;

  public static final String SERIALIZED_NAME_INSTRUMENT_SCOPES = "instrumentScopes";
  @SerializedName(SERIALIZED_NAME_INSTRUMENT_SCOPES)
  private List<String> instrumentScopes;

  /**
   * . The available values are: Default, AverageCost, FirstInFirstOut, LastInFirstOut, HighestCostFirst, LowestCostFirst, ProRateByUnits, ProRateByCost, ProRateByCostPortfolioCurrency
   */
  @JsonAdapter(AccountingMethodEnum.Adapter.class)
  public enum AccountingMethodEnum {
    DEFAULT("Default"),
    
    AVERAGECOST("AverageCost"),
    
    FIRSTINFIRSTOUT("FirstInFirstOut"),
    
    LASTINFIRSTOUT("LastInFirstOut"),
    
    HIGHESTCOSTFIRST("HighestCostFirst"),
    
    LOWESTCOSTFIRST("LowestCostFirst"),
    
    PRORATEBYUNITS("ProRateByUnits"),
    
    PRORATEBYCOST("ProRateByCost"),
    
    PRORATEBYCOSTPORTFOLIOCURRENCY("ProRateByCostPortfolioCurrency");

    private String value;

    AccountingMethodEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AccountingMethodEnum fromValue(String value) {
      for (AccountingMethodEnum b : AccountingMethodEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AccountingMethodEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AccountingMethodEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AccountingMethodEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AccountingMethodEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_ACCOUNTING_METHOD = "accountingMethod";
  @SerializedName(SERIALIZED_NAME_ACCOUNTING_METHOD)
  private AccountingMethodEnum accountingMethod;

  public static final String SERIALIZED_NAME_AMORTISATION_METHOD = "amortisationMethod";
  @SerializedName(SERIALIZED_NAME_AMORTISATION_METHOD)
  private String amortisationMethod;

  public static final String SERIALIZED_NAME_TRANSACTION_TYPE_SCOPE = "transactionTypeScope";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_TYPE_SCOPE)
  private String transactionTypeScope;

  public static final String SERIALIZED_NAME_CASH_GAIN_LOSS_CALCULATION_DATE = "cashGainLossCalculationDate";
  @SerializedName(SERIALIZED_NAME_CASH_GAIN_LOSS_CALCULATION_DATE)
  private String cashGainLossCalculationDate;

  public static final String SERIALIZED_NAME_INSTRUMENT_EVENT_CONFIGURATION = "instrumentEventConfiguration";
  @SerializedName(SERIALIZED_NAME_INSTRUMENT_EVENT_CONFIGURATION)
  private InstrumentEventConfiguration instrumentEventConfiguration;

  public static final String SERIALIZED_NAME_AMORTISATION_RULE_SET_ID = "amortisationRuleSetId";
  @SerializedName(SERIALIZED_NAME_AMORTISATION_RULE_SET_ID)
  private ResourceId amortisationRuleSetId;

  public static final String SERIALIZED_NAME_STAGED_MODIFICATIONS = "stagedModifications";
  @SerializedName(SERIALIZED_NAME_STAGED_MODIFICATIONS)
  private StagedModificationsInfo stagedModifications;

  public static final String SERIALIZED_NAME_LINKS = "links";
  @SerializedName(SERIALIZED_NAME_LINKS)
  private List<Link> links;

  public PortfolioDetails() {
  }

  public PortfolioDetails href(URI href) {
    
    this.href = href;
    return this;
  }

   /**
   * The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.
   * @return href
  **/
  @jakarta.annotation.Nullable
  public URI getHref() {
    return href;
  }


  public void setHref(URI href) {
    this.href = href;
  }


  public PortfolioDetails originPortfolioId(ResourceId originPortfolioId) {
    
    this.originPortfolioId = originPortfolioId;
    return this;
  }

   /**
   * Get originPortfolioId
   * @return originPortfolioId
  **/
  @jakarta.annotation.Nonnull
  public ResourceId getOriginPortfolioId() {
    return originPortfolioId;
  }


  public void setOriginPortfolioId(ResourceId originPortfolioId) {
    this.originPortfolioId = originPortfolioId;
  }


  public PortfolioDetails version(Version version) {
    
    this.version = version;
    return this;
  }

   /**
   * Get version
   * @return version
  **/
  @jakarta.annotation.Nonnull
  public Version getVersion() {
    return version;
  }


  public void setVersion(Version version) {
    this.version = version;
  }


  public PortfolioDetails baseCurrency(String baseCurrency) {
    
    this.baseCurrency = baseCurrency;
    return this;
  }

   /**
   * The base currency of the transaction portfolio.
   * @return baseCurrency
  **/
  @jakarta.annotation.Nonnull
  public String getBaseCurrency() {
    return baseCurrency;
  }


  public void setBaseCurrency(String baseCurrency) {
    this.baseCurrency = baseCurrency;
  }


  public PortfolioDetails corporateActionSourceId(ResourceId corporateActionSourceId) {
    
    this.corporateActionSourceId = corporateActionSourceId;
    return this;
  }

   /**
   * Get corporateActionSourceId
   * @return corporateActionSourceId
  **/
  @jakarta.annotation.Nullable
  public ResourceId getCorporateActionSourceId() {
    return corporateActionSourceId;
  }


  public void setCorporateActionSourceId(ResourceId corporateActionSourceId) {
    this.corporateActionSourceId = corporateActionSourceId;
  }


  public PortfolioDetails subHoldingKeys(List<String> subHoldingKeys) {
    
    this.subHoldingKeys = subHoldingKeys;
    return this;
  }

  public PortfolioDetails addSubHoldingKeysItem(String subHoldingKeysItem) {
    if (this.subHoldingKeys == null) {
      this.subHoldingKeys = new ArrayList<>();
    }
    this.subHoldingKeys.add(subHoldingKeysItem);
    return this;
  }

   /**
   * Get subHoldingKeys
   * @return subHoldingKeys
  **/
  @jakarta.annotation.Nullable
  public List<String> getSubHoldingKeys() {
    return subHoldingKeys;
  }


  public void setSubHoldingKeys(List<String> subHoldingKeys) {
    this.subHoldingKeys = subHoldingKeys;
  }


  public PortfolioDetails instrumentScopes(List<String> instrumentScopes) {
    
    this.instrumentScopes = instrumentScopes;
    return this;
  }

  public PortfolioDetails addInstrumentScopesItem(String instrumentScopesItem) {
    if (this.instrumentScopes == null) {
      this.instrumentScopes = new ArrayList<>();
    }
    this.instrumentScopes.add(instrumentScopesItem);
    return this;
  }

   /**
   * The resolution strategy used to resolve instruments of transactions/holdings upserted to the transaction portfolio.
   * @return instrumentScopes
  **/
  @jakarta.annotation.Nullable
  public List<String> getInstrumentScopes() {
    return instrumentScopes;
  }


  public void setInstrumentScopes(List<String> instrumentScopes) {
    this.instrumentScopes = instrumentScopes;
  }


  public PortfolioDetails accountingMethod(AccountingMethodEnum accountingMethod) {
    
    this.accountingMethod = accountingMethod;
    return this;
  }

   /**
   * . The available values are: Default, AverageCost, FirstInFirstOut, LastInFirstOut, HighestCostFirst, LowestCostFirst, ProRateByUnits, ProRateByCost, ProRateByCostPortfolioCurrency
   * @return accountingMethod
  **/
  @jakarta.annotation.Nullable
  public AccountingMethodEnum getAccountingMethod() {
    return accountingMethod;
  }


  public void setAccountingMethod(AccountingMethodEnum accountingMethod) {
    this.accountingMethod = accountingMethod;
  }


  public PortfolioDetails amortisationMethod(String amortisationMethod) {
    
    this.amortisationMethod = amortisationMethod;
    return this;
  }

   /**
   * The amortisation method used by the portfolio for the calculation. The available values are: NoAmortisation, StraightLine, EffectiveYield, StraightLineSettlementDate, EffectiveYieldSettlementDate
   * @return amortisationMethod
  **/
  @jakarta.annotation.Nullable
  public String getAmortisationMethod() {
    return amortisationMethod;
  }


  public void setAmortisationMethod(String amortisationMethod) {
    this.amortisationMethod = amortisationMethod;
  }


  public PortfolioDetails transactionTypeScope(String transactionTypeScope) {
    
    this.transactionTypeScope = transactionTypeScope;
    return this;
  }

   /**
   * The scope of the transaction types.
   * @return transactionTypeScope
  **/
  @jakarta.annotation.Nullable
  public String getTransactionTypeScope() {
    return transactionTypeScope;
  }


  public void setTransactionTypeScope(String transactionTypeScope) {
    this.transactionTypeScope = transactionTypeScope;
  }


  public PortfolioDetails cashGainLossCalculationDate(String cashGainLossCalculationDate) {
    
    this.cashGainLossCalculationDate = cashGainLossCalculationDate;
    return this;
  }

   /**
   * The option when the Cash Gain Loss to be calulated, TransactionDate/SettlementDate. Defaults to SettlementDate.
   * @return cashGainLossCalculationDate
  **/
  @jakarta.annotation.Nullable
  public String getCashGainLossCalculationDate() {
    return cashGainLossCalculationDate;
  }


  public void setCashGainLossCalculationDate(String cashGainLossCalculationDate) {
    this.cashGainLossCalculationDate = cashGainLossCalculationDate;
  }


  public PortfolioDetails instrumentEventConfiguration(InstrumentEventConfiguration instrumentEventConfiguration) {
    
    this.instrumentEventConfiguration = instrumentEventConfiguration;
    return this;
  }

   /**
   * Get instrumentEventConfiguration
   * @return instrumentEventConfiguration
  **/
  @jakarta.annotation.Nullable
  public InstrumentEventConfiguration getInstrumentEventConfiguration() {
    return instrumentEventConfiguration;
  }


  public void setInstrumentEventConfiguration(InstrumentEventConfiguration instrumentEventConfiguration) {
    this.instrumentEventConfiguration = instrumentEventConfiguration;
  }


  public PortfolioDetails amortisationRuleSetId(ResourceId amortisationRuleSetId) {
    
    this.amortisationRuleSetId = amortisationRuleSetId;
    return this;
  }

   /**
   * Get amortisationRuleSetId
   * @return amortisationRuleSetId
  **/
  @jakarta.annotation.Nullable
  public ResourceId getAmortisationRuleSetId() {
    return amortisationRuleSetId;
  }


  public void setAmortisationRuleSetId(ResourceId amortisationRuleSetId) {
    this.amortisationRuleSetId = amortisationRuleSetId;
  }


  public PortfolioDetails stagedModifications(StagedModificationsInfo stagedModifications) {
    
    this.stagedModifications = stagedModifications;
    return this;
  }

   /**
   * Get stagedModifications
   * @return stagedModifications
  **/
  @jakarta.annotation.Nullable
  public StagedModificationsInfo getStagedModifications() {
    return stagedModifications;
  }


  public void setStagedModifications(StagedModificationsInfo stagedModifications) {
    this.stagedModifications = stagedModifications;
  }


  public PortfolioDetails links(List<Link> links) {
    
    this.links = links;
    return this;
  }

  public PortfolioDetails addLinksItem(Link linksItem) {
    if (this.links == null) {
      this.links = new ArrayList<>();
    }
    this.links.add(linksItem);
    return this;
  }

   /**
   * Get links
   * @return links
  **/
  @jakarta.annotation.Nullable
  public List<Link> getLinks() {
    return links;
  }


  public void setLinks(List<Link> links) {
    this.links = links;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PortfolioDetails portfolioDetails = (PortfolioDetails) o;
    return Objects.equals(this.href, portfolioDetails.href) &&
        Objects.equals(this.originPortfolioId, portfolioDetails.originPortfolioId) &&
        Objects.equals(this.version, portfolioDetails.version) &&
        Objects.equals(this.baseCurrency, portfolioDetails.baseCurrency) &&
        Objects.equals(this.corporateActionSourceId, portfolioDetails.corporateActionSourceId) &&
        Objects.equals(this.subHoldingKeys, portfolioDetails.subHoldingKeys) &&
        Objects.equals(this.instrumentScopes, portfolioDetails.instrumentScopes) &&
        Objects.equals(this.accountingMethod, portfolioDetails.accountingMethod) &&
        Objects.equals(this.amortisationMethod, portfolioDetails.amortisationMethod) &&
        Objects.equals(this.transactionTypeScope, portfolioDetails.transactionTypeScope) &&
        Objects.equals(this.cashGainLossCalculationDate, portfolioDetails.cashGainLossCalculationDate) &&
        Objects.equals(this.instrumentEventConfiguration, portfolioDetails.instrumentEventConfiguration) &&
        Objects.equals(this.amortisationRuleSetId, portfolioDetails.amortisationRuleSetId) &&
        Objects.equals(this.stagedModifications, portfolioDetails.stagedModifications) &&
        Objects.equals(this.links, portfolioDetails.links);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(href, originPortfolioId, version, baseCurrency, corporateActionSourceId, subHoldingKeys, instrumentScopes, accountingMethod, amortisationMethod, transactionTypeScope, cashGainLossCalculationDate, instrumentEventConfiguration, amortisationRuleSetId, stagedModifications, links);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PortfolioDetails {\n");
    sb.append("    href: ").append(toIndentedString(href)).append("\n");
    sb.append("    originPortfolioId: ").append(toIndentedString(originPortfolioId)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    baseCurrency: ").append(toIndentedString(baseCurrency)).append("\n");
    sb.append("    corporateActionSourceId: ").append(toIndentedString(corporateActionSourceId)).append("\n");
    sb.append("    subHoldingKeys: ").append(toIndentedString(subHoldingKeys)).append("\n");
    sb.append("    instrumentScopes: ").append(toIndentedString(instrumentScopes)).append("\n");
    sb.append("    accountingMethod: ").append(toIndentedString(accountingMethod)).append("\n");
    sb.append("    amortisationMethod: ").append(toIndentedString(amortisationMethod)).append("\n");
    sb.append("    transactionTypeScope: ").append(toIndentedString(transactionTypeScope)).append("\n");
    sb.append("    cashGainLossCalculationDate: ").append(toIndentedString(cashGainLossCalculationDate)).append("\n");
    sb.append("    instrumentEventConfiguration: ").append(toIndentedString(instrumentEventConfiguration)).append("\n");
    sb.append("    amortisationRuleSetId: ").append(toIndentedString(amortisationRuleSetId)).append("\n");
    sb.append("    stagedModifications: ").append(toIndentedString(stagedModifications)).append("\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("href");
    openapiFields.add("originPortfolioId");
    openapiFields.add("version");
    openapiFields.add("baseCurrency");
    openapiFields.add("corporateActionSourceId");
    openapiFields.add("subHoldingKeys");
    openapiFields.add("instrumentScopes");
    openapiFields.add("accountingMethod");
    openapiFields.add("amortisationMethod");
    openapiFields.add("transactionTypeScope");
    openapiFields.add("cashGainLossCalculationDate");
    openapiFields.add("instrumentEventConfiguration");
    openapiFields.add("amortisationRuleSetId");
    openapiFields.add("stagedModifications");
    openapiFields.add("links");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("originPortfolioId");
    openapiRequiredFields.add("version");
    openapiRequiredFields.add("baseCurrency");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to PortfolioDetails
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PortfolioDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PortfolioDetails is not found in the empty JSON string", PortfolioDetails.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PortfolioDetails.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("href") != null && !jsonObj.get("href").isJsonNull()) && !jsonObj.get("href").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `href` to be a primitive type in the JSON string but got `%s`", jsonObj.get("href").toString()));
      }
      // validate the required field `originPortfolioId`
      ResourceId.validateJsonElement(jsonObj.get("originPortfolioId"));
      // validate the required field `version`
      Version.validateJsonElement(jsonObj.get("version"));
      if (!jsonObj.get("baseCurrency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `baseCurrency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("baseCurrency").toString()));
      }
      // validate the optional field `corporateActionSourceId`
      if (jsonObj.get("corporateActionSourceId") != null && !jsonObj.get("corporateActionSourceId").isJsonNull()) {
        ResourceId.validateJsonElement(jsonObj.get("corporateActionSourceId"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("subHoldingKeys") != null && !jsonObj.get("subHoldingKeys").isJsonNull() && !jsonObj.get("subHoldingKeys").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `subHoldingKeys` to be an array in the JSON string but got `%s`", jsonObj.get("subHoldingKeys").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("instrumentScopes") != null && !jsonObj.get("instrumentScopes").isJsonNull() && !jsonObj.get("instrumentScopes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `instrumentScopes` to be an array in the JSON string but got `%s`", jsonObj.get("instrumentScopes").toString()));
      }
      if ((jsonObj.get("accountingMethod") != null && !jsonObj.get("accountingMethod").isJsonNull()) && !jsonObj.get("accountingMethod").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountingMethod` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountingMethod").toString()));
      }
      if ((jsonObj.get("amortisationMethod") != null && !jsonObj.get("amortisationMethod").isJsonNull()) && !jsonObj.get("amortisationMethod").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `amortisationMethod` to be a primitive type in the JSON string but got `%s`", jsonObj.get("amortisationMethod").toString()));
      }
      if ((jsonObj.get("transactionTypeScope") != null && !jsonObj.get("transactionTypeScope").isJsonNull()) && !jsonObj.get("transactionTypeScope").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transactionTypeScope` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transactionTypeScope").toString()));
      }
      if ((jsonObj.get("cashGainLossCalculationDate") != null && !jsonObj.get("cashGainLossCalculationDate").isJsonNull()) && !jsonObj.get("cashGainLossCalculationDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cashGainLossCalculationDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cashGainLossCalculationDate").toString()));
      }
      // validate the optional field `instrumentEventConfiguration`
      if (jsonObj.get("instrumentEventConfiguration") != null && !jsonObj.get("instrumentEventConfiguration").isJsonNull()) {
        InstrumentEventConfiguration.validateJsonElement(jsonObj.get("instrumentEventConfiguration"));
      }
      // validate the optional field `amortisationRuleSetId`
      if (jsonObj.get("amortisationRuleSetId") != null && !jsonObj.get("amortisationRuleSetId").isJsonNull()) {
        ResourceId.validateJsonElement(jsonObj.get("amortisationRuleSetId"));
      }
      // validate the optional field `stagedModifications`
      if (jsonObj.get("stagedModifications") != null && !jsonObj.get("stagedModifications").isJsonNull()) {
        StagedModificationsInfo.validateJsonElement(jsonObj.get("stagedModifications"));
      }
      if (jsonObj.get("links") != null && !jsonObj.get("links").isJsonNull()) {
        JsonArray jsonArraylinks = jsonObj.getAsJsonArray("links");
        if (jsonArraylinks != null) {
          // ensure the json data is an array
          if (!jsonObj.get("links").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `links` to be an array in the JSON string but got `%s`", jsonObj.get("links").toString()));
          }

          // validate the optional field `links` (array)
          for (int i = 0; i < jsonArraylinks.size(); i++) {
            Link.validateJsonElement(jsonArraylinks.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PortfolioDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PortfolioDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PortfolioDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PortfolioDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<PortfolioDetails>() {
           @Override
           public void write(JsonWriter out, PortfolioDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PortfolioDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PortfolioDetails given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PortfolioDetails
  * @throws IOException if the JSON string is invalid with respect to PortfolioDetails
  */
  public static PortfolioDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PortfolioDetails.class);
  }

 /**
  * Convert an instance of PortfolioDetails to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
