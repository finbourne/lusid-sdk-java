/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import com.finbourne.lusid.model.FloatingLeg;
import com.finbourne.lusid.model.LusidInstrument;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * LUSID representation of Cap, Floor, or Collar.
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class CapFloor extends LusidInstrument {
  public static final String SERIALIZED_NAME_CAP_FLOOR_TYPE = "capFloorType";
  @SerializedName(SERIALIZED_NAME_CAP_FLOOR_TYPE)
  private String capFloorType;

  public static final String SERIALIZED_NAME_CAP_STRIKE = "capStrike";
  @SerializedName(SERIALIZED_NAME_CAP_STRIKE)
  private java.math.BigDecimal capStrike;

  public static final String SERIALIZED_NAME_FLOOR_STRIKE = "floorStrike";
  @SerializedName(SERIALIZED_NAME_FLOOR_STRIKE)
  private java.math.BigDecimal floorStrike;

  public static final String SERIALIZED_NAME_INCLUDE_FIRST_CAPLET = "includeFirstCaplet";
  @SerializedName(SERIALIZED_NAME_INCLUDE_FIRST_CAPLET)
  private Boolean includeFirstCaplet;

  public static final String SERIALIZED_NAME_UNDERLYING_FLOATING_LEG = "underlyingFloatingLeg";
  @SerializedName(SERIALIZED_NAME_UNDERLYING_FLOATING_LEG)
  private FloatingLeg underlyingFloatingLeg;

  public CapFloor() {
    // this.instrumentType = this.getClass().getSimpleName();
  }

  public CapFloor capFloorType(String capFloorType) {
    
    this.capFloorType = capFloorType;
    return this;
  }

   /**
   * Determine if it&#39;s CAP, FLOOR, or COLLAR.    Supported string (enumeration) values are: [Cap, Floor, Collar].
   * @return capFloorType
  **/
  @jakarta.annotation.Nonnull
  public String getCapFloorType() {
    return capFloorType;
  }


  public void setCapFloorType(String capFloorType) {
    this.capFloorType = capFloorType;
  }


  public CapFloor capStrike(java.math.BigDecimal capStrike) {
    
    this.capStrike = capStrike;
    return this;
  }

   /**
   * Strike rate of the Cap.
   * @return capStrike
  **/
  @jakarta.annotation.Nullable
  public java.math.BigDecimal getCapStrike() {
    return capStrike;
  }


  public void setCapStrike(java.math.BigDecimal capStrike) {
    this.capStrike = capStrike;
  }


  public CapFloor floorStrike(java.math.BigDecimal floorStrike) {
    
    this.floorStrike = floorStrike;
    return this;
  }

   /**
   * Strike rate of the Floor.
   * @return floorStrike
  **/
  @jakarta.annotation.Nullable
  public java.math.BigDecimal getFloorStrike() {
    return floorStrike;
  }


  public void setFloorStrike(java.math.BigDecimal floorStrike) {
    this.floorStrike = floorStrike;
  }


  public CapFloor includeFirstCaplet(Boolean includeFirstCaplet) {
    
    this.includeFirstCaplet = includeFirstCaplet;
    return this;
  }

   /**
   * Include first caplet flag.
   * @return includeFirstCaplet
  **/
  @jakarta.annotation.Nonnull
  public Boolean getIncludeFirstCaplet() {
    return includeFirstCaplet;
  }


  public void setIncludeFirstCaplet(Boolean includeFirstCaplet) {
    this.includeFirstCaplet = includeFirstCaplet;
  }


  public CapFloor underlyingFloatingLeg(FloatingLeg underlyingFloatingLeg) {
    
    this.underlyingFloatingLeg = underlyingFloatingLeg;
    return this;
  }

   /**
   * Get underlyingFloatingLeg
   * @return underlyingFloatingLeg
  **/
  @jakarta.annotation.Nonnull
  public FloatingLeg getUnderlyingFloatingLeg() {
    return underlyingFloatingLeg;
  }


  public void setUnderlyingFloatingLeg(FloatingLeg underlyingFloatingLeg) {
    this.underlyingFloatingLeg = underlyingFloatingLeg;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CapFloor capFloor = (CapFloor) o;
    return Objects.equals(this.capFloorType, capFloor.capFloorType) &&
        (this.capStrike.compareTo(capFloor.getCapStrike()) == 0) &&
        (this.floorStrike.compareTo(capFloor.getFloorStrike()) == 0) &&
        Objects.equals(this.includeFirstCaplet, capFloor.includeFirstCaplet) &&
        Objects.equals(this.underlyingFloatingLeg, capFloor.underlyingFloatingLeg) &&
        super.equals(o);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(capFloorType, capStrike, floorStrike, includeFirstCaplet, underlyingFloatingLeg, super.hashCode());
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CapFloor {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    capFloorType: ").append(toIndentedString(capFloorType)).append("\n");
    sb.append("    capStrike: ").append(toIndentedString(capStrike)).append("\n");
    sb.append("    floorStrike: ").append(toIndentedString(floorStrike)).append("\n");
    sb.append("    includeFirstCaplet: ").append(toIndentedString(includeFirstCaplet)).append("\n");
    sb.append("    underlyingFloatingLeg: ").append(toIndentedString(underlyingFloatingLeg)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("instrumentType");
    openapiFields.add("capFloorType");
    openapiFields.add("capStrike");
    openapiFields.add("floorStrike");
    openapiFields.add("includeFirstCaplet");
    openapiFields.add("underlyingFloatingLeg");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("capFloorType");
    openapiRequiredFields.add("includeFirstCaplet");
    openapiRequiredFields.add("underlyingFloatingLeg");
    openapiRequiredFields.add("instrumentType");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to CapFloor
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CapFloor.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CapFloor is not found in the empty JSON string", CapFloor.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CapFloor.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CapFloor.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CapFloor' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CapFloor> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CapFloor.class));

       return (TypeAdapter<T>) new TypeAdapter<CapFloor>() {
           @Override
           public void write(JsonWriter out, CapFloor value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CapFloor read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CapFloor given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CapFloor
  * @throws IOException if the JSON string is invalid with respect to CapFloor
  */
  public static CapFloor fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CapFloor.class);
  }

 /**
  * Convert an instance of CapFloor to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
