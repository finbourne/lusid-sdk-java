/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import com.finbourne.lusid.model.AggregateSpec;
import com.finbourne.lusid.model.ReconciliationRule;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * Comparison of date time values
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ReconcileDateTimeRule extends ReconciliationRule {
  /**
   * The available values are: Exact, AbsoluteDifference
   */
  @JsonAdapter(ComparisonTypeEnum.Adapter.class)
  public enum ComparisonTypeEnum {
    EXACT("Exact"),
    
    ABSOLUTEDIFFERENCE("AbsoluteDifference");

    private String value;

    ComparisonTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ComparisonTypeEnum fromValue(String value) {
      for (ComparisonTypeEnum b : ComparisonTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ComparisonTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ComparisonTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ComparisonTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ComparisonTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_COMPARISON_TYPE = "comparisonType";
  @SerializedName(SERIALIZED_NAME_COMPARISON_TYPE)
  private ComparisonTypeEnum comparisonType;

  public static final String SERIALIZED_NAME_TOLERANCE = "tolerance";
  @SerializedName(SERIALIZED_NAME_TOLERANCE)
  private java.math.BigDecimal tolerance;

  public static final String SERIALIZED_NAME_APPLIES_TO = "appliesTo";
  @SerializedName(SERIALIZED_NAME_APPLIES_TO)
  private AggregateSpec appliesTo;

  public ReconcileDateTimeRule() {
    // this.ruleType = this.getClass().getSimpleName();
  }

  public ReconcileDateTimeRule comparisonType(ComparisonTypeEnum comparisonType) {
    
    this.comparisonType = comparisonType;
    return this;
  }

   /**
   * The available values are: Exact, AbsoluteDifference
   * @return comparisonType
  **/
  @jakarta.annotation.Nonnull
  public ComparisonTypeEnum getComparisonType() {
    return comparisonType;
  }


  public void setComparisonType(ComparisonTypeEnum comparisonType) {
    this.comparisonType = comparisonType;
  }


  public ReconcileDateTimeRule tolerance(java.math.BigDecimal tolerance) {
    
    this.tolerance = tolerance;
    return this;
  }

   /**
   * For a numeric type only (i.e. decimal, integer, date or datetime offset possibly controversially), this is the quantity used in the comparison. The units of the tolerance must be set appropriately for the item being compared. For a number such as a currency or amount that will be a simple quantity, for a DateTime or DateTimeOffset it should be days. If fewer than a single day then this should be passed as a fraction.
   * @return tolerance
  **/
  @jakarta.annotation.Nullable
  public java.math.BigDecimal getTolerance() {
    return tolerance;
  }


  public void setTolerance(java.math.BigDecimal tolerance) {
    this.tolerance = tolerance;
  }


  public ReconcileDateTimeRule appliesTo(AggregateSpec appliesTo) {
    
    this.appliesTo = appliesTo;
    return this;
  }

   /**
   * Get appliesTo
   * @return appliesTo
  **/
  @jakarta.annotation.Nonnull
  public AggregateSpec getAppliesTo() {
    return appliesTo;
  }


  public void setAppliesTo(AggregateSpec appliesTo) {
    this.appliesTo = appliesTo;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReconcileDateTimeRule reconcileDateTimeRule = (ReconcileDateTimeRule) o;
    return Objects.equals(this.comparisonType, reconcileDateTimeRule.comparisonType) &&
        (this.tolerance.compareTo(reconcileDateTimeRule.getTolerance()) == 0) &&
        Objects.equals(this.appliesTo, reconcileDateTimeRule.appliesTo) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(comparisonType, tolerance, appliesTo, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReconcileDateTimeRule {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    comparisonType: ").append(toIndentedString(comparisonType)).append("\n");
    sb.append("    tolerance: ").append(toIndentedString(tolerance)).append("\n");
    sb.append("    appliesTo: ").append(toIndentedString(appliesTo)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ruleType");
    openapiFields.add("comparisonType");
    openapiFields.add("tolerance");
    openapiFields.add("appliesTo");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("comparisonType");
    openapiRequiredFields.add("appliesTo");
    openapiRequiredFields.add("ruleType");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ReconcileDateTimeRule
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ReconcileDateTimeRule.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReconcileDateTimeRule is not found in the empty JSON string", ReconcileDateTimeRule.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ReconcileDateTimeRule.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReconcileDateTimeRule.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReconcileDateTimeRule' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReconcileDateTimeRule> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReconcileDateTimeRule.class));

       return (TypeAdapter<T>) new TypeAdapter<ReconcileDateTimeRule>() {
           @Override
           public void write(JsonWriter out, ReconcileDateTimeRule value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ReconcileDateTimeRule read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ReconcileDateTimeRule given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ReconcileDateTimeRule
  * @throws IOException if the JSON string is invalid with respect to ReconcileDateTimeRule
  */
  public static ReconcileDateTimeRule fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReconcileDateTimeRule.class);
  }

 /**
  * Convert an instance of ReconcileDateTimeRule to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
