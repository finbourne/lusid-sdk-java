/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import com.finbourne.lusid.model.ResourceId;
import com.finbourne.lusid.model.Version;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.net.URI;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * An instruction for an instrument event
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class InstrumentEventInstruction {
  public static final String SERIALIZED_NAME_INSTRUMENT_EVENT_INSTRUCTION_ID = "instrumentEventInstructionId";
  @SerializedName(SERIALIZED_NAME_INSTRUMENT_EVENT_INSTRUCTION_ID)
  private String instrumentEventInstructionId;

  public static final String SERIALIZED_NAME_PORTFOLIO_ID = "portfolioId";
  @SerializedName(SERIALIZED_NAME_PORTFOLIO_ID)
  private ResourceId portfolioId;

  public static final String SERIALIZED_NAME_INSTRUMENT_EVENT_ID = "instrumentEventId";
  @SerializedName(SERIALIZED_NAME_INSTRUMENT_EVENT_ID)
  private String instrumentEventId;

  public static final String SERIALIZED_NAME_INSTRUCTION_TYPE = "instructionType";
  @SerializedName(SERIALIZED_NAME_INSTRUCTION_TYPE)
  private String instructionType;

  public static final String SERIALIZED_NAME_ELECTION_KEY = "electionKey";
  @SerializedName(SERIALIZED_NAME_ELECTION_KEY)
  private String electionKey;

  public static final String SERIALIZED_NAME_HOLDING_ID = "holdingId";
  @SerializedName(SERIALIZED_NAME_HOLDING_ID)
  private Long holdingId;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private Version version;

  public static final String SERIALIZED_NAME_HREF = "href";
  @SerializedName(SERIALIZED_NAME_HREF)
  private URI href;

  public InstrumentEventInstruction() {
  }

  public InstrumentEventInstruction instrumentEventInstructionId(String instrumentEventInstructionId) {
    
    this.instrumentEventInstructionId = instrumentEventInstructionId;
    return this;
  }

   /**
   * The unique identifier for this instruction
   * @return instrumentEventInstructionId
  **/
  @jakarta.annotation.Nullable
  public String getInstrumentEventInstructionId() {
    return instrumentEventInstructionId;
  }


  public void setInstrumentEventInstructionId(String instrumentEventInstructionId) {
    this.instrumentEventInstructionId = instrumentEventInstructionId;
  }


  public InstrumentEventInstruction portfolioId(ResourceId portfolioId) {
    
    this.portfolioId = portfolioId;
    return this;
  }

   /**
   * Get portfolioId
   * @return portfolioId
  **/
  @jakarta.annotation.Nullable
  public ResourceId getPortfolioId() {
    return portfolioId;
  }


  public void setPortfolioId(ResourceId portfolioId) {
    this.portfolioId = portfolioId;
  }


  public InstrumentEventInstruction instrumentEventId(String instrumentEventId) {
    
    this.instrumentEventId = instrumentEventId;
    return this;
  }

   /**
   * The identifier of the instrument event being instructed
   * @return instrumentEventId
  **/
  @jakarta.annotation.Nullable
  public String getInstrumentEventId() {
    return instrumentEventId;
  }


  public void setInstrumentEventId(String instrumentEventId) {
    this.instrumentEventId = instrumentEventId;
  }


  public InstrumentEventInstruction instructionType(String instructionType) {
    
    this.instructionType = instructionType;
    return this;
  }

   /**
   * The type of instruction (Ignore, ElectForPortfolio, ElectForHolding)
   * @return instructionType
  **/
  @jakarta.annotation.Nullable
  public String getInstructionType() {
    return instructionType;
  }


  public void setInstructionType(String instructionType) {
    this.instructionType = instructionType;
  }


  public InstrumentEventInstruction electionKey(String electionKey) {
    
    this.electionKey = electionKey;
    return this;
  }

   /**
   * For elected instructions, the key to be chosen
   * @return electionKey
  **/
  @jakarta.annotation.Nullable
  public String getElectionKey() {
    return electionKey;
  }


  public void setElectionKey(String electionKey) {
    this.electionKey = electionKey;
  }


  public InstrumentEventInstruction holdingId(Long holdingId) {
    
    this.holdingId = holdingId;
    return this;
  }

   /**
   * For holding instructions, the id of the holding for which the instruction will apply
   * @return holdingId
  **/
  @jakarta.annotation.Nullable
  public Long getHoldingId() {
    return holdingId;
  }


  public void setHoldingId(Long holdingId) {
    this.holdingId = holdingId;
  }


  public InstrumentEventInstruction version(Version version) {
    
    this.version = version;
    return this;
  }

   /**
   * Get version
   * @return version
  **/
  @jakarta.annotation.Nullable
  public Version getVersion() {
    return version;
  }


  public void setVersion(Version version) {
    this.version = version;
  }


  public InstrumentEventInstruction href(URI href) {
    
    this.href = href;
    return this;
  }

   /**
   * The uri for this version of this instruction
   * @return href
  **/
  @jakarta.annotation.Nullable
  public URI getHref() {
    return href;
  }


  public void setHref(URI href) {
    this.href = href;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InstrumentEventInstruction instrumentEventInstruction = (InstrumentEventInstruction) o;
    return Objects.equals(this.instrumentEventInstructionId, instrumentEventInstruction.instrumentEventInstructionId) &&
        Objects.equals(this.portfolioId, instrumentEventInstruction.portfolioId) &&
        Objects.equals(this.instrumentEventId, instrumentEventInstruction.instrumentEventId) &&
        Objects.equals(this.instructionType, instrumentEventInstruction.instructionType) &&
        Objects.equals(this.electionKey, instrumentEventInstruction.electionKey) &&
        Objects.equals(this.holdingId, instrumentEventInstruction.holdingId) &&
        Objects.equals(this.version, instrumentEventInstruction.version) &&
        Objects.equals(this.href, instrumentEventInstruction.href);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(instrumentEventInstructionId, portfolioId, instrumentEventId, instructionType, electionKey, holdingId, version, href);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InstrumentEventInstruction {\n");
    sb.append("    instrumentEventInstructionId: ").append(toIndentedString(instrumentEventInstructionId)).append("\n");
    sb.append("    portfolioId: ").append(toIndentedString(portfolioId)).append("\n");
    sb.append("    instrumentEventId: ").append(toIndentedString(instrumentEventId)).append("\n");
    sb.append("    instructionType: ").append(toIndentedString(instructionType)).append("\n");
    sb.append("    electionKey: ").append(toIndentedString(electionKey)).append("\n");
    sb.append("    holdingId: ").append(toIndentedString(holdingId)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    href: ").append(toIndentedString(href)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("instrumentEventInstructionId");
    openapiFields.add("portfolioId");
    openapiFields.add("instrumentEventId");
    openapiFields.add("instructionType");
    openapiFields.add("electionKey");
    openapiFields.add("holdingId");
    openapiFields.add("version");
    openapiFields.add("href");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to InstrumentEventInstruction
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!InstrumentEventInstruction.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InstrumentEventInstruction is not found in the empty JSON string", InstrumentEventInstruction.openapiRequiredFields.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("instrumentEventInstructionId") != null && !jsonObj.get("instrumentEventInstructionId").isJsonNull()) && !jsonObj.get("instrumentEventInstructionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `instrumentEventInstructionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("instrumentEventInstructionId").toString()));
      }
      // validate the optional field `portfolioId`
      if (jsonObj.get("portfolioId") != null && !jsonObj.get("portfolioId").isJsonNull()) {
        ResourceId.validateJsonElement(jsonObj.get("portfolioId"));
      }
      if ((jsonObj.get("instrumentEventId") != null && !jsonObj.get("instrumentEventId").isJsonNull()) && !jsonObj.get("instrumentEventId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `instrumentEventId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("instrumentEventId").toString()));
      }
      if ((jsonObj.get("instructionType") != null && !jsonObj.get("instructionType").isJsonNull()) && !jsonObj.get("instructionType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `instructionType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("instructionType").toString()));
      }
      if ((jsonObj.get("electionKey") != null && !jsonObj.get("electionKey").isJsonNull()) && !jsonObj.get("electionKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `electionKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("electionKey").toString()));
      }
      // validate the optional field `version`
      if (jsonObj.get("version") != null && !jsonObj.get("version").isJsonNull()) {
        Version.validateJsonElement(jsonObj.get("version"));
      }
      if ((jsonObj.get("href") != null && !jsonObj.get("href").isJsonNull()) && !jsonObj.get("href").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `href` to be a primitive type in the JSON string but got `%s`", jsonObj.get("href").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InstrumentEventInstruction.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InstrumentEventInstruction' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InstrumentEventInstruction> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InstrumentEventInstruction.class));

       return (TypeAdapter<T>) new TypeAdapter<InstrumentEventInstruction>() {
           @Override
           public void write(JsonWriter out, InstrumentEventInstruction value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InstrumentEventInstruction read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of InstrumentEventInstruction given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of InstrumentEventInstruction
  * @throws IOException if the JSON string is invalid with respect to InstrumentEventInstruction
  */
  public static InstrumentEventInstruction fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InstrumentEventInstruction.class);
  }

 /**
  * Convert an instance of InstrumentEventInstruction to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
