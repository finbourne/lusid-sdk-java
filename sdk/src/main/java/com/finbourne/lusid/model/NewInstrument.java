/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * Set of identifiers of an existing instrument that will be the subject of a SpinOffEvent.
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class NewInstrument {
  public static final String SERIALIZED_NAME_INSTRUMENT_IDENTIFIERS = "instrumentIdentifiers";
  @SerializedName(SERIALIZED_NAME_INSTRUMENT_IDENTIFIERS)
  private Map<String, String> instrumentIdentifiers = new HashMap<>();

  public static final String SERIALIZED_NAME_LUSID_INSTRUMENT_ID = "lusidInstrumentId";
  @SerializedName(SERIALIZED_NAME_LUSID_INSTRUMENT_ID)
  private String lusidInstrumentId;

  public static final String SERIALIZED_NAME_INSTRUMENT_SCOPE = "instrumentScope";
  @SerializedName(SERIALIZED_NAME_INSTRUMENT_SCOPE)
  private String instrumentScope;

  public static final String SERIALIZED_NAME_DOM_CCY = "domCcy";
  @SerializedName(SERIALIZED_NAME_DOM_CCY)
  private String domCcy;

  public NewInstrument() {
  }

  
  public NewInstrument(
     String lusidInstrumentId, 
     String instrumentScope, 
     String domCcy
  ) {
    this();
    this.lusidInstrumentId = lusidInstrumentId;
    this.instrumentScope = instrumentScope;
    this.domCcy = domCcy;
  }

  public NewInstrument instrumentIdentifiers(Map<String, String> instrumentIdentifiers) {
    
    this.instrumentIdentifiers = instrumentIdentifiers;
    return this;
  }

  public NewInstrument putInstrumentIdentifiersItem(String key, String instrumentIdentifiersItem) {
    if (this.instrumentIdentifiers == null) {
      this.instrumentIdentifiers = new HashMap<>();
    }
    this.instrumentIdentifiers.put(key, instrumentIdentifiersItem);
    return this;
  }

   /**
   * Unique instrument identifiers.
   * @return instrumentIdentifiers
  **/
  @jakarta.annotation.Nonnull
  public Map<String, String> getInstrumentIdentifiers() {
    return instrumentIdentifiers;
  }


  public void setInstrumentIdentifiers(Map<String, String> instrumentIdentifiers) {
    this.instrumentIdentifiers = instrumentIdentifiers;
  }


   /**
   * LUSID&#39;s internal unique instrument identifier, resolved from the instrument identifiers.
   * @return lusidInstrumentId
  **/
  @jakarta.annotation.Nullable
  public String getLusidInstrumentId() {
    return lusidInstrumentId;
  }




   /**
   * The scope in which the instrument lies, resolved from the instrument identifiers.
   * @return instrumentScope
  **/
  @jakarta.annotation.Nullable
  public String getInstrumentScope() {
    return instrumentScope;
  }




   /**
   * The domestic currency of the instrument, resolved from the instrument identifiers.
   * @return domCcy
  **/
  @jakarta.annotation.Nullable
  public String getDomCcy() {
    return domCcy;
  }





  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NewInstrument newInstrument = (NewInstrument) o;
    return Objects.equals(this.instrumentIdentifiers, newInstrument.instrumentIdentifiers) &&
        Objects.equals(this.lusidInstrumentId, newInstrument.lusidInstrumentId) &&
        Objects.equals(this.instrumentScope, newInstrument.instrumentScope) &&
        Objects.equals(this.domCcy, newInstrument.domCcy);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(instrumentIdentifiers, lusidInstrumentId, instrumentScope, domCcy);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NewInstrument {\n");
    sb.append("    instrumentIdentifiers: ").append(toIndentedString(instrumentIdentifiers)).append("\n");
    sb.append("    lusidInstrumentId: ").append(toIndentedString(lusidInstrumentId)).append("\n");
    sb.append("    instrumentScope: ").append(toIndentedString(instrumentScope)).append("\n");
    sb.append("    domCcy: ").append(toIndentedString(domCcy)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("instrumentIdentifiers");
    openapiFields.add("lusidInstrumentId");
    openapiFields.add("instrumentScope");
    openapiFields.add("domCcy");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("instrumentIdentifiers");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to NewInstrument
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NewInstrument.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NewInstrument is not found in the empty JSON string", NewInstrument.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : NewInstrument.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("lusidInstrumentId") != null && !jsonObj.get("lusidInstrumentId").isJsonNull()) && !jsonObj.get("lusidInstrumentId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lusidInstrumentId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lusidInstrumentId").toString()));
      }
      if ((jsonObj.get("instrumentScope") != null && !jsonObj.get("instrumentScope").isJsonNull()) && !jsonObj.get("instrumentScope").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `instrumentScope` to be a primitive type in the JSON string but got `%s`", jsonObj.get("instrumentScope").toString()));
      }
      if ((jsonObj.get("domCcy") != null && !jsonObj.get("domCcy").isJsonNull()) && !jsonObj.get("domCcy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `domCcy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("domCcy").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NewInstrument.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NewInstrument' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NewInstrument> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NewInstrument.class));

       return (TypeAdapter<T>) new TypeAdapter<NewInstrument>() {
           @Override
           public void write(JsonWriter out, NewInstrument value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NewInstrument read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of NewInstrument given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of NewInstrument
  * @throws IOException if the JSON string is invalid with respect to NewInstrument
  */
  public static NewInstrument fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NewInstrument.class);
  }

 /**
  * Convert an instance of NewInstrument to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
