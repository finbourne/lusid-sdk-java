/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import java.util.Arrays;
import com.finbourne.lusid.model.ReconciliationId;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * ReconciliationRunId
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ReconciliationRunId {
  public static final String SERIALIZED_NAME_RECONCILIATION = "reconciliation";
  @SerializedName(SERIALIZED_NAME_RECONCILIATION)
  private ReconciliationId reconciliation;

  public static final String SERIALIZED_NAME_DATE = "date";
  @SerializedName(SERIALIZED_NAME_DATE)
  private OffsetDateTime date;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private Integer version;

  public static final String SERIALIZED_NAME_AS_STRING = "asString";
  @SerializedName(SERIALIZED_NAME_AS_STRING)
  private String asString;

  public ReconciliationRunId() {
  }

  
  public ReconciliationRunId(
     String asString
  ) {
    this();
    this.asString = asString;
  }

  public ReconciliationRunId reconciliation(ReconciliationId reconciliation) {
    
    this.reconciliation = reconciliation;
    return this;
  }

   /**
   * Get reconciliation
   * @return reconciliation
  **/
  @javax.annotation.Nullable
  public ReconciliationId getReconciliation() {
    return reconciliation;
  }


  public void setReconciliation(ReconciliationId reconciliation) {
    this.reconciliation = reconciliation;
  }


  public ReconciliationRunId date(OffsetDateTime date) {
    
    this.date = date;
    return this;
  }

   /**
   * Get date
   * @return date
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getDate() {
    return date;
  }


  public void setDate(OffsetDateTime date) {
    this.date = date;
  }


  public ReconciliationRunId version(Integer version) {
    
    this.version = version;
    return this;
  }

   /**
   * Get version
   * @return version
  **/
  @javax.annotation.Nullable
  public Integer getVersion() {
    return version;
  }


  public void setVersion(Integer version) {
    this.version = version;
  }


   /**
   * Get asString
   * @return asString
  **/
  @javax.annotation.Nullable
  public String getAsString() {
    return asString;
  }





  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReconciliationRunId reconciliationRunId = (ReconciliationRunId) o;
    return Objects.equals(this.reconciliation, reconciliationRunId.reconciliation) &&
        Objects.equals(this.date, reconciliationRunId.date) &&
        Objects.equals(this.version, reconciliationRunId.version) &&
        Objects.equals(this.asString, reconciliationRunId.asString);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(reconciliation, date, version, asString);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReconciliationRunId {\n");
    sb.append("    reconciliation: ").append(toIndentedString(reconciliation)).append("\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    asString: ").append(toIndentedString(asString)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("reconciliation");
    openapiFields.add("date");
    openapiFields.add("version");
    openapiFields.add("asString");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ReconciliationRunId
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ReconciliationRunId.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReconciliationRunId is not found in the empty JSON string", ReconciliationRunId.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ReconciliationRunId.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ReconciliationRunId` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      // validate the optional field `reconciliation`
      if (jsonObj.get("reconciliation") != null && !jsonObj.get("reconciliation").isJsonNull()) {
        ReconciliationId.validateJsonObject(jsonObj.getAsJsonObject("reconciliation"));
      }
      if ((jsonObj.get("asString") != null && !jsonObj.get("asString").isJsonNull()) && !jsonObj.get("asString").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `asString` to be a primitive type in the JSON string but got `%s`", jsonObj.get("asString").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReconciliationRunId.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReconciliationRunId' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReconciliationRunId> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReconciliationRunId.class));

       return (TypeAdapter<T>) new TypeAdapter<ReconciliationRunId>() {
           @Override
           public void write(JsonWriter out, ReconciliationRunId value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ReconciliationRunId read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ReconciliationRunId given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ReconciliationRunId
  * @throws IOException if the JSON string is invalid with respect to ReconciliationRunId
  */
  public static ReconciliationRunId fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReconciliationRunId.class);
  }

 /**
  * Convert an instance of ReconciliationRunId to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
