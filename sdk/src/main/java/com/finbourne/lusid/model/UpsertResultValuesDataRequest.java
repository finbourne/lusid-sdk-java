/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import java.util.Arrays;
import com.finbourne.lusid.model.ResultValue;
import com.finbourne.lusid.model.StructuredResultDataId;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * UpsertResultValuesDataRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class UpsertResultValuesDataRequest {
  public static final String SERIALIZED_NAME_DOCUMENT_ID = "documentId";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_ID)
  private StructuredResultDataId documentId;

  public static final String SERIALIZED_NAME_KEY = "key";
  @SerializedName(SERIALIZED_NAME_KEY)
  private Map<String, String> key;

  public static final String SERIALIZED_NAME_DATA_ADDRESS = "dataAddress";
  @SerializedName(SERIALIZED_NAME_DATA_ADDRESS)
  private String dataAddress;

  public static final String SERIALIZED_NAME_RESULT_VALUE = "resultValue";
  @SerializedName(SERIALIZED_NAME_RESULT_VALUE)
  private ResultValue resultValue;

  public UpsertResultValuesDataRequest() {
  }

  public UpsertResultValuesDataRequest documentId(StructuredResultDataId documentId) {
    
    this.documentId = documentId;
    return this;
  }

   /**
   * Get documentId
   * @return documentId
  **/
  @javax.annotation.Nonnull
  public StructuredResultDataId getDocumentId() {
    return documentId;
  }


  public void setDocumentId(StructuredResultDataId documentId) {
    this.documentId = documentId;
  }


  public UpsertResultValuesDataRequest key(Map<String, String> key) {
    
    this.key = key;
    return this;
  }

  public UpsertResultValuesDataRequest putKeyItem(String key, String keyItem) {
    if (this.key == null) {
      this.key = new HashMap<>();
    }
    this.key.put(key, keyItem);
    return this;
  }

   /**
   * The structured unit result data key.
   * @return key
  **/
  @javax.annotation.Nullable
  public Map<String, String> getKey() {
    return key;
  }


  public void setKey(Map<String, String> key) {
    this.key = key;
  }


  public UpsertResultValuesDataRequest dataAddress(String dataAddress) {
    
    this.dataAddress = dataAddress;
    return this;
  }

   /**
   * The address of the piece of unit result data
   * @return dataAddress
  **/
  @javax.annotation.Nullable
  public String getDataAddress() {
    return dataAddress;
  }


  public void setDataAddress(String dataAddress) {
    this.dataAddress = dataAddress;
  }


  public UpsertResultValuesDataRequest resultValue(ResultValue resultValue) {
    
    this.resultValue = resultValue;
    return this;
  }

   /**
   * Get resultValue
   * @return resultValue
  **/
  @javax.annotation.Nullable
  public ResultValue getResultValue() {
    return resultValue;
  }


  public void setResultValue(ResultValue resultValue) {
    this.resultValue = resultValue;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpsertResultValuesDataRequest upsertResultValuesDataRequest = (UpsertResultValuesDataRequest) o;
    return Objects.equals(this.documentId, upsertResultValuesDataRequest.documentId) &&
        Objects.equals(this.key, upsertResultValuesDataRequest.key) &&
        Objects.equals(this.dataAddress, upsertResultValuesDataRequest.dataAddress) &&
        Objects.equals(this.resultValue, upsertResultValuesDataRequest.resultValue);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(documentId, key, dataAddress, resultValue);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpsertResultValuesDataRequest {\n");
    sb.append("    documentId: ").append(toIndentedString(documentId)).append("\n");
    sb.append("    key: ").append(toIndentedString(key)).append("\n");
    sb.append("    dataAddress: ").append(toIndentedString(dataAddress)).append("\n");
    sb.append("    resultValue: ").append(toIndentedString(resultValue)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("documentId");
    openapiFields.add("key");
    openapiFields.add("dataAddress");
    openapiFields.add("resultValue");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("documentId");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to UpsertResultValuesDataRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!UpsertResultValuesDataRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpsertResultValuesDataRequest is not found in the empty JSON string", UpsertResultValuesDataRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!UpsertResultValuesDataRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpsertResultValuesDataRequest` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UpsertResultValuesDataRequest.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // validate the required field `documentId`
      StructuredResultDataId.validateJsonObject(jsonObj.getAsJsonObject("documentId"));
      if ((jsonObj.get("dataAddress") != null && !jsonObj.get("dataAddress").isJsonNull()) && !jsonObj.get("dataAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dataAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dataAddress").toString()));
      }
      // validate the optional field `resultValue`
      if (jsonObj.get("resultValue") != null && !jsonObj.get("resultValue").isJsonNull()) {
        ResultValue.validateJsonObject(jsonObj.getAsJsonObject("resultValue"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpsertResultValuesDataRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpsertResultValuesDataRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpsertResultValuesDataRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpsertResultValuesDataRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<UpsertResultValuesDataRequest>() {
           @Override
           public void write(JsonWriter out, UpsertResultValuesDataRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpsertResultValuesDataRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of UpsertResultValuesDataRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of UpsertResultValuesDataRequest
  * @throws IOException if the JSON string is invalid with respect to UpsertResultValuesDataRequest
  */
  public static UpsertResultValuesDataRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpsertResultValuesDataRequest.class);
  }

 /**
  * Convert an instance of UpsertResultValuesDataRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
