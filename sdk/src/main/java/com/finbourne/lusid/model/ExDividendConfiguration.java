/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * Configure the ex-dividend periods for the instrument.
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ExDividendConfiguration {
  public static final String SERIALIZED_NAME_USE_BUSINESS_DAYS = "useBusinessDays";
  @SerializedName(SERIALIZED_NAME_USE_BUSINESS_DAYS)
  private Boolean useBusinessDays;

  public static final String SERIALIZED_NAME_EX_DIVIDEND_DAYS = "exDividendDays";
  @SerializedName(SERIALIZED_NAME_EX_DIVIDEND_DAYS)
  private Integer exDividendDays;

  public static final String SERIALIZED_NAME_RETURN_NEGATIVE_ACCRUED = "returnNegativeAccrued";
  @SerializedName(SERIALIZED_NAME_RETURN_NEGATIVE_ACCRUED)
  private Boolean returnNegativeAccrued;

  public static final String SERIALIZED_NAME_APPLY_THIRTY360_PAY_DELAY = "applyThirty360PayDelay";
  @SerializedName(SERIALIZED_NAME_APPLY_THIRTY360_PAY_DELAY)
  private Boolean applyThirty360PayDelay;

  public ExDividendConfiguration() {
  }

  public ExDividendConfiguration useBusinessDays(Boolean useBusinessDays) {
    
    this.useBusinessDays = useBusinessDays;
    return this;
  }

   /**
   * Is the ex-dividend period counted in business days or calendar days.  Defaults to false if not set.
   * @return useBusinessDays
  **/
  @jakarta.annotation.Nullable
  public Boolean getUseBusinessDays() {
    return useBusinessDays;
  }


  public void setUseBusinessDays(Boolean useBusinessDays) {
    this.useBusinessDays = useBusinessDays;
  }


  public ExDividendConfiguration exDividendDays(Integer exDividendDays) {
    
    this.exDividendDays = exDividendDays;
    return this;
  }

   /**
   * Number of days in the ex-dividend period.  If the settlement date falls in the ex-dividend period then the coupon paid is zero and the accrued interest is negative.  If set, this must be a non-negative number.  If not set, or set to 0, than there is no ex-dividend period.
   * @return exDividendDays
  **/
  @jakarta.annotation.Nonnull
  public Integer getExDividendDays() {
    return exDividendDays;
  }


  public void setExDividendDays(Integer exDividendDays) {
    this.exDividendDays = exDividendDays;
  }


  public ExDividendConfiguration returnNegativeAccrued(Boolean returnNegativeAccrued) {
    
    this.returnNegativeAccrued = returnNegativeAccrued;
    return this;
  }

   /**
   * Does the accrued interest go negative in the ex-dividend period, or does it go to zero.
   * @return returnNegativeAccrued
  **/
  @jakarta.annotation.Nullable
  public Boolean getReturnNegativeAccrued() {
    return returnNegativeAccrued;
  }


  public void setReturnNegativeAccrued(Boolean returnNegativeAccrued) {
    this.returnNegativeAccrued = returnNegativeAccrued;
  }


  public ExDividendConfiguration applyThirty360PayDelay(Boolean applyThirty360PayDelay) {
    
    this.applyThirty360PayDelay = applyThirty360PayDelay;
    return this;
  }

   /**
   * Set this flag to true if the ex-dividend days represent a pay delay from the accrual end date in calendar  days under the 30/360 day count convention. The typical use case for this flag are Mortgage Backed Securities  with pay delay between 1 and 60 days, such as FreddieMac and FannieMae. If this flag is set, the useBusinessDays  setting will be ignored.  Defaults to false if not provided.
   * @return applyThirty360PayDelay
  **/
  @jakarta.annotation.Nullable
  public Boolean getApplyThirty360PayDelay() {
    return applyThirty360PayDelay;
  }


  public void setApplyThirty360PayDelay(Boolean applyThirty360PayDelay) {
    this.applyThirty360PayDelay = applyThirty360PayDelay;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExDividendConfiguration exDividendConfiguration = (ExDividendConfiguration) o;
    return Objects.equals(this.useBusinessDays, exDividendConfiguration.useBusinessDays) &&
        Objects.equals(this.exDividendDays, exDividendConfiguration.exDividendDays) &&
        Objects.equals(this.returnNegativeAccrued, exDividendConfiguration.returnNegativeAccrued) &&
        Objects.equals(this.applyThirty360PayDelay, exDividendConfiguration.applyThirty360PayDelay);
  }

  @Override
  public int hashCode() {
    return Objects.hash(useBusinessDays, exDividendDays, returnNegativeAccrued, applyThirty360PayDelay);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExDividendConfiguration {\n");
    sb.append("    useBusinessDays: ").append(toIndentedString(useBusinessDays)).append("\n");
    sb.append("    exDividendDays: ").append(toIndentedString(exDividendDays)).append("\n");
    sb.append("    returnNegativeAccrued: ").append(toIndentedString(returnNegativeAccrued)).append("\n");
    sb.append("    applyThirty360PayDelay: ").append(toIndentedString(applyThirty360PayDelay)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("useBusinessDays");
    openapiFields.add("exDividendDays");
    openapiFields.add("returnNegativeAccrued");
    openapiFields.add("applyThirty360PayDelay");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("exDividendDays");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ExDividendConfiguration
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ExDividendConfiguration.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ExDividendConfiguration is not found in the empty JSON string", ExDividendConfiguration.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ExDividendConfiguration.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ExDividendConfiguration.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ExDividendConfiguration' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ExDividendConfiguration> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ExDividendConfiguration.class));

       return (TypeAdapter<T>) new TypeAdapter<ExDividendConfiguration>() {
           @Override
           public void write(JsonWriter out, ExDividendConfiguration value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ExDividendConfiguration read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ExDividendConfiguration given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ExDividendConfiguration
  * @throws IOException if the JSON string is invalid with respect to ExDividendConfiguration
  */
  public static ExDividendConfiguration fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ExDividendConfiguration.class);
  }

 /**
  * Convert an instance of ExDividendConfiguration to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
