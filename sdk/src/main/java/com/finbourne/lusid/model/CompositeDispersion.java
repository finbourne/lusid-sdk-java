/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import com.finbourne.lusid.model.ResourceId;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * A list of Dispersion calculations for the given years.
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class CompositeDispersion {
  public static final String SERIALIZED_NAME_EFFECTIVE_AT = "effectiveAt";
  @SerializedName(SERIALIZED_NAME_EFFECTIVE_AT)
  private OffsetDateTime effectiveAt;

  public static final String SERIALIZED_NAME_DISPERSION_CALCULATION = "dispersionCalculation";
  @SerializedName(SERIALIZED_NAME_DISPERSION_CALCULATION)
  private java.math.BigDecimal dispersionCalculation;

  public static final String SERIALIZED_NAME_VARIANCE = "variance";
  @SerializedName(SERIALIZED_NAME_VARIANCE)
  private java.math.BigDecimal variance;

  public static final String SERIALIZED_NAME_FIRST_QUARTILE = "firstQuartile";
  @SerializedName(SERIALIZED_NAME_FIRST_QUARTILE)
  private java.math.BigDecimal firstQuartile;

  public static final String SERIALIZED_NAME_THIRD_QUARTILE = "thirdQuartile";
  @SerializedName(SERIALIZED_NAME_THIRD_QUARTILE)
  private java.math.BigDecimal thirdQuartile;

  public static final String SERIALIZED_NAME_RANGE = "range";
  @SerializedName(SERIALIZED_NAME_RANGE)
  private java.math.BigDecimal range;

  public static final String SERIALIZED_NAME_CONSTITUENTS_IN_SCOPE = "constituentsInScope";
  @SerializedName(SERIALIZED_NAME_CONSTITUENTS_IN_SCOPE)
  private List<ResourceId> constituentsInScope;

  public static final String SERIALIZED_NAME_CONSTITUENTS_EXCLUDED = "constituentsExcluded";
  @SerializedName(SERIALIZED_NAME_CONSTITUENTS_EXCLUDED)
  private List<ResourceId> constituentsExcluded;

  public CompositeDispersion() {
  }

  public CompositeDispersion effectiveAt(OffsetDateTime effectiveAt) {
    
    this.effectiveAt = effectiveAt;
    return this;
  }

   /**
   * The date for which dipsersion calculation has been done. This should be 31 Dec for each given year.
   * @return effectiveAt
  **/
  @jakarta.annotation.Nonnull
  public OffsetDateTime getEffectiveAt() {
    return effectiveAt;
  }


  public void setEffectiveAt(OffsetDateTime effectiveAt) {
    this.effectiveAt = effectiveAt;
  }


  public CompositeDispersion dispersionCalculation(java.math.BigDecimal dispersionCalculation) {
    
    this.dispersionCalculation = dispersionCalculation;
    return this;
  }

   /**
   * The result for the dispersion calculation on the given effectiveAt.
   * @return dispersionCalculation
  **/
  @jakarta.annotation.Nonnull
  public java.math.BigDecimal getDispersionCalculation() {
    return dispersionCalculation;
  }


  public void setDispersionCalculation(java.math.BigDecimal dispersionCalculation) {
    this.dispersionCalculation = dispersionCalculation;
  }


  public CompositeDispersion variance(java.math.BigDecimal variance) {
    
    this.variance = variance;
    return this;
  }

   /**
   * The variance on the given effectiveAt.
   * @return variance
  **/
  @jakarta.annotation.Nonnull
  public java.math.BigDecimal getVariance() {
    return variance;
  }


  public void setVariance(java.math.BigDecimal variance) {
    this.variance = variance;
  }


  public CompositeDispersion firstQuartile(java.math.BigDecimal firstQuartile) {
    
    this.firstQuartile = firstQuartile;
    return this;
  }

   /**
   * First Quartile (Q1) &#x3D;  (lower quartile) &#x3D; the middle of the bottom half of the returns.
   * @return firstQuartile
  **/
  @jakarta.annotation.Nonnull
  public java.math.BigDecimal getFirstQuartile() {
    return firstQuartile;
  }


  public void setFirstQuartile(java.math.BigDecimal firstQuartile) {
    this.firstQuartile = firstQuartile;
  }


  public CompositeDispersion thirdQuartile(java.math.BigDecimal thirdQuartile) {
    
    this.thirdQuartile = thirdQuartile;
    return this;
  }

   /**
   * Third Quartile (Q3) &#x3D;  (higher quartile) &#x3D; the middle of the top half of the returns.
   * @return thirdQuartile
  **/
  @jakarta.annotation.Nonnull
  public java.math.BigDecimal getThirdQuartile() {
    return thirdQuartile;
  }


  public void setThirdQuartile(java.math.BigDecimal thirdQuartile) {
    this.thirdQuartile = thirdQuartile;
  }


  public CompositeDispersion range(java.math.BigDecimal range) {
    
    this.range = range;
    return this;
  }

   /**
   * Highest return - Lowest return.
   * @return range
  **/
  @jakarta.annotation.Nonnull
  public java.math.BigDecimal getRange() {
    return range;
  }


  public void setRange(java.math.BigDecimal range) {
    this.range = range;
  }


  public CompositeDispersion constituentsInScope(List<ResourceId> constituentsInScope) {
    
    this.constituentsInScope = constituentsInScope;
    return this;
  }

  public CompositeDispersion addConstituentsInScopeItem(ResourceId constituentsInScopeItem) {
    if (this.constituentsInScope == null) {
      this.constituentsInScope = new ArrayList<>();
    }
    this.constituentsInScope.add(constituentsInScopeItem);
    return this;
  }

   /**
   * List containing Composite members which are part of the dispersion calcualtion.
   * @return constituentsInScope
  **/
  @jakarta.annotation.Nullable
  public List<ResourceId> getConstituentsInScope() {
    return constituentsInScope;
  }


  public void setConstituentsInScope(List<ResourceId> constituentsInScope) {
    this.constituentsInScope = constituentsInScope;
  }


  public CompositeDispersion constituentsExcluded(List<ResourceId> constituentsExcluded) {
    
    this.constituentsExcluded = constituentsExcluded;
    return this;
  }

  public CompositeDispersion addConstituentsExcludedItem(ResourceId constituentsExcludedItem) {
    if (this.constituentsExcluded == null) {
      this.constituentsExcluded = new ArrayList<>();
    }
    this.constituentsExcluded.add(constituentsExcludedItem);
    return this;
  }

   /**
   * List containing the Composite members which are not part of the dispersion calculation
   * @return constituentsExcluded
  **/
  @jakarta.annotation.Nullable
  public List<ResourceId> getConstituentsExcluded() {
    return constituentsExcluded;
  }


  public void setConstituentsExcluded(List<ResourceId> constituentsExcluded) {
    this.constituentsExcluded = constituentsExcluded;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CompositeDispersion compositeDispersion = (CompositeDispersion) o;
    return Objects.equals(this.effectiveAt, compositeDispersion.effectiveAt) &&
        (this.dispersionCalculation.compareTo(compositeDispersion.getDispersionCalculation()) == 0) &&
        (this.variance.compareTo(compositeDispersion.getVariance()) == 0) &&
        (this.firstQuartile.compareTo(compositeDispersion.getFirstQuartile()) == 0) &&
        (this.thirdQuartile.compareTo(compositeDispersion.getThirdQuartile()) == 0) &&
        (this.range.compareTo(compositeDispersion.getRange()) == 0) &&
        Objects.equals(this.constituentsInScope, compositeDispersion.constituentsInScope) &&
        Objects.equals(this.constituentsExcluded, compositeDispersion.constituentsExcluded);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(effectiveAt, dispersionCalculation, variance, firstQuartile, thirdQuartile, range, constituentsInScope, constituentsExcluded);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CompositeDispersion {\n");
    sb.append("    effectiveAt: ").append(toIndentedString(effectiveAt)).append("\n");
    sb.append("    dispersionCalculation: ").append(toIndentedString(dispersionCalculation)).append("\n");
    sb.append("    variance: ").append(toIndentedString(variance)).append("\n");
    sb.append("    firstQuartile: ").append(toIndentedString(firstQuartile)).append("\n");
    sb.append("    thirdQuartile: ").append(toIndentedString(thirdQuartile)).append("\n");
    sb.append("    range: ").append(toIndentedString(range)).append("\n");
    sb.append("    constituentsInScope: ").append(toIndentedString(constituentsInScope)).append("\n");
    sb.append("    constituentsExcluded: ").append(toIndentedString(constituentsExcluded)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("effectiveAt");
    openapiFields.add("dispersionCalculation");
    openapiFields.add("variance");
    openapiFields.add("firstQuartile");
    openapiFields.add("thirdQuartile");
    openapiFields.add("range");
    openapiFields.add("constituentsInScope");
    openapiFields.add("constituentsExcluded");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("effectiveAt");
    openapiRequiredFields.add("dispersionCalculation");
    openapiRequiredFields.add("variance");
    openapiRequiredFields.add("firstQuartile");
    openapiRequiredFields.add("thirdQuartile");
    openapiRequiredFields.add("range");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CompositeDispersion
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!CompositeDispersion.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CompositeDispersion is not found in the empty JSON string", CompositeDispersion.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!CompositeDispersion.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CompositeDispersion` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CompositeDispersion.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (jsonObj.get("constituentsInScope") != null && !jsonObj.get("constituentsInScope").isJsonNull()) {
        JsonArray jsonArrayconstituentsInScope = jsonObj.getAsJsonArray("constituentsInScope");
        if (jsonArrayconstituentsInScope != null) {
          // ensure the json data is an array
          if (!jsonObj.get("constituentsInScope").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `constituentsInScope` to be an array in the JSON string but got `%s`", jsonObj.get("constituentsInScope").toString()));
          }

          // validate the optional field `constituentsInScope` (array)
          for (int i = 0; i < jsonArrayconstituentsInScope.size(); i++) {
            ResourceId.validateJsonObject(jsonArrayconstituentsInScope.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("constituentsExcluded") != null && !jsonObj.get("constituentsExcluded").isJsonNull()) {
        JsonArray jsonArrayconstituentsExcluded = jsonObj.getAsJsonArray("constituentsExcluded");
        if (jsonArrayconstituentsExcluded != null) {
          // ensure the json data is an array
          if (!jsonObj.get("constituentsExcluded").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `constituentsExcluded` to be an array in the JSON string but got `%s`", jsonObj.get("constituentsExcluded").toString()));
          }

          // validate the optional field `constituentsExcluded` (array)
          for (int i = 0; i < jsonArrayconstituentsExcluded.size(); i++) {
            ResourceId.validateJsonObject(jsonArrayconstituentsExcluded.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CompositeDispersion.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CompositeDispersion' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CompositeDispersion> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CompositeDispersion.class));

       return (TypeAdapter<T>) new TypeAdapter<CompositeDispersion>() {
           @Override
           public void write(JsonWriter out, CompositeDispersion value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CompositeDispersion read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CompositeDispersion given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CompositeDispersion
  * @throws IOException if the JSON string is invalid with respect to CompositeDispersion
  */
  public static CompositeDispersion fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CompositeDispersion.class);
  }

 /**
  * Convert an instance of CompositeDispersion to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
