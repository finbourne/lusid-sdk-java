/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import com.finbourne.lusid.model.ResultKeyRule;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * ResultDataKeyRule
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ResultDataKeyRule extends ResultKeyRule {
  public static final String SERIALIZED_NAME_SUPPLIER = "supplier";
  @SerializedName(SERIALIZED_NAME_SUPPLIER)
  private String supplier;

  public static final String SERIALIZED_NAME_DATA_SCOPE = "dataScope";
  @SerializedName(SERIALIZED_NAME_DATA_SCOPE)
  private String dataScope;

  public static final String SERIALIZED_NAME_DOCUMENT_CODE = "documentCode";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_CODE)
  private String documentCode;

  public static final String SERIALIZED_NAME_QUOTE_INTERVAL = "quoteInterval";
  @SerializedName(SERIALIZED_NAME_QUOTE_INTERVAL)
  private String quoteInterval;

  public static final String SERIALIZED_NAME_AS_AT = "asAt";
  @SerializedName(SERIALIZED_NAME_AS_AT)
  private OffsetDateTime asAt;

  public static final String SERIALIZED_NAME_RESOURCE_KEY = "resourceKey";
  @SerializedName(SERIALIZED_NAME_RESOURCE_KEY)
  private String resourceKey;

  public static final String SERIALIZED_NAME_DOCUMENT_RESULT_TYPE = "documentResultType";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_RESULT_TYPE)
  private String documentResultType;

  public static final String SERIALIZED_NAME_USE_DOCUMENT_TO_INFER_HOLDINGS = "useDocumentToInferHoldings";
  @SerializedName(SERIALIZED_NAME_USE_DOCUMENT_TO_INFER_HOLDINGS)
  private Boolean useDocumentToInferHoldings;

  public ResultDataKeyRule() {
    // this.resultKeyRuleType = this.getClass().getSimpleName();
  }

  public ResultDataKeyRule supplier(String supplier) {
    
    this.supplier = supplier;
    return this;
  }

   /**
   * the result resource supplier (where the data comes from)
   * @return supplier
  **/
  @jakarta.annotation.Nonnull
  public String getSupplier() {
    return supplier;
  }


  public void setSupplier(String supplier) {
    this.supplier = supplier;
  }


  public ResultDataKeyRule dataScope(String dataScope) {
    
    this.dataScope = dataScope;
    return this;
  }

   /**
   * which is the scope in which the data should be found
   * @return dataScope
  **/
  @jakarta.annotation.Nonnull
  public String getDataScope() {
    return dataScope;
  }


  public void setDataScope(String dataScope) {
    this.dataScope = dataScope;
  }


  public ResultDataKeyRule documentCode(String documentCode) {
    
    this.documentCode = documentCode;
    return this;
  }

   /**
   * document code that defines which document is desired
   * @return documentCode
  **/
  @jakarta.annotation.Nonnull
  public String getDocumentCode() {
    return documentCode;
  }


  public void setDocumentCode(String documentCode) {
    this.documentCode = documentCode;
  }


  public ResultDataKeyRule quoteInterval(String quoteInterval) {
    
    this.quoteInterval = quoteInterval;
    return this;
  }

   /**
   * Shorthand for the time interval used to select result data. This must be a dot-separated string   specifying a start and end date, for example &#39;5D.0D&#39; to look back 5 days from today (0 days ago).
   * @return quoteInterval
  **/
  @jakarta.annotation.Nullable
  public String getQuoteInterval() {
    return quoteInterval;
  }


  public void setQuoteInterval(String quoteInterval) {
    this.quoteInterval = quoteInterval;
  }


  public ResultDataKeyRule asAt(OffsetDateTime asAt) {
    
    this.asAt = asAt;
    return this;
  }

   /**
   * The AsAt predicate specification.
   * @return asAt
  **/
  @jakarta.annotation.Nullable
  public OffsetDateTime getAsAt() {
    return asAt;
  }


  public void setAsAt(OffsetDateTime asAt) {
    this.asAt = asAt;
  }


  public ResultDataKeyRule resourceKey(String resourceKey) {
    
    this.resourceKey = resourceKey;
    return this;
  }

   /**
   * The result data key that identifies the address pattern that this is a rule for
   * @return resourceKey
  **/
  @jakarta.annotation.Nonnull
  public String getResourceKey() {
    return resourceKey;
  }


  public void setResourceKey(String resourceKey) {
    this.resourceKey = resourceKey;
  }


  public ResultDataKeyRule documentResultType(String documentResultType) {
    
    this.documentResultType = documentResultType;
    return this;
  }

   /**
   * Get documentResultType
   * @return documentResultType
  **/
  @jakarta.annotation.Nonnull
  public String getDocumentResultType() {
    return documentResultType;
  }


  public void setDocumentResultType(String documentResultType) {
    this.documentResultType = documentResultType;
  }


  public ResultDataKeyRule useDocumentToInferHoldings(Boolean useDocumentToInferHoldings) {
    
    this.useDocumentToInferHoldings = useDocumentToInferHoldings;
    return this;
  }

   /**
   * Indicates whether the relevant document should be used to infer the set of holdings in the valuation.
   * @return useDocumentToInferHoldings
  **/
  @jakarta.annotation.Nullable
  public Boolean getUseDocumentToInferHoldings() {
    return useDocumentToInferHoldings;
  }


  public void setUseDocumentToInferHoldings(Boolean useDocumentToInferHoldings) {
    this.useDocumentToInferHoldings = useDocumentToInferHoldings;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ResultDataKeyRule resultDataKeyRule = (ResultDataKeyRule) o;
    return Objects.equals(this.supplier, resultDataKeyRule.supplier) &&
        Objects.equals(this.dataScope, resultDataKeyRule.dataScope) &&
        Objects.equals(this.documentCode, resultDataKeyRule.documentCode) &&
        Objects.equals(this.quoteInterval, resultDataKeyRule.quoteInterval) &&
        Objects.equals(this.asAt, resultDataKeyRule.asAt) &&
        Objects.equals(this.resourceKey, resultDataKeyRule.resourceKey) &&
        Objects.equals(this.documentResultType, resultDataKeyRule.documentResultType) &&
        Objects.equals(this.useDocumentToInferHoldings, resultDataKeyRule.useDocumentToInferHoldings) &&
        super.equals(o);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(supplier, dataScope, documentCode, quoteInterval, asAt, resourceKey, documentResultType, useDocumentToInferHoldings, super.hashCode());
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ResultDataKeyRule {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    supplier: ").append(toIndentedString(supplier)).append("\n");
    sb.append("    dataScope: ").append(toIndentedString(dataScope)).append("\n");
    sb.append("    documentCode: ").append(toIndentedString(documentCode)).append("\n");
    sb.append("    quoteInterval: ").append(toIndentedString(quoteInterval)).append("\n");
    sb.append("    asAt: ").append(toIndentedString(asAt)).append("\n");
    sb.append("    resourceKey: ").append(toIndentedString(resourceKey)).append("\n");
    sb.append("    documentResultType: ").append(toIndentedString(documentResultType)).append("\n");
    sb.append("    useDocumentToInferHoldings: ").append(toIndentedString(useDocumentToInferHoldings)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("resultKeyRuleType");
    openapiFields.add("supplier");
    openapiFields.add("dataScope");
    openapiFields.add("documentCode");
    openapiFields.add("quoteInterval");
    openapiFields.add("asAt");
    openapiFields.add("resourceKey");
    openapiFields.add("documentResultType");
    openapiFields.add("useDocumentToInferHoldings");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("supplier");
    openapiRequiredFields.add("dataScope");
    openapiRequiredFields.add("documentCode");
    openapiRequiredFields.add("resourceKey");
    openapiRequiredFields.add("documentResultType");
    openapiRequiredFields.add("resultKeyRuleType");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ResultDataKeyRule
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ResultDataKeyRule.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ResultDataKeyRule is not found in the empty JSON string", ResultDataKeyRule.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ResultDataKeyRule.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ResultDataKeyRule.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ResultDataKeyRule' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ResultDataKeyRule> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ResultDataKeyRule.class));

       return (TypeAdapter<T>) new TypeAdapter<ResultDataKeyRule>() {
           @Override
           public void write(JsonWriter out, ResultDataKeyRule value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ResultDataKeyRule read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ResultDataKeyRule given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ResultDataKeyRule
  * @throws IOException if the JSON string is invalid with respect to ResultDataKeyRule
  */
  public static ResultDataKeyRule fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ResultDataKeyRule.class);
  }

 /**
  * Convert an instance of ResultDataKeyRule to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
