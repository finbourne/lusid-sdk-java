/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * The lineage of the event value
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class LifeCycleEventLineage {
  public static final String SERIALIZED_NAME_EVENT_TYPE = "eventType";
  @SerializedName(SERIALIZED_NAME_EVENT_TYPE)
  private String eventType;

  public static final String SERIALIZED_NAME_INSTRUMENT_TYPE = "instrumentType";
  @SerializedName(SERIALIZED_NAME_INSTRUMENT_TYPE)
  private String instrumentType;

  public static final String SERIALIZED_NAME_INSTRUMENT_ID = "instrumentId";
  @SerializedName(SERIALIZED_NAME_INSTRUMENT_ID)
  private String instrumentId;

  public static final String SERIALIZED_NAME_LEG_ID = "legId";
  @SerializedName(SERIALIZED_NAME_LEG_ID)
  private String legId;

  public static final String SERIALIZED_NAME_SOURCE_TRANSACTION_ID = "sourceTransactionId";
  @SerializedName(SERIALIZED_NAME_SOURCE_TRANSACTION_ID)
  private String sourceTransactionId;

  public LifeCycleEventLineage() {
  }

  public LifeCycleEventLineage eventType(String eventType) {
    
    this.eventType = eventType;
    return this;
  }

   /**
   * The type of the event
   * @return eventType
  **/
  @javax.annotation.Nullable
  public String getEventType() {
    return eventType;
  }


  public void setEventType(String eventType) {
    this.eventType = eventType;
  }


  public LifeCycleEventLineage instrumentType(String instrumentType) {
    
    this.instrumentType = instrumentType;
    return this;
  }

   /**
   * The instrument type of the instrument for the event.
   * @return instrumentType
  **/
  @javax.annotation.Nullable
  public String getInstrumentType() {
    return instrumentType;
  }


  public void setInstrumentType(String instrumentType) {
    this.instrumentType = instrumentType;
  }


  public LifeCycleEventLineage instrumentId(String instrumentId) {
    
    this.instrumentId = instrumentId;
    return this;
  }

   /**
   * The LUID of the instrument for the event.
   * @return instrumentId
  **/
  @javax.annotation.Nullable
  public String getInstrumentId() {
    return instrumentId;
  }


  public void setInstrumentId(String instrumentId) {
    this.instrumentId = instrumentId;
  }


  public LifeCycleEventLineage legId(String legId) {
    
    this.legId = legId;
    return this;
  }

   /**
   * Leg id for the event.
   * @return legId
  **/
  @javax.annotation.Nullable
  public String getLegId() {
    return legId;
  }


  public void setLegId(String legId) {
    this.legId = legId;
  }


  public LifeCycleEventLineage sourceTransactionId(String sourceTransactionId) {
    
    this.sourceTransactionId = sourceTransactionId;
    return this;
  }

   /**
   * The source transaction of the instrument for the event.
   * @return sourceTransactionId
  **/
  @javax.annotation.Nullable
  public String getSourceTransactionId() {
    return sourceTransactionId;
  }


  public void setSourceTransactionId(String sourceTransactionId) {
    this.sourceTransactionId = sourceTransactionId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LifeCycleEventLineage lifeCycleEventLineage = (LifeCycleEventLineage) o;
    return Objects.equals(this.eventType, lifeCycleEventLineage.eventType) &&
        Objects.equals(this.instrumentType, lifeCycleEventLineage.instrumentType) &&
        Objects.equals(this.instrumentId, lifeCycleEventLineage.instrumentId) &&
        Objects.equals(this.legId, lifeCycleEventLineage.legId) &&
        Objects.equals(this.sourceTransactionId, lifeCycleEventLineage.sourceTransactionId);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(eventType, instrumentType, instrumentId, legId, sourceTransactionId);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LifeCycleEventLineage {\n");
    sb.append("    eventType: ").append(toIndentedString(eventType)).append("\n");
    sb.append("    instrumentType: ").append(toIndentedString(instrumentType)).append("\n");
    sb.append("    instrumentId: ").append(toIndentedString(instrumentId)).append("\n");
    sb.append("    legId: ").append(toIndentedString(legId)).append("\n");
    sb.append("    sourceTransactionId: ").append(toIndentedString(sourceTransactionId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("eventType");
    openapiFields.add("instrumentType");
    openapiFields.add("instrumentId");
    openapiFields.add("legId");
    openapiFields.add("sourceTransactionId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to LifeCycleEventLineage
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!LifeCycleEventLineage.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LifeCycleEventLineage is not found in the empty JSON string", LifeCycleEventLineage.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!LifeCycleEventLineage.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LifeCycleEventLineage` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("eventType") != null && !jsonObj.get("eventType").isJsonNull()) && !jsonObj.get("eventType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `eventType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("eventType").toString()));
      }
      if ((jsonObj.get("instrumentType") != null && !jsonObj.get("instrumentType").isJsonNull()) && !jsonObj.get("instrumentType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `instrumentType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("instrumentType").toString()));
      }
      if ((jsonObj.get("instrumentId") != null && !jsonObj.get("instrumentId").isJsonNull()) && !jsonObj.get("instrumentId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `instrumentId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("instrumentId").toString()));
      }
      if ((jsonObj.get("legId") != null && !jsonObj.get("legId").isJsonNull()) && !jsonObj.get("legId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `legId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("legId").toString()));
      }
      if ((jsonObj.get("sourceTransactionId") != null && !jsonObj.get("sourceTransactionId").isJsonNull()) && !jsonObj.get("sourceTransactionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourceTransactionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sourceTransactionId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LifeCycleEventLineage.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LifeCycleEventLineage' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LifeCycleEventLineage> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LifeCycleEventLineage.class));

       return (TypeAdapter<T>) new TypeAdapter<LifeCycleEventLineage>() {
           @Override
           public void write(JsonWriter out, LifeCycleEventLineage value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LifeCycleEventLineage read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of LifeCycleEventLineage given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of LifeCycleEventLineage
  * @throws IOException if the JSON string is invalid with respect to LifeCycleEventLineage
  */
  public static LifeCycleEventLineage fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LifeCycleEventLineage.class);
  }

 /**
  * Convert an instance of LifeCycleEventLineage to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
