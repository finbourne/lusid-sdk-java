/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import com.finbourne.lusid.model.EntityIdentifier;
import com.finbourne.lusid.model.LusidUniqueId;
import com.finbourne.lusid.model.Property;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.net.URI;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * Information about the other related entity in the relationship
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class RelatedEntity {
  public static final String SERIALIZED_NAME_ENTITY_TYPE = "entityType";
  @SerializedName(SERIALIZED_NAME_ENTITY_TYPE)
  private String entityType;

  public static final String SERIALIZED_NAME_ENTITY_ID = "entityId";
  @SerializedName(SERIALIZED_NAME_ENTITY_ID)
  private Map<String, String> entityId = new HashMap<>();

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_PROPERTIES = "properties";
  @SerializedName(SERIALIZED_NAME_PROPERTIES)
  private Map<String, Property> properties;

  public static final String SERIALIZED_NAME_SCOPE = "scope";
  @SerializedName(SERIALIZED_NAME_SCOPE)
  private String scope;

  public static final String SERIALIZED_NAME_LUSID_UNIQUE_ID = "lusidUniqueId";
  @SerializedName(SERIALIZED_NAME_LUSID_UNIQUE_ID)
  private LusidUniqueId lusidUniqueId;

  public static final String SERIALIZED_NAME_IDENTIFIERS = "identifiers";
  @SerializedName(SERIALIZED_NAME_IDENTIFIERS)
  private List<EntityIdentifier> identifiers = new ArrayList<>();

  public static final String SERIALIZED_NAME_HREF = "href";
  @SerializedName(SERIALIZED_NAME_HREF)
  private URI href;

  public RelatedEntity() {
  }

  public RelatedEntity entityType(String entityType) {
    
    this.entityType = entityType;
    return this;
  }

   /**
   * The type of the entity.
   * @return entityType
  **/
  @jakarta.annotation.Nonnull
  public String getEntityType() {
    return entityType;
  }


  public void setEntityType(String entityType) {
    this.entityType = entityType;
  }


  public RelatedEntity entityId(Map<String, String> entityId) {
    
    this.entityId = entityId;
    return this;
  }

  public RelatedEntity putEntityIdItem(String key, String entityIdItem) {
    if (this.entityId == null) {
      this.entityId = new HashMap<>();
    }
    this.entityId.put(key, entityIdItem);
    return this;
  }

   /**
   * The identifier of the other related entity in the relationship. It contains &#39;scope&#39; and &#39;code&#39; as keys for identifiers of a Portfolio or Portfolio Group, or &#39;idTypeScope&#39;, &#39;idTypeCode&#39;, &#39;code&#39; as keys for identifiers of a Person or Legal Entity.
   * @return entityId
  **/
  @jakarta.annotation.Nonnull
  public Map<String, String> getEntityId() {
    return entityId;
  }


  public void setEntityId(Map<String, String> entityId) {
    this.entityId = entityId;
  }


  public RelatedEntity displayName(String displayName) {
    
    this.displayName = displayName;
    return this;
  }

   /**
   * The display name of the entity.
   * @return displayName
  **/
  @jakarta.annotation.Nonnull
  public String getDisplayName() {
    return displayName;
  }


  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public RelatedEntity properties(Map<String, Property> properties) {
    
    this.properties = properties;
    return this;
  }

  public RelatedEntity putPropertiesItem(String key, Property propertiesItem) {
    if (this.properties == null) {
      this.properties = new HashMap<>();
    }
    this.properties.put(key, propertiesItem);
    return this;
  }

   /**
   * The properties of the entity. This field is empty until further notice.
   * @return properties
  **/
  @jakarta.annotation.Nullable
  public Map<String, Property> getProperties() {
    return properties;
  }


  public void setProperties(Map<String, Property> properties) {
    this.properties = properties;
  }


  public RelatedEntity scope(String scope) {
    
    this.scope = scope;
    return this;
  }

   /**
   * The scope of the identifier
   * @return scope
  **/
  @jakarta.annotation.Nullable
  public String getScope() {
    return scope;
  }


  public void setScope(String scope) {
    this.scope = scope;
  }


  public RelatedEntity lusidUniqueId(LusidUniqueId lusidUniqueId) {
    
    this.lusidUniqueId = lusidUniqueId;
    return this;
  }

   /**
   * Get lusidUniqueId
   * @return lusidUniqueId
  **/
  @jakarta.annotation.Nullable
  public LusidUniqueId getLusidUniqueId() {
    return lusidUniqueId;
  }


  public void setLusidUniqueId(LusidUniqueId lusidUniqueId) {
    this.lusidUniqueId = lusidUniqueId;
  }


  public RelatedEntity identifiers(List<EntityIdentifier> identifiers) {
    
    this.identifiers = identifiers;
    return this;
  }

  public RelatedEntity addIdentifiersItem(EntityIdentifier identifiersItem) {
    if (this.identifiers == null) {
      this.identifiers = new ArrayList<>();
    }
    this.identifiers.add(identifiersItem);
    return this;
  }

   /**
   * The identifiers of the related entity in the relationship.
   * @return identifiers
  **/
  @jakarta.annotation.Nonnull
  public List<EntityIdentifier> getIdentifiers() {
    return identifiers;
  }


  public void setIdentifiers(List<EntityIdentifier> identifiers) {
    this.identifiers = identifiers;
  }


  public RelatedEntity href(URI href) {
    
    this.href = href;
    return this;
  }

   /**
   * The link to the entity.
   * @return href
  **/
  @jakarta.annotation.Nullable
  public URI getHref() {
    return href;
  }


  public void setHref(URI href) {
    this.href = href;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RelatedEntity relatedEntity = (RelatedEntity) o;
    return Objects.equals(this.entityType, relatedEntity.entityType) &&
        Objects.equals(this.entityId, relatedEntity.entityId) &&
        Objects.equals(this.displayName, relatedEntity.displayName) &&
        Objects.equals(this.properties, relatedEntity.properties) &&
        Objects.equals(this.scope, relatedEntity.scope) &&
        Objects.equals(this.lusidUniqueId, relatedEntity.lusidUniqueId) &&
        Objects.equals(this.identifiers, relatedEntity.identifiers) &&
        Objects.equals(this.href, relatedEntity.href);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(entityType, entityId, displayName, properties, scope, lusidUniqueId, identifiers, href);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RelatedEntity {\n");
    sb.append("    entityType: ").append(toIndentedString(entityType)).append("\n");
    sb.append("    entityId: ").append(toIndentedString(entityId)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
    sb.append("    scope: ").append(toIndentedString(scope)).append("\n");
    sb.append("    lusidUniqueId: ").append(toIndentedString(lusidUniqueId)).append("\n");
    sb.append("    identifiers: ").append(toIndentedString(identifiers)).append("\n");
    sb.append("    href: ").append(toIndentedString(href)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("entityType");
    openapiFields.add("entityId");
    openapiFields.add("displayName");
    openapiFields.add("properties");
    openapiFields.add("scope");
    openapiFields.add("lusidUniqueId");
    openapiFields.add("identifiers");
    openapiFields.add("href");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("entityType");
    openapiRequiredFields.add("entityId");
    openapiRequiredFields.add("displayName");
    openapiRequiredFields.add("identifiers");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to RelatedEntity
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RelatedEntity.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RelatedEntity is not found in the empty JSON string", RelatedEntity.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : RelatedEntity.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("entityType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `entityType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("entityType").toString()));
      }
      if (!jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if ((jsonObj.get("scope") != null && !jsonObj.get("scope").isJsonNull()) && !jsonObj.get("scope").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `scope` to be a primitive type in the JSON string but got `%s`", jsonObj.get("scope").toString()));
      }
      // validate the optional field `lusidUniqueId`
      if (jsonObj.get("lusidUniqueId") != null && !jsonObj.get("lusidUniqueId").isJsonNull()) {
        LusidUniqueId.validateJsonElement(jsonObj.get("lusidUniqueId"));
      }
      // ensure the json data is an array
      if (!jsonObj.get("identifiers").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `identifiers` to be an array in the JSON string but got `%s`", jsonObj.get("identifiers").toString()));
      }

      JsonArray jsonArrayidentifiers = jsonObj.getAsJsonArray("identifiers");
      // validate the required field `identifiers` (array)
      for (int i = 0; i < jsonArrayidentifiers.size(); i++) {
        EntityIdentifier.validateJsonElement(jsonArrayidentifiers.get(i));
      };
      if ((jsonObj.get("href") != null && !jsonObj.get("href").isJsonNull()) && !jsonObj.get("href").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `href` to be a primitive type in the JSON string but got `%s`", jsonObj.get("href").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RelatedEntity.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RelatedEntity' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RelatedEntity> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RelatedEntity.class));

       return (TypeAdapter<T>) new TypeAdapter<RelatedEntity>() {
           @Override
           public void write(JsonWriter out, RelatedEntity value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RelatedEntity read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of RelatedEntity given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of RelatedEntity
  * @throws IOException if the JSON string is invalid with respect to RelatedEntity
  */
  public static RelatedEntity fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RelatedEntity.class);
  }

 /**
  * Convert an instance of RelatedEntity to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
