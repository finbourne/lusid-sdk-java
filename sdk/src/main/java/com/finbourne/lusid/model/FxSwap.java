/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import java.util.Arrays;
import com.finbourne.lusid.model.FxForward;
import com.finbourne.lusid.model.LusidInstrument;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * LUSID representation of an FX Swap. Composed of two FX Forwards.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class FxSwap extends LusidInstrument {
  public static final String SERIALIZED_NAME_NEAR_FX_FORWARD = "nearFxForward";
  @SerializedName(SERIALIZED_NAME_NEAR_FX_FORWARD)
  private FxForward nearFxForward;

  public static final String SERIALIZED_NAME_FAR_FX_FORWARD = "farFxForward";
  @SerializedName(SERIALIZED_NAME_FAR_FX_FORWARD)
  private FxForward farFxForward;

  public static final String SERIALIZED_NAME_NOTIONAL_SYMMETRY = "notionalSymmetry";
  @SerializedName(SERIALIZED_NAME_NOTIONAL_SYMMETRY)
  private String notionalSymmetry;

  public FxSwap() {
    // this.instrumentType = this.getClass().getSimpleName();
  }

  public FxSwap nearFxForward(FxForward nearFxForward) {
    
    this.nearFxForward = nearFxForward;
    return this;
  }

   /**
   * Get nearFxForward
   * @return nearFxForward
  **/
  @javax.annotation.Nonnull
  public FxForward getNearFxForward() {
    return nearFxForward;
  }


  public void setNearFxForward(FxForward nearFxForward) {
    this.nearFxForward = nearFxForward;
  }


  public FxSwap farFxForward(FxForward farFxForward) {
    
    this.farFxForward = farFxForward;
    return this;
  }

   /**
   * Get farFxForward
   * @return farFxForward
  **/
  @javax.annotation.Nonnull
  public FxForward getFarFxForward() {
    return farFxForward;
  }


  public void setFarFxForward(FxForward farFxForward) {
    this.farFxForward = farFxForward;
  }


  public FxSwap notionalSymmetry(String notionalSymmetry) {
    
    this.notionalSymmetry = notionalSymmetry;
    return this;
  }

   /**
   * The NotionalSymmetry allows for even and uneven FxSwaps to be supported.  An even FxSwap is one where the near and far fx forwards have the same notional value on at least one of the  legs. An uneven FxSwap is one where near and far fx forwards don&#39;t have the same notional on both the  domestic and foreign legs.  By default NotionalSymmetry will be set as even.    Supported string (enumeration) values are: [Even, Uneven].
   * @return notionalSymmetry
  **/
  @javax.annotation.Nullable
  public String getNotionalSymmetry() {
    return notionalSymmetry;
  }


  public void setNotionalSymmetry(String notionalSymmetry) {
    this.notionalSymmetry = notionalSymmetry;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FxSwap fxSwap = (FxSwap) o;
    return Objects.equals(this.nearFxForward, fxSwap.nearFxForward) &&
        Objects.equals(this.farFxForward, fxSwap.farFxForward) &&
        Objects.equals(this.notionalSymmetry, fxSwap.notionalSymmetry) &&
        super.equals(o);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(nearFxForward, farFxForward, notionalSymmetry, super.hashCode());
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FxSwap {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    nearFxForward: ").append(toIndentedString(nearFxForward)).append("\n");
    sb.append("    farFxForward: ").append(toIndentedString(farFxForward)).append("\n");
    sb.append("    notionalSymmetry: ").append(toIndentedString(notionalSymmetry)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("instrumentType");
    openapiFields.add("nearFxForward");
    openapiFields.add("farFxForward");
    openapiFields.add("notionalSymmetry");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("nearFxForward");
    openapiRequiredFields.add("farFxForward");
    openapiRequiredFields.add("instrumentType");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to FxSwap
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!FxSwap.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FxSwap is not found in the empty JSON string", FxSwap.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!FxSwap.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FxSwap` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : FxSwap.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FxSwap.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FxSwap' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FxSwap> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FxSwap.class));

       return (TypeAdapter<T>) new TypeAdapter<FxSwap>() {
           @Override
           public void write(JsonWriter out, FxSwap value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FxSwap read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of FxSwap given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of FxSwap
  * @throws IOException if the JSON string is invalid with respect to FxSwap
  */
  public static FxSwap fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FxSwap.class);
  }

 /**
  * Convert an instance of FxSwap to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
