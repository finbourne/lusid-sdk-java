/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import java.util.Arrays;
import com.finbourne.lusid.model.ErrorDetail;
import com.finbourne.lusid.model.Link;
import com.finbourne.lusid.model.ResultDataSchema;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.net.URI;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * BucketedCashFlowResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class BucketedCashFlowResponse {
  public static final String SERIALIZED_NAME_HREF = "href";
  @SerializedName(SERIALIZED_NAME_HREF)
  private URI href;

  public static final String SERIALIZED_NAME_DATA = "data";
  @SerializedName(SERIALIZED_NAME_DATA)
  private List<Map<String, Object>> data;

  public static final String SERIALIZED_NAME_REPORT_CURRENCY = "reportCurrency";
  @SerializedName(SERIALIZED_NAME_REPORT_CURRENCY)
  private String reportCurrency;

  public static final String SERIALIZED_NAME_DATA_SCHEMA = "dataSchema";
  @SerializedName(SERIALIZED_NAME_DATA_SCHEMA)
  private ResultDataSchema dataSchema;

  public static final String SERIALIZED_NAME_FAILED = "failed";
  @SerializedName(SERIALIZED_NAME_FAILED)
  private Map<String, ErrorDetail> failed;

  public static final String SERIALIZED_NAME_LINKS = "links";
  @SerializedName(SERIALIZED_NAME_LINKS)
  private List<Link> links;

  public BucketedCashFlowResponse() {
  }

  public BucketedCashFlowResponse href(URI href) {
    
    this.href = href;
    return this;
  }

   /**
   * Get href
   * @return href
  **/
  @javax.annotation.Nullable
  public URI getHref() {
    return href;
  }


  public void setHref(URI href) {
    this.href = href;
  }


  public BucketedCashFlowResponse data(List<Map<String, Object>> data) {
    
    this.data = data;
    return this;
  }

  public BucketedCashFlowResponse addDataItem(Map<String, Object> dataItem) {
    if (this.data == null) {
      this.data = new ArrayList<>();
    }
    this.data.add(dataItem);
    return this;
  }

   /**
   * List of dictionary bucketed cash flow result set.  Each dictionary represent a bucketed cashflow result set keyed by AddressKeys.  e.g. dictionary[\&quot;Valuation/CashFlowAmount\&quot;] for the aggregated cash flow amount for the bucket.  e.g. suppose \&quot;RoundUp\&quot; method, then dictionary[\&quot;Valuation/CashFlowDate/RoundUp\&quot;] returns the bucketed cashflow date.
   * @return data
  **/
  @javax.annotation.Nullable
  public List<Map<String, Object>> getData() {
    return data;
  }


  public void setData(List<Map<String, Object>> data) {
    this.data = data;
  }


  public BucketedCashFlowResponse reportCurrency(String reportCurrency) {
    
    this.reportCurrency = reportCurrency;
    return this;
  }

   /**
   * Three letter ISO currency string indicating what currency to report in for ReportCcy denominated queries.  If not present then the currency of the relevant portfolio will be used in its place where relevant.
   * @return reportCurrency
  **/
  @javax.annotation.Nullable
  public String getReportCurrency() {
    return reportCurrency;
  }


  public void setReportCurrency(String reportCurrency) {
    this.reportCurrency = reportCurrency;
  }


  public BucketedCashFlowResponse dataSchema(ResultDataSchema dataSchema) {
    
    this.dataSchema = dataSchema;
    return this;
  }

   /**
   * Get dataSchema
   * @return dataSchema
  **/
  @javax.annotation.Nullable
  public ResultDataSchema getDataSchema() {
    return dataSchema;
  }


  public void setDataSchema(ResultDataSchema dataSchema) {
    this.dataSchema = dataSchema;
  }


  public BucketedCashFlowResponse failed(Map<String, ErrorDetail> failed) {
    
    this.failed = failed;
    return this;
  }

  public BucketedCashFlowResponse putFailedItem(String key, ErrorDetail failedItem) {
    if (this.failed == null) {
      this.failed = new HashMap<>();
    }
    this.failed.put(key, failedItem);
    return this;
  }

   /**
   * Information about where instruments have failed to return cashflows in so far as it is available.  e.g., failure to retrieve a market quote for a floating rate instrument.
   * @return failed
  **/
  @javax.annotation.Nullable
  public Map<String, ErrorDetail> getFailed() {
    return failed;
  }


  public void setFailed(Map<String, ErrorDetail> failed) {
    this.failed = failed;
  }


  public BucketedCashFlowResponse links(List<Link> links) {
    
    this.links = links;
    return this;
  }

  public BucketedCashFlowResponse addLinksItem(Link linksItem) {
    if (this.links == null) {
      this.links = new ArrayList<>();
    }
    this.links.add(linksItem);
    return this;
  }

   /**
   * Get links
   * @return links
  **/
  @javax.annotation.Nullable
  public List<Link> getLinks() {
    return links;
  }


  public void setLinks(List<Link> links) {
    this.links = links;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BucketedCashFlowResponse bucketedCashFlowResponse = (BucketedCashFlowResponse) o;
    return Objects.equals(this.href, bucketedCashFlowResponse.href) &&
        Objects.equals(this.data, bucketedCashFlowResponse.data) &&
        Objects.equals(this.reportCurrency, bucketedCashFlowResponse.reportCurrency) &&
        Objects.equals(this.dataSchema, bucketedCashFlowResponse.dataSchema) &&
        Objects.equals(this.failed, bucketedCashFlowResponse.failed) &&
        Objects.equals(this.links, bucketedCashFlowResponse.links);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(href, data, reportCurrency, dataSchema, failed, links);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BucketedCashFlowResponse {\n");
    sb.append("    href: ").append(toIndentedString(href)).append("\n");
    sb.append("    data: ").append(toIndentedString(data)).append("\n");
    sb.append("    reportCurrency: ").append(toIndentedString(reportCurrency)).append("\n");
    sb.append("    dataSchema: ").append(toIndentedString(dataSchema)).append("\n");
    sb.append("    failed: ").append(toIndentedString(failed)).append("\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("href");
    openapiFields.add("data");
    openapiFields.add("reportCurrency");
    openapiFields.add("dataSchema");
    openapiFields.add("failed");
    openapiFields.add("links");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to BucketedCashFlowResponse
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!BucketedCashFlowResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BucketedCashFlowResponse is not found in the empty JSON string", BucketedCashFlowResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!BucketedCashFlowResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BucketedCashFlowResponse` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("href") != null && !jsonObj.get("href").isJsonNull()) && !jsonObj.get("href").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `href` to be a primitive type in the JSON string but got `%s`", jsonObj.get("href").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("data") != null && !jsonObj.get("data").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `data` to be an array in the JSON string but got `%s`", jsonObj.get("data").toString()));
      }
      if ((jsonObj.get("reportCurrency") != null && !jsonObj.get("reportCurrency").isJsonNull()) && !jsonObj.get("reportCurrency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reportCurrency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reportCurrency").toString()));
      }
      // validate the optional field `dataSchema`
      if (jsonObj.get("dataSchema") != null && !jsonObj.get("dataSchema").isJsonNull()) {
        ResultDataSchema.validateJsonObject(jsonObj.getAsJsonObject("dataSchema"));
      }
      if (jsonObj.get("links") != null && !jsonObj.get("links").isJsonNull()) {
        JsonArray jsonArraylinks = jsonObj.getAsJsonArray("links");
        if (jsonArraylinks != null) {
          // ensure the json data is an array
          if (!jsonObj.get("links").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `links` to be an array in the JSON string but got `%s`", jsonObj.get("links").toString()));
          }

          // validate the optional field `links` (array)
          for (int i = 0; i < jsonArraylinks.size(); i++) {
            Link.validateJsonObject(jsonArraylinks.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BucketedCashFlowResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BucketedCashFlowResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BucketedCashFlowResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BucketedCashFlowResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<BucketedCashFlowResponse>() {
           @Override
           public void write(JsonWriter out, BucketedCashFlowResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BucketedCashFlowResponse read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of BucketedCashFlowResponse given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of BucketedCashFlowResponse
  * @throws IOException if the JSON string is invalid with respect to BucketedCashFlowResponse
  */
  public static BucketedCashFlowResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BucketedCashFlowResponse.class);
  }

 /**
  * Convert an instance of BucketedCashFlowResponse to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
