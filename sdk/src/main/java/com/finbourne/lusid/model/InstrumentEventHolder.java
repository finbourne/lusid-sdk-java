/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import com.finbourne.lusid.model.EventDateRange;
import com.finbourne.lusid.model.InstrumentEvent;
import com.finbourne.lusid.model.PerpetualProperty;
import com.finbourne.lusid.model.ResourceId;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * An instrument event equipped with additional metadata.
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class InstrumentEventHolder {
  public static final String SERIALIZED_NAME_INSTRUMENT_EVENT_ID = "instrumentEventId";
  @SerializedName(SERIALIZED_NAME_INSTRUMENT_EVENT_ID)
  private String instrumentEventId;

  public static final String SERIALIZED_NAME_CORPORATE_ACTION_SOURCE_ID = "corporateActionSourceId";
  @SerializedName(SERIALIZED_NAME_CORPORATE_ACTION_SOURCE_ID)
  private ResourceId corporateActionSourceId;

  public static final String SERIALIZED_NAME_INSTRUMENT_IDENTIFIERS = "instrumentIdentifiers";
  @SerializedName(SERIALIZED_NAME_INSTRUMENT_IDENTIFIERS)
  private Map<String, String> instrumentIdentifiers = new HashMap<>();

  public static final String SERIALIZED_NAME_LUSID_INSTRUMENT_ID = "lusidInstrumentId";
  @SerializedName(SERIALIZED_NAME_LUSID_INSTRUMENT_ID)
  private String lusidInstrumentId;

  public static final String SERIALIZED_NAME_INSTRUMENT_SCOPE = "instrumentScope";
  @SerializedName(SERIALIZED_NAME_INSTRUMENT_SCOPE)
  private String instrumentScope;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_EVENT_DATE_RANGE = "eventDateRange";
  @SerializedName(SERIALIZED_NAME_EVENT_DATE_RANGE)
  private EventDateRange eventDateRange;

  public static final String SERIALIZED_NAME_INSTRUMENT_EVENT = "instrumentEvent";
  @SerializedName(SERIALIZED_NAME_INSTRUMENT_EVENT)
  private InstrumentEvent instrumentEvent;

  public static final String SERIALIZED_NAME_PROPERTIES = "properties";
  @SerializedName(SERIALIZED_NAME_PROPERTIES)
  private List<PerpetualProperty> properties;

  public static final String SERIALIZED_NAME_SEQUENCE_NUMBER = "sequenceNumber";
  @SerializedName(SERIALIZED_NAME_SEQUENCE_NUMBER)
  private Integer sequenceNumber;

  public static final String SERIALIZED_NAME_PARTICIPATION_TYPE = "participationType";
  @SerializedName(SERIALIZED_NAME_PARTICIPATION_TYPE)
  private String participationType = "Mandatory";

  public InstrumentEventHolder() {
  }

  public InstrumentEventHolder instrumentEventId(String instrumentEventId) {
    
    this.instrumentEventId = instrumentEventId;
    return this;
  }

   /**
   * The unique identifier of this corporate action.
   * @return instrumentEventId
  **/
  @jakarta.annotation.Nonnull
  public String getInstrumentEventId() {
    return instrumentEventId;
  }


  public void setInstrumentEventId(String instrumentEventId) {
    this.instrumentEventId = instrumentEventId;
  }


  public InstrumentEventHolder corporateActionSourceId(ResourceId corporateActionSourceId) {
    
    this.corporateActionSourceId = corporateActionSourceId;
    return this;
  }

   /**
   * Get corporateActionSourceId
   * @return corporateActionSourceId
  **/
  @jakarta.annotation.Nullable
  public ResourceId getCorporateActionSourceId() {
    return corporateActionSourceId;
  }


  public void setCorporateActionSourceId(ResourceId corporateActionSourceId) {
    this.corporateActionSourceId = corporateActionSourceId;
  }


  public InstrumentEventHolder instrumentIdentifiers(Map<String, String> instrumentIdentifiers) {
    
    this.instrumentIdentifiers = instrumentIdentifiers;
    return this;
  }

  public InstrumentEventHolder putInstrumentIdentifiersItem(String key, String instrumentIdentifiersItem) {
    if (this.instrumentIdentifiers == null) {
      this.instrumentIdentifiers = new HashMap<>();
    }
    this.instrumentIdentifiers.put(key, instrumentIdentifiersItem);
    return this;
  }

   /**
   * The set of identifiers which determine the instrument this event relates to.
   * @return instrumentIdentifiers
  **/
  @jakarta.annotation.Nonnull
  public Map<String, String> getInstrumentIdentifiers() {
    return instrumentIdentifiers;
  }


  public void setInstrumentIdentifiers(Map<String, String> instrumentIdentifiers) {
    this.instrumentIdentifiers = instrumentIdentifiers;
  }


  public InstrumentEventHolder lusidInstrumentId(String lusidInstrumentId) {
    
    this.lusidInstrumentId = lusidInstrumentId;
    return this;
  }

   /**
   * The LUID for the instrument.
   * @return lusidInstrumentId
  **/
  @jakarta.annotation.Nonnull
  public String getLusidInstrumentId() {
    return lusidInstrumentId;
  }


  public void setLusidInstrumentId(String lusidInstrumentId) {
    this.lusidInstrumentId = lusidInstrumentId;
  }


  public InstrumentEventHolder instrumentScope(String instrumentScope) {
    
    this.instrumentScope = instrumentScope;
    return this;
  }

   /**
   * The scope of the instrument.
   * @return instrumentScope
  **/
  @jakarta.annotation.Nonnull
  public String getInstrumentScope() {
    return instrumentScope;
  }


  public void setInstrumentScope(String instrumentScope) {
    this.instrumentScope = instrumentScope;
  }


  public InstrumentEventHolder description(String description) {
    
    this.description = description;
    return this;
  }

   /**
   * The description of the instrument event.
   * @return description
  **/
  @jakarta.annotation.Nonnull
  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    this.description = description;
  }


  public InstrumentEventHolder eventDateRange(EventDateRange eventDateRange) {
    
    this.eventDateRange = eventDateRange;
    return this;
  }

   /**
   * Get eventDateRange
   * @return eventDateRange
  **/
  @jakarta.annotation.Nonnull
  public EventDateRange getEventDateRange() {
    return eventDateRange;
  }


  public void setEventDateRange(EventDateRange eventDateRange) {
    this.eventDateRange = eventDateRange;
  }


  public InstrumentEventHolder instrumentEvent(InstrumentEvent instrumentEvent) {
    
    this.instrumentEvent = instrumentEvent;
    return this;
  }

   /**
   * Get instrumentEvent
   * @return instrumentEvent
  **/
  @jakarta.annotation.Nonnull
  public InstrumentEvent getInstrumentEvent() {
    return instrumentEvent;
  }


  public void setInstrumentEvent(InstrumentEvent instrumentEvent) {
    this.instrumentEvent = instrumentEvent;
  }


  public InstrumentEventHolder properties(List<PerpetualProperty> properties) {
    
    this.properties = properties;
    return this;
  }

  public InstrumentEventHolder addPropertiesItem(PerpetualProperty propertiesItem) {
    if (this.properties == null) {
      this.properties = new ArrayList<>();
    }
    this.properties.add(propertiesItem);
    return this;
  }

   /**
   * The properties attached to this instrument event.
   * @return properties
  **/
  @jakarta.annotation.Nullable
  public List<PerpetualProperty> getProperties() {
    return properties;
  }


  public void setProperties(List<PerpetualProperty> properties) {
    this.properties = properties;
  }


  public InstrumentEventHolder sequenceNumber(Integer sequenceNumber) {
    
    this.sequenceNumber = sequenceNumber;
    return this;
  }

   /**
   * The order of the instrument event relative others on the same date (0 being processed first). Must be non negative.
   * @return sequenceNumber
  **/
  @jakarta.annotation.Nullable
  public Integer getSequenceNumber() {
    return sequenceNumber;
  }


  public void setSequenceNumber(Integer sequenceNumber) {
    this.sequenceNumber = sequenceNumber;
  }


  public InstrumentEventHolder participationType(String participationType) {
    
    this.participationType = participationType;
    return this;
  }

   /**
   * Is participation in this event Mandatory, MandatoryWithChoices, or Voluntary.
   * @return participationType
  **/
  @jakarta.annotation.Nullable
  public String getParticipationType() {
    return participationType;
  }


  public void setParticipationType(String participationType) {
    this.participationType = participationType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InstrumentEventHolder instrumentEventHolder = (InstrumentEventHolder) o;
    return Objects.equals(this.instrumentEventId, instrumentEventHolder.instrumentEventId) &&
        Objects.equals(this.corporateActionSourceId, instrumentEventHolder.corporateActionSourceId) &&
        Objects.equals(this.instrumentIdentifiers, instrumentEventHolder.instrumentIdentifiers) &&
        Objects.equals(this.lusidInstrumentId, instrumentEventHolder.lusidInstrumentId) &&
        Objects.equals(this.instrumentScope, instrumentEventHolder.instrumentScope) &&
        Objects.equals(this.description, instrumentEventHolder.description) &&
        Objects.equals(this.eventDateRange, instrumentEventHolder.eventDateRange) &&
        Objects.equals(this.instrumentEvent, instrumentEventHolder.instrumentEvent) &&
        Objects.equals(this.properties, instrumentEventHolder.properties) &&
        Objects.equals(this.sequenceNumber, instrumentEventHolder.sequenceNumber) &&
        Objects.equals(this.participationType, instrumentEventHolder.participationType);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(instrumentEventId, corporateActionSourceId, instrumentIdentifiers, lusidInstrumentId, instrumentScope, description, eventDateRange, instrumentEvent, properties, sequenceNumber, participationType);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InstrumentEventHolder {\n");
    sb.append("    instrumentEventId: ").append(toIndentedString(instrumentEventId)).append("\n");
    sb.append("    corporateActionSourceId: ").append(toIndentedString(corporateActionSourceId)).append("\n");
    sb.append("    instrumentIdentifiers: ").append(toIndentedString(instrumentIdentifiers)).append("\n");
    sb.append("    lusidInstrumentId: ").append(toIndentedString(lusidInstrumentId)).append("\n");
    sb.append("    instrumentScope: ").append(toIndentedString(instrumentScope)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    eventDateRange: ").append(toIndentedString(eventDateRange)).append("\n");
    sb.append("    instrumentEvent: ").append(toIndentedString(instrumentEvent)).append("\n");
    sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
    sb.append("    sequenceNumber: ").append(toIndentedString(sequenceNumber)).append("\n");
    sb.append("    participationType: ").append(toIndentedString(participationType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("instrumentEventId");
    openapiFields.add("corporateActionSourceId");
    openapiFields.add("instrumentIdentifiers");
    openapiFields.add("lusidInstrumentId");
    openapiFields.add("instrumentScope");
    openapiFields.add("description");
    openapiFields.add("eventDateRange");
    openapiFields.add("instrumentEvent");
    openapiFields.add("properties");
    openapiFields.add("sequenceNumber");
    openapiFields.add("participationType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("instrumentEventId");
    openapiRequiredFields.add("instrumentIdentifiers");
    openapiRequiredFields.add("lusidInstrumentId");
    openapiRequiredFields.add("instrumentScope");
    openapiRequiredFields.add("description");
    openapiRequiredFields.add("eventDateRange");
    openapiRequiredFields.add("instrumentEvent");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to InstrumentEventHolder
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!InstrumentEventHolder.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InstrumentEventHolder is not found in the empty JSON string", InstrumentEventHolder.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : InstrumentEventHolder.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("instrumentEventId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `instrumentEventId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("instrumentEventId").toString()));
      }
      // validate the optional field `corporateActionSourceId`
      if (jsonObj.get("corporateActionSourceId") != null && !jsonObj.get("corporateActionSourceId").isJsonNull()) {
        ResourceId.validateJsonElement(jsonObj.get("corporateActionSourceId"));
      }
      if (!jsonObj.get("lusidInstrumentId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lusidInstrumentId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lusidInstrumentId").toString()));
      }
      if (!jsonObj.get("instrumentScope").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `instrumentScope` to be a primitive type in the JSON string but got `%s`", jsonObj.get("instrumentScope").toString()));
      }
      if (!jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // validate the required field `eventDateRange`
      EventDateRange.validateJsonElement(jsonObj.get("eventDateRange"));
      // validate the required field `instrumentEvent`
      InstrumentEvent.validateJsonElement(jsonObj.get("instrumentEvent"));
      if (jsonObj.get("properties") != null && !jsonObj.get("properties").isJsonNull()) {
        JsonArray jsonArrayproperties = jsonObj.getAsJsonArray("properties");
        if (jsonArrayproperties != null) {
          // ensure the json data is an array
          if (!jsonObj.get("properties").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `properties` to be an array in the JSON string but got `%s`", jsonObj.get("properties").toString()));
          }

          // validate the optional field `properties` (array)
          for (int i = 0; i < jsonArrayproperties.size(); i++) {
            PerpetualProperty.validateJsonElement(jsonArrayproperties.get(i));
          };
        }
      }
      if ((jsonObj.get("participationType") != null && !jsonObj.get("participationType").isJsonNull()) && !jsonObj.get("participationType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `participationType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("participationType").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InstrumentEventHolder.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InstrumentEventHolder' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InstrumentEventHolder> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InstrumentEventHolder.class));

       return (TypeAdapter<T>) new TypeAdapter<InstrumentEventHolder>() {
           @Override
           public void write(JsonWriter out, InstrumentEventHolder value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InstrumentEventHolder read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of InstrumentEventHolder given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of InstrumentEventHolder
  * @throws IOException if the JSON string is invalid with respect to InstrumentEventHolder
  */
  public static InstrumentEventHolder fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InstrumentEventHolder.class);
  }

 /**
  * Convert an instance of InstrumentEventHolder to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
