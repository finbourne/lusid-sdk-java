/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import com.finbourne.lusid.model.Link;
import com.finbourne.lusid.model.ResourceId;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * SequenceDefinition
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class SequenceDefinition {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private ResourceId id;

  public static final String SERIALIZED_NAME_INCREMENT = "increment";
  @SerializedName(SERIALIZED_NAME_INCREMENT)
  private Long increment;

  public static final String SERIALIZED_NAME_MIN_VALUE = "minValue";
  @SerializedName(SERIALIZED_NAME_MIN_VALUE)
  private Long minValue;

  public static final String SERIALIZED_NAME_MAX_VALUE = "maxValue";
  @SerializedName(SERIALIZED_NAME_MAX_VALUE)
  private Long maxValue;

  public static final String SERIALIZED_NAME_START = "start";
  @SerializedName(SERIALIZED_NAME_START)
  private Long start;

  public static final String SERIALIZED_NAME_VALUE = "value";
  @SerializedName(SERIALIZED_NAME_VALUE)
  private Long value;

  public static final String SERIALIZED_NAME_CYCLE = "cycle";
  @SerializedName(SERIALIZED_NAME_CYCLE)
  private Boolean cycle;

  public static final String SERIALIZED_NAME_PATTERN = "pattern";
  @SerializedName(SERIALIZED_NAME_PATTERN)
  private String pattern;

  public static final String SERIALIZED_NAME_LINKS = "links";
  @SerializedName(SERIALIZED_NAME_LINKS)
  private List<Link> links;

  public SequenceDefinition() {
  }

  public SequenceDefinition id(ResourceId id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @jakarta.annotation.Nonnull
  public ResourceId getId() {
    return id;
  }


  public void setId(ResourceId id) {
    this.id = id;
  }


  public SequenceDefinition increment(Long increment) {
    
    this.increment = increment;
    return this;
  }

   /**
   * The Resource Id of the sequence definition
   * @return increment
  **/
  @jakarta.annotation.Nonnull
  public Long getIncrement() {
    return increment;
  }


  public void setIncrement(Long increment) {
    this.increment = increment;
  }


  public SequenceDefinition minValue(Long minValue) {
    
    this.minValue = minValue;
    return this;
  }

   /**
   * The minimum value of the sequence
   * @return minValue
  **/
  @jakarta.annotation.Nonnull
  public Long getMinValue() {
    return minValue;
  }


  public void setMinValue(Long minValue) {
    this.minValue = minValue;
  }


  public SequenceDefinition maxValue(Long maxValue) {
    
    this.maxValue = maxValue;
    return this;
  }

   /**
   * The maximum value of the sequence
   * @return maxValue
  **/
  @jakarta.annotation.Nonnull
  public Long getMaxValue() {
    return maxValue;
  }


  public void setMaxValue(Long maxValue) {
    this.maxValue = maxValue;
  }


  public SequenceDefinition start(Long start) {
    
    this.start = start;
    return this;
  }

   /**
   * The start value of the sequence
   * @return start
  **/
  @jakarta.annotation.Nonnull
  public Long getStart() {
    return start;
  }


  public void setStart(Long start) {
    this.start = start;
  }


  public SequenceDefinition value(Long value) {
    
    this.value = value;
    return this;
  }

   /**
   * The last used value of the sequence
   * @return value
  **/
  @jakarta.annotation.Nullable
  public Long getValue() {
    return value;
  }


  public void setValue(Long value) {
    this.value = value;
  }


  public SequenceDefinition cycle(Boolean cycle) {
    
    this.cycle = cycle;
    return this;
  }

   /**
   * Indicates if the sequence would start from minimun value once it reaches maximum value. If set to false, a failure would return if the sequence reaches maximum value.
   * @return cycle
  **/
  @jakarta.annotation.Nonnull
  public Boolean getCycle() {
    return cycle;
  }


  public void setCycle(Boolean cycle) {
    this.cycle = cycle;
  }


  public SequenceDefinition pattern(String pattern) {
    
    this.pattern = pattern;
    return this;
  }

   /**
   * The pattern to be used to generate next values in the sequence.
   * @return pattern
  **/
  @jakarta.annotation.Nullable
  public String getPattern() {
    return pattern;
  }


  public void setPattern(String pattern) {
    this.pattern = pattern;
  }


  public SequenceDefinition links(List<Link> links) {
    
    this.links = links;
    return this;
  }

  public SequenceDefinition addLinksItem(Link linksItem) {
    if (this.links == null) {
      this.links = new ArrayList<>();
    }
    this.links.add(linksItem);
    return this;
  }

   /**
   * Get links
   * @return links
  **/
  @jakarta.annotation.Nullable
  public List<Link> getLinks() {
    return links;
  }


  public void setLinks(List<Link> links) {
    this.links = links;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SequenceDefinition sequenceDefinition = (SequenceDefinition) o;
    return Objects.equals(this.id, sequenceDefinition.id) &&
        Objects.equals(this.increment, sequenceDefinition.increment) &&
        Objects.equals(this.minValue, sequenceDefinition.minValue) &&
        Objects.equals(this.maxValue, sequenceDefinition.maxValue) &&
        Objects.equals(this.start, sequenceDefinition.start) &&
        Objects.equals(this.value, sequenceDefinition.value) &&
        Objects.equals(this.cycle, sequenceDefinition.cycle) &&
        Objects.equals(this.pattern, sequenceDefinition.pattern) &&
        Objects.equals(this.links, sequenceDefinition.links);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, increment, minValue, maxValue, start, value, cycle, pattern, links);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SequenceDefinition {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    increment: ").append(toIndentedString(increment)).append("\n");
    sb.append("    minValue: ").append(toIndentedString(minValue)).append("\n");
    sb.append("    maxValue: ").append(toIndentedString(maxValue)).append("\n");
    sb.append("    start: ").append(toIndentedString(start)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("    cycle: ").append(toIndentedString(cycle)).append("\n");
    sb.append("    pattern: ").append(toIndentedString(pattern)).append("\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("increment");
    openapiFields.add("minValue");
    openapiFields.add("maxValue");
    openapiFields.add("start");
    openapiFields.add("value");
    openapiFields.add("cycle");
    openapiFields.add("pattern");
    openapiFields.add("links");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("increment");
    openapiRequiredFields.add("minValue");
    openapiRequiredFields.add("maxValue");
    openapiRequiredFields.add("start");
    openapiRequiredFields.add("cycle");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to SequenceDefinition
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!SequenceDefinition.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SequenceDefinition is not found in the empty JSON string", SequenceDefinition.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!SequenceDefinition.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SequenceDefinition` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SequenceDefinition.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // validate the required field `id`
      ResourceId.validateJsonObject(jsonObj.getAsJsonObject("id"));
      if ((jsonObj.get("pattern") != null && !jsonObj.get("pattern").isJsonNull()) && !jsonObj.get("pattern").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pattern` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pattern").toString()));
      }
      if (jsonObj.get("links") != null && !jsonObj.get("links").isJsonNull()) {
        JsonArray jsonArraylinks = jsonObj.getAsJsonArray("links");
        if (jsonArraylinks != null) {
          // ensure the json data is an array
          if (!jsonObj.get("links").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `links` to be an array in the JSON string but got `%s`", jsonObj.get("links").toString()));
          }

          // validate the optional field `links` (array)
          for (int i = 0; i < jsonArraylinks.size(); i++) {
            Link.validateJsonObject(jsonArraylinks.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SequenceDefinition.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SequenceDefinition' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SequenceDefinition> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SequenceDefinition.class));

       return (TypeAdapter<T>) new TypeAdapter<SequenceDefinition>() {
           @Override
           public void write(JsonWriter out, SequenceDefinition value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SequenceDefinition read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of SequenceDefinition given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of SequenceDefinition
  * @throws IOException if the JSON string is invalid with respect to SequenceDefinition
  */
  public static SequenceDefinition fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SequenceDefinition.class);
  }

 /**
  * Convert an instance of SequenceDefinition to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
