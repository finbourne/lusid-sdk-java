/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * Lineage for cash flow value
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class CashFlowLineage {
  public static final String SERIALIZED_NAME_INSTRUMENT_TYPE = "instrumentType";
  @SerializedName(SERIALIZED_NAME_INSTRUMENT_TYPE)
  private String instrumentType;

  public static final String SERIALIZED_NAME_CASH_FLOW_TYPE = "cashFlowType";
  @SerializedName(SERIALIZED_NAME_CASH_FLOW_TYPE)
  private String cashFlowType;

  public static final String SERIALIZED_NAME_INSTRUMENT_ID = "instrumentId";
  @SerializedName(SERIALIZED_NAME_INSTRUMENT_ID)
  private String instrumentId;

  public static final String SERIALIZED_NAME_LEG_ID = "legId";
  @SerializedName(SERIALIZED_NAME_LEG_ID)
  private String legId;

  public static final String SERIALIZED_NAME_SOURCE_TRANSACTION_ID = "sourceTransactionId";
  @SerializedName(SERIALIZED_NAME_SOURCE_TRANSACTION_ID)
  private String sourceTransactionId;

  public static final String SERIALIZED_NAME_PAY_RECEIVE = "payReceive";
  @SerializedName(SERIALIZED_NAME_PAY_RECEIVE)
  private String payReceive;

  public CashFlowLineage() {
  }

  public CashFlowLineage instrumentType(String instrumentType) {
    
    this.instrumentType = instrumentType;
    return this;
  }

   /**
   * The instrument type of the instrument to which the cash flow belongs to. When upserting CashFlowValues, this  should be null.
   * @return instrumentType
  **/
  @javax.annotation.Nullable
  public String getInstrumentType() {
    return instrumentType;
  }


  public void setInstrumentType(String instrumentType) {
    this.instrumentType = instrumentType;
  }


  public CashFlowLineage cashFlowType(String cashFlowType) {
    
    this.cashFlowType = cashFlowType;
    return this;
  }

   /**
   * The cashflow type.When upserting CashFlowValues, this should be null, or one of [Unknown, Coupon, Notional,  Premium, Principal, Protection, Cash]
   * @return cashFlowType
  **/
  @javax.annotation.Nullable
  public String getCashFlowType() {
    return cashFlowType;
  }


  public void setCashFlowType(String cashFlowType) {
    this.cashFlowType = cashFlowType;
  }


  public CashFlowLineage instrumentId(String instrumentId) {
    
    this.instrumentId = instrumentId;
    return this;
  }

   /**
   * The LUID of the instrument to which the cash flow belongs to. When upserting this should be null.
   * @return instrumentId
  **/
  @javax.annotation.Nullable
  public String getInstrumentId() {
    return instrumentId;
  }


  public void setInstrumentId(String instrumentId) {
    this.instrumentId = instrumentId;
  }


  public CashFlowLineage legId(String legId) {
    
    this.legId = legId;
    return this;
  }

   /**
   * The leg id to which the cash flow belongs to.
   * @return legId
  **/
  @javax.annotation.Nullable
  public String getLegId() {
    return legId;
  }


  public void setLegId(String legId) {
    this.legId = legId;
  }


  public CashFlowLineage sourceTransactionId(String sourceTransactionId) {
    
    this.sourceTransactionId = sourceTransactionId;
    return this;
  }

   /**
   * The source transaction of the instrument to which the cash flow belongs to. When upserting this should be null
   * @return sourceTransactionId
  **/
  @javax.annotation.Nullable
  public String getSourceTransactionId() {
    return sourceTransactionId;
  }


  public void setSourceTransactionId(String sourceTransactionId) {
    this.sourceTransactionId = sourceTransactionId;
  }


  public CashFlowLineage payReceive(String payReceive) {
    
    this.payReceive = payReceive;
    return this;
  }

   /**
   * Does the cash flow belong to the Pay or Receive leg. When upserting this should either be null or one of [Pay, Receive, NotApplicable]
   * @return payReceive
  **/
  @javax.annotation.Nullable
  public String getPayReceive() {
    return payReceive;
  }


  public void setPayReceive(String payReceive) {
    this.payReceive = payReceive;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CashFlowLineage cashFlowLineage = (CashFlowLineage) o;
    return Objects.equals(this.instrumentType, cashFlowLineage.instrumentType) &&
        Objects.equals(this.cashFlowType, cashFlowLineage.cashFlowType) &&
        Objects.equals(this.instrumentId, cashFlowLineage.instrumentId) &&
        Objects.equals(this.legId, cashFlowLineage.legId) &&
        Objects.equals(this.sourceTransactionId, cashFlowLineage.sourceTransactionId) &&
        Objects.equals(this.payReceive, cashFlowLineage.payReceive);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(instrumentType, cashFlowType, instrumentId, legId, sourceTransactionId, payReceive);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CashFlowLineage {\n");
    sb.append("    instrumentType: ").append(toIndentedString(instrumentType)).append("\n");
    sb.append("    cashFlowType: ").append(toIndentedString(cashFlowType)).append("\n");
    sb.append("    instrumentId: ").append(toIndentedString(instrumentId)).append("\n");
    sb.append("    legId: ").append(toIndentedString(legId)).append("\n");
    sb.append("    sourceTransactionId: ").append(toIndentedString(sourceTransactionId)).append("\n");
    sb.append("    payReceive: ").append(toIndentedString(payReceive)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("instrumentType");
    openapiFields.add("cashFlowType");
    openapiFields.add("instrumentId");
    openapiFields.add("legId");
    openapiFields.add("sourceTransactionId");
    openapiFields.add("payReceive");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CashFlowLineage
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!CashFlowLineage.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CashFlowLineage is not found in the empty JSON string", CashFlowLineage.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!CashFlowLineage.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CashFlowLineage` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("instrumentType") != null && !jsonObj.get("instrumentType").isJsonNull()) && !jsonObj.get("instrumentType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `instrumentType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("instrumentType").toString()));
      }
      if ((jsonObj.get("cashFlowType") != null && !jsonObj.get("cashFlowType").isJsonNull()) && !jsonObj.get("cashFlowType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cashFlowType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cashFlowType").toString()));
      }
      if ((jsonObj.get("instrumentId") != null && !jsonObj.get("instrumentId").isJsonNull()) && !jsonObj.get("instrumentId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `instrumentId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("instrumentId").toString()));
      }
      if ((jsonObj.get("legId") != null && !jsonObj.get("legId").isJsonNull()) && !jsonObj.get("legId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `legId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("legId").toString()));
      }
      if ((jsonObj.get("sourceTransactionId") != null && !jsonObj.get("sourceTransactionId").isJsonNull()) && !jsonObj.get("sourceTransactionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourceTransactionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sourceTransactionId").toString()));
      }
      if ((jsonObj.get("payReceive") != null && !jsonObj.get("payReceive").isJsonNull()) && !jsonObj.get("payReceive").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payReceive` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payReceive").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CashFlowLineage.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CashFlowLineage' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CashFlowLineage> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CashFlowLineage.class));

       return (TypeAdapter<T>) new TypeAdapter<CashFlowLineage>() {
           @Override
           public void write(JsonWriter out, CashFlowLineage value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CashFlowLineage read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CashFlowLineage given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CashFlowLineage
  * @throws IOException if the JSON string is invalid with respect to CashFlowLineage
  */
  public static CashFlowLineage fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CashFlowLineage.class);
  }

 /**
  * Convert an instance of CashFlowLineage to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
