/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import java.util.Arrays;
import com.finbourne.lusid.model.ComplianceTemplateParameter;
import com.finbourne.lusid.model.PerpetualProperty;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * ComplianceTemplateVariation
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ComplianceTemplateVariation {
  public static final String SERIALIZED_NAME_LABEL = "label";
  @SerializedName(SERIALIZED_NAME_LABEL)
  private String label;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_REQUIRED_PARAMETERS = "requiredParameters";
  @SerializedName(SERIALIZED_NAME_REQUIRED_PARAMETERS)
  private List<ComplianceTemplateParameter> requiredParameters = new ArrayList<>();

  public static final String SERIALIZED_NAME_PROPERTIES = "properties";
  @SerializedName(SERIALIZED_NAME_PROPERTIES)
  private Map<String, PerpetualProperty> properties = new HashMap<>();

  public ComplianceTemplateVariation() {
  }

  public ComplianceTemplateVariation label(String label) {
    
    this.label = label;
    return this;
  }

   /**
   * Label of a Compliance Template Variation
   * @return label
  **/
  @javax.annotation.Nonnull
  public String getLabel() {
    return label;
  }


  public void setLabel(String label) {
    this.label = label;
  }


  public ComplianceTemplateVariation description(String description) {
    
    this.description = description;
    return this;
  }

   /**
   * The description of the Compliance Template Variation
   * @return description
  **/
  @javax.annotation.Nonnull
  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    this.description = description;
  }


  public ComplianceTemplateVariation requiredParameters(List<ComplianceTemplateParameter> requiredParameters) {
    
    this.requiredParameters = requiredParameters;
    return this;
  }

  public ComplianceTemplateVariation addRequiredParametersItem(ComplianceTemplateParameter requiredParametersItem) {
    if (this.requiredParameters == null) {
      this.requiredParameters = new ArrayList<>();
    }
    this.requiredParameters.add(requiredParametersItem);
    return this;
  }

   /**
   * A parameter required by a Compliance Template Variation
   * @return requiredParameters
  **/
  @javax.annotation.Nonnull
  public List<ComplianceTemplateParameter> getRequiredParameters() {
    return requiredParameters;
  }


  public void setRequiredParameters(List<ComplianceTemplateParameter> requiredParameters) {
    this.requiredParameters = requiredParameters;
  }


  public ComplianceTemplateVariation properties(Map<String, PerpetualProperty> properties) {
    
    this.properties = properties;
    return this;
  }

  public ComplianceTemplateVariation putPropertiesItem(String key, PerpetualProperty propertiesItem) {
    if (this.properties == null) {
      this.properties = new HashMap<>();
    }
    this.properties.put(key, propertiesItem);
    return this;
  }

   /**
   * Properties associated with the Compliance Template Variation
   * @return properties
  **/
  @javax.annotation.Nonnull
  public Map<String, PerpetualProperty> getProperties() {
    return properties;
  }


  public void setProperties(Map<String, PerpetualProperty> properties) {
    this.properties = properties;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ComplianceTemplateVariation complianceTemplateVariation = (ComplianceTemplateVariation) o;
    return Objects.equals(this.label, complianceTemplateVariation.label) &&
        Objects.equals(this.description, complianceTemplateVariation.description) &&
        Objects.equals(this.requiredParameters, complianceTemplateVariation.requiredParameters) &&
        Objects.equals(this.properties, complianceTemplateVariation.properties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(label, description, requiredParameters, properties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ComplianceTemplateVariation {\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    requiredParameters: ").append(toIndentedString(requiredParameters)).append("\n");
    sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("label");
    openapiFields.add("description");
    openapiFields.add("requiredParameters");
    openapiFields.add("properties");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("label");
    openapiRequiredFields.add("description");
    openapiRequiredFields.add("requiredParameters");
    openapiRequiredFields.add("properties");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ComplianceTemplateVariation
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ComplianceTemplateVariation.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ComplianceTemplateVariation is not found in the empty JSON string", ComplianceTemplateVariation.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ComplianceTemplateVariation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ComplianceTemplateVariation` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ComplianceTemplateVariation.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("label").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `label` to be a primitive type in the JSON string but got `%s`", jsonObj.get("label").toString()));
      }
      if (!jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("requiredParameters").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `requiredParameters` to be an array in the JSON string but got `%s`", jsonObj.get("requiredParameters").toString()));
      }

      JsonArray jsonArrayrequiredParameters = jsonObj.getAsJsonArray("requiredParameters");
      // validate the required field `requiredParameters` (array)
      for (int i = 0; i < jsonArrayrequiredParameters.size(); i++) {
        ComplianceTemplateParameter.validateJsonObject(jsonArrayrequiredParameters.get(i).getAsJsonObject());
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ComplianceTemplateVariation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ComplianceTemplateVariation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ComplianceTemplateVariation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ComplianceTemplateVariation.class));

       return (TypeAdapter<T>) new TypeAdapter<ComplianceTemplateVariation>() {
           @Override
           public void write(JsonWriter out, ComplianceTemplateVariation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ComplianceTemplateVariation read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ComplianceTemplateVariation given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ComplianceTemplateVariation
  * @throws IOException if the JSON string is invalid with respect to ComplianceTemplateVariation
  */
  public static ComplianceTemplateVariation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ComplianceTemplateVariation.class);
  }

 /**
  * Convert an instance of ComplianceTemplateVariation to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
