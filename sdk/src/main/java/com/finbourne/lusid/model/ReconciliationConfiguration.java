/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import com.finbourne.lusid.model.ReconciliationSideConfiguration;
import com.finbourne.lusid.model.ResourceId;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * ReconciliationConfiguration
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ReconciliationConfiguration {
  public static final String SERIALIZED_NAME_LEFT = "left";
  @SerializedName(SERIALIZED_NAME_LEFT)
  private ReconciliationSideConfiguration left;

  public static final String SERIALIZED_NAME_RIGHT = "right";
  @SerializedName(SERIALIZED_NAME_RIGHT)
  private ReconciliationSideConfiguration right;

  public static final String SERIALIZED_NAME_MAPPING_ID = "mappingId";
  @SerializedName(SERIALIZED_NAME_MAPPING_ID)
  private ResourceId mappingId;

  public ReconciliationConfiguration() {
  }

  public ReconciliationConfiguration left(ReconciliationSideConfiguration left) {
    
    this.left = left;
    return this;
  }

   /**
   * Get left
   * @return left
  **/
  @jakarta.annotation.Nullable
  public ReconciliationSideConfiguration getLeft() {
    return left;
  }


  public void setLeft(ReconciliationSideConfiguration left) {
    this.left = left;
  }


  public ReconciliationConfiguration right(ReconciliationSideConfiguration right) {
    
    this.right = right;
    return this;
  }

   /**
   * Get right
   * @return right
  **/
  @jakarta.annotation.Nullable
  public ReconciliationSideConfiguration getRight() {
    return right;
  }


  public void setRight(ReconciliationSideConfiguration right) {
    this.right = right;
  }


  public ReconciliationConfiguration mappingId(ResourceId mappingId) {
    
    this.mappingId = mappingId;
    return this;
  }

   /**
   * Get mappingId
   * @return mappingId
  **/
  @jakarta.annotation.Nullable
  public ResourceId getMappingId() {
    return mappingId;
  }


  public void setMappingId(ResourceId mappingId) {
    this.mappingId = mappingId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReconciliationConfiguration reconciliationConfiguration = (ReconciliationConfiguration) o;
    return Objects.equals(this.left, reconciliationConfiguration.left) &&
        Objects.equals(this.right, reconciliationConfiguration.right) &&
        Objects.equals(this.mappingId, reconciliationConfiguration.mappingId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(left, right, mappingId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReconciliationConfiguration {\n");
    sb.append("    left: ").append(toIndentedString(left)).append("\n");
    sb.append("    right: ").append(toIndentedString(right)).append("\n");
    sb.append("    mappingId: ").append(toIndentedString(mappingId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("left");
    openapiFields.add("right");
    openapiFields.add("mappingId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ReconciliationConfiguration
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ReconciliationConfiguration.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReconciliationConfiguration is not found in the empty JSON string", ReconciliationConfiguration.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ReconciliationConfiguration.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ReconciliationConfiguration` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      // validate the optional field `left`
      if (jsonObj.get("left") != null && !jsonObj.get("left").isJsonNull()) {
        ReconciliationSideConfiguration.validateJsonObject(jsonObj.getAsJsonObject("left"));
      }
      // validate the optional field `right`
      if (jsonObj.get("right") != null && !jsonObj.get("right").isJsonNull()) {
        ReconciliationSideConfiguration.validateJsonObject(jsonObj.getAsJsonObject("right"));
      }
      // validate the optional field `mappingId`
      if (jsonObj.get("mappingId") != null && !jsonObj.get("mappingId").isJsonNull()) {
        ResourceId.validateJsonObject(jsonObj.getAsJsonObject("mappingId"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReconciliationConfiguration.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReconciliationConfiguration' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReconciliationConfiguration> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReconciliationConfiguration.class));

       return (TypeAdapter<T>) new TypeAdapter<ReconciliationConfiguration>() {
           @Override
           public void write(JsonWriter out, ReconciliationConfiguration value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ReconciliationConfiguration read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ReconciliationConfiguration given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ReconciliationConfiguration
  * @throws IOException if the JSON string is invalid with respect to ReconciliationConfiguration
  */
  public static ReconciliationConfiguration fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReconciliationConfiguration.class);
  }

 /**
  * Convert an instance of ReconciliationConfiguration to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
