/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * Base class for representing instrument events in LUSID, such as dividends, stock splits, and option exercises.  This base class should not be directly instantiated; each supported InstrumentEventType has a corresponding inherited class.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class InstrumentEvent {
  /**
   * The Type of Event. The available values are: TransitionEvent, InformationalEvent, OpenEvent, CloseEvent, StockSplitEvent, BondDefaultEvent, CashDividendEvent, AmortisationEvent, CashFlowEvent, ExerciseEvent, ResetEvent, TriggerEvent, RawVendorEvent, InformationalErrorEvent
   */
  @JsonAdapter(InstrumentEventTypeEnum.Adapter.class)
  public enum InstrumentEventTypeEnum {
    TRANSITIONEVENT("TransitionEvent"),
    
    INFORMATIONALEVENT("InformationalEvent"),
    
    OPENEVENT("OpenEvent"),
    
    CLOSEEVENT("CloseEvent"),
    
    STOCKSPLITEVENT("StockSplitEvent"),
    
    BONDDEFAULTEVENT("BondDefaultEvent"),
    
    CASHDIVIDENDEVENT("CashDividendEvent"),
    
    AMORTISATIONEVENT("AmortisationEvent"),
    
    CASHFLOWEVENT("CashFlowEvent"),
    
    EXERCISEEVENT("ExerciseEvent"),
    
    RESETEVENT("ResetEvent"),
    
    TRIGGEREVENT("TriggerEvent"),
    
    RAWVENDOREVENT("RawVendorEvent"),
    
    INFORMATIONALERROREVENT("InformationalErrorEvent");

    private String value;

    InstrumentEventTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static InstrumentEventTypeEnum fromValue(String value) {
      for (InstrumentEventTypeEnum b : InstrumentEventTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<InstrumentEventTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final InstrumentEventTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public InstrumentEventTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return InstrumentEventTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_INSTRUMENT_EVENT_TYPE = "instrumentEventType";
  @SerializedName(SERIALIZED_NAME_INSTRUMENT_EVENT_TYPE)
  protected InstrumentEventTypeEnum instrumentEventType;

  public InstrumentEvent() {
  }

  public InstrumentEvent instrumentEventType(InstrumentEventTypeEnum instrumentEventType) {
    
    this.instrumentEventType = instrumentEventType;
    return this;
  }

   /**
   * The Type of Event. The available values are: TransitionEvent, InformationalEvent, OpenEvent, CloseEvent, StockSplitEvent, BondDefaultEvent, CashDividendEvent, AmortisationEvent, CashFlowEvent, ExerciseEvent, ResetEvent, TriggerEvent, RawVendorEvent, InformationalErrorEvent
   * @return instrumentEventType
  **/
  @javax.annotation.Nonnull
  public InstrumentEventTypeEnum getInstrumentEventType() {
    return instrumentEventType;
  }


  public void setInstrumentEventType(InstrumentEventTypeEnum instrumentEventType) {
    this.instrumentEventType = instrumentEventType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InstrumentEvent instrumentEvent = (InstrumentEvent) o;
    return Objects.equals(this.instrumentEventType, instrumentEvent.instrumentEventType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(instrumentEventType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InstrumentEvent {\n");
    sb.append("    instrumentEventType: ").append(toIndentedString(instrumentEventType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("instrumentEventType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("instrumentEventType");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to InstrumentEvent
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!InstrumentEvent.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InstrumentEvent is not found in the empty JSON string", InstrumentEvent.openapiRequiredFields.toString()));
        }
      }

      String discriminatorValue = jsonObj.get("instrumentEventType").getAsString();
      switch (discriminatorValue) {
        case "AmortisationEvent":
          AmortisationEvent.validateJsonObject(jsonObj);
          break;
        case "BondDefaultEvent":
          BondDefaultEvent.validateJsonObject(jsonObj);
          break;
        case "CashDividendEvent":
          CashDividendEvent.validateJsonObject(jsonObj);
          break;
        case "CashFlowEvent":
          CashFlowEvent.validateJsonObject(jsonObj);
          break;
        case "CloseEvent":
          CloseEvent.validateJsonObject(jsonObj);
          break;
        case "ExerciseEvent":
          ExerciseEvent.validateJsonObject(jsonObj);
          break;
        case "InformationalErrorEvent":
          InformationalErrorEvent.validateJsonObject(jsonObj);
          break;
        case "InformationalEvent":
          InformationalEvent.validateJsonObject(jsonObj);
          break;
        case "OpenEvent":
          OpenEvent.validateJsonObject(jsonObj);
          break;
        case "RawVendorEvent":
          RawVendorEvent.validateJsonObject(jsonObj);
          break;
        case "ResetEvent":
          ResetEvent.validateJsonObject(jsonObj);
          break;
        case "StockSplitEvent":
          StockSplitEvent.validateJsonObject(jsonObj);
          break;
        case "TransitionEvent":
          TransitionEvent.validateJsonObject(jsonObj);
          break;
        case "TriggerEvent":
          TriggerEvent.validateJsonObject(jsonObj);
          break;
        default: 
          throw new IllegalArgumentException(String.format("The value of the `instrumentEventType` field `%s` does not match any key defined in the discriminator's mapping.", discriminatorValue));
      }
  }


 /**
  * Create an instance of InstrumentEvent given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of InstrumentEvent
  * @throws IOException if the JSON string is invalid with respect to InstrumentEvent
  */
  public static InstrumentEvent fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InstrumentEvent.class);
  }

 /**
  * Convert an instance of InstrumentEvent to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
