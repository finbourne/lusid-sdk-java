/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import com.finbourne.lusid.model.CurrencyAndAmount;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * RealisedGainLoss
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class RealisedGainLoss {
  public static final String SERIALIZED_NAME_INSTRUMENT_SCOPE = "instrumentScope";
  @SerializedName(SERIALIZED_NAME_INSTRUMENT_SCOPE)
  private String instrumentScope;

  public static final String SERIALIZED_NAME_INSTRUMENT_UID = "instrumentUid";
  @SerializedName(SERIALIZED_NAME_INSTRUMENT_UID)
  private String instrumentUid;

  public static final String SERIALIZED_NAME_UNITS = "units";
  @SerializedName(SERIALIZED_NAME_UNITS)
  private java.math.BigDecimal units;

  public static final String SERIALIZED_NAME_PURCHASE_TRADE_DATE = "purchaseTradeDate";
  @SerializedName(SERIALIZED_NAME_PURCHASE_TRADE_DATE)
  private OffsetDateTime purchaseTradeDate;

  public static final String SERIALIZED_NAME_PURCHASE_SETTLEMENT_DATE = "purchaseSettlementDate";
  @SerializedName(SERIALIZED_NAME_PURCHASE_SETTLEMENT_DATE)
  private OffsetDateTime purchaseSettlementDate;

  public static final String SERIALIZED_NAME_PURCHASE_PRICE = "purchasePrice";
  @SerializedName(SERIALIZED_NAME_PURCHASE_PRICE)
  private java.math.BigDecimal purchasePrice;

  public static final String SERIALIZED_NAME_COST_TRADE_CCY = "costTradeCcy";
  @SerializedName(SERIALIZED_NAME_COST_TRADE_CCY)
  private CurrencyAndAmount costTradeCcy;

  public static final String SERIALIZED_NAME_COST_PORTFOLIO_CCY = "costPortfolioCcy";
  @SerializedName(SERIALIZED_NAME_COST_PORTFOLIO_CCY)
  private CurrencyAndAmount costPortfolioCcy;

  public static final String SERIALIZED_NAME_REALISED_TRADE_CCY = "realisedTradeCcy";
  @SerializedName(SERIALIZED_NAME_REALISED_TRADE_CCY)
  private CurrencyAndAmount realisedTradeCcy;

  public static final String SERIALIZED_NAME_REALISED_TOTAL = "realisedTotal";
  @SerializedName(SERIALIZED_NAME_REALISED_TOTAL)
  private CurrencyAndAmount realisedTotal;

  public static final String SERIALIZED_NAME_REALISED_MARKET = "realisedMarket";
  @SerializedName(SERIALIZED_NAME_REALISED_MARKET)
  private CurrencyAndAmount realisedMarket;

  public static final String SERIALIZED_NAME_REALISED_CURRENCY = "realisedCurrency";
  @SerializedName(SERIALIZED_NAME_REALISED_CURRENCY)
  private CurrencyAndAmount realisedCurrency;

  public RealisedGainLoss() {
  }

  
  public RealisedGainLoss(
     OffsetDateTime purchaseTradeDate, 
     OffsetDateTime purchaseSettlementDate
  ) {
    this();
    this.purchaseTradeDate = purchaseTradeDate;
    this.purchaseSettlementDate = purchaseSettlementDate;
  }

  public RealisedGainLoss instrumentScope(String instrumentScope) {
    
    this.instrumentScope = instrumentScope;
    return this;
  }

   /**
   * The scope in which the instrument lies.
   * @return instrumentScope
  **/
  @jakarta.annotation.Nullable
  public String getInstrumentScope() {
    return instrumentScope;
  }


  public void setInstrumentScope(String instrumentScope) {
    this.instrumentScope = instrumentScope;
  }


  public RealisedGainLoss instrumentUid(String instrumentUid) {
    
    this.instrumentUid = instrumentUid;
    return this;
  }

   /**
   * The unique Lusid Instrument Id (LUID) of the instrument that this gain or loss is associated with.
   * @return instrumentUid
  **/
  @jakarta.annotation.Nonnull
  public String getInstrumentUid() {
    return instrumentUid;
  }


  public void setInstrumentUid(String instrumentUid) {
    this.instrumentUid = instrumentUid;
  }


  public RealisedGainLoss units(java.math.BigDecimal units) {
    
    this.units = units;
    return this;
  }

   /**
   * The number of units of the associated instrument against which the gain or loss has been realised.
   * @return units
  **/
  @jakarta.annotation.Nonnull
  public java.math.BigDecimal getUnits() {
    return units;
  }


  public void setUnits(java.math.BigDecimal units) {
    this.units = units;
  }


   /**
   * The effective datetime that the units associated with this gain or loss where originally purchased.
   * @return purchaseTradeDate
  **/
  @jakarta.annotation.Nullable
  public OffsetDateTime getPurchaseTradeDate() {
    return purchaseTradeDate;
  }




   /**
   * The effective datetime that the units associated with this gain or loss where originally settled.
   * @return purchaseSettlementDate
  **/
  @jakarta.annotation.Nullable
  public OffsetDateTime getPurchaseSettlementDate() {
    return purchaseSettlementDate;
  }




  public RealisedGainLoss purchasePrice(java.math.BigDecimal purchasePrice) {
    
    this.purchasePrice = purchasePrice;
    return this;
  }

   /**
   * The purchase price of each unit associated with this gain or loss.
   * @return purchasePrice
  **/
  @jakarta.annotation.Nullable
  public java.math.BigDecimal getPurchasePrice() {
    return purchasePrice;
  }


  public void setPurchasePrice(java.math.BigDecimal purchasePrice) {
    this.purchasePrice = purchasePrice;
  }


  public RealisedGainLoss costTradeCcy(CurrencyAndAmount costTradeCcy) {
    
    this.costTradeCcy = costTradeCcy;
    return this;
  }

   /**
   * Get costTradeCcy
   * @return costTradeCcy
  **/
  @jakarta.annotation.Nonnull
  public CurrencyAndAmount getCostTradeCcy() {
    return costTradeCcy;
  }


  public void setCostTradeCcy(CurrencyAndAmount costTradeCcy) {
    this.costTradeCcy = costTradeCcy;
  }


  public RealisedGainLoss costPortfolioCcy(CurrencyAndAmount costPortfolioCcy) {
    
    this.costPortfolioCcy = costPortfolioCcy;
    return this;
  }

   /**
   * Get costPortfolioCcy
   * @return costPortfolioCcy
  **/
  @jakarta.annotation.Nonnull
  public CurrencyAndAmount getCostPortfolioCcy() {
    return costPortfolioCcy;
  }


  public void setCostPortfolioCcy(CurrencyAndAmount costPortfolioCcy) {
    this.costPortfolioCcy = costPortfolioCcy;
  }


  public RealisedGainLoss realisedTradeCcy(CurrencyAndAmount realisedTradeCcy) {
    
    this.realisedTradeCcy = realisedTradeCcy;
    return this;
  }

   /**
   * Get realisedTradeCcy
   * @return realisedTradeCcy
  **/
  @jakarta.annotation.Nonnull
  public CurrencyAndAmount getRealisedTradeCcy() {
    return realisedTradeCcy;
  }


  public void setRealisedTradeCcy(CurrencyAndAmount realisedTradeCcy) {
    this.realisedTradeCcy = realisedTradeCcy;
  }


  public RealisedGainLoss realisedTotal(CurrencyAndAmount realisedTotal) {
    
    this.realisedTotal = realisedTotal;
    return this;
  }

   /**
   * Get realisedTotal
   * @return realisedTotal
  **/
  @jakarta.annotation.Nonnull
  public CurrencyAndAmount getRealisedTotal() {
    return realisedTotal;
  }


  public void setRealisedTotal(CurrencyAndAmount realisedTotal) {
    this.realisedTotal = realisedTotal;
  }


  public RealisedGainLoss realisedMarket(CurrencyAndAmount realisedMarket) {
    
    this.realisedMarket = realisedMarket;
    return this;
  }

   /**
   * Get realisedMarket
   * @return realisedMarket
  **/
  @jakarta.annotation.Nullable
  public CurrencyAndAmount getRealisedMarket() {
    return realisedMarket;
  }


  public void setRealisedMarket(CurrencyAndAmount realisedMarket) {
    this.realisedMarket = realisedMarket;
  }


  public RealisedGainLoss realisedCurrency(CurrencyAndAmount realisedCurrency) {
    
    this.realisedCurrency = realisedCurrency;
    return this;
  }

   /**
   * Get realisedCurrency
   * @return realisedCurrency
  **/
  @jakarta.annotation.Nullable
  public CurrencyAndAmount getRealisedCurrency() {
    return realisedCurrency;
  }


  public void setRealisedCurrency(CurrencyAndAmount realisedCurrency) {
    this.realisedCurrency = realisedCurrency;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RealisedGainLoss realisedGainLoss = (RealisedGainLoss) o;
    return Objects.equals(this.instrumentScope, realisedGainLoss.instrumentScope) &&
        Objects.equals(this.instrumentUid, realisedGainLoss.instrumentUid) &&
        (this.units.compareTo(realisedGainLoss.getUnits()) == 0) &&
        Objects.equals(this.purchaseTradeDate, realisedGainLoss.purchaseTradeDate) &&
        Objects.equals(this.purchaseSettlementDate, realisedGainLoss.purchaseSettlementDate) &&
        (this.purchasePrice.compareTo(realisedGainLoss.getPurchasePrice()) == 0) &&
        Objects.equals(this.costTradeCcy, realisedGainLoss.costTradeCcy) &&
        Objects.equals(this.costPortfolioCcy, realisedGainLoss.costPortfolioCcy) &&
        Objects.equals(this.realisedTradeCcy, realisedGainLoss.realisedTradeCcy) &&
        Objects.equals(this.realisedTotal, realisedGainLoss.realisedTotal) &&
        Objects.equals(this.realisedMarket, realisedGainLoss.realisedMarket) &&
        Objects.equals(this.realisedCurrency, realisedGainLoss.realisedCurrency);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(instrumentScope, instrumentUid, units, purchaseTradeDate, purchaseSettlementDate, purchasePrice, costTradeCcy, costPortfolioCcy, realisedTradeCcy, realisedTotal, realisedMarket, realisedCurrency);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RealisedGainLoss {\n");
    sb.append("    instrumentScope: ").append(toIndentedString(instrumentScope)).append("\n");
    sb.append("    instrumentUid: ").append(toIndentedString(instrumentUid)).append("\n");
    sb.append("    units: ").append(toIndentedString(units)).append("\n");
    sb.append("    purchaseTradeDate: ").append(toIndentedString(purchaseTradeDate)).append("\n");
    sb.append("    purchaseSettlementDate: ").append(toIndentedString(purchaseSettlementDate)).append("\n");
    sb.append("    purchasePrice: ").append(toIndentedString(purchasePrice)).append("\n");
    sb.append("    costTradeCcy: ").append(toIndentedString(costTradeCcy)).append("\n");
    sb.append("    costPortfolioCcy: ").append(toIndentedString(costPortfolioCcy)).append("\n");
    sb.append("    realisedTradeCcy: ").append(toIndentedString(realisedTradeCcy)).append("\n");
    sb.append("    realisedTotal: ").append(toIndentedString(realisedTotal)).append("\n");
    sb.append("    realisedMarket: ").append(toIndentedString(realisedMarket)).append("\n");
    sb.append("    realisedCurrency: ").append(toIndentedString(realisedCurrency)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("instrumentScope");
    openapiFields.add("instrumentUid");
    openapiFields.add("units");
    openapiFields.add("purchaseTradeDate");
    openapiFields.add("purchaseSettlementDate");
    openapiFields.add("purchasePrice");
    openapiFields.add("costTradeCcy");
    openapiFields.add("costPortfolioCcy");
    openapiFields.add("realisedTradeCcy");
    openapiFields.add("realisedTotal");
    openapiFields.add("realisedMarket");
    openapiFields.add("realisedCurrency");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("instrumentUid");
    openapiRequiredFields.add("units");
    openapiRequiredFields.add("costTradeCcy");
    openapiRequiredFields.add("costPortfolioCcy");
    openapiRequiredFields.add("realisedTradeCcy");
    openapiRequiredFields.add("realisedTotal");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to RealisedGainLoss
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RealisedGainLoss.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RealisedGainLoss is not found in the empty JSON string", RealisedGainLoss.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : RealisedGainLoss.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("instrumentScope") != null && !jsonObj.get("instrumentScope").isJsonNull()) && !jsonObj.get("instrumentScope").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `instrumentScope` to be a primitive type in the JSON string but got `%s`", jsonObj.get("instrumentScope").toString()));
      }
      if (!jsonObj.get("instrumentUid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `instrumentUid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("instrumentUid").toString()));
      }
      // validate the required field `costTradeCcy`
      CurrencyAndAmount.validateJsonElement(jsonObj.get("costTradeCcy"));
      // validate the required field `costPortfolioCcy`
      CurrencyAndAmount.validateJsonElement(jsonObj.get("costPortfolioCcy"));
      // validate the required field `realisedTradeCcy`
      CurrencyAndAmount.validateJsonElement(jsonObj.get("realisedTradeCcy"));
      // validate the required field `realisedTotal`
      CurrencyAndAmount.validateJsonElement(jsonObj.get("realisedTotal"));
      // validate the optional field `realisedMarket`
      if (jsonObj.get("realisedMarket") != null && !jsonObj.get("realisedMarket").isJsonNull()) {
        CurrencyAndAmount.validateJsonElement(jsonObj.get("realisedMarket"));
      }
      // validate the optional field `realisedCurrency`
      if (jsonObj.get("realisedCurrency") != null && !jsonObj.get("realisedCurrency").isJsonNull()) {
        CurrencyAndAmount.validateJsonElement(jsonObj.get("realisedCurrency"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RealisedGainLoss.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RealisedGainLoss' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RealisedGainLoss> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RealisedGainLoss.class));

       return (TypeAdapter<T>) new TypeAdapter<RealisedGainLoss>() {
           @Override
           public void write(JsonWriter out, RealisedGainLoss value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RealisedGainLoss read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of RealisedGainLoss given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of RealisedGainLoss
  * @throws IOException if the JSON string is invalid with respect to RealisedGainLoss
  */
  public static RealisedGainLoss fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RealisedGainLoss.class);
  }

 /**
  * Convert an instance of RealisedGainLoss to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
