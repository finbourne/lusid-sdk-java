/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import com.finbourne.lusid.model.FixedLegAllOfOverrides;
import com.finbourne.lusid.model.InstrumentLeg;
import com.finbourne.lusid.model.LegDefinition;
import com.finbourne.lusid.model.TimeZoneConventions;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * LUSID representation of a Floating Rate Leg.
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class FloatingLeg extends InstrumentLeg {
  public static final String SERIALIZED_NAME_START_DATE = "startDate";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  private OffsetDateTime startDate;

  public static final String SERIALIZED_NAME_MATURITY_DATE = "maturityDate";
  @SerializedName(SERIALIZED_NAME_MATURITY_DATE)
  private OffsetDateTime maturityDate;

  public static final String SERIALIZED_NAME_LEG_DEFINITION = "legDefinition";
  @SerializedName(SERIALIZED_NAME_LEG_DEFINITION)
  private LegDefinition legDefinition;

  public static final String SERIALIZED_NAME_NOTIONAL = "notional";
  @SerializedName(SERIALIZED_NAME_NOTIONAL)
  private java.math.BigDecimal notional;

  public static final String SERIALIZED_NAME_OVERRIDES = "overrides";
  @SerializedName(SERIALIZED_NAME_OVERRIDES)
  private FixedLegAllOfOverrides overrides;

  public static final String SERIALIZED_NAME_CAP_RATE = "capRate";
  @SerializedName(SERIALIZED_NAME_CAP_RATE)
  private java.math.BigDecimal capRate;

  public static final String SERIALIZED_NAME_FLOOR_RATE = "floorRate";
  @SerializedName(SERIALIZED_NAME_FLOOR_RATE)
  private java.math.BigDecimal floorRate;

  public static final String SERIALIZED_NAME_TIME_ZONE_CONVENTIONS = "timeZoneConventions";
  @SerializedName(SERIALIZED_NAME_TIME_ZONE_CONVENTIONS)
  private TimeZoneConventions timeZoneConventions;

  public FloatingLeg() {
    // this.instrumentType = this.getClass().getSimpleName();
  }

  public FloatingLeg startDate(OffsetDateTime startDate) {
    
    this.startDate = startDate;
    return this;
  }

   /**
   * The start date of the instrument. This is normally synonymous with the trade-date.
   * @return startDate
  **/
  @jakarta.annotation.Nonnull
  public OffsetDateTime getStartDate() {
    return startDate;
  }


  public void setStartDate(OffsetDateTime startDate) {
    this.startDate = startDate;
  }


  public FloatingLeg maturityDate(OffsetDateTime maturityDate) {
    
    this.maturityDate = maturityDate;
    return this;
  }

   /**
   * The final maturity date of the instrument. This means the last date on which the instruments makes a payment of any amount.  For the avoidance of doubt, that is not necessarily prior to its last sensitivity date for the purposes of risk; e.g. instruments such as  Constant Maturity Swaps (CMS) often have sensitivities to rates that may well be observed or set prior to the maturity date, but refer to a termination date beyond it.
   * @return maturityDate
  **/
  @jakarta.annotation.Nonnull
  public OffsetDateTime getMaturityDate() {
    return maturityDate;
  }


  public void setMaturityDate(OffsetDateTime maturityDate) {
    this.maturityDate = maturityDate;
  }


  public FloatingLeg legDefinition(LegDefinition legDefinition) {
    
    this.legDefinition = legDefinition;
    return this;
  }

   /**
   * Get legDefinition
   * @return legDefinition
  **/
  @jakarta.annotation.Nonnull
  public LegDefinition getLegDefinition() {
    return legDefinition;
  }


  public void setLegDefinition(LegDefinition legDefinition) {
    this.legDefinition = legDefinition;
  }


  public FloatingLeg notional(java.math.BigDecimal notional) {
    
    this.notional = notional;
    return this;
  }

   /**
   * Scaling factor to apply to leg quantities.
   * @return notional
  **/
  @jakarta.annotation.Nonnull
  public java.math.BigDecimal getNotional() {
    return notional;
  }


  public void setNotional(java.math.BigDecimal notional) {
    this.notional = notional;
  }


  public FloatingLeg overrides(FixedLegAllOfOverrides overrides) {
    
    this.overrides = overrides;
    return this;
  }

   /**
   * Get overrides
   * @return overrides
  **/
  @jakarta.annotation.Nullable
  public FixedLegAllOfOverrides getOverrides() {
    return overrides;
  }


  public void setOverrides(FixedLegAllOfOverrides overrides) {
    this.overrides = overrides;
  }


  public FloatingLeg capRate(java.math.BigDecimal capRate) {
    
    this.capRate = capRate;
    return this;
  }

   /**
   * The maximum floating rate which a cashflow can accrue.
   * @return capRate
  **/
  @jakarta.annotation.Nullable
  public java.math.BigDecimal getCapRate() {
    return capRate;
  }


  public void setCapRate(java.math.BigDecimal capRate) {
    this.capRate = capRate;
  }


  public FloatingLeg floorRate(java.math.BigDecimal floorRate) {
    
    this.floorRate = floorRate;
    return this;
  }

   /**
   * The minimum floating rate which a cashflow can accrue.
   * @return floorRate
  **/
  @jakarta.annotation.Nullable
  public java.math.BigDecimal getFloorRate() {
    return floorRate;
  }


  public void setFloorRate(java.math.BigDecimal floorRate) {
    this.floorRate = floorRate;
  }


  public FloatingLeg timeZoneConventions(TimeZoneConventions timeZoneConventions) {
    
    this.timeZoneConventions = timeZoneConventions;
    return this;
  }

   /**
   * Get timeZoneConventions
   * @return timeZoneConventions
  **/
  @jakarta.annotation.Nullable
  public TimeZoneConventions getTimeZoneConventions() {
    return timeZoneConventions;
  }


  public void setTimeZoneConventions(TimeZoneConventions timeZoneConventions) {
    this.timeZoneConventions = timeZoneConventions;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FloatingLeg floatingLeg = (FloatingLeg) o;
    return Objects.equals(this.startDate, floatingLeg.startDate) &&
        Objects.equals(this.maturityDate, floatingLeg.maturityDate) &&
        Objects.equals(this.legDefinition, floatingLeg.legDefinition) &&
        (this.notional.compareTo(floatingLeg.getNotional()) == 0) &&
        Objects.equals(this.overrides, floatingLeg.overrides) &&
        (this.capRate.compareTo(floatingLeg.getCapRate()) == 0) &&
        (this.floorRate.compareTo(floatingLeg.getFloorRate()) == 0) &&
        Objects.equals(this.timeZoneConventions, floatingLeg.timeZoneConventions) &&
        super.equals(o);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(startDate, maturityDate, legDefinition, notional, overrides, capRate, floorRate, timeZoneConventions, super.hashCode());
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FloatingLeg {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    maturityDate: ").append(toIndentedString(maturityDate)).append("\n");
    sb.append("    legDefinition: ").append(toIndentedString(legDefinition)).append("\n");
    sb.append("    notional: ").append(toIndentedString(notional)).append("\n");
    sb.append("    overrides: ").append(toIndentedString(overrides)).append("\n");
    sb.append("    capRate: ").append(toIndentedString(capRate)).append("\n");
    sb.append("    floorRate: ").append(toIndentedString(floorRate)).append("\n");
    sb.append("    timeZoneConventions: ").append(toIndentedString(timeZoneConventions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("instrumentType");
    openapiFields.add("startDate");
    openapiFields.add("maturityDate");
    openapiFields.add("legDefinition");
    openapiFields.add("notional");
    openapiFields.add("overrides");
    openapiFields.add("capRate");
    openapiFields.add("floorRate");
    openapiFields.add("timeZoneConventions");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("startDate");
    openapiRequiredFields.add("maturityDate");
    openapiRequiredFields.add("legDefinition");
    openapiRequiredFields.add("notional");
    openapiRequiredFields.add("instrumentType");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to FloatingLeg
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FloatingLeg.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FloatingLeg is not found in the empty JSON string", FloatingLeg.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : FloatingLeg.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FloatingLeg.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FloatingLeg' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FloatingLeg> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FloatingLeg.class));

       return (TypeAdapter<T>) new TypeAdapter<FloatingLeg>() {
           @Override
           public void write(JsonWriter out, FloatingLeg value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FloatingLeg read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of FloatingLeg given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of FloatingLeg
  * @throws IOException if the JSON string is invalid with respect to FloatingLeg
  */
  public static FloatingLeg fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FloatingLeg.class);
  }

 /**
  * Convert an instance of FloatingLeg to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
