/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import com.finbourne.lusid.model.Property;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * A definition for the period you wish to close
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ClosePeriodDiaryEntryRequest {
  public static final String SERIALIZED_NAME_DIARY_ENTRY_CODE = "diaryEntryCode";
  @SerializedName(SERIALIZED_NAME_DIARY_ENTRY_CODE)
  private String diaryEntryCode;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_EFFECTIVE_AT = "effectiveAt";
  @SerializedName(SERIALIZED_NAME_EFFECTIVE_AT)
  private OffsetDateTime effectiveAt;

  public static final String SERIALIZED_NAME_QUERY_AS_AT = "queryAsAt";
  @SerializedName(SERIALIZED_NAME_QUERY_AS_AT)
  private OffsetDateTime queryAsAt;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_PROPERTIES = "properties";
  @SerializedName(SERIALIZED_NAME_PROPERTIES)
  private Map<String, Property> properties;

  public static final String SERIALIZED_NAME_CLOSING_OPTIONS = "closingOptions";
  @SerializedName(SERIALIZED_NAME_CLOSING_OPTIONS)
  private List<String> closingOptions;

  public ClosePeriodDiaryEntryRequest() {
  }

  public ClosePeriodDiaryEntryRequest diaryEntryCode(String diaryEntryCode) {
    
    this.diaryEntryCode = diaryEntryCode;
    return this;
  }

   /**
   * Unique code assigned to a period. When left blank a code will be created by the system in the format &#39;yyyyMMDD&#39;.
   * @return diaryEntryCode
  **/
  @jakarta.annotation.Nullable
  public String getDiaryEntryCode() {
    return diaryEntryCode;
  }


  public void setDiaryEntryCode(String diaryEntryCode) {
    this.diaryEntryCode = diaryEntryCode;
  }


  public ClosePeriodDiaryEntryRequest name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Identifiable Name assigned to the period. Where left blank, the system will generate a name in the format &#39;yyyyMMDD&#39;.
   * @return name
  **/
  @jakarta.annotation.Nullable
  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public ClosePeriodDiaryEntryRequest effectiveAt(OffsetDateTime effectiveAt) {
    
    this.effectiveAt = effectiveAt;
    return this;
  }

   /**
   * The effective time of the diary entry.
   * @return effectiveAt
  **/
  @jakarta.annotation.Nullable
  public OffsetDateTime getEffectiveAt() {
    return effectiveAt;
  }


  public void setEffectiveAt(OffsetDateTime effectiveAt) {
    this.effectiveAt = effectiveAt;
  }


  public ClosePeriodDiaryEntryRequest queryAsAt(OffsetDateTime queryAsAt) {
    
    this.queryAsAt = queryAsAt;
    return this;
  }

   /**
   * The query time of the diary entry. Defaults to latest.
   * @return queryAsAt
  **/
  @jakarta.annotation.Nullable
  public OffsetDateTime getQueryAsAt() {
    return queryAsAt;
  }


  public void setQueryAsAt(OffsetDateTime queryAsAt) {
    this.queryAsAt = queryAsAt;
  }


  public ClosePeriodDiaryEntryRequest status(String status) {
    
    this.status = status;
    return this;
  }

   /**
   * The status of the diary entry. Defaults to &#39;Undefined&#39; for valuation points and &#39;Estimate&#39; for closing periods.
   * @return status
  **/
  @jakarta.annotation.Nullable
  public String getStatus() {
    return status;
  }


  public void setStatus(String status) {
    this.status = status;
  }


  public ClosePeriodDiaryEntryRequest properties(Map<String, Property> properties) {
    
    this.properties = properties;
    return this;
  }

  public ClosePeriodDiaryEntryRequest putPropertiesItem(String key, Property propertiesItem) {
    if (this.properties == null) {
      this.properties = new HashMap<>();
    }
    this.properties.put(key, propertiesItem);
    return this;
  }

   /**
   * A set of properties for the diary entry.
   * @return properties
  **/
  @jakarta.annotation.Nullable
  public Map<String, Property> getProperties() {
    return properties;
  }


  public void setProperties(Map<String, Property> properties) {
    this.properties = properties;
  }


  public ClosePeriodDiaryEntryRequest closingOptions(List<String> closingOptions) {
    
    this.closingOptions = closingOptions;
    return this;
  }

  public ClosePeriodDiaryEntryRequest addClosingOptionsItem(String closingOptionsItem) {
    if (this.closingOptions == null) {
      this.closingOptions = new ArrayList<>();
    }
    this.closingOptions.add(closingOptionsItem);
    return this;
  }

   /**
   * The options which will be executed once a period is closed or locked.
   * @return closingOptions
  **/
  @jakarta.annotation.Nullable
  public List<String> getClosingOptions() {
    return closingOptions;
  }


  public void setClosingOptions(List<String> closingOptions) {
    this.closingOptions = closingOptions;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ClosePeriodDiaryEntryRequest closePeriodDiaryEntryRequest = (ClosePeriodDiaryEntryRequest) o;
    return Objects.equals(this.diaryEntryCode, closePeriodDiaryEntryRequest.diaryEntryCode) &&
        Objects.equals(this.name, closePeriodDiaryEntryRequest.name) &&
        Objects.equals(this.effectiveAt, closePeriodDiaryEntryRequest.effectiveAt) &&
        Objects.equals(this.queryAsAt, closePeriodDiaryEntryRequest.queryAsAt) &&
        Objects.equals(this.status, closePeriodDiaryEntryRequest.status) &&
        Objects.equals(this.properties, closePeriodDiaryEntryRequest.properties) &&
        Objects.equals(this.closingOptions, closePeriodDiaryEntryRequest.closingOptions);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(diaryEntryCode, name, effectiveAt, queryAsAt, status, properties, closingOptions);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ClosePeriodDiaryEntryRequest {\n");
    sb.append("    diaryEntryCode: ").append(toIndentedString(diaryEntryCode)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    effectiveAt: ").append(toIndentedString(effectiveAt)).append("\n");
    sb.append("    queryAsAt: ").append(toIndentedString(queryAsAt)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
    sb.append("    closingOptions: ").append(toIndentedString(closingOptions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("diaryEntryCode");
    openapiFields.add("name");
    openapiFields.add("effectiveAt");
    openapiFields.add("queryAsAt");
    openapiFields.add("status");
    openapiFields.add("properties");
    openapiFields.add("closingOptions");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ClosePeriodDiaryEntryRequest
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ClosePeriodDiaryEntryRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ClosePeriodDiaryEntryRequest is not found in the empty JSON string", ClosePeriodDiaryEntryRequest.openapiRequiredFields.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("diaryEntryCode") != null && !jsonObj.get("diaryEntryCode").isJsonNull()) && !jsonObj.get("diaryEntryCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `diaryEntryCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("diaryEntryCode").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("closingOptions") != null && !jsonObj.get("closingOptions").isJsonNull() && !jsonObj.get("closingOptions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `closingOptions` to be an array in the JSON string but got `%s`", jsonObj.get("closingOptions").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ClosePeriodDiaryEntryRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ClosePeriodDiaryEntryRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ClosePeriodDiaryEntryRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ClosePeriodDiaryEntryRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<ClosePeriodDiaryEntryRequest>() {
           @Override
           public void write(JsonWriter out, ClosePeriodDiaryEntryRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ClosePeriodDiaryEntryRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ClosePeriodDiaryEntryRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ClosePeriodDiaryEntryRequest
  * @throws IOException if the JSON string is invalid with respect to ClosePeriodDiaryEntryRequest
  */
  public static ClosePeriodDiaryEntryRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ClosePeriodDiaryEntryRequest.class);
  }

 /**
  * Convert an instance of ClosePeriodDiaryEntryRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
