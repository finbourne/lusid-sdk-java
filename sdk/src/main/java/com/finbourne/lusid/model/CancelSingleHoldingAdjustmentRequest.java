/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import com.finbourne.lusid.model.PerpetualProperty;
import com.finbourne.lusid.model.ResourceId;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * This request specifies single target holding. i.e. holding data that the system should match. And deletes previous adjustment made to that holding
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class CancelSingleHoldingAdjustmentRequest {
  public static final String SERIALIZED_NAME_INSTRUMENT_IDENTIFIERS = "instrumentIdentifiers";
  @SerializedName(SERIALIZED_NAME_INSTRUMENT_IDENTIFIERS)
  private Map<String, String> instrumentIdentifiers = new HashMap<>();

  public static final String SERIALIZED_NAME_SUB_HOLDING_KEYS = "subHoldingKeys";
  @SerializedName(SERIALIZED_NAME_SUB_HOLDING_KEYS)
  private Map<String, PerpetualProperty> subHoldingKeys;

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private String currency;

  public static final String SERIALIZED_NAME_CUSTODIAN_ACCOUNT_ID = "custodianAccountId";
  @SerializedName(SERIALIZED_NAME_CUSTODIAN_ACCOUNT_ID)
  private ResourceId custodianAccountId;

  public CancelSingleHoldingAdjustmentRequest() {
  }

  public CancelSingleHoldingAdjustmentRequest instrumentIdentifiers(Map<String, String> instrumentIdentifiers) {
    
    this.instrumentIdentifiers = instrumentIdentifiers;
    return this;
  }

  public CancelSingleHoldingAdjustmentRequest putInstrumentIdentifiersItem(String key, String instrumentIdentifiersItem) {
    if (this.instrumentIdentifiers == null) {
      this.instrumentIdentifiers = new HashMap<>();
    }
    this.instrumentIdentifiers.put(key, instrumentIdentifiersItem);
    return this;
  }

   /**
   * A set of instrument identifiers that can resolve the holding adjustment to a unique instrument.
   * @return instrumentIdentifiers
  **/
  @jakarta.annotation.Nonnull
  public Map<String, String> getInstrumentIdentifiers() {
    return instrumentIdentifiers;
  }


  public void setInstrumentIdentifiers(Map<String, String> instrumentIdentifiers) {
    this.instrumentIdentifiers = instrumentIdentifiers;
  }


  public CancelSingleHoldingAdjustmentRequest subHoldingKeys(Map<String, PerpetualProperty> subHoldingKeys) {
    
    this.subHoldingKeys = subHoldingKeys;
    return this;
  }

  public CancelSingleHoldingAdjustmentRequest putSubHoldingKeysItem(String key, PerpetualProperty subHoldingKeysItem) {
    if (this.subHoldingKeys == null) {
      this.subHoldingKeys = new HashMap<>();
    }
    this.subHoldingKeys.put(key, subHoldingKeysItem);
    return this;
  }

   /**
   * The sub-holding properties which identify the holding. Each property must be from the &#39;Transaction&#39; domain.
   * @return subHoldingKeys
  **/
  @jakarta.annotation.Nullable
  public Map<String, PerpetualProperty> getSubHoldingKeys() {
    return subHoldingKeys;
  }


  public void setSubHoldingKeys(Map<String, PerpetualProperty> subHoldingKeys) {
    this.subHoldingKeys = subHoldingKeys;
  }


  public CancelSingleHoldingAdjustmentRequest currency(String currency) {
    
    this.currency = currency;
    return this;
  }

   /**
   * The Holding currency.
   * @return currency
  **/
  @jakarta.annotation.Nullable
  public String getCurrency() {
    return currency;
  }


  public void setCurrency(String currency) {
    this.currency = currency;
  }


  public CancelSingleHoldingAdjustmentRequest custodianAccountId(ResourceId custodianAccountId) {
    
    this.custodianAccountId = custodianAccountId;
    return this;
  }

   /**
   * Get custodianAccountId
   * @return custodianAccountId
  **/
  @jakarta.annotation.Nullable
  public ResourceId getCustodianAccountId() {
    return custodianAccountId;
  }


  public void setCustodianAccountId(ResourceId custodianAccountId) {
    this.custodianAccountId = custodianAccountId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CancelSingleHoldingAdjustmentRequest cancelSingleHoldingAdjustmentRequest = (CancelSingleHoldingAdjustmentRequest) o;
    return Objects.equals(this.instrumentIdentifiers, cancelSingleHoldingAdjustmentRequest.instrumentIdentifiers) &&
        Objects.equals(this.subHoldingKeys, cancelSingleHoldingAdjustmentRequest.subHoldingKeys) &&
        Objects.equals(this.currency, cancelSingleHoldingAdjustmentRequest.currency) &&
        Objects.equals(this.custodianAccountId, cancelSingleHoldingAdjustmentRequest.custodianAccountId);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(instrumentIdentifiers, subHoldingKeys, currency, custodianAccountId);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CancelSingleHoldingAdjustmentRequest {\n");
    sb.append("    instrumentIdentifiers: ").append(toIndentedString(instrumentIdentifiers)).append("\n");
    sb.append("    subHoldingKeys: ").append(toIndentedString(subHoldingKeys)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    custodianAccountId: ").append(toIndentedString(custodianAccountId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("instrumentIdentifiers");
    openapiFields.add("subHoldingKeys");
    openapiFields.add("currency");
    openapiFields.add("custodianAccountId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("instrumentIdentifiers");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to CancelSingleHoldingAdjustmentRequest
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CancelSingleHoldingAdjustmentRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CancelSingleHoldingAdjustmentRequest is not found in the empty JSON string", CancelSingleHoldingAdjustmentRequest.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CancelSingleHoldingAdjustmentRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("currency") != null && !jsonObj.get("currency").isJsonNull()) && !jsonObj.get("currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency").toString()));
      }
      // validate the optional field `custodianAccountId`
      if (jsonObj.get("custodianAccountId") != null && !jsonObj.get("custodianAccountId").isJsonNull()) {
        ResourceId.validateJsonElement(jsonObj.get("custodianAccountId"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CancelSingleHoldingAdjustmentRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CancelSingleHoldingAdjustmentRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CancelSingleHoldingAdjustmentRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CancelSingleHoldingAdjustmentRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CancelSingleHoldingAdjustmentRequest>() {
           @Override
           public void write(JsonWriter out, CancelSingleHoldingAdjustmentRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CancelSingleHoldingAdjustmentRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CancelSingleHoldingAdjustmentRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CancelSingleHoldingAdjustmentRequest
  * @throws IOException if the JSON string is invalid with respect to CancelSingleHoldingAdjustmentRequest
  */
  public static CancelSingleHoldingAdjustmentRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CancelSingleHoldingAdjustmentRequest.class);
  }

 /**
  * Convert an instance of CancelSingleHoldingAdjustmentRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
