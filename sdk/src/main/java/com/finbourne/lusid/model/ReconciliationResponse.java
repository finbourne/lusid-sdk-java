/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import java.util.Arrays;
import com.finbourne.lusid.model.ReconciliationLine;
import com.finbourne.lusid.model.ResultDataSchema;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * Class representing the set of comparisons that result from comparing holdings and their valuations between two separate evaluations.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ReconciliationResponse {
  public static final String SERIALIZED_NAME_COMPARISONS = "comparisons";
  @SerializedName(SERIALIZED_NAME_COMPARISONS)
  private List<ReconciliationLine> comparisons;

  public static final String SERIALIZED_NAME_DATA_SCHEMA = "dataSchema";
  @SerializedName(SERIALIZED_NAME_DATA_SCHEMA)
  private ResultDataSchema dataSchema;

  public ReconciliationResponse() {
  }

  public ReconciliationResponse comparisons(List<ReconciliationLine> comparisons) {
    
    this.comparisons = comparisons;
    return this;
  }

  public ReconciliationResponse addComparisonsItem(ReconciliationLine comparisonsItem) {
    if (this.comparisons == null) {
      this.comparisons = new ArrayList<>();
    }
    this.comparisons.add(comparisonsItem);
    return this;
  }

   /**
   * List of comparisons of left to right hand sides.
   * @return comparisons
  **/
  @javax.annotation.Nullable
  public List<ReconciliationLine> getComparisons() {
    return comparisons;
  }


  public void setComparisons(List<ReconciliationLine> comparisons) {
    this.comparisons = comparisons;
  }


  public ReconciliationResponse dataSchema(ResultDataSchema dataSchema) {
    
    this.dataSchema = dataSchema;
    return this;
  }

   /**
   * Get dataSchema
   * @return dataSchema
  **/
  @javax.annotation.Nullable
  public ResultDataSchema getDataSchema() {
    return dataSchema;
  }


  public void setDataSchema(ResultDataSchema dataSchema) {
    this.dataSchema = dataSchema;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReconciliationResponse reconciliationResponse = (ReconciliationResponse) o;
    return Objects.equals(this.comparisons, reconciliationResponse.comparisons) &&
        Objects.equals(this.dataSchema, reconciliationResponse.dataSchema);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(comparisons, dataSchema);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReconciliationResponse {\n");
    sb.append("    comparisons: ").append(toIndentedString(comparisons)).append("\n");
    sb.append("    dataSchema: ").append(toIndentedString(dataSchema)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("comparisons");
    openapiFields.add("dataSchema");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ReconciliationResponse
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ReconciliationResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReconciliationResponse is not found in the empty JSON string", ReconciliationResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ReconciliationResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ReconciliationResponse` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if (jsonObj.get("comparisons") != null && !jsonObj.get("comparisons").isJsonNull()) {
        JsonArray jsonArraycomparisons = jsonObj.getAsJsonArray("comparisons");
        if (jsonArraycomparisons != null) {
          // ensure the json data is an array
          if (!jsonObj.get("comparisons").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `comparisons` to be an array in the JSON string but got `%s`", jsonObj.get("comparisons").toString()));
          }

          // validate the optional field `comparisons` (array)
          for (int i = 0; i < jsonArraycomparisons.size(); i++) {
            ReconciliationLine.validateJsonObject(jsonArraycomparisons.get(i).getAsJsonObject());
          };
        }
      }
      // validate the optional field `dataSchema`
      if (jsonObj.get("dataSchema") != null && !jsonObj.get("dataSchema").isJsonNull()) {
        ResultDataSchema.validateJsonObject(jsonObj.getAsJsonObject("dataSchema"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReconciliationResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReconciliationResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReconciliationResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReconciliationResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<ReconciliationResponse>() {
           @Override
           public void write(JsonWriter out, ReconciliationResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ReconciliationResponse read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ReconciliationResponse given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ReconciliationResponse
  * @throws IOException if the JSON string is invalid with respect to ReconciliationResponse
  */
  public static ReconciliationResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReconciliationResponse.class);
  }

 /**
  * Convert an instance of ReconciliationResponse to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
