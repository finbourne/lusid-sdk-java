/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * Configuration needed to define a side. Sides are referenced by Label. Beyond that, other properties  can be used to reference either transaction fields, or transaction properties.
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class SideConfigurationDataRequest {
  public static final String SERIALIZED_NAME_SIDE = "side";
  @SerializedName(SERIALIZED_NAME_SIDE)
  private String side;

  public static final String SERIALIZED_NAME_SECURITY = "security";
  @SerializedName(SERIALIZED_NAME_SECURITY)
  private String security;

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private String currency;

  public static final String SERIALIZED_NAME_RATE = "rate";
  @SerializedName(SERIALIZED_NAME_RATE)
  private String rate;

  public static final String SERIALIZED_NAME_UNITS = "units";
  @SerializedName(SERIALIZED_NAME_UNITS)
  private String units;

  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private String amount;

  public SideConfigurationDataRequest() {
  }

  public SideConfigurationDataRequest side(String side) {
    
    this.side = side;
    return this;
  }

   /**
   * The side&#39;s label.
   * @return side
  **/
  @jakarta.annotation.Nonnull
  public String getSide() {
    return side;
  }


  public void setSide(String side) {
    this.side = side;
  }


  public SideConfigurationDataRequest security(String security) {
    
    this.security = security;
    return this;
  }

   /**
   * The security, or instrument.
   * @return security
  **/
  @jakarta.annotation.Nonnull
  public String getSecurity() {
    return security;
  }


  public void setSecurity(String security) {
    this.security = security;
  }


  public SideConfigurationDataRequest currency(String currency) {
    
    this.currency = currency;
    return this;
  }

   /**
   * The currency.
   * @return currency
  **/
  @jakarta.annotation.Nonnull
  public String getCurrency() {
    return currency;
  }


  public void setCurrency(String currency) {
    this.currency = currency;
  }


  public SideConfigurationDataRequest rate(String rate) {
    
    this.rate = rate;
    return this;
  }

   /**
   * The rate.
   * @return rate
  **/
  @jakarta.annotation.Nonnull
  public String getRate() {
    return rate;
  }


  public void setRate(String rate) {
    this.rate = rate;
  }


  public SideConfigurationDataRequest units(String units) {
    
    this.units = units;
    return this;
  }

   /**
   * The units.
   * @return units
  **/
  @jakarta.annotation.Nonnull
  public String getUnits() {
    return units;
  }


  public void setUnits(String units) {
    this.units = units;
  }


  public SideConfigurationDataRequest amount(String amount) {
    
    this.amount = amount;
    return this;
  }

   /**
   * The amount.
   * @return amount
  **/
  @jakarta.annotation.Nonnull
  public String getAmount() {
    return amount;
  }


  public void setAmount(String amount) {
    this.amount = amount;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SideConfigurationDataRequest sideConfigurationDataRequest = (SideConfigurationDataRequest) o;
    return Objects.equals(this.side, sideConfigurationDataRequest.side) &&
        Objects.equals(this.security, sideConfigurationDataRequest.security) &&
        Objects.equals(this.currency, sideConfigurationDataRequest.currency) &&
        Objects.equals(this.rate, sideConfigurationDataRequest.rate) &&
        Objects.equals(this.units, sideConfigurationDataRequest.units) &&
        Objects.equals(this.amount, sideConfigurationDataRequest.amount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(side, security, currency, rate, units, amount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SideConfigurationDataRequest {\n");
    sb.append("    side: ").append(toIndentedString(side)).append("\n");
    sb.append("    security: ").append(toIndentedString(security)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    rate: ").append(toIndentedString(rate)).append("\n");
    sb.append("    units: ").append(toIndentedString(units)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("side");
    openapiFields.add("security");
    openapiFields.add("currency");
    openapiFields.add("rate");
    openapiFields.add("units");
    openapiFields.add("amount");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("side");
    openapiRequiredFields.add("security");
    openapiRequiredFields.add("currency");
    openapiRequiredFields.add("rate");
    openapiRequiredFields.add("units");
    openapiRequiredFields.add("amount");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to SideConfigurationDataRequest
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SideConfigurationDataRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SideConfigurationDataRequest is not found in the empty JSON string", SideConfigurationDataRequest.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SideConfigurationDataRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("side").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `side` to be a primitive type in the JSON string but got `%s`", jsonObj.get("side").toString()));
      }
      if (!jsonObj.get("security").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `security` to be a primitive type in the JSON string but got `%s`", jsonObj.get("security").toString()));
      }
      if (!jsonObj.get("currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency").toString()));
      }
      if (!jsonObj.get("rate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rate").toString()));
      }
      if (!jsonObj.get("units").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `units` to be a primitive type in the JSON string but got `%s`", jsonObj.get("units").toString()));
      }
      if (!jsonObj.get("amount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `amount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("amount").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SideConfigurationDataRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SideConfigurationDataRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SideConfigurationDataRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SideConfigurationDataRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<SideConfigurationDataRequest>() {
           @Override
           public void write(JsonWriter out, SideConfigurationDataRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SideConfigurationDataRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of SideConfigurationDataRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of SideConfigurationDataRequest
  * @throws IOException if the JSON string is invalid with respect to SideConfigurationDataRequest
  */
  public static SideConfigurationDataRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SideConfigurationDataRequest.class);
  }

 /**
  * Convert an instance of SideConfigurationDataRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
