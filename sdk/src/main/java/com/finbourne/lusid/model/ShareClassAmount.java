/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * ShareClassAmount
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ShareClassAmount {
  public static final String SERIALIZED_NAME_FUND_CURRENCY_AMOUNT = "fundCurrencyAmount";
  @SerializedName(SERIALIZED_NAME_FUND_CURRENCY_AMOUNT)
  private java.math.BigDecimal fundCurrencyAmount;

  public static final String SERIALIZED_NAME_SHARE_CLASS_CURRENCY_AMOUNT = "shareClassCurrencyAmount";
  @SerializedName(SERIALIZED_NAME_SHARE_CLASS_CURRENCY_AMOUNT)
  private java.math.BigDecimal shareClassCurrencyAmount;

  public ShareClassAmount() {
  }

  public ShareClassAmount fundCurrencyAmount(java.math.BigDecimal fundCurrencyAmount) {
    
    this.fundCurrencyAmount = fundCurrencyAmount;
    return this;
  }

   /**
   * The value of the amount in the fund currency.
   * @return fundCurrencyAmount
  **/
  @jakarta.annotation.Nullable
  public java.math.BigDecimal getFundCurrencyAmount() {
    return fundCurrencyAmount;
  }


  public void setFundCurrencyAmount(java.math.BigDecimal fundCurrencyAmount) {
    this.fundCurrencyAmount = fundCurrencyAmount;
  }


  public ShareClassAmount shareClassCurrencyAmount(java.math.BigDecimal shareClassCurrencyAmount) {
    
    this.shareClassCurrencyAmount = shareClassCurrencyAmount;
    return this;
  }

   /**
   * The value of the amount in the share class currency.
   * @return shareClassCurrencyAmount
  **/
  @jakarta.annotation.Nullable
  public java.math.BigDecimal getShareClassCurrencyAmount() {
    return shareClassCurrencyAmount;
  }


  public void setShareClassCurrencyAmount(java.math.BigDecimal shareClassCurrencyAmount) {
    this.shareClassCurrencyAmount = shareClassCurrencyAmount;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ShareClassAmount shareClassAmount = (ShareClassAmount) o;
    return (this.fundCurrencyAmount.compareTo(shareClassAmount.getFundCurrencyAmount()) == 0) &&
        (this.shareClassCurrencyAmount.compareTo(shareClassAmount.getShareClassCurrencyAmount()) == 0);
  }

  @Override
  public int hashCode() {
    return Objects.hash(fundCurrencyAmount, shareClassCurrencyAmount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ShareClassAmount {\n");
    sb.append("    fundCurrencyAmount: ").append(toIndentedString(fundCurrencyAmount)).append("\n");
    sb.append("    shareClassCurrencyAmount: ").append(toIndentedString(shareClassCurrencyAmount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("fundCurrencyAmount");
    openapiFields.add("shareClassCurrencyAmount");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ShareClassAmount
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ShareClassAmount.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ShareClassAmount is not found in the empty JSON string", ShareClassAmount.openapiRequiredFields.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ShareClassAmount.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ShareClassAmount' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ShareClassAmount> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ShareClassAmount.class));

       return (TypeAdapter<T>) new TypeAdapter<ShareClassAmount>() {
           @Override
           public void write(JsonWriter out, ShareClassAmount value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ShareClassAmount read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ShareClassAmount given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ShareClassAmount
  * @throws IOException if the JSON string is invalid with respect to ShareClassAmount
  */
  public static ShareClassAmount fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ShareClassAmount.class);
  }

 /**
  * Convert an instance of ShareClassAmount to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
