/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import com.finbourne.lusid.model.AggregateSpec;
import com.finbourne.lusid.model.OrderBySpec;
import com.finbourne.lusid.model.PortfolioEntityId;
import com.finbourne.lusid.model.PropertyFilter;
import com.finbourne.lusid.model.ResourceId;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * AggregatedTransactionsRequest
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class AggregatedTransactionsRequest {
  public static final String SERIALIZED_NAME_FROM_TRANSACTION_DATE = "fromTransactionDate";
  @SerializedName(SERIALIZED_NAME_FROM_TRANSACTION_DATE)
  private OffsetDateTime fromTransactionDate;

  public static final String SERIALIZED_NAME_TO_TRANSACTION_DATE = "toTransactionDate";
  @SerializedName(SERIALIZED_NAME_TO_TRANSACTION_DATE)
  private OffsetDateTime toTransactionDate;

  public static final String SERIALIZED_NAME_PORTFOLIO_ID = "portfolioId";
  @SerializedName(SERIALIZED_NAME_PORTFOLIO_ID)
  private ResourceId portfolioId;

  public static final String SERIALIZED_NAME_PORTFOLIO_ENTITY_IDS = "portfolioEntityIds";
  @SerializedName(SERIALIZED_NAME_PORTFOLIO_ENTITY_IDS)
  private List<PortfolioEntityId> portfolioEntityIds;

  public static final String SERIALIZED_NAME_AS_AT = "asAt";
  @SerializedName(SERIALIZED_NAME_AS_AT)
  private OffsetDateTime asAt;

  public static final String SERIALIZED_NAME_METRICS = "metrics";
  @SerializedName(SERIALIZED_NAME_METRICS)
  private List<AggregateSpec> metrics = new ArrayList<>();

  public static final String SERIALIZED_NAME_GROUP_BY = "groupBy";
  @SerializedName(SERIALIZED_NAME_GROUP_BY)
  private List<String> groupBy;

  public static final String SERIALIZED_NAME_FILTERS = "filters";
  @SerializedName(SERIALIZED_NAME_FILTERS)
  private List<PropertyFilter> filters;

  public static final String SERIALIZED_NAME_SORT = "sort";
  @SerializedName(SERIALIZED_NAME_SORT)
  private List<OrderBySpec> sort;

  public AggregatedTransactionsRequest() {
  }

  public AggregatedTransactionsRequest fromTransactionDate(OffsetDateTime fromTransactionDate) {
    
    this.fromTransactionDate = fromTransactionDate;
    return this;
  }

   /**
   * Get fromTransactionDate
   * @return fromTransactionDate
  **/
  @jakarta.annotation.Nonnull
  public OffsetDateTime getFromTransactionDate() {
    return fromTransactionDate;
  }


  public void setFromTransactionDate(OffsetDateTime fromTransactionDate) {
    this.fromTransactionDate = fromTransactionDate;
  }


  public AggregatedTransactionsRequest toTransactionDate(OffsetDateTime toTransactionDate) {
    
    this.toTransactionDate = toTransactionDate;
    return this;
  }

   /**
   * Get toTransactionDate
   * @return toTransactionDate
  **/
  @jakarta.annotation.Nonnull
  public OffsetDateTime getToTransactionDate() {
    return toTransactionDate;
  }


  public void setToTransactionDate(OffsetDateTime toTransactionDate) {
    this.toTransactionDate = toTransactionDate;
  }


  public AggregatedTransactionsRequest portfolioId(ResourceId portfolioId) {
    
    this.portfolioId = portfolioId;
    return this;
  }

   /**
   * Get portfolioId
   * @return portfolioId
  **/
  @jakarta.annotation.Nullable
  public ResourceId getPortfolioId() {
    return portfolioId;
  }


  public void setPortfolioId(ResourceId portfolioId) {
    this.portfolioId = portfolioId;
  }


  public AggregatedTransactionsRequest portfolioEntityIds(List<PortfolioEntityId> portfolioEntityIds) {
    
    this.portfolioEntityIds = portfolioEntityIds;
    return this;
  }

  public AggregatedTransactionsRequest addPortfolioEntityIdsItem(PortfolioEntityId portfolioEntityIdsItem) {
    if (this.portfolioEntityIds == null) {
      this.portfolioEntityIds = new ArrayList<>();
    }
    this.portfolioEntityIds.add(portfolioEntityIdsItem);
    return this;
  }

   /**
   * The set of portfolio or portfolio group identifiers containing the relevant transactions.
   * @return portfolioEntityIds
  **/
  @jakarta.annotation.Nullable
  public List<PortfolioEntityId> getPortfolioEntityIds() {
    return portfolioEntityIds;
  }


  public void setPortfolioEntityIds(List<PortfolioEntityId> portfolioEntityIds) {
    this.portfolioEntityIds = portfolioEntityIds;
  }


  public AggregatedTransactionsRequest asAt(OffsetDateTime asAt) {
    
    this.asAt = asAt;
    return this;
  }

   /**
   * Get asAt
   * @return asAt
  **/
  @jakarta.annotation.Nullable
  public OffsetDateTime getAsAt() {
    return asAt;
  }


  public void setAsAt(OffsetDateTime asAt) {
    this.asAt = asAt;
  }


  public AggregatedTransactionsRequest metrics(List<AggregateSpec> metrics) {
    
    this.metrics = metrics;
    return this;
  }

  public AggregatedTransactionsRequest addMetricsItem(AggregateSpec metricsItem) {
    if (this.metrics == null) {
      this.metrics = new ArrayList<>();
    }
    this.metrics.add(metricsItem);
    return this;
  }

   /**
   * Get metrics
   * @return metrics
  **/
  @jakarta.annotation.Nonnull
  public List<AggregateSpec> getMetrics() {
    return metrics;
  }


  public void setMetrics(List<AggregateSpec> metrics) {
    this.metrics = metrics;
  }


  public AggregatedTransactionsRequest groupBy(List<String> groupBy) {
    
    this.groupBy = groupBy;
    return this;
  }

  public AggregatedTransactionsRequest addGroupByItem(String groupByItem) {
    if (this.groupBy == null) {
      this.groupBy = new ArrayList<>();
    }
    this.groupBy.add(groupByItem);
    return this;
  }

   /**
   * Get groupBy
   * @return groupBy
  **/
  @jakarta.annotation.Nullable
  public List<String> getGroupBy() {
    return groupBy;
  }


  public void setGroupBy(List<String> groupBy) {
    this.groupBy = groupBy;
  }


  public AggregatedTransactionsRequest filters(List<PropertyFilter> filters) {
    
    this.filters = filters;
    return this;
  }

  public AggregatedTransactionsRequest addFiltersItem(PropertyFilter filtersItem) {
    if (this.filters == null) {
      this.filters = new ArrayList<>();
    }
    this.filters.add(filtersItem);
    return this;
  }

   /**
   * Get filters
   * @return filters
  **/
  @jakarta.annotation.Nullable
  public List<PropertyFilter> getFilters() {
    return filters;
  }


  public void setFilters(List<PropertyFilter> filters) {
    this.filters = filters;
  }


  public AggregatedTransactionsRequest sort(List<OrderBySpec> sort) {
    
    this.sort = sort;
    return this;
  }

  public AggregatedTransactionsRequest addSortItem(OrderBySpec sortItem) {
    if (this.sort == null) {
      this.sort = new ArrayList<>();
    }
    this.sort.add(sortItem);
    return this;
  }

   /**
   * Get sort
   * @return sort
  **/
  @jakarta.annotation.Nullable
  public List<OrderBySpec> getSort() {
    return sort;
  }


  public void setSort(List<OrderBySpec> sort) {
    this.sort = sort;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AggregatedTransactionsRequest aggregatedTransactionsRequest = (AggregatedTransactionsRequest) o;
    return Objects.equals(this.fromTransactionDate, aggregatedTransactionsRequest.fromTransactionDate) &&
        Objects.equals(this.toTransactionDate, aggregatedTransactionsRequest.toTransactionDate) &&
        Objects.equals(this.portfolioId, aggregatedTransactionsRequest.portfolioId) &&
        Objects.equals(this.portfolioEntityIds, aggregatedTransactionsRequest.portfolioEntityIds) &&
        Objects.equals(this.asAt, aggregatedTransactionsRequest.asAt) &&
        Objects.equals(this.metrics, aggregatedTransactionsRequest.metrics) &&
        Objects.equals(this.groupBy, aggregatedTransactionsRequest.groupBy) &&
        Objects.equals(this.filters, aggregatedTransactionsRequest.filters) &&
        Objects.equals(this.sort, aggregatedTransactionsRequest.sort);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(fromTransactionDate, toTransactionDate, portfolioId, portfolioEntityIds, asAt, metrics, groupBy, filters, sort);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AggregatedTransactionsRequest {\n");
    sb.append("    fromTransactionDate: ").append(toIndentedString(fromTransactionDate)).append("\n");
    sb.append("    toTransactionDate: ").append(toIndentedString(toTransactionDate)).append("\n");
    sb.append("    portfolioId: ").append(toIndentedString(portfolioId)).append("\n");
    sb.append("    portfolioEntityIds: ").append(toIndentedString(portfolioEntityIds)).append("\n");
    sb.append("    asAt: ").append(toIndentedString(asAt)).append("\n");
    sb.append("    metrics: ").append(toIndentedString(metrics)).append("\n");
    sb.append("    groupBy: ").append(toIndentedString(groupBy)).append("\n");
    sb.append("    filters: ").append(toIndentedString(filters)).append("\n");
    sb.append("    sort: ").append(toIndentedString(sort)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("fromTransactionDate");
    openapiFields.add("toTransactionDate");
    openapiFields.add("portfolioId");
    openapiFields.add("portfolioEntityIds");
    openapiFields.add("asAt");
    openapiFields.add("metrics");
    openapiFields.add("groupBy");
    openapiFields.add("filters");
    openapiFields.add("sort");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("fromTransactionDate");
    openapiRequiredFields.add("toTransactionDate");
    openapiRequiredFields.add("metrics");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to AggregatedTransactionsRequest
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AggregatedTransactionsRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AggregatedTransactionsRequest is not found in the empty JSON string", AggregatedTransactionsRequest.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AggregatedTransactionsRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `portfolioId`
      if (jsonObj.get("portfolioId") != null && !jsonObj.get("portfolioId").isJsonNull()) {
        ResourceId.validateJsonElement(jsonObj.get("portfolioId"));
      }
      if (jsonObj.get("portfolioEntityIds") != null && !jsonObj.get("portfolioEntityIds").isJsonNull()) {
        JsonArray jsonArrayportfolioEntityIds = jsonObj.getAsJsonArray("portfolioEntityIds");
        if (jsonArrayportfolioEntityIds != null) {
          // ensure the json data is an array
          if (!jsonObj.get("portfolioEntityIds").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `portfolioEntityIds` to be an array in the JSON string but got `%s`", jsonObj.get("portfolioEntityIds").toString()));
          }

          // validate the optional field `portfolioEntityIds` (array)
          for (int i = 0; i < jsonArrayportfolioEntityIds.size(); i++) {
            PortfolioEntityId.validateJsonElement(jsonArrayportfolioEntityIds.get(i));
          };
        }
      }
      // ensure the json data is an array
      if (!jsonObj.get("metrics").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `metrics` to be an array in the JSON string but got `%s`", jsonObj.get("metrics").toString()));
      }

      JsonArray jsonArraymetrics = jsonObj.getAsJsonArray("metrics");
      // validate the required field `metrics` (array)
      for (int i = 0; i < jsonArraymetrics.size(); i++) {
        AggregateSpec.validateJsonElement(jsonArraymetrics.get(i));
      };
      // ensure the optional json data is an array if present
      if (jsonObj.get("groupBy") != null && !jsonObj.get("groupBy").isJsonNull() && !jsonObj.get("groupBy").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `groupBy` to be an array in the JSON string but got `%s`", jsonObj.get("groupBy").toString()));
      }
      if (jsonObj.get("filters") != null && !jsonObj.get("filters").isJsonNull()) {
        JsonArray jsonArrayfilters = jsonObj.getAsJsonArray("filters");
        if (jsonArrayfilters != null) {
          // ensure the json data is an array
          if (!jsonObj.get("filters").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `filters` to be an array in the JSON string but got `%s`", jsonObj.get("filters").toString()));
          }

          // validate the optional field `filters` (array)
          for (int i = 0; i < jsonArrayfilters.size(); i++) {
            PropertyFilter.validateJsonElement(jsonArrayfilters.get(i));
          };
        }
      }
      if (jsonObj.get("sort") != null && !jsonObj.get("sort").isJsonNull()) {
        JsonArray jsonArraysort = jsonObj.getAsJsonArray("sort");
        if (jsonArraysort != null) {
          // ensure the json data is an array
          if (!jsonObj.get("sort").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `sort` to be an array in the JSON string but got `%s`", jsonObj.get("sort").toString()));
          }

          // validate the optional field `sort` (array)
          for (int i = 0; i < jsonArraysort.size(); i++) {
            OrderBySpec.validateJsonElement(jsonArraysort.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AggregatedTransactionsRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AggregatedTransactionsRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AggregatedTransactionsRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AggregatedTransactionsRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<AggregatedTransactionsRequest>() {
           @Override
           public void write(JsonWriter out, AggregatedTransactionsRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AggregatedTransactionsRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AggregatedTransactionsRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AggregatedTransactionsRequest
  * @throws IOException if the JSON string is invalid with respect to AggregatedTransactionsRequest
  */
  public static AggregatedTransactionsRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AggregatedTransactionsRequest.class);
  }

 /**
  * Convert an instance of AggregatedTransactionsRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
