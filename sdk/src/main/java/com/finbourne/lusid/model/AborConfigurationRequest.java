/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import com.finbourne.lusid.model.Property;
import com.finbourne.lusid.model.ResourceId;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * The request used to create an AborConfiguration.
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class AborConfigurationRequest {
  public static final String SERIALIZED_NAME_CODE = "code";
  @SerializedName(SERIALIZED_NAME_CODE)
  private String code;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_RECIPE_ID = "recipeId";
  @SerializedName(SERIALIZED_NAME_RECIPE_ID)
  private ResourceId recipeId;

  public static final String SERIALIZED_NAME_CHART_OF_ACCOUNTS_ID = "chartOfAccountsId";
  @SerializedName(SERIALIZED_NAME_CHART_OF_ACCOUNTS_ID)
  private ResourceId chartOfAccountsId;

  public static final String SERIALIZED_NAME_POSTING_MODULE_CODES = "postingModuleCodes";
  @SerializedName(SERIALIZED_NAME_POSTING_MODULE_CODES)
  private List<String> postingModuleCodes;

  public static final String SERIALIZED_NAME_PROPERTIES = "properties";
  @SerializedName(SERIALIZED_NAME_PROPERTIES)
  private Map<String, Property> properties;

  public static final String SERIALIZED_NAME_CLEARDOWN_MODULE_CODES = "cleardownModuleCodes";
  @SerializedName(SERIALIZED_NAME_CLEARDOWN_MODULE_CODES)
  private List<String> cleardownModuleCodes;

  public AborConfigurationRequest() {
  }

  public AborConfigurationRequest code(String code) {
    
    this.code = code;
    return this;
  }

   /**
   * The code given for the Abor Configuration.
   * @return code
  **/
  @jakarta.annotation.Nonnull
  public String getCode() {
    return code;
  }


  public void setCode(String code) {
    this.code = code;
  }


  public AborConfigurationRequest displayName(String displayName) {
    
    this.displayName = displayName;
    return this;
  }

   /**
   * The name of the Abor Configuration.
   * @return displayName
  **/
  @jakarta.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }


  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public AborConfigurationRequest description(String description) {
    
    this.description = description;
    return this;
  }

   /**
   * A description for the Abor Configuration.
   * @return description
  **/
  @jakarta.annotation.Nullable
  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    this.description = description;
  }


  public AborConfigurationRequest recipeId(ResourceId recipeId) {
    
    this.recipeId = recipeId;
    return this;
  }

   /**
   * Get recipeId
   * @return recipeId
  **/
  @jakarta.annotation.Nonnull
  public ResourceId getRecipeId() {
    return recipeId;
  }


  public void setRecipeId(ResourceId recipeId) {
    this.recipeId = recipeId;
  }


  public AborConfigurationRequest chartOfAccountsId(ResourceId chartOfAccountsId) {
    
    this.chartOfAccountsId = chartOfAccountsId;
    return this;
  }

   /**
   * Get chartOfAccountsId
   * @return chartOfAccountsId
  **/
  @jakarta.annotation.Nonnull
  public ResourceId getChartOfAccountsId() {
    return chartOfAccountsId;
  }


  public void setChartOfAccountsId(ResourceId chartOfAccountsId) {
    this.chartOfAccountsId = chartOfAccountsId;
  }


  public AborConfigurationRequest postingModuleCodes(List<String> postingModuleCodes) {
    
    this.postingModuleCodes = postingModuleCodes;
    return this;
  }

  public AborConfigurationRequest addPostingModuleCodesItem(String postingModuleCodesItem) {
    if (this.postingModuleCodes == null) {
      this.postingModuleCodes = new ArrayList<>();
    }
    this.postingModuleCodes.add(postingModuleCodesItem);
    return this;
  }

   /**
   * The Posting Module Codes from which the rules to be applied are retrieved.
   * @return postingModuleCodes
  **/
  @jakarta.annotation.Nullable
  public List<String> getPostingModuleCodes() {
    return postingModuleCodes;
  }


  public void setPostingModuleCodes(List<String> postingModuleCodes) {
    this.postingModuleCodes = postingModuleCodes;
  }


  public AborConfigurationRequest properties(Map<String, Property> properties) {
    
    this.properties = properties;
    return this;
  }

  public AborConfigurationRequest putPropertiesItem(String key, Property propertiesItem) {
    if (this.properties == null) {
      this.properties = new HashMap<>();
    }
    this.properties.put(key, propertiesItem);
    return this;
  }

   /**
   * A set of properties for the Abor Configuration.
   * @return properties
  **/
  @jakarta.annotation.Nullable
  public Map<String, Property> getProperties() {
    return properties;
  }


  public void setProperties(Map<String, Property> properties) {
    this.properties = properties;
  }


  public AborConfigurationRequest cleardownModuleCodes(List<String> cleardownModuleCodes) {
    
    this.cleardownModuleCodes = cleardownModuleCodes;
    return this;
  }

  public AborConfigurationRequest addCleardownModuleCodesItem(String cleardownModuleCodesItem) {
    if (this.cleardownModuleCodes == null) {
      this.cleardownModuleCodes = new ArrayList<>();
    }
    this.cleardownModuleCodes.add(cleardownModuleCodesItem);
    return this;
  }

   /**
   * The Cleardown Module Codes from which the rules to be applied are retrieved.
   * @return cleardownModuleCodes
  **/
  @jakarta.annotation.Nullable
  public List<String> getCleardownModuleCodes() {
    return cleardownModuleCodes;
  }


  public void setCleardownModuleCodes(List<String> cleardownModuleCodes) {
    this.cleardownModuleCodes = cleardownModuleCodes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AborConfigurationRequest aborConfigurationRequest = (AborConfigurationRequest) o;
    return Objects.equals(this.code, aborConfigurationRequest.code) &&
        Objects.equals(this.displayName, aborConfigurationRequest.displayName) &&
        Objects.equals(this.description, aborConfigurationRequest.description) &&
        Objects.equals(this.recipeId, aborConfigurationRequest.recipeId) &&
        Objects.equals(this.chartOfAccountsId, aborConfigurationRequest.chartOfAccountsId) &&
        Objects.equals(this.postingModuleCodes, aborConfigurationRequest.postingModuleCodes) &&
        Objects.equals(this.properties, aborConfigurationRequest.properties) &&
        Objects.equals(this.cleardownModuleCodes, aborConfigurationRequest.cleardownModuleCodes);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(code, displayName, description, recipeId, chartOfAccountsId, postingModuleCodes, properties, cleardownModuleCodes);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AborConfigurationRequest {\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    recipeId: ").append(toIndentedString(recipeId)).append("\n");
    sb.append("    chartOfAccountsId: ").append(toIndentedString(chartOfAccountsId)).append("\n");
    sb.append("    postingModuleCodes: ").append(toIndentedString(postingModuleCodes)).append("\n");
    sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
    sb.append("    cleardownModuleCodes: ").append(toIndentedString(cleardownModuleCodes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("code");
    openapiFields.add("displayName");
    openapiFields.add("description");
    openapiFields.add("recipeId");
    openapiFields.add("chartOfAccountsId");
    openapiFields.add("postingModuleCodes");
    openapiFields.add("properties");
    openapiFields.add("cleardownModuleCodes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("code");
    openapiRequiredFields.add("recipeId");
    openapiRequiredFields.add("chartOfAccountsId");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to AborConfigurationRequest
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AborConfigurationRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AborConfigurationRequest is not found in the empty JSON string", AborConfigurationRequest.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AborConfigurationRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("code").toString()));
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // validate the required field `recipeId`
      ResourceId.validateJsonElement(jsonObj.get("recipeId"));
      // validate the required field `chartOfAccountsId`
      ResourceId.validateJsonElement(jsonObj.get("chartOfAccountsId"));
      // ensure the optional json data is an array if present
      if (jsonObj.get("postingModuleCodes") != null && !jsonObj.get("postingModuleCodes").isJsonNull() && !jsonObj.get("postingModuleCodes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `postingModuleCodes` to be an array in the JSON string but got `%s`", jsonObj.get("postingModuleCodes").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("cleardownModuleCodes") != null && !jsonObj.get("cleardownModuleCodes").isJsonNull() && !jsonObj.get("cleardownModuleCodes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `cleardownModuleCodes` to be an array in the JSON string but got `%s`", jsonObj.get("cleardownModuleCodes").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AborConfigurationRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AborConfigurationRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AborConfigurationRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AborConfigurationRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<AborConfigurationRequest>() {
           @Override
           public void write(JsonWriter out, AborConfigurationRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AborConfigurationRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AborConfigurationRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AborConfigurationRequest
  * @throws IOException if the JSON string is invalid with respect to AborConfigurationRequest
  */
  public static AborConfigurationRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AborConfigurationRequest.class);
  }

 /**
  * Convert an instance of AborConfigurationRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
