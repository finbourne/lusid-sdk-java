/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import com.finbourne.lusid.model.Link;
import com.finbourne.lusid.model.LusidInstrument;
import com.finbourne.lusid.model.Property;
import com.finbourne.lusid.model.Relationship;
import com.finbourne.lusid.model.ResourceId;
import com.finbourne.lusid.model.StagedModificationsInfo;
import com.finbourne.lusid.model.Version;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.net.URI;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * A list of instruments.
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class Instrument {
  public static final String SERIALIZED_NAME_HREF = "href";
  @SerializedName(SERIALIZED_NAME_HREF)
  private URI href;

  public static final String SERIALIZED_NAME_SCOPE = "scope";
  @SerializedName(SERIALIZED_NAME_SCOPE)
  private String scope;

  public static final String SERIALIZED_NAME_LUSID_INSTRUMENT_ID = "lusidInstrumentId";
  @SerializedName(SERIALIZED_NAME_LUSID_INSTRUMENT_ID)
  private String lusidInstrumentId;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private Version version;

  public static final String SERIALIZED_NAME_STAGED_MODIFICATIONS = "stagedModifications";
  @SerializedName(SERIALIZED_NAME_STAGED_MODIFICATIONS)
  private StagedModificationsInfo stagedModifications;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_IDENTIFIERS = "identifiers";
  @SerializedName(SERIALIZED_NAME_IDENTIFIERS)
  private Map<String, String> identifiers = new HashMap<>();

  public static final String SERIALIZED_NAME_PROPERTIES = "properties";
  @SerializedName(SERIALIZED_NAME_PROPERTIES)
  private List<Property> properties;

  public static final String SERIALIZED_NAME_LOOKTHROUGH_PORTFOLIO = "lookthroughPortfolio";
  @SerializedName(SERIALIZED_NAME_LOOKTHROUGH_PORTFOLIO)
  private ResourceId lookthroughPortfolio;

  public static final String SERIALIZED_NAME_INSTRUMENT_DEFINITION = "instrumentDefinition";
  @SerializedName(SERIALIZED_NAME_INSTRUMENT_DEFINITION)
  private LusidInstrument instrumentDefinition;

  /**
   * The state of of the instrument at the asAt datetime of this version of the instrument definition. The available values are: Active, Inactive, Deleted
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    ACTIVE("Active"),
    
    INACTIVE("Inactive"),
    
    DELETED("Deleted");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  /**
   * The nominal asset class of the instrument, e.g. InterestRates, FX, Inflation, Equities, Credit, Commodities, etc. The available values are: InterestRates, FX, Inflation, Equities, Credit, Commodities, Money, Unknown
   */
  @JsonAdapter(AssetClassEnum.Adapter.class)
  public enum AssetClassEnum {
    INTERESTRATES("InterestRates"),
    
    FX("FX"),
    
    INFLATION("Inflation"),
    
    EQUITIES("Equities"),
    
    CREDIT("Credit"),
    
    COMMODITIES("Commodities"),
    
    MONEY("Money"),
    
    UNKNOWN("Unknown");

    private String value;

    AssetClassEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AssetClassEnum fromValue(String value) {
      for (AssetClassEnum b : AssetClassEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AssetClassEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AssetClassEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AssetClassEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AssetClassEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_ASSET_CLASS = "assetClass";
  @SerializedName(SERIALIZED_NAME_ASSET_CLASS)
  private AssetClassEnum assetClass;

  public static final String SERIALIZED_NAME_DOM_CCY = "domCcy";
  @SerializedName(SERIALIZED_NAME_DOM_CCY)
  private String domCcy;

  public static final String SERIALIZED_NAME_RELATIONSHIPS = "relationships";
  @SerializedName(SERIALIZED_NAME_RELATIONSHIPS)
  private List<Relationship> relationships;

  public static final String SERIALIZED_NAME_LINKS = "links";
  @SerializedName(SERIALIZED_NAME_LINKS)
  private List<Link> links;

  public Instrument() {
  }

  public Instrument href(URI href) {
    
    this.href = href;
    return this;
  }

   /**
   * The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.
   * @return href
  **/
  @jakarta.annotation.Nullable
  public URI getHref() {
    return href;
  }


  public void setHref(URI href) {
    this.href = href;
  }


  public Instrument scope(String scope) {
    
    this.scope = scope;
    return this;
  }

   /**
   * The scope in which the instrument lies.
   * @return scope
  **/
  @jakarta.annotation.Nullable
  public String getScope() {
    return scope;
  }


  public void setScope(String scope) {
    this.scope = scope;
  }


  public Instrument lusidInstrumentId(String lusidInstrumentId) {
    
    this.lusidInstrumentId = lusidInstrumentId;
    return this;
  }

   /**
   * The unique LUSID Instrument Identifier (LUID) of the instrument.
   * @return lusidInstrumentId
  **/
  @jakarta.annotation.Nonnull
  public String getLusidInstrumentId() {
    return lusidInstrumentId;
  }


  public void setLusidInstrumentId(String lusidInstrumentId) {
    this.lusidInstrumentId = lusidInstrumentId;
  }


  public Instrument version(Version version) {
    
    this.version = version;
    return this;
  }

   /**
   * Get version
   * @return version
  **/
  @jakarta.annotation.Nonnull
  public Version getVersion() {
    return version;
  }


  public void setVersion(Version version) {
    this.version = version;
  }


  public Instrument stagedModifications(StagedModificationsInfo stagedModifications) {
    
    this.stagedModifications = stagedModifications;
    return this;
  }

   /**
   * Get stagedModifications
   * @return stagedModifications
  **/
  @jakarta.annotation.Nullable
  public StagedModificationsInfo getStagedModifications() {
    return stagedModifications;
  }


  public void setStagedModifications(StagedModificationsInfo stagedModifications) {
    this.stagedModifications = stagedModifications;
  }


  public Instrument name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * The name of the instrument.
   * @return name
  **/
  @jakarta.annotation.Nonnull
  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public Instrument identifiers(Map<String, String> identifiers) {
    
    this.identifiers = identifiers;
    return this;
  }

  public Instrument putIdentifiersItem(String key, String identifiersItem) {
    if (this.identifiers == null) {
      this.identifiers = new HashMap<>();
    }
    this.identifiers.put(key, identifiersItem);
    return this;
  }

   /**
   * The set of identifiers that can be used to identify the instrument.
   * @return identifiers
  **/
  @jakarta.annotation.Nonnull
  public Map<String, String> getIdentifiers() {
    return identifiers;
  }


  public void setIdentifiers(Map<String, String> identifiers) {
    this.identifiers = identifiers;
  }


  public Instrument properties(List<Property> properties) {
    
    this.properties = properties;
    return this;
  }

  public Instrument addPropertiesItem(Property propertiesItem) {
    if (this.properties == null) {
      this.properties = new ArrayList<>();
    }
    this.properties.add(propertiesItem);
    return this;
  }

   /**
   * The requested instrument properties. These will be from the &#39;Instrument&#39; domain.
   * @return properties
  **/
  @jakarta.annotation.Nullable
  public List<Property> getProperties() {
    return properties;
  }


  public void setProperties(List<Property> properties) {
    this.properties = properties;
  }


  public Instrument lookthroughPortfolio(ResourceId lookthroughPortfolio) {
    
    this.lookthroughPortfolio = lookthroughPortfolio;
    return this;
  }

   /**
   * Get lookthroughPortfolio
   * @return lookthroughPortfolio
  **/
  @jakarta.annotation.Nullable
  public ResourceId getLookthroughPortfolio() {
    return lookthroughPortfolio;
  }


  public void setLookthroughPortfolio(ResourceId lookthroughPortfolio) {
    this.lookthroughPortfolio = lookthroughPortfolio;
  }


  public Instrument instrumentDefinition(LusidInstrument instrumentDefinition) {
    
    this.instrumentDefinition = instrumentDefinition;
    return this;
  }

   /**
   * Get instrumentDefinition
   * @return instrumentDefinition
  **/
  @jakarta.annotation.Nullable
  public LusidInstrument getInstrumentDefinition() {
    return instrumentDefinition;
  }


  public void setInstrumentDefinition(LusidInstrument instrumentDefinition) {
    this.instrumentDefinition = instrumentDefinition;
  }


  public Instrument state(StateEnum state) {
    
    this.state = state;
    return this;
  }

   /**
   * The state of of the instrument at the asAt datetime of this version of the instrument definition. The available values are: Active, Inactive, Deleted
   * @return state
  **/
  @jakarta.annotation.Nonnull
  public StateEnum getState() {
    return state;
  }


  public void setState(StateEnum state) {
    this.state = state;
  }


  public Instrument assetClass(AssetClassEnum assetClass) {
    
    this.assetClass = assetClass;
    return this;
  }

   /**
   * The nominal asset class of the instrument, e.g. InterestRates, FX, Inflation, Equities, Credit, Commodities, etc. The available values are: InterestRates, FX, Inflation, Equities, Credit, Commodities, Money, Unknown
   * @return assetClass
  **/
  @jakarta.annotation.Nullable
  public AssetClassEnum getAssetClass() {
    return assetClass;
  }


  public void setAssetClass(AssetClassEnum assetClass) {
    this.assetClass = assetClass;
  }


  public Instrument domCcy(String domCcy) {
    
    this.domCcy = domCcy;
    return this;
  }

   /**
   * The domestic currency, meaning the currency in which the instrument would typically be expected to pay cashflows, e.g. a share in AAPL being USD.
   * @return domCcy
  **/
  @jakarta.annotation.Nullable
  public String getDomCcy() {
    return domCcy;
  }


  public void setDomCcy(String domCcy) {
    this.domCcy = domCcy;
  }


  public Instrument relationships(List<Relationship> relationships) {
    
    this.relationships = relationships;
    return this;
  }

  public Instrument addRelationshipsItem(Relationship relationshipsItem) {
    if (this.relationships == null) {
      this.relationships = new ArrayList<>();
    }
    this.relationships.add(relationshipsItem);
    return this;
  }

   /**
   * A set of relationships associated to the instrument.
   * @return relationships
  **/
  @jakarta.annotation.Nullable
  public List<Relationship> getRelationships() {
    return relationships;
  }


  public void setRelationships(List<Relationship> relationships) {
    this.relationships = relationships;
  }


  public Instrument links(List<Link> links) {
    
    this.links = links;
    return this;
  }

  public Instrument addLinksItem(Link linksItem) {
    if (this.links == null) {
      this.links = new ArrayList<>();
    }
    this.links.add(linksItem);
    return this;
  }

   /**
   * Get links
   * @return links
  **/
  @jakarta.annotation.Nullable
  public List<Link> getLinks() {
    return links;
  }


  public void setLinks(List<Link> links) {
    this.links = links;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Instrument instrument = (Instrument) o;
    return Objects.equals(this.href, instrument.href) &&
        Objects.equals(this.scope, instrument.scope) &&
        Objects.equals(this.lusidInstrumentId, instrument.lusidInstrumentId) &&
        Objects.equals(this.version, instrument.version) &&
        Objects.equals(this.stagedModifications, instrument.stagedModifications) &&
        Objects.equals(this.name, instrument.name) &&
        Objects.equals(this.identifiers, instrument.identifiers) &&
        Objects.equals(this.properties, instrument.properties) &&
        Objects.equals(this.lookthroughPortfolio, instrument.lookthroughPortfolio) &&
        Objects.equals(this.instrumentDefinition, instrument.instrumentDefinition) &&
        Objects.equals(this.state, instrument.state) &&
        Objects.equals(this.assetClass, instrument.assetClass) &&
        Objects.equals(this.domCcy, instrument.domCcy) &&
        Objects.equals(this.relationships, instrument.relationships) &&
        Objects.equals(this.links, instrument.links);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(href, scope, lusidInstrumentId, version, stagedModifications, name, identifiers, properties, lookthroughPortfolio, instrumentDefinition, state, assetClass, domCcy, relationships, links);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Instrument {\n");
    sb.append("    href: ").append(toIndentedString(href)).append("\n");
    sb.append("    scope: ").append(toIndentedString(scope)).append("\n");
    sb.append("    lusidInstrumentId: ").append(toIndentedString(lusidInstrumentId)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    stagedModifications: ").append(toIndentedString(stagedModifications)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    identifiers: ").append(toIndentedString(identifiers)).append("\n");
    sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
    sb.append("    lookthroughPortfolio: ").append(toIndentedString(lookthroughPortfolio)).append("\n");
    sb.append("    instrumentDefinition: ").append(toIndentedString(instrumentDefinition)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    assetClass: ").append(toIndentedString(assetClass)).append("\n");
    sb.append("    domCcy: ").append(toIndentedString(domCcy)).append("\n");
    sb.append("    relationships: ").append(toIndentedString(relationships)).append("\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("href");
    openapiFields.add("scope");
    openapiFields.add("lusidInstrumentId");
    openapiFields.add("version");
    openapiFields.add("stagedModifications");
    openapiFields.add("name");
    openapiFields.add("identifiers");
    openapiFields.add("properties");
    openapiFields.add("lookthroughPortfolio");
    openapiFields.add("instrumentDefinition");
    openapiFields.add("state");
    openapiFields.add("assetClass");
    openapiFields.add("domCcy");
    openapiFields.add("relationships");
    openapiFields.add("links");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("lusidInstrumentId");
    openapiRequiredFields.add("version");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("identifiers");
    openapiRequiredFields.add("state");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to Instrument
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Instrument.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Instrument is not found in the empty JSON string", Instrument.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Instrument.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("href") != null && !jsonObj.get("href").isJsonNull()) && !jsonObj.get("href").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `href` to be a primitive type in the JSON string but got `%s`", jsonObj.get("href").toString()));
      }
      if ((jsonObj.get("scope") != null && !jsonObj.get("scope").isJsonNull()) && !jsonObj.get("scope").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `scope` to be a primitive type in the JSON string but got `%s`", jsonObj.get("scope").toString()));
      }
      if (!jsonObj.get("lusidInstrumentId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lusidInstrumentId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lusidInstrumentId").toString()));
      }
      // validate the required field `version`
      Version.validateJsonElement(jsonObj.get("version"));
      // validate the optional field `stagedModifications`
      if (jsonObj.get("stagedModifications") != null && !jsonObj.get("stagedModifications").isJsonNull()) {
        StagedModificationsInfo.validateJsonElement(jsonObj.get("stagedModifications"));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (jsonObj.get("properties") != null && !jsonObj.get("properties").isJsonNull()) {
        JsonArray jsonArrayproperties = jsonObj.getAsJsonArray("properties");
        if (jsonArrayproperties != null) {
          // ensure the json data is an array
          if (!jsonObj.get("properties").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `properties` to be an array in the JSON string but got `%s`", jsonObj.get("properties").toString()));
          }

          // validate the optional field `properties` (array)
          for (int i = 0; i < jsonArrayproperties.size(); i++) {
            Property.validateJsonElement(jsonArrayproperties.get(i));
          };
        }
      }
      // validate the optional field `lookthroughPortfolio`
      if (jsonObj.get("lookthroughPortfolio") != null && !jsonObj.get("lookthroughPortfolio").isJsonNull()) {
        ResourceId.validateJsonElement(jsonObj.get("lookthroughPortfolio"));
      }
      // validate the optional field `instrumentDefinition`
      if (jsonObj.get("instrumentDefinition") != null && !jsonObj.get("instrumentDefinition").isJsonNull()) {
        LusidInstrument.validateJsonElement(jsonObj.get("instrumentDefinition"));
      }
      if (!jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      if ((jsonObj.get("assetClass") != null && !jsonObj.get("assetClass").isJsonNull()) && !jsonObj.get("assetClass").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `assetClass` to be a primitive type in the JSON string but got `%s`", jsonObj.get("assetClass").toString()));
      }
      if ((jsonObj.get("domCcy") != null && !jsonObj.get("domCcy").isJsonNull()) && !jsonObj.get("domCcy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `domCcy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("domCcy").toString()));
      }
      if (jsonObj.get("relationships") != null && !jsonObj.get("relationships").isJsonNull()) {
        JsonArray jsonArrayrelationships = jsonObj.getAsJsonArray("relationships");
        if (jsonArrayrelationships != null) {
          // ensure the json data is an array
          if (!jsonObj.get("relationships").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `relationships` to be an array in the JSON string but got `%s`", jsonObj.get("relationships").toString()));
          }

          // validate the optional field `relationships` (array)
          for (int i = 0; i < jsonArrayrelationships.size(); i++) {
            Relationship.validateJsonElement(jsonArrayrelationships.get(i));
          };
        }
      }
      if (jsonObj.get("links") != null && !jsonObj.get("links").isJsonNull()) {
        JsonArray jsonArraylinks = jsonObj.getAsJsonArray("links");
        if (jsonArraylinks != null) {
          // ensure the json data is an array
          if (!jsonObj.get("links").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `links` to be an array in the JSON string but got `%s`", jsonObj.get("links").toString()));
          }

          // validate the optional field `links` (array)
          for (int i = 0; i < jsonArraylinks.size(); i++) {
            Link.validateJsonElement(jsonArraylinks.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Instrument.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Instrument' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Instrument> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Instrument.class));

       return (TypeAdapter<T>) new TypeAdapter<Instrument>() {
           @Override
           public void write(JsonWriter out, Instrument value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Instrument read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Instrument given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Instrument
  * @throws IOException if the JSON string is invalid with respect to Instrument
  */
  public static Instrument fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Instrument.class);
  }

 /**
  * Convert an instance of Instrument to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
