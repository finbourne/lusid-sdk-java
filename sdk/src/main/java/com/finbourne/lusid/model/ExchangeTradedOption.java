/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import com.finbourne.lusid.model.ExchangeTradedOptionContractDetails;
import com.finbourne.lusid.model.LusidInstrument;
import com.finbourne.lusid.model.TimeZoneConventions;
import com.finbourne.lusid.model.TradingConventions;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * LUSID representation of an Exchange Traded Option.  Including, but not limited to, Equity Options, Bond Options, Index Options, Future Options, and Interest Rate Options.
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ExchangeTradedOption extends LusidInstrument {
  public static final String SERIALIZED_NAME_START_DATE = "startDate";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  private OffsetDateTime startDate;

  public static final String SERIALIZED_NAME_CONTRACT_DETAILS = "contractDetails";
  @SerializedName(SERIALIZED_NAME_CONTRACT_DETAILS)
  private ExchangeTradedOptionContractDetails contractDetails;

  public static final String SERIALIZED_NAME_CONTRACTS = "contracts";
  @SerializedName(SERIALIZED_NAME_CONTRACTS)
  private java.math.BigDecimal contracts;

  public static final String SERIALIZED_NAME_REF_SPOT_PRICE = "refSpotPrice";
  @SerializedName(SERIALIZED_NAME_REF_SPOT_PRICE)
  private java.math.BigDecimal refSpotPrice;

  public static final String SERIALIZED_NAME_TRADING_CONVENTIONS = "tradingConventions";
  @SerializedName(SERIALIZED_NAME_TRADING_CONVENTIONS)
  private TradingConventions tradingConventions;

  public static final String SERIALIZED_NAME_TIME_ZONE_CONVENTIONS = "timeZoneConventions";
  @SerializedName(SERIALIZED_NAME_TIME_ZONE_CONVENTIONS)
  private TimeZoneConventions timeZoneConventions;

  public ExchangeTradedOption() {
    // this.instrumentType = this.getClass().getSimpleName();
  }

  public ExchangeTradedOption startDate(OffsetDateTime startDate) {
    
    this.startDate = startDate;
    return this;
  }

   /**
   * The start date of the instrument. This is normally synonymous with the trade-date.
   * @return startDate
  **/
  @jakarta.annotation.Nonnull
  public OffsetDateTime getStartDate() {
    return startDate;
  }


  public void setStartDate(OffsetDateTime startDate) {
    this.startDate = startDate;
  }


  public ExchangeTradedOption contractDetails(ExchangeTradedOptionContractDetails contractDetails) {
    
    this.contractDetails = contractDetails;
    return this;
  }

   /**
   * Get contractDetails
   * @return contractDetails
  **/
  @jakarta.annotation.Nonnull
  public ExchangeTradedOptionContractDetails getContractDetails() {
    return contractDetails;
  }


  public void setContractDetails(ExchangeTradedOptionContractDetails contractDetails) {
    this.contractDetails = contractDetails;
  }


  public ExchangeTradedOption contracts(java.math.BigDecimal contracts) {
    
    this.contracts = contracts;
    return this;
  }

   /**
   * The number of contracts held.
   * @return contracts
  **/
  @jakarta.annotation.Nonnull
  public java.math.BigDecimal getContracts() {
    return contracts;
  }


  public void setContracts(java.math.BigDecimal contracts) {
    this.contracts = contracts;
  }


  public ExchangeTradedOption refSpotPrice(java.math.BigDecimal refSpotPrice) {
    
    this.refSpotPrice = refSpotPrice;
    return this;
  }

   /**
   * The reference spot price for the option at which the contract was entered into.
   * @return refSpotPrice
  **/
  @jakarta.annotation.Nonnull
  public java.math.BigDecimal getRefSpotPrice() {
    return refSpotPrice;
  }


  public void setRefSpotPrice(java.math.BigDecimal refSpotPrice) {
    this.refSpotPrice = refSpotPrice;
  }


  public ExchangeTradedOption tradingConventions(TradingConventions tradingConventions) {
    
    this.tradingConventions = tradingConventions;
    return this;
  }

   /**
   * Get tradingConventions
   * @return tradingConventions
  **/
  @jakarta.annotation.Nullable
  public TradingConventions getTradingConventions() {
    return tradingConventions;
  }


  public void setTradingConventions(TradingConventions tradingConventions) {
    this.tradingConventions = tradingConventions;
  }


  public ExchangeTradedOption timeZoneConventions(TimeZoneConventions timeZoneConventions) {
    
    this.timeZoneConventions = timeZoneConventions;
    return this;
  }

   /**
   * Get timeZoneConventions
   * @return timeZoneConventions
  **/
  @jakarta.annotation.Nullable
  public TimeZoneConventions getTimeZoneConventions() {
    return timeZoneConventions;
  }


  public void setTimeZoneConventions(TimeZoneConventions timeZoneConventions) {
    this.timeZoneConventions = timeZoneConventions;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExchangeTradedOption exchangeTradedOption = (ExchangeTradedOption) o;
    return Objects.equals(this.startDate, exchangeTradedOption.startDate) &&
        Objects.equals(this.contractDetails, exchangeTradedOption.contractDetails) &&
        (this.contracts.compareTo(exchangeTradedOption.getContracts()) == 0) &&
        (this.refSpotPrice.compareTo(exchangeTradedOption.getRefSpotPrice()) == 0) &&
        Objects.equals(this.tradingConventions, exchangeTradedOption.tradingConventions) &&
        Objects.equals(this.timeZoneConventions, exchangeTradedOption.timeZoneConventions) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(startDate, contractDetails, contracts, refSpotPrice, tradingConventions, timeZoneConventions, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExchangeTradedOption {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    contractDetails: ").append(toIndentedString(contractDetails)).append("\n");
    sb.append("    contracts: ").append(toIndentedString(contracts)).append("\n");
    sb.append("    refSpotPrice: ").append(toIndentedString(refSpotPrice)).append("\n");
    sb.append("    tradingConventions: ").append(toIndentedString(tradingConventions)).append("\n");
    sb.append("    timeZoneConventions: ").append(toIndentedString(timeZoneConventions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("instrumentType");
    openapiFields.add("startDate");
    openapiFields.add("contractDetails");
    openapiFields.add("contracts");
    openapiFields.add("refSpotPrice");
    openapiFields.add("tradingConventions");
    openapiFields.add("timeZoneConventions");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("startDate");
    openapiRequiredFields.add("contractDetails");
    openapiRequiredFields.add("contracts");
    openapiRequiredFields.add("refSpotPrice");
    openapiRequiredFields.add("instrumentType");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ExchangeTradedOption
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ExchangeTradedOption.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ExchangeTradedOption is not found in the empty JSON string", ExchangeTradedOption.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ExchangeTradedOption.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ExchangeTradedOption.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ExchangeTradedOption' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ExchangeTradedOption> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ExchangeTradedOption.class));

       return (TypeAdapter<T>) new TypeAdapter<ExchangeTradedOption>() {
           @Override
           public void write(JsonWriter out, ExchangeTradedOption value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ExchangeTradedOption read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ExchangeTradedOption given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ExchangeTradedOption
  * @throws IOException if the JSON string is invalid with respect to ExchangeTradedOption
  */
  public static ExchangeTradedOption fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ExchangeTradedOption.class);
  }

 /**
  * Convert an instance of ExchangeTradedOption to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
