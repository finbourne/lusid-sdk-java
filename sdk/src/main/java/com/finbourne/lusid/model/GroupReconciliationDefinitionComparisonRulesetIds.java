/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import com.finbourne.lusid.model.ResourceId;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * GroupReconciliationDefinitionComparisonRulesetIds
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class GroupReconciliationDefinitionComparisonRulesetIds {
  public static final String SERIALIZED_NAME_TRANSACTION_RECONCILIATION = "transactionReconciliation";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_RECONCILIATION)
  private ResourceId transactionReconciliation;

  public static final String SERIALIZED_NAME_HOLDING_RECONCILIATION = "holdingReconciliation";
  @SerializedName(SERIALIZED_NAME_HOLDING_RECONCILIATION)
  private ResourceId holdingReconciliation;

  public static final String SERIALIZED_NAME_VALUATION_RECONCILIATION = "valuationReconciliation";
  @SerializedName(SERIALIZED_NAME_VALUATION_RECONCILIATION)
  private ResourceId valuationReconciliation;

  public GroupReconciliationDefinitionComparisonRulesetIds() {
  }

  public GroupReconciliationDefinitionComparisonRulesetIds transactionReconciliation(ResourceId transactionReconciliation) {
    
    this.transactionReconciliation = transactionReconciliation;
    return this;
  }

   /**
   * Get transactionReconciliation
   * @return transactionReconciliation
  **/
  @jakarta.annotation.Nullable
  public ResourceId getTransactionReconciliation() {
    return transactionReconciliation;
  }


  public void setTransactionReconciliation(ResourceId transactionReconciliation) {
    this.transactionReconciliation = transactionReconciliation;
  }


  public GroupReconciliationDefinitionComparisonRulesetIds holdingReconciliation(ResourceId holdingReconciliation) {
    
    this.holdingReconciliation = holdingReconciliation;
    return this;
  }

   /**
   * Get holdingReconciliation
   * @return holdingReconciliation
  **/
  @jakarta.annotation.Nullable
  public ResourceId getHoldingReconciliation() {
    return holdingReconciliation;
  }


  public void setHoldingReconciliation(ResourceId holdingReconciliation) {
    this.holdingReconciliation = holdingReconciliation;
  }


  public GroupReconciliationDefinitionComparisonRulesetIds valuationReconciliation(ResourceId valuationReconciliation) {
    
    this.valuationReconciliation = valuationReconciliation;
    return this;
  }

   /**
   * Get valuationReconciliation
   * @return valuationReconciliation
  **/
  @jakarta.annotation.Nullable
  public ResourceId getValuationReconciliation() {
    return valuationReconciliation;
  }


  public void setValuationReconciliation(ResourceId valuationReconciliation) {
    this.valuationReconciliation = valuationReconciliation;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GroupReconciliationDefinitionComparisonRulesetIds groupReconciliationDefinitionComparisonRulesetIds = (GroupReconciliationDefinitionComparisonRulesetIds) o;
    return Objects.equals(this.transactionReconciliation, groupReconciliationDefinitionComparisonRulesetIds.transactionReconciliation) &&
        Objects.equals(this.holdingReconciliation, groupReconciliationDefinitionComparisonRulesetIds.holdingReconciliation) &&
        Objects.equals(this.valuationReconciliation, groupReconciliationDefinitionComparisonRulesetIds.valuationReconciliation);
  }

  @Override
  public int hashCode() {
    return Objects.hash(transactionReconciliation, holdingReconciliation, valuationReconciliation);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GroupReconciliationDefinitionComparisonRulesetIds {\n");
    sb.append("    transactionReconciliation: ").append(toIndentedString(transactionReconciliation)).append("\n");
    sb.append("    holdingReconciliation: ").append(toIndentedString(holdingReconciliation)).append("\n");
    sb.append("    valuationReconciliation: ").append(toIndentedString(valuationReconciliation)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("transactionReconciliation");
    openapiFields.add("holdingReconciliation");
    openapiFields.add("valuationReconciliation");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to GroupReconciliationDefinitionComparisonRulesetIds
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GroupReconciliationDefinitionComparisonRulesetIds.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GroupReconciliationDefinitionComparisonRulesetIds is not found in the empty JSON string", GroupReconciliationDefinitionComparisonRulesetIds.openapiRequiredFields.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `transactionReconciliation`
      if (jsonObj.get("transactionReconciliation") != null && !jsonObj.get("transactionReconciliation").isJsonNull()) {
        ResourceId.validateJsonElement(jsonObj.get("transactionReconciliation"));
      }
      // validate the optional field `holdingReconciliation`
      if (jsonObj.get("holdingReconciliation") != null && !jsonObj.get("holdingReconciliation").isJsonNull()) {
        ResourceId.validateJsonElement(jsonObj.get("holdingReconciliation"));
      }
      // validate the optional field `valuationReconciliation`
      if (jsonObj.get("valuationReconciliation") != null && !jsonObj.get("valuationReconciliation").isJsonNull()) {
        ResourceId.validateJsonElement(jsonObj.get("valuationReconciliation"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GroupReconciliationDefinitionComparisonRulesetIds.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GroupReconciliationDefinitionComparisonRulesetIds' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GroupReconciliationDefinitionComparisonRulesetIds> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GroupReconciliationDefinitionComparisonRulesetIds.class));

       return (TypeAdapter<T>) new TypeAdapter<GroupReconciliationDefinitionComparisonRulesetIds>() {
           @Override
           public void write(JsonWriter out, GroupReconciliationDefinitionComparisonRulesetIds value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GroupReconciliationDefinitionComparisonRulesetIds read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of GroupReconciliationDefinitionComparisonRulesetIds given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of GroupReconciliationDefinitionComparisonRulesetIds
  * @throws IOException if the JSON string is invalid with respect to GroupReconciliationDefinitionComparisonRulesetIds
  */
  public static GroupReconciliationDefinitionComparisonRulesetIds fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GroupReconciliationDefinitionComparisonRulesetIds.class);
  }

 /**
  * Convert an instance of GroupReconciliationDefinitionComparisonRulesetIds to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
