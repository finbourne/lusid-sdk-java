/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import com.finbourne.lusid.model.PortfolioReturnBreakdown;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * A list of Composite Breakdowns.
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class CompositeBreakdown {
  public static final String SERIALIZED_NAME_EFFECTIVE_AT = "effectiveAt";
  @SerializedName(SERIALIZED_NAME_EFFECTIVE_AT)
  private OffsetDateTime effectiveAt;

  public static final String SERIALIZED_NAME_COMPOSITE = "composite";
  @SerializedName(SERIALIZED_NAME_COMPOSITE)
  private PortfolioReturnBreakdown composite;

  public static final String SERIALIZED_NAME_CONSTITUENTS = "constituents";
  @SerializedName(SERIALIZED_NAME_CONSTITUENTS)
  private List<PortfolioReturnBreakdown> constituents;

  public CompositeBreakdown() {
  }

  public CompositeBreakdown effectiveAt(OffsetDateTime effectiveAt) {
    
    this.effectiveAt = effectiveAt;
    return this;
  }

   /**
   * The effectiveAt for the calculation.
   * @return effectiveAt
  **/
  @jakarta.annotation.Nonnull
  public OffsetDateTime getEffectiveAt() {
    return effectiveAt;
  }


  public void setEffectiveAt(OffsetDateTime effectiveAt) {
    this.effectiveAt = effectiveAt;
  }


  public CompositeBreakdown composite(PortfolioReturnBreakdown composite) {
    
    this.composite = composite;
    return this;
  }

   /**
   * Get composite
   * @return composite
  **/
  @jakarta.annotation.Nullable
  public PortfolioReturnBreakdown getComposite() {
    return composite;
  }


  public void setComposite(PortfolioReturnBreakdown composite) {
    this.composite = composite;
  }


  public CompositeBreakdown constituents(List<PortfolioReturnBreakdown> constituents) {
    
    this.constituents = constituents;
    return this;
  }

  public CompositeBreakdown addConstituentsItem(PortfolioReturnBreakdown constituentsItem) {
    if (this.constituents == null) {
      this.constituents = new ArrayList<>();
    }
    this.constituents.add(constituentsItem);
    return this;
  }

   /**
   * The constituents with their information which are part of the composite.
   * @return constituents
  **/
  @jakarta.annotation.Nullable
  public List<PortfolioReturnBreakdown> getConstituents() {
    return constituents;
  }


  public void setConstituents(List<PortfolioReturnBreakdown> constituents) {
    this.constituents = constituents;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CompositeBreakdown compositeBreakdown = (CompositeBreakdown) o;
    return Objects.equals(this.effectiveAt, compositeBreakdown.effectiveAt) &&
        Objects.equals(this.composite, compositeBreakdown.composite) &&
        Objects.equals(this.constituents, compositeBreakdown.constituents);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(effectiveAt, composite, constituents);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CompositeBreakdown {\n");
    sb.append("    effectiveAt: ").append(toIndentedString(effectiveAt)).append("\n");
    sb.append("    composite: ").append(toIndentedString(composite)).append("\n");
    sb.append("    constituents: ").append(toIndentedString(constituents)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("effectiveAt");
    openapiFields.add("composite");
    openapiFields.add("constituents");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("effectiveAt");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to CompositeBreakdown
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CompositeBreakdown.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CompositeBreakdown is not found in the empty JSON string", CompositeBreakdown.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CompositeBreakdown.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `composite`
      if (jsonObj.get("composite") != null && !jsonObj.get("composite").isJsonNull()) {
        PortfolioReturnBreakdown.validateJsonElement(jsonObj.get("composite"));
      }
      if (jsonObj.get("constituents") != null && !jsonObj.get("constituents").isJsonNull()) {
        JsonArray jsonArrayconstituents = jsonObj.getAsJsonArray("constituents");
        if (jsonArrayconstituents != null) {
          // ensure the json data is an array
          if (!jsonObj.get("constituents").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `constituents` to be an array in the JSON string but got `%s`", jsonObj.get("constituents").toString()));
          }

          // validate the optional field `constituents` (array)
          for (int i = 0; i < jsonArrayconstituents.size(); i++) {
            PortfolioReturnBreakdown.validateJsonElement(jsonArrayconstituents.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CompositeBreakdown.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CompositeBreakdown' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CompositeBreakdown> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CompositeBreakdown.class));

       return (TypeAdapter<T>) new TypeAdapter<CompositeBreakdown>() {
           @Override
           public void write(JsonWriter out, CompositeBreakdown value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CompositeBreakdown read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CompositeBreakdown given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CompositeBreakdown
  * @throws IOException if the JSON string is invalid with respect to CompositeBreakdown
  */
  public static CompositeBreakdown fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CompositeBreakdown.class);
  }

 /**
  * Convert an instance of CompositeBreakdown to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
