/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import com.finbourne.lusid.model.CashOfferElection;
import com.finbourne.lusid.model.InstrumentEvent;
import com.finbourne.lusid.model.LapseElection;
import com.finbourne.lusid.model.TenderOfferElection;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * Representation of a repurchase offer corporate action.  Represents an offer by the issuer to repurchase its own shares from a shareholder at a given price.
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class RepurchaseOfferEvent extends InstrumentEvent {
  public static final String SERIALIZED_NAME_PAYMENT_DATE = "paymentDate";
  @SerializedName(SERIALIZED_NAME_PAYMENT_DATE)
  private OffsetDateTime paymentDate;

  public static final String SERIALIZED_NAME_MARKET_DEADLINE_DATE = "marketDeadlineDate";
  @SerializedName(SERIALIZED_NAME_MARKET_DEADLINE_DATE)
  private OffsetDateTime marketDeadlineDate;

  public static final String SERIALIZED_NAME_REPURCHASE_QUANTITY = "repurchaseQuantity";
  @SerializedName(SERIALIZED_NAME_REPURCHASE_QUANTITY)
  private java.math.BigDecimal repurchaseQuantity;

  public static final String SERIALIZED_NAME_CASH_OFFER_ELECTIONS = "cashOfferElections";
  @SerializedName(SERIALIZED_NAME_CASH_OFFER_ELECTIONS)
  private List<CashOfferElection> cashOfferElections = new ArrayList<>();

  public static final String SERIALIZED_NAME_LAPSE_ELECTIONS = "lapseElections";
  @SerializedName(SERIALIZED_NAME_LAPSE_ELECTIONS)
  private List<LapseElection> lapseElections = new ArrayList<>();

  public static final String SERIALIZED_NAME_TENDER_OFFER_ELECTIONS = "tenderOfferElections";
  @SerializedName(SERIALIZED_NAME_TENDER_OFFER_ELECTIONS)
  private List<TenderOfferElection> tenderOfferElections = new ArrayList<>();

  public static final String SERIALIZED_NAME_PRORATION_RATE = "prorationRate";
  @SerializedName(SERIALIZED_NAME_PRORATION_RATE)
  private java.math.BigDecimal prorationRate = java.math.BigDecimal.valueOf(1d);

  public static final String SERIALIZED_NAME_RESPONSE_DEADLINE_DATE = "responseDeadlineDate";
  @SerializedName(SERIALIZED_NAME_RESPONSE_DEADLINE_DATE)
  private OffsetDateTime responseDeadlineDate;

  public RepurchaseOfferEvent() {
    // this.instrumentEventType = this.getClass().getSimpleName();
  }

  public RepurchaseOfferEvent paymentDate(OffsetDateTime paymentDate) {
    
    this.paymentDate = paymentDate;
    return this;
  }

   /**
   * Payment date of the event.
   * @return paymentDate
  **/
  @jakarta.annotation.Nullable
  public OffsetDateTime getPaymentDate() {
    return paymentDate;
  }


  public void setPaymentDate(OffsetDateTime paymentDate) {
    this.paymentDate = paymentDate;
  }


  public RepurchaseOfferEvent marketDeadlineDate(OffsetDateTime marketDeadlineDate) {
    
    this.marketDeadlineDate = marketDeadlineDate;
    return this;
  }

   /**
   * Date set by the issuer or by an agent of the issuer as the latest date to respond to the offer. Must be before or equal to the PaymentDate.
   * @return marketDeadlineDate
  **/
  @jakarta.annotation.Nullable
  public OffsetDateTime getMarketDeadlineDate() {
    return marketDeadlineDate;
  }


  public void setMarketDeadlineDate(OffsetDateTime marketDeadlineDate) {
    this.marketDeadlineDate = marketDeadlineDate;
  }


  public RepurchaseOfferEvent repurchaseQuantity(java.math.BigDecimal repurchaseQuantity) {
    
    this.repurchaseQuantity = repurchaseQuantity;
    return this;
  }

   /**
   * Quantity of the security to be repurchased.
   * @return repurchaseQuantity
  **/
  @jakarta.annotation.Nonnull
  public java.math.BigDecimal getRepurchaseQuantity() {
    return repurchaseQuantity;
  }


  public void setRepurchaseQuantity(java.math.BigDecimal repurchaseQuantity) {
    this.repurchaseQuantity = repurchaseQuantity;
  }


  public RepurchaseOfferEvent cashOfferElections(List<CashOfferElection> cashOfferElections) {
    
    this.cashOfferElections = cashOfferElections;
    return this;
  }

  public RepurchaseOfferEvent addCashOfferElectionsItem(CashOfferElection cashOfferElectionsItem) {
    if (this.cashOfferElections == null) {
      this.cashOfferElections = new ArrayList<>();
    }
    this.cashOfferElections.add(cashOfferElectionsItem);
    return this;
  }

   /**
   * List of possible CashOfferElections for this event. Only 1 should be provided.
   * @return cashOfferElections
  **/
  @jakarta.annotation.Nonnull
  public List<CashOfferElection> getCashOfferElections() {
    return cashOfferElections;
  }


  public void setCashOfferElections(List<CashOfferElection> cashOfferElections) {
    this.cashOfferElections = cashOfferElections;
  }


  public RepurchaseOfferEvent lapseElections(List<LapseElection> lapseElections) {
    
    this.lapseElections = lapseElections;
    return this;
  }

  public RepurchaseOfferEvent addLapseElectionsItem(LapseElection lapseElectionsItem) {
    if (this.lapseElections == null) {
      this.lapseElections = new ArrayList<>();
    }
    this.lapseElections.add(lapseElectionsItem);
    return this;
  }

   /**
   * List of possible LapseElections for this event. Only 1 should be provided.  Allows the user to opt out of the offer.
   * @return lapseElections
  **/
  @jakarta.annotation.Nonnull
  public List<LapseElection> getLapseElections() {
    return lapseElections;
  }


  public void setLapseElections(List<LapseElection> lapseElections) {
    this.lapseElections = lapseElections;
  }


  public RepurchaseOfferEvent tenderOfferElections(List<TenderOfferElection> tenderOfferElections) {
    
    this.tenderOfferElections = tenderOfferElections;
    return this;
  }

  public RepurchaseOfferEvent addTenderOfferElectionsItem(TenderOfferElection tenderOfferElectionsItem) {
    if (this.tenderOfferElections == null) {
      this.tenderOfferElections = new ArrayList<>();
    }
    this.tenderOfferElections.add(tenderOfferElectionsItem);
    return this;
  }

   /**
   * List of possible TenderOfferElections for this event. Only 1 should be provided.
   * @return tenderOfferElections
  **/
  @jakarta.annotation.Nonnull
  public List<TenderOfferElection> getTenderOfferElections() {
    return tenderOfferElections;
  }


  public void setTenderOfferElections(List<TenderOfferElection> tenderOfferElections) {
    this.tenderOfferElections = tenderOfferElections;
  }


  public RepurchaseOfferEvent prorationRate(java.math.BigDecimal prorationRate) {
    
    this.prorationRate = prorationRate;
    return this;
  }

   /**
   * The fraction used to calculate a proportional adjustment for RepurchaseQuantity when a full period is not used.  Defaults to 1 if not set. Must be greater than 0 and less than or equal to 1.
   * @return prorationRate
  **/
  @jakarta.annotation.Nullable
  public java.math.BigDecimal getProrationRate() {
    return prorationRate;
  }


  public void setProrationRate(java.math.BigDecimal prorationRate) {
    this.prorationRate = prorationRate;
  }


  public RepurchaseOfferEvent responseDeadlineDate(OffsetDateTime responseDeadlineDate) {
    
    this.responseDeadlineDate = responseDeadlineDate;
    return this;
  }

   /**
   * Date set by the account servicer as the latest date to respond to the offer.  Optional. If set, must be before or equal to MarketDeadlineDate.  Defaults to MarketDeadlineDate if not set.
   * @return responseDeadlineDate
  **/
  @jakarta.annotation.Nullable
  public OffsetDateTime getResponseDeadlineDate() {
    return responseDeadlineDate;
  }


  public void setResponseDeadlineDate(OffsetDateTime responseDeadlineDate) {
    this.responseDeadlineDate = responseDeadlineDate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RepurchaseOfferEvent repurchaseOfferEvent = (RepurchaseOfferEvent) o;
    return Objects.equals(this.paymentDate, repurchaseOfferEvent.paymentDate) &&
        Objects.equals(this.marketDeadlineDate, repurchaseOfferEvent.marketDeadlineDate) &&
        (this.repurchaseQuantity.compareTo(repurchaseOfferEvent.getRepurchaseQuantity()) == 0) &&
        Objects.equals(this.cashOfferElections, repurchaseOfferEvent.cashOfferElections) &&
        Objects.equals(this.lapseElections, repurchaseOfferEvent.lapseElections) &&
        Objects.equals(this.tenderOfferElections, repurchaseOfferEvent.tenderOfferElections) &&
        (this.prorationRate.compareTo(repurchaseOfferEvent.getProrationRate()) == 0) &&
        Objects.equals(this.responseDeadlineDate, repurchaseOfferEvent.responseDeadlineDate) &&
        super.equals(o);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(paymentDate, marketDeadlineDate, repurchaseQuantity, cashOfferElections, lapseElections, tenderOfferElections, prorationRate, responseDeadlineDate, super.hashCode());
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RepurchaseOfferEvent {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    paymentDate: ").append(toIndentedString(paymentDate)).append("\n");
    sb.append("    marketDeadlineDate: ").append(toIndentedString(marketDeadlineDate)).append("\n");
    sb.append("    repurchaseQuantity: ").append(toIndentedString(repurchaseQuantity)).append("\n");
    sb.append("    cashOfferElections: ").append(toIndentedString(cashOfferElections)).append("\n");
    sb.append("    lapseElections: ").append(toIndentedString(lapseElections)).append("\n");
    sb.append("    tenderOfferElections: ").append(toIndentedString(tenderOfferElections)).append("\n");
    sb.append("    prorationRate: ").append(toIndentedString(prorationRate)).append("\n");
    sb.append("    responseDeadlineDate: ").append(toIndentedString(responseDeadlineDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("instrumentEventType");
    openapiFields.add("paymentDate");
    openapiFields.add("marketDeadlineDate");
    openapiFields.add("repurchaseQuantity");
    openapiFields.add("cashOfferElections");
    openapiFields.add("lapseElections");
    openapiFields.add("tenderOfferElections");
    openapiFields.add("prorationRate");
    openapiFields.add("responseDeadlineDate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("repurchaseQuantity");
    openapiRequiredFields.add("cashOfferElections");
    openapiRequiredFields.add("lapseElections");
    openapiRequiredFields.add("tenderOfferElections");
    openapiRequiredFields.add("instrumentEventType");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to RepurchaseOfferEvent
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RepurchaseOfferEvent.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RepurchaseOfferEvent is not found in the empty JSON string", RepurchaseOfferEvent.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : RepurchaseOfferEvent.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RepurchaseOfferEvent.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RepurchaseOfferEvent' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RepurchaseOfferEvent> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RepurchaseOfferEvent.class));

       return (TypeAdapter<T>) new TypeAdapter<RepurchaseOfferEvent>() {
           @Override
           public void write(JsonWriter out, RepurchaseOfferEvent value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RepurchaseOfferEvent read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of RepurchaseOfferEvent given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of RepurchaseOfferEvent
  * @throws IOException if the JSON string is invalid with respect to RepurchaseOfferEvent
  */
  public static RepurchaseOfferEvent fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RepurchaseOfferEvent.class);
  }

 /**
  * Convert an instance of RepurchaseOfferEvent to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
