/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import com.finbourne.lusid.model.Alias;
import com.finbourne.lusid.model.CustomDataModelIdentifierTypeSpecificationWithDisplayName;
import com.finbourne.lusid.model.CustomDataModelPropertySpecificationWithDisplayName;
import com.finbourne.lusid.model.RecommendedSortBy;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * CustomDataModelCriteria
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class CustomDataModelCriteria {
  public static final String SERIALIZED_NAME_CONDITIONS = "conditions";
  @SerializedName(SERIALIZED_NAME_CONDITIONS)
  private List<String> conditions;

  public static final String SERIALIZED_NAME_PROPERTIES = "properties";
  @SerializedName(SERIALIZED_NAME_PROPERTIES)
  private List<CustomDataModelPropertySpecificationWithDisplayName> properties;

  public static final String SERIALIZED_NAME_IDENTIFIER_TYPES = "identifierTypes";
  @SerializedName(SERIALIZED_NAME_IDENTIFIER_TYPES)
  private List<CustomDataModelIdentifierTypeSpecificationWithDisplayName> identifierTypes;

  public static final String SERIALIZED_NAME_ATTRIBUTE_ALIASES = "attributeAliases";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTE_ALIASES)
  private List<Alias> attributeAliases;

  public static final String SERIALIZED_NAME_RECOMMENDED_SORT_BY = "recommendedSortBy";
  @SerializedName(SERIALIZED_NAME_RECOMMENDED_SORT_BY)
  private List<RecommendedSortBy> recommendedSortBy;

  public CustomDataModelCriteria() {
  }

  public CustomDataModelCriteria conditions(List<String> conditions) {
    
    this.conditions = conditions;
    return this;
  }

  public CustomDataModelCriteria addConditionsItem(String conditionsItem) {
    if (this.conditions == null) {
      this.conditions = new ArrayList<>();
    }
    this.conditions.add(conditionsItem);
    return this;
  }

   /**
   * The conditions that the bound entity must meet to be valid.
   * @return conditions
  **/
  @jakarta.annotation.Nullable
  public List<String> getConditions() {
    return conditions;
  }


  public void setConditions(List<String> conditions) {
    this.conditions = conditions;
  }


  public CustomDataModelCriteria properties(List<CustomDataModelPropertySpecificationWithDisplayName> properties) {
    
    this.properties = properties;
    return this;
  }

  public CustomDataModelCriteria addPropertiesItem(CustomDataModelPropertySpecificationWithDisplayName propertiesItem) {
    if (this.properties == null) {
      this.properties = new ArrayList<>();
    }
    this.properties.add(propertiesItem);
    return this;
  }

   /**
   * The properties that are required or allowed on the bound entity.
   * @return properties
  **/
  @jakarta.annotation.Nullable
  public List<CustomDataModelPropertySpecificationWithDisplayName> getProperties() {
    return properties;
  }


  public void setProperties(List<CustomDataModelPropertySpecificationWithDisplayName> properties) {
    this.properties = properties;
  }


  public CustomDataModelCriteria identifierTypes(List<CustomDataModelIdentifierTypeSpecificationWithDisplayName> identifierTypes) {
    
    this.identifierTypes = identifierTypes;
    return this;
  }

  public CustomDataModelCriteria addIdentifierTypesItem(CustomDataModelIdentifierTypeSpecificationWithDisplayName identifierTypesItem) {
    if (this.identifierTypes == null) {
      this.identifierTypes = new ArrayList<>();
    }
    this.identifierTypes.add(identifierTypesItem);
    return this;
  }

   /**
   * The identifier types that are required or allowed on the bound entity.
   * @return identifierTypes
  **/
  @jakarta.annotation.Nullable
  public List<CustomDataModelIdentifierTypeSpecificationWithDisplayName> getIdentifierTypes() {
    return identifierTypes;
  }


  public void setIdentifierTypes(List<CustomDataModelIdentifierTypeSpecificationWithDisplayName> identifierTypes) {
    this.identifierTypes = identifierTypes;
  }


  public CustomDataModelCriteria attributeAliases(List<Alias> attributeAliases) {
    
    this.attributeAliases = attributeAliases;
    return this;
  }

  public CustomDataModelCriteria addAttributeAliasesItem(Alias attributeAliasesItem) {
    if (this.attributeAliases == null) {
      this.attributeAliases = new ArrayList<>();
    }
    this.attributeAliases.add(attributeAliasesItem);
    return this;
  }

   /**
   * The aliases for property keys, identifier types, and fields on the bound entity.
   * @return attributeAliases
  **/
  @jakarta.annotation.Nullable
  public List<Alias> getAttributeAliases() {
    return attributeAliases;
  }


  public void setAttributeAliases(List<Alias> attributeAliases) {
    this.attributeAliases = attributeAliases;
  }


  public CustomDataModelCriteria recommendedSortBy(List<RecommendedSortBy> recommendedSortBy) {
    
    this.recommendedSortBy = recommendedSortBy;
    return this;
  }

  public CustomDataModelCriteria addRecommendedSortByItem(RecommendedSortBy recommendedSortByItem) {
    if (this.recommendedSortBy == null) {
      this.recommendedSortBy = new ArrayList<>();
    }
    this.recommendedSortBy.add(recommendedSortByItem);
    return this;
  }

   /**
   * The preferred default sorting instructions.
   * @return recommendedSortBy
  **/
  @jakarta.annotation.Nullable
  public List<RecommendedSortBy> getRecommendedSortBy() {
    return recommendedSortBy;
  }


  public void setRecommendedSortBy(List<RecommendedSortBy> recommendedSortBy) {
    this.recommendedSortBy = recommendedSortBy;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CustomDataModelCriteria customDataModelCriteria = (CustomDataModelCriteria) o;
    return Objects.equals(this.conditions, customDataModelCriteria.conditions) &&
        Objects.equals(this.properties, customDataModelCriteria.properties) &&
        Objects.equals(this.identifierTypes, customDataModelCriteria.identifierTypes) &&
        Objects.equals(this.attributeAliases, customDataModelCriteria.attributeAliases) &&
        Objects.equals(this.recommendedSortBy, customDataModelCriteria.recommendedSortBy);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(conditions, properties, identifierTypes, attributeAliases, recommendedSortBy);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CustomDataModelCriteria {\n");
    sb.append("    conditions: ").append(toIndentedString(conditions)).append("\n");
    sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
    sb.append("    identifierTypes: ").append(toIndentedString(identifierTypes)).append("\n");
    sb.append("    attributeAliases: ").append(toIndentedString(attributeAliases)).append("\n");
    sb.append("    recommendedSortBy: ").append(toIndentedString(recommendedSortBy)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("conditions");
    openapiFields.add("properties");
    openapiFields.add("identifierTypes");
    openapiFields.add("attributeAliases");
    openapiFields.add("recommendedSortBy");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to CustomDataModelCriteria
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CustomDataModelCriteria.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CustomDataModelCriteria is not found in the empty JSON string", CustomDataModelCriteria.openapiRequiredFields.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("conditions") != null && !jsonObj.get("conditions").isJsonNull() && !jsonObj.get("conditions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `conditions` to be an array in the JSON string but got `%s`", jsonObj.get("conditions").toString()));
      }
      if (jsonObj.get("properties") != null && !jsonObj.get("properties").isJsonNull()) {
        JsonArray jsonArrayproperties = jsonObj.getAsJsonArray("properties");
        if (jsonArrayproperties != null) {
          // ensure the json data is an array
          if (!jsonObj.get("properties").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `properties` to be an array in the JSON string but got `%s`", jsonObj.get("properties").toString()));
          }

          // validate the optional field `properties` (array)
          for (int i = 0; i < jsonArrayproperties.size(); i++) {
            CustomDataModelPropertySpecificationWithDisplayName.validateJsonElement(jsonArrayproperties.get(i));
          };
        }
      }
      if (jsonObj.get("identifierTypes") != null && !jsonObj.get("identifierTypes").isJsonNull()) {
        JsonArray jsonArrayidentifierTypes = jsonObj.getAsJsonArray("identifierTypes");
        if (jsonArrayidentifierTypes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("identifierTypes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `identifierTypes` to be an array in the JSON string but got `%s`", jsonObj.get("identifierTypes").toString()));
          }

          // validate the optional field `identifierTypes` (array)
          for (int i = 0; i < jsonArrayidentifierTypes.size(); i++) {
            CustomDataModelIdentifierTypeSpecificationWithDisplayName.validateJsonElement(jsonArrayidentifierTypes.get(i));
          };
        }
      }
      if (jsonObj.get("attributeAliases") != null && !jsonObj.get("attributeAliases").isJsonNull()) {
        JsonArray jsonArrayattributeAliases = jsonObj.getAsJsonArray("attributeAliases");
        if (jsonArrayattributeAliases != null) {
          // ensure the json data is an array
          if (!jsonObj.get("attributeAliases").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `attributeAliases` to be an array in the JSON string but got `%s`", jsonObj.get("attributeAliases").toString()));
          }

          // validate the optional field `attributeAliases` (array)
          for (int i = 0; i < jsonArrayattributeAliases.size(); i++) {
            Alias.validateJsonElement(jsonArrayattributeAliases.get(i));
          };
        }
      }
      if (jsonObj.get("recommendedSortBy") != null && !jsonObj.get("recommendedSortBy").isJsonNull()) {
        JsonArray jsonArrayrecommendedSortBy = jsonObj.getAsJsonArray("recommendedSortBy");
        if (jsonArrayrecommendedSortBy != null) {
          // ensure the json data is an array
          if (!jsonObj.get("recommendedSortBy").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `recommendedSortBy` to be an array in the JSON string but got `%s`", jsonObj.get("recommendedSortBy").toString()));
          }

          // validate the optional field `recommendedSortBy` (array)
          for (int i = 0; i < jsonArrayrecommendedSortBy.size(); i++) {
            RecommendedSortBy.validateJsonElement(jsonArrayrecommendedSortBy.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CustomDataModelCriteria.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CustomDataModelCriteria' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CustomDataModelCriteria> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CustomDataModelCriteria.class));

       return (TypeAdapter<T>) new TypeAdapter<CustomDataModelCriteria>() {
           @Override
           public void write(JsonWriter out, CustomDataModelCriteria value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CustomDataModelCriteria read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CustomDataModelCriteria given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CustomDataModelCriteria
  * @throws IOException if the JSON string is invalid with respect to CustomDataModelCriteria
  */
  public static CustomDataModelCriteria fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CustomDataModelCriteria.class);
  }

 /**
  * Convert an instance of CustomDataModelCriteria to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
