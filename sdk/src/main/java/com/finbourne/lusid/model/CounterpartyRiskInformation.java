/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import com.finbourne.lusid.model.CreditRating;
import com.finbourne.lusid.model.IndustryClassifier;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * In the event that the legal entity is a counterparty to an OTC transaction (as signatory to a counterparty agreement such as an ISDA 2002 Master Agreement), this information would be needed for calculations such as Credit-Valuation-Adjustments and Debit-Valuation-Adjustments (CVA, DVA, XVA etc).
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class CounterpartyRiskInformation {
  public static final String SERIALIZED_NAME_COUNTRY_OF_RISK = "countryOfRisk";
  @SerializedName(SERIALIZED_NAME_COUNTRY_OF_RISK)
  private String countryOfRisk;

  public static final String SERIALIZED_NAME_CREDIT_RATINGS = "creditRatings";
  @SerializedName(SERIALIZED_NAME_CREDIT_RATINGS)
  private List<CreditRating> creditRatings = new ArrayList<>();

  public static final String SERIALIZED_NAME_INDUSTRY_CLASSIFIERS = "industryClassifiers";
  @SerializedName(SERIALIZED_NAME_INDUSTRY_CLASSIFIERS)
  private List<IndustryClassifier> industryClassifiers = new ArrayList<>();

  public CounterpartyRiskInformation() {
  }

  public CounterpartyRiskInformation countryOfRisk(String countryOfRisk) {
    
    this.countryOfRisk = countryOfRisk;
    return this;
  }

   /**
   * The country to which one would naturally ascribe risk, typically the legal entity&#39;s country of registration. This can be used to infer funding currency and related market data in the absence of a specific preference.
   * @return countryOfRisk
  **/
  @jakarta.annotation.Nonnull
  public String getCountryOfRisk() {
    return countryOfRisk;
  }


  public void setCountryOfRisk(String countryOfRisk) {
    this.countryOfRisk = countryOfRisk;
  }


  public CounterpartyRiskInformation creditRatings(List<CreditRating> creditRatings) {
    
    this.creditRatings = creditRatings;
    return this;
  }

  public CounterpartyRiskInformation addCreditRatingsItem(CreditRating creditRatingsItem) {
    if (this.creditRatings == null) {
      this.creditRatings = new ArrayList<>();
    }
    this.creditRatings.add(creditRatingsItem);
    return this;
  }

   /**
   * 
   * @return creditRatings
  **/
  @jakarta.annotation.Nonnull
  public List<CreditRating> getCreditRatings() {
    return creditRatings;
  }


  public void setCreditRatings(List<CreditRating> creditRatings) {
    this.creditRatings = creditRatings;
  }


  public CounterpartyRiskInformation industryClassifiers(List<IndustryClassifier> industryClassifiers) {
    
    this.industryClassifiers = industryClassifiers;
    return this;
  }

  public CounterpartyRiskInformation addIndustryClassifiersItem(IndustryClassifier industryClassifiersItem) {
    if (this.industryClassifiers == null) {
      this.industryClassifiers = new ArrayList<>();
    }
    this.industryClassifiers.add(industryClassifiersItem);
    return this;
  }

   /**
   * 
   * @return industryClassifiers
  **/
  @jakarta.annotation.Nonnull
  public List<IndustryClassifier> getIndustryClassifiers() {
    return industryClassifiers;
  }


  public void setIndustryClassifiers(List<IndustryClassifier> industryClassifiers) {
    this.industryClassifiers = industryClassifiers;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CounterpartyRiskInformation counterpartyRiskInformation = (CounterpartyRiskInformation) o;
    return Objects.equals(this.countryOfRisk, counterpartyRiskInformation.countryOfRisk) &&
        Objects.equals(this.creditRatings, counterpartyRiskInformation.creditRatings) &&
        Objects.equals(this.industryClassifiers, counterpartyRiskInformation.industryClassifiers);
  }

  @Override
  public int hashCode() {
    return Objects.hash(countryOfRisk, creditRatings, industryClassifiers);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CounterpartyRiskInformation {\n");
    sb.append("    countryOfRisk: ").append(toIndentedString(countryOfRisk)).append("\n");
    sb.append("    creditRatings: ").append(toIndentedString(creditRatings)).append("\n");
    sb.append("    industryClassifiers: ").append(toIndentedString(industryClassifiers)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("countryOfRisk");
    openapiFields.add("creditRatings");
    openapiFields.add("industryClassifiers");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("countryOfRisk");
    openapiRequiredFields.add("creditRatings");
    openapiRequiredFields.add("industryClassifiers");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to CounterpartyRiskInformation
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CounterpartyRiskInformation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CounterpartyRiskInformation is not found in the empty JSON string", CounterpartyRiskInformation.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CounterpartyRiskInformation.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("countryOfRisk").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `countryOfRisk` to be a primitive type in the JSON string but got `%s`", jsonObj.get("countryOfRisk").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("creditRatings").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `creditRatings` to be an array in the JSON string but got `%s`", jsonObj.get("creditRatings").toString()));
      }

      JsonArray jsonArraycreditRatings = jsonObj.getAsJsonArray("creditRatings");
      // validate the required field `creditRatings` (array)
      for (int i = 0; i < jsonArraycreditRatings.size(); i++) {
        CreditRating.validateJsonElement(jsonArraycreditRatings.get(i));
      };
      // ensure the json data is an array
      if (!jsonObj.get("industryClassifiers").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `industryClassifiers` to be an array in the JSON string but got `%s`", jsonObj.get("industryClassifiers").toString()));
      }

      JsonArray jsonArrayindustryClassifiers = jsonObj.getAsJsonArray("industryClassifiers");
      // validate the required field `industryClassifiers` (array)
      for (int i = 0; i < jsonArrayindustryClassifiers.size(); i++) {
        IndustryClassifier.validateJsonElement(jsonArrayindustryClassifiers.get(i));
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CounterpartyRiskInformation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CounterpartyRiskInformation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CounterpartyRiskInformation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CounterpartyRiskInformation.class));

       return (TypeAdapter<T>) new TypeAdapter<CounterpartyRiskInformation>() {
           @Override
           public void write(JsonWriter out, CounterpartyRiskInformation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CounterpartyRiskInformation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CounterpartyRiskInformation given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CounterpartyRiskInformation
  * @throws IOException if the JSON string is invalid with respect to CounterpartyRiskInformation
  */
  public static CounterpartyRiskInformation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CounterpartyRiskInformation.class);
  }

 /**
  * Convert an instance of CounterpartyRiskInformation to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
