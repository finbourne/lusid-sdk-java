/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import com.finbourne.lusid.model.LusidInstrument;
import com.finbourne.lusid.model.Premium;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * LUSID representation of a plain vanilla OTC Equity Option.
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class EquityOption extends LusidInstrument {
  public static final String SERIALIZED_NAME_START_DATE = "startDate";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  private OffsetDateTime startDate;

  public static final String SERIALIZED_NAME_OPTION_MATURITY_DATE = "optionMaturityDate";
  @SerializedName(SERIALIZED_NAME_OPTION_MATURITY_DATE)
  private OffsetDateTime optionMaturityDate;

  public static final String SERIALIZED_NAME_OPTION_SETTLEMENT_DATE = "optionSettlementDate";
  @SerializedName(SERIALIZED_NAME_OPTION_SETTLEMENT_DATE)
  private OffsetDateTime optionSettlementDate;

  public static final String SERIALIZED_NAME_DELIVERY_TYPE = "deliveryType";
  @SerializedName(SERIALIZED_NAME_DELIVERY_TYPE)
  private String deliveryType;

  public static final String SERIALIZED_NAME_OPTION_TYPE = "optionType";
  @SerializedName(SERIALIZED_NAME_OPTION_TYPE)
  private String optionType;

  public static final String SERIALIZED_NAME_STRIKE = "strike";
  @SerializedName(SERIALIZED_NAME_STRIKE)
  private java.math.BigDecimal strike;

  public static final String SERIALIZED_NAME_DOM_CCY = "domCcy";
  @SerializedName(SERIALIZED_NAME_DOM_CCY)
  private String domCcy;

  public static final String SERIALIZED_NAME_UNDERLYING_IDENTIFIER = "underlyingIdentifier";
  @SerializedName(SERIALIZED_NAME_UNDERLYING_IDENTIFIER)
  private String underlyingIdentifier;

  public static final String SERIALIZED_NAME_CODE = "code";
  @SerializedName(SERIALIZED_NAME_CODE)
  private String code;

  public static final String SERIALIZED_NAME_EQUITY_OPTION_TYPE = "equityOptionType";
  @SerializedName(SERIALIZED_NAME_EQUITY_OPTION_TYPE)
  private String equityOptionType;

  public static final String SERIALIZED_NAME_NUMBER_OF_SHARES = "numberOfShares";
  @SerializedName(SERIALIZED_NAME_NUMBER_OF_SHARES)
  private java.math.BigDecimal numberOfShares;

  public static final String SERIALIZED_NAME_PREMIUM = "premium";
  @SerializedName(SERIALIZED_NAME_PREMIUM)
  private Premium premium;

  public static final String SERIALIZED_NAME_EXERCISE_TYPE = "exerciseType";
  @SerializedName(SERIALIZED_NAME_EXERCISE_TYPE)
  private String exerciseType;

  public EquityOption() {
    // this.instrumentType = this.getClass().getSimpleName();
  }

  public EquityOption startDate(OffsetDateTime startDate) {
    
    this.startDate = startDate;
    return this;
  }

   /**
   * The start date of the instrument. This is normally synonymous with the trade-date.
   * @return startDate
  **/
  @jakarta.annotation.Nonnull
  public OffsetDateTime getStartDate() {
    return startDate;
  }


  public void setStartDate(OffsetDateTime startDate) {
    this.startDate = startDate;
  }


  public EquityOption optionMaturityDate(OffsetDateTime optionMaturityDate) {
    
    this.optionMaturityDate = optionMaturityDate;
    return this;
  }

   /**
   * The maturity date of the option.
   * @return optionMaturityDate
  **/
  @jakarta.annotation.Nonnull
  public OffsetDateTime getOptionMaturityDate() {
    return optionMaturityDate;
  }


  public void setOptionMaturityDate(OffsetDateTime optionMaturityDate) {
    this.optionMaturityDate = optionMaturityDate;
  }


  public EquityOption optionSettlementDate(OffsetDateTime optionSettlementDate) {
    
    this.optionSettlementDate = optionSettlementDate;
    return this;
  }

   /**
   * The settlement date of the option.
   * @return optionSettlementDate
  **/
  @jakarta.annotation.Nonnull
  public OffsetDateTime getOptionSettlementDate() {
    return optionSettlementDate;
  }


  public void setOptionSettlementDate(OffsetDateTime optionSettlementDate) {
    this.optionSettlementDate = optionSettlementDate;
  }


  public EquityOption deliveryType(String deliveryType) {
    
    this.deliveryType = deliveryType;
    return this;
  }

   /**
   * Is the option cash settled or physical delivery of option    Supported string (enumeration) values are: [Cash, Physical].
   * @return deliveryType
  **/
  @jakarta.annotation.Nonnull
  public String getDeliveryType() {
    return deliveryType;
  }


  public void setDeliveryType(String deliveryType) {
    this.deliveryType = deliveryType;
  }


  public EquityOption optionType(String optionType) {
    
    this.optionType = optionType;
    return this;
  }

   /**
   * Type of optionality for the option    Supported string (enumeration) values are: [Call, Put].
   * @return optionType
  **/
  @jakarta.annotation.Nonnull
  public String getOptionType() {
    return optionType;
  }


  public void setOptionType(String optionType) {
    this.optionType = optionType;
  }


  public EquityOption strike(java.math.BigDecimal strike) {
    
    this.strike = strike;
    return this;
  }

   /**
   * The strike of the option.
   * @return strike
  **/
  @jakarta.annotation.Nonnull
  public java.math.BigDecimal getStrike() {
    return strike;
  }


  public void setStrike(java.math.BigDecimal strike) {
    this.strike = strike;
  }


  public EquityOption domCcy(String domCcy) {
    
    this.domCcy = domCcy;
    return this;
  }

   /**
   * The domestic currency of the instrument.
   * @return domCcy
  **/
  @jakarta.annotation.Nonnull
  public String getDomCcy() {
    return domCcy;
  }


  public void setDomCcy(String domCcy) {
    this.domCcy = domCcy;
  }


  public EquityOption underlyingIdentifier(String underlyingIdentifier) {
    
    this.underlyingIdentifier = underlyingIdentifier;
    return this;
  }

   /**
   * The market identifier type of the underlying code, e.g RIC.    Supported string (enumeration) values are: [LusidInstrumentId, Isin, Sedol, Cusip, ClientInternal, Figi, RIC, QuotePermId, REDCode, BBGId, ICECode].
   * @return underlyingIdentifier
  **/
  @jakarta.annotation.Nonnull
  public String getUnderlyingIdentifier() {
    return underlyingIdentifier;
  }


  public void setUnderlyingIdentifier(String underlyingIdentifier) {
    this.underlyingIdentifier = underlyingIdentifier;
  }


  public EquityOption code(String code) {
    
    this.code = code;
    return this;
  }

   /**
   * The identifying code for the equity underlying, e.g. &#39;IBM.N&#39;.
   * @return code
  **/
  @jakarta.annotation.Nonnull
  public String getCode() {
    return code;
  }


  public void setCode(String code) {
    this.code = code;
  }


  public EquityOption equityOptionType(String equityOptionType) {
    
    this.equityOptionType = equityOptionType;
    return this;
  }

   /**
   * Equity option types. E.g. Vanilla (default), RightsIssue, Warrant.    Supported string (enumeration) values are: [Vanilla, RightsIssue, Warrant].
   * @return equityOptionType
  **/
  @jakarta.annotation.Nullable
  public String getEquityOptionType() {
    return equityOptionType;
  }


  public void setEquityOptionType(String equityOptionType) {
    this.equityOptionType = equityOptionType;
  }


  public EquityOption numberOfShares(java.math.BigDecimal numberOfShares) {
    
    this.numberOfShares = numberOfShares;
    return this;
  }

   /**
   * The amount of shares to exchange if the option is exercised.
   * @return numberOfShares
  **/
  @jakarta.annotation.Nullable
  public java.math.BigDecimal getNumberOfShares() {
    return numberOfShares;
  }


  public void setNumberOfShares(java.math.BigDecimal numberOfShares) {
    this.numberOfShares = numberOfShares;
  }


  public EquityOption premium(Premium premium) {
    
    this.premium = premium;
    return this;
  }

   /**
   * Get premium
   * @return premium
  **/
  @jakarta.annotation.Nullable
  public Premium getPremium() {
    return premium;
  }


  public void setPremium(Premium premium) {
    this.premium = premium;
  }


  public EquityOption exerciseType(String exerciseType) {
    
    this.exerciseType = exerciseType;
    return this;
  }

   /**
   * Type of optionality that is present; European, American.    Supported string (enumeration) values are: [European, American].
   * @return exerciseType
  **/
  @jakarta.annotation.Nullable
  public String getExerciseType() {
    return exerciseType;
  }


  public void setExerciseType(String exerciseType) {
    this.exerciseType = exerciseType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EquityOption equityOption = (EquityOption) o;
    return Objects.equals(this.startDate, equityOption.startDate) &&
        Objects.equals(this.optionMaturityDate, equityOption.optionMaturityDate) &&
        Objects.equals(this.optionSettlementDate, equityOption.optionSettlementDate) &&
        Objects.equals(this.deliveryType, equityOption.deliveryType) &&
        Objects.equals(this.optionType, equityOption.optionType) &&
        (this.strike.compareTo(equityOption.getStrike()) == 0) &&
        Objects.equals(this.domCcy, equityOption.domCcy) &&
        Objects.equals(this.underlyingIdentifier, equityOption.underlyingIdentifier) &&
        Objects.equals(this.code, equityOption.code) &&
        Objects.equals(this.equityOptionType, equityOption.equityOptionType) &&
        (this.numberOfShares.compareTo(equityOption.getNumberOfShares()) == 0) &&
        Objects.equals(this.premium, equityOption.premium) &&
        Objects.equals(this.exerciseType, equityOption.exerciseType) &&
        super.equals(o);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(startDate, optionMaturityDate, optionSettlementDate, deliveryType, optionType, strike, domCcy, underlyingIdentifier, code, equityOptionType, numberOfShares, premium, exerciseType, super.hashCode());
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EquityOption {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    optionMaturityDate: ").append(toIndentedString(optionMaturityDate)).append("\n");
    sb.append("    optionSettlementDate: ").append(toIndentedString(optionSettlementDate)).append("\n");
    sb.append("    deliveryType: ").append(toIndentedString(deliveryType)).append("\n");
    sb.append("    optionType: ").append(toIndentedString(optionType)).append("\n");
    sb.append("    strike: ").append(toIndentedString(strike)).append("\n");
    sb.append("    domCcy: ").append(toIndentedString(domCcy)).append("\n");
    sb.append("    underlyingIdentifier: ").append(toIndentedString(underlyingIdentifier)).append("\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    equityOptionType: ").append(toIndentedString(equityOptionType)).append("\n");
    sb.append("    numberOfShares: ").append(toIndentedString(numberOfShares)).append("\n");
    sb.append("    premium: ").append(toIndentedString(premium)).append("\n");
    sb.append("    exerciseType: ").append(toIndentedString(exerciseType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("instrumentType");
    openapiFields.add("startDate");
    openapiFields.add("optionMaturityDate");
    openapiFields.add("optionSettlementDate");
    openapiFields.add("deliveryType");
    openapiFields.add("optionType");
    openapiFields.add("strike");
    openapiFields.add("domCcy");
    openapiFields.add("underlyingIdentifier");
    openapiFields.add("code");
    openapiFields.add("equityOptionType");
    openapiFields.add("numberOfShares");
    openapiFields.add("premium");
    openapiFields.add("exerciseType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("startDate");
    openapiRequiredFields.add("optionMaturityDate");
    openapiRequiredFields.add("optionSettlementDate");
    openapiRequiredFields.add("deliveryType");
    openapiRequiredFields.add("optionType");
    openapiRequiredFields.add("strike");
    openapiRequiredFields.add("domCcy");
    openapiRequiredFields.add("underlyingIdentifier");
    openapiRequiredFields.add("code");
    openapiRequiredFields.add("instrumentType");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to EquityOption
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!EquityOption.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EquityOption is not found in the empty JSON string", EquityOption.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!EquityOption.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EquityOption` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : EquityOption.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EquityOption.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EquityOption' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EquityOption> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EquityOption.class));

       return (TypeAdapter<T>) new TypeAdapter<EquityOption>() {
           @Override
           public void write(JsonWriter out, EquityOption value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EquityOption read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of EquityOption given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of EquityOption
  * @throws IOException if the JSON string is invalid with respect to EquityOption
  */
  public static EquityOption fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EquityOption.class);
  }

 /**
  * Convert an instance of EquityOption to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
