/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * The conventions for the calculation of FX fixings, where the fixing rate is expected to be the amount of DomCcy per unit of FgnCcy. As an example, assume the required fixing is the WM/R 4pm mid closing rate for the USD amount per 1 EUR. This is published with RIC EURUSDFIXM&#x3D;WM, which would be the FixingReference, with FgnCcy EUR and DomCcy USD.
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class FxConventions {
  public static final String SERIALIZED_NAME_FGN_CCY = "fgnCcy";
  @SerializedName(SERIALIZED_NAME_FGN_CCY)
  private String fgnCcy;

  public static final String SERIALIZED_NAME_DOM_CCY = "domCcy";
  @SerializedName(SERIALIZED_NAME_DOM_CCY)
  private String domCcy;

  public static final String SERIALIZED_NAME_FIXING_REFERENCE = "fixingReference";
  @SerializedName(SERIALIZED_NAME_FIXING_REFERENCE)
  private String fixingReference;

  public FxConventions() {
  }

  public FxConventions fgnCcy(String fgnCcy) {
    
    this.fgnCcy = fgnCcy;
    return this;
  }

   /**
   * The foreign currency
   * @return fgnCcy
  **/
  @jakarta.annotation.Nonnull
  public String getFgnCcy() {
    return fgnCcy;
  }


  public void setFgnCcy(String fgnCcy) {
    this.fgnCcy = fgnCcy;
  }


  public FxConventions domCcy(String domCcy) {
    
    this.domCcy = domCcy;
    return this;
  }

   /**
   * The domestic currency
   * @return domCcy
  **/
  @jakarta.annotation.Nonnull
  public String getDomCcy() {
    return domCcy;
  }


  public void setDomCcy(String domCcy) {
    this.domCcy = domCcy;
  }


  public FxConventions fixingReference(String fixingReference) {
    
    this.fixingReference = fixingReference;
    return this;
  }

   /**
   * The reference name used to find the desired quote
   * @return fixingReference
  **/
  @jakarta.annotation.Nonnull
  public String getFixingReference() {
    return fixingReference;
  }


  public void setFixingReference(String fixingReference) {
    this.fixingReference = fixingReference;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FxConventions fxConventions = (FxConventions) o;
    return Objects.equals(this.fgnCcy, fxConventions.fgnCcy) &&
        Objects.equals(this.domCcy, fxConventions.domCcy) &&
        Objects.equals(this.fixingReference, fxConventions.fixingReference);
  }

  @Override
  public int hashCode() {
    return Objects.hash(fgnCcy, domCcy, fixingReference);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FxConventions {\n");
    sb.append("    fgnCcy: ").append(toIndentedString(fgnCcy)).append("\n");
    sb.append("    domCcy: ").append(toIndentedString(domCcy)).append("\n");
    sb.append("    fixingReference: ").append(toIndentedString(fixingReference)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("fgnCcy");
    openapiFields.add("domCcy");
    openapiFields.add("fixingReference");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("fgnCcy");
    openapiRequiredFields.add("domCcy");
    openapiRequiredFields.add("fixingReference");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to FxConventions
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FxConventions.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FxConventions is not found in the empty JSON string", FxConventions.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : FxConventions.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("fgnCcy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fgnCcy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fgnCcy").toString()));
      }
      if (!jsonObj.get("domCcy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `domCcy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("domCcy").toString()));
      }
      if (!jsonObj.get("fixingReference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fixingReference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fixingReference").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FxConventions.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FxConventions' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FxConventions> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FxConventions.class));

       return (TypeAdapter<T>) new TypeAdapter<FxConventions>() {
           @Override
           public void write(JsonWriter out, FxConventions value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FxConventions read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of FxConventions given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of FxConventions
  * @throws IOException if the JSON string is invalid with respect to FxConventions
  */
  public static FxConventions fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FxConventions.class);
  }

 /**
  * Convert an instance of FxConventions to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
