/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import com.finbourne.lusid.model.LusidEntityResult;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * Represents the result of a data quality check operation
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class DataQualityCheckResult {
  public static final String SERIALIZED_NAME_CHECK_DEFINITION_SCOPE = "checkDefinitionScope";
  @SerializedName(SERIALIZED_NAME_CHECK_DEFINITION_SCOPE)
  private String checkDefinitionScope;

  public static final String SERIALIZED_NAME_CHECK_DEFINITION_CODE = "checkDefinitionCode";
  @SerializedName(SERIALIZED_NAME_CHECK_DEFINITION_CODE)
  private String checkDefinitionCode;

  public static final String SERIALIZED_NAME_CHECK_DEFINITION_DISPLAY_NAME = "checkDefinitionDisplayName";
  @SerializedName(SERIALIZED_NAME_CHECK_DEFINITION_DISPLAY_NAME)
  private String checkDefinitionDisplayName;

  public static final String SERIALIZED_NAME_CHECK_RUN_AS_AT = "checkRunAsAt";
  @SerializedName(SERIALIZED_NAME_CHECK_RUN_AS_AT)
  private OffsetDateTime checkRunAsAt;

  public static final String SERIALIZED_NAME_RESULT_TYPE = "resultType";
  @SerializedName(SERIALIZED_NAME_RESULT_TYPE)
  private String resultType;

  public static final String SERIALIZED_NAME_RULE_SET_KEY = "ruleSetKey";
  @SerializedName(SERIALIZED_NAME_RULE_SET_KEY)
  private String ruleSetKey;

  public static final String SERIALIZED_NAME_RULE_SET_DISPLAY_NAME = "ruleSetDisplayName";
  @SerializedName(SERIALIZED_NAME_RULE_SET_DISPLAY_NAME)
  private String ruleSetDisplayName;

  public static final String SERIALIZED_NAME_RULE_KEY = "ruleKey";
  @SerializedName(SERIALIZED_NAME_RULE_KEY)
  private String ruleKey;

  public static final String SERIALIZED_NAME_RULE_DISPLAY_NAME = "ruleDisplayName";
  @SerializedName(SERIALIZED_NAME_RULE_DISPLAY_NAME)
  private String ruleDisplayName;

  public static final String SERIALIZED_NAME_RULE_DESCRIPTION = "ruleDescription";
  @SerializedName(SERIALIZED_NAME_RULE_DESCRIPTION)
  private String ruleDescription;

  public static final String SERIALIZED_NAME_RULE_FORMULA = "ruleFormula";
  @SerializedName(SERIALIZED_NAME_RULE_FORMULA)
  private String ruleFormula;

  public static final String SERIALIZED_NAME_SEVERITY = "severity";
  @SerializedName(SERIALIZED_NAME_SEVERITY)
  private Integer severity;

  public static final String SERIALIZED_NAME_LUSID_ENTITY = "lusidEntity";
  @SerializedName(SERIALIZED_NAME_LUSID_ENTITY)
  private LusidEntityResult lusidEntity;

  public static final String SERIALIZED_NAME_COUNT_RULE_BREACHES = "countRuleBreaches";
  @SerializedName(SERIALIZED_NAME_COUNT_RULE_BREACHES)
  private Integer countRuleBreaches;

  public static final String SERIALIZED_NAME_ERROR_DETAIL = "errorDetail";
  @SerializedName(SERIALIZED_NAME_ERROR_DETAIL)
  private String errorDetail;

  public static final String SERIALIZED_NAME_RESULT_ID = "resultId";
  @SerializedName(SERIALIZED_NAME_RESULT_ID)
  private String resultId;

  public DataQualityCheckResult() {
  }

  public DataQualityCheckResult checkDefinitionScope(String checkDefinitionScope) {
    
    this.checkDefinitionScope = checkDefinitionScope;
    return this;
  }

   /**
   * The scope of the check definition
   * @return checkDefinitionScope
  **/
  @jakarta.annotation.Nullable
  public String getCheckDefinitionScope() {
    return checkDefinitionScope;
  }


  public void setCheckDefinitionScope(String checkDefinitionScope) {
    this.checkDefinitionScope = checkDefinitionScope;
  }


  public DataQualityCheckResult checkDefinitionCode(String checkDefinitionCode) {
    
    this.checkDefinitionCode = checkDefinitionCode;
    return this;
  }

   /**
   * The code of the check definition
   * @return checkDefinitionCode
  **/
  @jakarta.annotation.Nullable
  public String getCheckDefinitionCode() {
    return checkDefinitionCode;
  }


  public void setCheckDefinitionCode(String checkDefinitionCode) {
    this.checkDefinitionCode = checkDefinitionCode;
  }


  public DataQualityCheckResult checkDefinitionDisplayName(String checkDefinitionDisplayName) {
    
    this.checkDefinitionDisplayName = checkDefinitionDisplayName;
    return this;
  }

   /**
   * The display name of the check definition
   * @return checkDefinitionDisplayName
  **/
  @jakarta.annotation.Nullable
  public String getCheckDefinitionDisplayName() {
    return checkDefinitionDisplayName;
  }


  public void setCheckDefinitionDisplayName(String checkDefinitionDisplayName) {
    this.checkDefinitionDisplayName = checkDefinitionDisplayName;
  }


  public DataQualityCheckResult checkRunAsAt(OffsetDateTime checkRunAsAt) {
    
    this.checkRunAsAt = checkRunAsAt;
    return this;
  }

   /**
   * The timestamp when the check was run
   * @return checkRunAsAt
  **/
  @jakarta.annotation.Nullable
  public OffsetDateTime getCheckRunAsAt() {
    return checkRunAsAt;
  }


  public void setCheckRunAsAt(OffsetDateTime checkRunAsAt) {
    this.checkRunAsAt = checkRunAsAt;
  }


  public DataQualityCheckResult resultType(String resultType) {
    
    this.resultType = resultType;
    return this;
  }

   /**
   * The type of result from the check
   * @return resultType
  **/
  @jakarta.annotation.Nullable
  public String getResultType() {
    return resultType;
  }


  public void setResultType(String resultType) {
    this.resultType = resultType;
  }


  public DataQualityCheckResult ruleSetKey(String ruleSetKey) {
    
    this.ruleSetKey = ruleSetKey;
    return this;
  }

   /**
   * The key identifying the ruleset
   * @return ruleSetKey
  **/
  @jakarta.annotation.Nullable
  public String getRuleSetKey() {
    return ruleSetKey;
  }


  public void setRuleSetKey(String ruleSetKey) {
    this.ruleSetKey = ruleSetKey;
  }


  public DataQualityCheckResult ruleSetDisplayName(String ruleSetDisplayName) {
    
    this.ruleSetDisplayName = ruleSetDisplayName;
    return this;
  }

   /**
   * The display name of the ruleset
   * @return ruleSetDisplayName
  **/
  @jakarta.annotation.Nullable
  public String getRuleSetDisplayName() {
    return ruleSetDisplayName;
  }


  public void setRuleSetDisplayName(String ruleSetDisplayName) {
    this.ruleSetDisplayName = ruleSetDisplayName;
  }


  public DataQualityCheckResult ruleKey(String ruleKey) {
    
    this.ruleKey = ruleKey;
    return this;
  }

   /**
   * The key identifying the rule (for RuleInvalid, RuleBreached, RuleBreachesOverLimit)
   * @return ruleKey
  **/
  @jakarta.annotation.Nullable
  public String getRuleKey() {
    return ruleKey;
  }


  public void setRuleKey(String ruleKey) {
    this.ruleKey = ruleKey;
  }


  public DataQualityCheckResult ruleDisplayName(String ruleDisplayName) {
    
    this.ruleDisplayName = ruleDisplayName;
    return this;
  }

   /**
   * The display name of the rule (for RuleInvalid, RuleBreached, RuleBreachesOverLimit)
   * @return ruleDisplayName
  **/
  @jakarta.annotation.Nullable
  public String getRuleDisplayName() {
    return ruleDisplayName;
  }


  public void setRuleDisplayName(String ruleDisplayName) {
    this.ruleDisplayName = ruleDisplayName;
  }


  public DataQualityCheckResult ruleDescription(String ruleDescription) {
    
    this.ruleDescription = ruleDescription;
    return this;
  }

   /**
   * The description of the rule (for RuleInvalid, RuleBreached, RuleBreachesOverLimit)
   * @return ruleDescription
  **/
  @jakarta.annotation.Nullable
  public String getRuleDescription() {
    return ruleDescription;
  }


  public void setRuleDescription(String ruleDescription) {
    this.ruleDescription = ruleDescription;
  }


  public DataQualityCheckResult ruleFormula(String ruleFormula) {
    
    this.ruleFormula = ruleFormula;
    return this;
  }

   /**
   * The formula of the rule (for RuleInvalid, RuleBreached, RuleBreachesOverLimit)
   * @return ruleFormula
  **/
  @jakarta.annotation.Nullable
  public String getRuleFormula() {
    return ruleFormula;
  }


  public void setRuleFormula(String ruleFormula) {
    this.ruleFormula = ruleFormula;
  }


  public DataQualityCheckResult severity(Integer severity) {
    
    this.severity = severity;
    return this;
  }

   /**
   * The severity level
   * @return severity
  **/
  @jakarta.annotation.Nullable
  public Integer getSeverity() {
    return severity;
  }


  public void setSeverity(Integer severity) {
    this.severity = severity;
  }


  public DataQualityCheckResult lusidEntity(LusidEntityResult lusidEntity) {
    
    this.lusidEntity = lusidEntity;
    return this;
  }

   /**
   * Get lusidEntity
   * @return lusidEntity
  **/
  @jakarta.annotation.Nullable
  public LusidEntityResult getLusidEntity() {
    return lusidEntity;
  }


  public void setLusidEntity(LusidEntityResult lusidEntity) {
    this.lusidEntity = lusidEntity;
  }


  public DataQualityCheckResult countRuleBreaches(Integer countRuleBreaches) {
    
    this.countRuleBreaches = countRuleBreaches;
    return this;
  }

   /**
   * The count of rule breaches (1 for RuleBreached, multiple for RuleBreachesOverLimit)
   * @return countRuleBreaches
  **/
  @jakarta.annotation.Nullable
  public Integer getCountRuleBreaches() {
    return countRuleBreaches;
  }


  public void setCountRuleBreaches(Integer countRuleBreaches) {
    this.countRuleBreaches = countRuleBreaches;
  }


  public DataQualityCheckResult errorDetail(String errorDetail) {
    
    this.errorDetail = errorDetail;
    return this;
  }

   /**
   * Error details (for RulesetInvalid, RuleInvalid)
   * @return errorDetail
  **/
  @jakarta.annotation.Nullable
  public String getErrorDetail() {
    return errorDetail;
  }


  public void setErrorDetail(String errorDetail) {
    this.errorDetail = errorDetail;
  }


  public DataQualityCheckResult resultId(String resultId) {
    
    this.resultId = resultId;
    return this;
  }

   /**
   * Unique identifier for the result in format: {{GUID of Check Definition}}-{{resultType}}-{{rulesetKey}}-{{ruleKey}}-{{entity GUID}}
   * @return resultId
  **/
  @jakarta.annotation.Nullable
  public String getResultId() {
    return resultId;
  }


  public void setResultId(String resultId) {
    this.resultId = resultId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DataQualityCheckResult dataQualityCheckResult = (DataQualityCheckResult) o;
    return Objects.equals(this.checkDefinitionScope, dataQualityCheckResult.checkDefinitionScope) &&
        Objects.equals(this.checkDefinitionCode, dataQualityCheckResult.checkDefinitionCode) &&
        Objects.equals(this.checkDefinitionDisplayName, dataQualityCheckResult.checkDefinitionDisplayName) &&
        Objects.equals(this.checkRunAsAt, dataQualityCheckResult.checkRunAsAt) &&
        Objects.equals(this.resultType, dataQualityCheckResult.resultType) &&
        Objects.equals(this.ruleSetKey, dataQualityCheckResult.ruleSetKey) &&
        Objects.equals(this.ruleSetDisplayName, dataQualityCheckResult.ruleSetDisplayName) &&
        Objects.equals(this.ruleKey, dataQualityCheckResult.ruleKey) &&
        Objects.equals(this.ruleDisplayName, dataQualityCheckResult.ruleDisplayName) &&
        Objects.equals(this.ruleDescription, dataQualityCheckResult.ruleDescription) &&
        Objects.equals(this.ruleFormula, dataQualityCheckResult.ruleFormula) &&
        Objects.equals(this.severity, dataQualityCheckResult.severity) &&
        Objects.equals(this.lusidEntity, dataQualityCheckResult.lusidEntity) &&
        Objects.equals(this.countRuleBreaches, dataQualityCheckResult.countRuleBreaches) &&
        Objects.equals(this.errorDetail, dataQualityCheckResult.errorDetail) &&
        Objects.equals(this.resultId, dataQualityCheckResult.resultId);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(checkDefinitionScope, checkDefinitionCode, checkDefinitionDisplayName, checkRunAsAt, resultType, ruleSetKey, ruleSetDisplayName, ruleKey, ruleDisplayName, ruleDescription, ruleFormula, severity, lusidEntity, countRuleBreaches, errorDetail, resultId);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DataQualityCheckResult {\n");
    sb.append("    checkDefinitionScope: ").append(toIndentedString(checkDefinitionScope)).append("\n");
    sb.append("    checkDefinitionCode: ").append(toIndentedString(checkDefinitionCode)).append("\n");
    sb.append("    checkDefinitionDisplayName: ").append(toIndentedString(checkDefinitionDisplayName)).append("\n");
    sb.append("    checkRunAsAt: ").append(toIndentedString(checkRunAsAt)).append("\n");
    sb.append("    resultType: ").append(toIndentedString(resultType)).append("\n");
    sb.append("    ruleSetKey: ").append(toIndentedString(ruleSetKey)).append("\n");
    sb.append("    ruleSetDisplayName: ").append(toIndentedString(ruleSetDisplayName)).append("\n");
    sb.append("    ruleKey: ").append(toIndentedString(ruleKey)).append("\n");
    sb.append("    ruleDisplayName: ").append(toIndentedString(ruleDisplayName)).append("\n");
    sb.append("    ruleDescription: ").append(toIndentedString(ruleDescription)).append("\n");
    sb.append("    ruleFormula: ").append(toIndentedString(ruleFormula)).append("\n");
    sb.append("    severity: ").append(toIndentedString(severity)).append("\n");
    sb.append("    lusidEntity: ").append(toIndentedString(lusidEntity)).append("\n");
    sb.append("    countRuleBreaches: ").append(toIndentedString(countRuleBreaches)).append("\n");
    sb.append("    errorDetail: ").append(toIndentedString(errorDetail)).append("\n");
    sb.append("    resultId: ").append(toIndentedString(resultId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("checkDefinitionScope");
    openapiFields.add("checkDefinitionCode");
    openapiFields.add("checkDefinitionDisplayName");
    openapiFields.add("checkRunAsAt");
    openapiFields.add("resultType");
    openapiFields.add("ruleSetKey");
    openapiFields.add("ruleSetDisplayName");
    openapiFields.add("ruleKey");
    openapiFields.add("ruleDisplayName");
    openapiFields.add("ruleDescription");
    openapiFields.add("ruleFormula");
    openapiFields.add("severity");
    openapiFields.add("lusidEntity");
    openapiFields.add("countRuleBreaches");
    openapiFields.add("errorDetail");
    openapiFields.add("resultId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to DataQualityCheckResult
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DataQualityCheckResult.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DataQualityCheckResult is not found in the empty JSON string", DataQualityCheckResult.openapiRequiredFields.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("checkDefinitionScope") != null && !jsonObj.get("checkDefinitionScope").isJsonNull()) && !jsonObj.get("checkDefinitionScope").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `checkDefinitionScope` to be a primitive type in the JSON string but got `%s`", jsonObj.get("checkDefinitionScope").toString()));
      }
      if ((jsonObj.get("checkDefinitionCode") != null && !jsonObj.get("checkDefinitionCode").isJsonNull()) && !jsonObj.get("checkDefinitionCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `checkDefinitionCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("checkDefinitionCode").toString()));
      }
      if ((jsonObj.get("checkDefinitionDisplayName") != null && !jsonObj.get("checkDefinitionDisplayName").isJsonNull()) && !jsonObj.get("checkDefinitionDisplayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `checkDefinitionDisplayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("checkDefinitionDisplayName").toString()));
      }
      if ((jsonObj.get("resultType") != null && !jsonObj.get("resultType").isJsonNull()) && !jsonObj.get("resultType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resultType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resultType").toString()));
      }
      if ((jsonObj.get("ruleSetKey") != null && !jsonObj.get("ruleSetKey").isJsonNull()) && !jsonObj.get("ruleSetKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ruleSetKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ruleSetKey").toString()));
      }
      if ((jsonObj.get("ruleSetDisplayName") != null && !jsonObj.get("ruleSetDisplayName").isJsonNull()) && !jsonObj.get("ruleSetDisplayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ruleSetDisplayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ruleSetDisplayName").toString()));
      }
      if ((jsonObj.get("ruleKey") != null && !jsonObj.get("ruleKey").isJsonNull()) && !jsonObj.get("ruleKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ruleKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ruleKey").toString()));
      }
      if ((jsonObj.get("ruleDisplayName") != null && !jsonObj.get("ruleDisplayName").isJsonNull()) && !jsonObj.get("ruleDisplayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ruleDisplayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ruleDisplayName").toString()));
      }
      if ((jsonObj.get("ruleDescription") != null && !jsonObj.get("ruleDescription").isJsonNull()) && !jsonObj.get("ruleDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ruleDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ruleDescription").toString()));
      }
      if ((jsonObj.get("ruleFormula") != null && !jsonObj.get("ruleFormula").isJsonNull()) && !jsonObj.get("ruleFormula").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ruleFormula` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ruleFormula").toString()));
      }
      // validate the optional field `lusidEntity`
      if (jsonObj.get("lusidEntity") != null && !jsonObj.get("lusidEntity").isJsonNull()) {
        LusidEntityResult.validateJsonElement(jsonObj.get("lusidEntity"));
      }
      if ((jsonObj.get("errorDetail") != null && !jsonObj.get("errorDetail").isJsonNull()) && !jsonObj.get("errorDetail").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `errorDetail` to be a primitive type in the JSON string but got `%s`", jsonObj.get("errorDetail").toString()));
      }
      if ((jsonObj.get("resultId") != null && !jsonObj.get("resultId").isJsonNull()) && !jsonObj.get("resultId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resultId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resultId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DataQualityCheckResult.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DataQualityCheckResult' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DataQualityCheckResult> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DataQualityCheckResult.class));

       return (TypeAdapter<T>) new TypeAdapter<DataQualityCheckResult>() {
           @Override
           public void write(JsonWriter out, DataQualityCheckResult value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DataQualityCheckResult read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of DataQualityCheckResult given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of DataQualityCheckResult
  * @throws IOException if the JSON string is invalid with respect to DataQualityCheckResult
  */
  public static DataQualityCheckResult fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DataQualityCheckResult.class);
  }

 /**
  * Convert an instance of DataQualityCheckResult to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
