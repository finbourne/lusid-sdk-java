/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * It is possible to control which supplier is used for a given asset class. This field is deprecated in favour of market data rules, which subsumes its functionality.
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class MarketContextSuppliers {
  public static final String SERIALIZED_NAME_COMMODITY = "Commodity";
  @SerializedName(SERIALIZED_NAME_COMMODITY)
  private String commodity;

  public static final String SERIALIZED_NAME_CREDIT = "Credit";
  @SerializedName(SERIALIZED_NAME_CREDIT)
  private String credit;

  public static final String SERIALIZED_NAME_EQUITY = "Equity";
  @SerializedName(SERIALIZED_NAME_EQUITY)
  private String equity;

  public static final String SERIALIZED_NAME_FX = "Fx";
  @SerializedName(SERIALIZED_NAME_FX)
  private String fx;

  public static final String SERIALIZED_NAME_RATES = "Rates";
  @SerializedName(SERIALIZED_NAME_RATES)
  private String rates;

  public MarketContextSuppliers() {
  }

  public MarketContextSuppliers commodity(String commodity) {
    
    this.commodity = commodity;
    return this;
  }

   /**
   * Get commodity
   * @return commodity
  **/
  @jakarta.annotation.Nullable
  public String getCommodity() {
    return commodity;
  }


  public void setCommodity(String commodity) {
    this.commodity = commodity;
  }


  public MarketContextSuppliers credit(String credit) {
    
    this.credit = credit;
    return this;
  }

   /**
   * Get credit
   * @return credit
  **/
  @jakarta.annotation.Nullable
  public String getCredit() {
    return credit;
  }


  public void setCredit(String credit) {
    this.credit = credit;
  }


  public MarketContextSuppliers equity(String equity) {
    
    this.equity = equity;
    return this;
  }

   /**
   * Get equity
   * @return equity
  **/
  @jakarta.annotation.Nullable
  public String getEquity() {
    return equity;
  }


  public void setEquity(String equity) {
    this.equity = equity;
  }


  public MarketContextSuppliers fx(String fx) {
    
    this.fx = fx;
    return this;
  }

   /**
   * Get fx
   * @return fx
  **/
  @jakarta.annotation.Nullable
  public String getFx() {
    return fx;
  }


  public void setFx(String fx) {
    this.fx = fx;
  }


  public MarketContextSuppliers rates(String rates) {
    
    this.rates = rates;
    return this;
  }

   /**
   * Get rates
   * @return rates
  **/
  @jakarta.annotation.Nullable
  public String getRates() {
    return rates;
  }


  public void setRates(String rates) {
    this.rates = rates;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MarketContextSuppliers marketContextSuppliers = (MarketContextSuppliers) o;
    return Objects.equals(this.commodity, marketContextSuppliers.commodity) &&
        Objects.equals(this.credit, marketContextSuppliers.credit) &&
        Objects.equals(this.equity, marketContextSuppliers.equity) &&
        Objects.equals(this.fx, marketContextSuppliers.fx) &&
        Objects.equals(this.rates, marketContextSuppliers.rates);
  }

  @Override
  public int hashCode() {
    return Objects.hash(commodity, credit, equity, fx, rates);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MarketContextSuppliers {\n");
    sb.append("    commodity: ").append(toIndentedString(commodity)).append("\n");
    sb.append("    credit: ").append(toIndentedString(credit)).append("\n");
    sb.append("    equity: ").append(toIndentedString(equity)).append("\n");
    sb.append("    fx: ").append(toIndentedString(fx)).append("\n");
    sb.append("    rates: ").append(toIndentedString(rates)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Commodity");
    openapiFields.add("Credit");
    openapiFields.add("Equity");
    openapiFields.add("Fx");
    openapiFields.add("Rates");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to MarketContextSuppliers
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MarketContextSuppliers.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MarketContextSuppliers is not found in the empty JSON string", MarketContextSuppliers.openapiRequiredFields.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("Commodity") != null && !jsonObj.get("Commodity").isJsonNull()) && !jsonObj.get("Commodity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Commodity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Commodity").toString()));
      }
      if ((jsonObj.get("Credit") != null && !jsonObj.get("Credit").isJsonNull()) && !jsonObj.get("Credit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Credit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Credit").toString()));
      }
      if ((jsonObj.get("Equity") != null && !jsonObj.get("Equity").isJsonNull()) && !jsonObj.get("Equity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Equity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Equity").toString()));
      }
      if ((jsonObj.get("Fx") != null && !jsonObj.get("Fx").isJsonNull()) && !jsonObj.get("Fx").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Fx` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Fx").toString()));
      }
      if ((jsonObj.get("Rates") != null && !jsonObj.get("Rates").isJsonNull()) && !jsonObj.get("Rates").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Rates` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Rates").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MarketContextSuppliers.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MarketContextSuppliers' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MarketContextSuppliers> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MarketContextSuppliers.class));

       return (TypeAdapter<T>) new TypeAdapter<MarketContextSuppliers>() {
           @Override
           public void write(JsonWriter out, MarketContextSuppliers value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MarketContextSuppliers read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of MarketContextSuppliers given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of MarketContextSuppliers
  * @throws IOException if the JSON string is invalid with respect to MarketContextSuppliers
  */
  public static MarketContextSuppliers fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MarketContextSuppliers.class);
  }

 /**
  * Convert an instance of MarketContextSuppliers to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
