/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import com.finbourne.lusid.model.InstrumentEvent;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * A split in the company&#39;s shares. Shareholders are given additional company shares based on the terms of the stock split.
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class StockSplitEvent extends InstrumentEvent {
  public static final String SERIALIZED_NAME_EQUITY_SPLIT_RATIO = "equitySplitRatio";
  @SerializedName(SERIALIZED_NAME_EQUITY_SPLIT_RATIO)
  private java.math.BigDecimal equitySplitRatio;

  public static final String SERIALIZED_NAME_PAYMENT_DATE = "paymentDate";
  @SerializedName(SERIALIZED_NAME_PAYMENT_DATE)
  private OffsetDateTime paymentDate;

  public static final String SERIALIZED_NAME_RECORD_DATE = "recordDate";
  @SerializedName(SERIALIZED_NAME_RECORD_DATE)
  private OffsetDateTime recordDate;

  public StockSplitEvent() {
    // this.instrumentEventType = this.getClass().getSimpleName();
  }

  public StockSplitEvent equitySplitRatio(java.math.BigDecimal equitySplitRatio) {
    
    this.equitySplitRatio = equitySplitRatio;
    return this;
  }

   /**
   * This number describes the rate at which the company will be dividing their current shares outstanding. It is displayed as new shares per old.
   * @return equitySplitRatio
  **/
  @jakarta.annotation.Nonnull
  public java.math.BigDecimal getEquitySplitRatio() {
    return equitySplitRatio;
  }


  public void setEquitySplitRatio(java.math.BigDecimal equitySplitRatio) {
    this.equitySplitRatio = equitySplitRatio;
  }


  public StockSplitEvent paymentDate(OffsetDateTime paymentDate) {
    
    this.paymentDate = paymentDate;
    return this;
  }

   /**
   * Date on which the stock-split takes effect.
   * @return paymentDate
  **/
  @jakarta.annotation.Nonnull
  public OffsetDateTime getPaymentDate() {
    return paymentDate;
  }


  public void setPaymentDate(OffsetDateTime paymentDate) {
    this.paymentDate = paymentDate;
  }


  public StockSplitEvent recordDate(OffsetDateTime recordDate) {
    
    this.recordDate = recordDate;
    return this;
  }

   /**
   * Date you have to be the holder of record in order to participate in the tender.
   * @return recordDate
  **/
  @jakarta.annotation.Nonnull
  public OffsetDateTime getRecordDate() {
    return recordDate;
  }


  public void setRecordDate(OffsetDateTime recordDate) {
    this.recordDate = recordDate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StockSplitEvent stockSplitEvent = (StockSplitEvent) o;
    return (this.equitySplitRatio.compareTo(stockSplitEvent.getEquitySplitRatio()) == 0) &&
        Objects.equals(this.paymentDate, stockSplitEvent.paymentDate) &&
        Objects.equals(this.recordDate, stockSplitEvent.recordDate) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(equitySplitRatio, paymentDate, recordDate, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StockSplitEvent {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    equitySplitRatio: ").append(toIndentedString(equitySplitRatio)).append("\n");
    sb.append("    paymentDate: ").append(toIndentedString(paymentDate)).append("\n");
    sb.append("    recordDate: ").append(toIndentedString(recordDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("instrumentEventType");
    openapiFields.add("equitySplitRatio");
    openapiFields.add("paymentDate");
    openapiFields.add("recordDate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("equitySplitRatio");
    openapiRequiredFields.add("paymentDate");
    openapiRequiredFields.add("recordDate");
    openapiRequiredFields.add("instrumentEventType");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to StockSplitEvent
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!StockSplitEvent.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StockSplitEvent is not found in the empty JSON string", StockSplitEvent.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!StockSplitEvent.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StockSplitEvent` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : StockSplitEvent.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StockSplitEvent.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StockSplitEvent' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StockSplitEvent> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StockSplitEvent.class));

       return (TypeAdapter<T>) new TypeAdapter<StockSplitEvent>() {
           @Override
           public void write(JsonWriter out, StockSplitEvent value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StockSplitEvent read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of StockSplitEvent given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of StockSplitEvent
  * @throws IOException if the JSON string is invalid with respect to StockSplitEvent
  */
  public static StockSplitEvent fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StockSplitEvent.class);
  }

 /**
  * Convert an instance of StockSplitEvent to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
