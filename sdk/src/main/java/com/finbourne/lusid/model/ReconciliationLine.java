/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * In evaluating a left and right hand side holding or valuation set, two data records result. These are then compared based on a set of  rules. This results in either a match or failure to match. If there is a match both left and right will be present, otherwise one will not.  A difference will be present if a match was calculated.  The options used in comparison may result in elision of results where an exact or tolerable match is made.
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ReconciliationLine {
  public static final String SERIALIZED_NAME_LEFT = "left";
  @SerializedName(SERIALIZED_NAME_LEFT)
  private Map<String, Object> left;

  public static final String SERIALIZED_NAME_RIGHT = "right";
  @SerializedName(SERIALIZED_NAME_RIGHT)
  private Map<String, Object> right;

  public static final String SERIALIZED_NAME_DIFFERENCE = "difference";
  @SerializedName(SERIALIZED_NAME_DIFFERENCE)
  private Map<String, Object> difference;

  public static final String SERIALIZED_NAME_RESULT_COMPARISON = "resultComparison";
  @SerializedName(SERIALIZED_NAME_RESULT_COMPARISON)
  private Map<String, Object> resultComparison;

  public ReconciliationLine() {
  }

  public ReconciliationLine left(Map<String, Object> left) {
    
    this.left = left;
    return this;
  }

  public ReconciliationLine putLeftItem(String key, Object leftItem) {
    if (this.left == null) {
      this.left = new HashMap<>();
    }
    this.left.put(key, leftItem);
    return this;
  }

   /**
   * Left hand side of the comparison
   * @return left
  **/
  @jakarta.annotation.Nullable
  public Map<String, Object> getLeft() {
    return left;
  }


  public void setLeft(Map<String, Object> left) {
    this.left = left;
  }


  public ReconciliationLine right(Map<String, Object> right) {
    
    this.right = right;
    return this;
  }

  public ReconciliationLine putRightItem(String key, Object rightItem) {
    if (this.right == null) {
      this.right = new HashMap<>();
    }
    this.right.put(key, rightItem);
    return this;
  }

   /**
   * Right hand side of the comparison
   * @return right
  **/
  @jakarta.annotation.Nullable
  public Map<String, Object> getRight() {
    return right;
  }


  public void setRight(Map<String, Object> right) {
    this.right = right;
  }


  public ReconciliationLine difference(Map<String, Object> difference) {
    
    this.difference = difference;
    return this;
  }

  public ReconciliationLine putDifferenceItem(String key, Object differenceItem) {
    if (this.difference == null) {
      this.difference = new HashMap<>();
    }
    this.difference.put(key, differenceItem);
    return this;
  }

   /**
   * Difference between LHS and RHS of comparison
   * @return difference
  **/
  @jakarta.annotation.Nullable
  public Map<String, Object> getDifference() {
    return difference;
  }


  public void setDifference(Map<String, Object> difference) {
    this.difference = difference;
  }


  public ReconciliationLine resultComparison(Map<String, Object> resultComparison) {
    
    this.resultComparison = resultComparison;
    return this;
  }

  public ReconciliationLine putResultComparisonItem(String key, Object resultComparisonItem) {
    if (this.resultComparison == null) {
      this.resultComparison = new HashMap<>();
    }
    this.resultComparison.put(key, resultComparisonItem);
    return this;
  }

   /**
   * The logical or semantic description of the difference, e.g. \&quot;Matches\&quot; or \&quot;MatchesWithTolerance\&quot; or \&quot;Failed\&quot;.
   * @return resultComparison
  **/
  @jakarta.annotation.Nullable
  public Map<String, Object> getResultComparison() {
    return resultComparison;
  }


  public void setResultComparison(Map<String, Object> resultComparison) {
    this.resultComparison = resultComparison;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReconciliationLine reconciliationLine = (ReconciliationLine) o;
    return Objects.equals(this.left, reconciliationLine.left) &&
        Objects.equals(this.right, reconciliationLine.right) &&
        Objects.equals(this.difference, reconciliationLine.difference) &&
        Objects.equals(this.resultComparison, reconciliationLine.resultComparison);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(left, right, difference, resultComparison);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReconciliationLine {\n");
    sb.append("    left: ").append(toIndentedString(left)).append("\n");
    sb.append("    right: ").append(toIndentedString(right)).append("\n");
    sb.append("    difference: ").append(toIndentedString(difference)).append("\n");
    sb.append("    resultComparison: ").append(toIndentedString(resultComparison)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("left");
    openapiFields.add("right");
    openapiFields.add("difference");
    openapiFields.add("resultComparison");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ReconciliationLine
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ReconciliationLine.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReconciliationLine is not found in the empty JSON string", ReconciliationLine.openapiRequiredFields.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReconciliationLine.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReconciliationLine' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReconciliationLine> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReconciliationLine.class));

       return (TypeAdapter<T>) new TypeAdapter<ReconciliationLine>() {
           @Override
           public void write(JsonWriter out, ReconciliationLine value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ReconciliationLine read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ReconciliationLine given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ReconciliationLine
  * @throws IOException if the JSON string is invalid with respect to ReconciliationLine
  */
  public static ReconciliationLine fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReconciliationLine.class);
  }

 /**
  * Convert an instance of ReconciliationLine to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
