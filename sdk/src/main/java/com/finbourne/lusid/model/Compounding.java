/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * The compounding settings used on interest rate.
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class Compounding {
  public static final String SERIALIZED_NAME_AVERAGING_METHOD = "averagingMethod";
  @SerializedName(SERIALIZED_NAME_AVERAGING_METHOD)
  private String averagingMethod;

  public static final String SERIALIZED_NAME_CALCULATION_SHIFT_METHOD = "calculationShiftMethod";
  @SerializedName(SERIALIZED_NAME_CALCULATION_SHIFT_METHOD)
  private String calculationShiftMethod;

  public static final String SERIALIZED_NAME_COMPOUNDING_METHOD = "compoundingMethod";
  @SerializedName(SERIALIZED_NAME_COMPOUNDING_METHOD)
  private String compoundingMethod;

  public static final String SERIALIZED_NAME_RESET_FREQUENCY = "resetFrequency";
  @SerializedName(SERIALIZED_NAME_RESET_FREQUENCY)
  private String resetFrequency;

  public static final String SERIALIZED_NAME_SHIFT = "shift";
  @SerializedName(SERIALIZED_NAME_SHIFT)
  private Integer shift;

  public static final String SERIALIZED_NAME_SPREAD_COMPOUNDING_METHOD = "spreadCompoundingMethod";
  @SerializedName(SERIALIZED_NAME_SPREAD_COMPOUNDING_METHOD)
  private String spreadCompoundingMethod;

  public static final String SERIALIZED_NAME_ROUNDING_PRECISION = "roundingPrecision";
  @SerializedName(SERIALIZED_NAME_ROUNDING_PRECISION)
  private Integer roundingPrecision;

  public Compounding() {
  }

  public Compounding averagingMethod(String averagingMethod) {
    
    this.averagingMethod = averagingMethod;
    return this;
  }

   /**
   * Defines whether a weighted or unweighted average is used when calculating the average rate. It applies only when CompoundingMethod &#x3D; ‘Averaging‘.  Supported string (enumeration) values are: [Unweighted, UnweightedIncludingWeekends, Weighted].
   * @return averagingMethod
  **/
  @jakarta.annotation.Nullable
  public String getAveragingMethod() {
    return averagingMethod;
  }


  public void setAveragingMethod(String averagingMethod) {
    this.averagingMethod = averagingMethod;
  }


  public Compounding calculationShiftMethod(String calculationShiftMethod) {
    
    this.calculationShiftMethod = calculationShiftMethod;
    return this;
  }

   /**
   * Defines which resets and day counts are used for the rate calculation  Supported string (enumeration) values are: [Lookback, NoShift, ObservationPeriodShift, Lockout].
   * @return calculationShiftMethod
  **/
  @jakarta.annotation.Nullable
  public String getCalculationShiftMethod() {
    return calculationShiftMethod;
  }


  public void setCalculationShiftMethod(String calculationShiftMethod) {
    this.calculationShiftMethod = calculationShiftMethod;
  }


  public Compounding compoundingMethod(String compoundingMethod) {
    
    this.compoundingMethod = compoundingMethod;
    return this;
  }

   /**
   * If the interest rate is simple, compounded or using a pre-computed compounded index.  Supported string (enumeration) values are: [Averaging, Compounding, CompoundedIndex, NonCumulativeCompounding].
   * @return compoundingMethod
  **/
  @jakarta.annotation.Nonnull
  public String getCompoundingMethod() {
    return compoundingMethod;
  }


  public void setCompoundingMethod(String compoundingMethod) {
    this.compoundingMethod = compoundingMethod;
  }


  public Compounding resetFrequency(String resetFrequency) {
    
    this.resetFrequency = resetFrequency;
    return this;
  }

   /**
   * The interest payment frequency.  For more information on tenors, see [knowledge base article KA-02097](https://support.lusid.com/knowledgebase/article/KA-02097)
   * @return resetFrequency
  **/
  @jakarta.annotation.Nonnull
  public String getResetFrequency() {
    return resetFrequency;
  }


  public void setResetFrequency(String resetFrequency) {
    this.resetFrequency = resetFrequency;
  }


  public Compounding shift(Integer shift) {
    
    this.shift = shift;
    return this;
  }

   /**
   * Defines the number of days to lockout or shift observation period by - should be a non-negative integer
   * @return shift
  **/
  @jakarta.annotation.Nullable
  public Integer getShift() {
    return shift;
  }


  public void setShift(Integer shift) {
    this.shift = shift;
  }


  public Compounding spreadCompoundingMethod(String spreadCompoundingMethod) {
    
    this.spreadCompoundingMethod = spreadCompoundingMethod;
    return this;
  }

   /**
   * Defines how the computed leg spread is applied to compounded rate. It applies only when CompoundingMethod &#x3D; ‘Compounding‘ or ‘CompoundedIndex‘.  Available compounding methods:  | Method | Description | | ------ | ----------- | | Straight | Compounding rate in each compound period includes the spread. | | Flat | Compounding rate does not include the spread, and the spread is used for simple interest in each compound period. | | SpreadExclusive | Compounding rate does not include the spread, and the spread is used for simple interest for whole accrual period. |  The values \&quot;IsdaCompounding\&quot;, \&quot;NoCompounding\&quot;, \&quot;IsdaFlatCompounding\&quot;, and \&quot;None\&quot; are accepted for compatibility with existing instruments and their use is discouraged.  Supported string (enumeration) values are: [Straight, IsdaCompounding, NoCompounding, SpreadExclusive, IsdaFlatCompounding, Flat, None].
   * @return spreadCompoundingMethod
  **/
  @jakarta.annotation.Nullable
  public String getSpreadCompoundingMethod() {
    return spreadCompoundingMethod;
  }


  public void setSpreadCompoundingMethod(String spreadCompoundingMethod) {
    this.spreadCompoundingMethod = spreadCompoundingMethod;
  }


  public Compounding roundingPrecision(Integer roundingPrecision) {
    
    this.roundingPrecision = roundingPrecision;
    return this;
  }

   /**
   * Defines the number of decimal places the compounded rate (expressed as a decimal) should be rounded to. This is an optional field, leaving it blank will mean no rounding takes place in Compounding.
   * @return roundingPrecision
  **/
  @jakarta.annotation.Nullable
  public Integer getRoundingPrecision() {
    return roundingPrecision;
  }


  public void setRoundingPrecision(Integer roundingPrecision) {
    this.roundingPrecision = roundingPrecision;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Compounding compounding = (Compounding) o;
    return Objects.equals(this.averagingMethod, compounding.averagingMethod) &&
        Objects.equals(this.calculationShiftMethod, compounding.calculationShiftMethod) &&
        Objects.equals(this.compoundingMethod, compounding.compoundingMethod) &&
        Objects.equals(this.resetFrequency, compounding.resetFrequency) &&
        Objects.equals(this.shift, compounding.shift) &&
        Objects.equals(this.spreadCompoundingMethod, compounding.spreadCompoundingMethod) &&
        Objects.equals(this.roundingPrecision, compounding.roundingPrecision);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(averagingMethod, calculationShiftMethod, compoundingMethod, resetFrequency, shift, spreadCompoundingMethod, roundingPrecision);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Compounding {\n");
    sb.append("    averagingMethod: ").append(toIndentedString(averagingMethod)).append("\n");
    sb.append("    calculationShiftMethod: ").append(toIndentedString(calculationShiftMethod)).append("\n");
    sb.append("    compoundingMethod: ").append(toIndentedString(compoundingMethod)).append("\n");
    sb.append("    resetFrequency: ").append(toIndentedString(resetFrequency)).append("\n");
    sb.append("    shift: ").append(toIndentedString(shift)).append("\n");
    sb.append("    spreadCompoundingMethod: ").append(toIndentedString(spreadCompoundingMethod)).append("\n");
    sb.append("    roundingPrecision: ").append(toIndentedString(roundingPrecision)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("averagingMethod");
    openapiFields.add("calculationShiftMethod");
    openapiFields.add("compoundingMethod");
    openapiFields.add("resetFrequency");
    openapiFields.add("shift");
    openapiFields.add("spreadCompoundingMethod");
    openapiFields.add("roundingPrecision");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("compoundingMethod");
    openapiRequiredFields.add("resetFrequency");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to Compounding
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Compounding.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Compounding is not found in the empty JSON string", Compounding.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Compounding.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("averagingMethod") != null && !jsonObj.get("averagingMethod").isJsonNull()) && !jsonObj.get("averagingMethod").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `averagingMethod` to be a primitive type in the JSON string but got `%s`", jsonObj.get("averagingMethod").toString()));
      }
      if ((jsonObj.get("calculationShiftMethod") != null && !jsonObj.get("calculationShiftMethod").isJsonNull()) && !jsonObj.get("calculationShiftMethod").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `calculationShiftMethod` to be a primitive type in the JSON string but got `%s`", jsonObj.get("calculationShiftMethod").toString()));
      }
      if (!jsonObj.get("compoundingMethod").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `compoundingMethod` to be a primitive type in the JSON string but got `%s`", jsonObj.get("compoundingMethod").toString()));
      }
      if (!jsonObj.get("resetFrequency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resetFrequency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resetFrequency").toString()));
      }
      if ((jsonObj.get("spreadCompoundingMethod") != null && !jsonObj.get("spreadCompoundingMethod").isJsonNull()) && !jsonObj.get("spreadCompoundingMethod").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `spreadCompoundingMethod` to be a primitive type in the JSON string but got `%s`", jsonObj.get("spreadCompoundingMethod").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Compounding.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Compounding' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Compounding> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Compounding.class));

       return (TypeAdapter<T>) new TypeAdapter<Compounding>() {
           @Override
           public void write(JsonWriter out, Compounding value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Compounding read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Compounding given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Compounding
  * @throws IOException if the JSON string is invalid with respect to Compounding
  */
  public static Compounding fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Compounding.class);
  }

 /**
  * Convert an instance of Compounding to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
