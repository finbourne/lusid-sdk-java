/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * Defines a change that occured for an entity
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class EntityChangeItem {
  public static final String SERIALIZED_NAME_AS_AT_MODIFIED = "asAtModified";
  @SerializedName(SERIALIZED_NAME_AS_AT_MODIFIED)
  private OffsetDateTime asAtModified;

  public static final String SERIALIZED_NAME_USER_ID_MODIFIED = "userIdModified";
  @SerializedName(SERIALIZED_NAME_USER_ID_MODIFIED)
  private String userIdModified;

  public static final String SERIALIZED_NAME_REQUEST_ID_MODIFIED = "requestIdModified";
  @SerializedName(SERIALIZED_NAME_REQUEST_ID_MODIFIED)
  private String requestIdModified;

  public static final String SERIALIZED_NAME_AS_AT_VERSION_NUMBER = "asAtVersionNumber";
  @SerializedName(SERIALIZED_NAME_AS_AT_VERSION_NUMBER)
  private Integer asAtVersionNumber;

  public static final String SERIALIZED_NAME_ACTION = "action";
  @SerializedName(SERIALIZED_NAME_ACTION)
  private String action;

  public static final String SERIALIZED_NAME_ACTION_DESCRIPTION = "actionDescription";
  @SerializedName(SERIALIZED_NAME_ACTION_DESCRIPTION)
  private String actionDescription;

  public static final String SERIALIZED_NAME_ATTRIBUTE_NAME = "attributeName";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTE_NAME)
  private String attributeName;

  public static final String SERIALIZED_NAME_PREVIOUS_VALUE = "previousValue";
  @SerializedName(SERIALIZED_NAME_PREVIOUS_VALUE)
  private Object previousValue = null;

  public static final String SERIALIZED_NAME_NEW_VALUE = "newValue";
  @SerializedName(SERIALIZED_NAME_NEW_VALUE)
  private Object newValue = null;

  public static final String SERIALIZED_NAME_EFFECTIVE_FROM = "effectiveFrom";
  @SerializedName(SERIALIZED_NAME_EFFECTIVE_FROM)
  private OffsetDateTime effectiveFrom;

  public static final String SERIALIZED_NAME_EFFECTIVE_UNTIL = "effectiveUntil";
  @SerializedName(SERIALIZED_NAME_EFFECTIVE_UNTIL)
  private OffsetDateTime effectiveUntil;

  public static final String SERIALIZED_NAME_DETAIL = "detail";
  @SerializedName(SERIALIZED_NAME_DETAIL)
  private Map<String, String> detail;

  public EntityChangeItem() {
  }

  public EntityChangeItem asAtModified(OffsetDateTime asAtModified) {
    
    this.asAtModified = asAtModified;
    return this;
  }

   /**
   * The date/time of the change.
   * @return asAtModified
  **/
  @jakarta.annotation.Nonnull
  public OffsetDateTime getAsAtModified() {
    return asAtModified;
  }


  public void setAsAtModified(OffsetDateTime asAtModified) {
    this.asAtModified = asAtModified;
  }


  public EntityChangeItem userIdModified(String userIdModified) {
    
    this.userIdModified = userIdModified;
    return this;
  }

   /**
   * The unique identifier of the user that made the change.
   * @return userIdModified
  **/
  @jakarta.annotation.Nonnull
  public String getUserIdModified() {
    return userIdModified;
  }


  public void setUserIdModified(String userIdModified) {
    this.userIdModified = userIdModified;
  }


  public EntityChangeItem requestIdModified(String requestIdModified) {
    
    this.requestIdModified = requestIdModified;
    return this;
  }

   /**
   * The unique identifier of the request that the changes were part of.
   * @return requestIdModified
  **/
  @jakarta.annotation.Nonnull
  public String getRequestIdModified() {
    return requestIdModified;
  }


  public void setRequestIdModified(String requestIdModified) {
    this.requestIdModified = requestIdModified;
  }


  public EntityChangeItem asAtVersionNumber(Integer asAtVersionNumber) {
    
    this.asAtVersionNumber = asAtVersionNumber;
    return this;
  }

   /**
   * The version number for the entity (the entity was created at version 1). This may refer to the version number of a changed related entity, not a change for the entity itself.
   * @return asAtVersionNumber
  **/
  @jakarta.annotation.Nonnull
  public Integer getAsAtVersionNumber() {
    return asAtVersionNumber;
  }


  public void setAsAtVersionNumber(Integer asAtVersionNumber) {
    this.asAtVersionNumber = asAtVersionNumber;
  }


  public EntityChangeItem action(String action) {
    
    this.action = action;
    return this;
  }

   /**
   * The action performed on the entity.
   * @return action
  **/
  @jakarta.annotation.Nonnull
  public String getAction() {
    return action;
  }


  public void setAction(String action) {
    this.action = action;
  }


  public EntityChangeItem actionDescription(String actionDescription) {
    
    this.actionDescription = actionDescription;
    return this;
  }

   /**
   * Description of the action performed on the entity.
   * @return actionDescription
  **/
  @jakarta.annotation.Nonnull
  public String getActionDescription() {
    return actionDescription;
  }


  public void setActionDescription(String actionDescription) {
    this.actionDescription = actionDescription;
  }


  public EntityChangeItem attributeName(String attributeName) {
    
    this.attributeName = attributeName;
    return this;
  }

   /**
   * The name of the field or property that has been changed.
   * @return attributeName
  **/
  @jakarta.annotation.Nullable
  public String getAttributeName() {
    return attributeName;
  }


  public void setAttributeName(String attributeName) {
    this.attributeName = attributeName;
  }


  public EntityChangeItem previousValue(Object previousValue) {
    
    this.previousValue = previousValue;
    return this;
  }

   /**
   * The value of the attribute prior to the change.
   * @return previousValue
  **/
  @jakarta.annotation.Nullable
  public Object getPreviousValue() {
    return previousValue;
  }


  public void setPreviousValue(Object previousValue) {
    this.previousValue = previousValue;
  }


  public EntityChangeItem newValue(Object newValue) {
    
    this.newValue = newValue;
    return this;
  }

   /**
   * The value of the attribute following the change.
   * @return newValue
  **/
  @jakarta.annotation.Nullable
  public Object getNewValue() {
    return newValue;
  }


  public void setNewValue(Object newValue) {
    this.newValue = newValue;
  }


  public EntityChangeItem effectiveFrom(OffsetDateTime effectiveFrom) {
    
    this.effectiveFrom = effectiveFrom;
    return this;
  }

   /**
   * The effective datetime from which the field&#39;s new value is valid.
   * @return effectiveFrom
  **/
  @jakarta.annotation.Nullable
  public OffsetDateTime getEffectiveFrom() {
    return effectiveFrom;
  }


  public void setEffectiveFrom(OffsetDateTime effectiveFrom) {
    this.effectiveFrom = effectiveFrom;
  }


  public EntityChangeItem effectiveUntil(OffsetDateTime effectiveUntil) {
    
    this.effectiveUntil = effectiveUntil;
    return this;
  }

   /**
   * The effective datetime until which the field&#39;s new value is valid.
   * @return effectiveUntil
  **/
  @jakarta.annotation.Nullable
  public OffsetDateTime getEffectiveUntil() {
    return effectiveUntil;
  }


  public void setEffectiveUntil(OffsetDateTime effectiveUntil) {
    this.effectiveUntil = effectiveUntil;
  }


  public EntityChangeItem detail(Map<String, String> detail) {
    
    this.detail = detail;
    return this;
  }

  public EntityChangeItem putDetailItem(String key, String detailItem) {
    if (this.detail == null) {
      this.detail = new HashMap<>();
    }
    this.detail.put(key, detailItem);
    return this;
  }

   /**
   * Information about the particular instance of the ChangeItem (supplied information depends on the type of Action).
   * @return detail
  **/
  @jakarta.annotation.Nullable
  public Map<String, String> getDetail() {
    return detail;
  }


  public void setDetail(Map<String, String> detail) {
    this.detail = detail;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EntityChangeItem entityChangeItem = (EntityChangeItem) o;
    return Objects.equals(this.asAtModified, entityChangeItem.asAtModified) &&
        Objects.equals(this.userIdModified, entityChangeItem.userIdModified) &&
        Objects.equals(this.requestIdModified, entityChangeItem.requestIdModified) &&
        Objects.equals(this.asAtVersionNumber, entityChangeItem.asAtVersionNumber) &&
        Objects.equals(this.action, entityChangeItem.action) &&
        Objects.equals(this.actionDescription, entityChangeItem.actionDescription) &&
        Objects.equals(this.attributeName, entityChangeItem.attributeName) &&
        Objects.equals(this.previousValue, entityChangeItem.previousValue) &&
        Objects.equals(this.newValue, entityChangeItem.newValue) &&
        Objects.equals(this.effectiveFrom, entityChangeItem.effectiveFrom) &&
        Objects.equals(this.effectiveUntil, entityChangeItem.effectiveUntil) &&
        Objects.equals(this.detail, entityChangeItem.detail);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(asAtModified, userIdModified, requestIdModified, asAtVersionNumber, action, actionDescription, attributeName, previousValue, newValue, effectiveFrom, effectiveUntil, detail);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EntityChangeItem {\n");
    sb.append("    asAtModified: ").append(toIndentedString(asAtModified)).append("\n");
    sb.append("    userIdModified: ").append(toIndentedString(userIdModified)).append("\n");
    sb.append("    requestIdModified: ").append(toIndentedString(requestIdModified)).append("\n");
    sb.append("    asAtVersionNumber: ").append(toIndentedString(asAtVersionNumber)).append("\n");
    sb.append("    action: ").append(toIndentedString(action)).append("\n");
    sb.append("    actionDescription: ").append(toIndentedString(actionDescription)).append("\n");
    sb.append("    attributeName: ").append(toIndentedString(attributeName)).append("\n");
    sb.append("    previousValue: ").append(toIndentedString(previousValue)).append("\n");
    sb.append("    newValue: ").append(toIndentedString(newValue)).append("\n");
    sb.append("    effectiveFrom: ").append(toIndentedString(effectiveFrom)).append("\n");
    sb.append("    effectiveUntil: ").append(toIndentedString(effectiveUntil)).append("\n");
    sb.append("    detail: ").append(toIndentedString(detail)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("asAtModified");
    openapiFields.add("userIdModified");
    openapiFields.add("requestIdModified");
    openapiFields.add("asAtVersionNumber");
    openapiFields.add("action");
    openapiFields.add("actionDescription");
    openapiFields.add("attributeName");
    openapiFields.add("previousValue");
    openapiFields.add("newValue");
    openapiFields.add("effectiveFrom");
    openapiFields.add("effectiveUntil");
    openapiFields.add("detail");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("asAtModified");
    openapiRequiredFields.add("userIdModified");
    openapiRequiredFields.add("requestIdModified");
    openapiRequiredFields.add("asAtVersionNumber");
    openapiRequiredFields.add("action");
    openapiRequiredFields.add("actionDescription");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to EntityChangeItem
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EntityChangeItem.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EntityChangeItem is not found in the empty JSON string", EntityChangeItem.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : EntityChangeItem.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("userIdModified").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userIdModified` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userIdModified").toString()));
      }
      if (!jsonObj.get("requestIdModified").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `requestIdModified` to be a primitive type in the JSON string but got `%s`", jsonObj.get("requestIdModified").toString()));
      }
      if (!jsonObj.get("action").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `action` to be a primitive type in the JSON string but got `%s`", jsonObj.get("action").toString()));
      }
      if (!jsonObj.get("actionDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `actionDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("actionDescription").toString()));
      }
      if ((jsonObj.get("attributeName") != null && !jsonObj.get("attributeName").isJsonNull()) && !jsonObj.get("attributeName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `attributeName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("attributeName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EntityChangeItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EntityChangeItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EntityChangeItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EntityChangeItem.class));

       return (TypeAdapter<T>) new TypeAdapter<EntityChangeItem>() {
           @Override
           public void write(JsonWriter out, EntityChangeItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EntityChangeItem read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of EntityChangeItem given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of EntityChangeItem
  * @throws IOException if the JSON string is invalid with respect to EntityChangeItem
  */
  public static EntityChangeItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EntityChangeItem.class);
  }

 /**
  * Convert an instance of EntityChangeItem to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
