/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import com.finbourne.lusid.model.InstrumentEventHolder;
import com.finbourne.lusid.model.ResourceId;
import com.finbourne.lusid.model.Transaction;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * Represents applicable instrument event.
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ApplicableInstrumentEvent {
  public static final String SERIALIZED_NAME_PORTFOLIO_ID = "portfolioId";
  @SerializedName(SERIALIZED_NAME_PORTFOLIO_ID)
  private ResourceId portfolioId;

  public static final String SERIALIZED_NAME_HOLDING_ID = "holdingId";
  @SerializedName(SERIALIZED_NAME_HOLDING_ID)
  private Long holdingId;

  public static final String SERIALIZED_NAME_LUSID_INSTRUMENT_ID = "lusidInstrumentId";
  @SerializedName(SERIALIZED_NAME_LUSID_INSTRUMENT_ID)
  private String lusidInstrumentId;

  public static final String SERIALIZED_NAME_INSTRUMENT_SCOPE = "instrumentScope";
  @SerializedName(SERIALIZED_NAME_INSTRUMENT_SCOPE)
  private String instrumentScope;

  public static final String SERIALIZED_NAME_INSTRUMENT_TYPE = "instrumentType";
  @SerializedName(SERIALIZED_NAME_INSTRUMENT_TYPE)
  private String instrumentType;

  public static final String SERIALIZED_NAME_INSTRUMENT_EVENT_TYPE = "instrumentEventType";
  @SerializedName(SERIALIZED_NAME_INSTRUMENT_EVENT_TYPE)
  private String instrumentEventType;

  public static final String SERIALIZED_NAME_INSTRUMENT_EVENT_ID = "instrumentEventId";
  @SerializedName(SERIALIZED_NAME_INSTRUMENT_EVENT_ID)
  private String instrumentEventId;

  public static final String SERIALIZED_NAME_GENERATED_EVENT = "generatedEvent";
  @SerializedName(SERIALIZED_NAME_GENERATED_EVENT)
  private InstrumentEventHolder generatedEvent;

  public static final String SERIALIZED_NAME_LOADED_EVENT = "loadedEvent";
  @SerializedName(SERIALIZED_NAME_LOADED_EVENT)
  private InstrumentEventHolder loadedEvent;

  public static final String SERIALIZED_NAME_APPLIED_INSTRUMENT_EVENT_INSTRUCTION_ID = "appliedInstrumentEventInstructionId";
  @SerializedName(SERIALIZED_NAME_APPLIED_INSTRUMENT_EVENT_INSTRUCTION_ID)
  private String appliedInstrumentEventInstructionId;

  public static final String SERIALIZED_NAME_TRANSACTIONS = "transactions";
  @SerializedName(SERIALIZED_NAME_TRANSACTIONS)
  private List<Transaction> transactions;

  public ApplicableInstrumentEvent() {
  }

  public ApplicableInstrumentEvent portfolioId(ResourceId portfolioId) {
    
    this.portfolioId = portfolioId;
    return this;
  }

   /**
   * Get portfolioId
   * @return portfolioId
  **/
  @jakarta.annotation.Nonnull
  public ResourceId getPortfolioId() {
    return portfolioId;
  }


  public void setPortfolioId(ResourceId portfolioId) {
    this.portfolioId = portfolioId;
  }


  public ApplicableInstrumentEvent holdingId(Long holdingId) {
    
    this.holdingId = holdingId;
    return this;
  }

   /**
   * Get holdingId
   * @return holdingId
  **/
  @jakarta.annotation.Nonnull
  public Long getHoldingId() {
    return holdingId;
  }


  public void setHoldingId(Long holdingId) {
    this.holdingId = holdingId;
  }


  public ApplicableInstrumentEvent lusidInstrumentId(String lusidInstrumentId) {
    
    this.lusidInstrumentId = lusidInstrumentId;
    return this;
  }

   /**
   * Get lusidInstrumentId
   * @return lusidInstrumentId
  **/
  @jakarta.annotation.Nonnull
  public String getLusidInstrumentId() {
    return lusidInstrumentId;
  }


  public void setLusidInstrumentId(String lusidInstrumentId) {
    this.lusidInstrumentId = lusidInstrumentId;
  }


  public ApplicableInstrumentEvent instrumentScope(String instrumentScope) {
    
    this.instrumentScope = instrumentScope;
    return this;
  }

   /**
   * Get instrumentScope
   * @return instrumentScope
  **/
  @jakarta.annotation.Nonnull
  public String getInstrumentScope() {
    return instrumentScope;
  }


  public void setInstrumentScope(String instrumentScope) {
    this.instrumentScope = instrumentScope;
  }


  public ApplicableInstrumentEvent instrumentType(String instrumentType) {
    
    this.instrumentType = instrumentType;
    return this;
  }

   /**
   * Get instrumentType
   * @return instrumentType
  **/
  @jakarta.annotation.Nonnull
  public String getInstrumentType() {
    return instrumentType;
  }


  public void setInstrumentType(String instrumentType) {
    this.instrumentType = instrumentType;
  }


  public ApplicableInstrumentEvent instrumentEventType(String instrumentEventType) {
    
    this.instrumentEventType = instrumentEventType;
    return this;
  }

   /**
   * Get instrumentEventType
   * @return instrumentEventType
  **/
  @jakarta.annotation.Nonnull
  public String getInstrumentEventType() {
    return instrumentEventType;
  }


  public void setInstrumentEventType(String instrumentEventType) {
    this.instrumentEventType = instrumentEventType;
  }


  public ApplicableInstrumentEvent instrumentEventId(String instrumentEventId) {
    
    this.instrumentEventId = instrumentEventId;
    return this;
  }

   /**
   * Get instrumentEventId
   * @return instrumentEventId
  **/
  @jakarta.annotation.Nonnull
  public String getInstrumentEventId() {
    return instrumentEventId;
  }


  public void setInstrumentEventId(String instrumentEventId) {
    this.instrumentEventId = instrumentEventId;
  }


  public ApplicableInstrumentEvent generatedEvent(InstrumentEventHolder generatedEvent) {
    
    this.generatedEvent = generatedEvent;
    return this;
  }

   /**
   * Get generatedEvent
   * @return generatedEvent
  **/
  @jakarta.annotation.Nullable
  public InstrumentEventHolder getGeneratedEvent() {
    return generatedEvent;
  }


  public void setGeneratedEvent(InstrumentEventHolder generatedEvent) {
    this.generatedEvent = generatedEvent;
  }


  public ApplicableInstrumentEvent loadedEvent(InstrumentEventHolder loadedEvent) {
    
    this.loadedEvent = loadedEvent;
    return this;
  }

   /**
   * Get loadedEvent
   * @return loadedEvent
  **/
  @jakarta.annotation.Nullable
  public InstrumentEventHolder getLoadedEvent() {
    return loadedEvent;
  }


  public void setLoadedEvent(InstrumentEventHolder loadedEvent) {
    this.loadedEvent = loadedEvent;
  }


  public ApplicableInstrumentEvent appliedInstrumentEventInstructionId(String appliedInstrumentEventInstructionId) {
    
    this.appliedInstrumentEventInstructionId = appliedInstrumentEventInstructionId;
    return this;
  }

   /**
   * Get appliedInstrumentEventInstructionId
   * @return appliedInstrumentEventInstructionId
  **/
  @jakarta.annotation.Nonnull
  public String getAppliedInstrumentEventInstructionId() {
    return appliedInstrumentEventInstructionId;
  }


  public void setAppliedInstrumentEventInstructionId(String appliedInstrumentEventInstructionId) {
    this.appliedInstrumentEventInstructionId = appliedInstrumentEventInstructionId;
  }


  public ApplicableInstrumentEvent transactions(List<Transaction> transactions) {
    
    this.transactions = transactions;
    return this;
  }

  public ApplicableInstrumentEvent addTransactionsItem(Transaction transactionsItem) {
    if (this.transactions == null) {
      this.transactions = new ArrayList<>();
    }
    this.transactions.add(transactionsItem);
    return this;
  }

   /**
   * Get transactions
   * @return transactions
  **/
  @jakarta.annotation.Nullable
  public List<Transaction> getTransactions() {
    return transactions;
  }


  public void setTransactions(List<Transaction> transactions) {
    this.transactions = transactions;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApplicableInstrumentEvent applicableInstrumentEvent = (ApplicableInstrumentEvent) o;
    return Objects.equals(this.portfolioId, applicableInstrumentEvent.portfolioId) &&
        Objects.equals(this.holdingId, applicableInstrumentEvent.holdingId) &&
        Objects.equals(this.lusidInstrumentId, applicableInstrumentEvent.lusidInstrumentId) &&
        Objects.equals(this.instrumentScope, applicableInstrumentEvent.instrumentScope) &&
        Objects.equals(this.instrumentType, applicableInstrumentEvent.instrumentType) &&
        Objects.equals(this.instrumentEventType, applicableInstrumentEvent.instrumentEventType) &&
        Objects.equals(this.instrumentEventId, applicableInstrumentEvent.instrumentEventId) &&
        Objects.equals(this.generatedEvent, applicableInstrumentEvent.generatedEvent) &&
        Objects.equals(this.loadedEvent, applicableInstrumentEvent.loadedEvent) &&
        Objects.equals(this.appliedInstrumentEventInstructionId, applicableInstrumentEvent.appliedInstrumentEventInstructionId) &&
        Objects.equals(this.transactions, applicableInstrumentEvent.transactions);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(portfolioId, holdingId, lusidInstrumentId, instrumentScope, instrumentType, instrumentEventType, instrumentEventId, generatedEvent, loadedEvent, appliedInstrumentEventInstructionId, transactions);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApplicableInstrumentEvent {\n");
    sb.append("    portfolioId: ").append(toIndentedString(portfolioId)).append("\n");
    sb.append("    holdingId: ").append(toIndentedString(holdingId)).append("\n");
    sb.append("    lusidInstrumentId: ").append(toIndentedString(lusidInstrumentId)).append("\n");
    sb.append("    instrumentScope: ").append(toIndentedString(instrumentScope)).append("\n");
    sb.append("    instrumentType: ").append(toIndentedString(instrumentType)).append("\n");
    sb.append("    instrumentEventType: ").append(toIndentedString(instrumentEventType)).append("\n");
    sb.append("    instrumentEventId: ").append(toIndentedString(instrumentEventId)).append("\n");
    sb.append("    generatedEvent: ").append(toIndentedString(generatedEvent)).append("\n");
    sb.append("    loadedEvent: ").append(toIndentedString(loadedEvent)).append("\n");
    sb.append("    appliedInstrumentEventInstructionId: ").append(toIndentedString(appliedInstrumentEventInstructionId)).append("\n");
    sb.append("    transactions: ").append(toIndentedString(transactions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("portfolioId");
    openapiFields.add("holdingId");
    openapiFields.add("lusidInstrumentId");
    openapiFields.add("instrumentScope");
    openapiFields.add("instrumentType");
    openapiFields.add("instrumentEventType");
    openapiFields.add("instrumentEventId");
    openapiFields.add("generatedEvent");
    openapiFields.add("loadedEvent");
    openapiFields.add("appliedInstrumentEventInstructionId");
    openapiFields.add("transactions");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("portfolioId");
    openapiRequiredFields.add("holdingId");
    openapiRequiredFields.add("lusidInstrumentId");
    openapiRequiredFields.add("instrumentScope");
    openapiRequiredFields.add("instrumentType");
    openapiRequiredFields.add("instrumentEventType");
    openapiRequiredFields.add("instrumentEventId");
    openapiRequiredFields.add("appliedInstrumentEventInstructionId");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ApplicableInstrumentEvent
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ApplicableInstrumentEvent.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ApplicableInstrumentEvent is not found in the empty JSON string", ApplicableInstrumentEvent.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ApplicableInstrumentEvent.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `portfolioId`
      ResourceId.validateJsonElement(jsonObj.get("portfolioId"));
      if (!jsonObj.get("lusidInstrumentId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lusidInstrumentId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lusidInstrumentId").toString()));
      }
      if (!jsonObj.get("instrumentScope").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `instrumentScope` to be a primitive type in the JSON string but got `%s`", jsonObj.get("instrumentScope").toString()));
      }
      if (!jsonObj.get("instrumentType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `instrumentType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("instrumentType").toString()));
      }
      if (!jsonObj.get("instrumentEventType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `instrumentEventType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("instrumentEventType").toString()));
      }
      if (!jsonObj.get("instrumentEventId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `instrumentEventId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("instrumentEventId").toString()));
      }
      // validate the optional field `generatedEvent`
      if (jsonObj.get("generatedEvent") != null && !jsonObj.get("generatedEvent").isJsonNull()) {
        InstrumentEventHolder.validateJsonElement(jsonObj.get("generatedEvent"));
      }
      // validate the optional field `loadedEvent`
      if (jsonObj.get("loadedEvent") != null && !jsonObj.get("loadedEvent").isJsonNull()) {
        InstrumentEventHolder.validateJsonElement(jsonObj.get("loadedEvent"));
      }
      if (!jsonObj.get("appliedInstrumentEventInstructionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `appliedInstrumentEventInstructionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("appliedInstrumentEventInstructionId").toString()));
      }
      if (jsonObj.get("transactions") != null && !jsonObj.get("transactions").isJsonNull()) {
        JsonArray jsonArraytransactions = jsonObj.getAsJsonArray("transactions");
        if (jsonArraytransactions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("transactions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `transactions` to be an array in the JSON string but got `%s`", jsonObj.get("transactions").toString()));
          }

          // validate the optional field `transactions` (array)
          for (int i = 0; i < jsonArraytransactions.size(); i++) {
            Transaction.validateJsonElement(jsonArraytransactions.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ApplicableInstrumentEvent.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ApplicableInstrumentEvent' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ApplicableInstrumentEvent> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ApplicableInstrumentEvent.class));

       return (TypeAdapter<T>) new TypeAdapter<ApplicableInstrumentEvent>() {
           @Override
           public void write(JsonWriter out, ApplicableInstrumentEvent value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ApplicableInstrumentEvent read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ApplicableInstrumentEvent given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ApplicableInstrumentEvent
  * @throws IOException if the JSON string is invalid with respect to ApplicableInstrumentEvent
  */
  public static ApplicableInstrumentEvent fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ApplicableInstrumentEvent.class);
  }

 /**
  * Convert an instance of ApplicableInstrumentEvent to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
