/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import com.finbourne.lusid.model.CurrencyAndAmount;
import com.finbourne.lusid.model.PerpetualProperty;
import com.finbourne.lusid.model.Property;
import com.finbourne.lusid.model.ResourceId;
import com.finbourne.lusid.model.SettlementSchedule;
import com.finbourne.lusid.model.Transaction;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * A list of holdings.
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class PortfolioHolding {
  public static final String SERIALIZED_NAME_INSTRUMENT_SCOPE = "instrumentScope";
  @SerializedName(SERIALIZED_NAME_INSTRUMENT_SCOPE)
  private String instrumentScope;

  public static final String SERIALIZED_NAME_INSTRUMENT_UID = "instrumentUid";
  @SerializedName(SERIALIZED_NAME_INSTRUMENT_UID)
  private String instrumentUid;

  public static final String SERIALIZED_NAME_SUB_HOLDING_KEYS = "subHoldingKeys";
  @SerializedName(SERIALIZED_NAME_SUB_HOLDING_KEYS)
  private Map<String, PerpetualProperty> subHoldingKeys;

  public static final String SERIALIZED_NAME_PROPERTIES = "properties";
  @SerializedName(SERIALIZED_NAME_PROPERTIES)
  private Map<String, Property> properties;

  public static final String SERIALIZED_NAME_HOLDING_TYPE = "holdingType";
  @SerializedName(SERIALIZED_NAME_HOLDING_TYPE)
  private String holdingType;

  public static final String SERIALIZED_NAME_UNITS = "units";
  @SerializedName(SERIALIZED_NAME_UNITS)
  private java.math.BigDecimal units;

  public static final String SERIALIZED_NAME_SETTLED_UNITS = "settledUnits";
  @SerializedName(SERIALIZED_NAME_SETTLED_UNITS)
  private java.math.BigDecimal settledUnits;

  public static final String SERIALIZED_NAME_COST = "cost";
  @SerializedName(SERIALIZED_NAME_COST)
  private CurrencyAndAmount cost;

  public static final String SERIALIZED_NAME_COST_PORTFOLIO_CCY = "costPortfolioCcy";
  @SerializedName(SERIALIZED_NAME_COST_PORTFOLIO_CCY)
  private CurrencyAndAmount costPortfolioCcy;

  public static final String SERIALIZED_NAME_TRANSACTION = "transaction";
  @SerializedName(SERIALIZED_NAME_TRANSACTION)
  private Transaction transaction;

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private String currency;

  public static final String SERIALIZED_NAME_HOLDING_TYPE_NAME = "holdingTypeName";
  @SerializedName(SERIALIZED_NAME_HOLDING_TYPE_NAME)
  private String holdingTypeName;

  public static final String SERIALIZED_NAME_HOLDING_ID = "holdingId";
  @SerializedName(SERIALIZED_NAME_HOLDING_ID)
  private Long holdingId;

  public static final String SERIALIZED_NAME_NOTIONAL_COST = "notionalCost";
  @SerializedName(SERIALIZED_NAME_NOTIONAL_COST)
  private CurrencyAndAmount notionalCost;

  public static final String SERIALIZED_NAME_AMORTISED_COST = "amortisedCost";
  @SerializedName(SERIALIZED_NAME_AMORTISED_COST)
  private CurrencyAndAmount amortisedCost;

  public static final String SERIALIZED_NAME_AMORTISED_COST_PORTFOLIO_CCY = "amortisedCostPortfolioCcy";
  @SerializedName(SERIALIZED_NAME_AMORTISED_COST_PORTFOLIO_CCY)
  private CurrencyAndAmount amortisedCostPortfolioCcy;

  public static final String SERIALIZED_NAME_VARIATION_MARGIN = "variationMargin";
  @SerializedName(SERIALIZED_NAME_VARIATION_MARGIN)
  private CurrencyAndAmount variationMargin;

  public static final String SERIALIZED_NAME_VARIATION_MARGIN_PORTFOLIO_CCY = "variationMarginPortfolioCcy";
  @SerializedName(SERIALIZED_NAME_VARIATION_MARGIN_PORTFOLIO_CCY)
  private CurrencyAndAmount variationMarginPortfolioCcy;

  public static final String SERIALIZED_NAME_SETTLEMENT_SCHEDULE = "settlementSchedule";
  @SerializedName(SERIALIZED_NAME_SETTLEMENT_SCHEDULE)
  private List<SettlementSchedule> settlementSchedule;

  public static final String SERIALIZED_NAME_CURRENT_FACE = "currentFace";
  @SerializedName(SERIALIZED_NAME_CURRENT_FACE)
  private java.math.BigDecimal currentFace;

  public static final String SERIALIZED_NAME_CUSTODIAN_ACCOUNT_ID = "custodianAccountId";
  @SerializedName(SERIALIZED_NAME_CUSTODIAN_ACCOUNT_ID)
  private ResourceId custodianAccountId;

  public static final String SERIALIZED_NAME_UNSETTLED_UNITS = "unsettledUnits";
  @SerializedName(SERIALIZED_NAME_UNSETTLED_UNITS)
  private java.math.BigDecimal unsettledUnits;

  public static final String SERIALIZED_NAME_OVERDUE_UNITS = "overdueUnits";
  @SerializedName(SERIALIZED_NAME_OVERDUE_UNITS)
  private java.math.BigDecimal overdueUnits;

  public PortfolioHolding() {
  }

  public PortfolioHolding instrumentScope(String instrumentScope) {
    
    this.instrumentScope = instrumentScope;
    return this;
  }

   /**
   * The scope in which the holding&#39;s instrument is in.
   * @return instrumentScope
  **/
  @jakarta.annotation.Nullable
  public String getInstrumentScope() {
    return instrumentScope;
  }


  public void setInstrumentScope(String instrumentScope) {
    this.instrumentScope = instrumentScope;
  }


  public PortfolioHolding instrumentUid(String instrumentUid) {
    
    this.instrumentUid = instrumentUid;
    return this;
  }

   /**
   * The unique Lusid Instrument Id (LUID) of the instrument that the holding is in.
   * @return instrumentUid
  **/
  @jakarta.annotation.Nonnull
  public String getInstrumentUid() {
    return instrumentUid;
  }


  public void setInstrumentUid(String instrumentUid) {
    this.instrumentUid = instrumentUid;
  }


  public PortfolioHolding subHoldingKeys(Map<String, PerpetualProperty> subHoldingKeys) {
    
    this.subHoldingKeys = subHoldingKeys;
    return this;
  }

  public PortfolioHolding putSubHoldingKeysItem(String key, PerpetualProperty subHoldingKeysItem) {
    if (this.subHoldingKeys == null) {
      this.subHoldingKeys = new HashMap<>();
    }
    this.subHoldingKeys.put(key, subHoldingKeysItem);
    return this;
  }

   /**
   * The sub-holding properties which identify the holding. Each property will be from the &#39;Transaction&#39; domain. These are configured on a transaction portfolio.
   * @return subHoldingKeys
  **/
  @jakarta.annotation.Nullable
  public Map<String, PerpetualProperty> getSubHoldingKeys() {
    return subHoldingKeys;
  }


  public void setSubHoldingKeys(Map<String, PerpetualProperty> subHoldingKeys) {
    this.subHoldingKeys = subHoldingKeys;
  }


  public PortfolioHolding properties(Map<String, Property> properties) {
    
    this.properties = properties;
    return this;
  }

  public PortfolioHolding putPropertiesItem(String key, Property propertiesItem) {
    if (this.properties == null) {
      this.properties = new HashMap<>();
    }
    this.properties.put(key, propertiesItem);
    return this;
  }

   /**
   * The properties which have been requested to be decorated onto the holding. These will be from the &#39;Instrument&#39; or &#39;Holding&#39; domain.
   * @return properties
  **/
  @jakarta.annotation.Nullable
  public Map<String, Property> getProperties() {
    return properties;
  }


  public void setProperties(Map<String, Property> properties) {
    this.properties = properties;
  }


  public PortfolioHolding holdingType(String holdingType) {
    
    this.holdingType = holdingType;
    return this;
  }

   /**
   * The code for the type of the holding e.g. P, B, C, R, F etc.
   * @return holdingType
  **/
  @jakarta.annotation.Nonnull
  public String getHoldingType() {
    return holdingType;
  }


  public void setHoldingType(String holdingType) {
    this.holdingType = holdingType;
  }


  public PortfolioHolding units(java.math.BigDecimal units) {
    
    this.units = units;
    return this;
  }

   /**
   * The total number of units of the holding.
   * @return units
  **/
  @jakarta.annotation.Nonnull
  public java.math.BigDecimal getUnits() {
    return units;
  }


  public void setUnits(java.math.BigDecimal units) {
    this.units = units;
  }


  public PortfolioHolding settledUnits(java.math.BigDecimal settledUnits) {
    
    this.settledUnits = settledUnits;
    return this;
  }

   /**
   * The total number of settled units of the holding.
   * @return settledUnits
  **/
  @jakarta.annotation.Nonnull
  public java.math.BigDecimal getSettledUnits() {
    return settledUnits;
  }


  public void setSettledUnits(java.math.BigDecimal settledUnits) {
    this.settledUnits = settledUnits;
  }


  public PortfolioHolding cost(CurrencyAndAmount cost) {
    
    this.cost = cost;
    return this;
  }

   /**
   * Get cost
   * @return cost
  **/
  @jakarta.annotation.Nonnull
  public CurrencyAndAmount getCost() {
    return cost;
  }


  public void setCost(CurrencyAndAmount cost) {
    this.cost = cost;
  }


  public PortfolioHolding costPortfolioCcy(CurrencyAndAmount costPortfolioCcy) {
    
    this.costPortfolioCcy = costPortfolioCcy;
    return this;
  }

   /**
   * Get costPortfolioCcy
   * @return costPortfolioCcy
  **/
  @jakarta.annotation.Nonnull
  public CurrencyAndAmount getCostPortfolioCcy() {
    return costPortfolioCcy;
  }


  public void setCostPortfolioCcy(CurrencyAndAmount costPortfolioCcy) {
    this.costPortfolioCcy = costPortfolioCcy;
  }


  public PortfolioHolding transaction(Transaction transaction) {
    
    this.transaction = transaction;
    return this;
  }

   /**
   * Get transaction
   * @return transaction
  **/
  @jakarta.annotation.Nullable
  public Transaction getTransaction() {
    return transaction;
  }


  public void setTransaction(Transaction transaction) {
    this.transaction = transaction;
  }


  public PortfolioHolding currency(String currency) {
    
    this.currency = currency;
    return this;
  }

   /**
   * The holding currency.
   * @return currency
  **/
  @jakarta.annotation.Nullable
  public String getCurrency() {
    return currency;
  }


  public void setCurrency(String currency) {
    this.currency = currency;
  }


  public PortfolioHolding holdingTypeName(String holdingTypeName) {
    
    this.holdingTypeName = holdingTypeName;
    return this;
  }

   /**
   * The decoded type of the holding e.g. Position, Balance, CashCommitment, Receivable, ForwardFX etc.
   * @return holdingTypeName
  **/
  @jakarta.annotation.Nullable
  public String getHoldingTypeName() {
    return holdingTypeName;
  }


  public void setHoldingTypeName(String holdingTypeName) {
    this.holdingTypeName = holdingTypeName;
  }


  public PortfolioHolding holdingId(Long holdingId) {
    
    this.holdingId = holdingId;
    return this;
  }

   /**
   * A single identifier for the holding within the portfolio. The holdingId is constructed from the LusidInstrumentId, sub-holding keys and currrency and is unique within the portfolio.
   * @return holdingId
  **/
  @jakarta.annotation.Nullable
  public Long getHoldingId() {
    return holdingId;
  }


  public void setHoldingId(Long holdingId) {
    this.holdingId = holdingId;
  }


  public PortfolioHolding notionalCost(CurrencyAndAmount notionalCost) {
    
    this.notionalCost = notionalCost;
    return this;
  }

   /**
   * Get notionalCost
   * @return notionalCost
  **/
  @jakarta.annotation.Nullable
  public CurrencyAndAmount getNotionalCost() {
    return notionalCost;
  }


  public void setNotionalCost(CurrencyAndAmount notionalCost) {
    this.notionalCost = notionalCost;
  }


  public PortfolioHolding amortisedCost(CurrencyAndAmount amortisedCost) {
    
    this.amortisedCost = amortisedCost;
    return this;
  }

   /**
   * Get amortisedCost
   * @return amortisedCost
  **/
  @jakarta.annotation.Nullable
  public CurrencyAndAmount getAmortisedCost() {
    return amortisedCost;
  }


  public void setAmortisedCost(CurrencyAndAmount amortisedCost) {
    this.amortisedCost = amortisedCost;
  }


  public PortfolioHolding amortisedCostPortfolioCcy(CurrencyAndAmount amortisedCostPortfolioCcy) {
    
    this.amortisedCostPortfolioCcy = amortisedCostPortfolioCcy;
    return this;
  }

   /**
   * Get amortisedCostPortfolioCcy
   * @return amortisedCostPortfolioCcy
  **/
  @jakarta.annotation.Nullable
  public CurrencyAndAmount getAmortisedCostPortfolioCcy() {
    return amortisedCostPortfolioCcy;
  }


  public void setAmortisedCostPortfolioCcy(CurrencyAndAmount amortisedCostPortfolioCcy) {
    this.amortisedCostPortfolioCcy = amortisedCostPortfolioCcy;
  }


  public PortfolioHolding variationMargin(CurrencyAndAmount variationMargin) {
    
    this.variationMargin = variationMargin;
    return this;
  }

   /**
   * Get variationMargin
   * @return variationMargin
  **/
  @jakarta.annotation.Nullable
  public CurrencyAndAmount getVariationMargin() {
    return variationMargin;
  }


  public void setVariationMargin(CurrencyAndAmount variationMargin) {
    this.variationMargin = variationMargin;
  }


  public PortfolioHolding variationMarginPortfolioCcy(CurrencyAndAmount variationMarginPortfolioCcy) {
    
    this.variationMarginPortfolioCcy = variationMarginPortfolioCcy;
    return this;
  }

   /**
   * Get variationMarginPortfolioCcy
   * @return variationMarginPortfolioCcy
  **/
  @jakarta.annotation.Nullable
  public CurrencyAndAmount getVariationMarginPortfolioCcy() {
    return variationMarginPortfolioCcy;
  }


  public void setVariationMarginPortfolioCcy(CurrencyAndAmount variationMarginPortfolioCcy) {
    this.variationMarginPortfolioCcy = variationMarginPortfolioCcy;
  }


  public PortfolioHolding settlementSchedule(List<SettlementSchedule> settlementSchedule) {
    
    this.settlementSchedule = settlementSchedule;
    return this;
  }

  public PortfolioHolding addSettlementScheduleItem(SettlementSchedule settlementScheduleItem) {
    if (this.settlementSchedule == null) {
      this.settlementSchedule = new ArrayList<>();
    }
    this.settlementSchedule.add(settlementScheduleItem);
    return this;
  }

   /**
   * Where no. of days ahead has been specified, future dated settlements will be captured here.
   * @return settlementSchedule
  **/
  @jakarta.annotation.Nullable
  public List<SettlementSchedule> getSettlementSchedule() {
    return settlementSchedule;
  }


  public void setSettlementSchedule(List<SettlementSchedule> settlementSchedule) {
    this.settlementSchedule = settlementSchedule;
  }


  public PortfolioHolding currentFace(java.math.BigDecimal currentFace) {
    
    this.currentFace = currentFace;
    return this;
  }

   /**
   * Current face value of the holding.
   * @return currentFace
  **/
  @jakarta.annotation.Nullable
  public java.math.BigDecimal getCurrentFace() {
    return currentFace;
  }


  public void setCurrentFace(java.math.BigDecimal currentFace) {
    this.currentFace = currentFace;
  }


  public PortfolioHolding custodianAccountId(ResourceId custodianAccountId) {
    
    this.custodianAccountId = custodianAccountId;
    return this;
  }

   /**
   * Get custodianAccountId
   * @return custodianAccountId
  **/
  @jakarta.annotation.Nullable
  public ResourceId getCustodianAccountId() {
    return custodianAccountId;
  }


  public void setCustodianAccountId(ResourceId custodianAccountId) {
    this.custodianAccountId = custodianAccountId;
  }


  public PortfolioHolding unsettledUnits(java.math.BigDecimal unsettledUnits) {
    
    this.unsettledUnits = unsettledUnits;
    return this;
  }

   /**
   * The number of unsettled units for the holding.
   * @return unsettledUnits
  **/
  @jakarta.annotation.Nullable
  public java.math.BigDecimal getUnsettledUnits() {
    return unsettledUnits;
  }


  public void setUnsettledUnits(java.math.BigDecimal unsettledUnits) {
    this.unsettledUnits = unsettledUnits;
  }


  public PortfolioHolding overdueUnits(java.math.BigDecimal overdueUnits) {
    
    this.overdueUnits = overdueUnits;
    return this;
  }

   /**
   * The number of unsettled units for the holding that are beyond their contractual settlement date.
   * @return overdueUnits
  **/
  @jakarta.annotation.Nullable
  public java.math.BigDecimal getOverdueUnits() {
    return overdueUnits;
  }


  public void setOverdueUnits(java.math.BigDecimal overdueUnits) {
    this.overdueUnits = overdueUnits;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PortfolioHolding portfolioHolding = (PortfolioHolding) o;
    return Objects.equals(this.instrumentScope, portfolioHolding.instrumentScope) &&
        Objects.equals(this.instrumentUid, portfolioHolding.instrumentUid) &&
        Objects.equals(this.subHoldingKeys, portfolioHolding.subHoldingKeys) &&
        Objects.equals(this.properties, portfolioHolding.properties) &&
        Objects.equals(this.holdingType, portfolioHolding.holdingType) &&
        (this.units.compareTo(portfolioHolding.getUnits()) == 0) &&
        (this.settledUnits.compareTo(portfolioHolding.getSettledUnits()) == 0) &&
        Objects.equals(this.cost, portfolioHolding.cost) &&
        Objects.equals(this.costPortfolioCcy, portfolioHolding.costPortfolioCcy) &&
        Objects.equals(this.transaction, portfolioHolding.transaction) &&
        Objects.equals(this.currency, portfolioHolding.currency) &&
        Objects.equals(this.holdingTypeName, portfolioHolding.holdingTypeName) &&
        Objects.equals(this.holdingId, portfolioHolding.holdingId) &&
        Objects.equals(this.notionalCost, portfolioHolding.notionalCost) &&
        Objects.equals(this.amortisedCost, portfolioHolding.amortisedCost) &&
        Objects.equals(this.amortisedCostPortfolioCcy, portfolioHolding.amortisedCostPortfolioCcy) &&
        Objects.equals(this.variationMargin, portfolioHolding.variationMargin) &&
        Objects.equals(this.variationMarginPortfolioCcy, portfolioHolding.variationMarginPortfolioCcy) &&
        Objects.equals(this.settlementSchedule, portfolioHolding.settlementSchedule) &&
        (this.currentFace.compareTo(portfolioHolding.getCurrentFace()) == 0) &&
        Objects.equals(this.custodianAccountId, portfolioHolding.custodianAccountId) &&
        (this.unsettledUnits.compareTo(portfolioHolding.getUnsettledUnits()) == 0) &&
        (this.overdueUnits.compareTo(portfolioHolding.getOverdueUnits()) == 0);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(instrumentScope, instrumentUid, subHoldingKeys, properties, holdingType, units, settledUnits, cost, costPortfolioCcy, transaction, currency, holdingTypeName, holdingId, notionalCost, amortisedCost, amortisedCostPortfolioCcy, variationMargin, variationMarginPortfolioCcy, settlementSchedule, currentFace, custodianAccountId, unsettledUnits, overdueUnits);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PortfolioHolding {\n");
    sb.append("    instrumentScope: ").append(toIndentedString(instrumentScope)).append("\n");
    sb.append("    instrumentUid: ").append(toIndentedString(instrumentUid)).append("\n");
    sb.append("    subHoldingKeys: ").append(toIndentedString(subHoldingKeys)).append("\n");
    sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
    sb.append("    holdingType: ").append(toIndentedString(holdingType)).append("\n");
    sb.append("    units: ").append(toIndentedString(units)).append("\n");
    sb.append("    settledUnits: ").append(toIndentedString(settledUnits)).append("\n");
    sb.append("    cost: ").append(toIndentedString(cost)).append("\n");
    sb.append("    costPortfolioCcy: ").append(toIndentedString(costPortfolioCcy)).append("\n");
    sb.append("    transaction: ").append(toIndentedString(transaction)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    holdingTypeName: ").append(toIndentedString(holdingTypeName)).append("\n");
    sb.append("    holdingId: ").append(toIndentedString(holdingId)).append("\n");
    sb.append("    notionalCost: ").append(toIndentedString(notionalCost)).append("\n");
    sb.append("    amortisedCost: ").append(toIndentedString(amortisedCost)).append("\n");
    sb.append("    amortisedCostPortfolioCcy: ").append(toIndentedString(amortisedCostPortfolioCcy)).append("\n");
    sb.append("    variationMargin: ").append(toIndentedString(variationMargin)).append("\n");
    sb.append("    variationMarginPortfolioCcy: ").append(toIndentedString(variationMarginPortfolioCcy)).append("\n");
    sb.append("    settlementSchedule: ").append(toIndentedString(settlementSchedule)).append("\n");
    sb.append("    currentFace: ").append(toIndentedString(currentFace)).append("\n");
    sb.append("    custodianAccountId: ").append(toIndentedString(custodianAccountId)).append("\n");
    sb.append("    unsettledUnits: ").append(toIndentedString(unsettledUnits)).append("\n");
    sb.append("    overdueUnits: ").append(toIndentedString(overdueUnits)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("instrumentScope");
    openapiFields.add("instrumentUid");
    openapiFields.add("subHoldingKeys");
    openapiFields.add("properties");
    openapiFields.add("holdingType");
    openapiFields.add("units");
    openapiFields.add("settledUnits");
    openapiFields.add("cost");
    openapiFields.add("costPortfolioCcy");
    openapiFields.add("transaction");
    openapiFields.add("currency");
    openapiFields.add("holdingTypeName");
    openapiFields.add("holdingId");
    openapiFields.add("notionalCost");
    openapiFields.add("amortisedCost");
    openapiFields.add("amortisedCostPortfolioCcy");
    openapiFields.add("variationMargin");
    openapiFields.add("variationMarginPortfolioCcy");
    openapiFields.add("settlementSchedule");
    openapiFields.add("currentFace");
    openapiFields.add("custodianAccountId");
    openapiFields.add("unsettledUnits");
    openapiFields.add("overdueUnits");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("instrumentUid");
    openapiRequiredFields.add("holdingType");
    openapiRequiredFields.add("units");
    openapiRequiredFields.add("settledUnits");
    openapiRequiredFields.add("cost");
    openapiRequiredFields.add("costPortfolioCcy");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to PortfolioHolding
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PortfolioHolding.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PortfolioHolding is not found in the empty JSON string", PortfolioHolding.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PortfolioHolding.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("instrumentScope") != null && !jsonObj.get("instrumentScope").isJsonNull()) && !jsonObj.get("instrumentScope").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `instrumentScope` to be a primitive type in the JSON string but got `%s`", jsonObj.get("instrumentScope").toString()));
      }
      if (!jsonObj.get("instrumentUid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `instrumentUid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("instrumentUid").toString()));
      }
      if (!jsonObj.get("holdingType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `holdingType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("holdingType").toString()));
      }
      // validate the required field `cost`
      CurrencyAndAmount.validateJsonElement(jsonObj.get("cost"));
      // validate the required field `costPortfolioCcy`
      CurrencyAndAmount.validateJsonElement(jsonObj.get("costPortfolioCcy"));
      // validate the optional field `transaction`
      if (jsonObj.get("transaction") != null && !jsonObj.get("transaction").isJsonNull()) {
        Transaction.validateJsonElement(jsonObj.get("transaction"));
      }
      if ((jsonObj.get("currency") != null && !jsonObj.get("currency").isJsonNull()) && !jsonObj.get("currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency").toString()));
      }
      if ((jsonObj.get("holdingTypeName") != null && !jsonObj.get("holdingTypeName").isJsonNull()) && !jsonObj.get("holdingTypeName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `holdingTypeName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("holdingTypeName").toString()));
      }
      // validate the optional field `notionalCost`
      if (jsonObj.get("notionalCost") != null && !jsonObj.get("notionalCost").isJsonNull()) {
        CurrencyAndAmount.validateJsonElement(jsonObj.get("notionalCost"));
      }
      // validate the optional field `amortisedCost`
      if (jsonObj.get("amortisedCost") != null && !jsonObj.get("amortisedCost").isJsonNull()) {
        CurrencyAndAmount.validateJsonElement(jsonObj.get("amortisedCost"));
      }
      // validate the optional field `amortisedCostPortfolioCcy`
      if (jsonObj.get("amortisedCostPortfolioCcy") != null && !jsonObj.get("amortisedCostPortfolioCcy").isJsonNull()) {
        CurrencyAndAmount.validateJsonElement(jsonObj.get("amortisedCostPortfolioCcy"));
      }
      // validate the optional field `variationMargin`
      if (jsonObj.get("variationMargin") != null && !jsonObj.get("variationMargin").isJsonNull()) {
        CurrencyAndAmount.validateJsonElement(jsonObj.get("variationMargin"));
      }
      // validate the optional field `variationMarginPortfolioCcy`
      if (jsonObj.get("variationMarginPortfolioCcy") != null && !jsonObj.get("variationMarginPortfolioCcy").isJsonNull()) {
        CurrencyAndAmount.validateJsonElement(jsonObj.get("variationMarginPortfolioCcy"));
      }
      if (jsonObj.get("settlementSchedule") != null && !jsonObj.get("settlementSchedule").isJsonNull()) {
        JsonArray jsonArraysettlementSchedule = jsonObj.getAsJsonArray("settlementSchedule");
        if (jsonArraysettlementSchedule != null) {
          // ensure the json data is an array
          if (!jsonObj.get("settlementSchedule").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `settlementSchedule` to be an array in the JSON string but got `%s`", jsonObj.get("settlementSchedule").toString()));
          }

          // validate the optional field `settlementSchedule` (array)
          for (int i = 0; i < jsonArraysettlementSchedule.size(); i++) {
            SettlementSchedule.validateJsonElement(jsonArraysettlementSchedule.get(i));
          };
        }
      }
      // validate the optional field `custodianAccountId`
      if (jsonObj.get("custodianAccountId") != null && !jsonObj.get("custodianAccountId").isJsonNull()) {
        ResourceId.validateJsonElement(jsonObj.get("custodianAccountId"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PortfolioHolding.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PortfolioHolding' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PortfolioHolding> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PortfolioHolding.class));

       return (TypeAdapter<T>) new TypeAdapter<PortfolioHolding>() {
           @Override
           public void write(JsonWriter out, PortfolioHolding value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PortfolioHolding read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PortfolioHolding given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PortfolioHolding
  * @throws IOException if the JSON string is invalid with respect to PortfolioHolding
  */
  public static PortfolioHolding fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PortfolioHolding.class);
  }

 /**
  * Convert an instance of PortfolioHolding to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
