/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import com.finbourne.lusid.model.CurrencyAndAmount;
import com.finbourne.lusid.model.Link;
import com.finbourne.lusid.model.PerpetualProperty;
import com.finbourne.lusid.model.Property;
import com.finbourne.lusid.model.ResourceId;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * An JELines entity.
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class JELines {
  public static final String SERIALIZED_NAME_ACCOUNTING_DATE = "accountingDate";
  @SerializedName(SERIALIZED_NAME_ACCOUNTING_DATE)
  private OffsetDateTime accountingDate;

  public static final String SERIALIZED_NAME_ACTIVITY_DATE = "activityDate";
  @SerializedName(SERIALIZED_NAME_ACTIVITY_DATE)
  private OffsetDateTime activityDate;

  public static final String SERIALIZED_NAME_PORTFOLIO_ID = "portfolioId";
  @SerializedName(SERIALIZED_NAME_PORTFOLIO_ID)
  private ResourceId portfolioId;

  public static final String SERIALIZED_NAME_INSTRUMENT_ID = "instrumentId";
  @SerializedName(SERIALIZED_NAME_INSTRUMENT_ID)
  private String instrumentId;

  public static final String SERIALIZED_NAME_INSTRUMENT_SCOPE = "instrumentScope";
  @SerializedName(SERIALIZED_NAME_INSTRUMENT_SCOPE)
  private String instrumentScope;

  public static final String SERIALIZED_NAME_SUB_HOLDING_KEYS = "subHoldingKeys";
  @SerializedName(SERIALIZED_NAME_SUB_HOLDING_KEYS)
  private Map<String, PerpetualProperty> subHoldingKeys;

  public static final String SERIALIZED_NAME_TAX_LOT_ID = "taxLotId";
  @SerializedName(SERIALIZED_NAME_TAX_LOT_ID)
  private String taxLotId;

  public static final String SERIALIZED_NAME_GL_CODE = "glCode";
  @SerializedName(SERIALIZED_NAME_GL_CODE)
  private String glCode;

  public static final String SERIALIZED_NAME_LOCAL = "local";
  @SerializedName(SERIALIZED_NAME_LOCAL)
  private CurrencyAndAmount local;

  public static final String SERIALIZED_NAME_BASE = "base";
  @SerializedName(SERIALIZED_NAME_BASE)
  private CurrencyAndAmount base;

  public static final String SERIALIZED_NAME_POSTING_MODULE_CODE = "postingModuleCode";
  @SerializedName(SERIALIZED_NAME_POSTING_MODULE_CODE)
  private String postingModuleCode;

  public static final String SERIALIZED_NAME_POSTING_RULE = "postingRule";
  @SerializedName(SERIALIZED_NAME_POSTING_RULE)
  private String postingRule;

  public static final String SERIALIZED_NAME_AS_AT_DATE = "asAtDate";
  @SerializedName(SERIALIZED_NAME_AS_AT_DATE)
  private OffsetDateTime asAtDate;

  public static final String SERIALIZED_NAME_ACTIVITIES_DESCRIPTION = "activitiesDescription";
  @SerializedName(SERIALIZED_NAME_ACTIVITIES_DESCRIPTION)
  private String activitiesDescription;

  public static final String SERIALIZED_NAME_SOURCE_TYPE = "sourceType";
  @SerializedName(SERIALIZED_NAME_SOURCE_TYPE)
  private String sourceType;

  public static final String SERIALIZED_NAME_SOURCE_ID = "sourceId";
  @SerializedName(SERIALIZED_NAME_SOURCE_ID)
  private String sourceId;

  public static final String SERIALIZED_NAME_PROPERTIES = "properties";
  @SerializedName(SERIALIZED_NAME_PROPERTIES)
  private Map<String, Property> properties;

  public static final String SERIALIZED_NAME_MOVEMENT_NAME = "movementName";
  @SerializedName(SERIALIZED_NAME_MOVEMENT_NAME)
  private String movementName;

  public static final String SERIALIZED_NAME_HOLDING_TYPE = "holdingType";
  @SerializedName(SERIALIZED_NAME_HOLDING_TYPE)
  private String holdingType;

  public static final String SERIALIZED_NAME_ECONOMIC_BUCKET = "economicBucket";
  @SerializedName(SERIALIZED_NAME_ECONOMIC_BUCKET)
  private String economicBucket;

  public static final String SERIALIZED_NAME_LINKS = "links";
  @SerializedName(SERIALIZED_NAME_LINKS)
  private List<Link> links;

  public JELines() {
  }

  public JELines accountingDate(OffsetDateTime accountingDate) {
    
    this.accountingDate = accountingDate;
    return this;
  }

   /**
   * The JELines accounting date.
   * @return accountingDate
  **/
  @jakarta.annotation.Nonnull
  public OffsetDateTime getAccountingDate() {
    return accountingDate;
  }


  public void setAccountingDate(OffsetDateTime accountingDate) {
    this.accountingDate = accountingDate;
  }


  public JELines activityDate(OffsetDateTime activityDate) {
    
    this.activityDate = activityDate;
    return this;
  }

   /**
   * The actual date of the activity. Differs from the accounting date when creating journals that would occur in a closed period.
   * @return activityDate
  **/
  @jakarta.annotation.Nonnull
  public OffsetDateTime getActivityDate() {
    return activityDate;
  }


  public void setActivityDate(OffsetDateTime activityDate) {
    this.activityDate = activityDate;
  }


  public JELines portfolioId(ResourceId portfolioId) {
    
    this.portfolioId = portfolioId;
    return this;
  }

   /**
   * Get portfolioId
   * @return portfolioId
  **/
  @jakarta.annotation.Nonnull
  public ResourceId getPortfolioId() {
    return portfolioId;
  }


  public void setPortfolioId(ResourceId portfolioId) {
    this.portfolioId = portfolioId;
  }


  public JELines instrumentId(String instrumentId) {
    
    this.instrumentId = instrumentId;
    return this;
  }

   /**
   * To indicate the instrument of the transaction that the JE line posted for, if applicable.
   * @return instrumentId
  **/
  @jakarta.annotation.Nonnull
  public String getInstrumentId() {
    return instrumentId;
  }


  public void setInstrumentId(String instrumentId) {
    this.instrumentId = instrumentId;
  }


  public JELines instrumentScope(String instrumentScope) {
    
    this.instrumentScope = instrumentScope;
    return this;
  }

   /**
   * The scope in which the JELines instrument is in.
   * @return instrumentScope
  **/
  @jakarta.annotation.Nonnull
  public String getInstrumentScope() {
    return instrumentScope;
  }


  public void setInstrumentScope(String instrumentScope) {
    this.instrumentScope = instrumentScope;
  }


  public JELines subHoldingKeys(Map<String, PerpetualProperty> subHoldingKeys) {
    
    this.subHoldingKeys = subHoldingKeys;
    return this;
  }

  public JELines putSubHoldingKeysItem(String key, PerpetualProperty subHoldingKeysItem) {
    if (this.subHoldingKeys == null) {
      this.subHoldingKeys = new HashMap<>();
    }
    this.subHoldingKeys.put(key, subHoldingKeysItem);
    return this;
  }

   /**
   * The sub-holding properties which are part of the AccountingKey.
   * @return subHoldingKeys
  **/
  @jakarta.annotation.Nullable
  public Map<String, PerpetualProperty> getSubHoldingKeys() {
    return subHoldingKeys;
  }


  public void setSubHoldingKeys(Map<String, PerpetualProperty> subHoldingKeys) {
    this.subHoldingKeys = subHoldingKeys;
  }


  public JELines taxLotId(String taxLotId) {
    
    this.taxLotId = taxLotId;
    return this;
  }

   /**
   * The tax lot Id that JE line is impacting.
   * @return taxLotId
  **/
  @jakarta.annotation.Nonnull
  public String getTaxLotId() {
    return taxLotId;
  }


  public void setTaxLotId(String taxLotId) {
    this.taxLotId = taxLotId;
  }


  public JELines glCode(String glCode) {
    
    this.glCode = glCode;
    return this;
  }

   /**
   * Code of general ledger the JE lines posting to.
   * @return glCode
  **/
  @jakarta.annotation.Nonnull
  public String getGlCode() {
    return glCode;
  }


  public void setGlCode(String glCode) {
    this.glCode = glCode;
  }


  public JELines local(CurrencyAndAmount local) {
    
    this.local = local;
    return this;
  }

   /**
   * Get local
   * @return local
  **/
  @jakarta.annotation.Nonnull
  public CurrencyAndAmount getLocal() {
    return local;
  }


  public void setLocal(CurrencyAndAmount local) {
    this.local = local;
  }


  public JELines base(CurrencyAndAmount base) {
    
    this.base = base;
    return this;
  }

   /**
   * Get base
   * @return base
  **/
  @jakarta.annotation.Nonnull
  public CurrencyAndAmount getBase() {
    return base;
  }


  public void setBase(CurrencyAndAmount base) {
    this.base = base;
  }


  public JELines postingModuleCode(String postingModuleCode) {
    
    this.postingModuleCode = postingModuleCode;
    return this;
  }

   /**
   * The code of the posting module where the posting rules derived the JE Lines.
   * @return postingModuleCode
  **/
  @jakarta.annotation.Nullable
  public String getPostingModuleCode() {
    return postingModuleCode;
  }


  public void setPostingModuleCode(String postingModuleCode) {
    this.postingModuleCode = postingModuleCode;
  }


  public JELines postingRule(String postingRule) {
    
    this.postingRule = postingRule;
    return this;
  }

   /**
   * The rule generating the JELinse.
   * @return postingRule
  **/
  @jakarta.annotation.Nonnull
  public String getPostingRule() {
    return postingRule;
  }


  public void setPostingRule(String postingRule) {
    this.postingRule = postingRule;
  }


  public JELines asAtDate(OffsetDateTime asAtDate) {
    
    this.asAtDate = asAtDate;
    return this;
  }

   /**
   * The corresponding input date and time of the Transaction generating the JELine.
   * @return asAtDate
  **/
  @jakarta.annotation.Nonnull
  public OffsetDateTime getAsAtDate() {
    return asAtDate;
  }


  public void setAsAtDate(OffsetDateTime asAtDate) {
    this.asAtDate = asAtDate;
  }


  public JELines activitiesDescription(String activitiesDescription) {
    
    this.activitiesDescription = activitiesDescription;
    return this;
  }

   /**
   * This would be the description of the business activities where these JE lines are posting for.
   * @return activitiesDescription
  **/
  @jakarta.annotation.Nullable
  public String getActivitiesDescription() {
    return activitiesDescription;
  }


  public void setActivitiesDescription(String activitiesDescription) {
    this.activitiesDescription = activitiesDescription;
  }


  public JELines sourceType(String sourceType) {
    
    this.sourceType = sourceType;
    return this;
  }

   /**
   * So far are 4 types: LusidTxn, LusidValuation, Manual and External.
   * @return sourceType
  **/
  @jakarta.annotation.Nonnull
  public String getSourceType() {
    return sourceType;
  }


  public void setSourceType(String sourceType) {
    this.sourceType = sourceType;
  }


  public JELines sourceId(String sourceId) {
    
    this.sourceId = sourceId;
    return this;
  }

   /**
   * For the Lusid Source Type this will be the txn Id. For the rest will be what the user populates.
   * @return sourceId
  **/
  @jakarta.annotation.Nonnull
  public String getSourceId() {
    return sourceId;
  }


  public void setSourceId(String sourceId) {
    this.sourceId = sourceId;
  }


  public JELines properties(Map<String, Property> properties) {
    
    this.properties = properties;
    return this;
  }

  public JELines putPropertiesItem(String key, Property propertiesItem) {
    if (this.properties == null) {
      this.properties = new HashMap<>();
    }
    this.properties.put(key, propertiesItem);
    return this;
  }

   /**
   * Properties to add to the Abor.
   * @return properties
  **/
  @jakarta.annotation.Nullable
  public Map<String, Property> getProperties() {
    return properties;
  }


  public void setProperties(Map<String, Property> properties) {
    this.properties = properties;
  }


  public JELines movementName(String movementName) {
    
    this.movementName = movementName;
    return this;
  }

   /**
   * The name of the movement.
   * @return movementName
  **/
  @jakarta.annotation.Nonnull
  public String getMovementName() {
    return movementName;
  }


  public void setMovementName(String movementName) {
    this.movementName = movementName;
  }


  public JELines holdingType(String holdingType) {
    
    this.holdingType = holdingType;
    return this;
  }

   /**
   * Defines the broad category holding within the portfolio.
   * @return holdingType
  **/
  @jakarta.annotation.Nonnull
  public String getHoldingType() {
    return holdingType;
  }


  public void setHoldingType(String holdingType) {
    this.holdingType = holdingType;
  }


  public JELines economicBucket(String economicBucket) {
    
    this.economicBucket = economicBucket;
    return this;
  }

   /**
   * Raw JE Line details of the economic bucket for the JE Line.
   * @return economicBucket
  **/
  @jakarta.annotation.Nonnull
  public String getEconomicBucket() {
    return economicBucket;
  }


  public void setEconomicBucket(String economicBucket) {
    this.economicBucket = economicBucket;
  }


  public JELines links(List<Link> links) {
    
    this.links = links;
    return this;
  }

  public JELines addLinksItem(Link linksItem) {
    if (this.links == null) {
      this.links = new ArrayList<>();
    }
    this.links.add(linksItem);
    return this;
  }

   /**
   * Get links
   * @return links
  **/
  @jakarta.annotation.Nullable
  public List<Link> getLinks() {
    return links;
  }


  public void setLinks(List<Link> links) {
    this.links = links;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    JELines jeLines = (JELines) o;
    return Objects.equals(this.accountingDate, jeLines.accountingDate) &&
        Objects.equals(this.activityDate, jeLines.activityDate) &&
        Objects.equals(this.portfolioId, jeLines.portfolioId) &&
        Objects.equals(this.instrumentId, jeLines.instrumentId) &&
        Objects.equals(this.instrumentScope, jeLines.instrumentScope) &&
        Objects.equals(this.subHoldingKeys, jeLines.subHoldingKeys) &&
        Objects.equals(this.taxLotId, jeLines.taxLotId) &&
        Objects.equals(this.glCode, jeLines.glCode) &&
        Objects.equals(this.local, jeLines.local) &&
        Objects.equals(this.base, jeLines.base) &&
        Objects.equals(this.postingModuleCode, jeLines.postingModuleCode) &&
        Objects.equals(this.postingRule, jeLines.postingRule) &&
        Objects.equals(this.asAtDate, jeLines.asAtDate) &&
        Objects.equals(this.activitiesDescription, jeLines.activitiesDescription) &&
        Objects.equals(this.sourceType, jeLines.sourceType) &&
        Objects.equals(this.sourceId, jeLines.sourceId) &&
        Objects.equals(this.properties, jeLines.properties) &&
        Objects.equals(this.movementName, jeLines.movementName) &&
        Objects.equals(this.holdingType, jeLines.holdingType) &&
        Objects.equals(this.economicBucket, jeLines.economicBucket) &&
        Objects.equals(this.links, jeLines.links);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountingDate, activityDate, portfolioId, instrumentId, instrumentScope, subHoldingKeys, taxLotId, glCode, local, base, postingModuleCode, postingRule, asAtDate, activitiesDescription, sourceType, sourceId, properties, movementName, holdingType, economicBucket, links);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class JELines {\n");
    sb.append("    accountingDate: ").append(toIndentedString(accountingDate)).append("\n");
    sb.append("    activityDate: ").append(toIndentedString(activityDate)).append("\n");
    sb.append("    portfolioId: ").append(toIndentedString(portfolioId)).append("\n");
    sb.append("    instrumentId: ").append(toIndentedString(instrumentId)).append("\n");
    sb.append("    instrumentScope: ").append(toIndentedString(instrumentScope)).append("\n");
    sb.append("    subHoldingKeys: ").append(toIndentedString(subHoldingKeys)).append("\n");
    sb.append("    taxLotId: ").append(toIndentedString(taxLotId)).append("\n");
    sb.append("    glCode: ").append(toIndentedString(glCode)).append("\n");
    sb.append("    local: ").append(toIndentedString(local)).append("\n");
    sb.append("    base: ").append(toIndentedString(base)).append("\n");
    sb.append("    postingModuleCode: ").append(toIndentedString(postingModuleCode)).append("\n");
    sb.append("    postingRule: ").append(toIndentedString(postingRule)).append("\n");
    sb.append("    asAtDate: ").append(toIndentedString(asAtDate)).append("\n");
    sb.append("    activitiesDescription: ").append(toIndentedString(activitiesDescription)).append("\n");
    sb.append("    sourceType: ").append(toIndentedString(sourceType)).append("\n");
    sb.append("    sourceId: ").append(toIndentedString(sourceId)).append("\n");
    sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
    sb.append("    movementName: ").append(toIndentedString(movementName)).append("\n");
    sb.append("    holdingType: ").append(toIndentedString(holdingType)).append("\n");
    sb.append("    economicBucket: ").append(toIndentedString(economicBucket)).append("\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accountingDate");
    openapiFields.add("activityDate");
    openapiFields.add("portfolioId");
    openapiFields.add("instrumentId");
    openapiFields.add("instrumentScope");
    openapiFields.add("subHoldingKeys");
    openapiFields.add("taxLotId");
    openapiFields.add("glCode");
    openapiFields.add("local");
    openapiFields.add("base");
    openapiFields.add("postingModuleCode");
    openapiFields.add("postingRule");
    openapiFields.add("asAtDate");
    openapiFields.add("activitiesDescription");
    openapiFields.add("sourceType");
    openapiFields.add("sourceId");
    openapiFields.add("properties");
    openapiFields.add("movementName");
    openapiFields.add("holdingType");
    openapiFields.add("economicBucket");
    openapiFields.add("links");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("accountingDate");
    openapiRequiredFields.add("activityDate");
    openapiRequiredFields.add("portfolioId");
    openapiRequiredFields.add("instrumentId");
    openapiRequiredFields.add("instrumentScope");
    openapiRequiredFields.add("taxLotId");
    openapiRequiredFields.add("glCode");
    openapiRequiredFields.add("local");
    openapiRequiredFields.add("base");
    openapiRequiredFields.add("postingRule");
    openapiRequiredFields.add("asAtDate");
    openapiRequiredFields.add("sourceType");
    openapiRequiredFields.add("sourceId");
    openapiRequiredFields.add("movementName");
    openapiRequiredFields.add("holdingType");
    openapiRequiredFields.add("economicBucket");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to JELines
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!JELines.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in JELines is not found in the empty JSON string", JELines.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!JELines.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `JELines` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : JELines.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // validate the required field `portfolioId`
      ResourceId.validateJsonObject(jsonObj.getAsJsonObject("portfolioId"));
      if (!jsonObj.get("instrumentId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `instrumentId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("instrumentId").toString()));
      }
      if (!jsonObj.get("instrumentScope").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `instrumentScope` to be a primitive type in the JSON string but got `%s`", jsonObj.get("instrumentScope").toString()));
      }
      if (!jsonObj.get("taxLotId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `taxLotId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("taxLotId").toString()));
      }
      if (!jsonObj.get("glCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `glCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("glCode").toString()));
      }
      // validate the required field `local`
      CurrencyAndAmount.validateJsonObject(jsonObj.getAsJsonObject("local"));
      // validate the required field `base`
      CurrencyAndAmount.validateJsonObject(jsonObj.getAsJsonObject("base"));
      if ((jsonObj.get("postingModuleCode") != null && !jsonObj.get("postingModuleCode").isJsonNull()) && !jsonObj.get("postingModuleCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `postingModuleCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("postingModuleCode").toString()));
      }
      if (!jsonObj.get("postingRule").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `postingRule` to be a primitive type in the JSON string but got `%s`", jsonObj.get("postingRule").toString()));
      }
      if ((jsonObj.get("activitiesDescription") != null && !jsonObj.get("activitiesDescription").isJsonNull()) && !jsonObj.get("activitiesDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `activitiesDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("activitiesDescription").toString()));
      }
      if (!jsonObj.get("sourceType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourceType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sourceType").toString()));
      }
      if (!jsonObj.get("sourceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sourceId").toString()));
      }
      if (!jsonObj.get("movementName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `movementName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("movementName").toString()));
      }
      if (!jsonObj.get("holdingType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `holdingType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("holdingType").toString()));
      }
      if (!jsonObj.get("economicBucket").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `economicBucket` to be a primitive type in the JSON string but got `%s`", jsonObj.get("economicBucket").toString()));
      }
      if (jsonObj.get("links") != null && !jsonObj.get("links").isJsonNull()) {
        JsonArray jsonArraylinks = jsonObj.getAsJsonArray("links");
        if (jsonArraylinks != null) {
          // ensure the json data is an array
          if (!jsonObj.get("links").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `links` to be an array in the JSON string but got `%s`", jsonObj.get("links").toString()));
          }

          // validate the optional field `links` (array)
          for (int i = 0; i < jsonArraylinks.size(); i++) {
            Link.validateJsonObject(jsonArraylinks.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!JELines.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'JELines' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<JELines> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(JELines.class));

       return (TypeAdapter<T>) new TypeAdapter<JELines>() {
           @Override
           public void write(JsonWriter out, JELines value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public JELines read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of JELines given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of JELines
  * @throws IOException if the JSON string is invalid with respect to JELines
  */
  public static JELines fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, JELines.class);
  }

 /**
  * Convert an instance of JELines to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
