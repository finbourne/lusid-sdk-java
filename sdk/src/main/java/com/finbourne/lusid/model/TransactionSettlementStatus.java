/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import com.finbourne.lusid.model.Link;
import com.finbourne.lusid.model.TransactionSettlementBucket;
import com.finbourne.lusid.model.TransactionSettlementInstruction;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * TransactionSettlementStatus
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class TransactionSettlementStatus {
  public static final String SERIALIZED_NAME_TRANSACTION_ID = "transactionId";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_ID)
  private String transactionId;

  public static final String SERIALIZED_NAME_SETTLEMENT_BUCKETS = "settlementBuckets";
  @SerializedName(SERIALIZED_NAME_SETTLEMENT_BUCKETS)
  private List<TransactionSettlementBucket> settlementBuckets;

  public static final String SERIALIZED_NAME_INVALID_INSTRUCTIONS = "invalidInstructions";
  @SerializedName(SERIALIZED_NAME_INVALID_INSTRUCTIONS)
  private List<TransactionSettlementInstruction> invalidInstructions;

  public static final String SERIALIZED_NAME_LINKS = "links";
  @SerializedName(SERIALIZED_NAME_LINKS)
  private List<Link> links;

  public TransactionSettlementStatus() {
  }

  public TransactionSettlementStatus transactionId(String transactionId) {
    
    this.transactionId = transactionId;
    return this;
  }

   /**
   * The unique identifier for the transaction.
   * @return transactionId
  **/
  @jakarta.annotation.Nonnull
  public String getTransactionId() {
    return transactionId;
  }


  public void setTransactionId(String transactionId) {
    this.transactionId = transactionId;
  }


  public TransactionSettlementStatus settlementBuckets(List<TransactionSettlementBucket> settlementBuckets) {
    
    this.settlementBuckets = settlementBuckets;
    return this;
  }

  public TransactionSettlementStatus addSettlementBucketsItem(TransactionSettlementBucket settlementBucketsItem) {
    if (this.settlementBuckets == null) {
      this.settlementBuckets = new ArrayList<>();
    }
    this.settlementBuckets.add(settlementBucketsItem);
    return this;
  }

   /**
   * The transaction&#39;s external movements (ie: with SettlementMode&#x3D;External) are grouped into buckets with each bucket uniquely defined by the combination of SettlementCategory, LusidInstrumentId, InstrumentScope and ContractualSettlementDate.
   * @return settlementBuckets
  **/
  @jakarta.annotation.Nullable
  public List<TransactionSettlementBucket> getSettlementBuckets() {
    return settlementBuckets;
  }


  public void setSettlementBuckets(List<TransactionSettlementBucket> settlementBuckets) {
    this.settlementBuckets = settlementBuckets;
  }


  public TransactionSettlementStatus invalidInstructions(List<TransactionSettlementInstruction> invalidInstructions) {
    
    this.invalidInstructions = invalidInstructions;
    return this;
  }

  public TransactionSettlementStatus addInvalidInstructionsItem(TransactionSettlementInstruction invalidInstructionsItem) {
    if (this.invalidInstructions == null) {
      this.invalidInstructions = new ArrayList<>();
    }
    this.invalidInstructions.add(invalidInstructionsItem);
    return this;
  }

   /**
   * Invalid settlement instructions where the referenced transaction exists but the settlement bucket implied by the settlement instruction does not exist.
   * @return invalidInstructions
  **/
  @jakarta.annotation.Nullable
  public List<TransactionSettlementInstruction> getInvalidInstructions() {
    return invalidInstructions;
  }


  public void setInvalidInstructions(List<TransactionSettlementInstruction> invalidInstructions) {
    this.invalidInstructions = invalidInstructions;
  }


  public TransactionSettlementStatus links(List<Link> links) {
    
    this.links = links;
    return this;
  }

  public TransactionSettlementStatus addLinksItem(Link linksItem) {
    if (this.links == null) {
      this.links = new ArrayList<>();
    }
    this.links.add(linksItem);
    return this;
  }

   /**
   * Get links
   * @return links
  **/
  @jakarta.annotation.Nullable
  public List<Link> getLinks() {
    return links;
  }


  public void setLinks(List<Link> links) {
    this.links = links;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TransactionSettlementStatus transactionSettlementStatus = (TransactionSettlementStatus) o;
    return Objects.equals(this.transactionId, transactionSettlementStatus.transactionId) &&
        Objects.equals(this.settlementBuckets, transactionSettlementStatus.settlementBuckets) &&
        Objects.equals(this.invalidInstructions, transactionSettlementStatus.invalidInstructions) &&
        Objects.equals(this.links, transactionSettlementStatus.links);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(transactionId, settlementBuckets, invalidInstructions, links);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TransactionSettlementStatus {\n");
    sb.append("    transactionId: ").append(toIndentedString(transactionId)).append("\n");
    sb.append("    settlementBuckets: ").append(toIndentedString(settlementBuckets)).append("\n");
    sb.append("    invalidInstructions: ").append(toIndentedString(invalidInstructions)).append("\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("transactionId");
    openapiFields.add("settlementBuckets");
    openapiFields.add("invalidInstructions");
    openapiFields.add("links");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("transactionId");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to TransactionSettlementStatus
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TransactionSettlementStatus.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TransactionSettlementStatus is not found in the empty JSON string", TransactionSettlementStatus.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TransactionSettlementStatus.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("transactionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transactionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transactionId").toString()));
      }
      if (jsonObj.get("settlementBuckets") != null && !jsonObj.get("settlementBuckets").isJsonNull()) {
        JsonArray jsonArraysettlementBuckets = jsonObj.getAsJsonArray("settlementBuckets");
        if (jsonArraysettlementBuckets != null) {
          // ensure the json data is an array
          if (!jsonObj.get("settlementBuckets").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `settlementBuckets` to be an array in the JSON string but got `%s`", jsonObj.get("settlementBuckets").toString()));
          }

          // validate the optional field `settlementBuckets` (array)
          for (int i = 0; i < jsonArraysettlementBuckets.size(); i++) {
            TransactionSettlementBucket.validateJsonElement(jsonArraysettlementBuckets.get(i));
          };
        }
      }
      if (jsonObj.get("invalidInstructions") != null && !jsonObj.get("invalidInstructions").isJsonNull()) {
        JsonArray jsonArrayinvalidInstructions = jsonObj.getAsJsonArray("invalidInstructions");
        if (jsonArrayinvalidInstructions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("invalidInstructions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `invalidInstructions` to be an array in the JSON string but got `%s`", jsonObj.get("invalidInstructions").toString()));
          }

          // validate the optional field `invalidInstructions` (array)
          for (int i = 0; i < jsonArrayinvalidInstructions.size(); i++) {
            TransactionSettlementInstruction.validateJsonElement(jsonArrayinvalidInstructions.get(i));
          };
        }
      }
      if (jsonObj.get("links") != null && !jsonObj.get("links").isJsonNull()) {
        JsonArray jsonArraylinks = jsonObj.getAsJsonArray("links");
        if (jsonArraylinks != null) {
          // ensure the json data is an array
          if (!jsonObj.get("links").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `links` to be an array in the JSON string but got `%s`", jsonObj.get("links").toString()));
          }

          // validate the optional field `links` (array)
          for (int i = 0; i < jsonArraylinks.size(); i++) {
            Link.validateJsonElement(jsonArraylinks.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TransactionSettlementStatus.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TransactionSettlementStatus' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TransactionSettlementStatus> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TransactionSettlementStatus.class));

       return (TypeAdapter<T>) new TypeAdapter<TransactionSettlementStatus>() {
           @Override
           public void write(JsonWriter out, TransactionSettlementStatus value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TransactionSettlementStatus read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TransactionSettlementStatus given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TransactionSettlementStatus
  * @throws IOException if the JSON string is invalid with respect to TransactionSettlementStatus
  */
  public static TransactionSettlementStatus fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TransactionSettlementStatus.class);
  }

 /**
  * Convert an instance of TransactionSettlementStatus to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
