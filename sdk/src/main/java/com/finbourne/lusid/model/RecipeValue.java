/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import com.finbourne.lusid.model.FromRecipe;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * Recipe value represents a data that is then used to perform an atomic operation which is then used in composition of Configuration Recipe.  This object either includes the data itself (in json form or as simple string) or is a reference where the data can be obtained from (from a Configuration Recipe say).  Only one field is to be populated.
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class RecipeValue {
  public static final String SERIALIZED_NAME_AS_JSON = "asJson";
  @SerializedName(SERIALIZED_NAME_AS_JSON)
  private String asJson;

  public static final String SERIALIZED_NAME_AS_STRING = "asString";
  @SerializedName(SERIALIZED_NAME_AS_STRING)
  private String asString;

  public static final String SERIALIZED_NAME_FROM_RECIPE = "fromRecipe";
  @SerializedName(SERIALIZED_NAME_FROM_RECIPE)
  private FromRecipe fromRecipe;

  public RecipeValue() {
  }

  public RecipeValue asJson(String asJson) {
    
    this.asJson = asJson;
    return this;
  }

   /**
   * Field to allow providing a potentially complex json value.
   * @return asJson
  **/
  @jakarta.annotation.Nullable
  public String getAsJson() {
    return asJson;
  }


  public void setAsJson(String asJson) {
    this.asJson = asJson;
  }


  public RecipeValue asString(String asString) {
    
    this.asString = asString;
    return this;
  }

   /**
   * For simple value, a single input value, note complex nested objects are not allowed here.
   * @return asString
  **/
  @jakarta.annotation.Nullable
  public String getAsString() {
    return asString;
  }


  public void setAsString(String asString) {
    this.asString = asString;
  }


  public RecipeValue fromRecipe(FromRecipe fromRecipe) {
    
    this.fromRecipe = fromRecipe;
    return this;
  }

   /**
   * Get fromRecipe
   * @return fromRecipe
  **/
  @jakarta.annotation.Nullable
  public FromRecipe getFromRecipe() {
    return fromRecipe;
  }


  public void setFromRecipe(FromRecipe fromRecipe) {
    this.fromRecipe = fromRecipe;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RecipeValue recipeValue = (RecipeValue) o;
    return Objects.equals(this.asJson, recipeValue.asJson) &&
        Objects.equals(this.asString, recipeValue.asString) &&
        Objects.equals(this.fromRecipe, recipeValue.fromRecipe);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(asJson, asString, fromRecipe);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RecipeValue {\n");
    sb.append("    asJson: ").append(toIndentedString(asJson)).append("\n");
    sb.append("    asString: ").append(toIndentedString(asString)).append("\n");
    sb.append("    fromRecipe: ").append(toIndentedString(fromRecipe)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("asJson");
    openapiFields.add("asString");
    openapiFields.add("fromRecipe");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to RecipeValue
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RecipeValue.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RecipeValue is not found in the empty JSON string", RecipeValue.openapiRequiredFields.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("asJson") != null && !jsonObj.get("asJson").isJsonNull()) && !jsonObj.get("asJson").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `asJson` to be a primitive type in the JSON string but got `%s`", jsonObj.get("asJson").toString()));
      }
      if ((jsonObj.get("asString") != null && !jsonObj.get("asString").isJsonNull()) && !jsonObj.get("asString").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `asString` to be a primitive type in the JSON string but got `%s`", jsonObj.get("asString").toString()));
      }
      // validate the optional field `fromRecipe`
      if (jsonObj.get("fromRecipe") != null && !jsonObj.get("fromRecipe").isJsonNull()) {
        FromRecipe.validateJsonElement(jsonObj.get("fromRecipe"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RecipeValue.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RecipeValue' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RecipeValue> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RecipeValue.class));

       return (TypeAdapter<T>) new TypeAdapter<RecipeValue>() {
           @Override
           public void write(JsonWriter out, RecipeValue value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RecipeValue read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of RecipeValue given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of RecipeValue
  * @throws IOException if the JSON string is invalid with respect to RecipeValue
  */
  public static RecipeValue fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RecipeValue.class);
  }

 /**
  * Convert an instance of RecipeValue to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
