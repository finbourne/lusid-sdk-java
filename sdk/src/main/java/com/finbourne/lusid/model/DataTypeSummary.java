/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import com.finbourne.lusid.model.IUnitDefinitionDto;
import com.finbourne.lusid.model.ResourceId;
import com.finbourne.lusid.model.Version;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * DataTypeSummary
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class DataTypeSummary {
  /**
   * Indicates the range of data acceptable by a data type. The available values are: Open, Closed
   */
  @JsonAdapter(TypeValueRangeEnum.Adapter.class)
  public enum TypeValueRangeEnum {
    OPEN("Open"),
    
    CLOSED("Closed");

    private String value;

    TypeValueRangeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeValueRangeEnum fromValue(String value) {
      for (TypeValueRangeEnum b : TypeValueRangeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeValueRangeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeValueRangeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeValueRangeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeValueRangeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TYPE_VALUE_RANGE = "typeValueRange";
  @SerializedName(SERIALIZED_NAME_TYPE_VALUE_RANGE)
  private TypeValueRangeEnum typeValueRange;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private ResourceId id;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  /**
   * The expected type of the values. The available values are: String, Int, Decimal, DateTime, Boolean, Map, List, PropertyArray, Percentage, Code, Id, Uri, CurrencyAndAmount, TradePrice, Currency, MetricValue, ResourceId, ResultValue, CutLocalTime, DateOrCutLabel, UnindexedText
   */
  @JsonAdapter(ValueTypeEnum.Adapter.class)
  public enum ValueTypeEnum {
    STRING("String"),
    
    INT("Int"),
    
    DECIMAL("Decimal"),
    
    DATETIME("DateTime"),
    
    BOOLEAN("Boolean"),
    
    MAP("Map"),
    
    LIST("List"),
    
    PROPERTYARRAY("PropertyArray"),
    
    PERCENTAGE("Percentage"),
    
    CODE("Code"),
    
    ID("Id"),
    
    URI("Uri"),
    
    CURRENCYANDAMOUNT("CurrencyAndAmount"),
    
    TRADEPRICE("TradePrice"),
    
    CURRENCY("Currency"),
    
    METRICVALUE("MetricValue"),
    
    RESOURCEID("ResourceId"),
    
    RESULTVALUE("ResultValue"),
    
    CUTLOCALTIME("CutLocalTime"),
    
    DATEORCUTLABEL("DateOrCutLabel"),
    
    UNINDEXEDTEXT("UnindexedText");

    private String value;

    ValueTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ValueTypeEnum fromValue(String value) {
      for (ValueTypeEnum b : ValueTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ValueTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ValueTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ValueTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ValueTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_VALUE_TYPE = "valueType";
  @SerializedName(SERIALIZED_NAME_VALUE_TYPE)
  private ValueTypeEnum valueType;

  public static final String SERIALIZED_NAME_ACCEPTABLE_VALUES = "acceptableValues";
  @SerializedName(SERIALIZED_NAME_ACCEPTABLE_VALUES)
  private List<String> acceptableValues;

  /**
   * The schema of the data type&#39;s units. The available values are: NoUnits, Basic, Iso4217Currency
   */
  @JsonAdapter(UnitSchemaEnum.Adapter.class)
  public enum UnitSchemaEnum {
    NOUNITS("NoUnits"),
    
    BASIC("Basic"),
    
    ISO4217CURRENCY("Iso4217Currency");

    private String value;

    UnitSchemaEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static UnitSchemaEnum fromValue(String value) {
      for (UnitSchemaEnum b : UnitSchemaEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<UnitSchemaEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final UnitSchemaEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public UnitSchemaEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return UnitSchemaEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_UNIT_SCHEMA = "unitSchema";
  @SerializedName(SERIALIZED_NAME_UNIT_SCHEMA)
  private UnitSchemaEnum unitSchema;

  public static final String SERIALIZED_NAME_ACCEPTABLE_UNITS = "acceptableUnits";
  @SerializedName(SERIALIZED_NAME_ACCEPTABLE_UNITS)
  private List<IUnitDefinitionDto> acceptableUnits;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private Version version;

  public DataTypeSummary() {
  }

  public DataTypeSummary typeValueRange(TypeValueRangeEnum typeValueRange) {
    
    this.typeValueRange = typeValueRange;
    return this;
  }

   /**
   * Indicates the range of data acceptable by a data type. The available values are: Open, Closed
   * @return typeValueRange
  **/
  @jakarta.annotation.Nonnull
  public TypeValueRangeEnum getTypeValueRange() {
    return typeValueRange;
  }


  public void setTypeValueRange(TypeValueRangeEnum typeValueRange) {
    this.typeValueRange = typeValueRange;
  }


  public DataTypeSummary id(ResourceId id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @jakarta.annotation.Nonnull
  public ResourceId getId() {
    return id;
  }


  public void setId(ResourceId id) {
    this.id = id;
  }


  public DataTypeSummary displayName(String displayName) {
    
    this.displayName = displayName;
    return this;
  }

   /**
   * The display name of the data type.
   * @return displayName
  **/
  @jakarta.annotation.Nonnull
  public String getDisplayName() {
    return displayName;
  }


  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public DataTypeSummary description(String description) {
    
    this.description = description;
    return this;
  }

   /**
   * The description of the data type.
   * @return description
  **/
  @jakarta.annotation.Nonnull
  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    this.description = description;
  }


  public DataTypeSummary valueType(ValueTypeEnum valueType) {
    
    this.valueType = valueType;
    return this;
  }

   /**
   * The expected type of the values. The available values are: String, Int, Decimal, DateTime, Boolean, Map, List, PropertyArray, Percentage, Code, Id, Uri, CurrencyAndAmount, TradePrice, Currency, MetricValue, ResourceId, ResultValue, CutLocalTime, DateOrCutLabel, UnindexedText
   * @return valueType
  **/
  @jakarta.annotation.Nonnull
  public ValueTypeEnum getValueType() {
    return valueType;
  }


  public void setValueType(ValueTypeEnum valueType) {
    this.valueType = valueType;
  }


  public DataTypeSummary acceptableValues(List<String> acceptableValues) {
    
    this.acceptableValues = acceptableValues;
    return this;
  }

  public DataTypeSummary addAcceptableValuesItem(String acceptableValuesItem) {
    if (this.acceptableValues == null) {
      this.acceptableValues = new ArrayList<>();
    }
    this.acceptableValues.add(acceptableValuesItem);
    return this;
  }

   /**
   * The acceptable set of values for this data type. Only applies to &#39;open&#39; value type range.
   * @return acceptableValues
  **/
  @jakarta.annotation.Nullable
  public List<String> getAcceptableValues() {
    return acceptableValues;
  }


  public void setAcceptableValues(List<String> acceptableValues) {
    this.acceptableValues = acceptableValues;
  }


  public DataTypeSummary unitSchema(UnitSchemaEnum unitSchema) {
    
    this.unitSchema = unitSchema;
    return this;
  }

   /**
   * The schema of the data type&#39;s units. The available values are: NoUnits, Basic, Iso4217Currency
   * @return unitSchema
  **/
  @jakarta.annotation.Nullable
  public UnitSchemaEnum getUnitSchema() {
    return unitSchema;
  }


  public void setUnitSchema(UnitSchemaEnum unitSchema) {
    this.unitSchema = unitSchema;
  }


  public DataTypeSummary acceptableUnits(List<IUnitDefinitionDto> acceptableUnits) {
    
    this.acceptableUnits = acceptableUnits;
    return this;
  }

  public DataTypeSummary addAcceptableUnitsItem(IUnitDefinitionDto acceptableUnitsItem) {
    if (this.acceptableUnits == null) {
      this.acceptableUnits = new ArrayList<>();
    }
    this.acceptableUnits.add(acceptableUnitsItem);
    return this;
  }

   /**
   * The definitions of the acceptable units.
   * @return acceptableUnits
  **/
  @jakarta.annotation.Nullable
  public List<IUnitDefinitionDto> getAcceptableUnits() {
    return acceptableUnits;
  }


  public void setAcceptableUnits(List<IUnitDefinitionDto> acceptableUnits) {
    this.acceptableUnits = acceptableUnits;
  }


  public DataTypeSummary version(Version version) {
    
    this.version = version;
    return this;
  }

   /**
   * Get version
   * @return version
  **/
  @jakarta.annotation.Nullable
  public Version getVersion() {
    return version;
  }


  public void setVersion(Version version) {
    this.version = version;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DataTypeSummary dataTypeSummary = (DataTypeSummary) o;
    return Objects.equals(this.typeValueRange, dataTypeSummary.typeValueRange) &&
        Objects.equals(this.id, dataTypeSummary.id) &&
        Objects.equals(this.displayName, dataTypeSummary.displayName) &&
        Objects.equals(this.description, dataTypeSummary.description) &&
        Objects.equals(this.valueType, dataTypeSummary.valueType) &&
        Objects.equals(this.acceptableValues, dataTypeSummary.acceptableValues) &&
        Objects.equals(this.unitSchema, dataTypeSummary.unitSchema) &&
        Objects.equals(this.acceptableUnits, dataTypeSummary.acceptableUnits) &&
        Objects.equals(this.version, dataTypeSummary.version);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(typeValueRange, id, displayName, description, valueType, acceptableValues, unitSchema, acceptableUnits, version);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DataTypeSummary {\n");
    sb.append("    typeValueRange: ").append(toIndentedString(typeValueRange)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    valueType: ").append(toIndentedString(valueType)).append("\n");
    sb.append("    acceptableValues: ").append(toIndentedString(acceptableValues)).append("\n");
    sb.append("    unitSchema: ").append(toIndentedString(unitSchema)).append("\n");
    sb.append("    acceptableUnits: ").append(toIndentedString(acceptableUnits)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("typeValueRange");
    openapiFields.add("id");
    openapiFields.add("displayName");
    openapiFields.add("description");
    openapiFields.add("valueType");
    openapiFields.add("acceptableValues");
    openapiFields.add("unitSchema");
    openapiFields.add("acceptableUnits");
    openapiFields.add("version");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("typeValueRange");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("displayName");
    openapiRequiredFields.add("description");
    openapiRequiredFields.add("valueType");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to DataTypeSummary
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DataTypeSummary.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DataTypeSummary is not found in the empty JSON string", DataTypeSummary.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DataTypeSummary.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("typeValueRange").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `typeValueRange` to be a primitive type in the JSON string but got `%s`", jsonObj.get("typeValueRange").toString()));
      }
      // validate the required field `id`
      ResourceId.validateJsonElement(jsonObj.get("id"));
      if (!jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if (!jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (!jsonObj.get("valueType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `valueType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("valueType").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("acceptableValues") != null && !jsonObj.get("acceptableValues").isJsonNull() && !jsonObj.get("acceptableValues").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `acceptableValues` to be an array in the JSON string but got `%s`", jsonObj.get("acceptableValues").toString()));
      }
      if ((jsonObj.get("unitSchema") != null && !jsonObj.get("unitSchema").isJsonNull()) && !jsonObj.get("unitSchema").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `unitSchema` to be a primitive type in the JSON string but got `%s`", jsonObj.get("unitSchema").toString()));
      }
      if (jsonObj.get("acceptableUnits") != null && !jsonObj.get("acceptableUnits").isJsonNull()) {
        JsonArray jsonArrayacceptableUnits = jsonObj.getAsJsonArray("acceptableUnits");
        if (jsonArrayacceptableUnits != null) {
          // ensure the json data is an array
          if (!jsonObj.get("acceptableUnits").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `acceptableUnits` to be an array in the JSON string but got `%s`", jsonObj.get("acceptableUnits").toString()));
          }

          // validate the optional field `acceptableUnits` (array)
          for (int i = 0; i < jsonArrayacceptableUnits.size(); i++) {
            IUnitDefinitionDto.validateJsonElement(jsonArrayacceptableUnits.get(i));
          };
        }
      }
      // validate the optional field `version`
      if (jsonObj.get("version") != null && !jsonObj.get("version").isJsonNull()) {
        Version.validateJsonElement(jsonObj.get("version"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DataTypeSummary.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DataTypeSummary' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DataTypeSummary> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DataTypeSummary.class));

       return (TypeAdapter<T>) new TypeAdapter<DataTypeSummary>() {
           @Override
           public void write(JsonWriter out, DataTypeSummary value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DataTypeSummary read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of DataTypeSummary given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of DataTypeSummary
  * @throws IOException if the JSON string is invalid with respect to DataTypeSummary
  */
  public static DataTypeSummary fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DataTypeSummary.class);
  }

 /**
  * Convert an instance of DataTypeSummary to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
