/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import com.finbourne.lusid.model.GroupReconciliationDates;
import com.finbourne.lusid.model.GroupReconciliationInstanceId;
import com.finbourne.lusid.model.GroupReconciliationResultStatuses;
import com.finbourne.lusid.model.GroupReconciliationResultTypes;
import com.finbourne.lusid.model.GroupReconciliationReviewStatuses;
import com.finbourne.lusid.model.GroupReconciliationRunDetails;
import com.finbourne.lusid.model.Link;
import com.finbourne.lusid.model.ResourceId;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * GroupReconciliationSummary
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class GroupReconciliationSummary {
  public static final String SERIALIZED_NAME_RUN_DETAILS = "runDetails";
  @SerializedName(SERIALIZED_NAME_RUN_DETAILS)
  private GroupReconciliationRunDetails runDetails;

  public static final String SERIALIZED_NAME_GROUP_RECONCILIATION_DEFINITION_ID = "groupReconciliationDefinitionId";
  @SerializedName(SERIALIZED_NAME_GROUP_RECONCILIATION_DEFINITION_ID)
  private ResourceId groupReconciliationDefinitionId;

  public static final String SERIALIZED_NAME_RECONCILIATION_TYPE = "reconciliationType";
  @SerializedName(SERIALIZED_NAME_RECONCILIATION_TYPE)
  private String reconciliationType;

  public static final String SERIALIZED_NAME_INSTANCE_ID = "instanceId";
  @SerializedName(SERIALIZED_NAME_INSTANCE_ID)
  private GroupReconciliationInstanceId instanceId;

  public static final String SERIALIZED_NAME_DATES_RECONCILED = "datesReconciled";
  @SerializedName(SERIALIZED_NAME_DATES_RECONCILED)
  private GroupReconciliationDates datesReconciled;

  public static final String SERIALIZED_NAME_RECONCILIATION_RUN_AS_AT = "reconciliationRunAsAt";
  @SerializedName(SERIALIZED_NAME_RECONCILIATION_RUN_AS_AT)
  private OffsetDateTime reconciliationRunAsAt;

  public static final String SERIALIZED_NAME_COUNT_COMPARISON_RESULTS = "countComparisonResults";
  @SerializedName(SERIALIZED_NAME_COUNT_COMPARISON_RESULTS)
  private Integer countComparisonResults;

  public static final String SERIALIZED_NAME_LINK_COMPARISON_RESULTS = "linkComparisonResults";
  @SerializedName(SERIALIZED_NAME_LINK_COMPARISON_RESULTS)
  private Link linkComparisonResults;

  public static final String SERIALIZED_NAME_RESULT_TYPES = "resultTypes";
  @SerializedName(SERIALIZED_NAME_RESULT_TYPES)
  private GroupReconciliationResultTypes resultTypes;

  public static final String SERIALIZED_NAME_RESULT_STATUSES = "resultStatuses";
  @SerializedName(SERIALIZED_NAME_RESULT_STATUSES)
  private GroupReconciliationResultStatuses resultStatuses;

  public static final String SERIALIZED_NAME_REVIEW_STATUSES = "reviewStatuses";
  @SerializedName(SERIALIZED_NAME_REVIEW_STATUSES)
  private GroupReconciliationReviewStatuses reviewStatuses;

  public GroupReconciliationSummary() {
  }

  public GroupReconciliationSummary runDetails(GroupReconciliationRunDetails runDetails) {
    
    this.runDetails = runDetails;
    return this;
  }

   /**
   * Get runDetails
   * @return runDetails
  **/
  @jakarta.annotation.Nullable
  public GroupReconciliationRunDetails getRunDetails() {
    return runDetails;
  }


  public void setRunDetails(GroupReconciliationRunDetails runDetails) {
    this.runDetails = runDetails;
  }


  public GroupReconciliationSummary groupReconciliationDefinitionId(ResourceId groupReconciliationDefinitionId) {
    
    this.groupReconciliationDefinitionId = groupReconciliationDefinitionId;
    return this;
  }

   /**
   * Get groupReconciliationDefinitionId
   * @return groupReconciliationDefinitionId
  **/
  @jakarta.annotation.Nullable
  public ResourceId getGroupReconciliationDefinitionId() {
    return groupReconciliationDefinitionId;
  }


  public void setGroupReconciliationDefinitionId(ResourceId groupReconciliationDefinitionId) {
    this.groupReconciliationDefinitionId = groupReconciliationDefinitionId;
  }


  public GroupReconciliationSummary reconciliationType(String reconciliationType) {
    
    this.reconciliationType = reconciliationType;
    return this;
  }

   /**
   * The type of reconciliation to perform. \&quot;Holding\&quot; | \&quot;Transaction\&quot; | \&quot;Valuation\&quot;
   * @return reconciliationType
  **/
  @jakarta.annotation.Nonnull
  public String getReconciliationType() {
    return reconciliationType;
  }


  public void setReconciliationType(String reconciliationType) {
    this.reconciliationType = reconciliationType;
  }


  public GroupReconciliationSummary instanceId(GroupReconciliationInstanceId instanceId) {
    
    this.instanceId = instanceId;
    return this;
  }

   /**
   * Get instanceId
   * @return instanceId
  **/
  @jakarta.annotation.Nonnull
  public GroupReconciliationInstanceId getInstanceId() {
    return instanceId;
  }


  public void setInstanceId(GroupReconciliationInstanceId instanceId) {
    this.instanceId = instanceId;
  }


  public GroupReconciliationSummary datesReconciled(GroupReconciliationDates datesReconciled) {
    
    this.datesReconciled = datesReconciled;
    return this;
  }

   /**
   * Get datesReconciled
   * @return datesReconciled
  **/
  @jakarta.annotation.Nonnull
  public GroupReconciliationDates getDatesReconciled() {
    return datesReconciled;
  }


  public void setDatesReconciled(GroupReconciliationDates datesReconciled) {
    this.datesReconciled = datesReconciled;
  }


  public GroupReconciliationSummary reconciliationRunAsAt(OffsetDateTime reconciliationRunAsAt) {
    
    this.reconciliationRunAsAt = reconciliationRunAsAt;
    return this;
  }

   /**
   * The date and time the reconciliation was run
   * @return reconciliationRunAsAt
  **/
  @jakarta.annotation.Nonnull
  public OffsetDateTime getReconciliationRunAsAt() {
    return reconciliationRunAsAt;
  }


  public void setReconciliationRunAsAt(OffsetDateTime reconciliationRunAsAt) {
    this.reconciliationRunAsAt = reconciliationRunAsAt;
  }


  public GroupReconciliationSummary countComparisonResults(Integer countComparisonResults) {
    
    this.countComparisonResults = countComparisonResults;
    return this;
  }

   /**
   * The total number of comparison results with this InstanceId and ReconciliationType
   * @return countComparisonResults
  **/
  @jakarta.annotation.Nonnull
  public Integer getCountComparisonResults() {
    return countComparisonResults;
  }


  public void setCountComparisonResults(Integer countComparisonResults) {
    this.countComparisonResults = countComparisonResults;
  }


  public GroupReconciliationSummary linkComparisonResults(Link linkComparisonResults) {
    
    this.linkComparisonResults = linkComparisonResults;
    return this;
  }

   /**
   * Get linkComparisonResults
   * @return linkComparisonResults
  **/
  @jakarta.annotation.Nullable
  public Link getLinkComparisonResults() {
    return linkComparisonResults;
  }


  public void setLinkComparisonResults(Link linkComparisonResults) {
    this.linkComparisonResults = linkComparisonResults;
  }


  public GroupReconciliationSummary resultTypes(GroupReconciliationResultTypes resultTypes) {
    
    this.resultTypes = resultTypes;
    return this;
  }

   /**
   * Get resultTypes
   * @return resultTypes
  **/
  @jakarta.annotation.Nullable
  public GroupReconciliationResultTypes getResultTypes() {
    return resultTypes;
  }


  public void setResultTypes(GroupReconciliationResultTypes resultTypes) {
    this.resultTypes = resultTypes;
  }


  public GroupReconciliationSummary resultStatuses(GroupReconciliationResultStatuses resultStatuses) {
    
    this.resultStatuses = resultStatuses;
    return this;
  }

   /**
   * Get resultStatuses
   * @return resultStatuses
  **/
  @jakarta.annotation.Nullable
  public GroupReconciliationResultStatuses getResultStatuses() {
    return resultStatuses;
  }


  public void setResultStatuses(GroupReconciliationResultStatuses resultStatuses) {
    this.resultStatuses = resultStatuses;
  }


  public GroupReconciliationSummary reviewStatuses(GroupReconciliationReviewStatuses reviewStatuses) {
    
    this.reviewStatuses = reviewStatuses;
    return this;
  }

   /**
   * Get reviewStatuses
   * @return reviewStatuses
  **/
  @jakarta.annotation.Nullable
  public GroupReconciliationReviewStatuses getReviewStatuses() {
    return reviewStatuses;
  }


  public void setReviewStatuses(GroupReconciliationReviewStatuses reviewStatuses) {
    this.reviewStatuses = reviewStatuses;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GroupReconciliationSummary groupReconciliationSummary = (GroupReconciliationSummary) o;
    return Objects.equals(this.runDetails, groupReconciliationSummary.runDetails) &&
        Objects.equals(this.groupReconciliationDefinitionId, groupReconciliationSummary.groupReconciliationDefinitionId) &&
        Objects.equals(this.reconciliationType, groupReconciliationSummary.reconciliationType) &&
        Objects.equals(this.instanceId, groupReconciliationSummary.instanceId) &&
        Objects.equals(this.datesReconciled, groupReconciliationSummary.datesReconciled) &&
        Objects.equals(this.reconciliationRunAsAt, groupReconciliationSummary.reconciliationRunAsAt) &&
        Objects.equals(this.countComparisonResults, groupReconciliationSummary.countComparisonResults) &&
        Objects.equals(this.linkComparisonResults, groupReconciliationSummary.linkComparisonResults) &&
        Objects.equals(this.resultTypes, groupReconciliationSummary.resultTypes) &&
        Objects.equals(this.resultStatuses, groupReconciliationSummary.resultStatuses) &&
        Objects.equals(this.reviewStatuses, groupReconciliationSummary.reviewStatuses);
  }

  @Override
  public int hashCode() {
    return Objects.hash(runDetails, groupReconciliationDefinitionId, reconciliationType, instanceId, datesReconciled, reconciliationRunAsAt, countComparisonResults, linkComparisonResults, resultTypes, resultStatuses, reviewStatuses);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GroupReconciliationSummary {\n");
    sb.append("    runDetails: ").append(toIndentedString(runDetails)).append("\n");
    sb.append("    groupReconciliationDefinitionId: ").append(toIndentedString(groupReconciliationDefinitionId)).append("\n");
    sb.append("    reconciliationType: ").append(toIndentedString(reconciliationType)).append("\n");
    sb.append("    instanceId: ").append(toIndentedString(instanceId)).append("\n");
    sb.append("    datesReconciled: ").append(toIndentedString(datesReconciled)).append("\n");
    sb.append("    reconciliationRunAsAt: ").append(toIndentedString(reconciliationRunAsAt)).append("\n");
    sb.append("    countComparisonResults: ").append(toIndentedString(countComparisonResults)).append("\n");
    sb.append("    linkComparisonResults: ").append(toIndentedString(linkComparisonResults)).append("\n");
    sb.append("    resultTypes: ").append(toIndentedString(resultTypes)).append("\n");
    sb.append("    resultStatuses: ").append(toIndentedString(resultStatuses)).append("\n");
    sb.append("    reviewStatuses: ").append(toIndentedString(reviewStatuses)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("runDetails");
    openapiFields.add("groupReconciliationDefinitionId");
    openapiFields.add("reconciliationType");
    openapiFields.add("instanceId");
    openapiFields.add("datesReconciled");
    openapiFields.add("reconciliationRunAsAt");
    openapiFields.add("countComparisonResults");
    openapiFields.add("linkComparisonResults");
    openapiFields.add("resultTypes");
    openapiFields.add("resultStatuses");
    openapiFields.add("reviewStatuses");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("reconciliationType");
    openapiRequiredFields.add("instanceId");
    openapiRequiredFields.add("datesReconciled");
    openapiRequiredFields.add("reconciliationRunAsAt");
    openapiRequiredFields.add("countComparisonResults");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to GroupReconciliationSummary
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GroupReconciliationSummary.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GroupReconciliationSummary is not found in the empty JSON string", GroupReconciliationSummary.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GroupReconciliationSummary.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `runDetails`
      if (jsonObj.get("runDetails") != null && !jsonObj.get("runDetails").isJsonNull()) {
        GroupReconciliationRunDetails.validateJsonElement(jsonObj.get("runDetails"));
      }
      // validate the optional field `groupReconciliationDefinitionId`
      if (jsonObj.get("groupReconciliationDefinitionId") != null && !jsonObj.get("groupReconciliationDefinitionId").isJsonNull()) {
        ResourceId.validateJsonElement(jsonObj.get("groupReconciliationDefinitionId"));
      }
      if (!jsonObj.get("reconciliationType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reconciliationType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reconciliationType").toString()));
      }
      // validate the required field `instanceId`
      GroupReconciliationInstanceId.validateJsonElement(jsonObj.get("instanceId"));
      // validate the required field `datesReconciled`
      GroupReconciliationDates.validateJsonElement(jsonObj.get("datesReconciled"));
      // validate the optional field `linkComparisonResults`
      if (jsonObj.get("linkComparisonResults") != null && !jsonObj.get("linkComparisonResults").isJsonNull()) {
        Link.validateJsonElement(jsonObj.get("linkComparisonResults"));
      }
      // validate the optional field `resultTypes`
      if (jsonObj.get("resultTypes") != null && !jsonObj.get("resultTypes").isJsonNull()) {
        GroupReconciliationResultTypes.validateJsonElement(jsonObj.get("resultTypes"));
      }
      // validate the optional field `resultStatuses`
      if (jsonObj.get("resultStatuses") != null && !jsonObj.get("resultStatuses").isJsonNull()) {
        GroupReconciliationResultStatuses.validateJsonElement(jsonObj.get("resultStatuses"));
      }
      // validate the optional field `reviewStatuses`
      if (jsonObj.get("reviewStatuses") != null && !jsonObj.get("reviewStatuses").isJsonNull()) {
        GroupReconciliationReviewStatuses.validateJsonElement(jsonObj.get("reviewStatuses"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GroupReconciliationSummary.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GroupReconciliationSummary' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GroupReconciliationSummary> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GroupReconciliationSummary.class));

       return (TypeAdapter<T>) new TypeAdapter<GroupReconciliationSummary>() {
           @Override
           public void write(JsonWriter out, GroupReconciliationSummary value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GroupReconciliationSummary read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of GroupReconciliationSummary given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of GroupReconciliationSummary
  * @throws IOException if the JSON string is invalid with respect to GroupReconciliationSummary
  */
  public static GroupReconciliationSummary fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GroupReconciliationSummary.class);
  }

 /**
  * Convert an instance of GroupReconciliationSummary to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
