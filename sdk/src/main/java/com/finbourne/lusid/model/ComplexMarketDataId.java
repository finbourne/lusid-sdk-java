/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * An identifier that uniquely describes an item of complex market data such as an interest rate curve or volatility surface.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ComplexMarketDataId {
  public static final String SERIALIZED_NAME_PROVIDER = "provider";
  @SerializedName(SERIALIZED_NAME_PROVIDER)
  private String provider;

  public static final String SERIALIZED_NAME_PRICE_SOURCE = "priceSource";
  @SerializedName(SERIALIZED_NAME_PRICE_SOURCE)
  private String priceSource;

  public static final String SERIALIZED_NAME_LINEAGE = "lineage";
  @SerializedName(SERIALIZED_NAME_LINEAGE)
  private String lineage;

  public static final String SERIALIZED_NAME_EFFECTIVE_AT = "effectiveAt";
  @SerializedName(SERIALIZED_NAME_EFFECTIVE_AT)
  private String effectiveAt;

  public static final String SERIALIZED_NAME_MARKET_ASSET = "marketAsset";
  @SerializedName(SERIALIZED_NAME_MARKET_ASSET)
  private String marketAsset;

  public ComplexMarketDataId() {
  }

  public ComplexMarketDataId provider(String provider) {
    
    this.provider = provider;
    return this;
  }

   /**
   * The platform or vendor that provided the complex market data, e.g. &#39;DataScope&#39;, &#39;LUSID&#39;, etc.
   * @return provider
  **/
  @javax.annotation.Nonnull
  public String getProvider() {
    return provider;
  }


  public void setProvider(String provider) {
    this.provider = provider;
  }


  public ComplexMarketDataId priceSource(String priceSource) {
    
    this.priceSource = priceSource;
    return this;
  }

   /**
   * The source or originator of the complex market data, e.g. a bank or financial institution.
   * @return priceSource
  **/
  @javax.annotation.Nullable
  public String getPriceSource() {
    return priceSource;
  }


  public void setPriceSource(String priceSource) {
    this.priceSource = priceSource;
  }


  public ComplexMarketDataId lineage(String lineage) {
    
    this.lineage = lineage;
    return this;
  }

   /**
   * This is obsolete. It is not used, it will not be stored, and has no effects.  If you wish to attach a Lineage to your ComplexMarketData,  you should provide it in the optional Lineage field in the ComplexMarketData class.
   * @return lineage
  **/
  @javax.annotation.Nullable
  public String getLineage() {
    return lineage;
  }


  public void setLineage(String lineage) {
    this.lineage = lineage;
  }


  public ComplexMarketDataId effectiveAt(String effectiveAt) {
    
    this.effectiveAt = effectiveAt;
    return this;
  }

   /**
   * The effectiveAt or cut label that this item of complex market data is/was updated/inserted with.
   * @return effectiveAt
  **/
  @javax.annotation.Nullable
  public String getEffectiveAt() {
    return effectiveAt;
  }


  public void setEffectiveAt(String effectiveAt) {
    this.effectiveAt = effectiveAt;
  }


  public ComplexMarketDataId marketAsset(String marketAsset) {
    
    this.marketAsset = marketAsset;
    return this;
  }

   /**
   * The name of the market entity that the document represents
   * @return marketAsset
  **/
  @javax.annotation.Nonnull
  public String getMarketAsset() {
    return marketAsset;
  }


  public void setMarketAsset(String marketAsset) {
    this.marketAsset = marketAsset;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ComplexMarketDataId complexMarketDataId = (ComplexMarketDataId) o;
    return Objects.equals(this.provider, complexMarketDataId.provider) &&
        Objects.equals(this.priceSource, complexMarketDataId.priceSource) &&
        Objects.equals(this.lineage, complexMarketDataId.lineage) &&
        Objects.equals(this.effectiveAt, complexMarketDataId.effectiveAt) &&
        Objects.equals(this.marketAsset, complexMarketDataId.marketAsset);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(provider, priceSource, lineage, effectiveAt, marketAsset);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ComplexMarketDataId {\n");
    sb.append("    provider: ").append(toIndentedString(provider)).append("\n");
    sb.append("    priceSource: ").append(toIndentedString(priceSource)).append("\n");
    sb.append("    lineage: ").append(toIndentedString(lineage)).append("\n");
    sb.append("    effectiveAt: ").append(toIndentedString(effectiveAt)).append("\n");
    sb.append("    marketAsset: ").append(toIndentedString(marketAsset)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("provider");
    openapiFields.add("priceSource");
    openapiFields.add("lineage");
    openapiFields.add("effectiveAt");
    openapiFields.add("marketAsset");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("provider");
    openapiRequiredFields.add("marketAsset");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ComplexMarketDataId
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ComplexMarketDataId.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ComplexMarketDataId is not found in the empty JSON string", ComplexMarketDataId.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ComplexMarketDataId.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ComplexMarketDataId` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ComplexMarketDataId.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("provider").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provider` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provider").toString()));
      }
      if ((jsonObj.get("priceSource") != null && !jsonObj.get("priceSource").isJsonNull()) && !jsonObj.get("priceSource").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `priceSource` to be a primitive type in the JSON string but got `%s`", jsonObj.get("priceSource").toString()));
      }
      if ((jsonObj.get("lineage") != null && !jsonObj.get("lineage").isJsonNull()) && !jsonObj.get("lineage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lineage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lineage").toString()));
      }
      if ((jsonObj.get("effectiveAt") != null && !jsonObj.get("effectiveAt").isJsonNull()) && !jsonObj.get("effectiveAt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `effectiveAt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("effectiveAt").toString()));
      }
      if (!jsonObj.get("marketAsset").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `marketAsset` to be a primitive type in the JSON string but got `%s`", jsonObj.get("marketAsset").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ComplexMarketDataId.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ComplexMarketDataId' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ComplexMarketDataId> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ComplexMarketDataId.class));

       return (TypeAdapter<T>) new TypeAdapter<ComplexMarketDataId>() {
           @Override
           public void write(JsonWriter out, ComplexMarketDataId value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ComplexMarketDataId read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ComplexMarketDataId given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ComplexMarketDataId
  * @throws IOException if the JSON string is invalid with respect to ComplexMarketDataId
  */
  public static ComplexMarketDataId fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ComplexMarketDataId.class);
  }

 /**
  * Convert an instance of ComplexMarketDataId to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
