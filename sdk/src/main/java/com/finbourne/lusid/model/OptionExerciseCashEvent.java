/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import com.finbourne.lusid.model.InstrumentEvent;
import com.finbourne.lusid.model.OptionExerciseElection;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * Event for cash option exercises.
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class OptionExerciseCashEvent extends InstrumentEvent {
  public static final String SERIALIZED_NAME_CASH_FLOW_PER_UNIT = "cashFlowPerUnit";
  @SerializedName(SERIALIZED_NAME_CASH_FLOW_PER_UNIT)
  private java.math.BigDecimal cashFlowPerUnit;

  public static final String SERIALIZED_NAME_EXERCISE_DATE = "exerciseDate";
  @SerializedName(SERIALIZED_NAME_EXERCISE_DATE)
  private OffsetDateTime exerciseDate;

  public static final String SERIALIZED_NAME_EXERCISE_TYPE = "exerciseType";
  @SerializedName(SERIALIZED_NAME_EXERCISE_TYPE)
  private String exerciseType;

  public static final String SERIALIZED_NAME_MATURITY_DATE = "maturityDate";
  @SerializedName(SERIALIZED_NAME_MATURITY_DATE)
  private OffsetDateTime maturityDate;

  public static final String SERIALIZED_NAME_MONEYNESS = "moneyness";
  @SerializedName(SERIALIZED_NAME_MONEYNESS)
  private String moneyness;

  public static final String SERIALIZED_NAME_OPTION_EXERCISE_ELECTIONS = "optionExerciseElections";
  @SerializedName(SERIALIZED_NAME_OPTION_EXERCISE_ELECTIONS)
  private List<OptionExerciseElection> optionExerciseElections;

  public static final String SERIALIZED_NAME_OPTION_TYPE = "optionType";
  @SerializedName(SERIALIZED_NAME_OPTION_TYPE)
  private String optionType;

  public static final String SERIALIZED_NAME_START_DATE = "startDate";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  private OffsetDateTime startDate;

  public static final String SERIALIZED_NAME_STRIKE_CURRENCY = "strikeCurrency";
  @SerializedName(SERIALIZED_NAME_STRIKE_CURRENCY)
  private String strikeCurrency;

  public static final String SERIALIZED_NAME_STRIKE_PER_UNIT = "strikePerUnit";
  @SerializedName(SERIALIZED_NAME_STRIKE_PER_UNIT)
  private java.math.BigDecimal strikePerUnit;

  public static final String SERIALIZED_NAME_UNDERLYING_VALUE_PER_UNIT = "underlyingValuePerUnit";
  @SerializedName(SERIALIZED_NAME_UNDERLYING_VALUE_PER_UNIT)
  private java.math.BigDecimal underlyingValuePerUnit;

  public OptionExerciseCashEvent() {
    // this.instrumentEventType = this.getClass().getSimpleName();
  }

  public OptionExerciseCashEvent cashFlowPerUnit(java.math.BigDecimal cashFlowPerUnit) {
    
    this.cashFlowPerUnit = cashFlowPerUnit;
    return this;
  }

   /**
   * The cashflow per unit
   * @return cashFlowPerUnit
  **/
  @jakarta.annotation.Nullable
  public java.math.BigDecimal getCashFlowPerUnit() {
    return cashFlowPerUnit;
  }


  public void setCashFlowPerUnit(java.math.BigDecimal cashFlowPerUnit) {
    this.cashFlowPerUnit = cashFlowPerUnit;
  }


  public OptionExerciseCashEvent exerciseDate(OffsetDateTime exerciseDate) {
    
    this.exerciseDate = exerciseDate;
    return this;
  }

   /**
   * The exercise date of the option.
   * @return exerciseDate
  **/
  @jakarta.annotation.Nullable
  public OffsetDateTime getExerciseDate() {
    return exerciseDate;
  }


  public void setExerciseDate(OffsetDateTime exerciseDate) {
    this.exerciseDate = exerciseDate;
  }


  public OptionExerciseCashEvent exerciseType(String exerciseType) {
    
    this.exerciseType = exerciseType;
    return this;
  }

   /**
   * The optionality type of the underlying option e.g. American, European.    Supported string (enumeration) values are: [European, Bermudan, American].
   * @return exerciseType
  **/
  @jakarta.annotation.Nonnull
  public String getExerciseType() {
    return exerciseType;
  }


  public void setExerciseType(String exerciseType) {
    this.exerciseType = exerciseType;
  }


  public OptionExerciseCashEvent maturityDate(OffsetDateTime maturityDate) {
    
    this.maturityDate = maturityDate;
    return this;
  }

   /**
   * The maturity date of the option.
   * @return maturityDate
  **/
  @jakarta.annotation.Nonnull
  public OffsetDateTime getMaturityDate() {
    return maturityDate;
  }


  public void setMaturityDate(OffsetDateTime maturityDate) {
    this.maturityDate = maturityDate;
  }


  public OptionExerciseCashEvent moneyness(String moneyness) {
    
    this.moneyness = moneyness;
    return this;
  }

   /**
   * The moneyness of the option e.g. InTheMoney, OutOfTheMoney.    Supported string (enumeration) values are: [InTheMoney, OutOfTheMoney, AtTheMoney].
   * @return moneyness
  **/
  @jakarta.annotation.Nullable
  public String getMoneyness() {
    return moneyness;
  }


  public void setMoneyness(String moneyness) {
    this.moneyness = moneyness;
  }


  public OptionExerciseCashEvent optionExerciseElections(List<OptionExerciseElection> optionExerciseElections) {
    
    this.optionExerciseElections = optionExerciseElections;
    return this;
  }

  public OptionExerciseCashEvent addOptionExerciseElectionsItem(OptionExerciseElection optionExerciseElectionsItem) {
    if (this.optionExerciseElections == null) {
      this.optionExerciseElections = new ArrayList<>();
    }
    this.optionExerciseElections.add(optionExerciseElectionsItem);
    return this;
  }

   /**
   * Option exercise election for this OptionExercisePhysicalEvent.
   * @return optionExerciseElections
  **/
  @jakarta.annotation.Nullable
  public List<OptionExerciseElection> getOptionExerciseElections() {
    return optionExerciseElections;
  }


  public void setOptionExerciseElections(List<OptionExerciseElection> optionExerciseElections) {
    this.optionExerciseElections = optionExerciseElections;
  }


  public OptionExerciseCashEvent optionType(String optionType) {
    
    this.optionType = optionType;
    return this;
  }

   /**
   * Type of optionality that is present e.g. call, put.    Supported string (enumeration) values are: [Call, Put].
   * @return optionType
  **/
  @jakarta.annotation.Nonnull
  public String getOptionType() {
    return optionType;
  }


  public void setOptionType(String optionType) {
    this.optionType = optionType;
  }


  public OptionExerciseCashEvent startDate(OffsetDateTime startDate) {
    
    this.startDate = startDate;
    return this;
  }

   /**
   * The start date of the option.
   * @return startDate
  **/
  @jakarta.annotation.Nonnull
  public OffsetDateTime getStartDate() {
    return startDate;
  }


  public void setStartDate(OffsetDateTime startDate) {
    this.startDate = startDate;
  }


  public OptionExerciseCashEvent strikeCurrency(String strikeCurrency) {
    
    this.strikeCurrency = strikeCurrency;
    return this;
  }

   /**
   * The strike currency of the equity option.
   * @return strikeCurrency
  **/
  @jakarta.annotation.Nonnull
  public String getStrikeCurrency() {
    return strikeCurrency;
  }


  public void setStrikeCurrency(String strikeCurrency) {
    this.strikeCurrency = strikeCurrency;
  }


  public OptionExerciseCashEvent strikePerUnit(java.math.BigDecimal strikePerUnit) {
    
    this.strikePerUnit = strikePerUnit;
    return this;
  }

   /**
   * The strike of the equity option times the number of shares to exchange if exercised.
   * @return strikePerUnit
  **/
  @jakarta.annotation.Nonnull
  public java.math.BigDecimal getStrikePerUnit() {
    return strikePerUnit;
  }


  public void setStrikePerUnit(java.math.BigDecimal strikePerUnit) {
    this.strikePerUnit = strikePerUnit;
  }


  public OptionExerciseCashEvent underlyingValuePerUnit(java.math.BigDecimal underlyingValuePerUnit) {
    
    this.underlyingValuePerUnit = underlyingValuePerUnit;
    return this;
  }

   /**
   * The underlying price times the number of shares to exchange if exercised.
   * @return underlyingValuePerUnit
  **/
  @jakarta.annotation.Nullable
  public java.math.BigDecimal getUnderlyingValuePerUnit() {
    return underlyingValuePerUnit;
  }


  public void setUnderlyingValuePerUnit(java.math.BigDecimal underlyingValuePerUnit) {
    this.underlyingValuePerUnit = underlyingValuePerUnit;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OptionExerciseCashEvent optionExerciseCashEvent = (OptionExerciseCashEvent) o;
    return (this.cashFlowPerUnit.compareTo(optionExerciseCashEvent.getCashFlowPerUnit()) == 0) &&
        Objects.equals(this.exerciseDate, optionExerciseCashEvent.exerciseDate) &&
        Objects.equals(this.exerciseType, optionExerciseCashEvent.exerciseType) &&
        Objects.equals(this.maturityDate, optionExerciseCashEvent.maturityDate) &&
        Objects.equals(this.moneyness, optionExerciseCashEvent.moneyness) &&
        Objects.equals(this.optionExerciseElections, optionExerciseCashEvent.optionExerciseElections) &&
        Objects.equals(this.optionType, optionExerciseCashEvent.optionType) &&
        Objects.equals(this.startDate, optionExerciseCashEvent.startDate) &&
        Objects.equals(this.strikeCurrency, optionExerciseCashEvent.strikeCurrency) &&
        (this.strikePerUnit.compareTo(optionExerciseCashEvent.getStrikePerUnit()) == 0) &&
        (this.underlyingValuePerUnit.compareTo(optionExerciseCashEvent.getUnderlyingValuePerUnit()) == 0) &&
        super.equals(o);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(cashFlowPerUnit, exerciseDate, exerciseType, maturityDate, moneyness, optionExerciseElections, optionType, startDate, strikeCurrency, strikePerUnit, underlyingValuePerUnit, super.hashCode());
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OptionExerciseCashEvent {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    cashFlowPerUnit: ").append(toIndentedString(cashFlowPerUnit)).append("\n");
    sb.append("    exerciseDate: ").append(toIndentedString(exerciseDate)).append("\n");
    sb.append("    exerciseType: ").append(toIndentedString(exerciseType)).append("\n");
    sb.append("    maturityDate: ").append(toIndentedString(maturityDate)).append("\n");
    sb.append("    moneyness: ").append(toIndentedString(moneyness)).append("\n");
    sb.append("    optionExerciseElections: ").append(toIndentedString(optionExerciseElections)).append("\n");
    sb.append("    optionType: ").append(toIndentedString(optionType)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    strikeCurrency: ").append(toIndentedString(strikeCurrency)).append("\n");
    sb.append("    strikePerUnit: ").append(toIndentedString(strikePerUnit)).append("\n");
    sb.append("    underlyingValuePerUnit: ").append(toIndentedString(underlyingValuePerUnit)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("instrumentEventType");
    openapiFields.add("cashFlowPerUnit");
    openapiFields.add("exerciseDate");
    openapiFields.add("exerciseType");
    openapiFields.add("maturityDate");
    openapiFields.add("moneyness");
    openapiFields.add("optionExerciseElections");
    openapiFields.add("optionType");
    openapiFields.add("startDate");
    openapiFields.add("strikeCurrency");
    openapiFields.add("strikePerUnit");
    openapiFields.add("underlyingValuePerUnit");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("exerciseType");
    openapiRequiredFields.add("maturityDate");
    openapiRequiredFields.add("optionType");
    openapiRequiredFields.add("startDate");
    openapiRequiredFields.add("strikeCurrency");
    openapiRequiredFields.add("strikePerUnit");
    openapiRequiredFields.add("instrumentEventType");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to OptionExerciseCashEvent
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OptionExerciseCashEvent.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OptionExerciseCashEvent is not found in the empty JSON string", OptionExerciseCashEvent.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : OptionExerciseCashEvent.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OptionExerciseCashEvent.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OptionExerciseCashEvent' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OptionExerciseCashEvent> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OptionExerciseCashEvent.class));

       return (TypeAdapter<T>) new TypeAdapter<OptionExerciseCashEvent>() {
           @Override
           public void write(JsonWriter out, OptionExerciseCashEvent value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OptionExerciseCashEvent read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of OptionExerciseCashEvent given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of OptionExerciseCashEvent
  * @throws IOException if the JSON string is invalid with respect to OptionExerciseCashEvent
  */
  public static OptionExerciseCashEvent fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OptionExerciseCashEvent.class);
  }

 /**
  * Convert an instance of OptionExerciseCashEvent to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
