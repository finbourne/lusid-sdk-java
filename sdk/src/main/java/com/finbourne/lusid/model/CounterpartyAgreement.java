/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import java.util.Arrays;
import com.finbourne.lusid.model.CounterpartySignatory;
import com.finbourne.lusid.model.ResourceId;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * Represents the legal agreement between two parties engaged in an OTC transaction.  A typical example would be a 2002 ISDA Master Agreement, signed by two legal entities on a given date.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class CounterpartyAgreement {
  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_AGREEMENT_TYPE = "agreementType";
  @SerializedName(SERIALIZED_NAME_AGREEMENT_TYPE)
  private String agreementType;

  public static final String SERIALIZED_NAME_COUNTERPARTY_SIGNATORY = "counterpartySignatory";
  @SerializedName(SERIALIZED_NAME_COUNTERPARTY_SIGNATORY)
  private CounterpartySignatory counterpartySignatory;

  public static final String SERIALIZED_NAME_DATED_AS_OF = "datedAsOf";
  @SerializedName(SERIALIZED_NAME_DATED_AS_OF)
  private OffsetDateTime datedAsOf;

  public static final String SERIALIZED_NAME_CREDIT_SUPPORT_ANNEX_ID = "creditSupportAnnexId";
  @SerializedName(SERIALIZED_NAME_CREDIT_SUPPORT_ANNEX_ID)
  private ResourceId creditSupportAnnexId;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private ResourceId id;

  public CounterpartyAgreement() {
  }

  public CounterpartyAgreement displayName(String displayName) {
    
    this.displayName = displayName;
    return this;
  }

   /**
   * A user-defined display label for the Counterparty Agreement.
   * @return displayName
  **/
  @javax.annotation.Nonnull
  public String getDisplayName() {
    return displayName;
  }


  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public CounterpartyAgreement agreementType(String agreementType) {
    
    this.agreementType = agreementType;
    return this;
  }

   /**
   * A user-defined field to capture the type of agreement this represents. Examples might be \&quot;ISDA 2002 Master Agreement\&quot; or \&quot;ISDA 1992 Master Agreement\&quot;.
   * @return agreementType
  **/
  @javax.annotation.Nonnull
  public String getAgreementType() {
    return agreementType;
  }


  public void setAgreementType(String agreementType) {
    this.agreementType = agreementType;
  }


  public CounterpartyAgreement counterpartySignatory(CounterpartySignatory counterpartySignatory) {
    
    this.counterpartySignatory = counterpartySignatory;
    return this;
  }

   /**
   * Get counterpartySignatory
   * @return counterpartySignatory
  **/
  @javax.annotation.Nonnull
  public CounterpartySignatory getCounterpartySignatory() {
    return counterpartySignatory;
  }


  public void setCounterpartySignatory(CounterpartySignatory counterpartySignatory) {
    this.counterpartySignatory = counterpartySignatory;
  }


  public CounterpartyAgreement datedAsOf(OffsetDateTime datedAsOf) {
    
    this.datedAsOf = datedAsOf;
    return this;
  }

   /**
   * The date on which the CounterpartyAgreement was signed by both parties.
   * @return datedAsOf
  **/
  @javax.annotation.Nonnull
  public OffsetDateTime getDatedAsOf() {
    return datedAsOf;
  }


  public void setDatedAsOf(OffsetDateTime datedAsOf) {
    this.datedAsOf = datedAsOf;
  }


  public CounterpartyAgreement creditSupportAnnexId(ResourceId creditSupportAnnexId) {
    
    this.creditSupportAnnexId = creditSupportAnnexId;
    return this;
  }

   /**
   * Get creditSupportAnnexId
   * @return creditSupportAnnexId
  **/
  @javax.annotation.Nonnull
  public ResourceId getCreditSupportAnnexId() {
    return creditSupportAnnexId;
  }


  public void setCreditSupportAnnexId(ResourceId creditSupportAnnexId) {
    this.creditSupportAnnexId = creditSupportAnnexId;
  }


  public CounterpartyAgreement id(ResourceId id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nonnull
  public ResourceId getId() {
    return id;
  }


  public void setId(ResourceId id) {
    this.id = id;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CounterpartyAgreement counterpartyAgreement = (CounterpartyAgreement) o;
    return Objects.equals(this.displayName, counterpartyAgreement.displayName) &&
        Objects.equals(this.agreementType, counterpartyAgreement.agreementType) &&
        Objects.equals(this.counterpartySignatory, counterpartyAgreement.counterpartySignatory) &&
        Objects.equals(this.datedAsOf, counterpartyAgreement.datedAsOf) &&
        Objects.equals(this.creditSupportAnnexId, counterpartyAgreement.creditSupportAnnexId) &&
        Objects.equals(this.id, counterpartyAgreement.id);
  }

  @Override
  public int hashCode() {
    return Objects.hash(displayName, agreementType, counterpartySignatory, datedAsOf, creditSupportAnnexId, id);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CounterpartyAgreement {\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    agreementType: ").append(toIndentedString(agreementType)).append("\n");
    sb.append("    counterpartySignatory: ").append(toIndentedString(counterpartySignatory)).append("\n");
    sb.append("    datedAsOf: ").append(toIndentedString(datedAsOf)).append("\n");
    sb.append("    creditSupportAnnexId: ").append(toIndentedString(creditSupportAnnexId)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("displayName");
    openapiFields.add("agreementType");
    openapiFields.add("counterpartySignatory");
    openapiFields.add("datedAsOf");
    openapiFields.add("creditSupportAnnexId");
    openapiFields.add("id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("displayName");
    openapiRequiredFields.add("agreementType");
    openapiRequiredFields.add("counterpartySignatory");
    openapiRequiredFields.add("datedAsOf");
    openapiRequiredFields.add("creditSupportAnnexId");
    openapiRequiredFields.add("id");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CounterpartyAgreement
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!CounterpartyAgreement.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CounterpartyAgreement is not found in the empty JSON string", CounterpartyAgreement.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!CounterpartyAgreement.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CounterpartyAgreement` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CounterpartyAgreement.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if (!jsonObj.get("agreementType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `agreementType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("agreementType").toString()));
      }
      // validate the required field `counterpartySignatory`
      CounterpartySignatory.validateJsonObject(jsonObj.getAsJsonObject("counterpartySignatory"));
      // validate the required field `creditSupportAnnexId`
      ResourceId.validateJsonObject(jsonObj.getAsJsonObject("creditSupportAnnexId"));
      // validate the required field `id`
      ResourceId.validateJsonObject(jsonObj.getAsJsonObject("id"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CounterpartyAgreement.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CounterpartyAgreement' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CounterpartyAgreement> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CounterpartyAgreement.class));

       return (TypeAdapter<T>) new TypeAdapter<CounterpartyAgreement>() {
           @Override
           public void write(JsonWriter out, CounterpartyAgreement value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CounterpartyAgreement read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CounterpartyAgreement given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CounterpartyAgreement
  * @throws IOException if the JSON string is invalid with respect to CounterpartyAgreement
  */
  public static CounterpartyAgreement fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CounterpartyAgreement.class);
  }

 /**
  * Convert an instance of CounterpartyAgreement to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
