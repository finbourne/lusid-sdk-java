/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import com.finbourne.lusid.model.PerpetualProperty;
import com.finbourne.lusid.model.SetTransactionConfigurationAlias;
import com.finbourne.lusid.model.TransactionConfigurationMovementDataRequest;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * SetTransactionConfigurationSourceRequest
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class SetTransactionConfigurationSourceRequest {
  public static final String SERIALIZED_NAME_ALIASES = "aliases";
  @SerializedName(SERIALIZED_NAME_ALIASES)
  private List<SetTransactionConfigurationAlias> aliases = new ArrayList<>();

  public static final String SERIALIZED_NAME_MOVEMENTS = "movements";
  @SerializedName(SERIALIZED_NAME_MOVEMENTS)
  private List<TransactionConfigurationMovementDataRequest> movements = new ArrayList<>();

  public static final String SERIALIZED_NAME_PROPERTIES = "properties";
  @SerializedName(SERIALIZED_NAME_PROPERTIES)
  private Map<String, PerpetualProperty> properties;

  public SetTransactionConfigurationSourceRequest() {
  }

  public SetTransactionConfigurationSourceRequest aliases(List<SetTransactionConfigurationAlias> aliases) {
    
    this.aliases = aliases;
    return this;
  }

  public SetTransactionConfigurationSourceRequest addAliasesItem(SetTransactionConfigurationAlias aliasesItem) {
    if (this.aliases == null) {
      this.aliases = new ArrayList<>();
    }
    this.aliases.add(aliasesItem);
    return this;
  }

   /**
   * Get aliases
   * @return aliases
  **/
  @jakarta.annotation.Nonnull
  public List<SetTransactionConfigurationAlias> getAliases() {
    return aliases;
  }


  public void setAliases(List<SetTransactionConfigurationAlias> aliases) {
    this.aliases = aliases;
  }


  public SetTransactionConfigurationSourceRequest movements(List<TransactionConfigurationMovementDataRequest> movements) {
    
    this.movements = movements;
    return this;
  }

  public SetTransactionConfigurationSourceRequest addMovementsItem(TransactionConfigurationMovementDataRequest movementsItem) {
    if (this.movements == null) {
      this.movements = new ArrayList<>();
    }
    this.movements.add(movementsItem);
    return this;
  }

   /**
   * Get movements
   * @return movements
  **/
  @jakarta.annotation.Nonnull
  public List<TransactionConfigurationMovementDataRequest> getMovements() {
    return movements;
  }


  public void setMovements(List<TransactionConfigurationMovementDataRequest> movements) {
    this.movements = movements;
  }


  public SetTransactionConfigurationSourceRequest properties(Map<String, PerpetualProperty> properties) {
    
    this.properties = properties;
    return this;
  }

  public SetTransactionConfigurationSourceRequest putPropertiesItem(String key, PerpetualProperty propertiesItem) {
    if (this.properties == null) {
      this.properties = new HashMap<>();
    }
    this.properties.put(key, propertiesItem);
    return this;
  }

   /**
   * Get properties
   * @return properties
  **/
  @jakarta.annotation.Nullable
  public Map<String, PerpetualProperty> getProperties() {
    return properties;
  }


  public void setProperties(Map<String, PerpetualProperty> properties) {
    this.properties = properties;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SetTransactionConfigurationSourceRequest setTransactionConfigurationSourceRequest = (SetTransactionConfigurationSourceRequest) o;
    return Objects.equals(this.aliases, setTransactionConfigurationSourceRequest.aliases) &&
        Objects.equals(this.movements, setTransactionConfigurationSourceRequest.movements) &&
        Objects.equals(this.properties, setTransactionConfigurationSourceRequest.properties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(aliases, movements, properties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SetTransactionConfigurationSourceRequest {\n");
    sb.append("    aliases: ").append(toIndentedString(aliases)).append("\n");
    sb.append("    movements: ").append(toIndentedString(movements)).append("\n");
    sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("aliases");
    openapiFields.add("movements");
    openapiFields.add("properties");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("aliases");
    openapiRequiredFields.add("movements");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to SetTransactionConfigurationSourceRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!SetTransactionConfigurationSourceRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SetTransactionConfigurationSourceRequest is not found in the empty JSON string", SetTransactionConfigurationSourceRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!SetTransactionConfigurationSourceRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SetTransactionConfigurationSourceRequest` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SetTransactionConfigurationSourceRequest.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // ensure the json data is an array
      if (!jsonObj.get("aliases").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `aliases` to be an array in the JSON string but got `%s`", jsonObj.get("aliases").toString()));
      }

      JsonArray jsonArrayaliases = jsonObj.getAsJsonArray("aliases");
      // validate the required field `aliases` (array)
      for (int i = 0; i < jsonArrayaliases.size(); i++) {
        SetTransactionConfigurationAlias.validateJsonObject(jsonArrayaliases.get(i).getAsJsonObject());
      };
      // ensure the json data is an array
      if (!jsonObj.get("movements").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `movements` to be an array in the JSON string but got `%s`", jsonObj.get("movements").toString()));
      }

      JsonArray jsonArraymovements = jsonObj.getAsJsonArray("movements");
      // validate the required field `movements` (array)
      for (int i = 0; i < jsonArraymovements.size(); i++) {
        TransactionConfigurationMovementDataRequest.validateJsonObject(jsonArraymovements.get(i).getAsJsonObject());
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SetTransactionConfigurationSourceRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SetTransactionConfigurationSourceRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SetTransactionConfigurationSourceRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SetTransactionConfigurationSourceRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<SetTransactionConfigurationSourceRequest>() {
           @Override
           public void write(JsonWriter out, SetTransactionConfigurationSourceRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SetTransactionConfigurationSourceRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of SetTransactionConfigurationSourceRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of SetTransactionConfigurationSourceRequest
  * @throws IOException if the JSON string is invalid with respect to SetTransactionConfigurationSourceRequest
  */
  public static SetTransactionConfigurationSourceRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SetTransactionConfigurationSourceRequest.class);
  }

 /**
  * Convert an instance of SetTransactionConfigurationSourceRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
