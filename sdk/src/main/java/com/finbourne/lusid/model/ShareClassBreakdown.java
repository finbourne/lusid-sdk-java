/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import com.finbourne.lusid.model.FeeAccrual;
import com.finbourne.lusid.model.MultiCurrencyAmounts;
import com.finbourne.lusid.model.PreviousShareClassBreakdown;
import com.finbourne.lusid.model.ShareClassAmount;
import com.finbourne.lusid.model.ShareClassDealingBreakdown;
import com.finbourne.lusid.model.ShareClassPnlBreakdown;
import com.finbourne.lusid.model.UnitisationData;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * The Valuation Point Data for a Share Class on a specified date.
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ShareClassBreakdown {
  public static final String SERIALIZED_NAME_BACK_OUT = "backOut";
  @SerializedName(SERIALIZED_NAME_BACK_OUT)
  private Map<String, ShareClassAmount> backOut = new HashMap<>();

  public static final String SERIALIZED_NAME_DEALING = "dealing";
  @SerializedName(SERIALIZED_NAME_DEALING)
  private ShareClassDealingBreakdown dealing;

  public static final String SERIALIZED_NAME_PN_L = "pnL";
  @SerializedName(SERIALIZED_NAME_PN_L)
  private ShareClassPnlBreakdown pnL;

  public static final String SERIALIZED_NAME_GAV = "gav";
  @SerializedName(SERIALIZED_NAME_GAV)
  private MultiCurrencyAmounts gav;

  public static final String SERIALIZED_NAME_FEES = "fees";
  @SerializedName(SERIALIZED_NAME_FEES)
  private Map<String, FeeAccrual> fees = new HashMap<>();

  public static final String SERIALIZED_NAME_NAV = "nav";
  @SerializedName(SERIALIZED_NAME_NAV)
  private MultiCurrencyAmounts nav;

  public static final String SERIALIZED_NAME_UNITISATION = "unitisation";
  @SerializedName(SERIALIZED_NAME_UNITISATION)
  private UnitisationData unitisation;

  public static final String SERIALIZED_NAME_MISCELLANEOUS = "miscellaneous";
  @SerializedName(SERIALIZED_NAME_MISCELLANEOUS)
  private Map<String, ShareClassAmount> miscellaneous;

  public static final String SERIALIZED_NAME_SHARE_CLASS_TO_FUND_FX_RATE = "shareClassToFundFxRate";
  @SerializedName(SERIALIZED_NAME_SHARE_CLASS_TO_FUND_FX_RATE)
  private java.math.BigDecimal shareClassToFundFxRate;

  public static final String SERIALIZED_NAME_CAPITAL_RATIO = "capitalRatio";
  @SerializedName(SERIALIZED_NAME_CAPITAL_RATIO)
  private java.math.BigDecimal capitalRatio;

  public static final String SERIALIZED_NAME_PREVIOUS_SHARE_CLASS_BREAKDOWN = "previousShareClassBreakdown";
  @SerializedName(SERIALIZED_NAME_PREVIOUS_SHARE_CLASS_BREAKDOWN)
  private PreviousShareClassBreakdown previousShareClassBreakdown;

  public ShareClassBreakdown() {
  }

  public ShareClassBreakdown backOut(Map<String, ShareClassAmount> backOut) {
    
    this.backOut = backOut;
    return this;
  }

  public ShareClassBreakdown putBackOutItem(String key, ShareClassAmount backOutItem) {
    if (this.backOut == null) {
      this.backOut = new HashMap<>();
    }
    this.backOut.put(key, backOutItem);
    return this;
  }

   /**
   * Bucket of detail for the Valuation Point where data points have been &#39;backed out&#39;.
   * @return backOut
  **/
  @jakarta.annotation.Nonnull
  public Map<String, ShareClassAmount> getBackOut() {
    return backOut;
  }


  public void setBackOut(Map<String, ShareClassAmount> backOut) {
    this.backOut = backOut;
  }


  public ShareClassBreakdown dealing(ShareClassDealingBreakdown dealing) {
    
    this.dealing = dealing;
    return this;
  }

   /**
   * Get dealing
   * @return dealing
  **/
  @jakarta.annotation.Nonnull
  public ShareClassDealingBreakdown getDealing() {
    return dealing;
  }


  public void setDealing(ShareClassDealingBreakdown dealing) {
    this.dealing = dealing;
  }


  public ShareClassBreakdown pnL(ShareClassPnlBreakdown pnL) {
    
    this.pnL = pnL;
    return this;
  }

   /**
   * Get pnL
   * @return pnL
  **/
  @jakarta.annotation.Nonnull
  public ShareClassPnlBreakdown getPnL() {
    return pnL;
  }


  public void setPnL(ShareClassPnlBreakdown pnL) {
    this.pnL = pnL;
  }


  public ShareClassBreakdown gav(MultiCurrencyAmounts gav) {
    
    this.gav = gav;
    return this;
  }

   /**
   * Get gav
   * @return gav
  **/
  @jakarta.annotation.Nonnull
  public MultiCurrencyAmounts getGav() {
    return gav;
  }


  public void setGav(MultiCurrencyAmounts gav) {
    this.gav = gav;
  }


  public ShareClassBreakdown fees(Map<String, FeeAccrual> fees) {
    
    this.fees = fees;
    return this;
  }

  public ShareClassBreakdown putFeesItem(String key, FeeAccrual feesItem) {
    if (this.fees == null) {
      this.fees = new HashMap<>();
    }
    this.fees.put(key, feesItem);
    return this;
  }

   /**
   * Bucket of detail for any &#39;Fees&#39; that have been charged in the selected period.
   * @return fees
  **/
  @jakarta.annotation.Nonnull
  public Map<String, FeeAccrual> getFees() {
    return fees;
  }


  public void setFees(Map<String, FeeAccrual> fees) {
    this.fees = fees;
  }


  public ShareClassBreakdown nav(MultiCurrencyAmounts nav) {
    
    this.nav = nav;
    return this;
  }

   /**
   * Get nav
   * @return nav
  **/
  @jakarta.annotation.Nonnull
  public MultiCurrencyAmounts getNav() {
    return nav;
  }


  public void setNav(MultiCurrencyAmounts nav) {
    this.nav = nav;
  }


  public ShareClassBreakdown unitisation(UnitisationData unitisation) {
    
    this.unitisation = unitisation;
    return this;
  }

   /**
   * Get unitisation
   * @return unitisation
  **/
  @jakarta.annotation.Nullable
  public UnitisationData getUnitisation() {
    return unitisation;
  }


  public void setUnitisation(UnitisationData unitisation) {
    this.unitisation = unitisation;
  }


  public ShareClassBreakdown miscellaneous(Map<String, ShareClassAmount> miscellaneous) {
    
    this.miscellaneous = miscellaneous;
    return this;
  }

  public ShareClassBreakdown putMiscellaneousItem(String key, ShareClassAmount miscellaneousItem) {
    if (this.miscellaneous == null) {
      this.miscellaneous = new HashMap<>();
    }
    this.miscellaneous.put(key, miscellaneousItem);
    return this;
  }

   /**
   * Not used directly by the LUSID engines but serves as a holding area for any custom derived data points that may be useful in, for example, fee calculations).
   * @return miscellaneous
  **/
  @jakarta.annotation.Nullable
  public Map<String, ShareClassAmount> getMiscellaneous() {
    return miscellaneous;
  }


  public void setMiscellaneous(Map<String, ShareClassAmount> miscellaneous) {
    this.miscellaneous = miscellaneous;
  }


  public ShareClassBreakdown shareClassToFundFxRate(java.math.BigDecimal shareClassToFundFxRate) {
    
    this.shareClassToFundFxRate = shareClassToFundFxRate;
    return this;
  }

   /**
   * The fx rate from the Share Class currency to the fund currency at this valuation point.
   * @return shareClassToFundFxRate
  **/
  @jakarta.annotation.Nonnull
  public java.math.BigDecimal getShareClassToFundFxRate() {
    return shareClassToFundFxRate;
  }


  public void setShareClassToFundFxRate(java.math.BigDecimal shareClassToFundFxRate) {
    this.shareClassToFundFxRate = shareClassToFundFxRate;
  }


  public ShareClassBreakdown capitalRatio(java.math.BigDecimal capitalRatio) {
    
    this.capitalRatio = capitalRatio;
    return this;
  }

   /**
   * The proportion of the fund&#39;s adjusted beginning equity (ie: the sum of the previous NAV and the net dealing) that is invested in the share class.
   * @return capitalRatio
  **/
  @jakarta.annotation.Nonnull
  public java.math.BigDecimal getCapitalRatio() {
    return capitalRatio;
  }


  public void setCapitalRatio(java.math.BigDecimal capitalRatio) {
    this.capitalRatio = capitalRatio;
  }


  public ShareClassBreakdown previousShareClassBreakdown(PreviousShareClassBreakdown previousShareClassBreakdown) {
    
    this.previousShareClassBreakdown = previousShareClassBreakdown;
    return this;
  }

   /**
   * Get previousShareClassBreakdown
   * @return previousShareClassBreakdown
  **/
  @jakarta.annotation.Nonnull
  public PreviousShareClassBreakdown getPreviousShareClassBreakdown() {
    return previousShareClassBreakdown;
  }


  public void setPreviousShareClassBreakdown(PreviousShareClassBreakdown previousShareClassBreakdown) {
    this.previousShareClassBreakdown = previousShareClassBreakdown;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ShareClassBreakdown shareClassBreakdown = (ShareClassBreakdown) o;
    return Objects.equals(this.backOut, shareClassBreakdown.backOut) &&
        Objects.equals(this.dealing, shareClassBreakdown.dealing) &&
        Objects.equals(this.pnL, shareClassBreakdown.pnL) &&
        Objects.equals(this.gav, shareClassBreakdown.gav) &&
        Objects.equals(this.fees, shareClassBreakdown.fees) &&
        Objects.equals(this.nav, shareClassBreakdown.nav) &&
        Objects.equals(this.unitisation, shareClassBreakdown.unitisation) &&
        Objects.equals(this.miscellaneous, shareClassBreakdown.miscellaneous) &&
        (this.shareClassToFundFxRate.compareTo(shareClassBreakdown.getShareClassToFundFxRate()) == 0) &&
        (this.capitalRatio.compareTo(shareClassBreakdown.getCapitalRatio()) == 0) &&
        Objects.equals(this.previousShareClassBreakdown, shareClassBreakdown.previousShareClassBreakdown);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(backOut, dealing, pnL, gav, fees, nav, unitisation, miscellaneous, shareClassToFundFxRate, capitalRatio, previousShareClassBreakdown);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ShareClassBreakdown {\n");
    sb.append("    backOut: ").append(toIndentedString(backOut)).append("\n");
    sb.append("    dealing: ").append(toIndentedString(dealing)).append("\n");
    sb.append("    pnL: ").append(toIndentedString(pnL)).append("\n");
    sb.append("    gav: ").append(toIndentedString(gav)).append("\n");
    sb.append("    fees: ").append(toIndentedString(fees)).append("\n");
    sb.append("    nav: ").append(toIndentedString(nav)).append("\n");
    sb.append("    unitisation: ").append(toIndentedString(unitisation)).append("\n");
    sb.append("    miscellaneous: ").append(toIndentedString(miscellaneous)).append("\n");
    sb.append("    shareClassToFundFxRate: ").append(toIndentedString(shareClassToFundFxRate)).append("\n");
    sb.append("    capitalRatio: ").append(toIndentedString(capitalRatio)).append("\n");
    sb.append("    previousShareClassBreakdown: ").append(toIndentedString(previousShareClassBreakdown)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("backOut");
    openapiFields.add("dealing");
    openapiFields.add("pnL");
    openapiFields.add("gav");
    openapiFields.add("fees");
    openapiFields.add("nav");
    openapiFields.add("unitisation");
    openapiFields.add("miscellaneous");
    openapiFields.add("shareClassToFundFxRate");
    openapiFields.add("capitalRatio");
    openapiFields.add("previousShareClassBreakdown");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("backOut");
    openapiRequiredFields.add("dealing");
    openapiRequiredFields.add("pnL");
    openapiRequiredFields.add("gav");
    openapiRequiredFields.add("fees");
    openapiRequiredFields.add("nav");
    openapiRequiredFields.add("shareClassToFundFxRate");
    openapiRequiredFields.add("capitalRatio");
    openapiRequiredFields.add("previousShareClassBreakdown");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ShareClassBreakdown
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ShareClassBreakdown.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ShareClassBreakdown is not found in the empty JSON string", ShareClassBreakdown.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ShareClassBreakdown.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `dealing`
      ShareClassDealingBreakdown.validateJsonElement(jsonObj.get("dealing"));
      // validate the required field `pnL`
      ShareClassPnlBreakdown.validateJsonElement(jsonObj.get("pnL"));
      // validate the required field `gav`
      MultiCurrencyAmounts.validateJsonElement(jsonObj.get("gav"));
      // validate the required field `nav`
      MultiCurrencyAmounts.validateJsonElement(jsonObj.get("nav"));
      // validate the optional field `unitisation`
      if (jsonObj.get("unitisation") != null && !jsonObj.get("unitisation").isJsonNull()) {
        UnitisationData.validateJsonElement(jsonObj.get("unitisation"));
      }
      // validate the required field `previousShareClassBreakdown`
      PreviousShareClassBreakdown.validateJsonElement(jsonObj.get("previousShareClassBreakdown"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ShareClassBreakdown.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ShareClassBreakdown' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ShareClassBreakdown> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ShareClassBreakdown.class));

       return (TypeAdapter<T>) new TypeAdapter<ShareClassBreakdown>() {
           @Override
           public void write(JsonWriter out, ShareClassBreakdown value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ShareClassBreakdown read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ShareClassBreakdown given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ShareClassBreakdown
  * @throws IOException if the JSON string is invalid with respect to ShareClassBreakdown
  */
  public static ShareClassBreakdown fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ShareClassBreakdown.class);
  }

 /**
  * Convert an instance of ShareClassBreakdown to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
