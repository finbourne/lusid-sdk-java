/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import com.finbourne.lusid.model.InterestRateSwap;
import com.finbourne.lusid.model.LusidInstrument;
import com.finbourne.lusid.model.Premium;
import com.finbourne.lusid.model.TimeZoneConventions;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * LUSID representation of an Interest Rate Swaption.
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class InterestRateSwaption extends LusidInstrument {
  public static final String SERIALIZED_NAME_START_DATE = "startDate";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  private OffsetDateTime startDate;

  public static final String SERIALIZED_NAME_PAY_OR_RECEIVE_FIXED = "payOrReceiveFixed";
  @SerializedName(SERIALIZED_NAME_PAY_OR_RECEIVE_FIXED)
  private String payOrReceiveFixed;

  public static final String SERIALIZED_NAME_PREMIUM = "premium";
  @SerializedName(SERIALIZED_NAME_PREMIUM)
  private Premium premium;

  public static final String SERIALIZED_NAME_DELIVERY_METHOD = "deliveryMethod";
  @SerializedName(SERIALIZED_NAME_DELIVERY_METHOD)
  private String deliveryMethod;

  public static final String SERIALIZED_NAME_SWAP = "swap";
  @SerializedName(SERIALIZED_NAME_SWAP)
  private InterestRateSwap swap;

  public static final String SERIALIZED_NAME_TIME_ZONE_CONVENTIONS = "timeZoneConventions";
  @SerializedName(SERIALIZED_NAME_TIME_ZONE_CONVENTIONS)
  private TimeZoneConventions timeZoneConventions;

  public static final String SERIALIZED_NAME_UNDERLYING = "underlying";
  @SerializedName(SERIALIZED_NAME_UNDERLYING)
  private LusidInstrument underlying;

  public static final String SERIALIZED_NAME_DELIVERY_DAYS = "deliveryDays";
  @SerializedName(SERIALIZED_NAME_DELIVERY_DAYS)
  private Integer deliveryDays;

  public static final String SERIALIZED_NAME_BUSINESS_DAY_CONVENTION = "businessDayConvention";
  @SerializedName(SERIALIZED_NAME_BUSINESS_DAY_CONVENTION)
  private String businessDayConvention;

  public static final String SERIALIZED_NAME_SETTLEMENT_CALENDARS = "settlementCalendars";
  @SerializedName(SERIALIZED_NAME_SETTLEMENT_CALENDARS)
  private List<String> settlementCalendars;

  public InterestRateSwaption() {
    // this.instrumentType = this.getClass().getSimpleName();
  }

  public InterestRateSwaption startDate(OffsetDateTime startDate) {
    
    this.startDate = startDate;
    return this;
  }

   /**
   * The start date of the instrument. This is normally synonymous with the trade-date.
   * @return startDate
  **/
  @jakarta.annotation.Nonnull
  public OffsetDateTime getStartDate() {
    return startDate;
  }


  public void setStartDate(OffsetDateTime startDate) {
    this.startDate = startDate;
  }


  public InterestRateSwaption payOrReceiveFixed(String payOrReceiveFixed) {
    
    this.payOrReceiveFixed = payOrReceiveFixed;
    return this;
  }

   /**
   * Pay or Receive the fixed leg of the underlying swap.    Supported string (enumeration) values are: [Pay, Receive].
   * @return payOrReceiveFixed
  **/
  @jakarta.annotation.Nonnull
  public String getPayOrReceiveFixed() {
    return payOrReceiveFixed;
  }


  public void setPayOrReceiveFixed(String payOrReceiveFixed) {
    this.payOrReceiveFixed = payOrReceiveFixed;
  }


  public InterestRateSwaption premium(Premium premium) {
    
    this.premium = premium;
    return this;
  }

   /**
   * Get premium
   * @return premium
  **/
  @jakarta.annotation.Nullable
  public Premium getPremium() {
    return premium;
  }


  public void setPremium(Premium premium) {
    this.premium = premium;
  }


  public InterestRateSwaption deliveryMethod(String deliveryMethod) {
    
    this.deliveryMethod = deliveryMethod;
    return this;
  }

   /**
   * How does the option settle    Supported string (enumeration) values are: [Cash, Physical].
   * @return deliveryMethod
  **/
  @jakarta.annotation.Nonnull
  public String getDeliveryMethod() {
    return deliveryMethod;
  }


  public void setDeliveryMethod(String deliveryMethod) {
    this.deliveryMethod = deliveryMethod;
  }


  public InterestRateSwaption swap(InterestRateSwap swap) {
    
    this.swap = swap;
    return this;
  }

   /**
   * Get swap
   * @return swap
  **/
  @jakarta.annotation.Nullable
  public InterestRateSwap getSwap() {
    return swap;
  }


  public void setSwap(InterestRateSwap swap) {
    this.swap = swap;
  }


  public InterestRateSwaption timeZoneConventions(TimeZoneConventions timeZoneConventions) {
    
    this.timeZoneConventions = timeZoneConventions;
    return this;
  }

   /**
   * Get timeZoneConventions
   * @return timeZoneConventions
  **/
  @jakarta.annotation.Nullable
  public TimeZoneConventions getTimeZoneConventions() {
    return timeZoneConventions;
  }


  public void setTimeZoneConventions(TimeZoneConventions timeZoneConventions) {
    this.timeZoneConventions = timeZoneConventions;
  }


  public InterestRateSwaption underlying(LusidInstrument underlying) {
    
    this.underlying = underlying;
    return this;
  }

   /**
   * Get underlying
   * @return underlying
  **/
  @jakarta.annotation.Nullable
  public LusidInstrument getUnderlying() {
    return underlying;
  }


  public void setUnderlying(LusidInstrument underlying) {
    this.underlying = underlying;
  }


  public InterestRateSwaption deliveryDays(Integer deliveryDays) {
    
    this.deliveryDays = deliveryDays;
    return this;
  }

   /**
   * Number of business days between exercise date and settlement of the option payoff or underlying.     Defaults to 0.
   * @return deliveryDays
  **/
  @jakarta.annotation.Nullable
  public Integer getDeliveryDays() {
    return deliveryDays;
  }


  public void setDeliveryDays(Integer deliveryDays) {
    this.deliveryDays = deliveryDays;
  }


  public InterestRateSwaption businessDayConvention(String businessDayConvention) {
    
    this.businessDayConvention = businessDayConvention;
    return this;
  }

   /**
   * Business day convention for option exercise date to settlement date calculation.  Supported string (enumeration) values are: [NoAdjustment, Previous, P, Following, F, ModifiedPrevious, MP, ModifiedFollowing, MF, HalfMonthModifiedFollowing, Nearest].     Defaults to \&quot;F\&quot;.
   * @return businessDayConvention
  **/
  @jakarta.annotation.Nullable
  public String getBusinessDayConvention() {
    return businessDayConvention;
  }


  public void setBusinessDayConvention(String businessDayConvention) {
    this.businessDayConvention = businessDayConvention;
  }


  public InterestRateSwaption settlementCalendars(List<String> settlementCalendars) {
    
    this.settlementCalendars = settlementCalendars;
    return this;
  }

  public InterestRateSwaption addSettlementCalendarsItem(String settlementCalendarsItem) {
    if (this.settlementCalendars == null) {
      this.settlementCalendars = new ArrayList<>();
    }
    this.settlementCalendars.add(settlementCalendarsItem);
    return this;
  }

   /**
   * Holiday calendars for option exercise date to settlement date calculation.
   * @return settlementCalendars
  **/
  @jakarta.annotation.Nullable
  public List<String> getSettlementCalendars() {
    return settlementCalendars;
  }


  public void setSettlementCalendars(List<String> settlementCalendars) {
    this.settlementCalendars = settlementCalendars;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InterestRateSwaption interestRateSwaption = (InterestRateSwaption) o;
    return Objects.equals(this.startDate, interestRateSwaption.startDate) &&
        Objects.equals(this.payOrReceiveFixed, interestRateSwaption.payOrReceiveFixed) &&
        Objects.equals(this.premium, interestRateSwaption.premium) &&
        Objects.equals(this.deliveryMethod, interestRateSwaption.deliveryMethod) &&
        Objects.equals(this.swap, interestRateSwaption.swap) &&
        Objects.equals(this.timeZoneConventions, interestRateSwaption.timeZoneConventions) &&
        Objects.equals(this.underlying, interestRateSwaption.underlying) &&
        Objects.equals(this.deliveryDays, interestRateSwaption.deliveryDays) &&
        Objects.equals(this.businessDayConvention, interestRateSwaption.businessDayConvention) &&
        Objects.equals(this.settlementCalendars, interestRateSwaption.settlementCalendars) &&
        super.equals(o);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(startDate, payOrReceiveFixed, premium, deliveryMethod, swap, timeZoneConventions, underlying, deliveryDays, businessDayConvention, settlementCalendars, super.hashCode());
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InterestRateSwaption {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    payOrReceiveFixed: ").append(toIndentedString(payOrReceiveFixed)).append("\n");
    sb.append("    premium: ").append(toIndentedString(premium)).append("\n");
    sb.append("    deliveryMethod: ").append(toIndentedString(deliveryMethod)).append("\n");
    sb.append("    swap: ").append(toIndentedString(swap)).append("\n");
    sb.append("    timeZoneConventions: ").append(toIndentedString(timeZoneConventions)).append("\n");
    sb.append("    underlying: ").append(toIndentedString(underlying)).append("\n");
    sb.append("    deliveryDays: ").append(toIndentedString(deliveryDays)).append("\n");
    sb.append("    businessDayConvention: ").append(toIndentedString(businessDayConvention)).append("\n");
    sb.append("    settlementCalendars: ").append(toIndentedString(settlementCalendars)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("instrumentType");
    openapiFields.add("startDate");
    openapiFields.add("payOrReceiveFixed");
    openapiFields.add("premium");
    openapiFields.add("deliveryMethod");
    openapiFields.add("swap");
    openapiFields.add("timeZoneConventions");
    openapiFields.add("underlying");
    openapiFields.add("deliveryDays");
    openapiFields.add("businessDayConvention");
    openapiFields.add("settlementCalendars");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("startDate");
    openapiRequiredFields.add("payOrReceiveFixed");
    openapiRequiredFields.add("deliveryMethod");
    openapiRequiredFields.add("instrumentType");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to InterestRateSwaption
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!InterestRateSwaption.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InterestRateSwaption is not found in the empty JSON string", InterestRateSwaption.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : InterestRateSwaption.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InterestRateSwaption.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InterestRateSwaption' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InterestRateSwaption> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InterestRateSwaption.class));

       return (TypeAdapter<T>) new TypeAdapter<InterestRateSwaption>() {
           @Override
           public void write(JsonWriter out, InterestRateSwaption value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InterestRateSwaption read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of InterestRateSwaption given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of InterestRateSwaption
  * @throws IOException if the JSON string is invalid with respect to InterestRateSwaption
  */
  public static InterestRateSwaption fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InterestRateSwaption.class);
  }

 /**
  * Convert an instance of InterestRateSwaption to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
