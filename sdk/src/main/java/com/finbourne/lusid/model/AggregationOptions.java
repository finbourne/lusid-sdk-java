/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * Options for controlling the default aspects and behaviour of the aggregation.
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class AggregationOptions {
  public static final String SERIALIZED_NAME_USE_ANSI_LIKE_SYNTAX = "useAnsiLikeSyntax";
  @SerializedName(SERIALIZED_NAME_USE_ANSI_LIKE_SYNTAX)
  private Boolean useAnsiLikeSyntax;

  public static final String SERIALIZED_NAME_ALLOW_PARTIAL_ENTITLEMENT_SUCCESS = "allowPartialEntitlementSuccess";
  @SerializedName(SERIALIZED_NAME_ALLOW_PARTIAL_ENTITLEMENT_SUCCESS)
  private Boolean allowPartialEntitlementSuccess;

  public static final String SERIALIZED_NAME_APPLY_ISO4217_ROUNDING = "applyIso4217Rounding";
  @SerializedName(SERIALIZED_NAME_APPLY_ISO4217_ROUNDING)
  private Boolean applyIso4217Rounding;

  public AggregationOptions() {
  }

  public AggregationOptions useAnsiLikeSyntax(Boolean useAnsiLikeSyntax) {
    
    this.useAnsiLikeSyntax = useAnsiLikeSyntax;
    return this;
  }

   /**
   * Should the aggregation behave like ANSI Sql or MySql with respect to a conceptual request which is equivalent to \&quot;select a,sum(a) from results\&quot;;  ANSI Sql would report an error if a was not unique where MySql would simply view a,suma(a) as equivalent to firstof(a),sum(a).
   * @return useAnsiLikeSyntax
  **/
  @jakarta.annotation.Nullable
  public Boolean getUseAnsiLikeSyntax() {
    return useAnsiLikeSyntax;
  }


  public void setUseAnsiLikeSyntax(Boolean useAnsiLikeSyntax) {
    this.useAnsiLikeSyntax = useAnsiLikeSyntax;
  }


  public AggregationOptions allowPartialEntitlementSuccess(Boolean allowPartialEntitlementSuccess) {
    
    this.allowPartialEntitlementSuccess = allowPartialEntitlementSuccess;
    return this;
  }

   /**
   * In the case of valuing a portfolio group where some, but not all entitlements fail, should the aggregation return the valuations  applied only to those portfolios where entitlements checks succeeded.
   * @return allowPartialEntitlementSuccess
  **/
  @jakarta.annotation.Nullable
  public Boolean getAllowPartialEntitlementSuccess() {
    return allowPartialEntitlementSuccess;
  }


  public void setAllowPartialEntitlementSuccess(Boolean allowPartialEntitlementSuccess) {
    this.allowPartialEntitlementSuccess = allowPartialEntitlementSuccess;
  }


  public AggregationOptions applyIso4217Rounding(Boolean applyIso4217Rounding) {
    
    this.applyIso4217Rounding = applyIso4217Rounding;
    return this;
  }

   /**
   * Various results that are units of currency might need to be rounded.  This will round according to the ISO4217 standard number of decimal places for a currency.
   * @return applyIso4217Rounding
  **/
  @jakarta.annotation.Nullable
  public Boolean getApplyIso4217Rounding() {
    return applyIso4217Rounding;
  }


  public void setApplyIso4217Rounding(Boolean applyIso4217Rounding) {
    this.applyIso4217Rounding = applyIso4217Rounding;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AggregationOptions aggregationOptions = (AggregationOptions) o;
    return Objects.equals(this.useAnsiLikeSyntax, aggregationOptions.useAnsiLikeSyntax) &&
        Objects.equals(this.allowPartialEntitlementSuccess, aggregationOptions.allowPartialEntitlementSuccess) &&
        Objects.equals(this.applyIso4217Rounding, aggregationOptions.applyIso4217Rounding);
  }

  @Override
  public int hashCode() {
    return Objects.hash(useAnsiLikeSyntax, allowPartialEntitlementSuccess, applyIso4217Rounding);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AggregationOptions {\n");
    sb.append("    useAnsiLikeSyntax: ").append(toIndentedString(useAnsiLikeSyntax)).append("\n");
    sb.append("    allowPartialEntitlementSuccess: ").append(toIndentedString(allowPartialEntitlementSuccess)).append("\n");
    sb.append("    applyIso4217Rounding: ").append(toIndentedString(applyIso4217Rounding)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("useAnsiLikeSyntax");
    openapiFields.add("allowPartialEntitlementSuccess");
    openapiFields.add("applyIso4217Rounding");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to AggregationOptions
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!AggregationOptions.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AggregationOptions is not found in the empty JSON string", AggregationOptions.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!AggregationOptions.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AggregationOptions` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AggregationOptions.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AggregationOptions' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AggregationOptions> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AggregationOptions.class));

       return (TypeAdapter<T>) new TypeAdapter<AggregationOptions>() {
           @Override
           public void write(JsonWriter out, AggregationOptions value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AggregationOptions read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AggregationOptions given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AggregationOptions
  * @throws IOException if the JSON string is invalid with respect to AggregationOptions
  */
  public static AggregationOptions fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AggregationOptions.class);
  }

 /**
  * Convert an instance of AggregationOptions to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
