/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import com.finbourne.lusid.model.AddressKeyOptionDefinition;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * AggregationQuery
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class AggregationQuery {
  public static final String SERIALIZED_NAME_ADDRESS_KEY = "addressKey";
  @SerializedName(SERIALIZED_NAME_ADDRESS_KEY)
  private String addressKey;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  /**
   * Financially meaningful results can be presented as either simple flat types or more complex expanded types. This field gives the type of the more complex representation.  For example, the present value (PV) of a holding could be represented either as a simple decimal (with currency implied) or as a decimal-currency pair. In this example, the type returned in this field would be \&quot;Result0D\&quot;, the decimal-currency pair. The available values are: String, Int, Decimal, DateTime, Boolean, ResultValue, Result0D, Json
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    STRING("String"),
    
    INT("Int"),
    
    DECIMAL("Decimal"),
    
    DATETIME("DateTime"),
    
    BOOLEAN("Boolean"),
    
    RESULTVALUE("ResultValue"),
    
    RESULT0D("Result0D"),
    
    JSON("Json");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  /**
   * Financially meaningful results can be presented as either simple flat types or more complex expanded types. This field gives the type of the simpler representation.  For example, the present value (PV) of a holding could be represented either as a simple decimal (with currency implied) or as a decimal-currency pair. In this example, the type returned in this field would be \&quot;Decimal\&quot;. The available values are: String, Int, Decimal, DateTime, Boolean, ResultValue, Result0D, Json
   */
  @JsonAdapter(FlattenedTypeEnum.Adapter.class)
  public enum FlattenedTypeEnum {
    STRING("String"),
    
    INT("Int"),
    
    DECIMAL("Decimal"),
    
    DATETIME("DateTime"),
    
    BOOLEAN("Boolean"),
    
    RESULTVALUE("ResultValue"),
    
    RESULT0D("Result0D"),
    
    JSON("Json");

    private String value;

    FlattenedTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FlattenedTypeEnum fromValue(String value) {
      for (FlattenedTypeEnum b : FlattenedTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FlattenedTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FlattenedTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FlattenedTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FlattenedTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_FLATTENED_TYPE = "flattenedType";
  @SerializedName(SERIALIZED_NAME_FLATTENED_TYPE)
  private FlattenedTypeEnum flattenedType;

  public static final String SERIALIZED_NAME_SCALES_WITH_HOLDING_QUANTITY = "scalesWithHoldingQuantity";
  @SerializedName(SERIALIZED_NAME_SCALES_WITH_HOLDING_QUANTITY)
  private Boolean scalesWithHoldingQuantity;

  public static final String SERIALIZED_NAME_SUPPORTED_OPERATIONS = "supportedOperations";
  @SerializedName(SERIALIZED_NAME_SUPPORTED_OPERATIONS)
  private String supportedOperations;

  public static final String SERIALIZED_NAME_LIFE_CYCLE_STATUS = "lifeCycleStatus";
  @SerializedName(SERIALIZED_NAME_LIFE_CYCLE_STATUS)
  private String lifeCycleStatus;

  public static final String SERIALIZED_NAME_REMOVAL_DATE = "removalDate";
  @SerializedName(SERIALIZED_NAME_REMOVAL_DATE)
  private OffsetDateTime removalDate;

  public static final String SERIALIZED_NAME_APPLICABLE_OPTIONS = "applicableOptions";
  @SerializedName(SERIALIZED_NAME_APPLICABLE_OPTIONS)
  private Map<String, AddressKeyOptionDefinition> applicableOptions;

  public AggregationQuery() {
  }

  public AggregationQuery addressKey(String addressKey) {
    
    this.addressKey = addressKey;
    return this;
  }

   /**
   * The address that is the query to be made into the system. e.g. a Valuation/PV or Instrument/MaturityDate
   * @return addressKey
  **/
  @jakarta.annotation.Nonnull
  public String getAddressKey() {
    return addressKey;
  }


  public void setAddressKey(String addressKey) {
    this.addressKey = addressKey;
  }


  public AggregationQuery description(String description) {
    
    this.description = description;
    return this;
  }

   /**
   * What does the information that is being queried by the address mean. What is the address for.
   * @return description
  **/
  @jakarta.annotation.Nonnull
  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    this.description = description;
  }


  public AggregationQuery displayName(String displayName) {
    
    this.displayName = displayName;
    return this;
  }

   /**
   * The suggested name that the user would wish to put on to the returned information for visualisation in preference to the address.
   * @return displayName
  **/
  @jakarta.annotation.Nonnull
  public String getDisplayName() {
    return displayName;
  }


  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public AggregationQuery type(TypeEnum type) {
    
    this.type = type;
    return this;
  }

   /**
   * Financially meaningful results can be presented as either simple flat types or more complex expanded types. This field gives the type of the more complex representation.  For example, the present value (PV) of a holding could be represented either as a simple decimal (with currency implied) or as a decimal-currency pair. In this example, the type returned in this field would be \&quot;Result0D\&quot;, the decimal-currency pair. The available values are: String, Int, Decimal, DateTime, Boolean, ResultValue, Result0D, Json
   * @return type
  **/
  @jakarta.annotation.Nonnull
  public TypeEnum getType() {
    return type;
  }


  public void setType(TypeEnum type) {
    this.type = type;
  }


  public AggregationQuery flattenedType(FlattenedTypeEnum flattenedType) {
    
    this.flattenedType = flattenedType;
    return this;
  }

   /**
   * Financially meaningful results can be presented as either simple flat types or more complex expanded types. This field gives the type of the simpler representation.  For example, the present value (PV) of a holding could be represented either as a simple decimal (with currency implied) or as a decimal-currency pair. In this example, the type returned in this field would be \&quot;Decimal\&quot;. The available values are: String, Int, Decimal, DateTime, Boolean, ResultValue, Result0D, Json
   * @return flattenedType
  **/
  @jakarta.annotation.Nonnull
  public FlattenedTypeEnum getFlattenedType() {
    return flattenedType;
  }


  public void setFlattenedType(FlattenedTypeEnum flattenedType) {
    this.flattenedType = flattenedType;
  }


  public AggregationQuery scalesWithHoldingQuantity(Boolean scalesWithHoldingQuantity) {
    
    this.scalesWithHoldingQuantity = scalesWithHoldingQuantity;
    return this;
  }

   /**
   * Is the data scaled when it is for, e.g. a holding in an instrument. A key example would be the difference between price and PV. The present value of an instrument would scale with the quantity held. The price would be that for a hypothetical unit of that instrument, typically associated with the contract size.
   * @return scalesWithHoldingQuantity
  **/
  @jakarta.annotation.Nonnull
  public Boolean getScalesWithHoldingQuantity() {
    return scalesWithHoldingQuantity;
  }


  public void setScalesWithHoldingQuantity(Boolean scalesWithHoldingQuantity) {
    this.scalesWithHoldingQuantity = scalesWithHoldingQuantity;
  }


  public AggregationQuery supportedOperations(String supportedOperations) {
    
    this.supportedOperations = supportedOperations;
    return this;
  }

   /**
   * When performing an aggregation operation, what column type operations can be performed on the data. For example, it makes sense to sum decimals but not strings. Either can be counted. With more complex types, e.g. ResultValues, operations may be linked to a semantic meaning such as the currency of the result. In such cases the operations may be supported but context specific. For example, it makes sense to sum PVs in a single currency but not when the currency is different. In such cases, an error would result (it being assumed that no fx rates for currency conversion were implicit in the context).
   * @return supportedOperations
  **/
  @jakarta.annotation.Nonnull
  public String getSupportedOperations() {
    return supportedOperations;
  }


  public void setSupportedOperations(String supportedOperations) {
    this.supportedOperations = supportedOperations;
  }


  public AggregationQuery lifeCycleStatus(String lifeCycleStatus) {
    
    this.lifeCycleStatus = lifeCycleStatus;
    return this;
  }

   /**
   * Within an API where an item can be accessed through an address or property, there is an associated status that determines whether the item is stable or likely to change. This status is one of [Experimental, Beta, EAP, Prod, Deprecated]. If the item is deprecated it will be removed on or after the associated DateTime RemovalDate field. That field will not otherwise be set.
   * @return lifeCycleStatus
  **/
  @jakarta.annotation.Nonnull
  public String getLifeCycleStatus() {
    return lifeCycleStatus;
  }


  public void setLifeCycleStatus(String lifeCycleStatus) {
    this.lifeCycleStatus = lifeCycleStatus;
  }


  public AggregationQuery removalDate(OffsetDateTime removalDate) {
    
    this.removalDate = removalDate;
    return this;
  }

   /**
   * If the life cycle status is set to deprecated then this will be populated with the date on or after which removal of the address query will happen
   * @return removalDate
  **/
  @jakarta.annotation.Nullable
  public OffsetDateTime getRemovalDate() {
    return removalDate;
  }


  public void setRemovalDate(OffsetDateTime removalDate) {
    this.removalDate = removalDate;
  }


  public AggregationQuery applicableOptions(Map<String, AddressKeyOptionDefinition> applicableOptions) {
    
    this.applicableOptions = applicableOptions;
    return this;
  }

  public AggregationQuery putApplicableOptionsItem(String key, AddressKeyOptionDefinition applicableOptionsItem) {
    if (this.applicableOptions == null) {
      this.applicableOptions = new HashMap<>();
    }
    this.applicableOptions.put(key, applicableOptionsItem);
    return this;
  }

   /**
   * A mapping from option names to the definition that the corresponding option value must match.
   * @return applicableOptions
  **/
  @jakarta.annotation.Nullable
  public Map<String, AddressKeyOptionDefinition> getApplicableOptions() {
    return applicableOptions;
  }


  public void setApplicableOptions(Map<String, AddressKeyOptionDefinition> applicableOptions) {
    this.applicableOptions = applicableOptions;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AggregationQuery aggregationQuery = (AggregationQuery) o;
    return Objects.equals(this.addressKey, aggregationQuery.addressKey) &&
        Objects.equals(this.description, aggregationQuery.description) &&
        Objects.equals(this.displayName, aggregationQuery.displayName) &&
        Objects.equals(this.type, aggregationQuery.type) &&
        Objects.equals(this.flattenedType, aggregationQuery.flattenedType) &&
        Objects.equals(this.scalesWithHoldingQuantity, aggregationQuery.scalesWithHoldingQuantity) &&
        Objects.equals(this.supportedOperations, aggregationQuery.supportedOperations) &&
        Objects.equals(this.lifeCycleStatus, aggregationQuery.lifeCycleStatus) &&
        Objects.equals(this.removalDate, aggregationQuery.removalDate) &&
        Objects.equals(this.applicableOptions, aggregationQuery.applicableOptions);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(addressKey, description, displayName, type, flattenedType, scalesWithHoldingQuantity, supportedOperations, lifeCycleStatus, removalDate, applicableOptions);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AggregationQuery {\n");
    sb.append("    addressKey: ").append(toIndentedString(addressKey)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    flattenedType: ").append(toIndentedString(flattenedType)).append("\n");
    sb.append("    scalesWithHoldingQuantity: ").append(toIndentedString(scalesWithHoldingQuantity)).append("\n");
    sb.append("    supportedOperations: ").append(toIndentedString(supportedOperations)).append("\n");
    sb.append("    lifeCycleStatus: ").append(toIndentedString(lifeCycleStatus)).append("\n");
    sb.append("    removalDate: ").append(toIndentedString(removalDate)).append("\n");
    sb.append("    applicableOptions: ").append(toIndentedString(applicableOptions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("addressKey");
    openapiFields.add("description");
    openapiFields.add("displayName");
    openapiFields.add("type");
    openapiFields.add("flattenedType");
    openapiFields.add("scalesWithHoldingQuantity");
    openapiFields.add("supportedOperations");
    openapiFields.add("lifeCycleStatus");
    openapiFields.add("removalDate");
    openapiFields.add("applicableOptions");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("addressKey");
    openapiRequiredFields.add("description");
    openapiRequiredFields.add("displayName");
    openapiRequiredFields.add("type");
    openapiRequiredFields.add("flattenedType");
    openapiRequiredFields.add("scalesWithHoldingQuantity");
    openapiRequiredFields.add("supportedOperations");
    openapiRequiredFields.add("lifeCycleStatus");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to AggregationQuery
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AggregationQuery.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AggregationQuery is not found in the empty JSON string", AggregationQuery.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AggregationQuery.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("addressKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `addressKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("addressKey").toString()));
      }
      if (!jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (!jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if (!jsonObj.get("flattenedType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `flattenedType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("flattenedType").toString()));
      }
      if (!jsonObj.get("supportedOperations").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `supportedOperations` to be a primitive type in the JSON string but got `%s`", jsonObj.get("supportedOperations").toString()));
      }
      if (!jsonObj.get("lifeCycleStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lifeCycleStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lifeCycleStatus").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AggregationQuery.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AggregationQuery' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AggregationQuery> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AggregationQuery.class));

       return (TypeAdapter<T>) new TypeAdapter<AggregationQuery>() {
           @Override
           public void write(JsonWriter out, AggregationQuery value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AggregationQuery read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AggregationQuery given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AggregationQuery
  * @throws IOException if the JSON string is invalid with respect to AggregationQuery
  */
  public static AggregationQuery fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AggregationQuery.class);
  }

 /**
  * Convert an instance of AggregationQuery to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
