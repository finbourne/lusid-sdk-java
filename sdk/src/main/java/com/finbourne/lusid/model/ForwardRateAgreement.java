/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import com.finbourne.lusid.model.IndexConvention;
import com.finbourne.lusid.model.LusidInstrument;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * LUSID representation of a Forward Rate Agreement.
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ForwardRateAgreement extends LusidInstrument {
  public static final String SERIALIZED_NAME_START_DATE = "startDate";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  private OffsetDateTime startDate;

  public static final String SERIALIZED_NAME_MATURITY_DATE = "maturityDate";
  @SerializedName(SERIALIZED_NAME_MATURITY_DATE)
  private OffsetDateTime maturityDate;

  public static final String SERIALIZED_NAME_DOM_CCY = "domCcy";
  @SerializedName(SERIALIZED_NAME_DOM_CCY)
  private String domCcy;

  public static final String SERIALIZED_NAME_FIXING_DATE = "fixingDate";
  @SerializedName(SERIALIZED_NAME_FIXING_DATE)
  private OffsetDateTime fixingDate;

  public static final String SERIALIZED_NAME_FRA_RATE = "fraRate";
  @SerializedName(SERIALIZED_NAME_FRA_RATE)
  private java.math.BigDecimal fraRate;

  public static final String SERIALIZED_NAME_NOTIONAL = "notional";
  @SerializedName(SERIALIZED_NAME_NOTIONAL)
  private java.math.BigDecimal notional;

  public static final String SERIALIZED_NAME_INDEX_CONVENTION = "indexConvention";
  @SerializedName(SERIALIZED_NAME_INDEX_CONVENTION)
  private IndexConvention indexConvention;

  public ForwardRateAgreement() {
    // this.instrumentType = this.getClass().getSimpleName();
  }

  public ForwardRateAgreement startDate(OffsetDateTime startDate) {
    
    this.startDate = startDate;
    return this;
  }

   /**
   * The settlement date of the FRA
   * @return startDate
  **/
  @jakarta.annotation.Nonnull
  public OffsetDateTime getStartDate() {
    return startDate;
  }


  public void setStartDate(OffsetDateTime startDate) {
    this.startDate = startDate;
  }


  public ForwardRateAgreement maturityDate(OffsetDateTime maturityDate) {
    
    this.maturityDate = maturityDate;
    return this;
  }

   /**
   * The final maturity date of the instrument. This means the last date on which the instruments makes a payment of any amount.  For the avoidance of doubt, that is not necessarily prior to its last sensitivity date for the purposes of risk; e.g. instruments such as  Constant Maturity Swaps (CMS) often have sensitivities to rates beyond their last payment date.
   * @return maturityDate
  **/
  @jakarta.annotation.Nonnull
  public OffsetDateTime getMaturityDate() {
    return maturityDate;
  }


  public void setMaturityDate(OffsetDateTime maturityDate) {
    this.maturityDate = maturityDate;
  }


  public ForwardRateAgreement domCcy(String domCcy) {
    
    this.domCcy = domCcy;
    return this;
  }

   /**
   * The domestic currency of the instrument.
   * @return domCcy
  **/
  @jakarta.annotation.Nonnull
  public String getDomCcy() {
    return domCcy;
  }


  public void setDomCcy(String domCcy) {
    this.domCcy = domCcy;
  }


  public ForwardRateAgreement fixingDate(OffsetDateTime fixingDate) {
    
    this.fixingDate = fixingDate;
    return this;
  }

   /**
   * The date at which the rate to be paid, the reference rate, is confirmed/observed.
   * @return fixingDate
  **/
  @jakarta.annotation.Nonnull
  public OffsetDateTime getFixingDate() {
    return fixingDate;
  }


  public void setFixingDate(OffsetDateTime fixingDate) {
    this.fixingDate = fixingDate;
  }


  public ForwardRateAgreement fraRate(java.math.BigDecimal fraRate) {
    
    this.fraRate = fraRate;
    return this;
  }

   /**
   * The rate at which the FRA is traded.
   * @return fraRate
  **/
  @jakarta.annotation.Nonnull
  public java.math.BigDecimal getFraRate() {
    return fraRate;
  }


  public void setFraRate(java.math.BigDecimal fraRate) {
    this.fraRate = fraRate;
  }


  public ForwardRateAgreement notional(java.math.BigDecimal notional) {
    
    this.notional = notional;
    return this;
  }

   /**
   * The amount for which the FRA is traded.
   * @return notional
  **/
  @jakarta.annotation.Nonnull
  public java.math.BigDecimal getNotional() {
    return notional;
  }


  public void setNotional(java.math.BigDecimal notional) {
    this.notional = notional;
  }


  public ForwardRateAgreement indexConvention(IndexConvention indexConvention) {
    
    this.indexConvention = indexConvention;
    return this;
  }

   /**
   * Get indexConvention
   * @return indexConvention
  **/
  @jakarta.annotation.Nullable
  public IndexConvention getIndexConvention() {
    return indexConvention;
  }


  public void setIndexConvention(IndexConvention indexConvention) {
    this.indexConvention = indexConvention;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ForwardRateAgreement forwardRateAgreement = (ForwardRateAgreement) o;
    return Objects.equals(this.startDate, forwardRateAgreement.startDate) &&
        Objects.equals(this.maturityDate, forwardRateAgreement.maturityDate) &&
        Objects.equals(this.domCcy, forwardRateAgreement.domCcy) &&
        Objects.equals(this.fixingDate, forwardRateAgreement.fixingDate) &&
        (this.fraRate.compareTo(forwardRateAgreement.getFraRate()) == 0) &&
        (this.notional.compareTo(forwardRateAgreement.getNotional()) == 0) &&
        Objects.equals(this.indexConvention, forwardRateAgreement.indexConvention) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(startDate, maturityDate, domCcy, fixingDate, fraRate, notional, indexConvention, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ForwardRateAgreement {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    maturityDate: ").append(toIndentedString(maturityDate)).append("\n");
    sb.append("    domCcy: ").append(toIndentedString(domCcy)).append("\n");
    sb.append("    fixingDate: ").append(toIndentedString(fixingDate)).append("\n");
    sb.append("    fraRate: ").append(toIndentedString(fraRate)).append("\n");
    sb.append("    notional: ").append(toIndentedString(notional)).append("\n");
    sb.append("    indexConvention: ").append(toIndentedString(indexConvention)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("instrumentType");
    openapiFields.add("startDate");
    openapiFields.add("maturityDate");
    openapiFields.add("domCcy");
    openapiFields.add("fixingDate");
    openapiFields.add("fraRate");
    openapiFields.add("notional");
    openapiFields.add("indexConvention");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("startDate");
    openapiRequiredFields.add("maturityDate");
    openapiRequiredFields.add("domCcy");
    openapiRequiredFields.add("fixingDate");
    openapiRequiredFields.add("fraRate");
    openapiRequiredFields.add("notional");
    openapiRequiredFields.add("instrumentType");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ForwardRateAgreement
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ForwardRateAgreement.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ForwardRateAgreement is not found in the empty JSON string", ForwardRateAgreement.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ForwardRateAgreement.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ForwardRateAgreement.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ForwardRateAgreement' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ForwardRateAgreement> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ForwardRateAgreement.class));

       return (TypeAdapter<T>) new TypeAdapter<ForwardRateAgreement>() {
           @Override
           public void write(JsonWriter out, ForwardRateAgreement value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ForwardRateAgreement read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ForwardRateAgreement given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ForwardRateAgreement
  * @throws IOException if the JSON string is invalid with respect to ForwardRateAgreement
  */
  public static ForwardRateAgreement fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ForwardRateAgreement.class);
  }

 /**
  * Convert an instance of ForwardRateAgreement to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
