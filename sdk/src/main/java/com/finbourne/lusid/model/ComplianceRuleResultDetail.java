/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import com.finbourne.lusid.model.ComplianceRuleResultPortfolioDetail;
import com.finbourne.lusid.model.ResourceId;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * ComplianceRuleResultDetail
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ComplianceRuleResultDetail {
  public static final String SERIALIZED_NAME_RULE_ID = "ruleId";
  @SerializedName(SERIALIZED_NAME_RULE_ID)
  private ResourceId ruleId;

  public static final String SERIALIZED_NAME_AFFECTED_PORTFOLIOS_DETAILS = "affectedPortfoliosDetails";
  @SerializedName(SERIALIZED_NAME_AFFECTED_PORTFOLIOS_DETAILS)
  private List<ComplianceRuleResultPortfolioDetail> affectedPortfoliosDetails = new ArrayList<>();

  public static final String SERIALIZED_NAME_AFFECTED_ORDERS = "affectedOrders";
  @SerializedName(SERIALIZED_NAME_AFFECTED_ORDERS)
  private List<ResourceId> affectedOrders = new ArrayList<>();

  public static final String SERIALIZED_NAME_TEMPLATE_ID = "templateId";
  @SerializedName(SERIALIZED_NAME_TEMPLATE_ID)
  private ResourceId templateId;

  public static final String SERIALIZED_NAME_TEMPLATE_DESCRIPTION = "templateDescription";
  @SerializedName(SERIALIZED_NAME_TEMPLATE_DESCRIPTION)
  private String templateDescription;

  public static final String SERIALIZED_NAME_TEMPLATE_VARIATION = "templateVariation";
  @SerializedName(SERIALIZED_NAME_TEMPLATE_VARIATION)
  private String templateVariation;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_RULE_NAME = "ruleName";
  @SerializedName(SERIALIZED_NAME_RULE_NAME)
  private String ruleName;

  public static final String SERIALIZED_NAME_RULE_DESCRIPTION = "ruleDescription";
  @SerializedName(SERIALIZED_NAME_RULE_DESCRIPTION)
  private String ruleDescription;

  public static final String SERIALIZED_NAME_OUTCOME = "outcome";
  @SerializedName(SERIALIZED_NAME_OUTCOME)
  private String outcome;

  public ComplianceRuleResultDetail() {
  }

  public ComplianceRuleResultDetail ruleId(ResourceId ruleId) {
    
    this.ruleId = ruleId;
    return this;
  }

   /**
   * Get ruleId
   * @return ruleId
  **/
  @jakarta.annotation.Nonnull
  public ResourceId getRuleId() {
    return ruleId;
  }


  public void setRuleId(ResourceId ruleId) {
    this.ruleId = ruleId;
  }


  public ComplianceRuleResultDetail affectedPortfoliosDetails(List<ComplianceRuleResultPortfolioDetail> affectedPortfoliosDetails) {
    
    this.affectedPortfoliosDetails = affectedPortfoliosDetails;
    return this;
  }

  public ComplianceRuleResultDetail addAffectedPortfoliosDetailsItem(ComplianceRuleResultPortfolioDetail affectedPortfoliosDetailsItem) {
    if (this.affectedPortfoliosDetails == null) {
      this.affectedPortfoliosDetails = new ArrayList<>();
    }
    this.affectedPortfoliosDetails.add(affectedPortfoliosDetailsItem);
    return this;
  }

   /**
   * Get affectedPortfoliosDetails
   * @return affectedPortfoliosDetails
  **/
  @jakarta.annotation.Nonnull
  public List<ComplianceRuleResultPortfolioDetail> getAffectedPortfoliosDetails() {
    return affectedPortfoliosDetails;
  }


  public void setAffectedPortfoliosDetails(List<ComplianceRuleResultPortfolioDetail> affectedPortfoliosDetails) {
    this.affectedPortfoliosDetails = affectedPortfoliosDetails;
  }


  public ComplianceRuleResultDetail affectedOrders(List<ResourceId> affectedOrders) {
    
    this.affectedOrders = affectedOrders;
    return this;
  }

  public ComplianceRuleResultDetail addAffectedOrdersItem(ResourceId affectedOrdersItem) {
    if (this.affectedOrders == null) {
      this.affectedOrders = new ArrayList<>();
    }
    this.affectedOrders.add(affectedOrdersItem);
    return this;
  }

   /**
   * Get affectedOrders
   * @return affectedOrders
  **/
  @jakarta.annotation.Nonnull
  public List<ResourceId> getAffectedOrders() {
    return affectedOrders;
  }


  public void setAffectedOrders(List<ResourceId> affectedOrders) {
    this.affectedOrders = affectedOrders;
  }


  public ComplianceRuleResultDetail templateId(ResourceId templateId) {
    
    this.templateId = templateId;
    return this;
  }

   /**
   * Get templateId
   * @return templateId
  **/
  @jakarta.annotation.Nonnull
  public ResourceId getTemplateId() {
    return templateId;
  }


  public void setTemplateId(ResourceId templateId) {
    this.templateId = templateId;
  }


  public ComplianceRuleResultDetail templateDescription(String templateDescription) {
    
    this.templateDescription = templateDescription;
    return this;
  }

   /**
   * Get templateDescription
   * @return templateDescription
  **/
  @jakarta.annotation.Nonnull
  public String getTemplateDescription() {
    return templateDescription;
  }


  public void setTemplateDescription(String templateDescription) {
    this.templateDescription = templateDescription;
  }


  public ComplianceRuleResultDetail templateVariation(String templateVariation) {
    
    this.templateVariation = templateVariation;
    return this;
  }

   /**
   * Get templateVariation
   * @return templateVariation
  **/
  @jakarta.annotation.Nonnull
  public String getTemplateVariation() {
    return templateVariation;
  }


  public void setTemplateVariation(String templateVariation) {
    this.templateVariation = templateVariation;
  }


  public ComplianceRuleResultDetail status(String status) {
    
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @jakarta.annotation.Nonnull
  public String getStatus() {
    return status;
  }


  public void setStatus(String status) {
    this.status = status;
  }


  public ComplianceRuleResultDetail ruleName(String ruleName) {
    
    this.ruleName = ruleName;
    return this;
  }

   /**
   * Get ruleName
   * @return ruleName
  **/
  @jakarta.annotation.Nonnull
  public String getRuleName() {
    return ruleName;
  }


  public void setRuleName(String ruleName) {
    this.ruleName = ruleName;
  }


  public ComplianceRuleResultDetail ruleDescription(String ruleDescription) {
    
    this.ruleDescription = ruleDescription;
    return this;
  }

   /**
   * Get ruleDescription
   * @return ruleDescription
  **/
  @jakarta.annotation.Nonnull
  public String getRuleDescription() {
    return ruleDescription;
  }


  public void setRuleDescription(String ruleDescription) {
    this.ruleDescription = ruleDescription;
  }


  public ComplianceRuleResultDetail outcome(String outcome) {
    
    this.outcome = outcome;
    return this;
  }

   /**
   * Get outcome
   * @return outcome
  **/
  @jakarta.annotation.Nonnull
  public String getOutcome() {
    return outcome;
  }


  public void setOutcome(String outcome) {
    this.outcome = outcome;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ComplianceRuleResultDetail complianceRuleResultDetail = (ComplianceRuleResultDetail) o;
    return Objects.equals(this.ruleId, complianceRuleResultDetail.ruleId) &&
        Objects.equals(this.affectedPortfoliosDetails, complianceRuleResultDetail.affectedPortfoliosDetails) &&
        Objects.equals(this.affectedOrders, complianceRuleResultDetail.affectedOrders) &&
        Objects.equals(this.templateId, complianceRuleResultDetail.templateId) &&
        Objects.equals(this.templateDescription, complianceRuleResultDetail.templateDescription) &&
        Objects.equals(this.templateVariation, complianceRuleResultDetail.templateVariation) &&
        Objects.equals(this.status, complianceRuleResultDetail.status) &&
        Objects.equals(this.ruleName, complianceRuleResultDetail.ruleName) &&
        Objects.equals(this.ruleDescription, complianceRuleResultDetail.ruleDescription) &&
        Objects.equals(this.outcome, complianceRuleResultDetail.outcome);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ruleId, affectedPortfoliosDetails, affectedOrders, templateId, templateDescription, templateVariation, status, ruleName, ruleDescription, outcome);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ComplianceRuleResultDetail {\n");
    sb.append("    ruleId: ").append(toIndentedString(ruleId)).append("\n");
    sb.append("    affectedPortfoliosDetails: ").append(toIndentedString(affectedPortfoliosDetails)).append("\n");
    sb.append("    affectedOrders: ").append(toIndentedString(affectedOrders)).append("\n");
    sb.append("    templateId: ").append(toIndentedString(templateId)).append("\n");
    sb.append("    templateDescription: ").append(toIndentedString(templateDescription)).append("\n");
    sb.append("    templateVariation: ").append(toIndentedString(templateVariation)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    ruleName: ").append(toIndentedString(ruleName)).append("\n");
    sb.append("    ruleDescription: ").append(toIndentedString(ruleDescription)).append("\n");
    sb.append("    outcome: ").append(toIndentedString(outcome)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ruleId");
    openapiFields.add("affectedPortfoliosDetails");
    openapiFields.add("affectedOrders");
    openapiFields.add("templateId");
    openapiFields.add("templateDescription");
    openapiFields.add("templateVariation");
    openapiFields.add("status");
    openapiFields.add("ruleName");
    openapiFields.add("ruleDescription");
    openapiFields.add("outcome");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("ruleId");
    openapiRequiredFields.add("affectedPortfoliosDetails");
    openapiRequiredFields.add("affectedOrders");
    openapiRequiredFields.add("templateId");
    openapiRequiredFields.add("templateDescription");
    openapiRequiredFields.add("templateVariation");
    openapiRequiredFields.add("status");
    openapiRequiredFields.add("ruleName");
    openapiRequiredFields.add("ruleDescription");
    openapiRequiredFields.add("outcome");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ComplianceRuleResultDetail
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ComplianceRuleResultDetail.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ComplianceRuleResultDetail is not found in the empty JSON string", ComplianceRuleResultDetail.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ComplianceRuleResultDetail.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `ruleId`
      ResourceId.validateJsonElement(jsonObj.get("ruleId"));
      // ensure the json data is an array
      if (!jsonObj.get("affectedPortfoliosDetails").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `affectedPortfoliosDetails` to be an array in the JSON string but got `%s`", jsonObj.get("affectedPortfoliosDetails").toString()));
      }

      JsonArray jsonArrayaffectedPortfoliosDetails = jsonObj.getAsJsonArray("affectedPortfoliosDetails");
      // validate the required field `affectedPortfoliosDetails` (array)
      for (int i = 0; i < jsonArrayaffectedPortfoliosDetails.size(); i++) {
        ComplianceRuleResultPortfolioDetail.validateJsonElement(jsonArrayaffectedPortfoliosDetails.get(i));
      };
      // ensure the json data is an array
      if (!jsonObj.get("affectedOrders").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `affectedOrders` to be an array in the JSON string but got `%s`", jsonObj.get("affectedOrders").toString()));
      }

      JsonArray jsonArrayaffectedOrders = jsonObj.getAsJsonArray("affectedOrders");
      // validate the required field `affectedOrders` (array)
      for (int i = 0; i < jsonArrayaffectedOrders.size(); i++) {
        ResourceId.validateJsonElement(jsonArrayaffectedOrders.get(i));
      };
      // validate the required field `templateId`
      ResourceId.validateJsonElement(jsonObj.get("templateId"));
      if (!jsonObj.get("templateDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `templateDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("templateDescription").toString()));
      }
      if (!jsonObj.get("templateVariation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `templateVariation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("templateVariation").toString()));
      }
      if (!jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if (!jsonObj.get("ruleName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ruleName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ruleName").toString()));
      }
      if (!jsonObj.get("ruleDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ruleDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ruleDescription").toString()));
      }
      if (!jsonObj.get("outcome").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `outcome` to be a primitive type in the JSON string but got `%s`", jsonObj.get("outcome").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ComplianceRuleResultDetail.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ComplianceRuleResultDetail' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ComplianceRuleResultDetail> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ComplianceRuleResultDetail.class));

       return (TypeAdapter<T>) new TypeAdapter<ComplianceRuleResultDetail>() {
           @Override
           public void write(JsonWriter out, ComplianceRuleResultDetail value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ComplianceRuleResultDetail read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ComplianceRuleResultDetail given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ComplianceRuleResultDetail
  * @throws IOException if the JSON string is invalid with respect to ComplianceRuleResultDetail
  */
  public static ComplianceRuleResultDetail fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ComplianceRuleResultDetail.class);
  }

 /**
  * Convert an instance of ComplianceRuleResultDetail to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
