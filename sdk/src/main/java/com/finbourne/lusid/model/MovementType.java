/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * Gets or Sets MovementType
 */
@JsonAdapter(MovementType.Adapter.class)
public enum MovementType {
  
  SETTLEMENT("Settlement"),
  
  TRADED("Traded"),
  
  STOCKMOVEMENT("StockMovement"),
  
  FUTURECASH("FutureCash"),
  
  COMMITMENT("Commitment"),
  
  RECEIVABLE("Receivable"),
  
  CASHSETTLEMENT("CashSettlement"),
  
  CASHFORWARD("CashForward"),
  
  CASHCOMMITMENT("CashCommitment"),
  
  CASHRECEIVABLE("CashReceivable"),
  
  ACCRUAL("Accrual"),
  
  CASHACCRUAL("CashAccrual"),
  
  FORWARDFX("ForwardFx"),
  
  CASHFXFORWARD("CashFxForward"),
  
  UNSETTLEDCASHTYPES("UnsettledCashTypes"),
  
  CARRY("Carry"),
  
  CARRYASPNL("CarryAsPnl"),
  
  VARIATIONMARGIN("VariationMargin"),
  
  CAPITAL("Capital"),
  
  FEE("Fee");

  private String value;

  MovementType(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static MovementType fromValue(String value) {
    for (MovementType b : MovementType.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<MovementType> {
    @Override
    public void write(final JsonWriter jsonWriter, final MovementType enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public MovementType read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return MovementType.fromValue(value);
    }
  }
}

