/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import com.finbourne.lusid.model.AdditionalPayment;
import com.finbourne.lusid.model.InstrumentLeg;
import com.finbourne.lusid.model.LusidInstrument;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * LUSID representation of an Interest Rate Swap, including:     generate justfile Vanilla (single currency fixed-float non-amortising)   generate justfile CrossCurrency (&gt;1 currency is used by the swap legs)   generate justfile Basis (single currency, floating-floating legs of different tenors)   generate justfile Amortising (the swap has 1+ leg with amortised notional)     This instrument has multiple legs, to see how legs are used in LUSID see https://support.lusid.com/knowledgebase/article/KA-02252.     | Leg Index | Leg Identifier | Description |  | --------- | -------------- | ----------- |  | 1 | Pay/Receive | Cash flows representing the pay/receive leg. |  | 2 | Receive/Pay | Cash flows representing the receive/pay leg. |  | 3 | AdditionalPayments | Cash flows relating to any additional payments (optional). |
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class InterestRateSwap extends LusidInstrument {
  public static final String SERIALIZED_NAME_START_DATE = "startDate";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  private OffsetDateTime startDate;

  public static final String SERIALIZED_NAME_MATURITY_DATE = "maturityDate";
  @SerializedName(SERIALIZED_NAME_MATURITY_DATE)
  private OffsetDateTime maturityDate;

  public static final String SERIALIZED_NAME_IS_NON_DELIVERABLE = "isNonDeliverable";
  @SerializedName(SERIALIZED_NAME_IS_NON_DELIVERABLE)
  private Boolean isNonDeliverable;

  public static final String SERIALIZED_NAME_LEGS = "legs";
  @SerializedName(SERIALIZED_NAME_LEGS)
  private List<InstrumentLeg> legs = new ArrayList<>();

  public static final String SERIALIZED_NAME_SETTLEMENT_CCY = "settlementCcy";
  @SerializedName(SERIALIZED_NAME_SETTLEMENT_CCY)
  private String settlementCcy;

  public static final String SERIALIZED_NAME_ADDITIONAL_PAYMENTS = "additionalPayments";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_PAYMENTS)
  private List<AdditionalPayment> additionalPayments;

  public InterestRateSwap() {
    // this.instrumentType = this.getClass().getSimpleName();
  }

  public InterestRateSwap startDate(OffsetDateTime startDate) {
    
    this.startDate = startDate;
    return this;
  }

   /**
   * The start date of the instrument. This is normally synonymous with the trade-date.
   * @return startDate
  **/
  @jakarta.annotation.Nonnull
  public OffsetDateTime getStartDate() {
    return startDate;
  }


  public void setStartDate(OffsetDateTime startDate) {
    this.startDate = startDate;
  }


  public InterestRateSwap maturityDate(OffsetDateTime maturityDate) {
    
    this.maturityDate = maturityDate;
    return this;
  }

   /**
   * The final maturity date of the instrument. This means the last date on which the instruments makes a payment of any amount.  For the avoidance of doubt, that is not necessarily prior to its last sensitivity date for the purposes of risk; e.g. instruments such as  Constant Maturity Swaps (CMS) often have sensitivities to rates that may well be observed or set prior to the maturity date, but refer to a termination date beyond it.
   * @return maturityDate
  **/
  @jakarta.annotation.Nonnull
  public OffsetDateTime getMaturityDate() {
    return maturityDate;
  }


  public void setMaturityDate(OffsetDateTime maturityDate) {
    this.maturityDate = maturityDate;
  }


  public InterestRateSwap isNonDeliverable(Boolean isNonDeliverable) {
    
    this.isNonDeliverable = isNonDeliverable;
    return this;
  }

   /**
   * Is the contract an IRS of \&quot;Non-Deliverable\&quot; type, meaning a single payment in the settlement currency based on the difference between  the fixed and floating rates.
   * @return isNonDeliverable
  **/
  @jakarta.annotation.Nullable
  public Boolean getIsNonDeliverable() {
    return isNonDeliverable;
  }


  public void setIsNonDeliverable(Boolean isNonDeliverable) {
    this.isNonDeliverable = isNonDeliverable;
  }


  public InterestRateSwap legs(List<InstrumentLeg> legs) {
    
    this.legs = legs;
    return this;
  }

  public InterestRateSwap addLegsItem(InstrumentLeg legsItem) {
    if (this.legs == null) {
      this.legs = new ArrayList<>();
    }
    this.legs.add(legsItem);
    return this;
  }

   /**
   * The set of instrument legs that define the swap instrument, these should be FloatingLeg or FixedLeg.
   * @return legs
  **/
  @jakarta.annotation.Nonnull
  public List<InstrumentLeg> getLegs() {
    return legs;
  }


  public void setLegs(List<InstrumentLeg> legs) {
    this.legs = legs;
  }


  public InterestRateSwap settlementCcy(String settlementCcy) {
    
    this.settlementCcy = settlementCcy;
    return this;
  }

   /**
   * Settlement currency if IRS is non-deliverable.
   * @return settlementCcy
  **/
  @jakarta.annotation.Nullable
  public String getSettlementCcy() {
    return settlementCcy;
  }


  public void setSettlementCcy(String settlementCcy) {
    this.settlementCcy = settlementCcy;
  }


  public InterestRateSwap additionalPayments(List<AdditionalPayment> additionalPayments) {
    
    this.additionalPayments = additionalPayments;
    return this;
  }

  public InterestRateSwap addAdditionalPaymentsItem(AdditionalPayment additionalPaymentsItem) {
    if (this.additionalPayments == null) {
      this.additionalPayments = new ArrayList<>();
    }
    this.additionalPayments.add(additionalPaymentsItem);
    return this;
  }

   /**
   * Optional additional payments at a given date e.g. to level off an uneven fixed-floating swap.  The dates must be distinct and either all payments are Pay or all payments are receive
   * @return additionalPayments
  **/
  @jakarta.annotation.Nullable
  public List<AdditionalPayment> getAdditionalPayments() {
    return additionalPayments;
  }


  public void setAdditionalPayments(List<AdditionalPayment> additionalPayments) {
    this.additionalPayments = additionalPayments;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InterestRateSwap interestRateSwap = (InterestRateSwap) o;
    return Objects.equals(this.startDate, interestRateSwap.startDate) &&
        Objects.equals(this.maturityDate, interestRateSwap.maturityDate) &&
        Objects.equals(this.isNonDeliverable, interestRateSwap.isNonDeliverable) &&
        Objects.equals(this.legs, interestRateSwap.legs) &&
        Objects.equals(this.settlementCcy, interestRateSwap.settlementCcy) &&
        Objects.equals(this.additionalPayments, interestRateSwap.additionalPayments) &&
        super.equals(o);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(startDate, maturityDate, isNonDeliverable, legs, settlementCcy, additionalPayments, super.hashCode());
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InterestRateSwap {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    maturityDate: ").append(toIndentedString(maturityDate)).append("\n");
    sb.append("    isNonDeliverable: ").append(toIndentedString(isNonDeliverable)).append("\n");
    sb.append("    legs: ").append(toIndentedString(legs)).append("\n");
    sb.append("    settlementCcy: ").append(toIndentedString(settlementCcy)).append("\n");
    sb.append("    additionalPayments: ").append(toIndentedString(additionalPayments)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("instrumentType");
    openapiFields.add("startDate");
    openapiFields.add("maturityDate");
    openapiFields.add("isNonDeliverable");
    openapiFields.add("legs");
    openapiFields.add("settlementCcy");
    openapiFields.add("additionalPayments");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("startDate");
    openapiRequiredFields.add("maturityDate");
    openapiRequiredFields.add("legs");
    openapiRequiredFields.add("instrumentType");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to InterestRateSwap
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!InterestRateSwap.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InterestRateSwap is not found in the empty JSON string", InterestRateSwap.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : InterestRateSwap.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InterestRateSwap.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InterestRateSwap' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InterestRateSwap> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InterestRateSwap.class));

       return (TypeAdapter<T>) new TypeAdapter<InterestRateSwap>() {
           @Override
           public void write(JsonWriter out, InterestRateSwap value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InterestRateSwap read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of InterestRateSwap given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of InterestRateSwap
  * @throws IOException if the JSON string is invalid with respect to InterestRateSwap
  */
  public static InterestRateSwap fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InterestRateSwap.class);
  }

 /**
  * Convert an instance of InterestRateSwap to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
