/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import com.finbourne.lusid.model.ResourceId;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * Entity to capture the calculable and queryable methods and practices of determining and transferring collateral  to a counterparty as part of margining of transactions. These typically come from a particular ISDA agreement  that is in place between the two counterparties.
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class CreditSupportAnnex {
  public static final String SERIALIZED_NAME_REFERENCE_CURRENCY = "referenceCurrency";
  @SerializedName(SERIALIZED_NAME_REFERENCE_CURRENCY)
  private String referenceCurrency;

  public static final String SERIALIZED_NAME_COLLATERAL_CURRENCIES = "collateralCurrencies";
  @SerializedName(SERIALIZED_NAME_COLLATERAL_CURRENCIES)
  private List<String> collateralCurrencies = new ArrayList<>();

  public static final String SERIALIZED_NAME_ISDA_AGREEMENT_VERSION = "isdaAgreementVersion";
  @SerializedName(SERIALIZED_NAME_ISDA_AGREEMENT_VERSION)
  private String isdaAgreementVersion;

  public static final String SERIALIZED_NAME_MARGIN_CALL_FREQUENCY = "marginCallFrequency";
  @SerializedName(SERIALIZED_NAME_MARGIN_CALL_FREQUENCY)
  private String marginCallFrequency;

  public static final String SERIALIZED_NAME_VALUATION_AGENT = "valuationAgent";
  @SerializedName(SERIALIZED_NAME_VALUATION_AGENT)
  private String valuationAgent;

  public static final String SERIALIZED_NAME_THRESHOLD_AMOUNT = "thresholdAmount";
  @SerializedName(SERIALIZED_NAME_THRESHOLD_AMOUNT)
  private java.math.BigDecimal thresholdAmount;

  public static final String SERIALIZED_NAME_ROUNDING_DECIMAL_PLACES = "roundingDecimalPlaces";
  @SerializedName(SERIALIZED_NAME_ROUNDING_DECIMAL_PLACES)
  private Integer roundingDecimalPlaces;

  public static final String SERIALIZED_NAME_INITIAL_MARGIN_AMOUNT = "initialMarginAmount";
  @SerializedName(SERIALIZED_NAME_INITIAL_MARGIN_AMOUNT)
  private java.math.BigDecimal initialMarginAmount;

  public static final String SERIALIZED_NAME_MINIMUM_TRANSFER_AMOUNT = "minimumTransferAmount";
  @SerializedName(SERIALIZED_NAME_MINIMUM_TRANSFER_AMOUNT)
  private java.math.BigDecimal minimumTransferAmount;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private ResourceId id;

  public CreditSupportAnnex() {
  }

  public CreditSupportAnnex referenceCurrency(String referenceCurrency) {
    
    this.referenceCurrency = referenceCurrency;
    return this;
  }

   /**
   * The base, or reference, currency against which MtM value and exposure should be calculated  and in which the CSA parameters are defined if the currency is not otherwise explicitly stated.
   * @return referenceCurrency
  **/
  @jakarta.annotation.Nonnull
  public String getReferenceCurrency() {
    return referenceCurrency;
  }


  public void setReferenceCurrency(String referenceCurrency) {
    this.referenceCurrency = referenceCurrency;
  }


  public CreditSupportAnnex collateralCurrencies(List<String> collateralCurrencies) {
    
    this.collateralCurrencies = collateralCurrencies;
    return this;
  }

  public CreditSupportAnnex addCollateralCurrenciesItem(String collateralCurrenciesItem) {
    if (this.collateralCurrencies == null) {
      this.collateralCurrencies = new ArrayList<>();
    }
    this.collateralCurrencies.add(collateralCurrenciesItem);
    return this;
  }

   /**
   * The set of currencies within which it is acceptable to post cash collateral.
   * @return collateralCurrencies
  **/
  @jakarta.annotation.Nonnull
  public List<String> getCollateralCurrencies() {
    return collateralCurrencies;
  }


  public void setCollateralCurrencies(List<String> collateralCurrencies) {
    this.collateralCurrencies = collateralCurrencies;
  }


  public CreditSupportAnnex isdaAgreementVersion(String isdaAgreementVersion) {
    
    this.isdaAgreementVersion = isdaAgreementVersion;
    return this;
  }

   /**
   * The transactions will take place with reference to a particular ISDA master agreement. This  will likely be either the ISDA 1992 or ISDA 2002 agremeents or ISDA close-out 2009.
   * @return isdaAgreementVersion
  **/
  @jakarta.annotation.Nonnull
  public String getIsdaAgreementVersion() {
    return isdaAgreementVersion;
  }


  public void setIsdaAgreementVersion(String isdaAgreementVersion) {
    this.isdaAgreementVersion = isdaAgreementVersion;
  }


  public CreditSupportAnnex marginCallFrequency(String marginCallFrequency) {
    
    this.marginCallFrequency = marginCallFrequency;
    return this;
  }

   /**
   * The tenor, e.g. daily (1D) or biweekly (2W), at which frequency a margin call will be made, calculations  made and money transferred to readjust. The calculation might also require a specific time for valuation and notification.
   * @return marginCallFrequency
  **/
  @jakarta.annotation.Nonnull
  public String getMarginCallFrequency() {
    return marginCallFrequency;
  }


  public void setMarginCallFrequency(String marginCallFrequency) {
    this.marginCallFrequency = marginCallFrequency;
  }


  public CreditSupportAnnex valuationAgent(String valuationAgent) {
    
    this.valuationAgent = valuationAgent;
    return this;
  }

   /**
   * Are the calculations performed by the institutions&#39;s counterparty or the institution trading with them.
   * @return valuationAgent
  **/
  @jakarta.annotation.Nonnull
  public String getValuationAgent() {
    return valuationAgent;
  }


  public void setValuationAgent(String valuationAgent) {
    this.valuationAgent = valuationAgent;
  }


  public CreditSupportAnnex thresholdAmount(java.math.BigDecimal thresholdAmount) {
    
    this.thresholdAmount = thresholdAmount;
    return this;
  }

   /**
   * At what level of exposure does collateral need to be posted. Will typically be zero for banks.  Should be stated in reference currency
   * @return thresholdAmount
  **/
  @jakarta.annotation.Nonnull
  public java.math.BigDecimal getThresholdAmount() {
    return thresholdAmount;
  }


  public void setThresholdAmount(java.math.BigDecimal thresholdAmount) {
    this.thresholdAmount = thresholdAmount;
  }


  public CreditSupportAnnex roundingDecimalPlaces(Integer roundingDecimalPlaces) {
    
    this.roundingDecimalPlaces = roundingDecimalPlaces;
    return this;
  }

   /**
   * Where a calculation needs to be rounded to a specific number of decimal places,  this states the number that that requires.
   * @return roundingDecimalPlaces
  **/
  @jakarta.annotation.Nonnull
  public Integer getRoundingDecimalPlaces() {
    return roundingDecimalPlaces;
  }


  public void setRoundingDecimalPlaces(Integer roundingDecimalPlaces) {
    this.roundingDecimalPlaces = roundingDecimalPlaces;
  }


  public CreditSupportAnnex initialMarginAmount(java.math.BigDecimal initialMarginAmount) {
    
    this.initialMarginAmount = initialMarginAmount;
    return this;
  }

   /**
   * The initial margin that is required. In the reference currency
   * @return initialMarginAmount
  **/
  @jakarta.annotation.Nonnull
  public java.math.BigDecimal getInitialMarginAmount() {
    return initialMarginAmount;
  }


  public void setInitialMarginAmount(java.math.BigDecimal initialMarginAmount) {
    this.initialMarginAmount = initialMarginAmount;
  }


  public CreditSupportAnnex minimumTransferAmount(java.math.BigDecimal minimumTransferAmount) {
    
    this.minimumTransferAmount = minimumTransferAmount;
    return this;
  }

   /**
   * The minimum amount, in the reference currency, that must be transferred when required.
   * @return minimumTransferAmount
  **/
  @jakarta.annotation.Nonnull
  public java.math.BigDecimal getMinimumTransferAmount() {
    return minimumTransferAmount;
  }


  public void setMinimumTransferAmount(java.math.BigDecimal minimumTransferAmount) {
    this.minimumTransferAmount = minimumTransferAmount;
  }


  public CreditSupportAnnex id(ResourceId id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @jakarta.annotation.Nonnull
  public ResourceId getId() {
    return id;
  }


  public void setId(ResourceId id) {
    this.id = id;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreditSupportAnnex creditSupportAnnex = (CreditSupportAnnex) o;
    return Objects.equals(this.referenceCurrency, creditSupportAnnex.referenceCurrency) &&
        Objects.equals(this.collateralCurrencies, creditSupportAnnex.collateralCurrencies) &&
        Objects.equals(this.isdaAgreementVersion, creditSupportAnnex.isdaAgreementVersion) &&
        Objects.equals(this.marginCallFrequency, creditSupportAnnex.marginCallFrequency) &&
        Objects.equals(this.valuationAgent, creditSupportAnnex.valuationAgent) &&
        (this.thresholdAmount.compareTo(creditSupportAnnex.getThresholdAmount()) == 0) &&
        Objects.equals(this.roundingDecimalPlaces, creditSupportAnnex.roundingDecimalPlaces) &&
        (this.initialMarginAmount.compareTo(creditSupportAnnex.getInitialMarginAmount()) == 0) &&
        (this.minimumTransferAmount.compareTo(creditSupportAnnex.getMinimumTransferAmount()) == 0) &&
        Objects.equals(this.id, creditSupportAnnex.id);
  }

  @Override
  public int hashCode() {
    return Objects.hash(referenceCurrency, collateralCurrencies, isdaAgreementVersion, marginCallFrequency, valuationAgent, thresholdAmount, roundingDecimalPlaces, initialMarginAmount, minimumTransferAmount, id);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreditSupportAnnex {\n");
    sb.append("    referenceCurrency: ").append(toIndentedString(referenceCurrency)).append("\n");
    sb.append("    collateralCurrencies: ").append(toIndentedString(collateralCurrencies)).append("\n");
    sb.append("    isdaAgreementVersion: ").append(toIndentedString(isdaAgreementVersion)).append("\n");
    sb.append("    marginCallFrequency: ").append(toIndentedString(marginCallFrequency)).append("\n");
    sb.append("    valuationAgent: ").append(toIndentedString(valuationAgent)).append("\n");
    sb.append("    thresholdAmount: ").append(toIndentedString(thresholdAmount)).append("\n");
    sb.append("    roundingDecimalPlaces: ").append(toIndentedString(roundingDecimalPlaces)).append("\n");
    sb.append("    initialMarginAmount: ").append(toIndentedString(initialMarginAmount)).append("\n");
    sb.append("    minimumTransferAmount: ").append(toIndentedString(minimumTransferAmount)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("referenceCurrency");
    openapiFields.add("collateralCurrencies");
    openapiFields.add("isdaAgreementVersion");
    openapiFields.add("marginCallFrequency");
    openapiFields.add("valuationAgent");
    openapiFields.add("thresholdAmount");
    openapiFields.add("roundingDecimalPlaces");
    openapiFields.add("initialMarginAmount");
    openapiFields.add("minimumTransferAmount");
    openapiFields.add("id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("referenceCurrency");
    openapiRequiredFields.add("collateralCurrencies");
    openapiRequiredFields.add("isdaAgreementVersion");
    openapiRequiredFields.add("marginCallFrequency");
    openapiRequiredFields.add("valuationAgent");
    openapiRequiredFields.add("thresholdAmount");
    openapiRequiredFields.add("roundingDecimalPlaces");
    openapiRequiredFields.add("initialMarginAmount");
    openapiRequiredFields.add("minimumTransferAmount");
    openapiRequiredFields.add("id");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CreditSupportAnnex
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!CreditSupportAnnex.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreditSupportAnnex is not found in the empty JSON string", CreditSupportAnnex.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!CreditSupportAnnex.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreditSupportAnnex` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreditSupportAnnex.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("referenceCurrency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `referenceCurrency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("referenceCurrency").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("collateralCurrencies") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("collateralCurrencies").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `collateralCurrencies` to be an array in the JSON string but got `%s`", jsonObj.get("collateralCurrencies").toString()));
      }
      if (!jsonObj.get("isdaAgreementVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `isdaAgreementVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("isdaAgreementVersion").toString()));
      }
      if (!jsonObj.get("marginCallFrequency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `marginCallFrequency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("marginCallFrequency").toString()));
      }
      if (!jsonObj.get("valuationAgent").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `valuationAgent` to be a primitive type in the JSON string but got `%s`", jsonObj.get("valuationAgent").toString()));
      }
      // validate the required field `id`
      ResourceId.validateJsonObject(jsonObj.getAsJsonObject("id"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreditSupportAnnex.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreditSupportAnnex' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreditSupportAnnex> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreditSupportAnnex.class));

       return (TypeAdapter<T>) new TypeAdapter<CreditSupportAnnex>() {
           @Override
           public void write(JsonWriter out, CreditSupportAnnex value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreditSupportAnnex read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CreditSupportAnnex given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CreditSupportAnnex
  * @throws IOException if the JSON string is invalid with respect to CreditSupportAnnex
  */
  public static CreditSupportAnnex fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreditSupportAnnex.class);
  }

 /**
  * Convert an instance of CreditSupportAnnex to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
