/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import com.finbourne.lusid.model.Link;
import com.finbourne.lusid.model.PropertyValue;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * DerivedPropertyComponent
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class DerivedPropertyComponent {
  public static final String SERIALIZED_NAME_COMPONENT = "component";
  @SerializedName(SERIALIZED_NAME_COMPONENT)
  private String component;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_VALUE = "value";
  @SerializedName(SERIALIZED_NAME_VALUE)
  private PropertyValue value;

  public static final String SERIALIZED_NAME_DERIVATION_FORMULA = "derivationFormula";
  @SerializedName(SERIALIZED_NAME_DERIVATION_FORMULA)
  private String derivationFormula;

  public static final String SERIALIZED_NAME_SUB_COMPONENTS = "subComponents";
  @SerializedName(SERIALIZED_NAME_SUB_COMPONENTS)
  private List<DerivedPropertyComponent> subComponents;

  public static final String SERIALIZED_NAME_LINKS = "links";
  @SerializedName(SERIALIZED_NAME_LINKS)
  private List<Link> links;

  public DerivedPropertyComponent() {
  }

  public DerivedPropertyComponent component(String component) {
    
    this.component = component;
    return this;
  }

   /**
   * The component of the formula which is being evaluated.
   * @return component
  **/
  @jakarta.annotation.Nullable
  public String getComponent() {
    return component;
  }


  public void setComponent(String component) {
    this.component = component;
  }


  public DerivedPropertyComponent type(String type) {
    
    this.type = type;
    return this;
  }

   /**
   * The type of the formula component. This can be a Literal, Variable, DerivedProperty, or PartialFormula.
   * @return type
  **/
  @jakarta.annotation.Nullable
  public String getType() {
    return type;
  }


  public void setType(String type) {
    this.type = type;
  }


  public DerivedPropertyComponent value(PropertyValue value) {
    
    this.value = value;
    return this;
  }

   /**
   * Get value
   * @return value
  **/
  @jakarta.annotation.Nullable
  public PropertyValue getValue() {
    return value;
  }


  public void setValue(PropertyValue value) {
    this.value = value;
  }


  public DerivedPropertyComponent derivationFormula(String derivationFormula) {
    
    this.derivationFormula = derivationFormula;
    return this;
  }

   /**
   * The derivation formula of the component. This field will only be populated if the component is a derived property.
   * @return derivationFormula
  **/
  @jakarta.annotation.Nullable
  public String getDerivationFormula() {
    return derivationFormula;
  }


  public void setDerivationFormula(String derivationFormula) {
    this.derivationFormula = derivationFormula;
  }


  public DerivedPropertyComponent subComponents(List<DerivedPropertyComponent> subComponents) {
    
    this.subComponents = subComponents;
    return this;
  }

  public DerivedPropertyComponent addSubComponentsItem(DerivedPropertyComponent subComponentsItem) {
    if (this.subComponents == null) {
      this.subComponents = new ArrayList<>();
    }
    this.subComponents.add(subComponentsItem);
    return this;
  }

   /**
   * Any sub-components of this formula. If this formula cannot be further decomposed, this collection will be null.
   * @return subComponents
  **/
  @jakarta.annotation.Nullable
  public List<DerivedPropertyComponent> getSubComponents() {
    return subComponents;
  }


  public void setSubComponents(List<DerivedPropertyComponent> subComponents) {
    this.subComponents = subComponents;
  }


  public DerivedPropertyComponent links(List<Link> links) {
    
    this.links = links;
    return this;
  }

  public DerivedPropertyComponent addLinksItem(Link linksItem) {
    if (this.links == null) {
      this.links = new ArrayList<>();
    }
    this.links.add(linksItem);
    return this;
  }

   /**
   * Get links
   * @return links
  **/
  @jakarta.annotation.Nullable
  public List<Link> getLinks() {
    return links;
  }


  public void setLinks(List<Link> links) {
    this.links = links;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DerivedPropertyComponent derivedPropertyComponent = (DerivedPropertyComponent) o;
    return Objects.equals(this.component, derivedPropertyComponent.component) &&
        Objects.equals(this.type, derivedPropertyComponent.type) &&
        Objects.equals(this.value, derivedPropertyComponent.value) &&
        Objects.equals(this.derivationFormula, derivedPropertyComponent.derivationFormula) &&
        Objects.equals(this.subComponents, derivedPropertyComponent.subComponents) &&
        Objects.equals(this.links, derivedPropertyComponent.links);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(component, type, value, derivationFormula, subComponents, links);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DerivedPropertyComponent {\n");
    sb.append("    component: ").append(toIndentedString(component)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("    derivationFormula: ").append(toIndentedString(derivationFormula)).append("\n");
    sb.append("    subComponents: ").append(toIndentedString(subComponents)).append("\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("component");
    openapiFields.add("type");
    openapiFields.add("value");
    openapiFields.add("derivationFormula");
    openapiFields.add("subComponents");
    openapiFields.add("links");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to DerivedPropertyComponent
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DerivedPropertyComponent.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DerivedPropertyComponent is not found in the empty JSON string", DerivedPropertyComponent.openapiRequiredFields.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("component") != null && !jsonObj.get("component").isJsonNull()) && !jsonObj.get("component").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `component` to be a primitive type in the JSON string but got `%s`", jsonObj.get("component").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `value`
      if (jsonObj.get("value") != null && !jsonObj.get("value").isJsonNull()) {
        PropertyValue.validateJsonElement(jsonObj.get("value"));
      }
      if ((jsonObj.get("derivationFormula") != null && !jsonObj.get("derivationFormula").isJsonNull()) && !jsonObj.get("derivationFormula").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `derivationFormula` to be a primitive type in the JSON string but got `%s`", jsonObj.get("derivationFormula").toString()));
      }
      if (jsonObj.get("subComponents") != null && !jsonObj.get("subComponents").isJsonNull()) {
        JsonArray jsonArraysubComponents = jsonObj.getAsJsonArray("subComponents");
        if (jsonArraysubComponents != null) {
          // ensure the json data is an array
          if (!jsonObj.get("subComponents").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `subComponents` to be an array in the JSON string but got `%s`", jsonObj.get("subComponents").toString()));
          }

          // validate the optional field `subComponents` (array)
          for (int i = 0; i < jsonArraysubComponents.size(); i++) {
            DerivedPropertyComponent.validateJsonElement(jsonArraysubComponents.get(i));
          };
        }
      }
      if (jsonObj.get("links") != null && !jsonObj.get("links").isJsonNull()) {
        JsonArray jsonArraylinks = jsonObj.getAsJsonArray("links");
        if (jsonArraylinks != null) {
          // ensure the json data is an array
          if (!jsonObj.get("links").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `links` to be an array in the JSON string but got `%s`", jsonObj.get("links").toString()));
          }

          // validate the optional field `links` (array)
          for (int i = 0; i < jsonArraylinks.size(); i++) {
            Link.validateJsonElement(jsonArraylinks.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DerivedPropertyComponent.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DerivedPropertyComponent' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DerivedPropertyComponent> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DerivedPropertyComponent.class));

       return (TypeAdapter<T>) new TypeAdapter<DerivedPropertyComponent>() {
           @Override
           public void write(JsonWriter out, DerivedPropertyComponent value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DerivedPropertyComponent read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of DerivedPropertyComponent given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of DerivedPropertyComponent
  * @throws IOException if the JSON string is invalid with respect to DerivedPropertyComponent
  */
  public static DerivedPropertyComponent fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DerivedPropertyComponent.class);
  }

 /**
  * Convert an instance of DerivedPropertyComponent to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
