/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * CDSs generally conform to fairly standard definitions, but can be tweaked in a number of different ways.  This class gathers a number of common features which may deviate. These will default to the market standard when  no overrides are provided.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class CdsProtectionDetailSpecification {
  public static final String SERIALIZED_NAME_SENIORITY = "seniority";
  @SerializedName(SERIALIZED_NAME_SENIORITY)
  private String seniority;

  public static final String SERIALIZED_NAME_RESTRUCTURING_TYPE = "restructuringType";
  @SerializedName(SERIALIZED_NAME_RESTRUCTURING_TYPE)
  private String restructuringType;

  public static final String SERIALIZED_NAME_PROTECT_START_DAY = "protectStartDay";
  @SerializedName(SERIALIZED_NAME_PROTECT_START_DAY)
  private Boolean protectStartDay;

  public static final String SERIALIZED_NAME_PAY_ACCRUED_INTEREST_ON_DEFAULT = "payAccruedInterestOnDefault";
  @SerializedName(SERIALIZED_NAME_PAY_ACCRUED_INTEREST_ON_DEFAULT)
  private Boolean payAccruedInterestOnDefault;

  public CdsProtectionDetailSpecification() {
  }

  public CdsProtectionDetailSpecification seniority(String seniority) {
    
    this.seniority = seniority;
    return this;
  }

   /**
   * The seniority level of the CDS.    Supported string (enumeration) values are: [SNR, SUB, JRSUBUT2, PREFT1, SECDOM, SNRFOR, SUBLT2].
   * @return seniority
  **/
  @javax.annotation.Nonnull
  public String getSeniority() {
    return seniority;
  }


  public void setSeniority(String seniority) {
    this.seniority = seniority;
  }


  public CdsProtectionDetailSpecification restructuringType(String restructuringType) {
    
    this.restructuringType = restructuringType;
    return this;
  }

   /**
   * The restructuring clause.  Supported string (enumeration) values are: [CR, MR, MM, XR].
   * @return restructuringType
  **/
  @javax.annotation.Nonnull
  public String getRestructuringType() {
    return restructuringType;
  }


  public void setRestructuringType(String restructuringType) {
    this.restructuringType = restructuringType;
  }


  public CdsProtectionDetailSpecification protectStartDay(Boolean protectStartDay) {
    
    this.protectStartDay = protectStartDay;
    return this;
  }

   /**
   * Does the protection leg pay out in the case of default on the start date.
   * @return protectStartDay
  **/
  @javax.annotation.Nonnull
  public Boolean getProtectStartDay() {
    return protectStartDay;
  }


  public void setProtectStartDay(Boolean protectStartDay) {
    this.protectStartDay = protectStartDay;
  }


  public CdsProtectionDetailSpecification payAccruedInterestOnDefault(Boolean payAccruedInterestOnDefault) {
    
    this.payAccruedInterestOnDefault = payAccruedInterestOnDefault;
    return this;
  }

   /**
   * Should accrued interest on the premium leg be paid if a credit event occurs.
   * @return payAccruedInterestOnDefault
  **/
  @javax.annotation.Nonnull
  public Boolean getPayAccruedInterestOnDefault() {
    return payAccruedInterestOnDefault;
  }


  public void setPayAccruedInterestOnDefault(Boolean payAccruedInterestOnDefault) {
    this.payAccruedInterestOnDefault = payAccruedInterestOnDefault;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CdsProtectionDetailSpecification cdsProtectionDetailSpecification = (CdsProtectionDetailSpecification) o;
    return Objects.equals(this.seniority, cdsProtectionDetailSpecification.seniority) &&
        Objects.equals(this.restructuringType, cdsProtectionDetailSpecification.restructuringType) &&
        Objects.equals(this.protectStartDay, cdsProtectionDetailSpecification.protectStartDay) &&
        Objects.equals(this.payAccruedInterestOnDefault, cdsProtectionDetailSpecification.payAccruedInterestOnDefault);
  }

  @Override
  public int hashCode() {
    return Objects.hash(seniority, restructuringType, protectStartDay, payAccruedInterestOnDefault);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CdsProtectionDetailSpecification {\n");
    sb.append("    seniority: ").append(toIndentedString(seniority)).append("\n");
    sb.append("    restructuringType: ").append(toIndentedString(restructuringType)).append("\n");
    sb.append("    protectStartDay: ").append(toIndentedString(protectStartDay)).append("\n");
    sb.append("    payAccruedInterestOnDefault: ").append(toIndentedString(payAccruedInterestOnDefault)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("seniority");
    openapiFields.add("restructuringType");
    openapiFields.add("protectStartDay");
    openapiFields.add("payAccruedInterestOnDefault");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("seniority");
    openapiRequiredFields.add("restructuringType");
    openapiRequiredFields.add("protectStartDay");
    openapiRequiredFields.add("payAccruedInterestOnDefault");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CdsProtectionDetailSpecification
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!CdsProtectionDetailSpecification.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CdsProtectionDetailSpecification is not found in the empty JSON string", CdsProtectionDetailSpecification.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!CdsProtectionDetailSpecification.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CdsProtectionDetailSpecification` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CdsProtectionDetailSpecification.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("seniority").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `seniority` to be a primitive type in the JSON string but got `%s`", jsonObj.get("seniority").toString()));
      }
      if (!jsonObj.get("restructuringType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `restructuringType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("restructuringType").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CdsProtectionDetailSpecification.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CdsProtectionDetailSpecification' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CdsProtectionDetailSpecification> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CdsProtectionDetailSpecification.class));

       return (TypeAdapter<T>) new TypeAdapter<CdsProtectionDetailSpecification>() {
           @Override
           public void write(JsonWriter out, CdsProtectionDetailSpecification value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CdsProtectionDetailSpecification read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CdsProtectionDetailSpecification given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CdsProtectionDetailSpecification
  * @throws IOException if the JSON string is invalid with respect to CdsProtectionDetailSpecification
  */
  public static CdsProtectionDetailSpecification fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CdsProtectionDetailSpecification.class);
  }

 /**
  * Convert an instance of CdsProtectionDetailSpecification to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
