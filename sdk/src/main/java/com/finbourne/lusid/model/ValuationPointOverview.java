/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import com.finbourne.lusid.model.Link;
import com.finbourne.lusid.model.Property;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.net.URI;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * ValuationPointOverview
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ValuationPointOverview {
  public static final String SERIALIZED_NAME_HREF = "href";
  @SerializedName(SERIALIZED_NAME_HREF)
  private URI href;

  public static final String SERIALIZED_NAME_DIARY_ENTRY_CODE = "diaryEntryCode";
  @SerializedName(SERIALIZED_NAME_DIARY_ENTRY_CODE)
  private String diaryEntryCode;

  public static final String SERIALIZED_NAME_EFFECTIVE_FROM = "effectiveFrom";
  @SerializedName(SERIALIZED_NAME_EFFECTIVE_FROM)
  private OffsetDateTime effectiveFrom;

  public static final String SERIALIZED_NAME_EFFECTIVE_TO = "effectiveTo";
  @SerializedName(SERIALIZED_NAME_EFFECTIVE_TO)
  private OffsetDateTime effectiveTo;

  public static final String SERIALIZED_NAME_QUERY_AS_AT = "queryAsAt";
  @SerializedName(SERIALIZED_NAME_QUERY_AS_AT)
  private OffsetDateTime queryAsAt;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_GAV = "gav";
  @SerializedName(SERIALIZED_NAME_GAV)
  private java.math.BigDecimal gav;

  public static final String SERIALIZED_NAME_NAV = "nav";
  @SerializedName(SERIALIZED_NAME_NAV)
  private java.math.BigDecimal nav;

  public static final String SERIALIZED_NAME_PROPERTIES = "properties";
  @SerializedName(SERIALIZED_NAME_PROPERTIES)
  private Map<String, Property> properties;

  public static final String SERIALIZED_NAME_LINKS = "links";
  @SerializedName(SERIALIZED_NAME_LINKS)
  private List<Link> links;

  public ValuationPointOverview() {
  }

  public ValuationPointOverview href(URI href) {
    
    this.href = href;
    return this;
  }

   /**
   * The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.
   * @return href
  **/
  @jakarta.annotation.Nullable
  public URI getHref() {
    return href;
  }


  public void setHref(URI href) {
    this.href = href;
  }


  public ValuationPointOverview diaryEntryCode(String diaryEntryCode) {
    
    this.diaryEntryCode = diaryEntryCode;
    return this;
  }

   /**
   * The code for the Valuation Point.
   * @return diaryEntryCode
  **/
  @jakarta.annotation.Nonnull
  public String getDiaryEntryCode() {
    return diaryEntryCode;
  }


  public void setDiaryEntryCode(String diaryEntryCode) {
    this.diaryEntryCode = diaryEntryCode;
  }


  public ValuationPointOverview effectiveFrom(OffsetDateTime effectiveFrom) {
    
    this.effectiveFrom = effectiveFrom;
    return this;
  }

   /**
   * The effective time of the last Valuation Point.
   * @return effectiveFrom
  **/
  @jakarta.annotation.Nonnull
  public OffsetDateTime getEffectiveFrom() {
    return effectiveFrom;
  }


  public void setEffectiveFrom(OffsetDateTime effectiveFrom) {
    this.effectiveFrom = effectiveFrom;
  }


  public ValuationPointOverview effectiveTo(OffsetDateTime effectiveTo) {
    
    this.effectiveTo = effectiveTo;
    return this;
  }

   /**
   * The effective time of the current Valuation Point.
   * @return effectiveTo
  **/
  @jakarta.annotation.Nonnull
  public OffsetDateTime getEffectiveTo() {
    return effectiveTo;
  }


  public void setEffectiveTo(OffsetDateTime effectiveTo) {
    this.effectiveTo = effectiveTo;
  }


  public ValuationPointOverview queryAsAt(OffsetDateTime queryAsAt) {
    
    this.queryAsAt = queryAsAt;
    return this;
  }

   /**
   * The query time of the Valuation Point. Defaults to latest.
   * @return queryAsAt
  **/
  @jakarta.annotation.Nullable
  public OffsetDateTime getQueryAsAt() {
    return queryAsAt;
  }


  public void setQueryAsAt(OffsetDateTime queryAsAt) {
    this.queryAsAt = queryAsAt;
  }


  public ValuationPointOverview type(String type) {
    
    this.type = type;
    return this;
  }

   /**
   * The type of the diary entry. This is &#39;ValuationPoint&#39;.
   * @return type
  **/
  @jakarta.annotation.Nonnull
  public String getType() {
    return type;
  }


  public void setType(String type) {
    this.type = type;
  }


  public ValuationPointOverview status(String status) {
    
    this.status = status;
    return this;
  }

   /**
   * The status of the Valuation Point. Can be &#39;Estimate&#39;, &#39;Candidate&#39; or &#39;Final&#39;.
   * @return status
  **/
  @jakarta.annotation.Nonnull
  public String getStatus() {
    return status;
  }


  public void setStatus(String status) {
    this.status = status;
  }


  public ValuationPointOverview gav(java.math.BigDecimal gav) {
    
    this.gav = gav;
    return this;
  }

   /**
   * The Gross Asset Value of the Fund or Share Class at the Valuation Point. This is effectively a summation of all Trial balance entries linked to accounts of types &#39;Asset&#39; and &#39;Liabilities&#39;.
   * @return gav
  **/
  @jakarta.annotation.Nonnull
  public java.math.BigDecimal getGav() {
    return gav;
  }


  public void setGav(java.math.BigDecimal gav) {
    this.gav = gav;
  }


  public ValuationPointOverview nav(java.math.BigDecimal nav) {
    
    this.nav = nav;
    return this;
  }

   /**
   * The Net Asset Value of the Fund or Share Class at the Valuation Point. This represents the GAV with any fees applied in the period.
   * @return nav
  **/
  @jakarta.annotation.Nonnull
  public java.math.BigDecimal getNav() {
    return nav;
  }


  public void setNav(java.math.BigDecimal nav) {
    this.nav = nav;
  }


  public ValuationPointOverview properties(Map<String, Property> properties) {
    
    this.properties = properties;
    return this;
  }

  public ValuationPointOverview putPropertiesItem(String key, Property propertiesItem) {
    if (this.properties == null) {
      this.properties = new HashMap<>();
    }
    this.properties.put(key, propertiesItem);
    return this;
  }

   /**
   * The Fee properties. These will be from the &#39;Fee&#39; domain.
   * @return properties
  **/
  @jakarta.annotation.Nullable
  public Map<String, Property> getProperties() {
    return properties;
  }


  public void setProperties(Map<String, Property> properties) {
    this.properties = properties;
  }


  public ValuationPointOverview links(List<Link> links) {
    
    this.links = links;
    return this;
  }

  public ValuationPointOverview addLinksItem(Link linksItem) {
    if (this.links == null) {
      this.links = new ArrayList<>();
    }
    this.links.add(linksItem);
    return this;
  }

   /**
   * Get links
   * @return links
  **/
  @jakarta.annotation.Nullable
  public List<Link> getLinks() {
    return links;
  }


  public void setLinks(List<Link> links) {
    this.links = links;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ValuationPointOverview valuationPointOverview = (ValuationPointOverview) o;
    return Objects.equals(this.href, valuationPointOverview.href) &&
        Objects.equals(this.diaryEntryCode, valuationPointOverview.diaryEntryCode) &&
        Objects.equals(this.effectiveFrom, valuationPointOverview.effectiveFrom) &&
        Objects.equals(this.effectiveTo, valuationPointOverview.effectiveTo) &&
        Objects.equals(this.queryAsAt, valuationPointOverview.queryAsAt) &&
        Objects.equals(this.type, valuationPointOverview.type) &&
        Objects.equals(this.status, valuationPointOverview.status) &&
        (this.gav.compareTo(valuationPointOverview.getGav()) == 0) &&
        (this.nav.compareTo(valuationPointOverview.getNav()) == 0) &&
        Objects.equals(this.properties, valuationPointOverview.properties) &&
        Objects.equals(this.links, valuationPointOverview.links);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(href, diaryEntryCode, effectiveFrom, effectiveTo, queryAsAt, type, status, gav, nav, properties, links);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ValuationPointOverview {\n");
    sb.append("    href: ").append(toIndentedString(href)).append("\n");
    sb.append("    diaryEntryCode: ").append(toIndentedString(diaryEntryCode)).append("\n");
    sb.append("    effectiveFrom: ").append(toIndentedString(effectiveFrom)).append("\n");
    sb.append("    effectiveTo: ").append(toIndentedString(effectiveTo)).append("\n");
    sb.append("    queryAsAt: ").append(toIndentedString(queryAsAt)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    gav: ").append(toIndentedString(gav)).append("\n");
    sb.append("    nav: ").append(toIndentedString(nav)).append("\n");
    sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("href");
    openapiFields.add("diaryEntryCode");
    openapiFields.add("effectiveFrom");
    openapiFields.add("effectiveTo");
    openapiFields.add("queryAsAt");
    openapiFields.add("type");
    openapiFields.add("status");
    openapiFields.add("gav");
    openapiFields.add("nav");
    openapiFields.add("properties");
    openapiFields.add("links");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("diaryEntryCode");
    openapiRequiredFields.add("effectiveFrom");
    openapiRequiredFields.add("effectiveTo");
    openapiRequiredFields.add("type");
    openapiRequiredFields.add("status");
    openapiRequiredFields.add("gav");
    openapiRequiredFields.add("nav");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ValuationPointOverview
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ValuationPointOverview.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ValuationPointOverview is not found in the empty JSON string", ValuationPointOverview.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ValuationPointOverview.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("href") != null && !jsonObj.get("href").isJsonNull()) && !jsonObj.get("href").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `href` to be a primitive type in the JSON string but got `%s`", jsonObj.get("href").toString()));
      }
      if (!jsonObj.get("diaryEntryCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `diaryEntryCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("diaryEntryCode").toString()));
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if (!jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if (jsonObj.get("links") != null && !jsonObj.get("links").isJsonNull()) {
        JsonArray jsonArraylinks = jsonObj.getAsJsonArray("links");
        if (jsonArraylinks != null) {
          // ensure the json data is an array
          if (!jsonObj.get("links").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `links` to be an array in the JSON string but got `%s`", jsonObj.get("links").toString()));
          }

          // validate the optional field `links` (array)
          for (int i = 0; i < jsonArraylinks.size(); i++) {
            Link.validateJsonElement(jsonArraylinks.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ValuationPointOverview.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ValuationPointOverview' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ValuationPointOverview> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ValuationPointOverview.class));

       return (TypeAdapter<T>) new TypeAdapter<ValuationPointOverview>() {
           @Override
           public void write(JsonWriter out, ValuationPointOverview value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ValuationPointOverview read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ValuationPointOverview given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ValuationPointOverview
  * @throws IOException if the JSON string is invalid with respect to ValuationPointOverview
  */
  public static ValuationPointOverview fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ValuationPointOverview.class);
  }

 /**
  * Convert an instance of ValuationPointOverview to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
