/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import com.finbourne.lusid.model.ComparisonAttributeValuePair;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * GroupReconciliationCoreAttributeValues
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class GroupReconciliationCoreAttributeValues {
  public static final String SERIALIZED_NAME_LEFT_CORE_ATTRIBUTES = "leftCoreAttributes";
  @SerializedName(SERIALIZED_NAME_LEFT_CORE_ATTRIBUTES)
  private List<ComparisonAttributeValuePair> leftCoreAttributes = new ArrayList<>();

  public static final String SERIALIZED_NAME_RIGHT_CORE_ATTRIBUTES = "rightCoreAttributes";
  @SerializedName(SERIALIZED_NAME_RIGHT_CORE_ATTRIBUTES)
  private List<ComparisonAttributeValuePair> rightCoreAttributes = new ArrayList<>();

  public GroupReconciliationCoreAttributeValues() {
  }

  public GroupReconciliationCoreAttributeValues leftCoreAttributes(List<ComparisonAttributeValuePair> leftCoreAttributes) {
    
    this.leftCoreAttributes = leftCoreAttributes;
    return this;
  }

  public GroupReconciliationCoreAttributeValues addLeftCoreAttributesItem(ComparisonAttributeValuePair leftCoreAttributesItem) {
    if (this.leftCoreAttributes == null) {
      this.leftCoreAttributes = new ArrayList<>();
    }
    this.leftCoreAttributes.add(leftCoreAttributesItem);
    return this;
  }

   /**
   * Core attribute names and values for the left hand entity being reconciled.
   * @return leftCoreAttributes
  **/
  @jakarta.annotation.Nonnull
  public List<ComparisonAttributeValuePair> getLeftCoreAttributes() {
    return leftCoreAttributes;
  }


  public void setLeftCoreAttributes(List<ComparisonAttributeValuePair> leftCoreAttributes) {
    this.leftCoreAttributes = leftCoreAttributes;
  }


  public GroupReconciliationCoreAttributeValues rightCoreAttributes(List<ComparisonAttributeValuePair> rightCoreAttributes) {
    
    this.rightCoreAttributes = rightCoreAttributes;
    return this;
  }

  public GroupReconciliationCoreAttributeValues addRightCoreAttributesItem(ComparisonAttributeValuePair rightCoreAttributesItem) {
    if (this.rightCoreAttributes == null) {
      this.rightCoreAttributes = new ArrayList<>();
    }
    this.rightCoreAttributes.add(rightCoreAttributesItem);
    return this;
  }

   /**
   * Core attribute names and values for the right hand entity being reconciled.
   * @return rightCoreAttributes
  **/
  @jakarta.annotation.Nonnull
  public List<ComparisonAttributeValuePair> getRightCoreAttributes() {
    return rightCoreAttributes;
  }


  public void setRightCoreAttributes(List<ComparisonAttributeValuePair> rightCoreAttributes) {
    this.rightCoreAttributes = rightCoreAttributes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GroupReconciliationCoreAttributeValues groupReconciliationCoreAttributeValues = (GroupReconciliationCoreAttributeValues) o;
    return Objects.equals(this.leftCoreAttributes, groupReconciliationCoreAttributeValues.leftCoreAttributes) &&
        Objects.equals(this.rightCoreAttributes, groupReconciliationCoreAttributeValues.rightCoreAttributes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(leftCoreAttributes, rightCoreAttributes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GroupReconciliationCoreAttributeValues {\n");
    sb.append("    leftCoreAttributes: ").append(toIndentedString(leftCoreAttributes)).append("\n");
    sb.append("    rightCoreAttributes: ").append(toIndentedString(rightCoreAttributes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("leftCoreAttributes");
    openapiFields.add("rightCoreAttributes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("leftCoreAttributes");
    openapiRequiredFields.add("rightCoreAttributes");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to GroupReconciliationCoreAttributeValues
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GroupReconciliationCoreAttributeValues.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GroupReconciliationCoreAttributeValues is not found in the empty JSON string", GroupReconciliationCoreAttributeValues.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GroupReconciliationCoreAttributeValues.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the json data is an array
      if (!jsonObj.get("leftCoreAttributes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `leftCoreAttributes` to be an array in the JSON string but got `%s`", jsonObj.get("leftCoreAttributes").toString()));
      }

      JsonArray jsonArrayleftCoreAttributes = jsonObj.getAsJsonArray("leftCoreAttributes");
      // validate the required field `leftCoreAttributes` (array)
      for (int i = 0; i < jsonArrayleftCoreAttributes.size(); i++) {
        ComparisonAttributeValuePair.validateJsonElement(jsonArrayleftCoreAttributes.get(i));
      };
      // ensure the json data is an array
      if (!jsonObj.get("rightCoreAttributes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `rightCoreAttributes` to be an array in the JSON string but got `%s`", jsonObj.get("rightCoreAttributes").toString()));
      }

      JsonArray jsonArrayrightCoreAttributes = jsonObj.getAsJsonArray("rightCoreAttributes");
      // validate the required field `rightCoreAttributes` (array)
      for (int i = 0; i < jsonArrayrightCoreAttributes.size(); i++) {
        ComparisonAttributeValuePair.validateJsonElement(jsonArrayrightCoreAttributes.get(i));
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GroupReconciliationCoreAttributeValues.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GroupReconciliationCoreAttributeValues' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GroupReconciliationCoreAttributeValues> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GroupReconciliationCoreAttributeValues.class));

       return (TypeAdapter<T>) new TypeAdapter<GroupReconciliationCoreAttributeValues>() {
           @Override
           public void write(JsonWriter out, GroupReconciliationCoreAttributeValues value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GroupReconciliationCoreAttributeValues read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of GroupReconciliationCoreAttributeValues given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of GroupReconciliationCoreAttributeValues
  * @throws IOException if the JSON string is invalid with respect to GroupReconciliationCoreAttributeValues
  */
  public static GroupReconciliationCoreAttributeValues fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GroupReconciliationCoreAttributeValues.class);
  }

 /**
  * Convert an instance of GroupReconciliationCoreAttributeValues to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
