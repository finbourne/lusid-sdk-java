/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * PropertyFilter
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class PropertyFilter {
  public static final String SERIALIZED_NAME_LEFT = "left";
  @SerializedName(SERIALIZED_NAME_LEFT)
  private String left;

  /**
   * The available values are: Equals, NotEquals, GreaterThan, GreaterThanOrEqualTo, LessThan, LessThanOrEqualTo, In
   */
  @JsonAdapter(OperatorEnum.Adapter.class)
  public enum OperatorEnum {
    EQUALS("Equals"),
    
    NOTEQUALS("NotEquals"),
    
    GREATERTHAN("GreaterThan"),
    
    GREATERTHANOREQUALTO("GreaterThanOrEqualTo"),
    
    LESSTHAN("LessThan"),
    
    LESSTHANOREQUALTO("LessThanOrEqualTo"),
    
    IN("In");

    private String value;

    OperatorEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OperatorEnum fromValue(String value) {
      for (OperatorEnum b : OperatorEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OperatorEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OperatorEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OperatorEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OperatorEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_OPERATOR = "operator";
  @SerializedName(SERIALIZED_NAME_OPERATOR)
  private OperatorEnum operator;

  public static final String SERIALIZED_NAME_RIGHT = "right";
  @SerializedName(SERIALIZED_NAME_RIGHT)
  private Object right = null;

  /**
   * The available values are: Absolute, Property
   */
  @JsonAdapter(RightOperandTypeEnum.Adapter.class)
  public enum RightOperandTypeEnum {
    ABSOLUTE("Absolute"),
    
    PROPERTY("Property");

    private String value;

    RightOperandTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RightOperandTypeEnum fromValue(String value) {
      for (RightOperandTypeEnum b : RightOperandTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RightOperandTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RightOperandTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RightOperandTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RightOperandTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_RIGHT_OPERAND_TYPE = "rightOperandType";
  @SerializedName(SERIALIZED_NAME_RIGHT_OPERAND_TYPE)
  private RightOperandTypeEnum rightOperandType;

  public PropertyFilter() {
  }

  public PropertyFilter left(String left) {
    
    this.left = left;
    return this;
  }

   /**
   * The key that uniquely identifies a queryable address in Lusid.
   * @return left
  **/
  @javax.annotation.Nullable
  public String getLeft() {
    return left;
  }


  public void setLeft(String left) {
    this.left = left;
  }


  public PropertyFilter operator(OperatorEnum operator) {
    
    this.operator = operator;
    return this;
  }

   /**
   * The available values are: Equals, NotEquals, GreaterThan, GreaterThanOrEqualTo, LessThan, LessThanOrEqualTo, In
   * @return operator
  **/
  @javax.annotation.Nullable
  public OperatorEnum getOperator() {
    return operator;
  }


  public void setOperator(OperatorEnum operator) {
    this.operator = operator;
  }


  public PropertyFilter right(Object right) {
    
    this.right = right;
    return this;
  }

   /**
   * Get right
   * @return right
  **/
  @javax.annotation.Nullable
  public Object getRight() {
    return right;
  }


  public void setRight(Object right) {
    this.right = right;
  }


  public PropertyFilter rightOperandType(RightOperandTypeEnum rightOperandType) {
    
    this.rightOperandType = rightOperandType;
    return this;
  }

   /**
   * The available values are: Absolute, Property
   * @return rightOperandType
  **/
  @javax.annotation.Nullable
  public RightOperandTypeEnum getRightOperandType() {
    return rightOperandType;
  }


  public void setRightOperandType(RightOperandTypeEnum rightOperandType) {
    this.rightOperandType = rightOperandType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PropertyFilter propertyFilter = (PropertyFilter) o;
    return Objects.equals(this.left, propertyFilter.left) &&
        Objects.equals(this.operator, propertyFilter.operator) &&
        Objects.equals(this.right, propertyFilter.right) &&
        Objects.equals(this.rightOperandType, propertyFilter.rightOperandType);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(left, operator, right, rightOperandType);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PropertyFilter {\n");
    sb.append("    left: ").append(toIndentedString(left)).append("\n");
    sb.append("    operator: ").append(toIndentedString(operator)).append("\n");
    sb.append("    right: ").append(toIndentedString(right)).append("\n");
    sb.append("    rightOperandType: ").append(toIndentedString(rightOperandType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("left");
    openapiFields.add("operator");
    openapiFields.add("right");
    openapiFields.add("rightOperandType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to PropertyFilter
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!PropertyFilter.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PropertyFilter is not found in the empty JSON string", PropertyFilter.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!PropertyFilter.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PropertyFilter` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("left") != null && !jsonObj.get("left").isJsonNull()) && !jsonObj.get("left").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `left` to be a primitive type in the JSON string but got `%s`", jsonObj.get("left").toString()));
      }
      if ((jsonObj.get("operator") != null && !jsonObj.get("operator").isJsonNull()) && !jsonObj.get("operator").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `operator` to be a primitive type in the JSON string but got `%s`", jsonObj.get("operator").toString()));
      }
      if ((jsonObj.get("rightOperandType") != null && !jsonObj.get("rightOperandType").isJsonNull()) && !jsonObj.get("rightOperandType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rightOperandType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rightOperandType").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PropertyFilter.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PropertyFilter' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PropertyFilter> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PropertyFilter.class));

       return (TypeAdapter<T>) new TypeAdapter<PropertyFilter>() {
           @Override
           public void write(JsonWriter out, PropertyFilter value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PropertyFilter read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PropertyFilter given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PropertyFilter
  * @throws IOException if the JSON string is invalid with respect to PropertyFilter
  */
  public static PropertyFilter fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PropertyFilter.class);
  }

 /**
  * Convert an instance of PropertyFilter to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
