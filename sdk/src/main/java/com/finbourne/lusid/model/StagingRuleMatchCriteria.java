/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * StagingRuleMatchCriteria
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class StagingRuleMatchCriteria {
  public static final String SERIALIZED_NAME_ACTION_IN = "actionIn";
  @SerializedName(SERIALIZED_NAME_ACTION_IN)
  private List<String> actionIn;

  public static final String SERIALIZED_NAME_REQUESTING_USER = "requestingUser";
  @SerializedName(SERIALIZED_NAME_REQUESTING_USER)
  private String requestingUser;

  public static final String SERIALIZED_NAME_ENTITY_ATTRIBUTES = "entityAttributes";
  @SerializedName(SERIALIZED_NAME_ENTITY_ATTRIBUTES)
  private String entityAttributes;

  public static final String SERIALIZED_NAME_CHANGED_ATTRIBUTE_NAME_IN = "changedAttributeNameIn";
  @SerializedName(SERIALIZED_NAME_CHANGED_ATTRIBUTE_NAME_IN)
  private List<String> changedAttributeNameIn;

  public StagingRuleMatchCriteria() {
  }

  public StagingRuleMatchCriteria actionIn(List<String> actionIn) {
    
    this.actionIn = actionIn;
    return this;
  }

  public StagingRuleMatchCriteria addActionInItem(String actionInItem) {
    if (this.actionIn == null) {
      this.actionIn = new ArrayList<>();
    }
    this.actionIn.add(actionInItem);
    return this;
  }

   /**
   * Get actionIn
   * @return actionIn
  **/
  @jakarta.annotation.Nullable
  public List<String> getActionIn() {
    return actionIn;
  }


  public void setActionIn(List<String> actionIn) {
    this.actionIn = actionIn;
  }


  public StagingRuleMatchCriteria requestingUser(String requestingUser) {
    
    this.requestingUser = requestingUser;
    return this;
  }

   /**
   * Get requestingUser
   * @return requestingUser
  **/
  @jakarta.annotation.Nullable
  public String getRequestingUser() {
    return requestingUser;
  }


  public void setRequestingUser(String requestingUser) {
    this.requestingUser = requestingUser;
  }


  public StagingRuleMatchCriteria entityAttributes(String entityAttributes) {
    
    this.entityAttributes = entityAttributes;
    return this;
  }

   /**
   * Get entityAttributes
   * @return entityAttributes
  **/
  @jakarta.annotation.Nullable
  public String getEntityAttributes() {
    return entityAttributes;
  }


  public void setEntityAttributes(String entityAttributes) {
    this.entityAttributes = entityAttributes;
  }


  public StagingRuleMatchCriteria changedAttributeNameIn(List<String> changedAttributeNameIn) {
    
    this.changedAttributeNameIn = changedAttributeNameIn;
    return this;
  }

  public StagingRuleMatchCriteria addChangedAttributeNameInItem(String changedAttributeNameInItem) {
    if (this.changedAttributeNameIn == null) {
      this.changedAttributeNameIn = new ArrayList<>();
    }
    this.changedAttributeNameIn.add(changedAttributeNameInItem);
    return this;
  }

   /**
   * Get changedAttributeNameIn
   * @return changedAttributeNameIn
  **/
  @jakarta.annotation.Nullable
  public List<String> getChangedAttributeNameIn() {
    return changedAttributeNameIn;
  }


  public void setChangedAttributeNameIn(List<String> changedAttributeNameIn) {
    this.changedAttributeNameIn = changedAttributeNameIn;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StagingRuleMatchCriteria stagingRuleMatchCriteria = (StagingRuleMatchCriteria) o;
    return Objects.equals(this.actionIn, stagingRuleMatchCriteria.actionIn) &&
        Objects.equals(this.requestingUser, stagingRuleMatchCriteria.requestingUser) &&
        Objects.equals(this.entityAttributes, stagingRuleMatchCriteria.entityAttributes) &&
        Objects.equals(this.changedAttributeNameIn, stagingRuleMatchCriteria.changedAttributeNameIn);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(actionIn, requestingUser, entityAttributes, changedAttributeNameIn);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StagingRuleMatchCriteria {\n");
    sb.append("    actionIn: ").append(toIndentedString(actionIn)).append("\n");
    sb.append("    requestingUser: ").append(toIndentedString(requestingUser)).append("\n");
    sb.append("    entityAttributes: ").append(toIndentedString(entityAttributes)).append("\n");
    sb.append("    changedAttributeNameIn: ").append(toIndentedString(changedAttributeNameIn)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("actionIn");
    openapiFields.add("requestingUser");
    openapiFields.add("entityAttributes");
    openapiFields.add("changedAttributeNameIn");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to StagingRuleMatchCriteria
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StagingRuleMatchCriteria.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StagingRuleMatchCriteria is not found in the empty JSON string", StagingRuleMatchCriteria.openapiRequiredFields.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("actionIn") != null && !jsonObj.get("actionIn").isJsonNull() && !jsonObj.get("actionIn").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `actionIn` to be an array in the JSON string but got `%s`", jsonObj.get("actionIn").toString()));
      }
      if ((jsonObj.get("requestingUser") != null && !jsonObj.get("requestingUser").isJsonNull()) && !jsonObj.get("requestingUser").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `requestingUser` to be a primitive type in the JSON string but got `%s`", jsonObj.get("requestingUser").toString()));
      }
      if ((jsonObj.get("entityAttributes") != null && !jsonObj.get("entityAttributes").isJsonNull()) && !jsonObj.get("entityAttributes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `entityAttributes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("entityAttributes").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("changedAttributeNameIn") != null && !jsonObj.get("changedAttributeNameIn").isJsonNull() && !jsonObj.get("changedAttributeNameIn").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `changedAttributeNameIn` to be an array in the JSON string but got `%s`", jsonObj.get("changedAttributeNameIn").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StagingRuleMatchCriteria.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StagingRuleMatchCriteria' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StagingRuleMatchCriteria> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StagingRuleMatchCriteria.class));

       return (TypeAdapter<T>) new TypeAdapter<StagingRuleMatchCriteria>() {
           @Override
           public void write(JsonWriter out, StagingRuleMatchCriteria value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StagingRuleMatchCriteria read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of StagingRuleMatchCriteria given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of StagingRuleMatchCriteria
  * @throws IOException if the JSON string is invalid with respect to StagingRuleMatchCriteria
  */
  public static StagingRuleMatchCriteria fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StagingRuleMatchCriteria.class);
  }

 /**
  * Convert an instance of StagingRuleMatchCriteria to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
