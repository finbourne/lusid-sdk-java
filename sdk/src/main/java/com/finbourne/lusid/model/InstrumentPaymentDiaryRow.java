/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * An individual row containing details of a single cashflow in the diary.
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class InstrumentPaymentDiaryRow {
  public static final String SERIALIZED_NAME_QUANTITY = "quantity";
  @SerializedName(SERIALIZED_NAME_QUANTITY)
  private java.math.BigDecimal quantity;

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private String currency;

  public static final String SERIALIZED_NAME_PAYMENT_DATE = "paymentDate";
  @SerializedName(SERIALIZED_NAME_PAYMENT_DATE)
  private OffsetDateTime paymentDate;

  public static final String SERIALIZED_NAME_PAY_OR_RECEIVE = "payOrReceive";
  @SerializedName(SERIALIZED_NAME_PAY_OR_RECEIVE)
  private String payOrReceive;

  public static final String SERIALIZED_NAME_ACCRUAL_START = "accrualStart";
  @SerializedName(SERIALIZED_NAME_ACCRUAL_START)
  private OffsetDateTime accrualStart;

  public static final String SERIALIZED_NAME_ACCRUAL_END = "accrualEnd";
  @SerializedName(SERIALIZED_NAME_ACCRUAL_END)
  private OffsetDateTime accrualEnd;

  public static final String SERIALIZED_NAME_CASH_FLOW_TYPE = "cashFlowType";
  @SerializedName(SERIALIZED_NAME_CASH_FLOW_TYPE)
  private String cashFlowType;

  public static final String SERIALIZED_NAME_IS_CASH_FLOW_DETERMINED = "isCashFlowDetermined";
  @SerializedName(SERIALIZED_NAME_IS_CASH_FLOW_DETERMINED)
  private Boolean isCashFlowDetermined;

  public static final String SERIALIZED_NAME_IS_CASH_FLOW_HISTORIC = "isCashFlowHistoric";
  @SerializedName(SERIALIZED_NAME_IS_CASH_FLOW_HISTORIC)
  private Boolean isCashFlowHistoric;

  public static final String SERIALIZED_NAME_DISCOUNT_FACTOR = "discountFactor";
  @SerializedName(SERIALIZED_NAME_DISCOUNT_FACTOR)
  private java.math.BigDecimal discountFactor;

  public static final String SERIALIZED_NAME_DISCOUNTED_EXPECTED_CASH_FLOW_AMOUNT = "discountedExpectedCashFlowAmount";
  @SerializedName(SERIALIZED_NAME_DISCOUNTED_EXPECTED_CASH_FLOW_AMOUNT)
  private java.math.BigDecimal discountedExpectedCashFlowAmount;

  public static final String SERIALIZED_NAME_DAY_COUNT_FRACTION = "dayCountFraction";
  @SerializedName(SERIALIZED_NAME_DAY_COUNT_FRACTION)
  private java.math.BigDecimal dayCountFraction;

  public static final String SERIALIZED_NAME_FORWARD_RATE = "forwardRate";
  @SerializedName(SERIALIZED_NAME_FORWARD_RATE)
  private java.math.BigDecimal forwardRate;

  public static final String SERIALIZED_NAME_RESET_RATE = "resetRate";
  @SerializedName(SERIALIZED_NAME_RESET_RATE)
  private java.math.BigDecimal resetRate;

  public static final String SERIALIZED_NAME_SPREAD = "spread";
  @SerializedName(SERIALIZED_NAME_SPREAD)
  private java.math.BigDecimal spread;

  public InstrumentPaymentDiaryRow() {
  }

  public InstrumentPaymentDiaryRow quantity(java.math.BigDecimal quantity) {
    
    this.quantity = quantity;
    return this;
  }

   /**
   * The quantity (amount) that will be paid. Note that this can be empty if the payment is in the future and a model is used that cannot estimate it.
   * @return quantity
  **/
  @jakarta.annotation.Nullable
  public java.math.BigDecimal getQuantity() {
    return quantity;
  }


  public void setQuantity(java.math.BigDecimal quantity) {
    this.quantity = quantity;
  }


  public InstrumentPaymentDiaryRow currency(String currency) {
    
    this.currency = currency;
    return this;
  }

   /**
   * The payment currency of the cash flow.
   * @return currency
  **/
  @jakarta.annotation.Nullable
  public String getCurrency() {
    return currency;
  }


  public void setCurrency(String currency) {
    this.currency = currency;
  }


  public InstrumentPaymentDiaryRow paymentDate(OffsetDateTime paymentDate) {
    
    this.paymentDate = paymentDate;
    return this;
  }

   /**
   * The date at which the given cash flow is due to be paid.
   * @return paymentDate
  **/
  @jakarta.annotation.Nullable
  public OffsetDateTime getPaymentDate() {
    return paymentDate;
  }


  public void setPaymentDate(OffsetDateTime paymentDate) {
    this.paymentDate = paymentDate;
  }


  public InstrumentPaymentDiaryRow payOrReceive(String payOrReceive) {
    
    this.payOrReceive = payOrReceive;
    return this;
  }

   /**
   * Does the cash flow belong to the Pay or Receive leg.
   * @return payOrReceive
  **/
  @jakarta.annotation.Nullable
  public String getPayOrReceive() {
    return payOrReceive;
  }


  public void setPayOrReceive(String payOrReceive) {
    this.payOrReceive = payOrReceive;
  }


  public InstrumentPaymentDiaryRow accrualStart(OffsetDateTime accrualStart) {
    
    this.accrualStart = accrualStart;
    return this;
  }

   /**
   * The date on which accruals start for this cashflow.
   * @return accrualStart
  **/
  @jakarta.annotation.Nullable
  public OffsetDateTime getAccrualStart() {
    return accrualStart;
  }


  public void setAccrualStart(OffsetDateTime accrualStart) {
    this.accrualStart = accrualStart;
  }


  public InstrumentPaymentDiaryRow accrualEnd(OffsetDateTime accrualEnd) {
    
    this.accrualEnd = accrualEnd;
    return this;
  }

   /**
   * The date on which accruals end for this cashflow.
   * @return accrualEnd
  **/
  @jakarta.annotation.Nullable
  public OffsetDateTime getAccrualEnd() {
    return accrualEnd;
  }


  public void setAccrualEnd(OffsetDateTime accrualEnd) {
    this.accrualEnd = accrualEnd;
  }


  public InstrumentPaymentDiaryRow cashFlowType(String cashFlowType) {
    
    this.cashFlowType = cashFlowType;
    return this;
  }

   /**
   * The type of cashflow.
   * @return cashFlowType
  **/
  @jakarta.annotation.Nullable
  public String getCashFlowType() {
    return cashFlowType;
  }


  public void setCashFlowType(String cashFlowType) {
    this.cashFlowType = cashFlowType;
  }


  public InstrumentPaymentDiaryRow isCashFlowDetermined(Boolean isCashFlowDetermined) {
    
    this.isCashFlowDetermined = isCashFlowDetermined;
    return this;
  }

   /**
   * Is the cashflow determined as of the effective date time.
   * @return isCashFlowDetermined
  **/
  @jakarta.annotation.Nullable
  public Boolean getIsCashFlowDetermined() {
    return isCashFlowDetermined;
  }


  public void setIsCashFlowDetermined(Boolean isCashFlowDetermined) {
    this.isCashFlowDetermined = isCashFlowDetermined;
  }


  public InstrumentPaymentDiaryRow isCashFlowHistoric(Boolean isCashFlowHistoric) {
    
    this.isCashFlowHistoric = isCashFlowHistoric;
    return this;
  }

   /**
   * Has the cashflow been paid, i.e. has it become a historic cashflow, as of the date and time pointed to be effectiveAt.
   * @return isCashFlowHistoric
  **/
  @jakarta.annotation.Nullable
  public Boolean getIsCashFlowHistoric() {
    return isCashFlowHistoric;
  }


  public void setIsCashFlowHistoric(Boolean isCashFlowHistoric) {
    this.isCashFlowHistoric = isCashFlowHistoric;
  }


  public InstrumentPaymentDiaryRow discountFactor(java.math.BigDecimal discountFactor) {
    
    this.discountFactor = discountFactor;
    return this;
  }

   /**
   * Weighting factor to discount cashflow to the present value.
   * @return discountFactor
  **/
  @jakarta.annotation.Nullable
  public java.math.BigDecimal getDiscountFactor() {
    return discountFactor;
  }


  public void setDiscountFactor(java.math.BigDecimal discountFactor) {
    this.discountFactor = discountFactor;
  }


  public InstrumentPaymentDiaryRow discountedExpectedCashFlowAmount(java.math.BigDecimal discountedExpectedCashFlowAmount) {
    
    this.discountedExpectedCashFlowAmount = discountedExpectedCashFlowAmount;
    return this;
  }

   /**
   * The expected cashflow amount taking into account the discount factor.
   * @return discountedExpectedCashFlowAmount
  **/
  @jakarta.annotation.Nullable
  public java.math.BigDecimal getDiscountedExpectedCashFlowAmount() {
    return discountedExpectedCashFlowAmount;
  }


  public void setDiscountedExpectedCashFlowAmount(java.math.BigDecimal discountedExpectedCashFlowAmount) {
    this.discountedExpectedCashFlowAmount = discountedExpectedCashFlowAmount;
  }


  public InstrumentPaymentDiaryRow dayCountFraction(java.math.BigDecimal dayCountFraction) {
    
    this.dayCountFraction = dayCountFraction;
    return this;
  }

   /**
   * The day count fraction, if appropriate.
   * @return dayCountFraction
  **/
  @jakarta.annotation.Nullable
  public java.math.BigDecimal getDayCountFraction() {
    return dayCountFraction;
  }


  public void setDayCountFraction(java.math.BigDecimal dayCountFraction) {
    this.dayCountFraction = dayCountFraction;
  }


  public InstrumentPaymentDiaryRow forwardRate(java.math.BigDecimal forwardRate) {
    
    this.forwardRate = forwardRate;
    return this;
  }

   /**
   * Forward rate for cash flow if appropriate. (as in for a rates fixed or floating leg)
   * @return forwardRate
  **/
  @jakarta.annotation.Nullable
  public java.math.BigDecimal getForwardRate() {
    return forwardRate;
  }


  public void setForwardRate(java.math.BigDecimal forwardRate) {
    this.forwardRate = forwardRate;
  }


  public InstrumentPaymentDiaryRow resetRate(java.math.BigDecimal resetRate) {
    
    this.resetRate = resetRate;
    return this;
  }

   /**
   * The value of the reset, if any.
   * @return resetRate
  **/
  @jakarta.annotation.Nullable
  public java.math.BigDecimal getResetRate() {
    return resetRate;
  }


  public void setResetRate(java.math.BigDecimal resetRate) {
    this.resetRate = resetRate;
  }


  public InstrumentPaymentDiaryRow spread(java.math.BigDecimal spread) {
    
    this.spread = spread;
    return this;
  }

   /**
   * The spread that exists on the payoff.
   * @return spread
  **/
  @jakarta.annotation.Nullable
  public java.math.BigDecimal getSpread() {
    return spread;
  }


  public void setSpread(java.math.BigDecimal spread) {
    this.spread = spread;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InstrumentPaymentDiaryRow instrumentPaymentDiaryRow = (InstrumentPaymentDiaryRow) o;
    return (this.quantity.compareTo(instrumentPaymentDiaryRow.getQuantity()) == 0) &&
        Objects.equals(this.currency, instrumentPaymentDiaryRow.currency) &&
        Objects.equals(this.paymentDate, instrumentPaymentDiaryRow.paymentDate) &&
        Objects.equals(this.payOrReceive, instrumentPaymentDiaryRow.payOrReceive) &&
        Objects.equals(this.accrualStart, instrumentPaymentDiaryRow.accrualStart) &&
        Objects.equals(this.accrualEnd, instrumentPaymentDiaryRow.accrualEnd) &&
        Objects.equals(this.cashFlowType, instrumentPaymentDiaryRow.cashFlowType) &&
        Objects.equals(this.isCashFlowDetermined, instrumentPaymentDiaryRow.isCashFlowDetermined) &&
        Objects.equals(this.isCashFlowHistoric, instrumentPaymentDiaryRow.isCashFlowHistoric) &&
        (this.discountFactor.compareTo(instrumentPaymentDiaryRow.getDiscountFactor()) == 0) &&
        (this.discountedExpectedCashFlowAmount.compareTo(instrumentPaymentDiaryRow.getDiscountedExpectedCashFlowAmount()) == 0) &&
        (this.dayCountFraction.compareTo(instrumentPaymentDiaryRow.getDayCountFraction()) == 0) &&
        (this.forwardRate.compareTo(instrumentPaymentDiaryRow.getForwardRate()) == 0) &&
        (this.resetRate.compareTo(instrumentPaymentDiaryRow.getResetRate()) == 0) &&
        (this.spread.compareTo(instrumentPaymentDiaryRow.getSpread()) == 0);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(quantity, currency, paymentDate, payOrReceive, accrualStart, accrualEnd, cashFlowType, isCashFlowDetermined, isCashFlowHistoric, discountFactor, discountedExpectedCashFlowAmount, dayCountFraction, forwardRate, resetRate, spread);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InstrumentPaymentDiaryRow {\n");
    sb.append("    quantity: ").append(toIndentedString(quantity)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    paymentDate: ").append(toIndentedString(paymentDate)).append("\n");
    sb.append("    payOrReceive: ").append(toIndentedString(payOrReceive)).append("\n");
    sb.append("    accrualStart: ").append(toIndentedString(accrualStart)).append("\n");
    sb.append("    accrualEnd: ").append(toIndentedString(accrualEnd)).append("\n");
    sb.append("    cashFlowType: ").append(toIndentedString(cashFlowType)).append("\n");
    sb.append("    isCashFlowDetermined: ").append(toIndentedString(isCashFlowDetermined)).append("\n");
    sb.append("    isCashFlowHistoric: ").append(toIndentedString(isCashFlowHistoric)).append("\n");
    sb.append("    discountFactor: ").append(toIndentedString(discountFactor)).append("\n");
    sb.append("    discountedExpectedCashFlowAmount: ").append(toIndentedString(discountedExpectedCashFlowAmount)).append("\n");
    sb.append("    dayCountFraction: ").append(toIndentedString(dayCountFraction)).append("\n");
    sb.append("    forwardRate: ").append(toIndentedString(forwardRate)).append("\n");
    sb.append("    resetRate: ").append(toIndentedString(resetRate)).append("\n");
    sb.append("    spread: ").append(toIndentedString(spread)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("quantity");
    openapiFields.add("currency");
    openapiFields.add("paymentDate");
    openapiFields.add("payOrReceive");
    openapiFields.add("accrualStart");
    openapiFields.add("accrualEnd");
    openapiFields.add("cashFlowType");
    openapiFields.add("isCashFlowDetermined");
    openapiFields.add("isCashFlowHistoric");
    openapiFields.add("discountFactor");
    openapiFields.add("discountedExpectedCashFlowAmount");
    openapiFields.add("dayCountFraction");
    openapiFields.add("forwardRate");
    openapiFields.add("resetRate");
    openapiFields.add("spread");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to InstrumentPaymentDiaryRow
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!InstrumentPaymentDiaryRow.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InstrumentPaymentDiaryRow is not found in the empty JSON string", InstrumentPaymentDiaryRow.openapiRequiredFields.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("currency") != null && !jsonObj.get("currency").isJsonNull()) && !jsonObj.get("currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency").toString()));
      }
      if ((jsonObj.get("payOrReceive") != null && !jsonObj.get("payOrReceive").isJsonNull()) && !jsonObj.get("payOrReceive").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payOrReceive` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payOrReceive").toString()));
      }
      if ((jsonObj.get("cashFlowType") != null && !jsonObj.get("cashFlowType").isJsonNull()) && !jsonObj.get("cashFlowType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cashFlowType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cashFlowType").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InstrumentPaymentDiaryRow.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InstrumentPaymentDiaryRow' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InstrumentPaymentDiaryRow> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InstrumentPaymentDiaryRow.class));

       return (TypeAdapter<T>) new TypeAdapter<InstrumentPaymentDiaryRow>() {
           @Override
           public void write(JsonWriter out, InstrumentPaymentDiaryRow value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InstrumentPaymentDiaryRow read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of InstrumentPaymentDiaryRow given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of InstrumentPaymentDiaryRow
  * @throws IOException if the JSON string is invalid with respect to InstrumentPaymentDiaryRow
  */
  public static InstrumentPaymentDiaryRow fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InstrumentPaymentDiaryRow.class);
  }

 /**
  * Convert an instance of InstrumentPaymentDiaryRow to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
