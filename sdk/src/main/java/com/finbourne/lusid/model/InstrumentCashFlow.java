/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import com.finbourne.lusid.model.Link;
import com.finbourne.lusid.model.ResourceId;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * The details for the cashflow associated with an instrument from a given portfolio.
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class InstrumentCashFlow {
  public static final String SERIALIZED_NAME_PAYMENT_DATE = "paymentDate";
  @SerializedName(SERIALIZED_NAME_PAYMENT_DATE)
  private OffsetDateTime paymentDate;

  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private java.math.BigDecimal amount;

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private String currency;

  public static final String SERIALIZED_NAME_SOURCE_PORTFOLIO_ID = "sourcePortfolioId";
  @SerializedName(SERIALIZED_NAME_SOURCE_PORTFOLIO_ID)
  private ResourceId sourcePortfolioId;

  public static final String SERIALIZED_NAME_SOURCE_TRANSACTION_ID = "sourceTransactionId";
  @SerializedName(SERIALIZED_NAME_SOURCE_TRANSACTION_ID)
  private String sourceTransactionId;

  public static final String SERIALIZED_NAME_SOURCE_INSTRUMENT_SCOPE = "sourceInstrumentScope";
  @SerializedName(SERIALIZED_NAME_SOURCE_INSTRUMENT_SCOPE)
  private String sourceInstrumentScope;

  public static final String SERIALIZED_NAME_SOURCE_INSTRUMENT_ID = "sourceInstrumentId";
  @SerializedName(SERIALIZED_NAME_SOURCE_INSTRUMENT_ID)
  private String sourceInstrumentId;

  public static final String SERIALIZED_NAME_DIAGNOSTICS = "diagnostics";
  @SerializedName(SERIALIZED_NAME_DIAGNOSTICS)
  private Map<String, String> diagnostics = new HashMap<>();

  public static final String SERIALIZED_NAME_LINKS = "links";
  @SerializedName(SERIALIZED_NAME_LINKS)
  private List<Link> links;

  public InstrumentCashFlow() {
  }

  public InstrumentCashFlow paymentDate(OffsetDateTime paymentDate) {
    
    this.paymentDate = paymentDate;
    return this;
  }

   /**
   * The date at which the given cash flow is due to be paid (SettlementDate is used somewhat interchangeably with PaymentDate.)
   * @return paymentDate
  **/
  @jakarta.annotation.Nonnull
  public OffsetDateTime getPaymentDate() {
    return paymentDate;
  }


  public void setPaymentDate(OffsetDateTime paymentDate) {
    this.paymentDate = paymentDate;
  }


  public InstrumentCashFlow amount(java.math.BigDecimal amount) {
    
    this.amount = amount;
    return this;
  }

   /**
   * The quantity (amount) that will be paid. Note that this can be empty if the payment is in the future and a model is used that cannot estimate it.
   * @return amount
  **/
  @jakarta.annotation.Nullable
  public java.math.BigDecimal getAmount() {
    return amount;
  }


  public void setAmount(java.math.BigDecimal amount) {
    this.amount = amount;
  }


  public InstrumentCashFlow currency(String currency) {
    
    this.currency = currency;
    return this;
  }

   /**
   * The payment currency of the cash flow.
   * @return currency
  **/
  @jakarta.annotation.Nonnull
  public String getCurrency() {
    return currency;
  }


  public void setCurrency(String currency) {
    this.currency = currency;
  }


  public InstrumentCashFlow sourcePortfolioId(ResourceId sourcePortfolioId) {
    
    this.sourcePortfolioId = sourcePortfolioId;
    return this;
  }

   /**
   * Get sourcePortfolioId
   * @return sourcePortfolioId
  **/
  @jakarta.annotation.Nonnull
  public ResourceId getSourcePortfolioId() {
    return sourcePortfolioId;
  }


  public void setSourcePortfolioId(ResourceId sourcePortfolioId) {
    this.sourcePortfolioId = sourcePortfolioId;
  }


  public InstrumentCashFlow sourceTransactionId(String sourceTransactionId) {
    
    this.sourceTransactionId = sourceTransactionId;
    return this;
  }

   /**
   * The identifier for the parent transaction on the instrument that will pay/receive this cash flow.
   * @return sourceTransactionId
  **/
  @jakarta.annotation.Nonnull
  public String getSourceTransactionId() {
    return sourceTransactionId;
  }


  public void setSourceTransactionId(String sourceTransactionId) {
    this.sourceTransactionId = sourceTransactionId;
  }


  public InstrumentCashFlow sourceInstrumentScope(String sourceInstrumentScope) {
    
    this.sourceInstrumentScope = sourceInstrumentScope;
    return this;
  }

   /**
   * The unqiue Lusid Instrument Id (LUID) of the instrument that the holding is in.
   * @return sourceInstrumentScope
  **/
  @jakarta.annotation.Nonnull
  public String getSourceInstrumentScope() {
    return sourceInstrumentScope;
  }


  public void setSourceInstrumentScope(String sourceInstrumentScope) {
    this.sourceInstrumentScope = sourceInstrumentScope;
  }


  public InstrumentCashFlow sourceInstrumentId(String sourceInstrumentId) {
    
    this.sourceInstrumentId = sourceInstrumentId;
    return this;
  }

   /**
   * The unqiue Lusid Instrument Id (LUID) of the instrument that the holding is in.
   * @return sourceInstrumentId
  **/
  @jakarta.annotation.Nonnull
  public String getSourceInstrumentId() {
    return sourceInstrumentId;
  }


  public void setSourceInstrumentId(String sourceInstrumentId) {
    this.sourceInstrumentId = sourceInstrumentId;
  }


  public InstrumentCashFlow diagnostics(Map<String, String> diagnostics) {
    
    this.diagnostics = diagnostics;
    return this;
  }

  public InstrumentCashFlow putDiagnosticsItem(String key, String diagnosticsItem) {
    if (this.diagnostics == null) {
      this.diagnostics = new HashMap<>();
    }
    this.diagnostics.put(key, diagnosticsItem);
    return this;
  }

   /**
   * Whilst a cash flow is defined by an (amount,ccy) pair and the date it is paid on there is additional information required for diagnostics. This includes a range of information and can be empty in the case of a simple cash quantity or where further information is not available. Typical information includes items such as reset dates, RIC, accrual start/end, number of days and curve data.
   * @return diagnostics
  **/
  @jakarta.annotation.Nonnull
  public Map<String, String> getDiagnostics() {
    return diagnostics;
  }


  public void setDiagnostics(Map<String, String> diagnostics) {
    this.diagnostics = diagnostics;
  }


  public InstrumentCashFlow links(List<Link> links) {
    
    this.links = links;
    return this;
  }

  public InstrumentCashFlow addLinksItem(Link linksItem) {
    if (this.links == null) {
      this.links = new ArrayList<>();
    }
    this.links.add(linksItem);
    return this;
  }

   /**
   * Get links
   * @return links
  **/
  @jakarta.annotation.Nullable
  public List<Link> getLinks() {
    return links;
  }


  public void setLinks(List<Link> links) {
    this.links = links;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InstrumentCashFlow instrumentCashFlow = (InstrumentCashFlow) o;
    return Objects.equals(this.paymentDate, instrumentCashFlow.paymentDate) &&
        (this.amount.compareTo(instrumentCashFlow.getAmount()) == 0) &&
        Objects.equals(this.currency, instrumentCashFlow.currency) &&
        Objects.equals(this.sourcePortfolioId, instrumentCashFlow.sourcePortfolioId) &&
        Objects.equals(this.sourceTransactionId, instrumentCashFlow.sourceTransactionId) &&
        Objects.equals(this.sourceInstrumentScope, instrumentCashFlow.sourceInstrumentScope) &&
        Objects.equals(this.sourceInstrumentId, instrumentCashFlow.sourceInstrumentId) &&
        Objects.equals(this.diagnostics, instrumentCashFlow.diagnostics) &&
        Objects.equals(this.links, instrumentCashFlow.links);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(paymentDate, amount, currency, sourcePortfolioId, sourceTransactionId, sourceInstrumentScope, sourceInstrumentId, diagnostics, links);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InstrumentCashFlow {\n");
    sb.append("    paymentDate: ").append(toIndentedString(paymentDate)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    sourcePortfolioId: ").append(toIndentedString(sourcePortfolioId)).append("\n");
    sb.append("    sourceTransactionId: ").append(toIndentedString(sourceTransactionId)).append("\n");
    sb.append("    sourceInstrumentScope: ").append(toIndentedString(sourceInstrumentScope)).append("\n");
    sb.append("    sourceInstrumentId: ").append(toIndentedString(sourceInstrumentId)).append("\n");
    sb.append("    diagnostics: ").append(toIndentedString(diagnostics)).append("\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("paymentDate");
    openapiFields.add("amount");
    openapiFields.add("currency");
    openapiFields.add("sourcePortfolioId");
    openapiFields.add("sourceTransactionId");
    openapiFields.add("sourceInstrumentScope");
    openapiFields.add("sourceInstrumentId");
    openapiFields.add("diagnostics");
    openapiFields.add("links");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("paymentDate");
    openapiRequiredFields.add("currency");
    openapiRequiredFields.add("sourcePortfolioId");
    openapiRequiredFields.add("sourceTransactionId");
    openapiRequiredFields.add("sourceInstrumentScope");
    openapiRequiredFields.add("sourceInstrumentId");
    openapiRequiredFields.add("diagnostics");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to InstrumentCashFlow
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!InstrumentCashFlow.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InstrumentCashFlow is not found in the empty JSON string", InstrumentCashFlow.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!InstrumentCashFlow.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InstrumentCashFlow` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : InstrumentCashFlow.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency").toString()));
      }
      // validate the required field `sourcePortfolioId`
      ResourceId.validateJsonObject(jsonObj.getAsJsonObject("sourcePortfolioId"));
      if (!jsonObj.get("sourceTransactionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourceTransactionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sourceTransactionId").toString()));
      }
      if (!jsonObj.get("sourceInstrumentScope").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourceInstrumentScope` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sourceInstrumentScope").toString()));
      }
      if (!jsonObj.get("sourceInstrumentId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourceInstrumentId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sourceInstrumentId").toString()));
      }
      if (jsonObj.get("links") != null && !jsonObj.get("links").isJsonNull()) {
        JsonArray jsonArraylinks = jsonObj.getAsJsonArray("links");
        if (jsonArraylinks != null) {
          // ensure the json data is an array
          if (!jsonObj.get("links").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `links` to be an array in the JSON string but got `%s`", jsonObj.get("links").toString()));
          }

          // validate the optional field `links` (array)
          for (int i = 0; i < jsonArraylinks.size(); i++) {
            Link.validateJsonObject(jsonArraylinks.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InstrumentCashFlow.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InstrumentCashFlow' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InstrumentCashFlow> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InstrumentCashFlow.class));

       return (TypeAdapter<T>) new TypeAdapter<InstrumentCashFlow>() {
           @Override
           public void write(JsonWriter out, InstrumentCashFlow value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InstrumentCashFlow read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of InstrumentCashFlow given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of InstrumentCashFlow
  * @throws IOException if the JSON string is invalid with respect to InstrumentCashFlow
  */
  public static InstrumentCashFlow fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InstrumentCashFlow.class);
  }

 /**
  * Convert an instance of InstrumentCashFlow to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
