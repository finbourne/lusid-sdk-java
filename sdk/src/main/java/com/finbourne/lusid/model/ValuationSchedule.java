/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * Specification object for the valuation schedule, how do we determine which days we wish to perform a valuation upon.
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ValuationSchedule {
  public static final String SERIALIZED_NAME_EFFECTIVE_FROM = "effectiveFrom";
  @SerializedName(SERIALIZED_NAME_EFFECTIVE_FROM)
  private String effectiveFrom;

  public static final String SERIALIZED_NAME_EFFECTIVE_AT = "effectiveAt";
  @SerializedName(SERIALIZED_NAME_EFFECTIVE_AT)
  private String effectiveAt;

  public static final String SERIALIZED_NAME_TENOR = "tenor";
  @SerializedName(SERIALIZED_NAME_TENOR)
  private String tenor;

  public static final String SERIALIZED_NAME_ROLL_CONVENTION = "rollConvention";
  @SerializedName(SERIALIZED_NAME_ROLL_CONVENTION)
  private String rollConvention;

  public static final String SERIALIZED_NAME_HOLIDAY_CALENDARS = "holidayCalendars";
  @SerializedName(SERIALIZED_NAME_HOLIDAY_CALENDARS)
  private List<String> holidayCalendars;

  public static final String SERIALIZED_NAME_VALUATION_DATE_TIMES = "valuationDateTimes";
  @SerializedName(SERIALIZED_NAME_VALUATION_DATE_TIMES)
  private List<String> valuationDateTimes;

  public ValuationSchedule() {
  }

  public ValuationSchedule effectiveFrom(String effectiveFrom) {
    
    this.effectiveFrom = effectiveFrom;
    return this;
  }

   /**
   * If present, the EffectiveFrom and EffectiveAt dates are interpreted as a range of dates for which to perform a valuation.  In this case, valuation is calculated for the portfolio(s) for each business day in the given range.
   * @return effectiveFrom
  **/
  @jakarta.annotation.Nullable
  public String getEffectiveFrom() {
    return effectiveFrom;
  }


  public void setEffectiveFrom(String effectiveFrom) {
    this.effectiveFrom = effectiveFrom;
  }


  public ValuationSchedule effectiveAt(String effectiveAt) {
    
    this.effectiveAt = effectiveAt;
    return this;
  }

   /**
   * The market data time, i.e. the time to run the valuation request effective of.
   * @return effectiveAt
  **/
  @jakarta.annotation.Nonnull
  public String getEffectiveAt() {
    return effectiveAt;
  }


  public void setEffectiveAt(String effectiveAt) {
    this.effectiveAt = effectiveAt;
  }


  public ValuationSchedule tenor(String tenor) {
    
    this.tenor = tenor;
    return this;
  }

   /**
   * Tenor, e.g \&quot;1D\&quot;, \&quot;1M\&quot; to be used in generating the date schedule when effectiveFrom and effectiveAt are both given and are not the same.
   * @return tenor
  **/
  @jakarta.annotation.Nullable
  public String getTenor() {
    return tenor;
  }


  public void setTenor(String tenor) {
    this.tenor = tenor;
  }


  public ValuationSchedule rollConvention(String rollConvention) {
    
    this.rollConvention = rollConvention;
    return this;
  }

   /**
   * When Tenor is given and is not equal to \&quot;1D\&quot;, there may be cases where \&quot;date + tenor\&quot; land on non-business days around month end.  In that case, the RollConvention, e.g. modified following \&quot;MF\&quot; would be applied to determine the next GBD.
   * @return rollConvention
  **/
  @jakarta.annotation.Nullable
  public String getRollConvention() {
    return rollConvention;
  }


  public void setRollConvention(String rollConvention) {
    this.rollConvention = rollConvention;
  }


  public ValuationSchedule holidayCalendars(List<String> holidayCalendars) {
    
    this.holidayCalendars = holidayCalendars;
    return this;
  }

  public ValuationSchedule addHolidayCalendarsItem(String holidayCalendarsItem) {
    if (this.holidayCalendars == null) {
      this.holidayCalendars = new ArrayList<>();
    }
    this.holidayCalendars.add(holidayCalendarsItem);
    return this;
  }

   /**
   * The holiday calendar(s) that should be used in determining the date schedule.  Holiday calendar(s) are supplied by their names, for example, \&quot;CoppClark\&quot;.   Note that when the calendars are not available (e.g. when the user has insufficient permissions),   a recipe setting will be used to determine whether the whole batch should then fail or whether the calendar not being available should simply be ignored.
   * @return holidayCalendars
  **/
  @jakarta.annotation.Nullable
  public List<String> getHolidayCalendars() {
    return holidayCalendars;
  }


  public void setHolidayCalendars(List<String> holidayCalendars) {
    this.holidayCalendars = holidayCalendars;
  }


  public ValuationSchedule valuationDateTimes(List<String> valuationDateTimes) {
    
    this.valuationDateTimes = valuationDateTimes;
    return this;
  }

  public ValuationSchedule addValuationDateTimesItem(String valuationDateTimesItem) {
    if (this.valuationDateTimes == null) {
      this.valuationDateTimes = new ArrayList<>();
    }
    this.valuationDateTimes.add(valuationDateTimesItem);
    return this;
  }

   /**
   * If given, this is the exact set of dates on which to perform a valuation. This will replace/override all other specified values if given.
   * @return valuationDateTimes
  **/
  @jakarta.annotation.Nullable
  public List<String> getValuationDateTimes() {
    return valuationDateTimes;
  }


  public void setValuationDateTimes(List<String> valuationDateTimes) {
    this.valuationDateTimes = valuationDateTimes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ValuationSchedule valuationSchedule = (ValuationSchedule) o;
    return Objects.equals(this.effectiveFrom, valuationSchedule.effectiveFrom) &&
        Objects.equals(this.effectiveAt, valuationSchedule.effectiveAt) &&
        Objects.equals(this.tenor, valuationSchedule.tenor) &&
        Objects.equals(this.rollConvention, valuationSchedule.rollConvention) &&
        Objects.equals(this.holidayCalendars, valuationSchedule.holidayCalendars) &&
        Objects.equals(this.valuationDateTimes, valuationSchedule.valuationDateTimes);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(effectiveFrom, effectiveAt, tenor, rollConvention, holidayCalendars, valuationDateTimes);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ValuationSchedule {\n");
    sb.append("    effectiveFrom: ").append(toIndentedString(effectiveFrom)).append("\n");
    sb.append("    effectiveAt: ").append(toIndentedString(effectiveAt)).append("\n");
    sb.append("    tenor: ").append(toIndentedString(tenor)).append("\n");
    sb.append("    rollConvention: ").append(toIndentedString(rollConvention)).append("\n");
    sb.append("    holidayCalendars: ").append(toIndentedString(holidayCalendars)).append("\n");
    sb.append("    valuationDateTimes: ").append(toIndentedString(valuationDateTimes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("effectiveFrom");
    openapiFields.add("effectiveAt");
    openapiFields.add("tenor");
    openapiFields.add("rollConvention");
    openapiFields.add("holidayCalendars");
    openapiFields.add("valuationDateTimes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("effectiveAt");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ValuationSchedule
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ValuationSchedule.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ValuationSchedule is not found in the empty JSON string", ValuationSchedule.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ValuationSchedule.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("effectiveFrom") != null && !jsonObj.get("effectiveFrom").isJsonNull()) && !jsonObj.get("effectiveFrom").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `effectiveFrom` to be a primitive type in the JSON string but got `%s`", jsonObj.get("effectiveFrom").toString()));
      }
      if (!jsonObj.get("effectiveAt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `effectiveAt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("effectiveAt").toString()));
      }
      if ((jsonObj.get("tenor") != null && !jsonObj.get("tenor").isJsonNull()) && !jsonObj.get("tenor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tenor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tenor").toString()));
      }
      if ((jsonObj.get("rollConvention") != null && !jsonObj.get("rollConvention").isJsonNull()) && !jsonObj.get("rollConvention").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rollConvention` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rollConvention").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("holidayCalendars") != null && !jsonObj.get("holidayCalendars").isJsonNull() && !jsonObj.get("holidayCalendars").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `holidayCalendars` to be an array in the JSON string but got `%s`", jsonObj.get("holidayCalendars").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("valuationDateTimes") != null && !jsonObj.get("valuationDateTimes").isJsonNull() && !jsonObj.get("valuationDateTimes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `valuationDateTimes` to be an array in the JSON string but got `%s`", jsonObj.get("valuationDateTimes").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ValuationSchedule.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ValuationSchedule' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ValuationSchedule> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ValuationSchedule.class));

       return (TypeAdapter<T>) new TypeAdapter<ValuationSchedule>() {
           @Override
           public void write(JsonWriter out, ValuationSchedule value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ValuationSchedule read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ValuationSchedule given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ValuationSchedule
  * @throws IOException if the JSON string is invalid with respect to ValuationSchedule
  */
  public static ValuationSchedule fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ValuationSchedule.class);
  }

 /**
  * Convert an instance of ValuationSchedule to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
