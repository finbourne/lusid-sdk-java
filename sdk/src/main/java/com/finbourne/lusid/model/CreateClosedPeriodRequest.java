/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import com.finbourne.lusid.model.Property;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * CreateClosedPeriodRequest
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class CreateClosedPeriodRequest {
  public static final String SERIALIZED_NAME_CLOSED_PERIOD_ID = "closedPeriodId";
  @SerializedName(SERIALIZED_NAME_CLOSED_PERIOD_ID)
  private String closedPeriodId;

  public static final String SERIALIZED_NAME_EFFECTIVE_END = "effectiveEnd";
  @SerializedName(SERIALIZED_NAME_EFFECTIVE_END)
  private OffsetDateTime effectiveEnd;

  public static final String SERIALIZED_NAME_PROPERTIES = "properties";
  @SerializedName(SERIALIZED_NAME_PROPERTIES)
  private Map<String, Property> properties;

  public static final String SERIALIZED_NAME_AS_AT_CLOSED = "asAtClosed";
  @SerializedName(SERIALIZED_NAME_AS_AT_CLOSED)
  private OffsetDateTime asAtClosed;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public CreateClosedPeriodRequest() {
  }

  public CreateClosedPeriodRequest closedPeriodId(String closedPeriodId) {
    
    this.closedPeriodId = closedPeriodId;
    return this;
  }

   /**
   * The unique Id of the Closed Period. The ClosedPeriodId, together with the Timeline Scope and Code, uniquely identifies a Closed Period
   * @return closedPeriodId
  **/
  @jakarta.annotation.Nonnull
  public String getClosedPeriodId() {
    return closedPeriodId;
  }


  public void setClosedPeriodId(String closedPeriodId) {
    this.closedPeriodId = closedPeriodId;
  }


  public CreateClosedPeriodRequest effectiveEnd(OffsetDateTime effectiveEnd) {
    
    this.effectiveEnd = effectiveEnd;
    return this;
  }

   /**
   * The effective end of the Closed Period
   * @return effectiveEnd
  **/
  @jakarta.annotation.Nullable
  public OffsetDateTime getEffectiveEnd() {
    return effectiveEnd;
  }


  public void setEffectiveEnd(OffsetDateTime effectiveEnd) {
    this.effectiveEnd = effectiveEnd;
  }


  public CreateClosedPeriodRequest properties(Map<String, Property> properties) {
    
    this.properties = properties;
    return this;
  }

  public CreateClosedPeriodRequest putPropertiesItem(String key, Property propertiesItem) {
    if (this.properties == null) {
      this.properties = new HashMap<>();
    }
    this.properties.put(key, propertiesItem);
    return this;
  }

   /**
   * The Closed Periods properties. These will be from the &#39;ClosedPeriod&#39; domain.
   * @return properties
  **/
  @jakarta.annotation.Nullable
  public Map<String, Property> getProperties() {
    return properties;
  }


  public void setProperties(Map<String, Property> properties) {
    this.properties = properties;
  }


  public CreateClosedPeriodRequest asAtClosed(OffsetDateTime asAtClosed) {
    
    this.asAtClosed = asAtClosed;
    return this;
  }

   /**
   * The asAt closed datetime for the Closed Period
   * @return asAtClosed
  **/
  @jakarta.annotation.Nullable
  public OffsetDateTime getAsAtClosed() {
    return asAtClosed;
  }


  public void setAsAtClosed(OffsetDateTime asAtClosed) {
    this.asAtClosed = asAtClosed;
  }


  public CreateClosedPeriodRequest displayName(String displayName) {
    
    this.displayName = displayName;
    return this;
  }

   /**
   * The name of the Closed Period.
   * @return displayName
  **/
  @jakarta.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }


  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public CreateClosedPeriodRequest description(String description) {
    
    this.description = description;
    return this;
  }

   /**
   * A description for the Closed Period.
   * @return description
  **/
  @jakarta.annotation.Nullable
  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    this.description = description;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateClosedPeriodRequest createClosedPeriodRequest = (CreateClosedPeriodRequest) o;
    return Objects.equals(this.closedPeriodId, createClosedPeriodRequest.closedPeriodId) &&
        Objects.equals(this.effectiveEnd, createClosedPeriodRequest.effectiveEnd) &&
        Objects.equals(this.properties, createClosedPeriodRequest.properties) &&
        Objects.equals(this.asAtClosed, createClosedPeriodRequest.asAtClosed) &&
        Objects.equals(this.displayName, createClosedPeriodRequest.displayName) &&
        Objects.equals(this.description, createClosedPeriodRequest.description);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(closedPeriodId, effectiveEnd, properties, asAtClosed, displayName, description);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateClosedPeriodRequest {\n");
    sb.append("    closedPeriodId: ").append(toIndentedString(closedPeriodId)).append("\n");
    sb.append("    effectiveEnd: ").append(toIndentedString(effectiveEnd)).append("\n");
    sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
    sb.append("    asAtClosed: ").append(toIndentedString(asAtClosed)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("closedPeriodId");
    openapiFields.add("effectiveEnd");
    openapiFields.add("properties");
    openapiFields.add("asAtClosed");
    openapiFields.add("displayName");
    openapiFields.add("description");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("closedPeriodId");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to CreateClosedPeriodRequest
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateClosedPeriodRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateClosedPeriodRequest is not found in the empty JSON string", CreateClosedPeriodRequest.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateClosedPeriodRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("closedPeriodId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `closedPeriodId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("closedPeriodId").toString()));
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateClosedPeriodRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateClosedPeriodRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateClosedPeriodRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateClosedPeriodRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateClosedPeriodRequest>() {
           @Override
           public void write(JsonWriter out, CreateClosedPeriodRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateClosedPeriodRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CreateClosedPeriodRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CreateClosedPeriodRequest
  * @throws IOException if the JSON string is invalid with respect to CreateClosedPeriodRequest
  */
  public static CreateClosedPeriodRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateClosedPeriodRequest.class);
  }

 /**
  * Convert an instance of CreateClosedPeriodRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
