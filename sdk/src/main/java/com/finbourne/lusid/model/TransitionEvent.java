/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import com.finbourne.lusid.model.InputTransition;
import com.finbourne.lusid.model.InstrumentEvent;
import com.finbourne.lusid.model.OutputTransition;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * A &#39;transition&#39; within a corporate action, representing a set of output movements paired to a single input position
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class TransitionEvent extends InstrumentEvent {
  public static final String SERIALIZED_NAME_ANNOUNCEMENT_DATE = "announcementDate";
  @SerializedName(SERIALIZED_NAME_ANNOUNCEMENT_DATE)
  private OffsetDateTime announcementDate;

  public static final String SERIALIZED_NAME_EX_DATE = "exDate";
  @SerializedName(SERIALIZED_NAME_EX_DATE)
  private OffsetDateTime exDate;

  public static final String SERIALIZED_NAME_RECORD_DATE = "recordDate";
  @SerializedName(SERIALIZED_NAME_RECORD_DATE)
  private OffsetDateTime recordDate;

  public static final String SERIALIZED_NAME_PAYMENT_DATE = "paymentDate";
  @SerializedName(SERIALIZED_NAME_PAYMENT_DATE)
  private OffsetDateTime paymentDate;

  public static final String SERIALIZED_NAME_INPUT_TRANSITION = "inputTransition";
  @SerializedName(SERIALIZED_NAME_INPUT_TRANSITION)
  private InputTransition inputTransition;

  public static final String SERIALIZED_NAME_OUTPUT_TRANSITIONS = "outputTransitions";
  @SerializedName(SERIALIZED_NAME_OUTPUT_TRANSITIONS)
  private List<OutputTransition> outputTransitions;

  public TransitionEvent() {
    // this.instrumentEventType = this.getClass().getSimpleName();
  }

  public TransitionEvent announcementDate(OffsetDateTime announcementDate) {
    
    this.announcementDate = announcementDate;
    return this;
  }

   /**
   * The announcement date of the corporate action
   * @return announcementDate
  **/
  @jakarta.annotation.Nullable
  public OffsetDateTime getAnnouncementDate() {
    return announcementDate;
  }


  public void setAnnouncementDate(OffsetDateTime announcementDate) {
    this.announcementDate = announcementDate;
  }


  public TransitionEvent exDate(OffsetDateTime exDate) {
    
    this.exDate = exDate;
    return this;
  }

   /**
   * The ex date of the corporate action
   * @return exDate
  **/
  @jakarta.annotation.Nullable
  public OffsetDateTime getExDate() {
    return exDate;
  }


  public void setExDate(OffsetDateTime exDate) {
    this.exDate = exDate;
  }


  public TransitionEvent recordDate(OffsetDateTime recordDate) {
    
    this.recordDate = recordDate;
    return this;
  }

   /**
   * The record date of the corporate action
   * @return recordDate
  **/
  @jakarta.annotation.Nullable
  public OffsetDateTime getRecordDate() {
    return recordDate;
  }


  public void setRecordDate(OffsetDateTime recordDate) {
    this.recordDate = recordDate;
  }


  public TransitionEvent paymentDate(OffsetDateTime paymentDate) {
    
    this.paymentDate = paymentDate;
    return this;
  }

   /**
   * The payment date of the corporate action
   * @return paymentDate
  **/
  @jakarta.annotation.Nullable
  public OffsetDateTime getPaymentDate() {
    return paymentDate;
  }


  public void setPaymentDate(OffsetDateTime paymentDate) {
    this.paymentDate = paymentDate;
  }


  public TransitionEvent inputTransition(InputTransition inputTransition) {
    
    this.inputTransition = inputTransition;
    return this;
  }

   /**
   * Get inputTransition
   * @return inputTransition
  **/
  @jakarta.annotation.Nullable
  public InputTransition getInputTransition() {
    return inputTransition;
  }


  public void setInputTransition(InputTransition inputTransition) {
    this.inputTransition = inputTransition;
  }


  public TransitionEvent outputTransitions(List<OutputTransition> outputTransitions) {
    
    this.outputTransitions = outputTransitions;
    return this;
  }

  public TransitionEvent addOutputTransitionsItem(OutputTransition outputTransitionsItem) {
    if (this.outputTransitions == null) {
      this.outputTransitions = new ArrayList<>();
    }
    this.outputTransitions.add(outputTransitionsItem);
    return this;
  }

   /**
   * The resulting transitions from this event
   * @return outputTransitions
  **/
  @jakarta.annotation.Nullable
  public List<OutputTransition> getOutputTransitions() {
    return outputTransitions;
  }


  public void setOutputTransitions(List<OutputTransition> outputTransitions) {
    this.outputTransitions = outputTransitions;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TransitionEvent transitionEvent = (TransitionEvent) o;
    return Objects.equals(this.announcementDate, transitionEvent.announcementDate) &&
        Objects.equals(this.exDate, transitionEvent.exDate) &&
        Objects.equals(this.recordDate, transitionEvent.recordDate) &&
        Objects.equals(this.paymentDate, transitionEvent.paymentDate) &&
        Objects.equals(this.inputTransition, transitionEvent.inputTransition) &&
        Objects.equals(this.outputTransitions, transitionEvent.outputTransitions) &&
        super.equals(o);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(announcementDate, exDate, recordDate, paymentDate, inputTransition, outputTransitions, super.hashCode());
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TransitionEvent {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    announcementDate: ").append(toIndentedString(announcementDate)).append("\n");
    sb.append("    exDate: ").append(toIndentedString(exDate)).append("\n");
    sb.append("    recordDate: ").append(toIndentedString(recordDate)).append("\n");
    sb.append("    paymentDate: ").append(toIndentedString(paymentDate)).append("\n");
    sb.append("    inputTransition: ").append(toIndentedString(inputTransition)).append("\n");
    sb.append("    outputTransitions: ").append(toIndentedString(outputTransitions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("instrumentEventType");
    openapiFields.add("announcementDate");
    openapiFields.add("exDate");
    openapiFields.add("recordDate");
    openapiFields.add("paymentDate");
    openapiFields.add("inputTransition");
    openapiFields.add("outputTransitions");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("instrumentEventType");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to TransitionEvent
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!TransitionEvent.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TransitionEvent is not found in the empty JSON string", TransitionEvent.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!TransitionEvent.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TransitionEvent` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TransitionEvent.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TransitionEvent.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TransitionEvent' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TransitionEvent> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TransitionEvent.class));

       return (TypeAdapter<T>) new TypeAdapter<TransitionEvent>() {
           @Override
           public void write(JsonWriter out, TransitionEvent value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TransitionEvent read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TransitionEvent given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TransitionEvent
  * @throws IOException if the JSON string is invalid with respect to TransitionEvent
  */
  public static TransitionEvent fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TransitionEvent.class);
  }

 /**
  * Convert an instance of TransitionEvent to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
