/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import com.finbourne.lusid.model.LegalEntity;
import com.finbourne.lusid.model.Person;
import com.finbourne.lusid.model.Property;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * Representation of an Investor on the LUSID API
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class Investor {
  public static final String SERIALIZED_NAME_INVESTOR_TYPE = "investorType";
  @SerializedName(SERIALIZED_NAME_INVESTOR_TYPE)
  private String investorType;

  public static final String SERIALIZED_NAME_INVESTOR_IDENTIFIERS = "investorIdentifiers";
  @SerializedName(SERIALIZED_NAME_INVESTOR_IDENTIFIERS)
  private Map<String, Property> investorIdentifiers;

  public static final String SERIALIZED_NAME_ENTITY_UNIQUE_ID = "entityUniqueId";
  @SerializedName(SERIALIZED_NAME_ENTITY_UNIQUE_ID)
  private String entityUniqueId;

  public static final String SERIALIZED_NAME_PERSON = "person";
  @SerializedName(SERIALIZED_NAME_PERSON)
  private Person person;

  public static final String SERIALIZED_NAME_LEGAL_ENTITY = "legalEntity";
  @SerializedName(SERIALIZED_NAME_LEGAL_ENTITY)
  private LegalEntity legalEntity;

  public Investor() {
  }

  public Investor investorType(String investorType) {
    
    this.investorType = investorType;
    return this;
  }

   /**
   * The type of the Investor
   * @return investorType
  **/
  @jakarta.annotation.Nullable
  public String getInvestorType() {
    return investorType;
  }


  public void setInvestorType(String investorType) {
    this.investorType = investorType;
  }


  public Investor investorIdentifiers(Map<String, Property> investorIdentifiers) {
    
    this.investorIdentifiers = investorIdentifiers;
    return this;
  }

  public Investor putInvestorIdentifiersItem(String key, Property investorIdentifiersItem) {
    if (this.investorIdentifiers == null) {
      this.investorIdentifiers = new HashMap<>();
    }
    this.investorIdentifiers.put(key, investorIdentifiersItem);
    return this;
  }

   /**
   * The identifiers of the Investor
   * @return investorIdentifiers
  **/
  @jakarta.annotation.Nullable
  public Map<String, Property> getInvestorIdentifiers() {
    return investorIdentifiers;
  }


  public void setInvestorIdentifiers(Map<String, Property> investorIdentifiers) {
    this.investorIdentifiers = investorIdentifiers;
  }


  public Investor entityUniqueId(String entityUniqueId) {
    
    this.entityUniqueId = entityUniqueId;
    return this;
  }

   /**
   * The unique Investor entity identifier
   * @return entityUniqueId
  **/
  @jakarta.annotation.Nullable
  public String getEntityUniqueId() {
    return entityUniqueId;
  }


  public void setEntityUniqueId(String entityUniqueId) {
    this.entityUniqueId = entityUniqueId;
  }


  public Investor person(Person person) {
    
    this.person = person;
    return this;
  }

   /**
   * Get person
   * @return person
  **/
  @jakarta.annotation.Nullable
  public Person getPerson() {
    return person;
  }


  public void setPerson(Person person) {
    this.person = person;
  }


  public Investor legalEntity(LegalEntity legalEntity) {
    
    this.legalEntity = legalEntity;
    return this;
  }

   /**
   * Get legalEntity
   * @return legalEntity
  **/
  @jakarta.annotation.Nullable
  public LegalEntity getLegalEntity() {
    return legalEntity;
  }


  public void setLegalEntity(LegalEntity legalEntity) {
    this.legalEntity = legalEntity;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Investor investor = (Investor) o;
    return Objects.equals(this.investorType, investor.investorType) &&
        Objects.equals(this.investorIdentifiers, investor.investorIdentifiers) &&
        Objects.equals(this.entityUniqueId, investor.entityUniqueId) &&
        Objects.equals(this.person, investor.person) &&
        Objects.equals(this.legalEntity, investor.legalEntity);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(investorType, investorIdentifiers, entityUniqueId, person, legalEntity);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Investor {\n");
    sb.append("    investorType: ").append(toIndentedString(investorType)).append("\n");
    sb.append("    investorIdentifiers: ").append(toIndentedString(investorIdentifiers)).append("\n");
    sb.append("    entityUniqueId: ").append(toIndentedString(entityUniqueId)).append("\n");
    sb.append("    person: ").append(toIndentedString(person)).append("\n");
    sb.append("    legalEntity: ").append(toIndentedString(legalEntity)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("investorType");
    openapiFields.add("investorIdentifiers");
    openapiFields.add("entityUniqueId");
    openapiFields.add("person");
    openapiFields.add("legalEntity");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to Investor
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Investor.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Investor is not found in the empty JSON string", Investor.openapiRequiredFields.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("investorType") != null && !jsonObj.get("investorType").isJsonNull()) && !jsonObj.get("investorType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `investorType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("investorType").toString()));
      }
      if ((jsonObj.get("entityUniqueId") != null && !jsonObj.get("entityUniqueId").isJsonNull()) && !jsonObj.get("entityUniqueId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `entityUniqueId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("entityUniqueId").toString()));
      }
      // validate the optional field `person`
      if (jsonObj.get("person") != null && !jsonObj.get("person").isJsonNull()) {
        Person.validateJsonElement(jsonObj.get("person"));
      }
      // validate the optional field `legalEntity`
      if (jsonObj.get("legalEntity") != null && !jsonObj.get("legalEntity").isJsonNull()) {
        LegalEntity.validateJsonElement(jsonObj.get("legalEntity"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Investor.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Investor' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Investor> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Investor.class));

       return (TypeAdapter<T>) new TypeAdapter<Investor>() {
           @Override
           public void write(JsonWriter out, Investor value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Investor read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Investor given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Investor
  * @throws IOException if the JSON string is invalid with respect to Investor
  */
  public static Investor fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Investor.class);
  }

 /**
  * Convert an instance of Investor to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
