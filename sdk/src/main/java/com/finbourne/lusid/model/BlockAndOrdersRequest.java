/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import com.finbourne.lusid.model.BlockedOrderRequest;
import com.finbourne.lusid.model.CurrencyAndAmount;
import com.finbourne.lusid.model.PerpetualProperty;
import com.finbourne.lusid.model.ResourceId;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * BlockAndOrdersRequest
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class BlockAndOrdersRequest {
  public static final String SERIALIZED_NAME_BLOCK_ID = "blockId";
  @SerializedName(SERIALIZED_NAME_BLOCK_ID)
  private ResourceId blockId;

  public static final String SERIALIZED_NAME_ORDERS = "orders";
  @SerializedName(SERIALIZED_NAME_ORDERS)
  private List<BlockedOrderRequest> orders = new ArrayList<>();

  public static final String SERIALIZED_NAME_BLOCK_PROPERTIES = "blockProperties";
  @SerializedName(SERIALIZED_NAME_BLOCK_PROPERTIES)
  private Map<String, PerpetualProperty> blockProperties;

  public static final String SERIALIZED_NAME_INSTRUMENT_IDENTIFIERS = "instrumentIdentifiers";
  @SerializedName(SERIALIZED_NAME_INSTRUMENT_IDENTIFIERS)
  private Map<String, String> instrumentIdentifiers = new HashMap<>();

  public static final String SERIALIZED_NAME_SIDE = "side";
  @SerializedName(SERIALIZED_NAME_SIDE)
  private String side;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_TIME_IN_FORCE = "timeInForce";
  @SerializedName(SERIALIZED_NAME_TIME_IN_FORCE)
  private String timeInForce;

  public static final String SERIALIZED_NAME_DATE = "date";
  @SerializedName(SERIALIZED_NAME_DATE)
  private OffsetDateTime date;

  public static final String SERIALIZED_NAME_LIMIT_PRICE = "limitPrice";
  @SerializedName(SERIALIZED_NAME_LIMIT_PRICE)
  private CurrencyAndAmount limitPrice;

  public static final String SERIALIZED_NAME_STOP_PRICE = "stopPrice";
  @SerializedName(SERIALIZED_NAME_STOP_PRICE)
  private CurrencyAndAmount stopPrice;

  public BlockAndOrdersRequest() {
  }

  public BlockAndOrdersRequest blockId(ResourceId blockId) {
    
    this.blockId = blockId;
    return this;
  }

   /**
   * Get blockId
   * @return blockId
  **/
  @jakarta.annotation.Nonnull
  public ResourceId getBlockId() {
    return blockId;
  }


  public void setBlockId(ResourceId blockId) {
    this.blockId = blockId;
  }


  public BlockAndOrdersRequest orders(List<BlockedOrderRequest> orders) {
    
    this.orders = orders;
    return this;
  }

  public BlockAndOrdersRequest addOrdersItem(BlockedOrderRequest ordersItem) {
    if (this.orders == null) {
      this.orders = new ArrayList<>();
    }
    this.orders.add(ordersItem);
    return this;
  }

   /**
   * An order which belongs to a block. Fields common to both entities (such as instrument) should be derived from the block.
   * @return orders
  **/
  @jakarta.annotation.Nonnull
  public List<BlockedOrderRequest> getOrders() {
    return orders;
  }


  public void setOrders(List<BlockedOrderRequest> orders) {
    this.orders = orders;
  }


  public BlockAndOrdersRequest blockProperties(Map<String, PerpetualProperty> blockProperties) {
    
    this.blockProperties = blockProperties;
    return this;
  }

  public BlockAndOrdersRequest putBlockPropertiesItem(String key, PerpetualProperty blockPropertiesItem) {
    if (this.blockProperties == null) {
      this.blockProperties = new HashMap<>();
    }
    this.blockProperties.put(key, blockPropertiesItem);
    return this;
  }

   /**
   * Client-defined properties associated with this block.
   * @return blockProperties
  **/
  @jakarta.annotation.Nullable
  public Map<String, PerpetualProperty> getBlockProperties() {
    return blockProperties;
  }


  public void setBlockProperties(Map<String, PerpetualProperty> blockProperties) {
    this.blockProperties = blockProperties;
  }


  public BlockAndOrdersRequest instrumentIdentifiers(Map<String, String> instrumentIdentifiers) {
    
    this.instrumentIdentifiers = instrumentIdentifiers;
    return this;
  }

  public BlockAndOrdersRequest putInstrumentIdentifiersItem(String key, String instrumentIdentifiersItem) {
    if (this.instrumentIdentifiers == null) {
      this.instrumentIdentifiers = new HashMap<>();
    }
    this.instrumentIdentifiers.put(key, instrumentIdentifiersItem);
    return this;
  }

   /**
   * The instrument ordered.
   * @return instrumentIdentifiers
  **/
  @jakarta.annotation.Nonnull
  public Map<String, String> getInstrumentIdentifiers() {
    return instrumentIdentifiers;
  }


  public void setInstrumentIdentifiers(Map<String, String> instrumentIdentifiers) {
    this.instrumentIdentifiers = instrumentIdentifiers;
  }


  public BlockAndOrdersRequest side(String side) {
    
    this.side = side;
    return this;
  }

   /**
   * The client&#39;s representation of the block&#39;s side (buy, sell, short, etc). BlockedOrders in the request which do not specify a side will have their side populated with this value.
   * @return side
  **/
  @jakarta.annotation.Nullable
  public String getSide() {
    return side;
  }


  public void setSide(String side) {
    this.side = side;
  }


  public BlockAndOrdersRequest type(String type) {
    
    this.type = type;
    return this;
  }

   /**
   * The block order&#39;s type (examples: Limit, Market, ...)
   * @return type
  **/
  @jakarta.annotation.Nullable
  public String getType() {
    return type;
  }


  public void setType(String type) {
    this.type = type;
  }


  public BlockAndOrdersRequest timeInForce(String timeInForce) {
    
    this.timeInForce = timeInForce;
    return this;
  }

   /**
   * The block orders&#39; time in force (examples: Day, GoodTilCancel, ...)
   * @return timeInForce
  **/
  @jakarta.annotation.Nullable
  public String getTimeInForce() {
    return timeInForce;
  }


  public void setTimeInForce(String timeInForce) {
    this.timeInForce = timeInForce;
  }


  public BlockAndOrdersRequest date(OffsetDateTime date) {
    
    this.date = date;
    return this;
  }

   /**
   * The date on which the block was made
   * @return date
  **/
  @jakarta.annotation.Nullable
  public OffsetDateTime getDate() {
    return date;
  }


  public void setDate(OffsetDateTime date) {
    this.date = date;
  }


  public BlockAndOrdersRequest limitPrice(CurrencyAndAmount limitPrice) {
    
    this.limitPrice = limitPrice;
    return this;
  }

   /**
   * Get limitPrice
   * @return limitPrice
  **/
  @jakarta.annotation.Nullable
  public CurrencyAndAmount getLimitPrice() {
    return limitPrice;
  }


  public void setLimitPrice(CurrencyAndAmount limitPrice) {
    this.limitPrice = limitPrice;
  }


  public BlockAndOrdersRequest stopPrice(CurrencyAndAmount stopPrice) {
    
    this.stopPrice = stopPrice;
    return this;
  }

   /**
   * Get stopPrice
   * @return stopPrice
  **/
  @jakarta.annotation.Nullable
  public CurrencyAndAmount getStopPrice() {
    return stopPrice;
  }


  public void setStopPrice(CurrencyAndAmount stopPrice) {
    this.stopPrice = stopPrice;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BlockAndOrdersRequest blockAndOrdersRequest = (BlockAndOrdersRequest) o;
    return Objects.equals(this.blockId, blockAndOrdersRequest.blockId) &&
        Objects.equals(this.orders, blockAndOrdersRequest.orders) &&
        Objects.equals(this.blockProperties, blockAndOrdersRequest.blockProperties) &&
        Objects.equals(this.instrumentIdentifiers, blockAndOrdersRequest.instrumentIdentifiers) &&
        Objects.equals(this.side, blockAndOrdersRequest.side) &&
        Objects.equals(this.type, blockAndOrdersRequest.type) &&
        Objects.equals(this.timeInForce, blockAndOrdersRequest.timeInForce) &&
        Objects.equals(this.date, blockAndOrdersRequest.date) &&
        Objects.equals(this.limitPrice, blockAndOrdersRequest.limitPrice) &&
        Objects.equals(this.stopPrice, blockAndOrdersRequest.stopPrice);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(blockId, orders, blockProperties, instrumentIdentifiers, side, type, timeInForce, date, limitPrice, stopPrice);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BlockAndOrdersRequest {\n");
    sb.append("    blockId: ").append(toIndentedString(blockId)).append("\n");
    sb.append("    orders: ").append(toIndentedString(orders)).append("\n");
    sb.append("    blockProperties: ").append(toIndentedString(blockProperties)).append("\n");
    sb.append("    instrumentIdentifiers: ").append(toIndentedString(instrumentIdentifiers)).append("\n");
    sb.append("    side: ").append(toIndentedString(side)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    timeInForce: ").append(toIndentedString(timeInForce)).append("\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    limitPrice: ").append(toIndentedString(limitPrice)).append("\n");
    sb.append("    stopPrice: ").append(toIndentedString(stopPrice)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("blockId");
    openapiFields.add("orders");
    openapiFields.add("blockProperties");
    openapiFields.add("instrumentIdentifiers");
    openapiFields.add("side");
    openapiFields.add("type");
    openapiFields.add("timeInForce");
    openapiFields.add("date");
    openapiFields.add("limitPrice");
    openapiFields.add("stopPrice");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("blockId");
    openapiRequiredFields.add("orders");
    openapiRequiredFields.add("instrumentIdentifiers");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to BlockAndOrdersRequest
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BlockAndOrdersRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BlockAndOrdersRequest is not found in the empty JSON string", BlockAndOrdersRequest.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : BlockAndOrdersRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `blockId`
      ResourceId.validateJsonElement(jsonObj.get("blockId"));
      // ensure the json data is an array
      if (!jsonObj.get("orders").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `orders` to be an array in the JSON string but got `%s`", jsonObj.get("orders").toString()));
      }

      JsonArray jsonArrayorders = jsonObj.getAsJsonArray("orders");
      // validate the required field `orders` (array)
      for (int i = 0; i < jsonArrayorders.size(); i++) {
        BlockedOrderRequest.validateJsonElement(jsonArrayorders.get(i));
      };
      if ((jsonObj.get("side") != null && !jsonObj.get("side").isJsonNull()) && !jsonObj.get("side").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `side` to be a primitive type in the JSON string but got `%s`", jsonObj.get("side").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if ((jsonObj.get("timeInForce") != null && !jsonObj.get("timeInForce").isJsonNull()) && !jsonObj.get("timeInForce").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timeInForce` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timeInForce").toString()));
      }
      // validate the optional field `limitPrice`
      if (jsonObj.get("limitPrice") != null && !jsonObj.get("limitPrice").isJsonNull()) {
        CurrencyAndAmount.validateJsonElement(jsonObj.get("limitPrice"));
      }
      // validate the optional field `stopPrice`
      if (jsonObj.get("stopPrice") != null && !jsonObj.get("stopPrice").isJsonNull()) {
        CurrencyAndAmount.validateJsonElement(jsonObj.get("stopPrice"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BlockAndOrdersRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BlockAndOrdersRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BlockAndOrdersRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BlockAndOrdersRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<BlockAndOrdersRequest>() {
           @Override
           public void write(JsonWriter out, BlockAndOrdersRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BlockAndOrdersRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of BlockAndOrdersRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of BlockAndOrdersRequest
  * @throws IOException if the JSON string is invalid with respect to BlockAndOrdersRequest
  */
  public static BlockAndOrdersRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BlockAndOrdersRequest.class);
  }

 /**
  * Convert an instance of BlockAndOrdersRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
