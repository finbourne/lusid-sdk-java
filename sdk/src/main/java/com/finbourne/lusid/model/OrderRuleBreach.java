/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * OrderRuleBreach
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class OrderRuleBreach {
  public static final String SERIALIZED_NAME_BREACH_TASK_ID = "breachTaskId";
  @SerializedName(SERIALIZED_NAME_BREACH_TASK_ID)
  private String breachTaskId;

  public static final String SERIALIZED_NAME_COMPLIANCE_STATE = "complianceState";
  @SerializedName(SERIALIZED_NAME_COMPLIANCE_STATE)
  private String complianceState;

  public OrderRuleBreach() {
  }

  public OrderRuleBreach breachTaskId(String breachTaskId) {
    
    this.breachTaskId = breachTaskId;
    return this;
  }

   /**
   * Uniquely identifies this historical order breach workflow task.
   * @return breachTaskId
  **/
  @jakarta.annotation.Nonnull
  public String getBreachTaskId() {
    return breachTaskId;
  }


  public void setBreachTaskId(String breachTaskId) {
    this.breachTaskId = breachTaskId;
  }


  public OrderRuleBreach complianceState(String complianceState) {
    
    this.complianceState = complianceState;
    return this;
  }

   /**
   * The compliance state of this order breach. Possible values are &#39;Pending&#39;, &#39;Failed&#39;, &#39;Manually approved&#39;, &#39;Passed&#39; and &#39;Warning&#39;.
   * @return complianceState
  **/
  @jakarta.annotation.Nonnull
  public String getComplianceState() {
    return complianceState;
  }


  public void setComplianceState(String complianceState) {
    this.complianceState = complianceState;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OrderRuleBreach orderRuleBreach = (OrderRuleBreach) o;
    return Objects.equals(this.breachTaskId, orderRuleBreach.breachTaskId) &&
        Objects.equals(this.complianceState, orderRuleBreach.complianceState);
  }

  @Override
  public int hashCode() {
    return Objects.hash(breachTaskId, complianceState);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OrderRuleBreach {\n");
    sb.append("    breachTaskId: ").append(toIndentedString(breachTaskId)).append("\n");
    sb.append("    complianceState: ").append(toIndentedString(complianceState)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("breachTaskId");
    openapiFields.add("complianceState");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("breachTaskId");
    openapiRequiredFields.add("complianceState");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to OrderRuleBreach
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OrderRuleBreach.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OrderRuleBreach is not found in the empty JSON string", OrderRuleBreach.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : OrderRuleBreach.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("breachTaskId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `breachTaskId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("breachTaskId").toString()));
      }
      if (!jsonObj.get("complianceState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `complianceState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("complianceState").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OrderRuleBreach.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OrderRuleBreach' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OrderRuleBreach> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OrderRuleBreach.class));

       return (TypeAdapter<T>) new TypeAdapter<OrderRuleBreach>() {
           @Override
           public void write(JsonWriter out, OrderRuleBreach value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OrderRuleBreach read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of OrderRuleBreach given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of OrderRuleBreach
  * @throws IOException if the JSON string is invalid with respect to OrderRuleBreach
  */
  public static OrderRuleBreach fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OrderRuleBreach.class);
  }

 /**
  * Convert an instance of OrderRuleBreach to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
