/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import com.finbourne.lusid.model.Link;
import com.finbourne.lusid.model.ReferencePortfolioConstituent;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.net.URI;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * GetReferencePortfolioConstituentsResponse
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class GetReferencePortfolioConstituentsResponse {
  public static final String SERIALIZED_NAME_EFFECTIVE_FROM = "effectiveFrom";
  @SerializedName(SERIALIZED_NAME_EFFECTIVE_FROM)
  private OffsetDateTime effectiveFrom;

  /**
   * The available values are: Static, Floating, Periodical
   */
  @JsonAdapter(WeightTypeEnum.Adapter.class)
  public enum WeightTypeEnum {
    STATIC("Static"),
    
    FLOATING("Floating"),
    
    PERIODICAL("Periodical");

    private String value;

    WeightTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static WeightTypeEnum fromValue(String value) {
      for (WeightTypeEnum b : WeightTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<WeightTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final WeightTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public WeightTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return WeightTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_WEIGHT_TYPE = "weightType";
  @SerializedName(SERIALIZED_NAME_WEIGHT_TYPE)
  private WeightTypeEnum weightType;

  /**
   * The available values are: Daily, Weekly, Monthly, Quarterly, Annually
   */
  @JsonAdapter(PeriodTypeEnum.Adapter.class)
  public enum PeriodTypeEnum {
    DAILY("Daily"),
    
    WEEKLY("Weekly"),
    
    MONTHLY("Monthly"),
    
    QUARTERLY("Quarterly"),
    
    ANNUALLY("Annually");

    private String value;

    PeriodTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PeriodTypeEnum fromValue(String value) {
      for (PeriodTypeEnum b : PeriodTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<PeriodTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PeriodTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PeriodTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PeriodTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_PERIOD_TYPE = "periodType";
  @SerializedName(SERIALIZED_NAME_PERIOD_TYPE)
  private PeriodTypeEnum periodType;

  public static final String SERIALIZED_NAME_PERIOD_COUNT = "periodCount";
  @SerializedName(SERIALIZED_NAME_PERIOD_COUNT)
  private Integer periodCount;

  public static final String SERIALIZED_NAME_CONSTITUENTS = "constituents";
  @SerializedName(SERIALIZED_NAME_CONSTITUENTS)
  private List<ReferencePortfolioConstituent> constituents = new ArrayList<>();

  public static final String SERIALIZED_NAME_HREF = "href";
  @SerializedName(SERIALIZED_NAME_HREF)
  private URI href;

  public static final String SERIALIZED_NAME_LINKS = "links";
  @SerializedName(SERIALIZED_NAME_LINKS)
  private List<Link> links;

  public GetReferencePortfolioConstituentsResponse() {
  }

  public GetReferencePortfolioConstituentsResponse effectiveFrom(OffsetDateTime effectiveFrom) {
    
    this.effectiveFrom = effectiveFrom;
    return this;
  }

   /**
   * 
   * @return effectiveFrom
  **/
  @jakarta.annotation.Nonnull
  public OffsetDateTime getEffectiveFrom() {
    return effectiveFrom;
  }


  public void setEffectiveFrom(OffsetDateTime effectiveFrom) {
    this.effectiveFrom = effectiveFrom;
  }


  public GetReferencePortfolioConstituentsResponse weightType(WeightTypeEnum weightType) {
    
    this.weightType = weightType;
    return this;
  }

   /**
   * The available values are: Static, Floating, Periodical
   * @return weightType
  **/
  @jakarta.annotation.Nonnull
  public WeightTypeEnum getWeightType() {
    return weightType;
  }


  public void setWeightType(WeightTypeEnum weightType) {
    this.weightType = weightType;
  }


  public GetReferencePortfolioConstituentsResponse periodType(PeriodTypeEnum periodType) {
    
    this.periodType = periodType;
    return this;
  }

   /**
   * The available values are: Daily, Weekly, Monthly, Quarterly, Annually
   * @return periodType
  **/
  @jakarta.annotation.Nullable
  public PeriodTypeEnum getPeriodType() {
    return periodType;
  }


  public void setPeriodType(PeriodTypeEnum periodType) {
    this.periodType = periodType;
  }


  public GetReferencePortfolioConstituentsResponse periodCount(Integer periodCount) {
    
    this.periodCount = periodCount;
    return this;
  }

   /**
   * 
   * @return periodCount
  **/
  @jakarta.annotation.Nullable
  public Integer getPeriodCount() {
    return periodCount;
  }


  public void setPeriodCount(Integer periodCount) {
    this.periodCount = periodCount;
  }


  public GetReferencePortfolioConstituentsResponse constituents(List<ReferencePortfolioConstituent> constituents) {
    
    this.constituents = constituents;
    return this;
  }

  public GetReferencePortfolioConstituentsResponse addConstituentsItem(ReferencePortfolioConstituent constituentsItem) {
    if (this.constituents == null) {
      this.constituents = new ArrayList<>();
    }
    this.constituents.add(constituentsItem);
    return this;
  }

   /**
   * Set of constituents (instrument/weight pairings)
   * @return constituents
  **/
  @jakarta.annotation.Nonnull
  public List<ReferencePortfolioConstituent> getConstituents() {
    return constituents;
  }


  public void setConstituents(List<ReferencePortfolioConstituent> constituents) {
    this.constituents = constituents;
  }


  public GetReferencePortfolioConstituentsResponse href(URI href) {
    
    this.href = href;
    return this;
  }

   /**
   * The Uri that returns the same result as the original request,  but may include resolved as at time(s).
   * @return href
  **/
  @jakarta.annotation.Nullable
  public URI getHref() {
    return href;
  }


  public void setHref(URI href) {
    this.href = href;
  }


  public GetReferencePortfolioConstituentsResponse links(List<Link> links) {
    
    this.links = links;
    return this;
  }

  public GetReferencePortfolioConstituentsResponse addLinksItem(Link linksItem) {
    if (this.links == null) {
      this.links = new ArrayList<>();
    }
    this.links.add(linksItem);
    return this;
  }

   /**
   * Get links
   * @return links
  **/
  @jakarta.annotation.Nullable
  public List<Link> getLinks() {
    return links;
  }


  public void setLinks(List<Link> links) {
    this.links = links;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetReferencePortfolioConstituentsResponse getReferencePortfolioConstituentsResponse = (GetReferencePortfolioConstituentsResponse) o;
    return Objects.equals(this.effectiveFrom, getReferencePortfolioConstituentsResponse.effectiveFrom) &&
        Objects.equals(this.weightType, getReferencePortfolioConstituentsResponse.weightType) &&
        Objects.equals(this.periodType, getReferencePortfolioConstituentsResponse.periodType) &&
        Objects.equals(this.periodCount, getReferencePortfolioConstituentsResponse.periodCount) &&
        Objects.equals(this.constituents, getReferencePortfolioConstituentsResponse.constituents) &&
        Objects.equals(this.href, getReferencePortfolioConstituentsResponse.href) &&
        Objects.equals(this.links, getReferencePortfolioConstituentsResponse.links);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(effectiveFrom, weightType, periodType, periodCount, constituents, href, links);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetReferencePortfolioConstituentsResponse {\n");
    sb.append("    effectiveFrom: ").append(toIndentedString(effectiveFrom)).append("\n");
    sb.append("    weightType: ").append(toIndentedString(weightType)).append("\n");
    sb.append("    periodType: ").append(toIndentedString(periodType)).append("\n");
    sb.append("    periodCount: ").append(toIndentedString(periodCount)).append("\n");
    sb.append("    constituents: ").append(toIndentedString(constituents)).append("\n");
    sb.append("    href: ").append(toIndentedString(href)).append("\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("effectiveFrom");
    openapiFields.add("weightType");
    openapiFields.add("periodType");
    openapiFields.add("periodCount");
    openapiFields.add("constituents");
    openapiFields.add("href");
    openapiFields.add("links");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("effectiveFrom");
    openapiRequiredFields.add("weightType");
    openapiRequiredFields.add("constituents");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to GetReferencePortfolioConstituentsResponse
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!GetReferencePortfolioConstituentsResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetReferencePortfolioConstituentsResponse is not found in the empty JSON string", GetReferencePortfolioConstituentsResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!GetReferencePortfolioConstituentsResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetReferencePortfolioConstituentsResponse` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GetReferencePortfolioConstituentsResponse.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("weightType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `weightType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("weightType").toString()));
      }
      if ((jsonObj.get("periodType") != null && !jsonObj.get("periodType").isJsonNull()) && !jsonObj.get("periodType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `periodType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("periodType").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("constituents").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `constituents` to be an array in the JSON string but got `%s`", jsonObj.get("constituents").toString()));
      }

      JsonArray jsonArrayconstituents = jsonObj.getAsJsonArray("constituents");
      // validate the required field `constituents` (array)
      for (int i = 0; i < jsonArrayconstituents.size(); i++) {
        ReferencePortfolioConstituent.validateJsonObject(jsonArrayconstituents.get(i).getAsJsonObject());
      };
      if ((jsonObj.get("href") != null && !jsonObj.get("href").isJsonNull()) && !jsonObj.get("href").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `href` to be a primitive type in the JSON string but got `%s`", jsonObj.get("href").toString()));
      }
      if (jsonObj.get("links") != null && !jsonObj.get("links").isJsonNull()) {
        JsonArray jsonArraylinks = jsonObj.getAsJsonArray("links");
        if (jsonArraylinks != null) {
          // ensure the json data is an array
          if (!jsonObj.get("links").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `links` to be an array in the JSON string but got `%s`", jsonObj.get("links").toString()));
          }

          // validate the optional field `links` (array)
          for (int i = 0; i < jsonArraylinks.size(); i++) {
            Link.validateJsonObject(jsonArraylinks.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetReferencePortfolioConstituentsResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetReferencePortfolioConstituentsResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetReferencePortfolioConstituentsResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetReferencePortfolioConstituentsResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<GetReferencePortfolioConstituentsResponse>() {
           @Override
           public void write(JsonWriter out, GetReferencePortfolioConstituentsResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetReferencePortfolioConstituentsResponse read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of GetReferencePortfolioConstituentsResponse given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of GetReferencePortfolioConstituentsResponse
  * @throws IOException if the JSON string is invalid with respect to GetReferencePortfolioConstituentsResponse
  */
  public static GetReferencePortfolioConstituentsResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetReferencePortfolioConstituentsResponse.class);
  }

 /**
  * Convert an instance of GetReferencePortfolioConstituentsResponse to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
