/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import com.finbourne.lusid.model.LusidInstrument;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * Most, if not all, information about contracts is standardised. See, e.g. https://www.cmegroup.com/ for  common codes and similar data. This appears to be in common use by well known market information providers, e.g. Bloomberg and Refinitiv.  There is a lot of overlap with this and FuturesContractDetails but as that is an established DTO we must duplicate a number of fields here
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ExchangeTradedOptionContractDetails {
  public static final String SERIALIZED_NAME_DOM_CCY = "domCcy";
  @SerializedName(SERIALIZED_NAME_DOM_CCY)
  private String domCcy;

  public static final String SERIALIZED_NAME_STRIKE = "strike";
  @SerializedName(SERIALIZED_NAME_STRIKE)
  private java.math.BigDecimal strike;

  public static final String SERIALIZED_NAME_CONTRACT_SIZE = "contractSize";
  @SerializedName(SERIALIZED_NAME_CONTRACT_SIZE)
  private java.math.BigDecimal contractSize;

  public static final String SERIALIZED_NAME_COUNTRY = "country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  private String country;

  public static final String SERIALIZED_NAME_DELIVERY_TYPE = "deliveryType";
  @SerializedName(SERIALIZED_NAME_DELIVERY_TYPE)
  private String deliveryType;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_EXCHANGE_CODE = "exchangeCode";
  @SerializedName(SERIALIZED_NAME_EXCHANGE_CODE)
  private String exchangeCode;

  public static final String SERIALIZED_NAME_EXERCISE_DATE = "exerciseDate";
  @SerializedName(SERIALIZED_NAME_EXERCISE_DATE)
  private OffsetDateTime exerciseDate;

  public static final String SERIALIZED_NAME_EXERCISE_TYPE = "exerciseType";
  @SerializedName(SERIALIZED_NAME_EXERCISE_TYPE)
  private String exerciseType;

  public static final String SERIALIZED_NAME_OPTION_CODE = "optionCode";
  @SerializedName(SERIALIZED_NAME_OPTION_CODE)
  private String optionCode;

  public static final String SERIALIZED_NAME_OPTION_TYPE = "optionType";
  @SerializedName(SERIALIZED_NAME_OPTION_TYPE)
  private String optionType;

  public static final String SERIALIZED_NAME_UNDERLYING = "underlying";
  @SerializedName(SERIALIZED_NAME_UNDERLYING)
  private LusidInstrument underlying;

  public static final String SERIALIZED_NAME_UNDERLYING_CODE = "underlyingCode";
  @SerializedName(SERIALIZED_NAME_UNDERLYING_CODE)
  private String underlyingCode;

  public static final String SERIALIZED_NAME_DELIVERY_DAYS = "deliveryDays";
  @SerializedName(SERIALIZED_NAME_DELIVERY_DAYS)
  private Integer deliveryDays;

  public static final String SERIALIZED_NAME_BUSINESS_DAY_CONVENTION = "businessDayConvention";
  @SerializedName(SERIALIZED_NAME_BUSINESS_DAY_CONVENTION)
  private String businessDayConvention;

  public static final String SERIALIZED_NAME_SETTLEMENT_CALENDARS = "settlementCalendars";
  @SerializedName(SERIALIZED_NAME_SETTLEMENT_CALENDARS)
  private List<String> settlementCalendars;

  public ExchangeTradedOptionContractDetails() {
  }

  public ExchangeTradedOptionContractDetails domCcy(String domCcy) {
    
    this.domCcy = domCcy;
    return this;
  }

   /**
   * Currency in which the contract is paid.
   * @return domCcy
  **/
  @jakarta.annotation.Nonnull
  public String getDomCcy() {
    return domCcy;
  }


  public void setDomCcy(String domCcy) {
    this.domCcy = domCcy;
  }


  public ExchangeTradedOptionContractDetails strike(java.math.BigDecimal strike) {
    
    this.strike = strike;
    return this;
  }

   /**
   * The option strike, this can be negative for some options.
   * @return strike
  **/
  @jakarta.annotation.Nonnull
  public java.math.BigDecimal getStrike() {
    return strike;
  }


  public void setStrike(java.math.BigDecimal strike) {
    this.strike = strike;
  }


  public ExchangeTradedOptionContractDetails contractSize(java.math.BigDecimal contractSize) {
    
    this.contractSize = contractSize;
    return this;
  }

   /**
   * Size of a single contract. By default this should be set to 1000 if otherwise unknown and is defaulted to such.
   * @return contractSize
  **/
  @jakarta.annotation.Nonnull
  public java.math.BigDecimal getContractSize() {
    return contractSize;
  }


  public void setContractSize(java.math.BigDecimal contractSize) {
    this.contractSize = contractSize;
  }


  public ExchangeTradedOptionContractDetails country(String country) {
    
    this.country = country;
    return this;
  }

   /**
   * Country (code) for the exchange.
   * @return country
  **/
  @jakarta.annotation.Nonnull
  public String getCountry() {
    return country;
  }


  public void setCountry(String country) {
    this.country = country;
  }


  public ExchangeTradedOptionContractDetails deliveryType(String deliveryType) {
    
    this.deliveryType = deliveryType;
    return this;
  }

   /**
   * The delivery type, cash or physical. An option on a future is physically settled if upon exercising the  holder receives a future.    Supported string (enumeration) values are: [Cash, Physical].
   * @return deliveryType
  **/
  @jakarta.annotation.Nonnull
  public String getDeliveryType() {
    return deliveryType;
  }


  public void setDeliveryType(String deliveryType) {
    this.deliveryType = deliveryType;
  }


  public ExchangeTradedOptionContractDetails description(String description) {
    
    this.description = description;
    return this;
  }

   /**
   * Description of contract
   * @return description
  **/
  @jakarta.annotation.Nonnull
  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    this.description = description;
  }


  public ExchangeTradedOptionContractDetails exchangeCode(String exchangeCode) {
    
    this.exchangeCode = exchangeCode;
    return this;
  }

   /**
   * Exchange code for contract. This can be any string to uniquely identify the exchange (e.g. Exchange Name, MIC, BBG code).
   * @return exchangeCode
  **/
  @jakarta.annotation.Nonnull
  public String getExchangeCode() {
    return exchangeCode;
  }


  public void setExchangeCode(String exchangeCode) {
    this.exchangeCode = exchangeCode;
  }


  public ExchangeTradedOptionContractDetails exerciseDate(OffsetDateTime exerciseDate) {
    
    this.exerciseDate = exerciseDate;
    return this;
  }

   /**
   * The last exercise date of the option.
   * @return exerciseDate
  **/
  @jakarta.annotation.Nonnull
  public OffsetDateTime getExerciseDate() {
    return exerciseDate;
  }


  public void setExerciseDate(OffsetDateTime exerciseDate) {
    this.exerciseDate = exerciseDate;
  }


  public ExchangeTradedOptionContractDetails exerciseType(String exerciseType) {
    
    this.exerciseType = exerciseType;
    return this;
  }

   /**
   * The exercise type, European, American or Bermudan.    Supported string (enumeration) values are: [European, Bermudan, American].
   * @return exerciseType
  **/
  @jakarta.annotation.Nonnull
  public String getExerciseType() {
    return exerciseType;
  }


  public void setExerciseType(String exerciseType) {
    this.exerciseType = exerciseType;
  }


  public ExchangeTradedOptionContractDetails optionCode(String optionCode) {
    
    this.optionCode = optionCode;
    return this;
  }

   /**
   * Option Contract Code, typically one or two letters, e.g. OG &#x3D;&gt; Option on Gold.
   * @return optionCode
  **/
  @jakarta.annotation.Nonnull
  public String getOptionCode() {
    return optionCode;
  }


  public void setOptionCode(String optionCode) {
    this.optionCode = optionCode;
  }


  public ExchangeTradedOptionContractDetails optionType(String optionType) {
    
    this.optionType = optionType;
    return this;
  }

   /**
   * The option type, Call or Put.    Supported string (enumeration) values are: [Call, Put].
   * @return optionType
  **/
  @jakarta.annotation.Nonnull
  public String getOptionType() {
    return optionType;
  }


  public void setOptionType(String optionType) {
    this.optionType = optionType;
  }


  public ExchangeTradedOptionContractDetails underlying(LusidInstrument underlying) {
    
    this.underlying = underlying;
    return this;
  }

   /**
   * Get underlying
   * @return underlying
  **/
  @jakarta.annotation.Nonnull
  public LusidInstrument getUnderlying() {
    return underlying;
  }


  public void setUnderlying(LusidInstrument underlying) {
    this.underlying = underlying;
  }


  public ExchangeTradedOptionContractDetails underlyingCode(String underlyingCode) {
    
    this.underlyingCode = underlyingCode;
    return this;
  }

   /**
   * Code of the underlying, for an option on futures this should be the futures code.
   * @return underlyingCode
  **/
  @jakarta.annotation.Nonnull
  public String getUnderlyingCode() {
    return underlyingCode;
  }


  public void setUnderlyingCode(String underlyingCode) {
    this.underlyingCode = underlyingCode;
  }


  public ExchangeTradedOptionContractDetails deliveryDays(Integer deliveryDays) {
    
    this.deliveryDays = deliveryDays;
    return this;
  }

   /**
   * Number of business days between exercise date and settlement of the option payoff or underlying.
   * @return deliveryDays
  **/
  @jakarta.annotation.Nullable
  public Integer getDeliveryDays() {
    return deliveryDays;
  }


  public void setDeliveryDays(Integer deliveryDays) {
    this.deliveryDays = deliveryDays;
  }


  public ExchangeTradedOptionContractDetails businessDayConvention(String businessDayConvention) {
    
    this.businessDayConvention = businessDayConvention;
    return this;
  }

   /**
   * The adjustment type to apply to dates that fall upon a non-business day, e.g. modified following or following.  Supported string (enumeration) values are: [NoAdjustment, Previous, P, Following, F, ModifiedPrevious, MP, ModifiedFollowing, MF, HalfMonthModifiedFollowing, Nearest].
   * @return businessDayConvention
  **/
  @jakarta.annotation.Nullable
  public String getBusinessDayConvention() {
    return businessDayConvention;
  }


  public void setBusinessDayConvention(String businessDayConvention) {
    this.businessDayConvention = businessDayConvention;
  }


  public ExchangeTradedOptionContractDetails settlementCalendars(List<String> settlementCalendars) {
    
    this.settlementCalendars = settlementCalendars;
    return this;
  }

  public ExchangeTradedOptionContractDetails addSettlementCalendarsItem(String settlementCalendarsItem) {
    if (this.settlementCalendars == null) {
      this.settlementCalendars = new ArrayList<>();
    }
    this.settlementCalendars.add(settlementCalendarsItem);
    return this;
  }

   /**
   * An array of strings denoting calendars used in calculating the option settlement date.
   * @return settlementCalendars
  **/
  @jakarta.annotation.Nullable
  public List<String> getSettlementCalendars() {
    return settlementCalendars;
  }


  public void setSettlementCalendars(List<String> settlementCalendars) {
    this.settlementCalendars = settlementCalendars;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExchangeTradedOptionContractDetails exchangeTradedOptionContractDetails = (ExchangeTradedOptionContractDetails) o;
    return Objects.equals(this.domCcy, exchangeTradedOptionContractDetails.domCcy) &&
        (this.strike.compareTo(exchangeTradedOptionContractDetails.getStrike()) == 0) &&
        (this.contractSize.compareTo(exchangeTradedOptionContractDetails.getContractSize()) == 0) &&
        Objects.equals(this.country, exchangeTradedOptionContractDetails.country) &&
        Objects.equals(this.deliveryType, exchangeTradedOptionContractDetails.deliveryType) &&
        Objects.equals(this.description, exchangeTradedOptionContractDetails.description) &&
        Objects.equals(this.exchangeCode, exchangeTradedOptionContractDetails.exchangeCode) &&
        Objects.equals(this.exerciseDate, exchangeTradedOptionContractDetails.exerciseDate) &&
        Objects.equals(this.exerciseType, exchangeTradedOptionContractDetails.exerciseType) &&
        Objects.equals(this.optionCode, exchangeTradedOptionContractDetails.optionCode) &&
        Objects.equals(this.optionType, exchangeTradedOptionContractDetails.optionType) &&
        Objects.equals(this.underlying, exchangeTradedOptionContractDetails.underlying) &&
        Objects.equals(this.underlyingCode, exchangeTradedOptionContractDetails.underlyingCode) &&
        Objects.equals(this.deliveryDays, exchangeTradedOptionContractDetails.deliveryDays) &&
        Objects.equals(this.businessDayConvention, exchangeTradedOptionContractDetails.businessDayConvention) &&
        Objects.equals(this.settlementCalendars, exchangeTradedOptionContractDetails.settlementCalendars);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(domCcy, strike, contractSize, country, deliveryType, description, exchangeCode, exerciseDate, exerciseType, optionCode, optionType, underlying, underlyingCode, deliveryDays, businessDayConvention, settlementCalendars);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExchangeTradedOptionContractDetails {\n");
    sb.append("    domCcy: ").append(toIndentedString(domCcy)).append("\n");
    sb.append("    strike: ").append(toIndentedString(strike)).append("\n");
    sb.append("    contractSize: ").append(toIndentedString(contractSize)).append("\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    deliveryType: ").append(toIndentedString(deliveryType)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    exchangeCode: ").append(toIndentedString(exchangeCode)).append("\n");
    sb.append("    exerciseDate: ").append(toIndentedString(exerciseDate)).append("\n");
    sb.append("    exerciseType: ").append(toIndentedString(exerciseType)).append("\n");
    sb.append("    optionCode: ").append(toIndentedString(optionCode)).append("\n");
    sb.append("    optionType: ").append(toIndentedString(optionType)).append("\n");
    sb.append("    underlying: ").append(toIndentedString(underlying)).append("\n");
    sb.append("    underlyingCode: ").append(toIndentedString(underlyingCode)).append("\n");
    sb.append("    deliveryDays: ").append(toIndentedString(deliveryDays)).append("\n");
    sb.append("    businessDayConvention: ").append(toIndentedString(businessDayConvention)).append("\n");
    sb.append("    settlementCalendars: ").append(toIndentedString(settlementCalendars)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("domCcy");
    openapiFields.add("strike");
    openapiFields.add("contractSize");
    openapiFields.add("country");
    openapiFields.add("deliveryType");
    openapiFields.add("description");
    openapiFields.add("exchangeCode");
    openapiFields.add("exerciseDate");
    openapiFields.add("exerciseType");
    openapiFields.add("optionCode");
    openapiFields.add("optionType");
    openapiFields.add("underlying");
    openapiFields.add("underlyingCode");
    openapiFields.add("deliveryDays");
    openapiFields.add("businessDayConvention");
    openapiFields.add("settlementCalendars");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("domCcy");
    openapiRequiredFields.add("strike");
    openapiRequiredFields.add("contractSize");
    openapiRequiredFields.add("country");
    openapiRequiredFields.add("deliveryType");
    openapiRequiredFields.add("description");
    openapiRequiredFields.add("exchangeCode");
    openapiRequiredFields.add("exerciseDate");
    openapiRequiredFields.add("exerciseType");
    openapiRequiredFields.add("optionCode");
    openapiRequiredFields.add("optionType");
    openapiRequiredFields.add("underlying");
    openapiRequiredFields.add("underlyingCode");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ExchangeTradedOptionContractDetails
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ExchangeTradedOptionContractDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ExchangeTradedOptionContractDetails is not found in the empty JSON string", ExchangeTradedOptionContractDetails.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ExchangeTradedOptionContractDetails.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("domCcy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `domCcy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("domCcy").toString()));
      }
      if (!jsonObj.get("country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country").toString()));
      }
      if (!jsonObj.get("deliveryType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deliveryType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deliveryType").toString()));
      }
      if (!jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (!jsonObj.get("exchangeCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `exchangeCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("exchangeCode").toString()));
      }
      if (!jsonObj.get("exerciseType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `exerciseType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("exerciseType").toString()));
      }
      if (!jsonObj.get("optionCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `optionCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("optionCode").toString()));
      }
      if (!jsonObj.get("optionType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `optionType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("optionType").toString()));
      }
      // validate the required field `underlying`
      LusidInstrument.validateJsonElement(jsonObj.get("underlying"));
      if (!jsonObj.get("underlyingCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `underlyingCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("underlyingCode").toString()));
      }
      if ((jsonObj.get("businessDayConvention") != null && !jsonObj.get("businessDayConvention").isJsonNull()) && !jsonObj.get("businessDayConvention").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `businessDayConvention` to be a primitive type in the JSON string but got `%s`", jsonObj.get("businessDayConvention").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("settlementCalendars") != null && !jsonObj.get("settlementCalendars").isJsonNull() && !jsonObj.get("settlementCalendars").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `settlementCalendars` to be an array in the JSON string but got `%s`", jsonObj.get("settlementCalendars").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ExchangeTradedOptionContractDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ExchangeTradedOptionContractDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ExchangeTradedOptionContractDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ExchangeTradedOptionContractDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<ExchangeTradedOptionContractDetails>() {
           @Override
           public void write(JsonWriter out, ExchangeTradedOptionContractDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ExchangeTradedOptionContractDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ExchangeTradedOptionContractDetails given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ExchangeTradedOptionContractDetails
  * @throws IOException if the JSON string is invalid with respect to ExchangeTradedOptionContractDetails
  */
  public static ExchangeTradedOptionContractDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ExchangeTradedOptionContractDetails.class);
  }

 /**
  * Convert an instance of ExchangeTradedOptionContractDetails to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
