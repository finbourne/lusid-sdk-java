/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import com.finbourne.lusid.model.ElectionSpecification;
import com.finbourne.lusid.model.TemplateField;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * TransactionTemplateSpecification
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class TransactionTemplateSpecification {
  public static final String SERIALIZED_NAME_INSTRUMENT_TYPE = "instrumentType";
  @SerializedName(SERIALIZED_NAME_INSTRUMENT_TYPE)
  private String instrumentType;

  public static final String SERIALIZED_NAME_INSTRUMENT_EVENT_TYPE = "instrumentEventType";
  @SerializedName(SERIALIZED_NAME_INSTRUMENT_EVENT_TYPE)
  private String instrumentEventType;

  public static final String SERIALIZED_NAME_SUPPORTED_PARTICIPATION_TYPES = "supportedParticipationTypes";
  @SerializedName(SERIALIZED_NAME_SUPPORTED_PARTICIPATION_TYPES)
  private List<String> supportedParticipationTypes = new ArrayList<>();

  public static final String SERIALIZED_NAME_SUPPORTED_ELECTION_TYPES = "supportedElectionTypes";
  @SerializedName(SERIALIZED_NAME_SUPPORTED_ELECTION_TYPES)
  private List<ElectionSpecification> supportedElectionTypes = new ArrayList<>();

  public static final String SERIALIZED_NAME_SUPPORTED_TEMPLATE_FIELDS = "supportedTemplateFields";
  @SerializedName(SERIALIZED_NAME_SUPPORTED_TEMPLATE_FIELDS)
  private List<TemplateField> supportedTemplateFields = new ArrayList<>();

  public TransactionTemplateSpecification() {
  }

  public TransactionTemplateSpecification instrumentType(String instrumentType) {
    
    this.instrumentType = instrumentType;
    return this;
  }

   /**
   * Get instrumentType
   * @return instrumentType
  **/
  @jakarta.annotation.Nonnull
  public String getInstrumentType() {
    return instrumentType;
  }


  public void setInstrumentType(String instrumentType) {
    this.instrumentType = instrumentType;
  }


  public TransactionTemplateSpecification instrumentEventType(String instrumentEventType) {
    
    this.instrumentEventType = instrumentEventType;
    return this;
  }

   /**
   * Get instrumentEventType
   * @return instrumentEventType
  **/
  @jakarta.annotation.Nonnull
  public String getInstrumentEventType() {
    return instrumentEventType;
  }


  public void setInstrumentEventType(String instrumentEventType) {
    this.instrumentEventType = instrumentEventType;
  }


  public TransactionTemplateSpecification supportedParticipationTypes(List<String> supportedParticipationTypes) {
    
    this.supportedParticipationTypes = supportedParticipationTypes;
    return this;
  }

  public TransactionTemplateSpecification addSupportedParticipationTypesItem(String supportedParticipationTypesItem) {
    if (this.supportedParticipationTypes == null) {
      this.supportedParticipationTypes = new ArrayList<>();
    }
    this.supportedParticipationTypes.add(supportedParticipationTypesItem);
    return this;
  }

   /**
   * Get supportedParticipationTypes
   * @return supportedParticipationTypes
  **/
  @jakarta.annotation.Nonnull
  public List<String> getSupportedParticipationTypes() {
    return supportedParticipationTypes;
  }


  public void setSupportedParticipationTypes(List<String> supportedParticipationTypes) {
    this.supportedParticipationTypes = supportedParticipationTypes;
  }


  public TransactionTemplateSpecification supportedElectionTypes(List<ElectionSpecification> supportedElectionTypes) {
    
    this.supportedElectionTypes = supportedElectionTypes;
    return this;
  }

  public TransactionTemplateSpecification addSupportedElectionTypesItem(ElectionSpecification supportedElectionTypesItem) {
    if (this.supportedElectionTypes == null) {
      this.supportedElectionTypes = new ArrayList<>();
    }
    this.supportedElectionTypes.add(supportedElectionTypesItem);
    return this;
  }

   /**
   * Get supportedElectionTypes
   * @return supportedElectionTypes
  **/
  @jakarta.annotation.Nonnull
  public List<ElectionSpecification> getSupportedElectionTypes() {
    return supportedElectionTypes;
  }


  public void setSupportedElectionTypes(List<ElectionSpecification> supportedElectionTypes) {
    this.supportedElectionTypes = supportedElectionTypes;
  }


  public TransactionTemplateSpecification supportedTemplateFields(List<TemplateField> supportedTemplateFields) {
    
    this.supportedTemplateFields = supportedTemplateFields;
    return this;
  }

  public TransactionTemplateSpecification addSupportedTemplateFieldsItem(TemplateField supportedTemplateFieldsItem) {
    if (this.supportedTemplateFields == null) {
      this.supportedTemplateFields = new ArrayList<>();
    }
    this.supportedTemplateFields.add(supportedTemplateFieldsItem);
    return this;
  }

   /**
   * Get supportedTemplateFields
   * @return supportedTemplateFields
  **/
  @jakarta.annotation.Nonnull
  public List<TemplateField> getSupportedTemplateFields() {
    return supportedTemplateFields;
  }


  public void setSupportedTemplateFields(List<TemplateField> supportedTemplateFields) {
    this.supportedTemplateFields = supportedTemplateFields;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TransactionTemplateSpecification transactionTemplateSpecification = (TransactionTemplateSpecification) o;
    return Objects.equals(this.instrumentType, transactionTemplateSpecification.instrumentType) &&
        Objects.equals(this.instrumentEventType, transactionTemplateSpecification.instrumentEventType) &&
        Objects.equals(this.supportedParticipationTypes, transactionTemplateSpecification.supportedParticipationTypes) &&
        Objects.equals(this.supportedElectionTypes, transactionTemplateSpecification.supportedElectionTypes) &&
        Objects.equals(this.supportedTemplateFields, transactionTemplateSpecification.supportedTemplateFields);
  }

  @Override
  public int hashCode() {
    return Objects.hash(instrumentType, instrumentEventType, supportedParticipationTypes, supportedElectionTypes, supportedTemplateFields);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TransactionTemplateSpecification {\n");
    sb.append("    instrumentType: ").append(toIndentedString(instrumentType)).append("\n");
    sb.append("    instrumentEventType: ").append(toIndentedString(instrumentEventType)).append("\n");
    sb.append("    supportedParticipationTypes: ").append(toIndentedString(supportedParticipationTypes)).append("\n");
    sb.append("    supportedElectionTypes: ").append(toIndentedString(supportedElectionTypes)).append("\n");
    sb.append("    supportedTemplateFields: ").append(toIndentedString(supportedTemplateFields)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("instrumentType");
    openapiFields.add("instrumentEventType");
    openapiFields.add("supportedParticipationTypes");
    openapiFields.add("supportedElectionTypes");
    openapiFields.add("supportedTemplateFields");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("instrumentType");
    openapiRequiredFields.add("instrumentEventType");
    openapiRequiredFields.add("supportedParticipationTypes");
    openapiRequiredFields.add("supportedElectionTypes");
    openapiRequiredFields.add("supportedTemplateFields");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to TransactionTemplateSpecification
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TransactionTemplateSpecification.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TransactionTemplateSpecification is not found in the empty JSON string", TransactionTemplateSpecification.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TransactionTemplateSpecification.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("instrumentType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `instrumentType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("instrumentType").toString()));
      }
      if (!jsonObj.get("instrumentEventType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `instrumentEventType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("instrumentEventType").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("supportedParticipationTypes") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("supportedParticipationTypes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `supportedParticipationTypes` to be an array in the JSON string but got `%s`", jsonObj.get("supportedParticipationTypes").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("supportedElectionTypes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `supportedElectionTypes` to be an array in the JSON string but got `%s`", jsonObj.get("supportedElectionTypes").toString()));
      }

      JsonArray jsonArraysupportedElectionTypes = jsonObj.getAsJsonArray("supportedElectionTypes");
      // validate the required field `supportedElectionTypes` (array)
      for (int i = 0; i < jsonArraysupportedElectionTypes.size(); i++) {
        ElectionSpecification.validateJsonElement(jsonArraysupportedElectionTypes.get(i));
      };
      // ensure the json data is an array
      if (!jsonObj.get("supportedTemplateFields").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `supportedTemplateFields` to be an array in the JSON string but got `%s`", jsonObj.get("supportedTemplateFields").toString()));
      }

      JsonArray jsonArraysupportedTemplateFields = jsonObj.getAsJsonArray("supportedTemplateFields");
      // validate the required field `supportedTemplateFields` (array)
      for (int i = 0; i < jsonArraysupportedTemplateFields.size(); i++) {
        TemplateField.validateJsonElement(jsonArraysupportedTemplateFields.get(i));
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TransactionTemplateSpecification.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TransactionTemplateSpecification' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TransactionTemplateSpecification> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TransactionTemplateSpecification.class));

       return (TypeAdapter<T>) new TypeAdapter<TransactionTemplateSpecification>() {
           @Override
           public void write(JsonWriter out, TransactionTemplateSpecification value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TransactionTemplateSpecification read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TransactionTemplateSpecification given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TransactionTemplateSpecification
  * @throws IOException if the JSON string is invalid with respect to TransactionTemplateSpecification
  */
  public static TransactionTemplateSpecification fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TransactionTemplateSpecification.class);
  }

 /**
  * Convert an instance of TransactionTemplateSpecification to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
