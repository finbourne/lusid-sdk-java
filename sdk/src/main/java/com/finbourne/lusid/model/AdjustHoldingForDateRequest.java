/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.model;

import java.util.Objects;
import com.finbourne.lusid.model.PerpetualProperty;
import com.finbourne.lusid.model.ResourceId;
import com.finbourne.lusid.model.TargetTaxLotRequest;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.lusid.JSON;

/**
 * This request specifies target holdings. i.e. holding data that the  system should match. When processed by the movement  engine, it will create &#39;true-up&#39; adjustments on the fly.
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class AdjustHoldingForDateRequest {
  public static final String SERIALIZED_NAME_EFFECTIVE_AT = "effectiveAt";
  @SerializedName(SERIALIZED_NAME_EFFECTIVE_AT)
  private String effectiveAt;

  public static final String SERIALIZED_NAME_INSTRUMENT_IDENTIFIERS = "instrumentIdentifiers";
  @SerializedName(SERIALIZED_NAME_INSTRUMENT_IDENTIFIERS)
  private Map<String, String> instrumentIdentifiers = new HashMap<>();

  public static final String SERIALIZED_NAME_SUB_HOLDING_KEYS = "subHoldingKeys";
  @SerializedName(SERIALIZED_NAME_SUB_HOLDING_KEYS)
  private Map<String, PerpetualProperty> subHoldingKeys;

  public static final String SERIALIZED_NAME_PROPERTIES = "properties";
  @SerializedName(SERIALIZED_NAME_PROPERTIES)
  private Map<String, PerpetualProperty> properties;

  public static final String SERIALIZED_NAME_TAX_LOTS = "taxLots";
  @SerializedName(SERIALIZED_NAME_TAX_LOTS)
  private List<TargetTaxLotRequest> taxLots = new ArrayList<>();

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private String currency;

  public static final String SERIALIZED_NAME_CUSTODIAN_ACCOUNT_ID = "custodianAccountId";
  @SerializedName(SERIALIZED_NAME_CUSTODIAN_ACCOUNT_ID)
  private ResourceId custodianAccountId;

  public AdjustHoldingForDateRequest() {
  }

  public AdjustHoldingForDateRequest effectiveAt(String effectiveAt) {
    
    this.effectiveAt = effectiveAt;
    return this;
  }

   /**
   * The Effective date that the target holding will be adjusted at.
   * @return effectiveAt
  **/
  @jakarta.annotation.Nonnull
  public String getEffectiveAt() {
    return effectiveAt;
  }


  public void setEffectiveAt(String effectiveAt) {
    this.effectiveAt = effectiveAt;
  }


  public AdjustHoldingForDateRequest instrumentIdentifiers(Map<String, String> instrumentIdentifiers) {
    
    this.instrumentIdentifiers = instrumentIdentifiers;
    return this;
  }

  public AdjustHoldingForDateRequest putInstrumentIdentifiersItem(String key, String instrumentIdentifiersItem) {
    if (this.instrumentIdentifiers == null) {
      this.instrumentIdentifiers = new HashMap<>();
    }
    this.instrumentIdentifiers.put(key, instrumentIdentifiersItem);
    return this;
  }

   /**
   * A set of instrument identifiers that can resolve the holding adjustment to a unique instrument.
   * @return instrumentIdentifiers
  **/
  @jakarta.annotation.Nonnull
  public Map<String, String> getInstrumentIdentifiers() {
    return instrumentIdentifiers;
  }


  public void setInstrumentIdentifiers(Map<String, String> instrumentIdentifiers) {
    this.instrumentIdentifiers = instrumentIdentifiers;
  }


  public AdjustHoldingForDateRequest subHoldingKeys(Map<String, PerpetualProperty> subHoldingKeys) {
    
    this.subHoldingKeys = subHoldingKeys;
    return this;
  }

  public AdjustHoldingForDateRequest putSubHoldingKeysItem(String key, PerpetualProperty subHoldingKeysItem) {
    if (this.subHoldingKeys == null) {
      this.subHoldingKeys = new HashMap<>();
    }
    this.subHoldingKeys.put(key, subHoldingKeysItem);
    return this;
  }

   /**
   * Set of unique transaction properties and associated values to store with the holding adjustment transaction automatically created by LUSID. Each property must be from the &#39;Transaction&#39; domain.
   * @return subHoldingKeys
  **/
  @jakarta.annotation.Nullable
  public Map<String, PerpetualProperty> getSubHoldingKeys() {
    return subHoldingKeys;
  }


  public void setSubHoldingKeys(Map<String, PerpetualProperty> subHoldingKeys) {
    this.subHoldingKeys = subHoldingKeys;
  }


  public AdjustHoldingForDateRequest properties(Map<String, PerpetualProperty> properties) {
    
    this.properties = properties;
    return this;
  }

  public AdjustHoldingForDateRequest putPropertiesItem(String key, PerpetualProperty propertiesItem) {
    if (this.properties == null) {
      this.properties = new HashMap<>();
    }
    this.properties.put(key, propertiesItem);
    return this;
  }

   /**
   * Set of unique holding properties and associated values to store with the target holding. Each property must be from the &#39;Holding&#39; domain.
   * @return properties
  **/
  @jakarta.annotation.Nullable
  public Map<String, PerpetualProperty> getProperties() {
    return properties;
  }


  public void setProperties(Map<String, PerpetualProperty> properties) {
    this.properties = properties;
  }


  public AdjustHoldingForDateRequest taxLots(List<TargetTaxLotRequest> taxLots) {
    
    this.taxLots = taxLots;
    return this;
  }

  public AdjustHoldingForDateRequest addTaxLotsItem(TargetTaxLotRequest taxLotsItem) {
    if (this.taxLots == null) {
      this.taxLots = new ArrayList<>();
    }
    this.taxLots.add(taxLotsItem);
    return this;
  }

   /**
   * The tax-lots that together make up the target holding.
   * @return taxLots
  **/
  @jakarta.annotation.Nonnull
  public List<TargetTaxLotRequest> getTaxLots() {
    return taxLots;
  }


  public void setTaxLots(List<TargetTaxLotRequest> taxLots) {
    this.taxLots = taxLots;
  }


  public AdjustHoldingForDateRequest currency(String currency) {
    
    this.currency = currency;
    return this;
  }

   /**
   * The Holding currency. This needs to be equal with the one on the TaxLot -&gt; cost if one is specified
   * @return currency
  **/
  @jakarta.annotation.Nullable
  public String getCurrency() {
    return currency;
  }


  public void setCurrency(String currency) {
    this.currency = currency;
  }


  public AdjustHoldingForDateRequest custodianAccountId(ResourceId custodianAccountId) {
    
    this.custodianAccountId = custodianAccountId;
    return this;
  }

   /**
   * Get custodianAccountId
   * @return custodianAccountId
  **/
  @jakarta.annotation.Nullable
  public ResourceId getCustodianAccountId() {
    return custodianAccountId;
  }


  public void setCustodianAccountId(ResourceId custodianAccountId) {
    this.custodianAccountId = custodianAccountId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AdjustHoldingForDateRequest adjustHoldingForDateRequest = (AdjustHoldingForDateRequest) o;
    return Objects.equals(this.effectiveAt, adjustHoldingForDateRequest.effectiveAt) &&
        Objects.equals(this.instrumentIdentifiers, adjustHoldingForDateRequest.instrumentIdentifiers) &&
        Objects.equals(this.subHoldingKeys, adjustHoldingForDateRequest.subHoldingKeys) &&
        Objects.equals(this.properties, adjustHoldingForDateRequest.properties) &&
        Objects.equals(this.taxLots, adjustHoldingForDateRequest.taxLots) &&
        Objects.equals(this.currency, adjustHoldingForDateRequest.currency) &&
        Objects.equals(this.custodianAccountId, adjustHoldingForDateRequest.custodianAccountId);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(effectiveAt, instrumentIdentifiers, subHoldingKeys, properties, taxLots, currency, custodianAccountId);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AdjustHoldingForDateRequest {\n");
    sb.append("    effectiveAt: ").append(toIndentedString(effectiveAt)).append("\n");
    sb.append("    instrumentIdentifiers: ").append(toIndentedString(instrumentIdentifiers)).append("\n");
    sb.append("    subHoldingKeys: ").append(toIndentedString(subHoldingKeys)).append("\n");
    sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
    sb.append("    taxLots: ").append(toIndentedString(taxLots)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    custodianAccountId: ").append(toIndentedString(custodianAccountId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("effectiveAt");
    openapiFields.add("instrumentIdentifiers");
    openapiFields.add("subHoldingKeys");
    openapiFields.add("properties");
    openapiFields.add("taxLots");
    openapiFields.add("currency");
    openapiFields.add("custodianAccountId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("effectiveAt");
    openapiRequiredFields.add("instrumentIdentifiers");
    openapiRequiredFields.add("taxLots");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to AdjustHoldingForDateRequest
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AdjustHoldingForDateRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AdjustHoldingForDateRequest is not found in the empty JSON string", AdjustHoldingForDateRequest.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AdjustHoldingForDateRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("effectiveAt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `effectiveAt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("effectiveAt").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("taxLots").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `taxLots` to be an array in the JSON string but got `%s`", jsonObj.get("taxLots").toString()));
      }

      JsonArray jsonArraytaxLots = jsonObj.getAsJsonArray("taxLots");
      // validate the required field `taxLots` (array)
      for (int i = 0; i < jsonArraytaxLots.size(); i++) {
        TargetTaxLotRequest.validateJsonElement(jsonArraytaxLots.get(i));
      };
      if ((jsonObj.get("currency") != null && !jsonObj.get("currency").isJsonNull()) && !jsonObj.get("currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency").toString()));
      }
      // validate the optional field `custodianAccountId`
      if (jsonObj.get("custodianAccountId") != null && !jsonObj.get("custodianAccountId").isJsonNull()) {
        ResourceId.validateJsonElement(jsonObj.get("custodianAccountId"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AdjustHoldingForDateRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AdjustHoldingForDateRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AdjustHoldingForDateRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AdjustHoldingForDateRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<AdjustHoldingForDateRequest>() {
           @Override
           public void write(JsonWriter out, AdjustHoldingForDateRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AdjustHoldingForDateRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AdjustHoldingForDateRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AdjustHoldingForDateRequest
  * @throws IOException if the JSON string is invalid with respect to AdjustHoldingForDateRequest
  */
  public static AdjustHoldingForDateRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AdjustHoldingForDateRequest.class);
  }

 /**
  * Convert an instance of AdjustHoldingForDateRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
