/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.api;

import com.finbourne.lusid.ApiCallback;
import com.finbourne.lusid.ApiClient;
import com.finbourne.lusid.ApiException;
import com.finbourne.lusid.ApiResponse;
import com.finbourne.lusid.Configuration;
import com.finbourne.lusid.Pair;
import com.finbourne.lusid.ProgressRequestBody;
import com.finbourne.lusid.ProgressResponseBody;
import com.finbourne.lusid.extensions.ConfigurationOptions;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.finbourne.lusid.model.AnnulSingleStructuredDataResponse;
import com.finbourne.lusid.model.GetRecipeComposerResponse;
import com.finbourne.lusid.model.GetRecipeResponse;
import com.finbourne.lusid.model.LusidProblemDetails;
import com.finbourne.lusid.model.LusidValidationProblemDetails;
import java.time.OffsetDateTime;
import com.finbourne.lusid.model.ResourceListOfGetRecipeComposerResponse;
import com.finbourne.lusid.model.ResourceListOfGetRecipeResponse;
import com.finbourne.lusid.model.UpsertRecipeComposerRequest;
import com.finbourne.lusid.model.UpsertRecipeRequest;
import com.finbourne.lusid.model.UpsertSingleStructuredDataResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ConfigurationRecipeApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ConfigurationRecipeApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ConfigurationRecipeApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call deleteConfigurationRecipeCall(String scope, String code, final ApiCallback _callback) throws ApiException {
        return deleteConfigurationRecipeCall(scope, code,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call deleteConfigurationRecipeCall(String scope, String code, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/recipes/{scope}/{code}"
            .replace("{" + "scope" + "}", localVarApiClient.escapeString(scope.toString()))
            .replace("{" + "code" + "}", localVarApiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteConfigurationRecipeValidateBeforeCall(String scope, String code, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling deleteConfigurationRecipe(Async)");
        }

        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling deleteConfigurationRecipe(Async)");
        }

        return deleteConfigurationRecipeCall(scope, code, _callback, opts);

    }


    private ApiResponse<AnnulSingleStructuredDataResponse> deleteConfigurationRecipeWithHttpInfo(String scope, String code) throws ApiException {
        okhttp3.Call localVarCall = deleteConfigurationRecipeValidateBeforeCall(scope, code, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<AnnulSingleStructuredDataResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<AnnulSingleStructuredDataResponse> deleteConfigurationRecipeWithHttpInfo(String scope, String code, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = deleteConfigurationRecipeValidateBeforeCall(scope, code, null, opts);
        Type localVarReturnType = new TypeToken<AnnulSingleStructuredDataResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteConfigurationRecipeAsync(String scope, String code, final ApiCallback<AnnulSingleStructuredDataResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteConfigurationRecipeValidateBeforeCall(scope, code, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<AnnulSingleStructuredDataResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call deleteConfigurationRecipeAsync(String scope, String code, final ApiCallback<AnnulSingleStructuredDataResponse> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = deleteConfigurationRecipeValidateBeforeCall(scope, code, _callback, opts);
        Type localVarReturnType = new TypeToken<AnnulSingleStructuredDataResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIdeleteConfigurationRecipeRequest {
        private final String scope;
        private final String code;

        private APIdeleteConfigurationRecipeRequest(String scope, String code) {
            this.scope = scope;
            this.code = code;
        }

        /**
         * Build call for deleteConfigurationRecipe
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The AsAt of deletion or failure </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteConfigurationRecipeCall(scope, code, _callback);
        }

        /**
         * Execute deleteConfigurationRecipe request
         * @return AnnulSingleStructuredDataResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The AsAt of deletion or failure </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public AnnulSingleStructuredDataResponse execute() throws ApiException {
            ApiResponse<AnnulSingleStructuredDataResponse> localVarResp = deleteConfigurationRecipeWithHttpInfo(scope, code);
            return localVarResp.getData();
        }

        /**
         * Execute deleteConfigurationRecipe request. Use any specified configuration options to override any other configuration for this request only.
         * @return AnnulSingleStructuredDataResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The AsAt of deletion or failure </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public AnnulSingleStructuredDataResponse execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<AnnulSingleStructuredDataResponse> localVarResp = deleteConfigurationRecipeWithHttpInfo(scope, code, opts);
            return localVarResp.getData();
        }

        /**
         * Execute deleteConfigurationRecipe request with HTTP info returned
         * @return ApiResponse&lt;AnnulSingleStructuredDataResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The AsAt of deletion or failure </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AnnulSingleStructuredDataResponse> executeWithHttpInfo() throws ApiException {
            return deleteConfigurationRecipeWithHttpInfo(scope, code);
        }

        /**
         * Execute deleteConfigurationRecipe request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;AnnulSingleStructuredDataResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The AsAt of deletion or failure </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AnnulSingleStructuredDataResponse> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return deleteConfigurationRecipeWithHttpInfo(scope, code, opts);
        }

        /**
         * Execute deleteConfigurationRecipe request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The AsAt of deletion or failure </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AnnulSingleStructuredDataResponse> _callback) throws ApiException {
            return deleteConfigurationRecipeAsync(scope, code, _callback);
        }

        /**
         * Execute deleteConfigurationRecipe request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The AsAt of deletion or failure </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AnnulSingleStructuredDataResponse> _callback, ConfigurationOptions opts) throws ApiException {
            return deleteConfigurationRecipeAsync(scope, code, _callback, opts);
        }
    }

    /**
     * DeleteConfigurationRecipe: Delete a Configuration Recipe, assuming that it is present.
     * Delete the specified Configuration Recipe from a single scope.     The response will return either detail of the deleted item, or an explanation (failure) as to why this did not succeed.     It is important to always check for any unsuccessful response.
     * @param scope The scope of the Configuration Recipe to delete. (required)
     * @param code The Configuration Recipe to delete. (required)
     * @return APIdeleteConfigurationRecipeRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The AsAt of deletion or failure </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIdeleteConfigurationRecipeRequest deleteConfigurationRecipe(String scope, String code) {
        return new APIdeleteConfigurationRecipeRequest(scope, code);
    }
    private okhttp3.Call deleteRecipeComposerCall(String scope, String code, final ApiCallback _callback) throws ApiException {
        return deleteRecipeComposerCall(scope, code,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call deleteRecipeComposerCall(String scope, String code, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/recipes/composer/{scope}/{code}"
            .replace("{" + "scope" + "}", localVarApiClient.escapeString(scope.toString()))
            .replace("{" + "code" + "}", localVarApiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteRecipeComposerValidateBeforeCall(String scope, String code, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling deleteRecipeComposer(Async)");
        }

        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling deleteRecipeComposer(Async)");
        }

        return deleteRecipeComposerCall(scope, code, _callback, opts);

    }


    private ApiResponse<AnnulSingleStructuredDataResponse> deleteRecipeComposerWithHttpInfo(String scope, String code) throws ApiException {
        okhttp3.Call localVarCall = deleteRecipeComposerValidateBeforeCall(scope, code, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<AnnulSingleStructuredDataResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<AnnulSingleStructuredDataResponse> deleteRecipeComposerWithHttpInfo(String scope, String code, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = deleteRecipeComposerValidateBeforeCall(scope, code, null, opts);
        Type localVarReturnType = new TypeToken<AnnulSingleStructuredDataResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteRecipeComposerAsync(String scope, String code, final ApiCallback<AnnulSingleStructuredDataResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteRecipeComposerValidateBeforeCall(scope, code, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<AnnulSingleStructuredDataResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call deleteRecipeComposerAsync(String scope, String code, final ApiCallback<AnnulSingleStructuredDataResponse> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = deleteRecipeComposerValidateBeforeCall(scope, code, _callback, opts);
        Type localVarReturnType = new TypeToken<AnnulSingleStructuredDataResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIdeleteRecipeComposerRequest {
        private final String scope;
        private final String code;

        private APIdeleteRecipeComposerRequest(String scope, String code) {
            this.scope = scope;
            this.code = code;
        }

        /**
         * Build call for deleteRecipeComposer
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The AsAt of deletion or failure </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteRecipeComposerCall(scope, code, _callback);
        }

        /**
         * Execute deleteRecipeComposer request
         * @return AnnulSingleStructuredDataResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The AsAt of deletion or failure </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public AnnulSingleStructuredDataResponse execute() throws ApiException {
            ApiResponse<AnnulSingleStructuredDataResponse> localVarResp = deleteRecipeComposerWithHttpInfo(scope, code);
            return localVarResp.getData();
        }

        /**
         * Execute deleteRecipeComposer request. Use any specified configuration options to override any other configuration for this request only.
         * @return AnnulSingleStructuredDataResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The AsAt of deletion or failure </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public AnnulSingleStructuredDataResponse execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<AnnulSingleStructuredDataResponse> localVarResp = deleteRecipeComposerWithHttpInfo(scope, code, opts);
            return localVarResp.getData();
        }

        /**
         * Execute deleteRecipeComposer request with HTTP info returned
         * @return ApiResponse&lt;AnnulSingleStructuredDataResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The AsAt of deletion or failure </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AnnulSingleStructuredDataResponse> executeWithHttpInfo() throws ApiException {
            return deleteRecipeComposerWithHttpInfo(scope, code);
        }

        /**
         * Execute deleteRecipeComposer request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;AnnulSingleStructuredDataResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The AsAt of deletion or failure </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AnnulSingleStructuredDataResponse> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return deleteRecipeComposerWithHttpInfo(scope, code, opts);
        }

        /**
         * Execute deleteRecipeComposer request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The AsAt of deletion or failure </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AnnulSingleStructuredDataResponse> _callback) throws ApiException {
            return deleteRecipeComposerAsync(scope, code, _callback);
        }

        /**
         * Execute deleteRecipeComposer request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The AsAt of deletion or failure </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AnnulSingleStructuredDataResponse> _callback, ConfigurationOptions opts) throws ApiException {
            return deleteRecipeComposerAsync(scope, code, _callback, opts);
        }
    }

    /**
     * DeleteRecipeComposer: Delete a Recipe Composer, assuming that it is present.
     * Delete the specified Recipe Composer from a single scope.     The response will return either detail of the deleted item, or an explanation (failure) as to why this did not succeed.     It is important to always check for any unsuccessful response.
     * @param scope The scope of the Recipe Composer to delete. (required)
     * @param code The Recipe Composer to delete. (required)
     * @return APIdeleteRecipeComposerRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The AsAt of deletion or failure </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIdeleteRecipeComposerRequest deleteRecipeComposer(String scope, String code) {
        return new APIdeleteRecipeComposerRequest(scope, code);
    }
    private okhttp3.Call getConfigurationRecipeCall(String scope, String code, OffsetDateTime asAt, final ApiCallback _callback) throws ApiException {
        return getConfigurationRecipeCall(scope, code, asAt,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call getConfigurationRecipeCall(String scope, String code, OffsetDateTime asAt, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/recipes/{scope}/{code}"
            .replace("{" + "scope" + "}", localVarApiClient.escapeString(scope.toString()))
            .replace("{" + "code" + "}", localVarApiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (asAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asAt", asAt));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getConfigurationRecipeValidateBeforeCall(String scope, String code, OffsetDateTime asAt, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling getConfigurationRecipe(Async)");
        }

        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling getConfigurationRecipe(Async)");
        }

        return getConfigurationRecipeCall(scope, code, asAt, _callback, opts);

    }


    private ApiResponse<GetRecipeResponse> getConfigurationRecipeWithHttpInfo(String scope, String code, OffsetDateTime asAt) throws ApiException {
        okhttp3.Call localVarCall = getConfigurationRecipeValidateBeforeCall(scope, code, asAt, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<GetRecipeResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<GetRecipeResponse> getConfigurationRecipeWithHttpInfo(String scope, String code, OffsetDateTime asAt, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = getConfigurationRecipeValidateBeforeCall(scope, code, asAt, null, opts);
        Type localVarReturnType = new TypeToken<GetRecipeResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getConfigurationRecipeAsync(String scope, String code, OffsetDateTime asAt, final ApiCallback<GetRecipeResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getConfigurationRecipeValidateBeforeCall(scope, code, asAt, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<GetRecipeResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call getConfigurationRecipeAsync(String scope, String code, OffsetDateTime asAt, final ApiCallback<GetRecipeResponse> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = getConfigurationRecipeValidateBeforeCall(scope, code, asAt, _callback, opts);
        Type localVarReturnType = new TypeToken<GetRecipeResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetConfigurationRecipeRequest {
        private final String scope;
        private final String code;
        private OffsetDateTime asAt;

        private APIgetConfigurationRecipeRequest(String scope, String code) {
            this.scope = scope;
            this.code = code;
        }

        /**
         * Set asAt
         * @param asAt The asAt datetime at which to retrieve the Configuration Recipe. Defaults to return the latest version if not specified. (optional)
         * @return APIgetConfigurationRecipeRequest
         */
        public APIgetConfigurationRecipeRequest asAt(OffsetDateTime asAt) {
            this.asAt = asAt;
            return this;
        }

        /**
         * Build call for getConfigurationRecipe
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The successfully retrieved Configuration Recipe or any failure </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getConfigurationRecipeCall(scope, code, asAt, _callback);
        }

        /**
         * Execute getConfigurationRecipe request
         * @return GetRecipeResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The successfully retrieved Configuration Recipe or any failure </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public GetRecipeResponse execute() throws ApiException {
            ApiResponse<GetRecipeResponse> localVarResp = getConfigurationRecipeWithHttpInfo(scope, code, asAt);
            return localVarResp.getData();
        }

        /**
         * Execute getConfigurationRecipe request. Use any specified configuration options to override any other configuration for this request only.
         * @return GetRecipeResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The successfully retrieved Configuration Recipe or any failure </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public GetRecipeResponse execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<GetRecipeResponse> localVarResp = getConfigurationRecipeWithHttpInfo(scope, code, asAt, opts);
            return localVarResp.getData();
        }

        /**
         * Execute getConfigurationRecipe request with HTTP info returned
         * @return ApiResponse&lt;GetRecipeResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The successfully retrieved Configuration Recipe or any failure </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GetRecipeResponse> executeWithHttpInfo() throws ApiException {
            return getConfigurationRecipeWithHttpInfo(scope, code, asAt);
        }

        /**
         * Execute getConfigurationRecipe request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;GetRecipeResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The successfully retrieved Configuration Recipe or any failure </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GetRecipeResponse> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return getConfigurationRecipeWithHttpInfo(scope, code, asAt, opts);
        }

        /**
         * Execute getConfigurationRecipe request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The successfully retrieved Configuration Recipe or any failure </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GetRecipeResponse> _callback) throws ApiException {
            return getConfigurationRecipeAsync(scope, code, asAt, _callback);
        }

        /**
         * Execute getConfigurationRecipe request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The successfully retrieved Configuration Recipe or any failure </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GetRecipeResponse> _callback, ConfigurationOptions opts) throws ApiException {
            return getConfigurationRecipeAsync(scope, code, asAt, _callback, opts);
        }
    }

    /**
     * GetConfigurationRecipe: Get Configuration Recipe
     * Get a Configuration Recipe from a single scope.     The response will return either the recipe that has been stored, or a failure explaining why the request was unsuccessful.     It is important to always check for any unsuccessful requests (failures).
     * @param scope The scope of the Configuration Recipe to retrieve. (required)
     * @param code The name of the recipe to retrieve the data for. (required)
     * @return APIgetConfigurationRecipeRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The successfully retrieved Configuration Recipe or any failure </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIgetConfigurationRecipeRequest getConfigurationRecipe(String scope, String code) {
        return new APIgetConfigurationRecipeRequest(scope, code);
    }
    private okhttp3.Call getDerivedRecipeCall(String scope, String code, OffsetDateTime asAt, final ApiCallback _callback) throws ApiException {
        return getDerivedRecipeCall(scope, code, asAt,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call getDerivedRecipeCall(String scope, String code, OffsetDateTime asAt, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/recipes/derived/{scope}/{code}"
            .replace("{" + "scope" + "}", localVarApiClient.escapeString(scope.toString()))
            .replace("{" + "code" + "}", localVarApiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (asAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asAt", asAt));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDerivedRecipeValidateBeforeCall(String scope, String code, OffsetDateTime asAt, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling getDerivedRecipe(Async)");
        }

        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling getDerivedRecipe(Async)");
        }

        return getDerivedRecipeCall(scope, code, asAt, _callback, opts);

    }


    private ApiResponse<GetRecipeResponse> getDerivedRecipeWithHttpInfo(String scope, String code, OffsetDateTime asAt) throws ApiException {
        okhttp3.Call localVarCall = getDerivedRecipeValidateBeforeCall(scope, code, asAt, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<GetRecipeResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<GetRecipeResponse> getDerivedRecipeWithHttpInfo(String scope, String code, OffsetDateTime asAt, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = getDerivedRecipeValidateBeforeCall(scope, code, asAt, null, opts);
        Type localVarReturnType = new TypeToken<GetRecipeResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getDerivedRecipeAsync(String scope, String code, OffsetDateTime asAt, final ApiCallback<GetRecipeResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDerivedRecipeValidateBeforeCall(scope, code, asAt, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<GetRecipeResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call getDerivedRecipeAsync(String scope, String code, OffsetDateTime asAt, final ApiCallback<GetRecipeResponse> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = getDerivedRecipeValidateBeforeCall(scope, code, asAt, _callback, opts);
        Type localVarReturnType = new TypeToken<GetRecipeResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetDerivedRecipeRequest {
        private final String scope;
        private final String code;
        private OffsetDateTime asAt;

        private APIgetDerivedRecipeRequest(String scope, String code) {
            this.scope = scope;
            this.code = code;
        }

        /**
         * Set asAt
         * @param asAt The asAt datetime at which to retrieve the Configuration Recipe. Defaults to return the latest version if not specified. (optional)
         * @return APIgetDerivedRecipeRequest
         */
        public APIgetDerivedRecipeRequest asAt(OffsetDateTime asAt) {
            this.asAt = asAt;
            return this;
        }

        /**
         * Build call for getDerivedRecipe
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The successfully retrieved Configuration Recipe or any failure </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getDerivedRecipeCall(scope, code, asAt, _callback);
        }

        /**
         * Execute getDerivedRecipe request
         * @return GetRecipeResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The successfully retrieved Configuration Recipe or any failure </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public GetRecipeResponse execute() throws ApiException {
            ApiResponse<GetRecipeResponse> localVarResp = getDerivedRecipeWithHttpInfo(scope, code, asAt);
            return localVarResp.getData();
        }

        /**
         * Execute getDerivedRecipe request. Use any specified configuration options to override any other configuration for this request only.
         * @return GetRecipeResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The successfully retrieved Configuration Recipe or any failure </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public GetRecipeResponse execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<GetRecipeResponse> localVarResp = getDerivedRecipeWithHttpInfo(scope, code, asAt, opts);
            return localVarResp.getData();
        }

        /**
         * Execute getDerivedRecipe request with HTTP info returned
         * @return ApiResponse&lt;GetRecipeResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The successfully retrieved Configuration Recipe or any failure </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GetRecipeResponse> executeWithHttpInfo() throws ApiException {
            return getDerivedRecipeWithHttpInfo(scope, code, asAt);
        }

        /**
         * Execute getDerivedRecipe request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;GetRecipeResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The successfully retrieved Configuration Recipe or any failure </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GetRecipeResponse> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return getDerivedRecipeWithHttpInfo(scope, code, asAt, opts);
        }

        /**
         * Execute getDerivedRecipe request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The successfully retrieved Configuration Recipe or any failure </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GetRecipeResponse> _callback) throws ApiException {
            return getDerivedRecipeAsync(scope, code, asAt, _callback);
        }

        /**
         * Execute getDerivedRecipe request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The successfully retrieved Configuration Recipe or any failure </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GetRecipeResponse> _callback, ConfigurationOptions opts) throws ApiException {
            return getDerivedRecipeAsync(scope, code, asAt, _callback, opts);
        }
    }

    /**
     * GetDerivedRecipe: Get Configuration Recipe either from the store or expanded from a Recipe Composer.
     * If scope-code is referring to a Configuration Recipe it is returned, if it refers to Recipe Composer, it is expanded into a Configuration Recipe and returned.
     * @param scope The scope of the Configuration Recipe or Recipe Composer to return. (required)
     * @param code The code of the Configuration Recipe or Recipe Composer to return. (required)
     * @return APIgetDerivedRecipeRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The successfully retrieved Configuration Recipe or any failure </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIgetDerivedRecipeRequest getDerivedRecipe(String scope, String code) {
        return new APIgetDerivedRecipeRequest(scope, code);
    }
    private okhttp3.Call getRecipeComposerCall(String scope, String code, OffsetDateTime asAt, final ApiCallback _callback) throws ApiException {
        return getRecipeComposerCall(scope, code, asAt,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call getRecipeComposerCall(String scope, String code, OffsetDateTime asAt, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/recipes/composer/{scope}/{code}"
            .replace("{" + "scope" + "}", localVarApiClient.escapeString(scope.toString()))
            .replace("{" + "code" + "}", localVarApiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (asAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asAt", asAt));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRecipeComposerValidateBeforeCall(String scope, String code, OffsetDateTime asAt, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling getRecipeComposer(Async)");
        }

        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling getRecipeComposer(Async)");
        }

        return getRecipeComposerCall(scope, code, asAt, _callback, opts);

    }


    private ApiResponse<GetRecipeComposerResponse> getRecipeComposerWithHttpInfo(String scope, String code, OffsetDateTime asAt) throws ApiException {
        okhttp3.Call localVarCall = getRecipeComposerValidateBeforeCall(scope, code, asAt, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<GetRecipeComposerResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<GetRecipeComposerResponse> getRecipeComposerWithHttpInfo(String scope, String code, OffsetDateTime asAt, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = getRecipeComposerValidateBeforeCall(scope, code, asAt, null, opts);
        Type localVarReturnType = new TypeToken<GetRecipeComposerResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getRecipeComposerAsync(String scope, String code, OffsetDateTime asAt, final ApiCallback<GetRecipeComposerResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRecipeComposerValidateBeforeCall(scope, code, asAt, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<GetRecipeComposerResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call getRecipeComposerAsync(String scope, String code, OffsetDateTime asAt, final ApiCallback<GetRecipeComposerResponse> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = getRecipeComposerValidateBeforeCall(scope, code, asAt, _callback, opts);
        Type localVarReturnType = new TypeToken<GetRecipeComposerResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetRecipeComposerRequest {
        private final String scope;
        private final String code;
        private OffsetDateTime asAt;

        private APIgetRecipeComposerRequest(String scope, String code) {
            this.scope = scope;
            this.code = code;
        }

        /**
         * Set asAt
         * @param asAt The asAt datetime at which to retrieve the Recipe Composer. Defaults to return the latest version if not specified. (optional)
         * @return APIgetRecipeComposerRequest
         */
        public APIgetRecipeComposerRequest asAt(OffsetDateTime asAt) {
            this.asAt = asAt;
            return this;
        }

        /**
         * Build call for getRecipeComposer
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The successfully retrieved Recipe Composer or any failure </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getRecipeComposerCall(scope, code, asAt, _callback);
        }

        /**
         * Execute getRecipeComposer request
         * @return GetRecipeComposerResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The successfully retrieved Recipe Composer or any failure </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public GetRecipeComposerResponse execute() throws ApiException {
            ApiResponse<GetRecipeComposerResponse> localVarResp = getRecipeComposerWithHttpInfo(scope, code, asAt);
            return localVarResp.getData();
        }

        /**
         * Execute getRecipeComposer request. Use any specified configuration options to override any other configuration for this request only.
         * @return GetRecipeComposerResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The successfully retrieved Recipe Composer or any failure </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public GetRecipeComposerResponse execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<GetRecipeComposerResponse> localVarResp = getRecipeComposerWithHttpInfo(scope, code, asAt, opts);
            return localVarResp.getData();
        }

        /**
         * Execute getRecipeComposer request with HTTP info returned
         * @return ApiResponse&lt;GetRecipeComposerResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The successfully retrieved Recipe Composer or any failure </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GetRecipeComposerResponse> executeWithHttpInfo() throws ApiException {
            return getRecipeComposerWithHttpInfo(scope, code, asAt);
        }

        /**
         * Execute getRecipeComposer request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;GetRecipeComposerResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The successfully retrieved Recipe Composer or any failure </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GetRecipeComposerResponse> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return getRecipeComposerWithHttpInfo(scope, code, asAt, opts);
        }

        /**
         * Execute getRecipeComposer request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The successfully retrieved Recipe Composer or any failure </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GetRecipeComposerResponse> _callback) throws ApiException {
            return getRecipeComposerAsync(scope, code, asAt, _callback);
        }

        /**
         * Execute getRecipeComposer request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The successfully retrieved Recipe Composer or any failure </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GetRecipeComposerResponse> _callback, ConfigurationOptions opts) throws ApiException {
            return getRecipeComposerAsync(scope, code, asAt, _callback, opts);
        }
    }

    /**
     * GetRecipeComposer: Get Recipe Composer
     * Get a Recipe Composer from a single scope.     The response will return either the recipe composer that has been stored, or a failure explaining why the request was unsuccessful.     It is important to always check for any unsuccessful requests (failures).
     * @param scope The scope of the Recipe Composer to retrieve. (required)
     * @param code The name of the Recipe Composer to retrieve the data for. (required)
     * @return APIgetRecipeComposerRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The successfully retrieved Recipe Composer or any failure </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIgetRecipeComposerRequest getRecipeComposer(String scope, String code) {
        return new APIgetRecipeComposerRequest(scope, code);
    }
    private okhttp3.Call getRecipeComposerResolvedInlineCall(UpsertRecipeComposerRequest upsertRecipeComposerRequest, final ApiCallback _callback) throws ApiException {
        return getRecipeComposerResolvedInlineCall(upsertRecipeComposerRequest,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call getRecipeComposerResolvedInlineCall(UpsertRecipeComposerRequest upsertRecipeComposerRequest, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = upsertRecipeComposerRequest;

        // create path and map variables
        String localVarPath = "/api/recipes/composer/resolvedinline$";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRecipeComposerResolvedInlineValidateBeforeCall(UpsertRecipeComposerRequest upsertRecipeComposerRequest, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'upsertRecipeComposerRequest' is set
        if (upsertRecipeComposerRequest == null) {
            throw new ApiException("Missing the required parameter 'upsertRecipeComposerRequest' when calling getRecipeComposerResolvedInline(Async)");
        }

        return getRecipeComposerResolvedInlineCall(upsertRecipeComposerRequest, _callback, opts);

    }


    private ApiResponse<GetRecipeResponse> getRecipeComposerResolvedInlineWithHttpInfo(UpsertRecipeComposerRequest upsertRecipeComposerRequest) throws ApiException {
        okhttp3.Call localVarCall = getRecipeComposerResolvedInlineValidateBeforeCall(upsertRecipeComposerRequest, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<GetRecipeResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<GetRecipeResponse> getRecipeComposerResolvedInlineWithHttpInfo(UpsertRecipeComposerRequest upsertRecipeComposerRequest, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = getRecipeComposerResolvedInlineValidateBeforeCall(upsertRecipeComposerRequest, null, opts);
        Type localVarReturnType = new TypeToken<GetRecipeResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getRecipeComposerResolvedInlineAsync(UpsertRecipeComposerRequest upsertRecipeComposerRequest, final ApiCallback<GetRecipeResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRecipeComposerResolvedInlineValidateBeforeCall(upsertRecipeComposerRequest, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<GetRecipeResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call getRecipeComposerResolvedInlineAsync(UpsertRecipeComposerRequest upsertRecipeComposerRequest, final ApiCallback<GetRecipeResponse> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = getRecipeComposerResolvedInlineValidateBeforeCall(upsertRecipeComposerRequest, _callback, opts);
        Type localVarReturnType = new TypeToken<GetRecipeResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetRecipeComposerResolvedInlineRequest {
        private final UpsertRecipeComposerRequest upsertRecipeComposerRequest;

        private APIgetRecipeComposerResolvedInlineRequest(UpsertRecipeComposerRequest upsertRecipeComposerRequest) {
            this.upsertRecipeComposerRequest = upsertRecipeComposerRequest;
        }

        /**
         * Build call for getRecipeComposerResolvedInline
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The successfully resolved Configuration Recipe. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getRecipeComposerResolvedInlineCall(upsertRecipeComposerRequest, _callback);
        }

        /**
         * Execute getRecipeComposerResolvedInline request
         * @return GetRecipeResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The successfully resolved Configuration Recipe. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public GetRecipeResponse execute() throws ApiException {
            ApiResponse<GetRecipeResponse> localVarResp = getRecipeComposerResolvedInlineWithHttpInfo(upsertRecipeComposerRequest);
            return localVarResp.getData();
        }

        /**
         * Execute getRecipeComposerResolvedInline request. Use any specified configuration options to override any other configuration for this request only.
         * @return GetRecipeResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The successfully resolved Configuration Recipe. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public GetRecipeResponse execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<GetRecipeResponse> localVarResp = getRecipeComposerResolvedInlineWithHttpInfo(upsertRecipeComposerRequest, opts);
            return localVarResp.getData();
        }

        /**
         * Execute getRecipeComposerResolvedInline request with HTTP info returned
         * @return ApiResponse&lt;GetRecipeResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The successfully resolved Configuration Recipe. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GetRecipeResponse> executeWithHttpInfo() throws ApiException {
            return getRecipeComposerResolvedInlineWithHttpInfo(upsertRecipeComposerRequest);
        }

        /**
         * Execute getRecipeComposerResolvedInline request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;GetRecipeResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The successfully resolved Configuration Recipe. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GetRecipeResponse> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return getRecipeComposerResolvedInlineWithHttpInfo(upsertRecipeComposerRequest, opts);
        }

        /**
         * Execute getRecipeComposerResolvedInline request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The successfully resolved Configuration Recipe. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GetRecipeResponse> _callback) throws ApiException {
            return getRecipeComposerResolvedInlineAsync(upsertRecipeComposerRequest, _callback);
        }

        /**
         * Execute getRecipeComposerResolvedInline request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The successfully resolved Configuration Recipe. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GetRecipeResponse> _callback, ConfigurationOptions opts) throws ApiException {
            return getRecipeComposerResolvedInlineAsync(upsertRecipeComposerRequest, _callback, opts);
        }
    }

    /**
     * GetRecipeComposerResolvedInline: Given a Recipe Composer, this endpoint expands into a Configuration Recipe without persistence. Primarily used for testing purposes.
     * Resolves an inline recipe composer into a ConfigurationRecipe.
     * @param upsertRecipeComposerRequest Recipe composer used to expand into the Configuration Recipe. (required)
     * @return APIgetRecipeComposerResolvedInlineRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The successfully resolved Configuration Recipe. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIgetRecipeComposerResolvedInlineRequest getRecipeComposerResolvedInline(UpsertRecipeComposerRequest upsertRecipeComposerRequest) {
        return new APIgetRecipeComposerResolvedInlineRequest(upsertRecipeComposerRequest);
    }
    private okhttp3.Call listConfigurationRecipesCall(OffsetDateTime asAt, String filter, final ApiCallback _callback) throws ApiException {
        return listConfigurationRecipesCall(asAt, filter,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call listConfigurationRecipesCall(OffsetDateTime asAt, String filter, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/recipes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (asAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asAt", asAt));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listConfigurationRecipesValidateBeforeCall(OffsetDateTime asAt, String filter, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        return listConfigurationRecipesCall(asAt, filter, _callback, opts);

    }


    private ApiResponse<ResourceListOfGetRecipeResponse> listConfigurationRecipesWithHttpInfo(OffsetDateTime asAt, String filter) throws ApiException {
        okhttp3.Call localVarCall = listConfigurationRecipesValidateBeforeCall(asAt, filter, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<ResourceListOfGetRecipeResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<ResourceListOfGetRecipeResponse> listConfigurationRecipesWithHttpInfo(OffsetDateTime asAt, String filter, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = listConfigurationRecipesValidateBeforeCall(asAt, filter, null, opts);
        Type localVarReturnType = new TypeToken<ResourceListOfGetRecipeResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listConfigurationRecipesAsync(OffsetDateTime asAt, String filter, final ApiCallback<ResourceListOfGetRecipeResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listConfigurationRecipesValidateBeforeCall(asAt, filter, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<ResourceListOfGetRecipeResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call listConfigurationRecipesAsync(OffsetDateTime asAt, String filter, final ApiCallback<ResourceListOfGetRecipeResponse> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = listConfigurationRecipesValidateBeforeCall(asAt, filter, _callback, opts);
        Type localVarReturnType = new TypeToken<ResourceListOfGetRecipeResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIlistConfigurationRecipesRequest {
        private OffsetDateTime asAt;
        private String filter;

        private APIlistConfigurationRecipesRequest() {
        }

        /**
         * Set asAt
         * @param asAt The asAt datetime at which to list the Configuration Recipes. Defaults to latest if not specified. (optional)
         * @return APIlistConfigurationRecipesRequest
         */
        public APIlistConfigurationRecipesRequest asAt(OffsetDateTime asAt) {
            this.asAt = asAt;
            return this;
        }

        /**
         * Set filter
         * @param filter Expression to filter the result set. Read more about filtering results from LUSID here:   https://support.lusid.com/filtering-results-from-lusid. (optional)
         * @return APIlistConfigurationRecipesRequest
         */
        public APIlistConfigurationRecipesRequest filter(String filter) {
            this.filter = filter;
            return this;
        }

        /**
         * Build call for listConfigurationRecipes
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested configuration recipes </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listConfigurationRecipesCall(asAt, filter, _callback);
        }

        /**
         * Execute listConfigurationRecipes request
         * @return ResourceListOfGetRecipeResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested configuration recipes </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ResourceListOfGetRecipeResponse execute() throws ApiException {
            ApiResponse<ResourceListOfGetRecipeResponse> localVarResp = listConfigurationRecipesWithHttpInfo(asAt, filter);
            return localVarResp.getData();
        }

        /**
         * Execute listConfigurationRecipes request. Use any specified configuration options to override any other configuration for this request only.
         * @return ResourceListOfGetRecipeResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested configuration recipes </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ResourceListOfGetRecipeResponse execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<ResourceListOfGetRecipeResponse> localVarResp = listConfigurationRecipesWithHttpInfo(asAt, filter, opts);
            return localVarResp.getData();
        }

        /**
         * Execute listConfigurationRecipes request with HTTP info returned
         * @return ApiResponse&lt;ResourceListOfGetRecipeResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested configuration recipes </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ResourceListOfGetRecipeResponse> executeWithHttpInfo() throws ApiException {
            return listConfigurationRecipesWithHttpInfo(asAt, filter);
        }

        /**
         * Execute listConfigurationRecipes request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;ResourceListOfGetRecipeResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested configuration recipes </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ResourceListOfGetRecipeResponse> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return listConfigurationRecipesWithHttpInfo(asAt, filter, opts);
        }

        /**
         * Execute listConfigurationRecipes request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested configuration recipes </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ResourceListOfGetRecipeResponse> _callback) throws ApiException {
            return listConfigurationRecipesAsync(asAt, filter, _callback);
        }

        /**
         * Execute listConfigurationRecipes request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested configuration recipes </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ResourceListOfGetRecipeResponse> _callback, ConfigurationOptions opts) throws ApiException {
            return listConfigurationRecipesAsync(asAt, filter, _callback, opts);
        }
    }

    /**
     * ListConfigurationRecipes: List the set of Configuration Recipes
     * List the set of configuration recipes at the specified date/time and scope. Note this only returns recipes stored directly and does not include any recipes expanded from recipe composers.
     * @return APIlistConfigurationRecipesRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested configuration recipes </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIlistConfigurationRecipesRequest listConfigurationRecipes() {
        return new APIlistConfigurationRecipesRequest();
    }
    private okhttp3.Call listDerivedRecipesCall(OffsetDateTime asAt, String filter, final ApiCallback _callback) throws ApiException {
        return listDerivedRecipesCall(asAt, filter,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call listDerivedRecipesCall(OffsetDateTime asAt, String filter, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/recipes/derived";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (asAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asAt", asAt));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listDerivedRecipesValidateBeforeCall(OffsetDateTime asAt, String filter, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        return listDerivedRecipesCall(asAt, filter, _callback, opts);

    }


    private ApiResponse<ResourceListOfGetRecipeResponse> listDerivedRecipesWithHttpInfo(OffsetDateTime asAt, String filter) throws ApiException {
        okhttp3.Call localVarCall = listDerivedRecipesValidateBeforeCall(asAt, filter, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<ResourceListOfGetRecipeResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<ResourceListOfGetRecipeResponse> listDerivedRecipesWithHttpInfo(OffsetDateTime asAt, String filter, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = listDerivedRecipesValidateBeforeCall(asAt, filter, null, opts);
        Type localVarReturnType = new TypeToken<ResourceListOfGetRecipeResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listDerivedRecipesAsync(OffsetDateTime asAt, String filter, final ApiCallback<ResourceListOfGetRecipeResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listDerivedRecipesValidateBeforeCall(asAt, filter, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<ResourceListOfGetRecipeResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call listDerivedRecipesAsync(OffsetDateTime asAt, String filter, final ApiCallback<ResourceListOfGetRecipeResponse> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = listDerivedRecipesValidateBeforeCall(asAt, filter, _callback, opts);
        Type localVarReturnType = new TypeToken<ResourceListOfGetRecipeResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIlistDerivedRecipesRequest {
        private OffsetDateTime asAt;
        private String filter;

        private APIlistDerivedRecipesRequest() {
        }

        /**
         * Set asAt
         * @param asAt The asAt datetime at which to list the Configuration Recipes. Defaults to latest if not specified. (optional)
         * @return APIlistDerivedRecipesRequest
         */
        public APIlistDerivedRecipesRequest asAt(OffsetDateTime asAt) {
            this.asAt = asAt;
            return this;
        }

        /**
         * Set filter
         * @param filter Expression to filter the result set, note this functionality is not yet enabled for this endpoint. (optional)
         * @return APIlistDerivedRecipesRequest
         */
        public APIlistDerivedRecipesRequest filter(String filter) {
            this.filter = filter;
            return this;
        }

        /**
         * Build call for listDerivedRecipes
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested configuration recipes </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listDerivedRecipesCall(asAt, filter, _callback);
        }

        /**
         * Execute listDerivedRecipes request
         * @return ResourceListOfGetRecipeResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested configuration recipes </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ResourceListOfGetRecipeResponse execute() throws ApiException {
            ApiResponse<ResourceListOfGetRecipeResponse> localVarResp = listDerivedRecipesWithHttpInfo(asAt, filter);
            return localVarResp.getData();
        }

        /**
         * Execute listDerivedRecipes request. Use any specified configuration options to override any other configuration for this request only.
         * @return ResourceListOfGetRecipeResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested configuration recipes </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ResourceListOfGetRecipeResponse execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<ResourceListOfGetRecipeResponse> localVarResp = listDerivedRecipesWithHttpInfo(asAt, filter, opts);
            return localVarResp.getData();
        }

        /**
         * Execute listDerivedRecipes request with HTTP info returned
         * @return ApiResponse&lt;ResourceListOfGetRecipeResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested configuration recipes </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ResourceListOfGetRecipeResponse> executeWithHttpInfo() throws ApiException {
            return listDerivedRecipesWithHttpInfo(asAt, filter);
        }

        /**
         * Execute listDerivedRecipes request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;ResourceListOfGetRecipeResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested configuration recipes </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ResourceListOfGetRecipeResponse> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return listDerivedRecipesWithHttpInfo(asAt, filter, opts);
        }

        /**
         * Execute listDerivedRecipes request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested configuration recipes </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ResourceListOfGetRecipeResponse> _callback) throws ApiException {
            return listDerivedRecipesAsync(asAt, filter, _callback);
        }

        /**
         * Execute listDerivedRecipes request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested configuration recipes </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ResourceListOfGetRecipeResponse> _callback, ConfigurationOptions opts) throws ApiException {
            return listDerivedRecipesAsync(asAt, filter, _callback, opts);
        }
    }

    /**
     * ListDerivedRecipes: List the complete set of all Configuration Recipes, both from the configuration recipe store and also from expanded recipe composers.
     * This endpoints returns a union of the output of ListConfigurationRecipes and the resolved Recipe Composers from the ListRecipeComposers endpoints.
     * @return APIlistDerivedRecipesRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested configuration recipes </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIlistDerivedRecipesRequest listDerivedRecipes() {
        return new APIlistDerivedRecipesRequest();
    }
    private okhttp3.Call listRecipeComposersCall(OffsetDateTime asAt, String filter, final ApiCallback _callback) throws ApiException {
        return listRecipeComposersCall(asAt, filter,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call listRecipeComposersCall(OffsetDateTime asAt, String filter, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/recipes/composer";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (asAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asAt", asAt));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listRecipeComposersValidateBeforeCall(OffsetDateTime asAt, String filter, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        return listRecipeComposersCall(asAt, filter, _callback, opts);

    }


    private ApiResponse<ResourceListOfGetRecipeComposerResponse> listRecipeComposersWithHttpInfo(OffsetDateTime asAt, String filter) throws ApiException {
        okhttp3.Call localVarCall = listRecipeComposersValidateBeforeCall(asAt, filter, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<ResourceListOfGetRecipeComposerResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<ResourceListOfGetRecipeComposerResponse> listRecipeComposersWithHttpInfo(OffsetDateTime asAt, String filter, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = listRecipeComposersValidateBeforeCall(asAt, filter, null, opts);
        Type localVarReturnType = new TypeToken<ResourceListOfGetRecipeComposerResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listRecipeComposersAsync(OffsetDateTime asAt, String filter, final ApiCallback<ResourceListOfGetRecipeComposerResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listRecipeComposersValidateBeforeCall(asAt, filter, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<ResourceListOfGetRecipeComposerResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call listRecipeComposersAsync(OffsetDateTime asAt, String filter, final ApiCallback<ResourceListOfGetRecipeComposerResponse> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = listRecipeComposersValidateBeforeCall(asAt, filter, _callback, opts);
        Type localVarReturnType = new TypeToken<ResourceListOfGetRecipeComposerResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIlistRecipeComposersRequest {
        private OffsetDateTime asAt;
        private String filter;

        private APIlistRecipeComposersRequest() {
        }

        /**
         * Set asAt
         * @param asAt The asAt datetime at which to list the Recipes Composers. Defaults to latest if not specified. (optional)
         * @return APIlistRecipeComposersRequest
         */
        public APIlistRecipeComposersRequest asAt(OffsetDateTime asAt) {
            this.asAt = asAt;
            return this;
        }

        /**
         * Set filter
         * @param filter Expression to filter the result set, note this functionality is not yet enabled for this endpoint. (optional)
         * @return APIlistRecipeComposersRequest
         */
        public APIlistRecipeComposersRequest filter(String filter) {
            this.filter = filter;
            return this;
        }

        /**
         * Build call for listRecipeComposers
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested recipe composers </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listRecipeComposersCall(asAt, filter, _callback);
        }

        /**
         * Execute listRecipeComposers request
         * @return ResourceListOfGetRecipeComposerResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested recipe composers </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ResourceListOfGetRecipeComposerResponse execute() throws ApiException {
            ApiResponse<ResourceListOfGetRecipeComposerResponse> localVarResp = listRecipeComposersWithHttpInfo(asAt, filter);
            return localVarResp.getData();
        }

        /**
         * Execute listRecipeComposers request. Use any specified configuration options to override any other configuration for this request only.
         * @return ResourceListOfGetRecipeComposerResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested recipe composers </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ResourceListOfGetRecipeComposerResponse execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<ResourceListOfGetRecipeComposerResponse> localVarResp = listRecipeComposersWithHttpInfo(asAt, filter, opts);
            return localVarResp.getData();
        }

        /**
         * Execute listRecipeComposers request with HTTP info returned
         * @return ApiResponse&lt;ResourceListOfGetRecipeComposerResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested recipe composers </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ResourceListOfGetRecipeComposerResponse> executeWithHttpInfo() throws ApiException {
            return listRecipeComposersWithHttpInfo(asAt, filter);
        }

        /**
         * Execute listRecipeComposers request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;ResourceListOfGetRecipeComposerResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested recipe composers </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ResourceListOfGetRecipeComposerResponse> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return listRecipeComposersWithHttpInfo(asAt, filter, opts);
        }

        /**
         * Execute listRecipeComposers request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested recipe composers </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ResourceListOfGetRecipeComposerResponse> _callback) throws ApiException {
            return listRecipeComposersAsync(asAt, filter, _callback);
        }

        /**
         * Execute listRecipeComposers request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested recipe composers </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ResourceListOfGetRecipeComposerResponse> _callback, ConfigurationOptions opts) throws ApiException {
            return listRecipeComposersAsync(asAt, filter, _callback, opts);
        }
    }

    /**
     * ListRecipeComposers: List the set of Recipe Composers
     * List the set of Recipe Composers at the specified date/time and scope
     * @return APIlistRecipeComposersRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested recipe composers </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIlistRecipeComposersRequest listRecipeComposers() {
        return new APIlistRecipeComposersRequest();
    }
    private okhttp3.Call upsertConfigurationRecipeCall(UpsertRecipeRequest upsertRecipeRequest, final ApiCallback _callback) throws ApiException {
        return upsertConfigurationRecipeCall(upsertRecipeRequest,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call upsertConfigurationRecipeCall(UpsertRecipeRequest upsertRecipeRequest, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = upsertRecipeRequest;

        // create path and map variables
        String localVarPath = "/api/recipes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call upsertConfigurationRecipeValidateBeforeCall(UpsertRecipeRequest upsertRecipeRequest, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'upsertRecipeRequest' is set
        if (upsertRecipeRequest == null) {
            throw new ApiException("Missing the required parameter 'upsertRecipeRequest' when calling upsertConfigurationRecipe(Async)");
        }

        return upsertConfigurationRecipeCall(upsertRecipeRequest, _callback, opts);

    }


    private ApiResponse<UpsertSingleStructuredDataResponse> upsertConfigurationRecipeWithHttpInfo(UpsertRecipeRequest upsertRecipeRequest) throws ApiException {
        okhttp3.Call localVarCall = upsertConfigurationRecipeValidateBeforeCall(upsertRecipeRequest, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<UpsertSingleStructuredDataResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<UpsertSingleStructuredDataResponse> upsertConfigurationRecipeWithHttpInfo(UpsertRecipeRequest upsertRecipeRequest, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = upsertConfigurationRecipeValidateBeforeCall(upsertRecipeRequest, null, opts);
        Type localVarReturnType = new TypeToken<UpsertSingleStructuredDataResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call upsertConfigurationRecipeAsync(UpsertRecipeRequest upsertRecipeRequest, final ApiCallback<UpsertSingleStructuredDataResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = upsertConfigurationRecipeValidateBeforeCall(upsertRecipeRequest, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<UpsertSingleStructuredDataResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call upsertConfigurationRecipeAsync(UpsertRecipeRequest upsertRecipeRequest, final ApiCallback<UpsertSingleStructuredDataResponse> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = upsertConfigurationRecipeValidateBeforeCall(upsertRecipeRequest, _callback, opts);
        Type localVarReturnType = new TypeToken<UpsertSingleStructuredDataResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIupsertConfigurationRecipeRequest {
        private final UpsertRecipeRequest upsertRecipeRequest;

        private APIupsertConfigurationRecipeRequest(UpsertRecipeRequest upsertRecipeRequest) {
            this.upsertRecipeRequest = upsertRecipeRequest;
        }

        /**
         * Build call for upsertConfigurationRecipe
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The successfully updated or inserted item or any failure </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return upsertConfigurationRecipeCall(upsertRecipeRequest, _callback);
        }

        /**
         * Execute upsertConfigurationRecipe request
         * @return UpsertSingleStructuredDataResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The successfully updated or inserted item or any failure </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public UpsertSingleStructuredDataResponse execute() throws ApiException {
            ApiResponse<UpsertSingleStructuredDataResponse> localVarResp = upsertConfigurationRecipeWithHttpInfo(upsertRecipeRequest);
            return localVarResp.getData();
        }

        /**
         * Execute upsertConfigurationRecipe request. Use any specified configuration options to override any other configuration for this request only.
         * @return UpsertSingleStructuredDataResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The successfully updated or inserted item or any failure </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public UpsertSingleStructuredDataResponse execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<UpsertSingleStructuredDataResponse> localVarResp = upsertConfigurationRecipeWithHttpInfo(upsertRecipeRequest, opts);
            return localVarResp.getData();
        }

        /**
         * Execute upsertConfigurationRecipe request with HTTP info returned
         * @return ApiResponse&lt;UpsertSingleStructuredDataResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The successfully updated or inserted item or any failure </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UpsertSingleStructuredDataResponse> executeWithHttpInfo() throws ApiException {
            return upsertConfigurationRecipeWithHttpInfo(upsertRecipeRequest);
        }

        /**
         * Execute upsertConfigurationRecipe request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;UpsertSingleStructuredDataResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The successfully updated or inserted item or any failure </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UpsertSingleStructuredDataResponse> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return upsertConfigurationRecipeWithHttpInfo(upsertRecipeRequest, opts);
        }

        /**
         * Execute upsertConfigurationRecipe request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The successfully updated or inserted item or any failure </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UpsertSingleStructuredDataResponse> _callback) throws ApiException {
            return upsertConfigurationRecipeAsync(upsertRecipeRequest, _callback);
        }

        /**
         * Execute upsertConfigurationRecipe request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The successfully updated or inserted item or any failure </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UpsertSingleStructuredDataResponse> _callback, ConfigurationOptions opts) throws ApiException {
            return upsertConfigurationRecipeAsync(upsertRecipeRequest, _callback, opts);
        }
    }

    /**
     * UpsertConfigurationRecipe: Upsert a Configuration Recipe. This creates or updates the data in Lusid.
     * Update or insert one Configuration Recipe in a single scope. An item will be updated if it already exists  and inserted if it does not.     The response will return the successfully updated or inserted Configuration Recipe or failure message if unsuccessful     It is important to always check to verify success (or failure).
     * @param upsertRecipeRequest The Configuration Recipe to update or insert (required)
     * @return APIupsertConfigurationRecipeRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The successfully updated or inserted item or any failure </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIupsertConfigurationRecipeRequest upsertConfigurationRecipe(UpsertRecipeRequest upsertRecipeRequest) {
        return new APIupsertConfigurationRecipeRequest(upsertRecipeRequest);
    }
    private okhttp3.Call upsertRecipeComposerCall(UpsertRecipeComposerRequest upsertRecipeComposerRequest, final ApiCallback _callback) throws ApiException {
        return upsertRecipeComposerCall(upsertRecipeComposerRequest,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call upsertRecipeComposerCall(UpsertRecipeComposerRequest upsertRecipeComposerRequest, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = upsertRecipeComposerRequest;

        // create path and map variables
        String localVarPath = "/api/recipes/composer";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call upsertRecipeComposerValidateBeforeCall(UpsertRecipeComposerRequest upsertRecipeComposerRequest, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'upsertRecipeComposerRequest' is set
        if (upsertRecipeComposerRequest == null) {
            throw new ApiException("Missing the required parameter 'upsertRecipeComposerRequest' when calling upsertRecipeComposer(Async)");
        }

        return upsertRecipeComposerCall(upsertRecipeComposerRequest, _callback, opts);

    }


    private ApiResponse<UpsertSingleStructuredDataResponse> upsertRecipeComposerWithHttpInfo(UpsertRecipeComposerRequest upsertRecipeComposerRequest) throws ApiException {
        okhttp3.Call localVarCall = upsertRecipeComposerValidateBeforeCall(upsertRecipeComposerRequest, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<UpsertSingleStructuredDataResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<UpsertSingleStructuredDataResponse> upsertRecipeComposerWithHttpInfo(UpsertRecipeComposerRequest upsertRecipeComposerRequest, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = upsertRecipeComposerValidateBeforeCall(upsertRecipeComposerRequest, null, opts);
        Type localVarReturnType = new TypeToken<UpsertSingleStructuredDataResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call upsertRecipeComposerAsync(UpsertRecipeComposerRequest upsertRecipeComposerRequest, final ApiCallback<UpsertSingleStructuredDataResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = upsertRecipeComposerValidateBeforeCall(upsertRecipeComposerRequest, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<UpsertSingleStructuredDataResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call upsertRecipeComposerAsync(UpsertRecipeComposerRequest upsertRecipeComposerRequest, final ApiCallback<UpsertSingleStructuredDataResponse> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = upsertRecipeComposerValidateBeforeCall(upsertRecipeComposerRequest, _callback, opts);
        Type localVarReturnType = new TypeToken<UpsertSingleStructuredDataResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIupsertRecipeComposerRequest {
        private final UpsertRecipeComposerRequest upsertRecipeComposerRequest;

        private APIupsertRecipeComposerRequest(UpsertRecipeComposerRequest upsertRecipeComposerRequest) {
            this.upsertRecipeComposerRequest = upsertRecipeComposerRequest;
        }

        /**
         * Build call for upsertRecipeComposer
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The successfully updated or inserted item or any failure </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return upsertRecipeComposerCall(upsertRecipeComposerRequest, _callback);
        }

        /**
         * Execute upsertRecipeComposer request
         * @return UpsertSingleStructuredDataResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The successfully updated or inserted item or any failure </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public UpsertSingleStructuredDataResponse execute() throws ApiException {
            ApiResponse<UpsertSingleStructuredDataResponse> localVarResp = upsertRecipeComposerWithHttpInfo(upsertRecipeComposerRequest);
            return localVarResp.getData();
        }

        /**
         * Execute upsertRecipeComposer request. Use any specified configuration options to override any other configuration for this request only.
         * @return UpsertSingleStructuredDataResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The successfully updated or inserted item or any failure </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public UpsertSingleStructuredDataResponse execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<UpsertSingleStructuredDataResponse> localVarResp = upsertRecipeComposerWithHttpInfo(upsertRecipeComposerRequest, opts);
            return localVarResp.getData();
        }

        /**
         * Execute upsertRecipeComposer request with HTTP info returned
         * @return ApiResponse&lt;UpsertSingleStructuredDataResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The successfully updated or inserted item or any failure </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UpsertSingleStructuredDataResponse> executeWithHttpInfo() throws ApiException {
            return upsertRecipeComposerWithHttpInfo(upsertRecipeComposerRequest);
        }

        /**
         * Execute upsertRecipeComposer request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;UpsertSingleStructuredDataResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The successfully updated or inserted item or any failure </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UpsertSingleStructuredDataResponse> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return upsertRecipeComposerWithHttpInfo(upsertRecipeComposerRequest, opts);
        }

        /**
         * Execute upsertRecipeComposer request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The successfully updated or inserted item or any failure </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UpsertSingleStructuredDataResponse> _callback) throws ApiException {
            return upsertRecipeComposerAsync(upsertRecipeComposerRequest, _callback);
        }

        /**
         * Execute upsertRecipeComposer request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The successfully updated or inserted item or any failure </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UpsertSingleStructuredDataResponse> _callback, ConfigurationOptions opts) throws ApiException {
            return upsertRecipeComposerAsync(upsertRecipeComposerRequest, _callback, opts);
        }
    }

    /**
     * UpsertRecipeComposer: Upsert a Recipe Composer. This creates or updates the data in Lusid.
     * Update or insert one Recipe Composer in a single scope. An item will be updated if it already exists  and inserted if it does not.     The response will return the successfully updated or inserted Recipe Composer or failure message if unsuccessful     It is important to always check to verify success (or failure).
     * @param upsertRecipeComposerRequest The Recipe Composer to update or insert (required)
     * @return APIupsertRecipeComposerRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The successfully updated or inserted item or any failure </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIupsertRecipeComposerRequest upsertRecipeComposer(UpsertRecipeComposerRequest upsertRecipeComposerRequest) {
        return new APIupsertRecipeComposerRequest(upsertRecipeComposerRequest);
    }
}
