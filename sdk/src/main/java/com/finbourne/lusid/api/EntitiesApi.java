/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.api;

import com.finbourne.lusid.ApiCallback;
import com.finbourne.lusid.ApiClient;
import com.finbourne.lusid.ApiException;
import com.finbourne.lusid.ApiResponse;
import com.finbourne.lusid.Configuration;
import com.finbourne.lusid.Pair;
import com.finbourne.lusid.ProgressRequestBody;
import com.finbourne.lusid.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.finbourne.lusid.model.InstrumentEntity;
import com.finbourne.lusid.model.LusidProblemDetails;
import com.finbourne.lusid.model.LusidValidationProblemDetails;
import java.time.OffsetDateTime;
import com.finbourne.lusid.model.PortfolioEntity;
import com.finbourne.lusid.model.PropertyDefinitionEntity;
import com.finbourne.lusid.model.ResourceListOfChange;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class EntitiesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public EntitiesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public EntitiesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getInstrumentByEntityUniqueIdCall(String entityUniqueId, String effectiveAt, OffsetDateTime asAt, List<String> previews, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/entities/instruments/{entityUniqueId}"
            .replace("{" + "entityUniqueId" + "}", localVarApiClient.escapeString(entityUniqueId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (effectiveAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("effectiveAt", effectiveAt));
        }

        if (asAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asAt", asAt));
        }

        if (previews != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "previews", previews));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getInstrumentByEntityUniqueIdValidateBeforeCall(String entityUniqueId, String effectiveAt, OffsetDateTime asAt, List<String> previews, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'entityUniqueId' is set
        if (entityUniqueId == null) {
            throw new ApiException("Missing the required parameter 'entityUniqueId' when calling getInstrumentByEntityUniqueId(Async)");
        }

        return getInstrumentByEntityUniqueIdCall(entityUniqueId, effectiveAt, asAt, previews, _callback);

    }


    private ApiResponse<InstrumentEntity> getInstrumentByEntityUniqueIdWithHttpInfo(String entityUniqueId, String effectiveAt, OffsetDateTime asAt, List<String> previews) throws ApiException {
        okhttp3.Call localVarCall = getInstrumentByEntityUniqueIdValidateBeforeCall(entityUniqueId, effectiveAt, asAt, previews, null);
        Type localVarReturnType = new TypeToken<InstrumentEntity>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getInstrumentByEntityUniqueIdAsync(String entityUniqueId, String effectiveAt, OffsetDateTime asAt, List<String> previews, final ApiCallback<InstrumentEntity> _callback) throws ApiException {

        okhttp3.Call localVarCall = getInstrumentByEntityUniqueIdValidateBeforeCall(entityUniqueId, effectiveAt, asAt, previews, _callback);
        Type localVarReturnType = new TypeToken<InstrumentEntity>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetInstrumentByEntityUniqueIdRequest {
        private final String entityUniqueId;
        private String effectiveAt;
        private OffsetDateTime asAt;
        private List<String> previews;

        private APIgetInstrumentByEntityUniqueIdRequest(String entityUniqueId) {
            this.entityUniqueId = entityUniqueId;
        }

        /**
         * Set effectiveAt
         * @param effectiveAt The effective datetime or cut label at which to retrieve the Instrument definition. Defaults to the current LUSID system datetime if not specified. (optional)
         * @return APIgetInstrumentByEntityUniqueIdRequest
         */
        public APIgetInstrumentByEntityUniqueIdRequest effectiveAt(String effectiveAt) {
            this.effectiveAt = effectiveAt;
            return this;
        }

        /**
         * Set asAt
         * @param asAt The asAt datetime at which to retrieve the instrument definition. Defaults to returning the latest version of the instrument definition if not specified. (optional)
         * @return APIgetInstrumentByEntityUniqueIdRequest
         */
        public APIgetInstrumentByEntityUniqueIdRequest asAt(OffsetDateTime asAt) {
            this.asAt = asAt;
            return this;
        }

        /**
         * Set previews
         * @param previews The ids of the staged modifications to be previewed in the response. (optional)
         * @return APIgetInstrumentByEntityUniqueIdRequest
         */
        public APIgetInstrumentByEntityUniqueIdRequest previews(List<String> previews) {
            this.previews = previews;
            return this;
        }

        /**
         * Build call for getInstrumentByEntityUniqueId
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested instrument entity </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getInstrumentByEntityUniqueIdCall(entityUniqueId, effectiveAt, asAt, previews, _callback);
        }

        /**
         * Execute getInstrumentByEntityUniqueId request
         * @return InstrumentEntity
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested instrument entity </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public InstrumentEntity execute() throws ApiException {
            ApiResponse<InstrumentEntity> localVarResp = getInstrumentByEntityUniqueIdWithHttpInfo(entityUniqueId, effectiveAt, asAt, previews);
            return localVarResp.getData();
        }

        /**
         * Execute getInstrumentByEntityUniqueId request with HTTP info returned
         * @return ApiResponse&lt;InstrumentEntity&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested instrument entity </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<InstrumentEntity> executeWithHttpInfo() throws ApiException {
            return getInstrumentByEntityUniqueIdWithHttpInfo(entityUniqueId, effectiveAt, asAt, previews);
        }

        /**
         * Execute getInstrumentByEntityUniqueId request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested instrument entity </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<InstrumentEntity> _callback) throws ApiException {
            return getInstrumentByEntityUniqueIdAsync(entityUniqueId, effectiveAt, asAt, previews, _callback);
        }
    }

    /**
     * [EXPERIMENTAL] GetInstrumentByEntityUniqueId: Get instrument by EntityUniqueId
     * Retrieve the definition of a particular instrument.  If the instrument is deleted, this will return the state of the instrument immediately prior to deletion.
     * @param entityUniqueId The universally unique identifier of the instrument definition. (required)
     * @return APIgetInstrumentByEntityUniqueIdRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested instrument entity </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIgetInstrumentByEntityUniqueIdRequest getInstrumentByEntityUniqueId(String entityUniqueId) {
        return new APIgetInstrumentByEntityUniqueIdRequest(entityUniqueId);
    }
    private okhttp3.Call getPortfolioByEntityUniqueIdCall(String entityUniqueId, String effectiveAt, OffsetDateTime asAt, List<String> previews, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/entities/portfolios/{entityUniqueId}"
            .replace("{" + "entityUniqueId" + "}", localVarApiClient.escapeString(entityUniqueId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (effectiveAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("effectiveAt", effectiveAt));
        }

        if (asAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asAt", asAt));
        }

        if (previews != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "previews", previews));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPortfolioByEntityUniqueIdValidateBeforeCall(String entityUniqueId, String effectiveAt, OffsetDateTime asAt, List<String> previews, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'entityUniqueId' is set
        if (entityUniqueId == null) {
            throw new ApiException("Missing the required parameter 'entityUniqueId' when calling getPortfolioByEntityUniqueId(Async)");
        }

        return getPortfolioByEntityUniqueIdCall(entityUniqueId, effectiveAt, asAt, previews, _callback);

    }


    private ApiResponse<PortfolioEntity> getPortfolioByEntityUniqueIdWithHttpInfo(String entityUniqueId, String effectiveAt, OffsetDateTime asAt, List<String> previews) throws ApiException {
        okhttp3.Call localVarCall = getPortfolioByEntityUniqueIdValidateBeforeCall(entityUniqueId, effectiveAt, asAt, previews, null);
        Type localVarReturnType = new TypeToken<PortfolioEntity>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getPortfolioByEntityUniqueIdAsync(String entityUniqueId, String effectiveAt, OffsetDateTime asAt, List<String> previews, final ApiCallback<PortfolioEntity> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPortfolioByEntityUniqueIdValidateBeforeCall(entityUniqueId, effectiveAt, asAt, previews, _callback);
        Type localVarReturnType = new TypeToken<PortfolioEntity>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetPortfolioByEntityUniqueIdRequest {
        private final String entityUniqueId;
        private String effectiveAt;
        private OffsetDateTime asAt;
        private List<String> previews;

        private APIgetPortfolioByEntityUniqueIdRequest(String entityUniqueId) {
            this.entityUniqueId = entityUniqueId;
        }

        /**
         * Set effectiveAt
         * @param effectiveAt The effective datetime or cut label at which to retrieve the portfolio definition. Defaults to the current LUSID system datetime if not specified. (optional)
         * @return APIgetPortfolioByEntityUniqueIdRequest
         */
        public APIgetPortfolioByEntityUniqueIdRequest effectiveAt(String effectiveAt) {
            this.effectiveAt = effectiveAt;
            return this;
        }

        /**
         * Set asAt
         * @param asAt The asAt datetime at which to retrieve the portfolio definition. Defaults to returning the latest version of the portfolio definition if not specified. (optional)
         * @return APIgetPortfolioByEntityUniqueIdRequest
         */
        public APIgetPortfolioByEntityUniqueIdRequest asAt(OffsetDateTime asAt) {
            this.asAt = asAt;
            return this;
        }

        /**
         * Set previews
         * @param previews The ids of the staged modifications to be previewed in the response. (optional)
         * @return APIgetPortfolioByEntityUniqueIdRequest
         */
        public APIgetPortfolioByEntityUniqueIdRequest previews(List<String> previews) {
            this.previews = previews;
            return this;
        }

        /**
         * Build call for getPortfolioByEntityUniqueId
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested portfolio entity </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getPortfolioByEntityUniqueIdCall(entityUniqueId, effectiveAt, asAt, previews, _callback);
        }

        /**
         * Execute getPortfolioByEntityUniqueId request
         * @return PortfolioEntity
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested portfolio entity </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public PortfolioEntity execute() throws ApiException {
            ApiResponse<PortfolioEntity> localVarResp = getPortfolioByEntityUniqueIdWithHttpInfo(entityUniqueId, effectiveAt, asAt, previews);
            return localVarResp.getData();
        }

        /**
         * Execute getPortfolioByEntityUniqueId request with HTTP info returned
         * @return ApiResponse&lt;PortfolioEntity&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested portfolio entity </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PortfolioEntity> executeWithHttpInfo() throws ApiException {
            return getPortfolioByEntityUniqueIdWithHttpInfo(entityUniqueId, effectiveAt, asAt, previews);
        }

        /**
         * Execute getPortfolioByEntityUniqueId request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested portfolio entity </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PortfolioEntity> _callback) throws ApiException {
            return getPortfolioByEntityUniqueIdAsync(entityUniqueId, effectiveAt, asAt, previews, _callback);
        }
    }

    /**
     * [EXPERIMENTAL] GetPortfolioByEntityUniqueId: Get portfolio by EntityUniqueId
     * Retrieve the definition of a particular portfolio.  If the portfolio is deleted, this will return the state of the portfolio immediately prior to deletion.
     * @param entityUniqueId The universally unique identifier of the portfolio definition. (required)
     * @return APIgetPortfolioByEntityUniqueIdRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested portfolio entity </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIgetPortfolioByEntityUniqueIdRequest getPortfolioByEntityUniqueId(String entityUniqueId) {
        return new APIgetPortfolioByEntityUniqueIdRequest(entityUniqueId);
    }
    private okhttp3.Call getPortfolioChangesCall(String scope, String effectiveAt, OffsetDateTime asAt, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/entities/changes/portfolios";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (scope != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scope", scope));
        }

        if (effectiveAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("effectiveAt", effectiveAt));
        }

        if (asAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asAt", asAt));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPortfolioChangesValidateBeforeCall(String scope, String effectiveAt, OffsetDateTime asAt, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling getPortfolioChanges(Async)");
        }

        // verify the required parameter 'effectiveAt' is set
        if (effectiveAt == null) {
            throw new ApiException("Missing the required parameter 'effectiveAt' when calling getPortfolioChanges(Async)");
        }

        return getPortfolioChangesCall(scope, effectiveAt, asAt, _callback);

    }


    private ApiResponse<ResourceListOfChange> getPortfolioChangesWithHttpInfo(String scope, String effectiveAt, OffsetDateTime asAt) throws ApiException {
        okhttp3.Call localVarCall = getPortfolioChangesValidateBeforeCall(scope, effectiveAt, asAt, null);
        Type localVarReturnType = new TypeToken<ResourceListOfChange>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getPortfolioChangesAsync(String scope, String effectiveAt, OffsetDateTime asAt, final ApiCallback<ResourceListOfChange> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPortfolioChangesValidateBeforeCall(scope, effectiveAt, asAt, _callback);
        Type localVarReturnType = new TypeToken<ResourceListOfChange>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetPortfolioChangesRequest {
        private final String scope;
        private final String effectiveAt;
        private OffsetDateTime asAt;

        private APIgetPortfolioChangesRequest(String scope, String effectiveAt) {
            this.scope = scope;
            this.effectiveAt = effectiveAt;
        }

        /**
         * Set asAt
         * @param asAt The as-at date of the origin. (optional)
         * @return APIgetPortfolioChangesRequest
         */
        public APIgetPortfolioChangesRequest asAt(OffsetDateTime asAt) {
            this.asAt = asAt;
            return this;
        }

        /**
         * Build call for getPortfolioChanges
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 200 </td><td> A list of portfolio changes in the requested scope relative to the specified time. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getPortfolioChangesCall(scope, effectiveAt, asAt, _callback);
        }

        /**
         * Execute getPortfolioChanges request
         * @return ResourceListOfChange
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 200 </td><td> A list of portfolio changes in the requested scope relative to the specified time. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ResourceListOfChange execute() throws ApiException {
            ApiResponse<ResourceListOfChange> localVarResp = getPortfolioChangesWithHttpInfo(scope, effectiveAt, asAt);
            return localVarResp.getData();
        }

        /**
         * Execute getPortfolioChanges request with HTTP info returned
         * @return ApiResponse&lt;ResourceListOfChange&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 200 </td><td> A list of portfolio changes in the requested scope relative to the specified time. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ResourceListOfChange> executeWithHttpInfo() throws ApiException {
            return getPortfolioChangesWithHttpInfo(scope, effectiveAt, asAt);
        }

        /**
         * Execute getPortfolioChanges request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 200 </td><td> A list of portfolio changes in the requested scope relative to the specified time. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ResourceListOfChange> _callback) throws ApiException {
            return getPortfolioChangesAsync(scope, effectiveAt, asAt, _callback);
        }
    }

    /**
     * GetPortfolioChanges: Get the next change to each portfolio in a scope.
     * Gets the time of the next (earliest effective at) modification (correction and/or amendment) to each portfolio in a scope relative to a point in bitemporal time.  Includes changes from parent portfolios in different scopes.  Excludes changes from subscriptions (e.g corporate actions).
     * @param scope The scope (required)
     * @param effectiveAt The effective date of the origin. (required)
     * @return APIgetPortfolioChangesRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> A list of portfolio changes in the requested scope relative to the specified time. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIgetPortfolioChangesRequest getPortfolioChanges(String scope, String effectiveAt) {
        return new APIgetPortfolioChangesRequest(scope, effectiveAt);
    }
    private okhttp3.Call getPropertyDefinitionByEntityUniqueIdCall(String entityUniqueId, String effectiveAt, OffsetDateTime asAt, List<String> previews, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/entities/propertydefinitions/{entityUniqueId}"
            .replace("{" + "entityUniqueId" + "}", localVarApiClient.escapeString(entityUniqueId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (effectiveAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("effectiveAt", effectiveAt));
        }

        if (asAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asAt", asAt));
        }

        if (previews != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "previews", previews));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPropertyDefinitionByEntityUniqueIdValidateBeforeCall(String entityUniqueId, String effectiveAt, OffsetDateTime asAt, List<String> previews, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'entityUniqueId' is set
        if (entityUniqueId == null) {
            throw new ApiException("Missing the required parameter 'entityUniqueId' when calling getPropertyDefinitionByEntityUniqueId(Async)");
        }

        return getPropertyDefinitionByEntityUniqueIdCall(entityUniqueId, effectiveAt, asAt, previews, _callback);

    }


    private ApiResponse<PropertyDefinitionEntity> getPropertyDefinitionByEntityUniqueIdWithHttpInfo(String entityUniqueId, String effectiveAt, OffsetDateTime asAt, List<String> previews) throws ApiException {
        okhttp3.Call localVarCall = getPropertyDefinitionByEntityUniqueIdValidateBeforeCall(entityUniqueId, effectiveAt, asAt, previews, null);
        Type localVarReturnType = new TypeToken<PropertyDefinitionEntity>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getPropertyDefinitionByEntityUniqueIdAsync(String entityUniqueId, String effectiveAt, OffsetDateTime asAt, List<String> previews, final ApiCallback<PropertyDefinitionEntity> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPropertyDefinitionByEntityUniqueIdValidateBeforeCall(entityUniqueId, effectiveAt, asAt, previews, _callback);
        Type localVarReturnType = new TypeToken<PropertyDefinitionEntity>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetPropertyDefinitionByEntityUniqueIdRequest {
        private final String entityUniqueId;
        private String effectiveAt;
        private OffsetDateTime asAt;
        private List<String> previews;

        private APIgetPropertyDefinitionByEntityUniqueIdRequest(String entityUniqueId) {
            this.entityUniqueId = entityUniqueId;
        }

        /**
         * Set effectiveAt
         * @param effectiveAt The effective datetime at which to retrieve the property definition. Defaults to the current LUSID system datetime if not specified. (optional)
         * @return APIgetPropertyDefinitionByEntityUniqueIdRequest
         */
        public APIgetPropertyDefinitionByEntityUniqueIdRequest effectiveAt(String effectiveAt) {
            this.effectiveAt = effectiveAt;
            return this;
        }

        /**
         * Set asAt
         * @param asAt The asAt datetime at which to retrieve the property definition. Defaults to returning the latest version of the property definition if not specified. (optional)
         * @return APIgetPropertyDefinitionByEntityUniqueIdRequest
         */
        public APIgetPropertyDefinitionByEntityUniqueIdRequest asAt(OffsetDateTime asAt) {
            this.asAt = asAt;
            return this;
        }

        /**
         * Set previews
         * @param previews The ids of the staged modifications to be previewed in the response. (optional)
         * @return APIgetPropertyDefinitionByEntityUniqueIdRequest
         */
        public APIgetPropertyDefinitionByEntityUniqueIdRequest previews(List<String> previews) {
            this.previews = previews;
            return this;
        }

        /**
         * Build call for getPropertyDefinitionByEntityUniqueId
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested property definition entity </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getPropertyDefinitionByEntityUniqueIdCall(entityUniqueId, effectiveAt, asAt, previews, _callback);
        }

        /**
         * Execute getPropertyDefinitionByEntityUniqueId request
         * @return PropertyDefinitionEntity
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested property definition entity </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public PropertyDefinitionEntity execute() throws ApiException {
            ApiResponse<PropertyDefinitionEntity> localVarResp = getPropertyDefinitionByEntityUniqueIdWithHttpInfo(entityUniqueId, effectiveAt, asAt, previews);
            return localVarResp.getData();
        }

        /**
         * Execute getPropertyDefinitionByEntityUniqueId request with HTTP info returned
         * @return ApiResponse&lt;PropertyDefinitionEntity&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested property definition entity </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PropertyDefinitionEntity> executeWithHttpInfo() throws ApiException {
            return getPropertyDefinitionByEntityUniqueIdWithHttpInfo(entityUniqueId, effectiveAt, asAt, previews);
        }

        /**
         * Execute getPropertyDefinitionByEntityUniqueId request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested property definition entity </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PropertyDefinitionEntity> _callback) throws ApiException {
            return getPropertyDefinitionByEntityUniqueIdAsync(entityUniqueId, effectiveAt, asAt, previews, _callback);
        }
    }

    /**
     * [EXPERIMENTAL] GetPropertyDefinitionByEntityUniqueId: Get property definition by EntityUniqueId
     * Retrieve a particular property definition.  If the property definition is deleted, this will return the state of the property definition immediately prior to deletion.
     * @param entityUniqueId The universally unique identifier of the property definition. (required)
     * @return APIgetPropertyDefinitionByEntityUniqueIdRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested property definition entity </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIgetPropertyDefinitionByEntityUniqueIdRequest getPropertyDefinitionByEntityUniqueId(String entityUniqueId) {
        return new APIgetPropertyDefinitionByEntityUniqueIdRequest(entityUniqueId);
    }
}
