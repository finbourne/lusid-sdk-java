/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.api;

import com.finbourne.lusid.ApiCallback;
import com.finbourne.lusid.ApiClient;
import com.finbourne.lusid.ApiException;
import com.finbourne.lusid.ApiResponse;
import com.finbourne.lusid.Configuration;
import com.finbourne.lusid.Pair;
import com.finbourne.lusid.ProgressRequestBody;
import com.finbourne.lusid.ProgressResponseBody;
import com.finbourne.lusid.extensions.ConfigurationOptions;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.finbourne.lusid.model.CalculateOrderDatesRequest;
import com.finbourne.lusid.model.CalculateOrderDatesResponse;
import com.finbourne.lusid.model.LusidProblemDetails;
import com.finbourne.lusid.model.LusidValidationProblemDetails;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TransferAgencyApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TransferAgencyApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TransferAgencyApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call calculateOrderDatesCall(Map<String, CalculateOrderDatesRequest> requestBody, final ApiCallback _callback) throws ApiException {
        return calculateOrderDatesCall(requestBody,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call calculateOrderDatesCall(Map<String, CalculateOrderDatesRequest> requestBody, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/api/transferagency/orderdates";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call calculateOrderDatesValidateBeforeCall(Map<String, CalculateOrderDatesRequest> requestBody, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'requestBody' is set
        if (requestBody == null) {
            throw new ApiException("Missing the required parameter 'requestBody' when calling calculateOrderDates(Async)");
        }

        return calculateOrderDatesCall(requestBody, _callback, opts);

    }


    private ApiResponse<CalculateOrderDatesResponse> calculateOrderDatesWithHttpInfo(Map<String, CalculateOrderDatesRequest> requestBody) throws ApiException {
        okhttp3.Call localVarCall = calculateOrderDatesValidateBeforeCall(requestBody, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<CalculateOrderDatesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<CalculateOrderDatesResponse> calculateOrderDatesWithHttpInfo(Map<String, CalculateOrderDatesRequest> requestBody, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = calculateOrderDatesValidateBeforeCall(requestBody, null, opts);
        Type localVarReturnType = new TypeToken<CalculateOrderDatesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call calculateOrderDatesAsync(Map<String, CalculateOrderDatesRequest> requestBody, final ApiCallback<CalculateOrderDatesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = calculateOrderDatesValidateBeforeCall(requestBody, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<CalculateOrderDatesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call calculateOrderDatesAsync(Map<String, CalculateOrderDatesRequest> requestBody, final ApiCallback<CalculateOrderDatesResponse> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = calculateOrderDatesValidateBeforeCall(requestBody, _callback, opts);
        Type localVarReturnType = new TypeToken<CalculateOrderDatesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIcalculateOrderDatesRequest {
        private final Map<String, CalculateOrderDatesRequest> requestBody;

        private APIcalculateOrderDatesRequest(Map<String, CalculateOrderDatesRequest> requestBody) {
            this.requestBody = requestBody;
        }

        /**
         * Build call for calculateOrderDates
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully calculated dates and any failed calculations. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return calculateOrderDatesCall(requestBody, _callback);
        }

        /**
         * Execute calculateOrderDates request
         * @return CalculateOrderDatesResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully calculated dates and any failed calculations. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public CalculateOrderDatesResponse execute() throws ApiException {
            ApiResponse<CalculateOrderDatesResponse> localVarResp = calculateOrderDatesWithHttpInfo(requestBody);
            return localVarResp.getData();
        }

        /**
         * Execute calculateOrderDates request. Use any specified configuration options to override any other configuration for this request only.
         * @return CalculateOrderDatesResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully calculated dates and any failed calculations. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public CalculateOrderDatesResponse execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<CalculateOrderDatesResponse> localVarResp = calculateOrderDatesWithHttpInfo(requestBody, opts);
            return localVarResp.getData();
        }

        /**
         * Execute calculateOrderDates request with HTTP info returned
         * @return ApiResponse&lt;CalculateOrderDatesResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully calculated dates and any failed calculations. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CalculateOrderDatesResponse> executeWithHttpInfo() throws ApiException {
            return calculateOrderDatesWithHttpInfo(requestBody);
        }

        /**
         * Execute calculateOrderDates request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;CalculateOrderDatesResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully calculated dates and any failed calculations. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CalculateOrderDatesResponse> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return calculateOrderDatesWithHttpInfo(requestBody, opts);
        }

        /**
         * Execute calculateOrderDates request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully calculated dates and any failed calculations. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CalculateOrderDatesResponse> _callback) throws ApiException {
            return calculateOrderDatesAsync(requestBody, _callback);
        }

        /**
         * Execute calculateOrderDates request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully calculated dates and any failed calculations. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CalculateOrderDatesResponse> _callback, ConfigurationOptions opts) throws ApiException {
            return calculateOrderDatesAsync(requestBody, _callback, opts);
        }
    }

    /**
     * [EXPERIMENTAL] CalculateOrderDates: Calculate the key dates associated with transfer agency orders
     * The response contains both the collection of successfully calculated dates and any failed calculations,  each in the form of a dictionary keyed by the request&#39;s keys.  For each failure, a reason is provided. It is important to check the failed set for unsuccessful results.
     * @param requestBody The request containing the dates used for calculation (required)
     * @return APIcalculateOrderDatesRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully calculated dates and any failed calculations. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIcalculateOrderDatesRequest calculateOrderDates(Map<String, CalculateOrderDatesRequest> requestBody) {
        return new APIcalculateOrderDatesRequest(requestBody);
    }
}
