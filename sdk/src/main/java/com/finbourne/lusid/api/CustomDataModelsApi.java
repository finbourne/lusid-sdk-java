/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.api;

import com.finbourne.lusid.ApiCallback;
import com.finbourne.lusid.ApiClient;
import com.finbourne.lusid.ApiException;
import com.finbourne.lusid.ApiResponse;
import com.finbourne.lusid.Configuration;
import com.finbourne.lusid.Pair;
import com.finbourne.lusid.ProgressRequestBody;
import com.finbourne.lusid.ProgressResponseBody;
import com.finbourne.lusid.extensions.ConfigurationOptions;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.finbourne.lusid.model.CreateCustomDataModelRequest;
import com.finbourne.lusid.model.CustomDataModel;
import com.finbourne.lusid.model.DeletedEntityResponse;
import com.finbourne.lusid.model.LusidProblemDetails;
import com.finbourne.lusid.model.LusidValidationProblemDetails;
import java.time.OffsetDateTime;
import com.finbourne.lusid.model.ResourceListOfDataModelSummary;
import com.finbourne.lusid.model.ResourceListOfString;
import com.finbourne.lusid.model.UpdateCustomDataModelRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CustomDataModelsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CustomDataModelsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CustomDataModelsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createCustomDataModelCall(String entityType, CreateCustomDataModelRequest createCustomDataModelRequest, final ApiCallback _callback) throws ApiException {
        return createCustomDataModelCall(entityType, createCustomDataModelRequest,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call createCustomDataModelCall(String entityType, CreateCustomDataModelRequest createCustomDataModelRequest, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createCustomDataModelRequest;

        // create path and map variables
        String localVarPath = "/api/datamodel/{entityType}"
            .replace("{" + "entityType" + "}", localVarApiClient.escapeString(entityType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createCustomDataModelValidateBeforeCall(String entityType, CreateCustomDataModelRequest createCustomDataModelRequest, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'entityType' is set
        if (entityType == null) {
            throw new ApiException("Missing the required parameter 'entityType' when calling createCustomDataModel(Async)");
        }

        return createCustomDataModelCall(entityType, createCustomDataModelRequest, _callback, opts);

    }


    private ApiResponse<CustomDataModel> createCustomDataModelWithHttpInfo(String entityType, CreateCustomDataModelRequest createCustomDataModelRequest) throws ApiException {
        okhttp3.Call localVarCall = createCustomDataModelValidateBeforeCall(entityType, createCustomDataModelRequest, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<CustomDataModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<CustomDataModel> createCustomDataModelWithHttpInfo(String entityType, CreateCustomDataModelRequest createCustomDataModelRequest, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = createCustomDataModelValidateBeforeCall(entityType, createCustomDataModelRequest, null, opts);
        Type localVarReturnType = new TypeToken<CustomDataModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createCustomDataModelAsync(String entityType, CreateCustomDataModelRequest createCustomDataModelRequest, final ApiCallback<CustomDataModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = createCustomDataModelValidateBeforeCall(entityType, createCustomDataModelRequest, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<CustomDataModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call createCustomDataModelAsync(String entityType, CreateCustomDataModelRequest createCustomDataModelRequest, final ApiCallback<CustomDataModel> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = createCustomDataModelValidateBeforeCall(entityType, createCustomDataModelRequest, _callback, opts);
        Type localVarReturnType = new TypeToken<CustomDataModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIcreateCustomDataModelRequest {
        private final String entityType;
        private CreateCustomDataModelRequest createCustomDataModelRequest;

        private APIcreateCustomDataModelRequest(String entityType) {
            this.entityType = entityType;
        }

        /**
         * Set createCustomDataModelRequest
         * @param createCustomDataModelRequest The request containing the details of the Data Model. (optional)
         * @return APIcreateCustomDataModelRequest
         */
        public APIcreateCustomDataModelRequest createCustomDataModelRequest(CreateCustomDataModelRequest createCustomDataModelRequest) {
            this.createCustomDataModelRequest = createCustomDataModelRequest;
            return this;
        }

        /**
         * Build call for createCustomDataModel
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The created Data Model </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return createCustomDataModelCall(entityType, createCustomDataModelRequest, _callback);
        }

        /**
         * Execute createCustomDataModel request
         * @return CustomDataModel
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The created Data Model </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public CustomDataModel execute() throws ApiException {
            ApiResponse<CustomDataModel> localVarResp = createCustomDataModelWithHttpInfo(entityType, createCustomDataModelRequest);
            return localVarResp.getData();
        }

        /**
         * Execute createCustomDataModel request. Use any specified configuration options to override any other configuration for this request only.
         * @return CustomDataModel
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The created Data Model </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public CustomDataModel execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<CustomDataModel> localVarResp = createCustomDataModelWithHttpInfo(entityType, createCustomDataModelRequest, opts);
            return localVarResp.getData();
        }

        /**
         * Execute createCustomDataModel request with HTTP info returned
         * @return ApiResponse&lt;CustomDataModel&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The created Data Model </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CustomDataModel> executeWithHttpInfo() throws ApiException {
            return createCustomDataModelWithHttpInfo(entityType, createCustomDataModelRequest);
        }

        /**
         * Execute createCustomDataModel request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;CustomDataModel&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The created Data Model </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CustomDataModel> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return createCustomDataModelWithHttpInfo(entityType, createCustomDataModelRequest, opts);
        }

        /**
         * Execute createCustomDataModel request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The created Data Model </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CustomDataModel> _callback) throws ApiException {
            return createCustomDataModelAsync(entityType, createCustomDataModelRequest, _callback);
        }

        /**
         * Execute createCustomDataModel request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The created Data Model </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CustomDataModel> _callback, ConfigurationOptions opts) throws ApiException {
            return createCustomDataModelAsync(entityType, createCustomDataModelRequest, _callback, opts);
        }
    }

    /**
     * [EXPERIMENTAL] CreateCustomDataModel: Create a Custom Data Model
     * Creates a Custom Data Model.
     * @param entityType The entity type of the Data Model. (required)
     * @return APIcreateCustomDataModelRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The created Data Model </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIcreateCustomDataModelRequest createCustomDataModel(String entityType) {
        return new APIcreateCustomDataModelRequest(entityType);
    }
    private okhttp3.Call deleteCustomDataModelCall(String entityType, String scope, String code, final ApiCallback _callback) throws ApiException {
        return deleteCustomDataModelCall(entityType, scope, code,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call deleteCustomDataModelCall(String entityType, String scope, String code, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/datamodel/{entityType}/{scope}/{code}"
            .replace("{" + "entityType" + "}", localVarApiClient.escapeString(entityType.toString()))
            .replace("{" + "scope" + "}", localVarApiClient.escapeString(scope.toString()))
            .replace("{" + "code" + "}", localVarApiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteCustomDataModelValidateBeforeCall(String entityType, String scope, String code, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'entityType' is set
        if (entityType == null) {
            throw new ApiException("Missing the required parameter 'entityType' when calling deleteCustomDataModel(Async)");
        }

        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling deleteCustomDataModel(Async)");
        }

        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling deleteCustomDataModel(Async)");
        }

        return deleteCustomDataModelCall(entityType, scope, code, _callback, opts);

    }


    private ApiResponse<DeletedEntityResponse> deleteCustomDataModelWithHttpInfo(String entityType, String scope, String code) throws ApiException {
        okhttp3.Call localVarCall = deleteCustomDataModelValidateBeforeCall(entityType, scope, code, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<DeletedEntityResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<DeletedEntityResponse> deleteCustomDataModelWithHttpInfo(String entityType, String scope, String code, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = deleteCustomDataModelValidateBeforeCall(entityType, scope, code, null, opts);
        Type localVarReturnType = new TypeToken<DeletedEntityResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteCustomDataModelAsync(String entityType, String scope, String code, final ApiCallback<DeletedEntityResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteCustomDataModelValidateBeforeCall(entityType, scope, code, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<DeletedEntityResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call deleteCustomDataModelAsync(String entityType, String scope, String code, final ApiCallback<DeletedEntityResponse> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = deleteCustomDataModelValidateBeforeCall(entityType, scope, code, _callback, opts);
        Type localVarReturnType = new TypeToken<DeletedEntityResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIdeleteCustomDataModelRequest {
        private final String entityType;
        private final String scope;
        private final String code;

        private APIdeleteCustomDataModelRequest(String entityType, String scope, String code) {
            this.entityType = entityType;
            this.scope = scope;
            this.code = code;
        }

        /**
         * Build call for deleteCustomDataModel
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The deleted entity metadata </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteCustomDataModelCall(entityType, scope, code, _callback);
        }

        /**
         * Execute deleteCustomDataModel request
         * @return DeletedEntityResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The deleted entity metadata </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public DeletedEntityResponse execute() throws ApiException {
            ApiResponse<DeletedEntityResponse> localVarResp = deleteCustomDataModelWithHttpInfo(entityType, scope, code);
            return localVarResp.getData();
        }

        /**
         * Execute deleteCustomDataModel request. Use any specified configuration options to override any other configuration for this request only.
         * @return DeletedEntityResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The deleted entity metadata </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public DeletedEntityResponse execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<DeletedEntityResponse> localVarResp = deleteCustomDataModelWithHttpInfo(entityType, scope, code, opts);
            return localVarResp.getData();
        }

        /**
         * Execute deleteCustomDataModel request with HTTP info returned
         * @return ApiResponse&lt;DeletedEntityResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The deleted entity metadata </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DeletedEntityResponse> executeWithHttpInfo() throws ApiException {
            return deleteCustomDataModelWithHttpInfo(entityType, scope, code);
        }

        /**
         * Execute deleteCustomDataModel request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;DeletedEntityResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The deleted entity metadata </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DeletedEntityResponse> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return deleteCustomDataModelWithHttpInfo(entityType, scope, code, opts);
        }

        /**
         * Execute deleteCustomDataModel request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The deleted entity metadata </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DeletedEntityResponse> _callback) throws ApiException {
            return deleteCustomDataModelAsync(entityType, scope, code, _callback);
        }

        /**
         * Execute deleteCustomDataModel request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The deleted entity metadata </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DeletedEntityResponse> _callback, ConfigurationOptions opts) throws ApiException {
            return deleteCustomDataModelAsync(entityType, scope, code, _callback, opts);
        }
    }

    /**
     * [EXPERIMENTAL] DeleteCustomDataModel: Delete a Custom Data Model
     * Delete a Custom Data Model. The data model will remain viewable at previous as at times, but will no longer  be part of any hierarchies.
     * @param entityType The entity type of the Data Model. (required)
     * @param scope The scope of the specified Data Model. (required)
     * @param code The code of the specified Data Model. (required)
     * @return APIdeleteCustomDataModelRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The deleted entity metadata </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIdeleteCustomDataModelRequest deleteCustomDataModel(String entityType, String scope, String code) {
        return new APIdeleteCustomDataModelRequest(entityType, scope, code);
    }
    private okhttp3.Call getCustomDataModelCall(String entityType, String scope, String code, OffsetDateTime asAt, final ApiCallback _callback) throws ApiException {
        return getCustomDataModelCall(entityType, scope, code, asAt,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call getCustomDataModelCall(String entityType, String scope, String code, OffsetDateTime asAt, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/datamodel/{entityType}/{scope}/{code}"
            .replace("{" + "entityType" + "}", localVarApiClient.escapeString(entityType.toString()))
            .replace("{" + "scope" + "}", localVarApiClient.escapeString(scope.toString()))
            .replace("{" + "code" + "}", localVarApiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (asAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asAt", asAt));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCustomDataModelValidateBeforeCall(String entityType, String scope, String code, OffsetDateTime asAt, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'entityType' is set
        if (entityType == null) {
            throw new ApiException("Missing the required parameter 'entityType' when calling getCustomDataModel(Async)");
        }

        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling getCustomDataModel(Async)");
        }

        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling getCustomDataModel(Async)");
        }

        return getCustomDataModelCall(entityType, scope, code, asAt, _callback, opts);

    }


    private ApiResponse<CustomDataModel> getCustomDataModelWithHttpInfo(String entityType, String scope, String code, OffsetDateTime asAt) throws ApiException {
        okhttp3.Call localVarCall = getCustomDataModelValidateBeforeCall(entityType, scope, code, asAt, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<CustomDataModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<CustomDataModel> getCustomDataModelWithHttpInfo(String entityType, String scope, String code, OffsetDateTime asAt, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = getCustomDataModelValidateBeforeCall(entityType, scope, code, asAt, null, opts);
        Type localVarReturnType = new TypeToken<CustomDataModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCustomDataModelAsync(String entityType, String scope, String code, OffsetDateTime asAt, final ApiCallback<CustomDataModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCustomDataModelValidateBeforeCall(entityType, scope, code, asAt, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<CustomDataModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call getCustomDataModelAsync(String entityType, String scope, String code, OffsetDateTime asAt, final ApiCallback<CustomDataModel> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = getCustomDataModelValidateBeforeCall(entityType, scope, code, asAt, _callback, opts);
        Type localVarReturnType = new TypeToken<CustomDataModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetCustomDataModelRequest {
        private final String entityType;
        private final String scope;
        private final String code;
        private OffsetDateTime asAt;

        private APIgetCustomDataModelRequest(String entityType, String scope, String code) {
            this.entityType = entityType;
            this.scope = scope;
            this.code = code;
        }

        /**
         * Set asAt
         * @param asAt The asAt datetime at which to retrieve the Data Model. Defaults to return   the latest version of the Data Model if not specified. (optional)
         * @return APIgetCustomDataModelRequest
         */
        public APIgetCustomDataModelRequest asAt(OffsetDateTime asAt) {
            this.asAt = asAt;
            return this;
        }

        /**
         * Build call for getCustomDataModel
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The requested Data Model </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCustomDataModelCall(entityType, scope, code, asAt, _callback);
        }

        /**
         * Execute getCustomDataModel request
         * @return CustomDataModel
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The requested Data Model </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public CustomDataModel execute() throws ApiException {
            ApiResponse<CustomDataModel> localVarResp = getCustomDataModelWithHttpInfo(entityType, scope, code, asAt);
            return localVarResp.getData();
        }

        /**
         * Execute getCustomDataModel request. Use any specified configuration options to override any other configuration for this request only.
         * @return CustomDataModel
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The requested Data Model </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public CustomDataModel execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<CustomDataModel> localVarResp = getCustomDataModelWithHttpInfo(entityType, scope, code, asAt, opts);
            return localVarResp.getData();
        }

        /**
         * Execute getCustomDataModel request with HTTP info returned
         * @return ApiResponse&lt;CustomDataModel&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The requested Data Model </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CustomDataModel> executeWithHttpInfo() throws ApiException {
            return getCustomDataModelWithHttpInfo(entityType, scope, code, asAt);
        }

        /**
         * Execute getCustomDataModel request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;CustomDataModel&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The requested Data Model </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CustomDataModel> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return getCustomDataModelWithHttpInfo(entityType, scope, code, asAt, opts);
        }

        /**
         * Execute getCustomDataModel request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The requested Data Model </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CustomDataModel> _callback) throws ApiException {
            return getCustomDataModelAsync(entityType, scope, code, asAt, _callback);
        }

        /**
         * Execute getCustomDataModel request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The requested Data Model </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CustomDataModel> _callback, ConfigurationOptions opts) throws ApiException {
            return getCustomDataModelAsync(entityType, scope, code, asAt, _callback, opts);
        }
    }

    /**
     * [EXPERIMENTAL] GetCustomDataModel: Get a Custom Data Model
     * Retrieves a Custom Data Model at a given as at time.
     * @param entityType The entity type of the Data Model. (required)
     * @param scope The scope of the specified Data Model. (required)
     * @param code The code of the specified Data Model. (required)
     * @return APIgetCustomDataModelRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The requested Data Model </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIgetCustomDataModelRequest getCustomDataModel(String entityType, String scope, String code) {
        return new APIgetCustomDataModelRequest(entityType, scope, code);
    }
    private okhttp3.Call listDataModelHierarchiesCall(OffsetDateTime asAt, String filter, final ApiCallback _callback) throws ApiException {
        return listDataModelHierarchiesCall(asAt, filter,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call listDataModelHierarchiesCall(OffsetDateTime asAt, String filter, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/datamodel/hierarchies";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (asAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asAt", asAt));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listDataModelHierarchiesValidateBeforeCall(OffsetDateTime asAt, String filter, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        return listDataModelHierarchiesCall(asAt, filter, _callback, opts);

    }


    private ApiResponse<ResourceListOfDataModelSummary> listDataModelHierarchiesWithHttpInfo(OffsetDateTime asAt, String filter) throws ApiException {
        okhttp3.Call localVarCall = listDataModelHierarchiesValidateBeforeCall(asAt, filter, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<ResourceListOfDataModelSummary>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<ResourceListOfDataModelSummary> listDataModelHierarchiesWithHttpInfo(OffsetDateTime asAt, String filter, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = listDataModelHierarchiesValidateBeforeCall(asAt, filter, null, opts);
        Type localVarReturnType = new TypeToken<ResourceListOfDataModelSummary>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listDataModelHierarchiesAsync(OffsetDateTime asAt, String filter, final ApiCallback<ResourceListOfDataModelSummary> _callback) throws ApiException {

        okhttp3.Call localVarCall = listDataModelHierarchiesValidateBeforeCall(asAt, filter, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<ResourceListOfDataModelSummary>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call listDataModelHierarchiesAsync(OffsetDateTime asAt, String filter, final ApiCallback<ResourceListOfDataModelSummary> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = listDataModelHierarchiesValidateBeforeCall(asAt, filter, _callback, opts);
        Type localVarReturnType = new TypeToken<ResourceListOfDataModelSummary>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIlistDataModelHierarchiesRequest {
        private OffsetDateTime asAt;
        private String filter;

        private APIlistDataModelHierarchiesRequest() {
        }

        /**
         * Set asAt
         * @param asAt The asAt datetime at which to retrieve the Data Model. Defaults to return   the latest version of the Data Model if not specified. (optional)
         * @return APIlistDataModelHierarchiesRequest
         */
        public APIlistDataModelHierarchiesRequest asAt(OffsetDateTime asAt) {
            this.asAt = asAt;
            return this;
        }

        /**
         * Set filter
         * @param filter Expression to filter the results. Only EntityType is supported (optional)
         * @return APIlistDataModelHierarchiesRequest
         */
        public APIlistDataModelHierarchiesRequest filter(String filter) {
            this.filter = filter;
            return this;
        }

        /**
         * Build call for listDataModelHierarchies
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> All data model hierarchies. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listDataModelHierarchiesCall(asAt, filter, _callback);
        }

        /**
         * Execute listDataModelHierarchies request
         * @return ResourceListOfDataModelSummary
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> All data model hierarchies. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ResourceListOfDataModelSummary execute() throws ApiException {
            ApiResponse<ResourceListOfDataModelSummary> localVarResp = listDataModelHierarchiesWithHttpInfo(asAt, filter);
            return localVarResp.getData();
        }

        /**
         * Execute listDataModelHierarchies request. Use any specified configuration options to override any other configuration for this request only.
         * @return ResourceListOfDataModelSummary
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> All data model hierarchies. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ResourceListOfDataModelSummary execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<ResourceListOfDataModelSummary> localVarResp = listDataModelHierarchiesWithHttpInfo(asAt, filter, opts);
            return localVarResp.getData();
        }

        /**
         * Execute listDataModelHierarchies request with HTTP info returned
         * @return ApiResponse&lt;ResourceListOfDataModelSummary&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> All data model hierarchies. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ResourceListOfDataModelSummary> executeWithHttpInfo() throws ApiException {
            return listDataModelHierarchiesWithHttpInfo(asAt, filter);
        }

        /**
         * Execute listDataModelHierarchies request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;ResourceListOfDataModelSummary&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> All data model hierarchies. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ResourceListOfDataModelSummary> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return listDataModelHierarchiesWithHttpInfo(asAt, filter, opts);
        }

        /**
         * Execute listDataModelHierarchies request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> All data model hierarchies. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ResourceListOfDataModelSummary> _callback) throws ApiException {
            return listDataModelHierarchiesAsync(asAt, filter, _callback);
        }

        /**
         * Execute listDataModelHierarchies request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> All data model hierarchies. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ResourceListOfDataModelSummary> _callback, ConfigurationOptions opts) throws ApiException {
            return listDataModelHierarchiesAsync(asAt, filter, _callback, opts);
        }
    }

    /**
     * [EXPERIMENTAL] ListDataModelHierarchies: List Custom Data Model hierarchies.
     * Lists the data model summaries within their hierarchical structure.
     * @return APIlistDataModelHierarchiesRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All data model hierarchies. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIlistDataModelHierarchiesRequest listDataModelHierarchies() {
        return new APIlistDataModelHierarchiesRequest();
    }
    private okhttp3.Call listSupportedEntityTypesCall(final ApiCallback _callback) throws ApiException {
        return listSupportedEntityTypesCall( _callback, new ConfigurationOptions());
    }

    private okhttp3.Call listSupportedEntityTypesCall(final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/datamodel/entitytype";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listSupportedEntityTypesValidateBeforeCall(final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        return listSupportedEntityTypesCall(_callback, opts);

    }


    private ApiResponse<ResourceListOfString> listSupportedEntityTypesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = listSupportedEntityTypesValidateBeforeCall(null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<ResourceListOfString>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<ResourceListOfString> listSupportedEntityTypesWithHttpInfo(ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = listSupportedEntityTypesValidateBeforeCall(null, opts);
        Type localVarReturnType = new TypeToken<ResourceListOfString>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listSupportedEntityTypesAsync(final ApiCallback<ResourceListOfString> _callback) throws ApiException {

        okhttp3.Call localVarCall = listSupportedEntityTypesValidateBeforeCall(_callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<ResourceListOfString>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call listSupportedEntityTypesAsync(final ApiCallback<ResourceListOfString> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = listSupportedEntityTypesValidateBeforeCall(_callback, opts);
        Type localVarReturnType = new TypeToken<ResourceListOfString>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIlistSupportedEntityTypesRequest {

        private APIlistSupportedEntityTypesRequest() {
        }

        /**
         * Build call for listSupportedEntityTypes
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> All supported entity types. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listSupportedEntityTypesCall(_callback);
        }

        /**
         * Execute listSupportedEntityTypes request
         * @return ResourceListOfString
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> All supported entity types. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ResourceListOfString execute() throws ApiException {
            ApiResponse<ResourceListOfString> localVarResp = listSupportedEntityTypesWithHttpInfo();
            return localVarResp.getData();
        }

        /**
         * Execute listSupportedEntityTypes request. Use any specified configuration options to override any other configuration for this request only.
         * @return ResourceListOfString
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> All supported entity types. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ResourceListOfString execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<ResourceListOfString> localVarResp = listSupportedEntityTypesWithHttpInfo(opts);
            return localVarResp.getData();
        }

        /**
         * Execute listSupportedEntityTypes request with HTTP info returned
         * @return ApiResponse&lt;ResourceListOfString&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> All supported entity types. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ResourceListOfString> executeWithHttpInfo() throws ApiException {
            return listSupportedEntityTypesWithHttpInfo();
        }

        /**
         * Execute listSupportedEntityTypes request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;ResourceListOfString&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> All supported entity types. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ResourceListOfString> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return listSupportedEntityTypesWithHttpInfo(opts);
        }

        /**
         * Execute listSupportedEntityTypes request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> All supported entity types. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ResourceListOfString> _callback) throws ApiException {
            return listSupportedEntityTypesAsync(_callback);
        }

        /**
         * Execute listSupportedEntityTypes request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> All supported entity types. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ResourceListOfString> _callback, ConfigurationOptions opts) throws ApiException {
            return listSupportedEntityTypesAsync(_callback, opts);
        }
    }

    /**
     * [EXPERIMENTAL] ListSupportedEntityTypes: List the currently supported entity types for use in Custom Data Models.
     * Lists the currently supported entity types available to bind with Custom Data Models.
     * @return APIlistSupportedEntityTypesRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All supported entity types. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIlistSupportedEntityTypesRequest listSupportedEntityTypes() {
        return new APIlistSupportedEntityTypesRequest();
    }
    private okhttp3.Call updateCustomDataModelCall(String entityType, String scope, String code, UpdateCustomDataModelRequest updateCustomDataModelRequest, final ApiCallback _callback) throws ApiException {
        return updateCustomDataModelCall(entityType, scope, code, updateCustomDataModelRequest,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call updateCustomDataModelCall(String entityType, String scope, String code, UpdateCustomDataModelRequest updateCustomDataModelRequest, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateCustomDataModelRequest;

        // create path and map variables
        String localVarPath = "/api/datamodel/{entityType}/{scope}/{code}"
            .replace("{" + "entityType" + "}", localVarApiClient.escapeString(entityType.toString()))
            .replace("{" + "scope" + "}", localVarApiClient.escapeString(scope.toString()))
            .replace("{" + "code" + "}", localVarApiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateCustomDataModelValidateBeforeCall(String entityType, String scope, String code, UpdateCustomDataModelRequest updateCustomDataModelRequest, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'entityType' is set
        if (entityType == null) {
            throw new ApiException("Missing the required parameter 'entityType' when calling updateCustomDataModel(Async)");
        }

        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling updateCustomDataModel(Async)");
        }

        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling updateCustomDataModel(Async)");
        }

        return updateCustomDataModelCall(entityType, scope, code, updateCustomDataModelRequest, _callback, opts);

    }


    private ApiResponse<CustomDataModel> updateCustomDataModelWithHttpInfo(String entityType, String scope, String code, UpdateCustomDataModelRequest updateCustomDataModelRequest) throws ApiException {
        okhttp3.Call localVarCall = updateCustomDataModelValidateBeforeCall(entityType, scope, code, updateCustomDataModelRequest, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<CustomDataModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<CustomDataModel> updateCustomDataModelWithHttpInfo(String entityType, String scope, String code, UpdateCustomDataModelRequest updateCustomDataModelRequest, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = updateCustomDataModelValidateBeforeCall(entityType, scope, code, updateCustomDataModelRequest, null, opts);
        Type localVarReturnType = new TypeToken<CustomDataModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateCustomDataModelAsync(String entityType, String scope, String code, UpdateCustomDataModelRequest updateCustomDataModelRequest, final ApiCallback<CustomDataModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateCustomDataModelValidateBeforeCall(entityType, scope, code, updateCustomDataModelRequest, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<CustomDataModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call updateCustomDataModelAsync(String entityType, String scope, String code, UpdateCustomDataModelRequest updateCustomDataModelRequest, final ApiCallback<CustomDataModel> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = updateCustomDataModelValidateBeforeCall(entityType, scope, code, updateCustomDataModelRequest, _callback, opts);
        Type localVarReturnType = new TypeToken<CustomDataModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIupdateCustomDataModelRequest {
        private final String entityType;
        private final String scope;
        private final String code;
        private UpdateCustomDataModelRequest updateCustomDataModelRequest;

        private APIupdateCustomDataModelRequest(String entityType, String scope, String code) {
            this.entityType = entityType;
            this.scope = scope;
            this.code = code;
        }

        /**
         * Set updateCustomDataModelRequest
         * @param updateCustomDataModelRequest The request containing the details of the Data Model. (optional)
         * @return APIupdateCustomDataModelRequest
         */
        public APIupdateCustomDataModelRequest updateCustomDataModelRequest(UpdateCustomDataModelRequest updateCustomDataModelRequest) {
            this.updateCustomDataModelRequest = updateCustomDataModelRequest;
            return this;
        }

        /**
         * Build call for updateCustomDataModel
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The updated Data Model </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return updateCustomDataModelCall(entityType, scope, code, updateCustomDataModelRequest, _callback);
        }

        /**
         * Execute updateCustomDataModel request
         * @return CustomDataModel
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The updated Data Model </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public CustomDataModel execute() throws ApiException {
            ApiResponse<CustomDataModel> localVarResp = updateCustomDataModelWithHttpInfo(entityType, scope, code, updateCustomDataModelRequest);
            return localVarResp.getData();
        }

        /**
         * Execute updateCustomDataModel request. Use any specified configuration options to override any other configuration for this request only.
         * @return CustomDataModel
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The updated Data Model </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public CustomDataModel execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<CustomDataModel> localVarResp = updateCustomDataModelWithHttpInfo(entityType, scope, code, updateCustomDataModelRequest, opts);
            return localVarResp.getData();
        }

        /**
         * Execute updateCustomDataModel request with HTTP info returned
         * @return ApiResponse&lt;CustomDataModel&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The updated Data Model </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CustomDataModel> executeWithHttpInfo() throws ApiException {
            return updateCustomDataModelWithHttpInfo(entityType, scope, code, updateCustomDataModelRequest);
        }

        /**
         * Execute updateCustomDataModel request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;CustomDataModel&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The updated Data Model </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CustomDataModel> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return updateCustomDataModelWithHttpInfo(entityType, scope, code, updateCustomDataModelRequest, opts);
        }

        /**
         * Execute updateCustomDataModel request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The updated Data Model </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CustomDataModel> _callback) throws ApiException {
            return updateCustomDataModelAsync(entityType, scope, code, updateCustomDataModelRequest, _callback);
        }

        /**
         * Execute updateCustomDataModel request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The updated Data Model </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CustomDataModel> _callback, ConfigurationOptions opts) throws ApiException {
            return updateCustomDataModelAsync(entityType, scope, code, updateCustomDataModelRequest, _callback, opts);
        }
    }

    /**
     * [EXPERIMENTAL] UpdateCustomDataModel: Update a Custom Data Model
     * Updates a Custom Data Model.
     * @param entityType The entity type of the Data Model. (required)
     * @param scope The scope of the specified Data Model. (required)
     * @param code The code of the specified Data Model. (required)
     * @return APIupdateCustomDataModelRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated Data Model </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIupdateCustomDataModelRequest updateCustomDataModel(String entityType, String scope, String code) {
        return new APIupdateCustomDataModelRequest(entityType, scope, code);
    }
}
