/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.api;

import com.finbourne.lusid.ApiCallback;
import com.finbourne.lusid.ApiClient;
import com.finbourne.lusid.ApiException;
import com.finbourne.lusid.ApiResponse;
import com.finbourne.lusid.Configuration;
import com.finbourne.lusid.Pair;
import com.finbourne.lusid.ProgressRequestBody;
import com.finbourne.lusid.ProgressResponseBody;
import com.finbourne.lusid.extensions.ConfigurationOptions;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.finbourne.lusid.model.ComplianceRule;
import com.finbourne.lusid.model.ComplianceRuleUpsertRequest;
import com.finbourne.lusid.model.ComplianceRuleUpsertResponse;
import com.finbourne.lusid.model.ComplianceRunInfo;
import com.finbourne.lusid.model.DeletedEntityResponse;
import com.finbourne.lusid.model.LusidProblemDetails;
import com.finbourne.lusid.model.LusidValidationProblemDetails;
import java.time.OffsetDateTime;
import com.finbourne.lusid.model.ResourceListOfComplianceBreachedOrderInfo;
import com.finbourne.lusid.model.ResourceListOfComplianceRule;
import com.finbourne.lusid.model.ResourceListOfComplianceRuleResult;
import com.finbourne.lusid.model.ResourceListOfComplianceRunInfo;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class LegacyComplianceApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public LegacyComplianceApi() {
        this(Configuration.getDefaultApiClient());
    }

    public LegacyComplianceApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call deleteLegacyComplianceRuleCall(String scope, String code, final ApiCallback _callback) throws ApiException {
        return deleteLegacyComplianceRuleCall(scope, code,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call deleteLegacyComplianceRuleCall(String scope, String code, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/legacy/compliance/rules/{scope}/{code}"
            .replace("{" + "scope" + "}", localVarApiClient.escapeString(scope.toString()))
            .replace("{" + "code" + "}", localVarApiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteLegacyComplianceRuleValidateBeforeCall(String scope, String code, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling deleteLegacyComplianceRule(Async)");
        }

        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling deleteLegacyComplianceRule(Async)");
        }

        return deleteLegacyComplianceRuleCall(scope, code, _callback, opts);

    }


    private ApiResponse<DeletedEntityResponse> deleteLegacyComplianceRuleWithHttpInfo(String scope, String code) throws ApiException {
        okhttp3.Call localVarCall = deleteLegacyComplianceRuleValidateBeforeCall(scope, code, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<DeletedEntityResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<DeletedEntityResponse> deleteLegacyComplianceRuleWithHttpInfo(String scope, String code, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = deleteLegacyComplianceRuleValidateBeforeCall(scope, code, null, opts);
        Type localVarReturnType = new TypeToken<DeletedEntityResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteLegacyComplianceRuleAsync(String scope, String code, final ApiCallback<DeletedEntityResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteLegacyComplianceRuleValidateBeforeCall(scope, code, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<DeletedEntityResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call deleteLegacyComplianceRuleAsync(String scope, String code, final ApiCallback<DeletedEntityResponse> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = deleteLegacyComplianceRuleValidateBeforeCall(scope, code, _callback, opts);
        Type localVarReturnType = new TypeToken<DeletedEntityResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIdeleteLegacyComplianceRuleRequest {
        private final String scope;
        private final String code;

        private APIdeleteLegacyComplianceRuleRequest(String scope, String code) {
            this.scope = scope;
            this.code = code;
        }

        /**
         * Build call for deleteLegacyComplianceRule
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteLegacyComplianceRuleCall(scope, code, _callback);
        }

        /**
         * Execute deleteLegacyComplianceRule request
         * @return DeletedEntityResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public DeletedEntityResponse execute() throws ApiException {
            ApiResponse<DeletedEntityResponse> localVarResp = deleteLegacyComplianceRuleWithHttpInfo(scope, code);
            return localVarResp.getData();
        }

        /**
         * Execute deleteLegacyComplianceRule request. Use any specified configuration options to override any other configuration for this request only.
         * @return DeletedEntityResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public DeletedEntityResponse execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<DeletedEntityResponse> localVarResp = deleteLegacyComplianceRuleWithHttpInfo(scope, code, opts);
            return localVarResp.getData();
        }

        /**
         * Execute deleteLegacyComplianceRule request with HTTP info returned
         * @return ApiResponse&lt;DeletedEntityResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DeletedEntityResponse> executeWithHttpInfo() throws ApiException {
            return deleteLegacyComplianceRuleWithHttpInfo(scope, code);
        }

        /**
         * Execute deleteLegacyComplianceRule request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;DeletedEntityResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DeletedEntityResponse> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return deleteLegacyComplianceRuleWithHttpInfo(scope, code, opts);
        }

        /**
         * Execute deleteLegacyComplianceRule request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DeletedEntityResponse> _callback) throws ApiException {
            return deleteLegacyComplianceRuleAsync(scope, code, _callback);
        }

        /**
         * Execute deleteLegacyComplianceRule request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DeletedEntityResponse> _callback, ConfigurationOptions opts) throws ApiException {
            return deleteLegacyComplianceRuleAsync(scope, code, _callback, opts);
        }
    }

    /**
     * [EXPERIMENTAL] DeleteLegacyComplianceRule: Deletes a compliance rule.
     * Deletes the rule for all effective time.   The rule will remain viewable at previous as at times, and as part of the results of compliance runs, but it will no longer be considered in new compliance runs.   This cannot be undone.
     * @param scope The compliance rule scope. (required)
     * @param code The compliance rule code. (required)
     * @return APIdeleteLegacyComplianceRuleRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIdeleteLegacyComplianceRuleRequest deleteLegacyComplianceRule(String scope, String code) {
        return new APIdeleteLegacyComplianceRuleRequest(scope, code);
    }
    private okhttp3.Call getLegacyBreachedOrdersInfoCall(String runId, String orderScope, String orderCode, Integer limit, final ApiCallback _callback) throws ApiException {
        return getLegacyBreachedOrdersInfoCall(runId, orderScope, orderCode, limit,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call getLegacyBreachedOrdersInfoCall(String runId, String orderScope, String orderCode, Integer limit, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/legacy/compliance/runs/breached/{runId}"
            .replace("{" + "runId" + "}", localVarApiClient.escapeString(runId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (orderScope != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("orderScope", orderScope));
        }

        if (orderCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("orderCode", orderCode));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLegacyBreachedOrdersInfoValidateBeforeCall(String runId, String orderScope, String orderCode, Integer limit, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'runId' is set
        if (runId == null) {
            throw new ApiException("Missing the required parameter 'runId' when calling getLegacyBreachedOrdersInfo(Async)");
        }

        return getLegacyBreachedOrdersInfoCall(runId, orderScope, orderCode, limit, _callback, opts);

    }


    private ApiResponse<ResourceListOfComplianceBreachedOrderInfo> getLegacyBreachedOrdersInfoWithHttpInfo(String runId, String orderScope, String orderCode, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = getLegacyBreachedOrdersInfoValidateBeforeCall(runId, orderScope, orderCode, limit, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<ResourceListOfComplianceBreachedOrderInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<ResourceListOfComplianceBreachedOrderInfo> getLegacyBreachedOrdersInfoWithHttpInfo(String runId, String orderScope, String orderCode, Integer limit, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = getLegacyBreachedOrdersInfoValidateBeforeCall(runId, orderScope, orderCode, limit, null, opts);
        Type localVarReturnType = new TypeToken<ResourceListOfComplianceBreachedOrderInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getLegacyBreachedOrdersInfoAsync(String runId, String orderScope, String orderCode, Integer limit, final ApiCallback<ResourceListOfComplianceBreachedOrderInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = getLegacyBreachedOrdersInfoValidateBeforeCall(runId, orderScope, orderCode, limit, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<ResourceListOfComplianceBreachedOrderInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call getLegacyBreachedOrdersInfoAsync(String runId, String orderScope, String orderCode, Integer limit, final ApiCallback<ResourceListOfComplianceBreachedOrderInfo> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = getLegacyBreachedOrdersInfoValidateBeforeCall(runId, orderScope, orderCode, limit, _callback, opts);
        Type localVarReturnType = new TypeToken<ResourceListOfComplianceBreachedOrderInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetLegacyBreachedOrdersInfoRequest {
        private final String runId;
        private String orderScope;
        private String orderCode;
        private Integer limit;

        private APIgetLegacyBreachedOrdersInfoRequest(String runId) {
            this.runId = runId;
        }

        /**
         * Set orderScope
         * @param orderScope Optional. Find rules related to a specific order by providing an Order Scope/Code combination (optional)
         * @return APIgetLegacyBreachedOrdersInfoRequest
         */
        public APIgetLegacyBreachedOrdersInfoRequest orderScope(String orderScope) {
            this.orderScope = orderScope;
            return this;
        }

        /**
         * Set orderCode
         * @param orderCode Optional. Find rules related to a specific order by providing an Order Scope/Code combination (optional)
         * @return APIgetLegacyBreachedOrdersInfoRequest
         */
        public APIgetLegacyBreachedOrdersInfoRequest orderCode(String orderCode) {
            this.orderCode = orderCode;
            return this;
        }

        /**
         * Set limit
         * @param limit When paginating, limit the number of returned results to this many. (optional)
         * @return APIgetLegacyBreachedOrdersInfoRequest
         */
        public APIgetLegacyBreachedOrdersInfoRequest limit(Integer limit) {
            this.limit = limit;
            return this;
        }

        /**
         * Build call for getLegacyBreachedOrdersInfo
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The potentially breached orders and their rules from a specific compliance run </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getLegacyBreachedOrdersInfoCall(runId, orderScope, orderCode, limit, _callback);
        }

        /**
         * Execute getLegacyBreachedOrdersInfo request
         * @return ResourceListOfComplianceBreachedOrderInfo
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The potentially breached orders and their rules from a specific compliance run </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ResourceListOfComplianceBreachedOrderInfo execute() throws ApiException {
            ApiResponse<ResourceListOfComplianceBreachedOrderInfo> localVarResp = getLegacyBreachedOrdersInfoWithHttpInfo(runId, orderScope, orderCode, limit);
            return localVarResp.getData();
        }

        /**
         * Execute getLegacyBreachedOrdersInfo request. Use any specified configuration options to override any other configuration for this request only.
         * @return ResourceListOfComplianceBreachedOrderInfo
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The potentially breached orders and their rules from a specific compliance run </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ResourceListOfComplianceBreachedOrderInfo execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<ResourceListOfComplianceBreachedOrderInfo> localVarResp = getLegacyBreachedOrdersInfoWithHttpInfo(runId, orderScope, orderCode, limit, opts);
            return localVarResp.getData();
        }

        /**
         * Execute getLegacyBreachedOrdersInfo request with HTTP info returned
         * @return ApiResponse&lt;ResourceListOfComplianceBreachedOrderInfo&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The potentially breached orders and their rules from a specific compliance run </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ResourceListOfComplianceBreachedOrderInfo> executeWithHttpInfo() throws ApiException {
            return getLegacyBreachedOrdersInfoWithHttpInfo(runId, orderScope, orderCode, limit);
        }

        /**
         * Execute getLegacyBreachedOrdersInfo request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;ResourceListOfComplianceBreachedOrderInfo&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The potentially breached orders and their rules from a specific compliance run </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ResourceListOfComplianceBreachedOrderInfo> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return getLegacyBreachedOrdersInfoWithHttpInfo(runId, orderScope, orderCode, limit, opts);
        }

        /**
         * Execute getLegacyBreachedOrdersInfo request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The potentially breached orders and their rules from a specific compliance run </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ResourceListOfComplianceBreachedOrderInfo> _callback) throws ApiException {
            return getLegacyBreachedOrdersInfoAsync(runId, orderScope, orderCode, limit, _callback);
        }

        /**
         * Execute getLegacyBreachedOrdersInfo request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The potentially breached orders and their rules from a specific compliance run </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ResourceListOfComplianceBreachedOrderInfo> _callback, ConfigurationOptions opts) throws ApiException {
            return getLegacyBreachedOrdersInfoAsync(runId, orderScope, orderCode, limit, _callback, opts);
        }
    }

    /**
     * [EXPERIMENTAL] GetLegacyBreachedOrdersInfo: Get the Ids of Breached orders in a given compliance run and the corresponding list of rules that could have caused it.
     * Use this endpoint to get a list or breached orders and the set of rules that may have caused the breach.
     * @param runId The RunId that the results should be checked for (required)
     * @return APIgetLegacyBreachedOrdersInfoRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The potentially breached orders and their rules from a specific compliance run </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIgetLegacyBreachedOrdersInfoRequest getLegacyBreachedOrdersInfo(String runId) {
        return new APIgetLegacyBreachedOrdersInfoRequest(runId);
    }
    private okhttp3.Call getLegacyComplianceRuleCall(String scope, String code, String effectiveAt, OffsetDateTime asAt, final ApiCallback _callback) throws ApiException {
        return getLegacyComplianceRuleCall(scope, code, effectiveAt, asAt,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call getLegacyComplianceRuleCall(String scope, String code, String effectiveAt, OffsetDateTime asAt, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/legacy/compliance/rules/{scope}/{code}"
            .replace("{" + "scope" + "}", localVarApiClient.escapeString(scope.toString()))
            .replace("{" + "code" + "}", localVarApiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (effectiveAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("effectiveAt", effectiveAt));
        }

        if (asAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asAt", asAt));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLegacyComplianceRuleValidateBeforeCall(String scope, String code, String effectiveAt, OffsetDateTime asAt, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling getLegacyComplianceRule(Async)");
        }

        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling getLegacyComplianceRule(Async)");
        }

        return getLegacyComplianceRuleCall(scope, code, effectiveAt, asAt, _callback, opts);

    }


    private ApiResponse<ComplianceRule> getLegacyComplianceRuleWithHttpInfo(String scope, String code, String effectiveAt, OffsetDateTime asAt) throws ApiException {
        okhttp3.Call localVarCall = getLegacyComplianceRuleValidateBeforeCall(scope, code, effectiveAt, asAt, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<ComplianceRule>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<ComplianceRule> getLegacyComplianceRuleWithHttpInfo(String scope, String code, String effectiveAt, OffsetDateTime asAt, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = getLegacyComplianceRuleValidateBeforeCall(scope, code, effectiveAt, asAt, null, opts);
        Type localVarReturnType = new TypeToken<ComplianceRule>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getLegacyComplianceRuleAsync(String scope, String code, String effectiveAt, OffsetDateTime asAt, final ApiCallback<ComplianceRule> _callback) throws ApiException {

        okhttp3.Call localVarCall = getLegacyComplianceRuleValidateBeforeCall(scope, code, effectiveAt, asAt, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<ComplianceRule>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call getLegacyComplianceRuleAsync(String scope, String code, String effectiveAt, OffsetDateTime asAt, final ApiCallback<ComplianceRule> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = getLegacyComplianceRuleValidateBeforeCall(scope, code, effectiveAt, asAt, _callback, opts);
        Type localVarReturnType = new TypeToken<ComplianceRule>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetLegacyComplianceRuleRequest {
        private final String scope;
        private final String code;
        private String effectiveAt;
        private OffsetDateTime asAt;

        private APIgetLegacyComplianceRuleRequest(String scope, String code) {
            this.scope = scope;
            this.code = code;
        }

        /**
         * Set effectiveAt
         * @param effectiveAt The effective datetime or cut label at which to retrieve the rule definition. Defaults to the current LUSID system datetime if not specified. (optional)
         * @return APIgetLegacyComplianceRuleRequest
         */
        public APIgetLegacyComplianceRuleRequest effectiveAt(String effectiveAt) {
            this.effectiveAt = effectiveAt;
            return this;
        }

        /**
         * Set asAt
         * @param asAt The asAt datetime at which to retrieve the rule definition. Defaults to returning the latest version if not specified. (optional)
         * @return APIgetLegacyComplianceRuleRequest
         */
        public APIgetLegacyComplianceRuleRequest asAt(OffsetDateTime asAt) {
            this.asAt = asAt;
            return this;
        }

        /**
         * Build call for getLegacyComplianceRule
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Details of one compliance rule. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getLegacyComplianceRuleCall(scope, code, effectiveAt, asAt, _callback);
        }

        /**
         * Execute getLegacyComplianceRule request
         * @return ComplianceRule
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Details of one compliance rule. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ComplianceRule execute() throws ApiException {
            ApiResponse<ComplianceRule> localVarResp = getLegacyComplianceRuleWithHttpInfo(scope, code, effectiveAt, asAt);
            return localVarResp.getData();
        }

        /**
         * Execute getLegacyComplianceRule request. Use any specified configuration options to override any other configuration for this request only.
         * @return ComplianceRule
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Details of one compliance rule. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ComplianceRule execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<ComplianceRule> localVarResp = getLegacyComplianceRuleWithHttpInfo(scope, code, effectiveAt, asAt, opts);
            return localVarResp.getData();
        }

        /**
         * Execute getLegacyComplianceRule request with HTTP info returned
         * @return ApiResponse&lt;ComplianceRule&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Details of one compliance rule. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ComplianceRule> executeWithHttpInfo() throws ApiException {
            return getLegacyComplianceRuleWithHttpInfo(scope, code, effectiveAt, asAt);
        }

        /**
         * Execute getLegacyComplianceRule request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;ComplianceRule&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Details of one compliance rule. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ComplianceRule> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return getLegacyComplianceRuleWithHttpInfo(scope, code, effectiveAt, asAt, opts);
        }

        /**
         * Execute getLegacyComplianceRule request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Details of one compliance rule. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ComplianceRule> _callback) throws ApiException {
            return getLegacyComplianceRuleAsync(scope, code, effectiveAt, asAt, _callback);
        }

        /**
         * Execute getLegacyComplianceRule request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Details of one compliance rule. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ComplianceRule> _callback, ConfigurationOptions opts) throws ApiException {
            return getLegacyComplianceRuleAsync(scope, code, effectiveAt, asAt, _callback, opts);
        }
    }

    /**
     * [EXPERIMENTAL] GetLegacyComplianceRule: Retrieve the definition of single compliance rule.
     * Retrieves the compliance rule definition at the given effective and as at times.
     * @param scope The compliance rule scope. (required)
     * @param code The compliance rule code. (required)
     * @return APIgetLegacyComplianceRuleRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Details of one compliance rule. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIgetLegacyComplianceRuleRequest getLegacyComplianceRule(String scope, String code) {
        return new APIgetLegacyComplianceRuleRequest(scope, code);
    }
    private okhttp3.Call getLegacyComplianceRunResultsCall(String runId, String page, Integer limit, String filter, final ApiCallback _callback) throws ApiException {
        return getLegacyComplianceRunResultsCall(runId, page, limit, filter,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call getLegacyComplianceRunResultsCall(String runId, String page, Integer limit, String filter, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/legacy/compliance/runs/{runId}"
            .replace("{" + "runId" + "}", localVarApiClient.escapeString(runId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLegacyComplianceRunResultsValidateBeforeCall(String runId, String page, Integer limit, String filter, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'runId' is set
        if (runId == null) {
            throw new ApiException("Missing the required parameter 'runId' when calling getLegacyComplianceRunResults(Async)");
        }

        return getLegacyComplianceRunResultsCall(runId, page, limit, filter, _callback, opts);

    }


    private ApiResponse<ResourceListOfComplianceRuleResult> getLegacyComplianceRunResultsWithHttpInfo(String runId, String page, Integer limit, String filter) throws ApiException {
        okhttp3.Call localVarCall = getLegacyComplianceRunResultsValidateBeforeCall(runId, page, limit, filter, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<ResourceListOfComplianceRuleResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<ResourceListOfComplianceRuleResult> getLegacyComplianceRunResultsWithHttpInfo(String runId, String page, Integer limit, String filter, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = getLegacyComplianceRunResultsValidateBeforeCall(runId, page, limit, filter, null, opts);
        Type localVarReturnType = new TypeToken<ResourceListOfComplianceRuleResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getLegacyComplianceRunResultsAsync(String runId, String page, Integer limit, String filter, final ApiCallback<ResourceListOfComplianceRuleResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = getLegacyComplianceRunResultsValidateBeforeCall(runId, page, limit, filter, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<ResourceListOfComplianceRuleResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call getLegacyComplianceRunResultsAsync(String runId, String page, Integer limit, String filter, final ApiCallback<ResourceListOfComplianceRuleResult> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = getLegacyComplianceRunResultsValidateBeforeCall(runId, page, limit, filter, _callback, opts);
        Type localVarReturnType = new TypeToken<ResourceListOfComplianceRuleResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetLegacyComplianceRunResultsRequest {
        private final String runId;
        private String page;
        private Integer limit;
        private String filter;

        private APIgetLegacyComplianceRunResultsRequest(String runId) {
            this.runId = runId;
        }

        /**
         * Set page
         * @param page The pagination token to use to continue listing compliance rule results from a previous call to list compliance rule result.  This value is returned from the previous call. If a pagination token is provided the sortBy, filter, and asAt fields  must not have changed since the original request. (optional)
         * @return APIgetLegacyComplianceRunResultsRequest
         */
        public APIgetLegacyComplianceRunResultsRequest page(String page) {
            this.page = page;
            return this;
        }

        /**
         * Set limit
         * @param limit When paginating, limit the number of returned results to this many. (optional)
         * @return APIgetLegacyComplianceRunResultsRequest
         */
        public APIgetLegacyComplianceRunResultsRequest limit(Integer limit) {
            this.limit = limit;
            return this;
        }

        /**
         * Set filter
         * @param filter Expression to filter the result set. Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid. (optional)
         * @return APIgetLegacyComplianceRunResultsRequest
         */
        public APIgetLegacyComplianceRunResultsRequest filter(String filter) {
            this.filter = filter;
            return this;
        }

        /**
         * Build call for getLegacyComplianceRunResults
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The rule results of a specific compliance run </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getLegacyComplianceRunResultsCall(runId, page, limit, filter, _callback);
        }

        /**
         * Execute getLegacyComplianceRunResults request
         * @return ResourceListOfComplianceRuleResult
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The rule results of a specific compliance run </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ResourceListOfComplianceRuleResult execute() throws ApiException {
            ApiResponse<ResourceListOfComplianceRuleResult> localVarResp = getLegacyComplianceRunResultsWithHttpInfo(runId, page, limit, filter);
            return localVarResp.getData();
        }

        /**
         * Execute getLegacyComplianceRunResults request. Use any specified configuration options to override any other configuration for this request only.
         * @return ResourceListOfComplianceRuleResult
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The rule results of a specific compliance run </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ResourceListOfComplianceRuleResult execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<ResourceListOfComplianceRuleResult> localVarResp = getLegacyComplianceRunResultsWithHttpInfo(runId, page, limit, filter, opts);
            return localVarResp.getData();
        }

        /**
         * Execute getLegacyComplianceRunResults request with HTTP info returned
         * @return ApiResponse&lt;ResourceListOfComplianceRuleResult&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The rule results of a specific compliance run </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ResourceListOfComplianceRuleResult> executeWithHttpInfo() throws ApiException {
            return getLegacyComplianceRunResultsWithHttpInfo(runId, page, limit, filter);
        }

        /**
         * Execute getLegacyComplianceRunResults request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;ResourceListOfComplianceRuleResult&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The rule results of a specific compliance run </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ResourceListOfComplianceRuleResult> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return getLegacyComplianceRunResultsWithHttpInfo(runId, page, limit, filter, opts);
        }

        /**
         * Execute getLegacyComplianceRunResults request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The rule results of a specific compliance run </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ResourceListOfComplianceRuleResult> _callback) throws ApiException {
            return getLegacyComplianceRunResultsAsync(runId, page, limit, filter, _callback);
        }

        /**
         * Execute getLegacyComplianceRunResults request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The rule results of a specific compliance run </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ResourceListOfComplianceRuleResult> _callback, ConfigurationOptions opts) throws ApiException {
            return getLegacyComplianceRunResultsAsync(runId, page, limit, filter, _callback, opts);
        }
    }

    /**
     * [EXPERIMENTAL] GetLegacyComplianceRunResults: Get the details of a single compliance run.
     * Use this endpoint to fetch the detail associated with a specific compliance run, including a breakdown of the passing state of each rule, portfolio combination.
     * @param runId The unique identifier of the compliance run requested. (required)
     * @return APIgetLegacyComplianceRunResultsRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The rule results of a specific compliance run </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIgetLegacyComplianceRunResultsRequest getLegacyComplianceRunResults(String runId) {
        return new APIgetLegacyComplianceRunResultsRequest(runId);
    }
    private okhttp3.Call listLegacyComplianceRulesCall(String effectiveAt, OffsetDateTime asAt, String page, Integer limit, String filter, final ApiCallback _callback) throws ApiException {
        return listLegacyComplianceRulesCall(effectiveAt, asAt, page, limit, filter,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call listLegacyComplianceRulesCall(String effectiveAt, OffsetDateTime asAt, String page, Integer limit, String filter, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/legacy/compliance/rules";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (effectiveAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("effectiveAt", effectiveAt));
        }

        if (asAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asAt", asAt));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listLegacyComplianceRulesValidateBeforeCall(String effectiveAt, OffsetDateTime asAt, String page, Integer limit, String filter, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        return listLegacyComplianceRulesCall(effectiveAt, asAt, page, limit, filter, _callback, opts);

    }


    private ApiResponse<ResourceListOfComplianceRule> listLegacyComplianceRulesWithHttpInfo(String effectiveAt, OffsetDateTime asAt, String page, Integer limit, String filter) throws ApiException {
        okhttp3.Call localVarCall = listLegacyComplianceRulesValidateBeforeCall(effectiveAt, asAt, page, limit, filter, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<ResourceListOfComplianceRule>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<ResourceListOfComplianceRule> listLegacyComplianceRulesWithHttpInfo(String effectiveAt, OffsetDateTime asAt, String page, Integer limit, String filter, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = listLegacyComplianceRulesValidateBeforeCall(effectiveAt, asAt, page, limit, filter, null, opts);
        Type localVarReturnType = new TypeToken<ResourceListOfComplianceRule>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listLegacyComplianceRulesAsync(String effectiveAt, OffsetDateTime asAt, String page, Integer limit, String filter, final ApiCallback<ResourceListOfComplianceRule> _callback) throws ApiException {

        okhttp3.Call localVarCall = listLegacyComplianceRulesValidateBeforeCall(effectiveAt, asAt, page, limit, filter, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<ResourceListOfComplianceRule>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call listLegacyComplianceRulesAsync(String effectiveAt, OffsetDateTime asAt, String page, Integer limit, String filter, final ApiCallback<ResourceListOfComplianceRule> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = listLegacyComplianceRulesValidateBeforeCall(effectiveAt, asAt, page, limit, filter, _callback, opts);
        Type localVarReturnType = new TypeToken<ResourceListOfComplianceRule>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIlistLegacyComplianceRulesRequest {
        private String effectiveAt;
        private OffsetDateTime asAt;
        private String page;
        private Integer limit;
        private String filter;

        private APIlistLegacyComplianceRulesRequest() {
        }

        /**
         * Set effectiveAt
         * @param effectiveAt The effective datetime or cut label at which to retrieve the rule definitions. Defaults to the current LUSID system datetime if not specified. (optional)
         * @return APIlistLegacyComplianceRulesRequest
         */
        public APIlistLegacyComplianceRulesRequest effectiveAt(String effectiveAt) {
            this.effectiveAt = effectiveAt;
            return this;
        }

        /**
         * Set asAt
         * @param asAt The asAt datetime at which to retrieve the rule definitions. Defaults to returning the latest version if not specified. (optional)
         * @return APIlistLegacyComplianceRulesRequest
         */
        public APIlistLegacyComplianceRulesRequest asAt(OffsetDateTime asAt) {
            this.asAt = asAt;
            return this;
        }

        /**
         * Set page
         * @param page The pagination token to use to continue listing entities; this value is returned from the previous call. If a pagination token is provided, the filter, effectiveAt and asAt fields must not have changed since the original request. (optional)
         * @return APIlistLegacyComplianceRulesRequest
         */
        public APIlistLegacyComplianceRulesRequest page(String page) {
            this.page = page;
            return this;
        }

        /**
         * Set limit
         * @param limit When paginating, limit the results to this number. Defaults to 100 if not specified. (optional)
         * @return APIlistLegacyComplianceRulesRequest
         */
        public APIlistLegacyComplianceRulesRequest limit(Integer limit) {
            this.limit = limit;
            return this;
        }

        /**
         * Set filter
         * @param filter Expression to filter the results. (optional)
         * @return APIlistLegacyComplianceRulesRequest
         */
        public APIlistLegacyComplianceRulesRequest filter(String filter) {
            this.filter = filter;
            return this;
        }

        /**
         * Build call for listLegacyComplianceRules
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A filtered list of compliance rules available. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listLegacyComplianceRulesCall(effectiveAt, asAt, page, limit, filter, _callback);
        }

        /**
         * Execute listLegacyComplianceRules request
         * @return ResourceListOfComplianceRule
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A filtered list of compliance rules available. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ResourceListOfComplianceRule execute() throws ApiException {
            ApiResponse<ResourceListOfComplianceRule> localVarResp = listLegacyComplianceRulesWithHttpInfo(effectiveAt, asAt, page, limit, filter);
            return localVarResp.getData();
        }

        /**
         * Execute listLegacyComplianceRules request. Use any specified configuration options to override any other configuration for this request only.
         * @return ResourceListOfComplianceRule
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A filtered list of compliance rules available. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ResourceListOfComplianceRule execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<ResourceListOfComplianceRule> localVarResp = listLegacyComplianceRulesWithHttpInfo(effectiveAt, asAt, page, limit, filter, opts);
            return localVarResp.getData();
        }

        /**
         * Execute listLegacyComplianceRules request with HTTP info returned
         * @return ApiResponse&lt;ResourceListOfComplianceRule&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A filtered list of compliance rules available. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ResourceListOfComplianceRule> executeWithHttpInfo() throws ApiException {
            return listLegacyComplianceRulesWithHttpInfo(effectiveAt, asAt, page, limit, filter);
        }

        /**
         * Execute listLegacyComplianceRules request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;ResourceListOfComplianceRule&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A filtered list of compliance rules available. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ResourceListOfComplianceRule> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return listLegacyComplianceRulesWithHttpInfo(effectiveAt, asAt, page, limit, filter, opts);
        }

        /**
         * Execute listLegacyComplianceRules request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A filtered list of compliance rules available. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ResourceListOfComplianceRule> _callback) throws ApiException {
            return listLegacyComplianceRulesAsync(effectiveAt, asAt, page, limit, filter, _callback);
        }

        /**
         * Execute listLegacyComplianceRules request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A filtered list of compliance rules available. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ResourceListOfComplianceRule> _callback, ConfigurationOptions opts) throws ApiException {
            return listLegacyComplianceRulesAsync(effectiveAt, asAt, page, limit, filter, _callback, opts);
        }
    }

    /**
     * [EXPERIMENTAL] ListLegacyComplianceRules: List compliance rules, with optional filtering.
     * For more information about filtering results, see https://support.lusid.com/knowledgebase/article/KA-01914.
     * @return APIlistLegacyComplianceRulesRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A filtered list of compliance rules available. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIlistLegacyComplianceRulesRequest listLegacyComplianceRules() {
        return new APIlistLegacyComplianceRulesRequest();
    }
    private okhttp3.Call listLegacyComplianceRunInfoCall(OffsetDateTime asAt, String page, Integer limit, String filter, final ApiCallback _callback) throws ApiException {
        return listLegacyComplianceRunInfoCall(asAt, page, limit, filter,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call listLegacyComplianceRunInfoCall(OffsetDateTime asAt, String page, Integer limit, String filter, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/legacy/compliance/runs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (asAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asAt", asAt));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listLegacyComplianceRunInfoValidateBeforeCall(OffsetDateTime asAt, String page, Integer limit, String filter, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        return listLegacyComplianceRunInfoCall(asAt, page, limit, filter, _callback, opts);

    }


    private ApiResponse<ResourceListOfComplianceRunInfo> listLegacyComplianceRunInfoWithHttpInfo(OffsetDateTime asAt, String page, Integer limit, String filter) throws ApiException {
        okhttp3.Call localVarCall = listLegacyComplianceRunInfoValidateBeforeCall(asAt, page, limit, filter, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<ResourceListOfComplianceRunInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<ResourceListOfComplianceRunInfo> listLegacyComplianceRunInfoWithHttpInfo(OffsetDateTime asAt, String page, Integer limit, String filter, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = listLegacyComplianceRunInfoValidateBeforeCall(asAt, page, limit, filter, null, opts);
        Type localVarReturnType = new TypeToken<ResourceListOfComplianceRunInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listLegacyComplianceRunInfoAsync(OffsetDateTime asAt, String page, Integer limit, String filter, final ApiCallback<ResourceListOfComplianceRunInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = listLegacyComplianceRunInfoValidateBeforeCall(asAt, page, limit, filter, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<ResourceListOfComplianceRunInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call listLegacyComplianceRunInfoAsync(OffsetDateTime asAt, String page, Integer limit, String filter, final ApiCallback<ResourceListOfComplianceRunInfo> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = listLegacyComplianceRunInfoValidateBeforeCall(asAt, page, limit, filter, _callback, opts);
        Type localVarReturnType = new TypeToken<ResourceListOfComplianceRunInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIlistLegacyComplianceRunInfoRequest {
        private OffsetDateTime asAt;
        private String page;
        private Integer limit;
        private String filter;

        private APIlistLegacyComplianceRunInfoRequest() {
        }

        /**
         * Set asAt
         * @param asAt Optional. The time at which to get results from. Default : latest (optional)
         * @return APIlistLegacyComplianceRunInfoRequest
         */
        public APIlistLegacyComplianceRunInfoRequest asAt(OffsetDateTime asAt) {
            this.asAt = asAt;
            return this;
        }

        /**
         * Set page
         * @param page The pagination token to use to continue listing compliance runs from a previous call to list compliance runs.  This value is returned from the previous call. If a pagination token is provided the sortBy, filter, and asAt fields  must not have changed since the original request. (optional)
         * @return APIlistLegacyComplianceRunInfoRequest
         */
        public APIlistLegacyComplianceRunInfoRequest page(String page) {
            this.page = page;
            return this;
        }

        /**
         * Set limit
         * @param limit When paginating, limit the number of returned results to this many. (optional)
         * @return APIlistLegacyComplianceRunInfoRequest
         */
        public APIlistLegacyComplianceRunInfoRequest limit(Integer limit) {
            this.limit = limit;
            return this;
        }

        /**
         * Set filter
         * @param filter Expression to filter the result set. Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid. (optional)
         * @return APIlistLegacyComplianceRunInfoRequest
         */
        public APIlistLegacyComplianceRunInfoRequest filter(String filter) {
            this.filter = filter;
            return this;
        }

        /**
         * Build call for listLegacyComplianceRunInfo
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The List of IDs and information for all compliance runs completed </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listLegacyComplianceRunInfoCall(asAt, page, limit, filter, _callback);
        }

        /**
         * Execute listLegacyComplianceRunInfo request
         * @return ResourceListOfComplianceRunInfo
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The List of IDs and information for all compliance runs completed </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ResourceListOfComplianceRunInfo execute() throws ApiException {
            ApiResponse<ResourceListOfComplianceRunInfo> localVarResp = listLegacyComplianceRunInfoWithHttpInfo(asAt, page, limit, filter);
            return localVarResp.getData();
        }

        /**
         * Execute listLegacyComplianceRunInfo request. Use any specified configuration options to override any other configuration for this request only.
         * @return ResourceListOfComplianceRunInfo
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The List of IDs and information for all compliance runs completed </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ResourceListOfComplianceRunInfo execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<ResourceListOfComplianceRunInfo> localVarResp = listLegacyComplianceRunInfoWithHttpInfo(asAt, page, limit, filter, opts);
            return localVarResp.getData();
        }

        /**
         * Execute listLegacyComplianceRunInfo request with HTTP info returned
         * @return ApiResponse&lt;ResourceListOfComplianceRunInfo&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The List of IDs and information for all compliance runs completed </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ResourceListOfComplianceRunInfo> executeWithHttpInfo() throws ApiException {
            return listLegacyComplianceRunInfoWithHttpInfo(asAt, page, limit, filter);
        }

        /**
         * Execute listLegacyComplianceRunInfo request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;ResourceListOfComplianceRunInfo&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The List of IDs and information for all compliance runs completed </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ResourceListOfComplianceRunInfo> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return listLegacyComplianceRunInfoWithHttpInfo(asAt, page, limit, filter, opts);
        }

        /**
         * Execute listLegacyComplianceRunInfo request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The List of IDs and information for all compliance runs completed </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ResourceListOfComplianceRunInfo> _callback) throws ApiException {
            return listLegacyComplianceRunInfoAsync(asAt, page, limit, filter, _callback);
        }

        /**
         * Execute listLegacyComplianceRunInfo request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The List of IDs and information for all compliance runs completed </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ResourceListOfComplianceRunInfo> _callback, ConfigurationOptions opts) throws ApiException {
            return listLegacyComplianceRunInfoAsync(asAt, page, limit, filter, _callback, opts);
        }
    }

    /**
     * [EXPERIMENTAL] ListLegacyComplianceRunInfo: List historical compliance run ids.
     * Use this endpoint to fetch a list of all historical compliance runs.
     * @return APIlistLegacyComplianceRunInfoRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The List of IDs and information for all compliance runs completed </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIlistLegacyComplianceRunInfoRequest listLegacyComplianceRunInfo() {
        return new APIlistLegacyComplianceRunInfoRequest();
    }
    private okhttp3.Call runLegacyComplianceCall(Boolean isPreTrade, String recipeIdScope, String recipeIdCode, Boolean byTaxlots, final ApiCallback _callback) throws ApiException {
        return runLegacyComplianceCall(isPreTrade, recipeIdScope, recipeIdCode, byTaxlots,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call runLegacyComplianceCall(Boolean isPreTrade, String recipeIdScope, String recipeIdCode, Boolean byTaxlots, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/legacy/compliance/runs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (isPreTrade != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isPreTrade", isPreTrade));
        }

        if (recipeIdScope != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("recipeIdScope", recipeIdScope));
        }

        if (recipeIdCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("recipeIdCode", recipeIdCode));
        }

        if (byTaxlots != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("byTaxlots", byTaxlots));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call runLegacyComplianceValidateBeforeCall(Boolean isPreTrade, String recipeIdScope, String recipeIdCode, Boolean byTaxlots, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'isPreTrade' is set
        if (isPreTrade == null) {
            throw new ApiException("Missing the required parameter 'isPreTrade' when calling runLegacyCompliance(Async)");
        }

        // verify the required parameter 'recipeIdScope' is set
        if (recipeIdScope == null) {
            throw new ApiException("Missing the required parameter 'recipeIdScope' when calling runLegacyCompliance(Async)");
        }

        return runLegacyComplianceCall(isPreTrade, recipeIdScope, recipeIdCode, byTaxlots, _callback, opts);

    }


    private ApiResponse<ComplianceRunInfo> runLegacyComplianceWithHttpInfo(Boolean isPreTrade, String recipeIdScope, String recipeIdCode, Boolean byTaxlots) throws ApiException {
        okhttp3.Call localVarCall = runLegacyComplianceValidateBeforeCall(isPreTrade, recipeIdScope, recipeIdCode, byTaxlots, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<ComplianceRunInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<ComplianceRunInfo> runLegacyComplianceWithHttpInfo(Boolean isPreTrade, String recipeIdScope, String recipeIdCode, Boolean byTaxlots, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = runLegacyComplianceValidateBeforeCall(isPreTrade, recipeIdScope, recipeIdCode, byTaxlots, null, opts);
        Type localVarReturnType = new TypeToken<ComplianceRunInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call runLegacyComplianceAsync(Boolean isPreTrade, String recipeIdScope, String recipeIdCode, Boolean byTaxlots, final ApiCallback<ComplianceRunInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = runLegacyComplianceValidateBeforeCall(isPreTrade, recipeIdScope, recipeIdCode, byTaxlots, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<ComplianceRunInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call runLegacyComplianceAsync(Boolean isPreTrade, String recipeIdScope, String recipeIdCode, Boolean byTaxlots, final ApiCallback<ComplianceRunInfo> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = runLegacyComplianceValidateBeforeCall(isPreTrade, recipeIdScope, recipeIdCode, byTaxlots, _callback, opts);
        Type localVarReturnType = new TypeToken<ComplianceRunInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIrunLegacyComplianceRequest {
        private final Boolean isPreTrade;
        private final String recipeIdScope;
        private String recipeIdCode;
        private Boolean byTaxlots;

        private APIrunLegacyComplianceRequest(Boolean isPreTrade, String recipeIdScope) {
            this.isPreTrade = isPreTrade;
            this.recipeIdScope = recipeIdScope;
        }

        /**
         * Set recipeIdCode
         * @param recipeIdCode Optional: The code of the recipe to be used. If left blank, the default recipe will be used. (optional)
         * @return APIrunLegacyComplianceRequest
         */
        public APIrunLegacyComplianceRequest recipeIdCode(String recipeIdCode) {
            this.recipeIdCode = recipeIdCode;
            return this;
        }

        /**
         * Set byTaxlots
         * @param byTaxlots Optional. (optional)
         * @return APIrunLegacyComplianceRequest
         */
        public APIrunLegacyComplianceRequest byTaxlots(Boolean byTaxlots) {
            this.byTaxlots = byTaxlots;
            return this;
        }

        /**
         * Build call for runLegacyCompliance
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The identifying information of a compliance run </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return runLegacyComplianceCall(isPreTrade, recipeIdScope, recipeIdCode, byTaxlots, _callback);
        }

        /**
         * Execute runLegacyCompliance request
         * @return ComplianceRunInfo
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The identifying information of a compliance run </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ComplianceRunInfo execute() throws ApiException {
            ApiResponse<ComplianceRunInfo> localVarResp = runLegacyComplianceWithHttpInfo(isPreTrade, recipeIdScope, recipeIdCode, byTaxlots);
            return localVarResp.getData();
        }

        /**
         * Execute runLegacyCompliance request. Use any specified configuration options to override any other configuration for this request only.
         * @return ComplianceRunInfo
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The identifying information of a compliance run </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ComplianceRunInfo execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<ComplianceRunInfo> localVarResp = runLegacyComplianceWithHttpInfo(isPreTrade, recipeIdScope, recipeIdCode, byTaxlots, opts);
            return localVarResp.getData();
        }

        /**
         * Execute runLegacyCompliance request with HTTP info returned
         * @return ApiResponse&lt;ComplianceRunInfo&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The identifying information of a compliance run </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ComplianceRunInfo> executeWithHttpInfo() throws ApiException {
            return runLegacyComplianceWithHttpInfo(isPreTrade, recipeIdScope, recipeIdCode, byTaxlots);
        }

        /**
         * Execute runLegacyCompliance request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;ComplianceRunInfo&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The identifying information of a compliance run </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ComplianceRunInfo> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return runLegacyComplianceWithHttpInfo(isPreTrade, recipeIdScope, recipeIdCode, byTaxlots, opts);
        }

        /**
         * Execute runLegacyCompliance request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The identifying information of a compliance run </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ComplianceRunInfo> _callback) throws ApiException {
            return runLegacyComplianceAsync(isPreTrade, recipeIdScope, recipeIdCode, byTaxlots, _callback);
        }

        /**
         * Execute runLegacyCompliance request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The identifying information of a compliance run </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ComplianceRunInfo> _callback, ConfigurationOptions opts) throws ApiException {
            return runLegacyComplianceAsync(isPreTrade, recipeIdScope, recipeIdCode, byTaxlots, _callback, opts);
        }
    }

    /**
     * [EXPERIMENTAL] RunLegacyCompliance: Kick off the compliance check process
     * Use this endpoint to fetch the start a compliance run, based on a pre-set mapping file.
     * @param isPreTrade Required: Boolean flag indicating if a run should be PreTrade (Including orders). For post-trade only, set to false (required)
     * @param recipeIdScope Required: the scope of the recipe to be used (required)
     * @return APIrunLegacyComplianceRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The identifying information of a compliance run </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIrunLegacyComplianceRequest runLegacyCompliance(Boolean isPreTrade, String recipeIdScope) {
        return new APIrunLegacyComplianceRequest(isPreTrade, recipeIdScope);
    }
    private okhttp3.Call upsertLegacyComplianceRulesCall(Map<String, ComplianceRuleUpsertRequest> requestBody, String effectiveAt, final ApiCallback _callback) throws ApiException {
        return upsertLegacyComplianceRulesCall(requestBody, effectiveAt,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call upsertLegacyComplianceRulesCall(Map<String, ComplianceRuleUpsertRequest> requestBody, String effectiveAt, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/api/legacy/compliance/rules";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (effectiveAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("effectiveAt", effectiveAt));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call upsertLegacyComplianceRulesValidateBeforeCall(Map<String, ComplianceRuleUpsertRequest> requestBody, String effectiveAt, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'requestBody' is set
        if (requestBody == null) {
            throw new ApiException("Missing the required parameter 'requestBody' when calling upsertLegacyComplianceRules(Async)");
        }

        return upsertLegacyComplianceRulesCall(requestBody, effectiveAt, _callback, opts);

    }


    private ApiResponse<ComplianceRuleUpsertResponse> upsertLegacyComplianceRulesWithHttpInfo(Map<String, ComplianceRuleUpsertRequest> requestBody, String effectiveAt) throws ApiException {
        okhttp3.Call localVarCall = upsertLegacyComplianceRulesValidateBeforeCall(requestBody, effectiveAt, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<ComplianceRuleUpsertResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<ComplianceRuleUpsertResponse> upsertLegacyComplianceRulesWithHttpInfo(Map<String, ComplianceRuleUpsertRequest> requestBody, String effectiveAt, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = upsertLegacyComplianceRulesValidateBeforeCall(requestBody, effectiveAt, null, opts);
        Type localVarReturnType = new TypeToken<ComplianceRuleUpsertResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call upsertLegacyComplianceRulesAsync(Map<String, ComplianceRuleUpsertRequest> requestBody, String effectiveAt, final ApiCallback<ComplianceRuleUpsertResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = upsertLegacyComplianceRulesValidateBeforeCall(requestBody, effectiveAt, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<ComplianceRuleUpsertResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call upsertLegacyComplianceRulesAsync(Map<String, ComplianceRuleUpsertRequest> requestBody, String effectiveAt, final ApiCallback<ComplianceRuleUpsertResponse> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = upsertLegacyComplianceRulesValidateBeforeCall(requestBody, effectiveAt, _callback, opts);
        Type localVarReturnType = new TypeToken<ComplianceRuleUpsertResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIupsertLegacyComplianceRulesRequest {
        private final Map<String, ComplianceRuleUpsertRequest> requestBody;
        private String effectiveAt;

        private APIupsertLegacyComplianceRulesRequest(Map<String, ComplianceRuleUpsertRequest> requestBody) {
            this.requestBody = requestBody;
        }

        /**
         * Set effectiveAt
         * @param effectiveAt The effective datetime or cut label at which the rule will take effect. Defaults to the current LUSID system datetime if not specified. In the case of an update, the changes will take place from this effective time until the next effective time that the rule as been upserted at. For example, consider a rule that already exists, and has previously had an update applied so that the definition will change on the first day of the coming month. An upsert effective from the current day will only change the definition until the first day of the coming month. An additional upsert at the same time (first day of the month) is required if the newly-updated definition is to supersede the future definition. (optional)
         * @return APIupsertLegacyComplianceRulesRequest
         */
        public APIupsertLegacyComplianceRulesRequest effectiveAt(String effectiveAt) {
            this.effectiveAt = effectiveAt;
            return this;
        }

        /**
         * Build call for upsertLegacyComplianceRules
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Upsert compliance rules. New compliance rules must have an empty code field. Where a codeis given, this rule must already exist and will be updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return upsertLegacyComplianceRulesCall(requestBody, effectiveAt, _callback);
        }

        /**
         * Execute upsertLegacyComplianceRules request
         * @return ComplianceRuleUpsertResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Upsert compliance rules. New compliance rules must have an empty code field. Where a codeis given, this rule must already exist and will be updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ComplianceRuleUpsertResponse execute() throws ApiException {
            ApiResponse<ComplianceRuleUpsertResponse> localVarResp = upsertLegacyComplianceRulesWithHttpInfo(requestBody, effectiveAt);
            return localVarResp.getData();
        }

        /**
         * Execute upsertLegacyComplianceRules request. Use any specified configuration options to override any other configuration for this request only.
         * @return ComplianceRuleUpsertResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Upsert compliance rules. New compliance rules must have an empty code field. Where a codeis given, this rule must already exist and will be updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ComplianceRuleUpsertResponse execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<ComplianceRuleUpsertResponse> localVarResp = upsertLegacyComplianceRulesWithHttpInfo(requestBody, effectiveAt, opts);
            return localVarResp.getData();
        }

        /**
         * Execute upsertLegacyComplianceRules request with HTTP info returned
         * @return ApiResponse&lt;ComplianceRuleUpsertResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Upsert compliance rules. New compliance rules must have an empty code field. Where a codeis given, this rule must already exist and will be updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ComplianceRuleUpsertResponse> executeWithHttpInfo() throws ApiException {
            return upsertLegacyComplianceRulesWithHttpInfo(requestBody, effectiveAt);
        }

        /**
         * Execute upsertLegacyComplianceRules request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;ComplianceRuleUpsertResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Upsert compliance rules. New compliance rules must have an empty code field. Where a codeis given, this rule must already exist and will be updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ComplianceRuleUpsertResponse> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return upsertLegacyComplianceRulesWithHttpInfo(requestBody, effectiveAt, opts);
        }

        /**
         * Execute upsertLegacyComplianceRules request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Upsert compliance rules. New compliance rules must have an empty code field. Where a codeis given, this rule must already exist and will be updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ComplianceRuleUpsertResponse> _callback) throws ApiException {
            return upsertLegacyComplianceRulesAsync(requestBody, effectiveAt, _callback);
        }

        /**
         * Execute upsertLegacyComplianceRules request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Upsert compliance rules. New compliance rules must have an empty code field. Where a codeis given, this rule must already exist and will be updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ComplianceRuleUpsertResponse> _callback, ConfigurationOptions opts) throws ApiException {
            return upsertLegacyComplianceRulesAsync(requestBody, effectiveAt, _callback, opts);
        }
    }

    /**
     * [EXPERIMENTAL] UpsertLegacyComplianceRules: Upsert compliance rules.
     * To upsert a new rule, the code field must be left empty, a code will then be assigned and returned as part of the response. To update an existing rule, include the rule code. It is possible to both create and update compliance rules in the same request.   The upsert is transactional - either all create/update operations will succeed or none of them will.
     * @param requestBody A dictionary of upsert request identifiers to rule upsert requests. The request  identifiers are valid for the request only and can be used to link the upserted compliance rule to the code  of a created compliance rule. (required)
     * @return APIupsertLegacyComplianceRulesRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Upsert compliance rules. New compliance rules must have an empty code field. Where a codeis given, this rule must already exist and will be updated. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIupsertLegacyComplianceRulesRequest upsertLegacyComplianceRules(Map<String, ComplianceRuleUpsertRequest> requestBody) {
        return new APIupsertLegacyComplianceRulesRequest(requestBody);
    }
}
