/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.api;

import com.finbourne.lusid.ApiCallback;
import com.finbourne.lusid.ApiClient;
import com.finbourne.lusid.ApiException;
import com.finbourne.lusid.ApiResponse;
import com.finbourne.lusid.Configuration;
import com.finbourne.lusid.Pair;
import com.finbourne.lusid.ProgressRequestBody;
import com.finbourne.lusid.ProgressResponseBody;
import com.finbourne.lusid.extensions.ConfigurationOptions;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.finbourne.lusid.model.BatchUpsertPropertyDefinitionPropertiesResponse;
import com.finbourne.lusid.model.CreateDerivedPropertyDefinitionRequest;
import com.finbourne.lusid.model.CreatePropertyDefinitionRequest;
import com.finbourne.lusid.model.DeletedEntityResponse;
import com.finbourne.lusid.model.LusidProblemDetails;
import com.finbourne.lusid.model.LusidValidationProblemDetails;
import java.time.OffsetDateTime;
import com.finbourne.lusid.model.PagedResourceListOfPropertyDefinition;
import com.finbourne.lusid.model.Property;
import com.finbourne.lusid.model.PropertyDefinition;
import com.finbourne.lusid.model.ResourceListOfPropertyDefinition;
import com.finbourne.lusid.model.ResourceListOfPropertyInterval;
import com.finbourne.lusid.model.UpdateDerivedPropertyDefinitionRequest;
import com.finbourne.lusid.model.UpdatePropertyDefinitionRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PropertyDefinitionsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PropertyDefinitionsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PropertyDefinitionsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createDerivedPropertyDefinitionCall(CreateDerivedPropertyDefinitionRequest createDerivedPropertyDefinitionRequest, final ApiCallback _callback) throws ApiException {
        return createDerivedPropertyDefinitionCall(createDerivedPropertyDefinitionRequest,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call createDerivedPropertyDefinitionCall(CreateDerivedPropertyDefinitionRequest createDerivedPropertyDefinitionRequest, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createDerivedPropertyDefinitionRequest;

        // create path and map variables
        String localVarPath = "/api/propertydefinitions/derived";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createDerivedPropertyDefinitionValidateBeforeCall(CreateDerivedPropertyDefinitionRequest createDerivedPropertyDefinitionRequest, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'createDerivedPropertyDefinitionRequest' is set
        if (createDerivedPropertyDefinitionRequest == null) {
            throw new ApiException("Missing the required parameter 'createDerivedPropertyDefinitionRequest' when calling createDerivedPropertyDefinition(Async)");
        }

        return createDerivedPropertyDefinitionCall(createDerivedPropertyDefinitionRequest, _callback, opts);

    }


    private ApiResponse<PropertyDefinition> createDerivedPropertyDefinitionWithHttpInfo(CreateDerivedPropertyDefinitionRequest createDerivedPropertyDefinitionRequest) throws ApiException {
        okhttp3.Call localVarCall = createDerivedPropertyDefinitionValidateBeforeCall(createDerivedPropertyDefinitionRequest, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<PropertyDefinition>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<PropertyDefinition> createDerivedPropertyDefinitionWithHttpInfo(CreateDerivedPropertyDefinitionRequest createDerivedPropertyDefinitionRequest, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = createDerivedPropertyDefinitionValidateBeforeCall(createDerivedPropertyDefinitionRequest, null, opts);
        Type localVarReturnType = new TypeToken<PropertyDefinition>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createDerivedPropertyDefinitionAsync(CreateDerivedPropertyDefinitionRequest createDerivedPropertyDefinitionRequest, final ApiCallback<PropertyDefinition> _callback) throws ApiException {

        okhttp3.Call localVarCall = createDerivedPropertyDefinitionValidateBeforeCall(createDerivedPropertyDefinitionRequest, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<PropertyDefinition>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call createDerivedPropertyDefinitionAsync(CreateDerivedPropertyDefinitionRequest createDerivedPropertyDefinitionRequest, final ApiCallback<PropertyDefinition> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = createDerivedPropertyDefinitionValidateBeforeCall(createDerivedPropertyDefinitionRequest, _callback, opts);
        Type localVarReturnType = new TypeToken<PropertyDefinition>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIcreateDerivedPropertyDefinitionRequest {
        private final CreateDerivedPropertyDefinitionRequest createDerivedPropertyDefinitionRequest;

        private APIcreateDerivedPropertyDefinitionRequest(CreateDerivedPropertyDefinitionRequest createDerivedPropertyDefinitionRequest) {
            this.createDerivedPropertyDefinitionRequest = createDerivedPropertyDefinitionRequest;
        }

        /**
         * Build call for createDerivedPropertyDefinition
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The newly created derived property definition </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return createDerivedPropertyDefinitionCall(createDerivedPropertyDefinitionRequest, _callback);
        }

        /**
         * Execute createDerivedPropertyDefinition request
         * @return PropertyDefinition
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The newly created derived property definition </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public PropertyDefinition execute() throws ApiException {
            ApiResponse<PropertyDefinition> localVarResp = createDerivedPropertyDefinitionWithHttpInfo(createDerivedPropertyDefinitionRequest);
            return localVarResp.getData();
        }

        /**
         * Execute createDerivedPropertyDefinition request. Use any specified configuration options to override any other configuration for this request only.
         * @return PropertyDefinition
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The newly created derived property definition </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public PropertyDefinition execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<PropertyDefinition> localVarResp = createDerivedPropertyDefinitionWithHttpInfo(createDerivedPropertyDefinitionRequest, opts);
            return localVarResp.getData();
        }

        /**
         * Execute createDerivedPropertyDefinition request with HTTP info returned
         * @return ApiResponse&lt;PropertyDefinition&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The newly created derived property definition </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PropertyDefinition> executeWithHttpInfo() throws ApiException {
            return createDerivedPropertyDefinitionWithHttpInfo(createDerivedPropertyDefinitionRequest);
        }

        /**
         * Execute createDerivedPropertyDefinition request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;PropertyDefinition&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The newly created derived property definition </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PropertyDefinition> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return createDerivedPropertyDefinitionWithHttpInfo(createDerivedPropertyDefinitionRequest, opts);
        }

        /**
         * Execute createDerivedPropertyDefinition request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The newly created derived property definition </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PropertyDefinition> _callback) throws ApiException {
            return createDerivedPropertyDefinitionAsync(createDerivedPropertyDefinitionRequest, _callback);
        }

        /**
         * Execute createDerivedPropertyDefinition request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The newly created derived property definition </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PropertyDefinition> _callback, ConfigurationOptions opts) throws ApiException {
            return createDerivedPropertyDefinitionAsync(createDerivedPropertyDefinitionRequest, _callback, opts);
        }
    }

    /**
     * [EARLY ACCESS] CreateDerivedPropertyDefinition: Create derived property definition
     * Define a new derived property.
     * @param createDerivedPropertyDefinitionRequest The definition of the new derived property. (required)
     * @return APIcreateDerivedPropertyDefinitionRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The newly created derived property definition </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIcreateDerivedPropertyDefinitionRequest createDerivedPropertyDefinition(CreateDerivedPropertyDefinitionRequest createDerivedPropertyDefinitionRequest) {
        return new APIcreateDerivedPropertyDefinitionRequest(createDerivedPropertyDefinitionRequest);
    }
    private okhttp3.Call createPropertyDefinitionCall(CreatePropertyDefinitionRequest createPropertyDefinitionRequest, final ApiCallback _callback) throws ApiException {
        return createPropertyDefinitionCall(createPropertyDefinitionRequest,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call createPropertyDefinitionCall(CreatePropertyDefinitionRequest createPropertyDefinitionRequest, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createPropertyDefinitionRequest;

        // create path and map variables
        String localVarPath = "/api/propertydefinitions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createPropertyDefinitionValidateBeforeCall(CreatePropertyDefinitionRequest createPropertyDefinitionRequest, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'createPropertyDefinitionRequest' is set
        if (createPropertyDefinitionRequest == null) {
            throw new ApiException("Missing the required parameter 'createPropertyDefinitionRequest' when calling createPropertyDefinition(Async)");
        }

        return createPropertyDefinitionCall(createPropertyDefinitionRequest, _callback, opts);

    }


    private ApiResponse<PropertyDefinition> createPropertyDefinitionWithHttpInfo(CreatePropertyDefinitionRequest createPropertyDefinitionRequest) throws ApiException {
        okhttp3.Call localVarCall = createPropertyDefinitionValidateBeforeCall(createPropertyDefinitionRequest, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<PropertyDefinition>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<PropertyDefinition> createPropertyDefinitionWithHttpInfo(CreatePropertyDefinitionRequest createPropertyDefinitionRequest, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = createPropertyDefinitionValidateBeforeCall(createPropertyDefinitionRequest, null, opts);
        Type localVarReturnType = new TypeToken<PropertyDefinition>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createPropertyDefinitionAsync(CreatePropertyDefinitionRequest createPropertyDefinitionRequest, final ApiCallback<PropertyDefinition> _callback) throws ApiException {

        okhttp3.Call localVarCall = createPropertyDefinitionValidateBeforeCall(createPropertyDefinitionRequest, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<PropertyDefinition>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call createPropertyDefinitionAsync(CreatePropertyDefinitionRequest createPropertyDefinitionRequest, final ApiCallback<PropertyDefinition> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = createPropertyDefinitionValidateBeforeCall(createPropertyDefinitionRequest, _callback, opts);
        Type localVarReturnType = new TypeToken<PropertyDefinition>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIcreatePropertyDefinitionRequest {
        private final CreatePropertyDefinitionRequest createPropertyDefinitionRequest;

        private APIcreatePropertyDefinitionRequest(CreatePropertyDefinitionRequest createPropertyDefinitionRequest) {
            this.createPropertyDefinitionRequest = createPropertyDefinitionRequest;
        }

        /**
         * Build call for createPropertyDefinition
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The newly created property definition </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return createPropertyDefinitionCall(createPropertyDefinitionRequest, _callback);
        }

        /**
         * Execute createPropertyDefinition request
         * @return PropertyDefinition
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The newly created property definition </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public PropertyDefinition execute() throws ApiException {
            ApiResponse<PropertyDefinition> localVarResp = createPropertyDefinitionWithHttpInfo(createPropertyDefinitionRequest);
            return localVarResp.getData();
        }

        /**
         * Execute createPropertyDefinition request. Use any specified configuration options to override any other configuration for this request only.
         * @return PropertyDefinition
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The newly created property definition </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public PropertyDefinition execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<PropertyDefinition> localVarResp = createPropertyDefinitionWithHttpInfo(createPropertyDefinitionRequest, opts);
            return localVarResp.getData();
        }

        /**
         * Execute createPropertyDefinition request with HTTP info returned
         * @return ApiResponse&lt;PropertyDefinition&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The newly created property definition </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PropertyDefinition> executeWithHttpInfo() throws ApiException {
            return createPropertyDefinitionWithHttpInfo(createPropertyDefinitionRequest);
        }

        /**
         * Execute createPropertyDefinition request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;PropertyDefinition&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The newly created property definition </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PropertyDefinition> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return createPropertyDefinitionWithHttpInfo(createPropertyDefinitionRequest, opts);
        }

        /**
         * Execute createPropertyDefinition request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The newly created property definition </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PropertyDefinition> _callback) throws ApiException {
            return createPropertyDefinitionAsync(createPropertyDefinitionRequest, _callback);
        }

        /**
         * Execute createPropertyDefinition request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The newly created property definition </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PropertyDefinition> _callback, ConfigurationOptions opts) throws ApiException {
            return createPropertyDefinitionAsync(createPropertyDefinitionRequest, _callback, opts);
        }
    }

    /**
     * CreatePropertyDefinition: Create property definition
     * Define a new property.
     * @param createPropertyDefinitionRequest The definition of the new property. (required)
     * @return APIcreatePropertyDefinitionRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The newly created property definition </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIcreatePropertyDefinitionRequest createPropertyDefinition(CreatePropertyDefinitionRequest createPropertyDefinitionRequest) {
        return new APIcreatePropertyDefinitionRequest(createPropertyDefinitionRequest);
    }
    private okhttp3.Call deletePropertyDefinitionCall(String domain, String scope, String code, final ApiCallback _callback) throws ApiException {
        return deletePropertyDefinitionCall(domain, scope, code,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call deletePropertyDefinitionCall(String domain, String scope, String code, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/propertydefinitions/{domain}/{scope}/{code}"
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()))
            .replace("{" + "scope" + "}", localVarApiClient.escapeString(scope.toString()))
            .replace("{" + "code" + "}", localVarApiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deletePropertyDefinitionValidateBeforeCall(String domain, String scope, String code, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling deletePropertyDefinition(Async)");
        }

        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling deletePropertyDefinition(Async)");
        }

        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling deletePropertyDefinition(Async)");
        }

        return deletePropertyDefinitionCall(domain, scope, code, _callback, opts);

    }


    private ApiResponse<DeletedEntityResponse> deletePropertyDefinitionWithHttpInfo(String domain, String scope, String code) throws ApiException {
        okhttp3.Call localVarCall = deletePropertyDefinitionValidateBeforeCall(domain, scope, code, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<DeletedEntityResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<DeletedEntityResponse> deletePropertyDefinitionWithHttpInfo(String domain, String scope, String code, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = deletePropertyDefinitionValidateBeforeCall(domain, scope, code, null, opts);
        Type localVarReturnType = new TypeToken<DeletedEntityResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deletePropertyDefinitionAsync(String domain, String scope, String code, final ApiCallback<DeletedEntityResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deletePropertyDefinitionValidateBeforeCall(domain, scope, code, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<DeletedEntityResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call deletePropertyDefinitionAsync(String domain, String scope, String code, final ApiCallback<DeletedEntityResponse> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = deletePropertyDefinitionValidateBeforeCall(domain, scope, code, _callback, opts);
        Type localVarReturnType = new TypeToken<DeletedEntityResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIdeletePropertyDefinitionRequest {
        private final String domain;
        private final String scope;
        private final String code;

        private APIdeletePropertyDefinitionRequest(String domain, String scope, String code) {
            this.domain = domain;
            this.scope = scope;
            this.code = code;
        }

        /**
         * Build call for deletePropertyDefinition
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The time that the property definition was deleted </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deletePropertyDefinitionCall(domain, scope, code, _callback);
        }

        /**
         * Execute deletePropertyDefinition request
         * @return DeletedEntityResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The time that the property definition was deleted </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public DeletedEntityResponse execute() throws ApiException {
            ApiResponse<DeletedEntityResponse> localVarResp = deletePropertyDefinitionWithHttpInfo(domain, scope, code);
            return localVarResp.getData();
        }

        /**
         * Execute deletePropertyDefinition request. Use any specified configuration options to override any other configuration for this request only.
         * @return DeletedEntityResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The time that the property definition was deleted </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public DeletedEntityResponse execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<DeletedEntityResponse> localVarResp = deletePropertyDefinitionWithHttpInfo(domain, scope, code, opts);
            return localVarResp.getData();
        }

        /**
         * Execute deletePropertyDefinition request with HTTP info returned
         * @return ApiResponse&lt;DeletedEntityResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The time that the property definition was deleted </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DeletedEntityResponse> executeWithHttpInfo() throws ApiException {
            return deletePropertyDefinitionWithHttpInfo(domain, scope, code);
        }

        /**
         * Execute deletePropertyDefinition request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;DeletedEntityResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The time that the property definition was deleted </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DeletedEntityResponse> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return deletePropertyDefinitionWithHttpInfo(domain, scope, code, opts);
        }

        /**
         * Execute deletePropertyDefinition request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The time that the property definition was deleted </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DeletedEntityResponse> _callback) throws ApiException {
            return deletePropertyDefinitionAsync(domain, scope, code, _callback);
        }

        /**
         * Execute deletePropertyDefinition request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The time that the property definition was deleted </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DeletedEntityResponse> _callback, ConfigurationOptions opts) throws ApiException {
            return deletePropertyDefinitionAsync(domain, scope, code, _callback, opts);
        }
    }

    /**
     * DeletePropertyDefinition: Delete property definition
     * Delete the definition of the specified property.
     * @param domain The domain of the property to be deleted. (required)
     * @param scope The scope of the property to be deleted. (required)
     * @param code The code of the property to be deleted. Together with the domain and scope this uniquely   identifies the property. (required)
     * @return APIdeletePropertyDefinitionRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The time that the property definition was deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIdeletePropertyDefinitionRequest deletePropertyDefinition(String domain, String scope, String code) {
        return new APIdeletePropertyDefinitionRequest(domain, scope, code);
    }
    private okhttp3.Call deletePropertyDefinitionPropertiesCall(String domain, String scope, String code, List<String> requestBody, String effectiveAt, final ApiCallback _callback) throws ApiException {
        return deletePropertyDefinitionPropertiesCall(domain, scope, code, requestBody, effectiveAt,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call deletePropertyDefinitionPropertiesCall(String domain, String scope, String code, List<String> requestBody, String effectiveAt, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/api/propertydefinitions/{domain}/{scope}/{code}/properties/$delete"
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()))
            .replace("{" + "scope" + "}", localVarApiClient.escapeString(scope.toString()))
            .replace("{" + "code" + "}", localVarApiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (effectiveAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("effectiveAt", effectiveAt));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deletePropertyDefinitionPropertiesValidateBeforeCall(String domain, String scope, String code, List<String> requestBody, String effectiveAt, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling deletePropertyDefinitionProperties(Async)");
        }

        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling deletePropertyDefinitionProperties(Async)");
        }

        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling deletePropertyDefinitionProperties(Async)");
        }

        // verify the required parameter 'requestBody' is set
        if (requestBody == null) {
            throw new ApiException("Missing the required parameter 'requestBody' when calling deletePropertyDefinitionProperties(Async)");
        }

        return deletePropertyDefinitionPropertiesCall(domain, scope, code, requestBody, effectiveAt, _callback, opts);

    }


    private ApiResponse<DeletedEntityResponse> deletePropertyDefinitionPropertiesWithHttpInfo(String domain, String scope, String code, List<String> requestBody, String effectiveAt) throws ApiException {
        okhttp3.Call localVarCall = deletePropertyDefinitionPropertiesValidateBeforeCall(domain, scope, code, requestBody, effectiveAt, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<DeletedEntityResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<DeletedEntityResponse> deletePropertyDefinitionPropertiesWithHttpInfo(String domain, String scope, String code, List<String> requestBody, String effectiveAt, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = deletePropertyDefinitionPropertiesValidateBeforeCall(domain, scope, code, requestBody, effectiveAt, null, opts);
        Type localVarReturnType = new TypeToken<DeletedEntityResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deletePropertyDefinitionPropertiesAsync(String domain, String scope, String code, List<String> requestBody, String effectiveAt, final ApiCallback<DeletedEntityResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deletePropertyDefinitionPropertiesValidateBeforeCall(domain, scope, code, requestBody, effectiveAt, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<DeletedEntityResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call deletePropertyDefinitionPropertiesAsync(String domain, String scope, String code, List<String> requestBody, String effectiveAt, final ApiCallback<DeletedEntityResponse> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = deletePropertyDefinitionPropertiesValidateBeforeCall(domain, scope, code, requestBody, effectiveAt, _callback, opts);
        Type localVarReturnType = new TypeToken<DeletedEntityResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIdeletePropertyDefinitionPropertiesRequest {
        private final String domain;
        private final String scope;
        private final String code;
        private final List<String> requestBody;
        private String effectiveAt;

        private APIdeletePropertyDefinitionPropertiesRequest(String domain, String scope, String code, List<String> requestBody) {
            this.domain = domain;
            this.scope = scope;
            this.code = code;
            this.requestBody = requestBody;
        }

        /**
         * Set effectiveAt
         * @param effectiveAt The effective datetime or cut label at which to delete time-variant properties from.   The property must exist at the specified &#39;effectiveAt&#39; datetime. If the &#39;effectiveAt&#39; is not provided or is before   the time-variant property exists then a failure is returned. Do not specify this parameter if an of the properties to delete are perpetual. (optional)
         * @return APIdeletePropertyDefinitionPropertiesRequest
         */
        public APIdeletePropertyDefinitionPropertiesRequest effectiveAt(String effectiveAt) {
            this.effectiveAt = effectiveAt;
            return this;
        }

        /**
         * Build call for deletePropertyDefinitionProperties
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The datetime that the properties were deleted from the specified definition </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deletePropertyDefinitionPropertiesCall(domain, scope, code, requestBody, effectiveAt, _callback);
        }

        /**
         * Execute deletePropertyDefinitionProperties request
         * @return DeletedEntityResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The datetime that the properties were deleted from the specified definition </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public DeletedEntityResponse execute() throws ApiException {
            ApiResponse<DeletedEntityResponse> localVarResp = deletePropertyDefinitionPropertiesWithHttpInfo(domain, scope, code, requestBody, effectiveAt);
            return localVarResp.getData();
        }

        /**
         * Execute deletePropertyDefinitionProperties request. Use any specified configuration options to override any other configuration for this request only.
         * @return DeletedEntityResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The datetime that the properties were deleted from the specified definition </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public DeletedEntityResponse execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<DeletedEntityResponse> localVarResp = deletePropertyDefinitionPropertiesWithHttpInfo(domain, scope, code, requestBody, effectiveAt, opts);
            return localVarResp.getData();
        }

        /**
         * Execute deletePropertyDefinitionProperties request with HTTP info returned
         * @return ApiResponse&lt;DeletedEntityResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The datetime that the properties were deleted from the specified definition </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DeletedEntityResponse> executeWithHttpInfo() throws ApiException {
            return deletePropertyDefinitionPropertiesWithHttpInfo(domain, scope, code, requestBody, effectiveAt);
        }

        /**
         * Execute deletePropertyDefinitionProperties request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;DeletedEntityResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The datetime that the properties were deleted from the specified definition </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DeletedEntityResponse> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return deletePropertyDefinitionPropertiesWithHttpInfo(domain, scope, code, requestBody, effectiveAt, opts);
        }

        /**
         * Execute deletePropertyDefinitionProperties request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The datetime that the properties were deleted from the specified definition </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DeletedEntityResponse> _callback) throws ApiException {
            return deletePropertyDefinitionPropertiesAsync(domain, scope, code, requestBody, effectiveAt, _callback);
        }

        /**
         * Execute deletePropertyDefinitionProperties request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The datetime that the properties were deleted from the specified definition </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DeletedEntityResponse> _callback, ConfigurationOptions opts) throws ApiException {
            return deletePropertyDefinitionPropertiesAsync(domain, scope, code, requestBody, effectiveAt, _callback, opts);
        }
    }

    /**
     * [EARLY ACCESS] DeletePropertyDefinitionProperties: Delete property definition properties
     * Delete one or more properties from a single property definition. If the properties are time-variant then an effective date time from which the  properties will be deleted must be specified. If the properties are perpetual then it is invalid to specify an effective date time for deletion.
     * @param domain The domain of the property definition to delete properties from. (required)
     * @param scope The scope of the property definition to delete properties from. (required)
     * @param code The code of the property definition to delete properties from. (required)
     * @param requestBody The property keys of the properties to delete. These must take the format   {domain}/{scope}/{code} e.g \&quot;PropertyDefinition/myScope/someAttributeKey\&quot;. Each property must be from the \&quot;PropertyDefinition\&quot; domain. (required)
     * @return APIdeletePropertyDefinitionPropertiesRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The datetime that the properties were deleted from the specified definition </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIdeletePropertyDefinitionPropertiesRequest deletePropertyDefinitionProperties(String domain, String scope, String code, List<String> requestBody) {
        return new APIdeletePropertyDefinitionPropertiesRequest(domain, scope, code, requestBody);
    }
    private okhttp3.Call getMultiplePropertyDefinitionsCall(List<String> propertyKeys, OffsetDateTime asAt, String filter, String effectiveAt, final ApiCallback _callback) throws ApiException {
        return getMultiplePropertyDefinitionsCall(propertyKeys, asAt, filter, effectiveAt,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call getMultiplePropertyDefinitionsCall(List<String> propertyKeys, OffsetDateTime asAt, String filter, String effectiveAt, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/propertydefinitions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (asAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asAt", asAt));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (propertyKeys != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "propertyKeys", propertyKeys));
        }

        if (effectiveAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("effectiveAt", effectiveAt));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMultiplePropertyDefinitionsValidateBeforeCall(List<String> propertyKeys, OffsetDateTime asAt, String filter, String effectiveAt, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'propertyKeys' is set
        if (propertyKeys == null) {
            throw new ApiException("Missing the required parameter 'propertyKeys' when calling getMultiplePropertyDefinitions(Async)");
        }

        return getMultiplePropertyDefinitionsCall(propertyKeys, asAt, filter, effectiveAt, _callback, opts);

    }


    private ApiResponse<ResourceListOfPropertyDefinition> getMultiplePropertyDefinitionsWithHttpInfo(List<String> propertyKeys, OffsetDateTime asAt, String filter, String effectiveAt) throws ApiException {
        okhttp3.Call localVarCall = getMultiplePropertyDefinitionsValidateBeforeCall(propertyKeys, asAt, filter, effectiveAt, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<ResourceListOfPropertyDefinition>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<ResourceListOfPropertyDefinition> getMultiplePropertyDefinitionsWithHttpInfo(List<String> propertyKeys, OffsetDateTime asAt, String filter, String effectiveAt, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = getMultiplePropertyDefinitionsValidateBeforeCall(propertyKeys, asAt, filter, effectiveAt, null, opts);
        Type localVarReturnType = new TypeToken<ResourceListOfPropertyDefinition>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getMultiplePropertyDefinitionsAsync(List<String> propertyKeys, OffsetDateTime asAt, String filter, String effectiveAt, final ApiCallback<ResourceListOfPropertyDefinition> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMultiplePropertyDefinitionsValidateBeforeCall(propertyKeys, asAt, filter, effectiveAt, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<ResourceListOfPropertyDefinition>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call getMultiplePropertyDefinitionsAsync(List<String> propertyKeys, OffsetDateTime asAt, String filter, String effectiveAt, final ApiCallback<ResourceListOfPropertyDefinition> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = getMultiplePropertyDefinitionsValidateBeforeCall(propertyKeys, asAt, filter, effectiveAt, _callback, opts);
        Type localVarReturnType = new TypeToken<ResourceListOfPropertyDefinition>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetMultiplePropertyDefinitionsRequest {
        private final List<String> propertyKeys;
        private OffsetDateTime asAt;
        private String filter;
        private String effectiveAt;

        private APIgetMultiplePropertyDefinitionsRequest(List<String> propertyKeys) {
            this.propertyKeys = propertyKeys;
        }

        /**
         * Set asAt
         * @param asAt The asAt datetime at which to retrieve the property definitions. Defaults to return   the latest version of each definition if not specified. (optional)
         * @return APIgetMultiplePropertyDefinitionsRequest
         */
        public APIgetMultiplePropertyDefinitionsRequest asAt(OffsetDateTime asAt) {
            this.asAt = asAt;
            return this;
        }

        /**
         * Set filter
         * @param filter Expression to filter the result set.    For example, to filter on the Lifetime, use \&quot;lifeTime eq &#39;Perpetual&#39;\&quot;   Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid. (optional)
         * @return APIgetMultiplePropertyDefinitionsRequest
         */
        public APIgetMultiplePropertyDefinitionsRequest filter(String filter) {
            this.filter = filter;
            return this;
        }

        /**
         * Set effectiveAt
         * @param effectiveAt The effective datetime or cut label at which to list properties attached to the Property Definition.   Defaults to the current LUSID system datetime if not specified. (optional)
         * @return APIgetMultiplePropertyDefinitionsRequest
         */
        public APIgetMultiplePropertyDefinitionsRequest effectiveAt(String effectiveAt) {
            this.effectiveAt = effectiveAt;
            return this;
        }

        /**
         * Build call for getMultiplePropertyDefinitions
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested property definitions </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getMultiplePropertyDefinitionsCall(propertyKeys, asAt, filter, effectiveAt, _callback);
        }

        /**
         * Execute getMultiplePropertyDefinitions request
         * @return ResourceListOfPropertyDefinition
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested property definitions </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ResourceListOfPropertyDefinition execute() throws ApiException {
            ApiResponse<ResourceListOfPropertyDefinition> localVarResp = getMultiplePropertyDefinitionsWithHttpInfo(propertyKeys, asAt, filter, effectiveAt);
            return localVarResp.getData();
        }

        /**
         * Execute getMultiplePropertyDefinitions request. Use any specified configuration options to override any other configuration for this request only.
         * @return ResourceListOfPropertyDefinition
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested property definitions </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ResourceListOfPropertyDefinition execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<ResourceListOfPropertyDefinition> localVarResp = getMultiplePropertyDefinitionsWithHttpInfo(propertyKeys, asAt, filter, effectiveAt, opts);
            return localVarResp.getData();
        }

        /**
         * Execute getMultiplePropertyDefinitions request with HTTP info returned
         * @return ApiResponse&lt;ResourceListOfPropertyDefinition&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested property definitions </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ResourceListOfPropertyDefinition> executeWithHttpInfo() throws ApiException {
            return getMultiplePropertyDefinitionsWithHttpInfo(propertyKeys, asAt, filter, effectiveAt);
        }

        /**
         * Execute getMultiplePropertyDefinitions request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;ResourceListOfPropertyDefinition&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested property definitions </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ResourceListOfPropertyDefinition> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return getMultiplePropertyDefinitionsWithHttpInfo(propertyKeys, asAt, filter, effectiveAt, opts);
        }

        /**
         * Execute getMultiplePropertyDefinitions request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested property definitions </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ResourceListOfPropertyDefinition> _callback) throws ApiException {
            return getMultiplePropertyDefinitionsAsync(propertyKeys, asAt, filter, effectiveAt, _callback);
        }

        /**
         * Execute getMultiplePropertyDefinitions request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested property definitions </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ResourceListOfPropertyDefinition> _callback, ConfigurationOptions opts) throws ApiException {
            return getMultiplePropertyDefinitionsAsync(propertyKeys, asAt, filter, effectiveAt, _callback, opts);
        }
    }

    /**
     * GetMultiplePropertyDefinitions: Get multiple property definitions
     * Retrieve the definition of one or more specified properties.
     * @param propertyKeys One or more property keys which identify each property that a definition should   be retrieved for. The format for each property key is {domain}/{scope}/{code}, e.g. &#39;Portfolio/Manager/Id&#39;. (required)
     * @return APIgetMultiplePropertyDefinitionsRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested property definitions </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIgetMultiplePropertyDefinitionsRequest getMultiplePropertyDefinitions(List<String> propertyKeys) {
        return new APIgetMultiplePropertyDefinitionsRequest(propertyKeys);
    }
    private okhttp3.Call getPropertyDefinitionCall(String domain, String scope, String code, OffsetDateTime asAt, String effectiveAt, final ApiCallback _callback) throws ApiException {
        return getPropertyDefinitionCall(domain, scope, code, asAt, effectiveAt,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call getPropertyDefinitionCall(String domain, String scope, String code, OffsetDateTime asAt, String effectiveAt, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/propertydefinitions/{domain}/{scope}/{code}"
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()))
            .replace("{" + "scope" + "}", localVarApiClient.escapeString(scope.toString()))
            .replace("{" + "code" + "}", localVarApiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (asAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asAt", asAt));
        }

        if (effectiveAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("effectiveAt", effectiveAt));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPropertyDefinitionValidateBeforeCall(String domain, String scope, String code, OffsetDateTime asAt, String effectiveAt, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling getPropertyDefinition(Async)");
        }

        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling getPropertyDefinition(Async)");
        }

        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling getPropertyDefinition(Async)");
        }

        return getPropertyDefinitionCall(domain, scope, code, asAt, effectiveAt, _callback, opts);

    }


    private ApiResponse<PropertyDefinition> getPropertyDefinitionWithHttpInfo(String domain, String scope, String code, OffsetDateTime asAt, String effectiveAt) throws ApiException {
        okhttp3.Call localVarCall = getPropertyDefinitionValidateBeforeCall(domain, scope, code, asAt, effectiveAt, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<PropertyDefinition>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<PropertyDefinition> getPropertyDefinitionWithHttpInfo(String domain, String scope, String code, OffsetDateTime asAt, String effectiveAt, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = getPropertyDefinitionValidateBeforeCall(domain, scope, code, asAt, effectiveAt, null, opts);
        Type localVarReturnType = new TypeToken<PropertyDefinition>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getPropertyDefinitionAsync(String domain, String scope, String code, OffsetDateTime asAt, String effectiveAt, final ApiCallback<PropertyDefinition> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPropertyDefinitionValidateBeforeCall(domain, scope, code, asAt, effectiveAt, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<PropertyDefinition>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call getPropertyDefinitionAsync(String domain, String scope, String code, OffsetDateTime asAt, String effectiveAt, final ApiCallback<PropertyDefinition> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = getPropertyDefinitionValidateBeforeCall(domain, scope, code, asAt, effectiveAt, _callback, opts);
        Type localVarReturnType = new TypeToken<PropertyDefinition>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetPropertyDefinitionRequest {
        private final String domain;
        private final String scope;
        private final String code;
        private OffsetDateTime asAt;
        private String effectiveAt;

        private APIgetPropertyDefinitionRequest(String domain, String scope, String code) {
            this.domain = domain;
            this.scope = scope;
            this.code = code;
        }

        /**
         * Set asAt
         * @param asAt The asAt datetime at which to retrieve the property definition. Defaults to return   the latest version of the definition if not specified. (optional)
         * @return APIgetPropertyDefinitionRequest
         */
        public APIgetPropertyDefinitionRequest asAt(OffsetDateTime asAt) {
            this.asAt = asAt;
            return this;
        }

        /**
         * Set effectiveAt
         * @param effectiveAt The effective datetime or cut label at which to list properties attached to the Property Definition.   Defaults to the current LUSID system datetime if not specified. (optional)
         * @return APIgetPropertyDefinitionRequest
         */
        public APIgetPropertyDefinitionRequest effectiveAt(String effectiveAt) {
            this.effectiveAt = effectiveAt;
            return this;
        }

        /**
         * Build call for getPropertyDefinition
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested property definition </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getPropertyDefinitionCall(domain, scope, code, asAt, effectiveAt, _callback);
        }

        /**
         * Execute getPropertyDefinition request
         * @return PropertyDefinition
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested property definition </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public PropertyDefinition execute() throws ApiException {
            ApiResponse<PropertyDefinition> localVarResp = getPropertyDefinitionWithHttpInfo(domain, scope, code, asAt, effectiveAt);
            return localVarResp.getData();
        }

        /**
         * Execute getPropertyDefinition request. Use any specified configuration options to override any other configuration for this request only.
         * @return PropertyDefinition
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested property definition </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public PropertyDefinition execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<PropertyDefinition> localVarResp = getPropertyDefinitionWithHttpInfo(domain, scope, code, asAt, effectiveAt, opts);
            return localVarResp.getData();
        }

        /**
         * Execute getPropertyDefinition request with HTTP info returned
         * @return ApiResponse&lt;PropertyDefinition&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested property definition </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PropertyDefinition> executeWithHttpInfo() throws ApiException {
            return getPropertyDefinitionWithHttpInfo(domain, scope, code, asAt, effectiveAt);
        }

        /**
         * Execute getPropertyDefinition request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;PropertyDefinition&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested property definition </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PropertyDefinition> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return getPropertyDefinitionWithHttpInfo(domain, scope, code, asAt, effectiveAt, opts);
        }

        /**
         * Execute getPropertyDefinition request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested property definition </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PropertyDefinition> _callback) throws ApiException {
            return getPropertyDefinitionAsync(domain, scope, code, asAt, effectiveAt, _callback);
        }

        /**
         * Execute getPropertyDefinition request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested property definition </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PropertyDefinition> _callback, ConfigurationOptions opts) throws ApiException {
            return getPropertyDefinitionAsync(domain, scope, code, asAt, effectiveAt, _callback, opts);
        }
    }

    /**
     * GetPropertyDefinition: Get property definition
     * Retrieve the definition of a specified property.
     * @param domain The domain of the specified property. (required)
     * @param scope The scope of the specified property. (required)
     * @param code The code of the specified property. Together with the domain and scope this uniquely   identifies the property. (required)
     * @return APIgetPropertyDefinitionRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested property definition </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIgetPropertyDefinitionRequest getPropertyDefinition(String domain, String scope, String code) {
        return new APIgetPropertyDefinitionRequest(domain, scope, code);
    }
    private okhttp3.Call getPropertyDefinitionPropertyTimeSeriesCall(String domain, String scope, String code, String propertyKey, OffsetDateTime asAt, String filter, String page, Integer limit, final ApiCallback _callback) throws ApiException {
        return getPropertyDefinitionPropertyTimeSeriesCall(domain, scope, code, propertyKey, asAt, filter, page, limit,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call getPropertyDefinitionPropertyTimeSeriesCall(String domain, String scope, String code, String propertyKey, OffsetDateTime asAt, String filter, String page, Integer limit, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/propertydefinitions/{domain}/{scope}/{code}/properties/time-series"
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()))
            .replace("{" + "scope" + "}", localVarApiClient.escapeString(scope.toString()))
            .replace("{" + "code" + "}", localVarApiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (propertyKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("propertyKey", propertyKey));
        }

        if (asAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asAt", asAt));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPropertyDefinitionPropertyTimeSeriesValidateBeforeCall(String domain, String scope, String code, String propertyKey, OffsetDateTime asAt, String filter, String page, Integer limit, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling getPropertyDefinitionPropertyTimeSeries(Async)");
        }

        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling getPropertyDefinitionPropertyTimeSeries(Async)");
        }

        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling getPropertyDefinitionPropertyTimeSeries(Async)");
        }

        // verify the required parameter 'propertyKey' is set
        if (propertyKey == null) {
            throw new ApiException("Missing the required parameter 'propertyKey' when calling getPropertyDefinitionPropertyTimeSeries(Async)");
        }

        return getPropertyDefinitionPropertyTimeSeriesCall(domain, scope, code, propertyKey, asAt, filter, page, limit, _callback, opts);

    }


    private ApiResponse<ResourceListOfPropertyInterval> getPropertyDefinitionPropertyTimeSeriesWithHttpInfo(String domain, String scope, String code, String propertyKey, OffsetDateTime asAt, String filter, String page, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = getPropertyDefinitionPropertyTimeSeriesValidateBeforeCall(domain, scope, code, propertyKey, asAt, filter, page, limit, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<ResourceListOfPropertyInterval>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<ResourceListOfPropertyInterval> getPropertyDefinitionPropertyTimeSeriesWithHttpInfo(String domain, String scope, String code, String propertyKey, OffsetDateTime asAt, String filter, String page, Integer limit, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = getPropertyDefinitionPropertyTimeSeriesValidateBeforeCall(domain, scope, code, propertyKey, asAt, filter, page, limit, null, opts);
        Type localVarReturnType = new TypeToken<ResourceListOfPropertyInterval>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getPropertyDefinitionPropertyTimeSeriesAsync(String domain, String scope, String code, String propertyKey, OffsetDateTime asAt, String filter, String page, Integer limit, final ApiCallback<ResourceListOfPropertyInterval> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPropertyDefinitionPropertyTimeSeriesValidateBeforeCall(domain, scope, code, propertyKey, asAt, filter, page, limit, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<ResourceListOfPropertyInterval>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call getPropertyDefinitionPropertyTimeSeriesAsync(String domain, String scope, String code, String propertyKey, OffsetDateTime asAt, String filter, String page, Integer limit, final ApiCallback<ResourceListOfPropertyInterval> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = getPropertyDefinitionPropertyTimeSeriesValidateBeforeCall(domain, scope, code, propertyKey, asAt, filter, page, limit, _callback, opts);
        Type localVarReturnType = new TypeToken<ResourceListOfPropertyInterval>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetPropertyDefinitionPropertyTimeSeriesRequest {
        private final String domain;
        private final String scope;
        private final String code;
        private final String propertyKey;
        private OffsetDateTime asAt;
        private String filter;
        private String page;
        private Integer limit;

        private APIgetPropertyDefinitionPropertyTimeSeriesRequest(String domain, String scope, String code, String propertyKey) {
            this.domain = domain;
            this.scope = scope;
            this.code = code;
            this.propertyKey = propertyKey;
        }

        /**
         * Set asAt
         * @param asAt The asAt datetime at which to show the history. Defaults to the current datetime if not specified. (optional)
         * @return APIgetPropertyDefinitionPropertyTimeSeriesRequest
         */
        public APIgetPropertyDefinitionPropertyTimeSeriesRequest asAt(OffsetDateTime asAt) {
            this.asAt = asAt;
            return this;
        }

        /**
         * Set filter
         * @param filter Expression to filter the results. Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid. (optional)
         * @return APIgetPropertyDefinitionPropertyTimeSeriesRequest
         */
        public APIgetPropertyDefinitionPropertyTimeSeriesRequest filter(String filter) {
            this.filter = filter;
            return this;
        }

        /**
         * Set page
         * @param page The pagination token to use to continue listing properties from a previous call to get property time series.   This value is returned from the previous call. If a pagination token is provided the filter and asAt fields   must not have changed since the original request. (optional)
         * @return APIgetPropertyDefinitionPropertyTimeSeriesRequest
         */
        public APIgetPropertyDefinitionPropertyTimeSeriesRequest page(String page) {
            this.page = page;
            return this;
        }

        /**
         * Set limit
         * @param limit When paginating, limit the number of returned results to this many. (optional)
         * @return APIgetPropertyDefinitionPropertyTimeSeriesRequest
         */
        public APIgetPropertyDefinitionPropertyTimeSeriesRequest limit(Integer limit) {
            this.limit = limit;
            return this;
        }

        /**
         * Build call for getPropertyDefinitionPropertyTimeSeries
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The time series of the property </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getPropertyDefinitionPropertyTimeSeriesCall(domain, scope, code, propertyKey, asAt, filter, page, limit, _callback);
        }

        /**
         * Execute getPropertyDefinitionPropertyTimeSeries request
         * @return ResourceListOfPropertyInterval
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The time series of the property </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ResourceListOfPropertyInterval execute() throws ApiException {
            ApiResponse<ResourceListOfPropertyInterval> localVarResp = getPropertyDefinitionPropertyTimeSeriesWithHttpInfo(domain, scope, code, propertyKey, asAt, filter, page, limit);
            return localVarResp.getData();
        }

        /**
         * Execute getPropertyDefinitionPropertyTimeSeries request. Use any specified configuration options to override any other configuration for this request only.
         * @return ResourceListOfPropertyInterval
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The time series of the property </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ResourceListOfPropertyInterval execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<ResourceListOfPropertyInterval> localVarResp = getPropertyDefinitionPropertyTimeSeriesWithHttpInfo(domain, scope, code, propertyKey, asAt, filter, page, limit, opts);
            return localVarResp.getData();
        }

        /**
         * Execute getPropertyDefinitionPropertyTimeSeries request with HTTP info returned
         * @return ApiResponse&lt;ResourceListOfPropertyInterval&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The time series of the property </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ResourceListOfPropertyInterval> executeWithHttpInfo() throws ApiException {
            return getPropertyDefinitionPropertyTimeSeriesWithHttpInfo(domain, scope, code, propertyKey, asAt, filter, page, limit);
        }

        /**
         * Execute getPropertyDefinitionPropertyTimeSeries request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;ResourceListOfPropertyInterval&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The time series of the property </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ResourceListOfPropertyInterval> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return getPropertyDefinitionPropertyTimeSeriesWithHttpInfo(domain, scope, code, propertyKey, asAt, filter, page, limit, opts);
        }

        /**
         * Execute getPropertyDefinitionPropertyTimeSeries request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The time series of the property </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ResourceListOfPropertyInterval> _callback) throws ApiException {
            return getPropertyDefinitionPropertyTimeSeriesAsync(domain, scope, code, propertyKey, asAt, filter, page, limit, _callback);
        }

        /**
         * Execute getPropertyDefinitionPropertyTimeSeries request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The time series of the property </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ResourceListOfPropertyInterval> _callback, ConfigurationOptions opts) throws ApiException {
            return getPropertyDefinitionPropertyTimeSeriesAsync(domain, scope, code, propertyKey, asAt, filter, page, limit, _callback, opts);
        }
    }

    /**
     * [EARLY ACCESS] GetPropertyDefinitionPropertyTimeSeries: Get Property Definition Property Time Series
     * List the complete time series of a property definition property.
     * @param domain The domain of the property definition to which the property is attached (required)
     * @param scope The scope of the property definition to which the property is attached (required)
     * @param code The code of the property definition to which the property is attached (required)
     * @param propertyKey The property key of the property whose history to show. This must be from the \&quot;Property Definition\&quot; domain and in the format   {domain}/{scope}/{code}, for example \&quot;PropertyDefinition/myScope/someAttributeKey\&quot;. (required)
     * @return APIgetPropertyDefinitionPropertyTimeSeriesRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The time series of the property </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIgetPropertyDefinitionPropertyTimeSeriesRequest getPropertyDefinitionPropertyTimeSeries(String domain, String scope, String code, String propertyKey) {
        return new APIgetPropertyDefinitionPropertyTimeSeriesRequest(domain, scope, code, propertyKey);
    }
    private okhttp3.Call listPropertyDefinitionsCall(String effectiveAt, OffsetDateTime asAt, List<String> propertyKeys, String page, Integer limit, String filter, List<String> sortBy, final ApiCallback _callback) throws ApiException {
        return listPropertyDefinitionsCall(effectiveAt, asAt, propertyKeys, page, limit, filter, sortBy,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call listPropertyDefinitionsCall(String effectiveAt, OffsetDateTime asAt, List<String> propertyKeys, String page, Integer limit, String filter, List<String> sortBy, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/propertydefinitions/$list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (effectiveAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("effectiveAt", effectiveAt));
        }

        if (asAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asAt", asAt));
        }

        if (propertyKeys != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "propertyKeys", propertyKeys));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (sortBy != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "sortBy", sortBy));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listPropertyDefinitionsValidateBeforeCall(String effectiveAt, OffsetDateTime asAt, List<String> propertyKeys, String page, Integer limit, String filter, List<String> sortBy, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        return listPropertyDefinitionsCall(effectiveAt, asAt, propertyKeys, page, limit, filter, sortBy, _callback, opts);

    }


    private ApiResponse<PagedResourceListOfPropertyDefinition> listPropertyDefinitionsWithHttpInfo(String effectiveAt, OffsetDateTime asAt, List<String> propertyKeys, String page, Integer limit, String filter, List<String> sortBy) throws ApiException {
        okhttp3.Call localVarCall = listPropertyDefinitionsValidateBeforeCall(effectiveAt, asAt, propertyKeys, page, limit, filter, sortBy, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<PagedResourceListOfPropertyDefinition>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<PagedResourceListOfPropertyDefinition> listPropertyDefinitionsWithHttpInfo(String effectiveAt, OffsetDateTime asAt, List<String> propertyKeys, String page, Integer limit, String filter, List<String> sortBy, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = listPropertyDefinitionsValidateBeforeCall(effectiveAt, asAt, propertyKeys, page, limit, filter, sortBy, null, opts);
        Type localVarReturnType = new TypeToken<PagedResourceListOfPropertyDefinition>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listPropertyDefinitionsAsync(String effectiveAt, OffsetDateTime asAt, List<String> propertyKeys, String page, Integer limit, String filter, List<String> sortBy, final ApiCallback<PagedResourceListOfPropertyDefinition> _callback) throws ApiException {

        okhttp3.Call localVarCall = listPropertyDefinitionsValidateBeforeCall(effectiveAt, asAt, propertyKeys, page, limit, filter, sortBy, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<PagedResourceListOfPropertyDefinition>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call listPropertyDefinitionsAsync(String effectiveAt, OffsetDateTime asAt, List<String> propertyKeys, String page, Integer limit, String filter, List<String> sortBy, final ApiCallback<PagedResourceListOfPropertyDefinition> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = listPropertyDefinitionsValidateBeforeCall(effectiveAt, asAt, propertyKeys, page, limit, filter, sortBy, _callback, opts);
        Type localVarReturnType = new TypeToken<PagedResourceListOfPropertyDefinition>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIlistPropertyDefinitionsRequest {
        private String effectiveAt;
        private OffsetDateTime asAt;
        private List<String> propertyKeys;
        private String page;
        private Integer limit;
        private String filter;
        private List<String> sortBy;

        private APIlistPropertyDefinitionsRequest() {
        }

        /**
         * Set effectiveAt
         * @param effectiveAt The effective datetime or cut label at which to list the property definitions. Defaults to the current LUSID   system datetime if not specified. (optional)
         * @return APIlistPropertyDefinitionsRequest
         */
        public APIlistPropertyDefinitionsRequest effectiveAt(String effectiveAt) {
            this.effectiveAt = effectiveAt;
            return this;
        }

        /**
         * Set asAt
         * @param asAt The asAt datetime at which to list the property definitions. Defaults to returning the latest version   of each property definition if not specified. (optional)
         * @return APIlistPropertyDefinitionsRequest
         */
        public APIlistPropertyDefinitionsRequest asAt(OffsetDateTime asAt) {
            this.asAt = asAt;
            return this;
        }

        /**
         * Set propertyKeys
         * @param propertyKeys A list of property keys from the &#39;Property Definition&#39; domain to decorate onto   property definitions. These must take the format   {domain}/{scope}/{code} e.g \&quot;PropertyDefinition/myScope/someAttributeKey\&quot;. Each property must be from the \&quot;PropertyDefinition\&quot; domain. (optional)
         * @return APIlistPropertyDefinitionsRequest
         */
        public APIlistPropertyDefinitionsRequest propertyKeys(List<String> propertyKeys) {
            this.propertyKeys = propertyKeys;
            return this;
        }

        /**
         * Set page
         * @param page The pagination token to use to continue listing property definitions; this   value is returned from the previous call. If a pagination token is provided, the filter, effectiveAt   and asAt fields must not have changed since the original request. (optional)
         * @return APIlistPropertyDefinitionsRequest
         */
        public APIlistPropertyDefinitionsRequest page(String page) {
            this.page = page;
            return this;
        }

        /**
         * Set limit
         * @param limit When paginating, limit the results to this number. Defaults to 100 if not specified. (optional)
         * @return APIlistPropertyDefinitionsRequest
         */
        public APIlistPropertyDefinitionsRequest limit(Integer limit) {
            this.limit = limit;
            return this;
        }

        /**
         * Set filter
         * @param filter Expression to filter the results.   For example, to filter on the display name, specify \&quot;DisplayName eq &#39;DisplayName&#39;\&quot;. For more information about filtering   results, see https://support.lusid.com/knowledgebase/article/KA-01914. (optional)
         * @return APIlistPropertyDefinitionsRequest
         */
        public APIlistPropertyDefinitionsRequest filter(String filter) {
            this.filter = filter;
            return this;
        }

        /**
         * Set sortBy
         * @param sortBy A list of field names or properties to sort by, each suffixed by \&quot; ASC\&quot; or \&quot; DESC\&quot; (optional)
         * @return APIlistPropertyDefinitionsRequest
         */
        public APIlistPropertyDefinitionsRequest sortBy(List<String> sortBy) {
            this.sortBy = sortBy;
            return this;
        }

        /**
         * Build call for listPropertyDefinitions
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested portfolios </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listPropertyDefinitionsCall(effectiveAt, asAt, propertyKeys, page, limit, filter, sortBy, _callback);
        }

        /**
         * Execute listPropertyDefinitions request
         * @return PagedResourceListOfPropertyDefinition
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested portfolios </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public PagedResourceListOfPropertyDefinition execute() throws ApiException {
            ApiResponse<PagedResourceListOfPropertyDefinition> localVarResp = listPropertyDefinitionsWithHttpInfo(effectiveAt, asAt, propertyKeys, page, limit, filter, sortBy);
            return localVarResp.getData();
        }

        /**
         * Execute listPropertyDefinitions request. Use any specified configuration options to override any other configuration for this request only.
         * @return PagedResourceListOfPropertyDefinition
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested portfolios </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public PagedResourceListOfPropertyDefinition execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<PagedResourceListOfPropertyDefinition> localVarResp = listPropertyDefinitionsWithHttpInfo(effectiveAt, asAt, propertyKeys, page, limit, filter, sortBy, opts);
            return localVarResp.getData();
        }

        /**
         * Execute listPropertyDefinitions request with HTTP info returned
         * @return ApiResponse&lt;PagedResourceListOfPropertyDefinition&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested portfolios </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PagedResourceListOfPropertyDefinition> executeWithHttpInfo() throws ApiException {
            return listPropertyDefinitionsWithHttpInfo(effectiveAt, asAt, propertyKeys, page, limit, filter, sortBy);
        }

        /**
         * Execute listPropertyDefinitions request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;PagedResourceListOfPropertyDefinition&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested portfolios </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PagedResourceListOfPropertyDefinition> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return listPropertyDefinitionsWithHttpInfo(effectiveAt, asAt, propertyKeys, page, limit, filter, sortBy, opts);
        }

        /**
         * Execute listPropertyDefinitions request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested portfolios </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PagedResourceListOfPropertyDefinition> _callback) throws ApiException {
            return listPropertyDefinitionsAsync(effectiveAt, asAt, propertyKeys, page, limit, filter, sortBy, _callback);
        }

        /**
         * Execute listPropertyDefinitions request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested portfolios </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PagedResourceListOfPropertyDefinition> _callback, ConfigurationOptions opts) throws ApiException {
            return listPropertyDefinitionsAsync(effectiveAt, asAt, propertyKeys, page, limit, filter, sortBy, _callback, opts);
        }
    }

    /**
     * ListPropertyDefinitions: List property definitions
     * List all the property definitions matching particular criteria.
     * @return APIlistPropertyDefinitionsRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested portfolios </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIlistPropertyDefinitionsRequest listPropertyDefinitions() {
        return new APIlistPropertyDefinitionsRequest();
    }
    private okhttp3.Call updateDerivedPropertyDefinitionCall(String domain, String scope, String code, UpdateDerivedPropertyDefinitionRequest updateDerivedPropertyDefinitionRequest, final ApiCallback _callback) throws ApiException {
        return updateDerivedPropertyDefinitionCall(domain, scope, code, updateDerivedPropertyDefinitionRequest,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call updateDerivedPropertyDefinitionCall(String domain, String scope, String code, UpdateDerivedPropertyDefinitionRequest updateDerivedPropertyDefinitionRequest, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateDerivedPropertyDefinitionRequest;

        // create path and map variables
        String localVarPath = "/api/propertydefinitions/derived/{domain}/{scope}/{code}"
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()))
            .replace("{" + "scope" + "}", localVarApiClient.escapeString(scope.toString()))
            .replace("{" + "code" + "}", localVarApiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateDerivedPropertyDefinitionValidateBeforeCall(String domain, String scope, String code, UpdateDerivedPropertyDefinitionRequest updateDerivedPropertyDefinitionRequest, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling updateDerivedPropertyDefinition(Async)");
        }

        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling updateDerivedPropertyDefinition(Async)");
        }

        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling updateDerivedPropertyDefinition(Async)");
        }

        // verify the required parameter 'updateDerivedPropertyDefinitionRequest' is set
        if (updateDerivedPropertyDefinitionRequest == null) {
            throw new ApiException("Missing the required parameter 'updateDerivedPropertyDefinitionRequest' when calling updateDerivedPropertyDefinition(Async)");
        }

        return updateDerivedPropertyDefinitionCall(domain, scope, code, updateDerivedPropertyDefinitionRequest, _callback, opts);

    }


    private ApiResponse<PropertyDefinition> updateDerivedPropertyDefinitionWithHttpInfo(String domain, String scope, String code, UpdateDerivedPropertyDefinitionRequest updateDerivedPropertyDefinitionRequest) throws ApiException {
        okhttp3.Call localVarCall = updateDerivedPropertyDefinitionValidateBeforeCall(domain, scope, code, updateDerivedPropertyDefinitionRequest, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<PropertyDefinition>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<PropertyDefinition> updateDerivedPropertyDefinitionWithHttpInfo(String domain, String scope, String code, UpdateDerivedPropertyDefinitionRequest updateDerivedPropertyDefinitionRequest, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = updateDerivedPropertyDefinitionValidateBeforeCall(domain, scope, code, updateDerivedPropertyDefinitionRequest, null, opts);
        Type localVarReturnType = new TypeToken<PropertyDefinition>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateDerivedPropertyDefinitionAsync(String domain, String scope, String code, UpdateDerivedPropertyDefinitionRequest updateDerivedPropertyDefinitionRequest, final ApiCallback<PropertyDefinition> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateDerivedPropertyDefinitionValidateBeforeCall(domain, scope, code, updateDerivedPropertyDefinitionRequest, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<PropertyDefinition>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call updateDerivedPropertyDefinitionAsync(String domain, String scope, String code, UpdateDerivedPropertyDefinitionRequest updateDerivedPropertyDefinitionRequest, final ApiCallback<PropertyDefinition> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = updateDerivedPropertyDefinitionValidateBeforeCall(domain, scope, code, updateDerivedPropertyDefinitionRequest, _callback, opts);
        Type localVarReturnType = new TypeToken<PropertyDefinition>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIupdateDerivedPropertyDefinitionRequest {
        private final String domain;
        private final String scope;
        private final String code;
        private final UpdateDerivedPropertyDefinitionRequest updateDerivedPropertyDefinitionRequest;

        private APIupdateDerivedPropertyDefinitionRequest(String domain, String scope, String code, UpdateDerivedPropertyDefinitionRequest updateDerivedPropertyDefinitionRequest) {
            this.domain = domain;
            this.scope = scope;
            this.code = code;
            this.updateDerivedPropertyDefinitionRequest = updateDerivedPropertyDefinitionRequest;
        }

        /**
         * Build call for updateDerivedPropertyDefinition
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The updated derived property definition </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return updateDerivedPropertyDefinitionCall(domain, scope, code, updateDerivedPropertyDefinitionRequest, _callback);
        }

        /**
         * Execute updateDerivedPropertyDefinition request
         * @return PropertyDefinition
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The updated derived property definition </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public PropertyDefinition execute() throws ApiException {
            ApiResponse<PropertyDefinition> localVarResp = updateDerivedPropertyDefinitionWithHttpInfo(domain, scope, code, updateDerivedPropertyDefinitionRequest);
            return localVarResp.getData();
        }

        /**
         * Execute updateDerivedPropertyDefinition request. Use any specified configuration options to override any other configuration for this request only.
         * @return PropertyDefinition
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The updated derived property definition </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public PropertyDefinition execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<PropertyDefinition> localVarResp = updateDerivedPropertyDefinitionWithHttpInfo(domain, scope, code, updateDerivedPropertyDefinitionRequest, opts);
            return localVarResp.getData();
        }

        /**
         * Execute updateDerivedPropertyDefinition request with HTTP info returned
         * @return ApiResponse&lt;PropertyDefinition&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The updated derived property definition </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PropertyDefinition> executeWithHttpInfo() throws ApiException {
            return updateDerivedPropertyDefinitionWithHttpInfo(domain, scope, code, updateDerivedPropertyDefinitionRequest);
        }

        /**
         * Execute updateDerivedPropertyDefinition request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;PropertyDefinition&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The updated derived property definition </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PropertyDefinition> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return updateDerivedPropertyDefinitionWithHttpInfo(domain, scope, code, updateDerivedPropertyDefinitionRequest, opts);
        }

        /**
         * Execute updateDerivedPropertyDefinition request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The updated derived property definition </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PropertyDefinition> _callback) throws ApiException {
            return updateDerivedPropertyDefinitionAsync(domain, scope, code, updateDerivedPropertyDefinitionRequest, _callback);
        }

        /**
         * Execute updateDerivedPropertyDefinition request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The updated derived property definition </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PropertyDefinition> _callback, ConfigurationOptions opts) throws ApiException {
            return updateDerivedPropertyDefinitionAsync(domain, scope, code, updateDerivedPropertyDefinitionRequest, _callback, opts);
        }
    }

    /**
     * [EARLY ACCESS] UpdateDerivedPropertyDefinition: Update a pre-existing derived property definition
     * This will fail if the property definition does not exist
     * @param domain Domain of the property definition (required)
     * @param scope Scope of the property definition (required)
     * @param code Code of the property definition (required)
     * @param updateDerivedPropertyDefinitionRequest Information about the derived property definition being updated (required)
     * @return APIupdateDerivedPropertyDefinitionRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated derived property definition </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIupdateDerivedPropertyDefinitionRequest updateDerivedPropertyDefinition(String domain, String scope, String code, UpdateDerivedPropertyDefinitionRequest updateDerivedPropertyDefinitionRequest) {
        return new APIupdateDerivedPropertyDefinitionRequest(domain, scope, code, updateDerivedPropertyDefinitionRequest);
    }
    private okhttp3.Call updatePropertyDefinitionCall(String domain, String scope, String code, UpdatePropertyDefinitionRequest updatePropertyDefinitionRequest, final ApiCallback _callback) throws ApiException {
        return updatePropertyDefinitionCall(domain, scope, code, updatePropertyDefinitionRequest,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call updatePropertyDefinitionCall(String domain, String scope, String code, UpdatePropertyDefinitionRequest updatePropertyDefinitionRequest, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updatePropertyDefinitionRequest;

        // create path and map variables
        String localVarPath = "/api/propertydefinitions/{domain}/{scope}/{code}"
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()))
            .replace("{" + "scope" + "}", localVarApiClient.escapeString(scope.toString()))
            .replace("{" + "code" + "}", localVarApiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updatePropertyDefinitionValidateBeforeCall(String domain, String scope, String code, UpdatePropertyDefinitionRequest updatePropertyDefinitionRequest, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling updatePropertyDefinition(Async)");
        }

        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling updatePropertyDefinition(Async)");
        }

        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling updatePropertyDefinition(Async)");
        }

        // verify the required parameter 'updatePropertyDefinitionRequest' is set
        if (updatePropertyDefinitionRequest == null) {
            throw new ApiException("Missing the required parameter 'updatePropertyDefinitionRequest' when calling updatePropertyDefinition(Async)");
        }

        return updatePropertyDefinitionCall(domain, scope, code, updatePropertyDefinitionRequest, _callback, opts);

    }


    private ApiResponse<PropertyDefinition> updatePropertyDefinitionWithHttpInfo(String domain, String scope, String code, UpdatePropertyDefinitionRequest updatePropertyDefinitionRequest) throws ApiException {
        okhttp3.Call localVarCall = updatePropertyDefinitionValidateBeforeCall(domain, scope, code, updatePropertyDefinitionRequest, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<PropertyDefinition>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<PropertyDefinition> updatePropertyDefinitionWithHttpInfo(String domain, String scope, String code, UpdatePropertyDefinitionRequest updatePropertyDefinitionRequest, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = updatePropertyDefinitionValidateBeforeCall(domain, scope, code, updatePropertyDefinitionRequest, null, opts);
        Type localVarReturnType = new TypeToken<PropertyDefinition>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updatePropertyDefinitionAsync(String domain, String scope, String code, UpdatePropertyDefinitionRequest updatePropertyDefinitionRequest, final ApiCallback<PropertyDefinition> _callback) throws ApiException {

        okhttp3.Call localVarCall = updatePropertyDefinitionValidateBeforeCall(domain, scope, code, updatePropertyDefinitionRequest, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<PropertyDefinition>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call updatePropertyDefinitionAsync(String domain, String scope, String code, UpdatePropertyDefinitionRequest updatePropertyDefinitionRequest, final ApiCallback<PropertyDefinition> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = updatePropertyDefinitionValidateBeforeCall(domain, scope, code, updatePropertyDefinitionRequest, _callback, opts);
        Type localVarReturnType = new TypeToken<PropertyDefinition>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIupdatePropertyDefinitionRequest {
        private final String domain;
        private final String scope;
        private final String code;
        private final UpdatePropertyDefinitionRequest updatePropertyDefinitionRequest;

        private APIupdatePropertyDefinitionRequest(String domain, String scope, String code, UpdatePropertyDefinitionRequest updatePropertyDefinitionRequest) {
            this.domain = domain;
            this.scope = scope;
            this.code = code;
            this.updatePropertyDefinitionRequest = updatePropertyDefinitionRequest;
        }

        /**
         * Build call for updatePropertyDefinition
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The updated property definition </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return updatePropertyDefinitionCall(domain, scope, code, updatePropertyDefinitionRequest, _callback);
        }

        /**
         * Execute updatePropertyDefinition request
         * @return PropertyDefinition
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The updated property definition </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public PropertyDefinition execute() throws ApiException {
            ApiResponse<PropertyDefinition> localVarResp = updatePropertyDefinitionWithHttpInfo(domain, scope, code, updatePropertyDefinitionRequest);
            return localVarResp.getData();
        }

        /**
         * Execute updatePropertyDefinition request. Use any specified configuration options to override any other configuration for this request only.
         * @return PropertyDefinition
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The updated property definition </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public PropertyDefinition execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<PropertyDefinition> localVarResp = updatePropertyDefinitionWithHttpInfo(domain, scope, code, updatePropertyDefinitionRequest, opts);
            return localVarResp.getData();
        }

        /**
         * Execute updatePropertyDefinition request with HTTP info returned
         * @return ApiResponse&lt;PropertyDefinition&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The updated property definition </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PropertyDefinition> executeWithHttpInfo() throws ApiException {
            return updatePropertyDefinitionWithHttpInfo(domain, scope, code, updatePropertyDefinitionRequest);
        }

        /**
         * Execute updatePropertyDefinition request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;PropertyDefinition&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The updated property definition </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PropertyDefinition> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return updatePropertyDefinitionWithHttpInfo(domain, scope, code, updatePropertyDefinitionRequest, opts);
        }

        /**
         * Execute updatePropertyDefinition request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The updated property definition </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PropertyDefinition> _callback) throws ApiException {
            return updatePropertyDefinitionAsync(domain, scope, code, updatePropertyDefinitionRequest, _callback);
        }

        /**
         * Execute updatePropertyDefinition request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The updated property definition </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PropertyDefinition> _callback, ConfigurationOptions opts) throws ApiException {
            return updatePropertyDefinitionAsync(domain, scope, code, updatePropertyDefinitionRequest, _callback, opts);
        }
    }

    /**
     * UpdatePropertyDefinition: Update property definition
     * Update the definition of a specified existing property. Not all elements within a property definition  are modifiable due to the potential implications for values already stored against the property.
     * @param domain The domain of the property being updated. (required)
     * @param scope The scope of the property being updated. (required)
     * @param code The code of the property being updated. Together with the domain and scope this uniquely   identifies the property. (required)
     * @param updatePropertyDefinitionRequest The updated definition of the property. (required)
     * @return APIupdatePropertyDefinitionRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated property definition </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIupdatePropertyDefinitionRequest updatePropertyDefinition(String domain, String scope, String code, UpdatePropertyDefinitionRequest updatePropertyDefinitionRequest) {
        return new APIupdatePropertyDefinitionRequest(domain, scope, code, updatePropertyDefinitionRequest);
    }
    private okhttp3.Call upsertPropertyDefinitionPropertiesCall(String domain, String scope, String code, Map<String, Property> requestBody, String successMode, final ApiCallback _callback) throws ApiException {
        return upsertPropertyDefinitionPropertiesCall(domain, scope, code, requestBody, successMode,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call upsertPropertyDefinitionPropertiesCall(String domain, String scope, String code, Map<String, Property> requestBody, String successMode, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/api/propertydefinitions/{domain}/{scope}/{code}/properties"
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()))
            .replace("{" + "scope" + "}", localVarApiClient.escapeString(scope.toString()))
            .replace("{" + "code" + "}", localVarApiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (successMode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("successMode", successMode));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call upsertPropertyDefinitionPropertiesValidateBeforeCall(String domain, String scope, String code, Map<String, Property> requestBody, String successMode, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling upsertPropertyDefinitionProperties(Async)");
        }

        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling upsertPropertyDefinitionProperties(Async)");
        }

        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling upsertPropertyDefinitionProperties(Async)");
        }

        // verify the required parameter 'requestBody' is set
        if (requestBody == null) {
            throw new ApiException("Missing the required parameter 'requestBody' when calling upsertPropertyDefinitionProperties(Async)");
        }

        return upsertPropertyDefinitionPropertiesCall(domain, scope, code, requestBody, successMode, _callback, opts);

    }


    private ApiResponse<BatchUpsertPropertyDefinitionPropertiesResponse> upsertPropertyDefinitionPropertiesWithHttpInfo(String domain, String scope, String code, Map<String, Property> requestBody, String successMode) throws ApiException {
        okhttp3.Call localVarCall = upsertPropertyDefinitionPropertiesValidateBeforeCall(domain, scope, code, requestBody, successMode, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<BatchUpsertPropertyDefinitionPropertiesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<BatchUpsertPropertyDefinitionPropertiesResponse> upsertPropertyDefinitionPropertiesWithHttpInfo(String domain, String scope, String code, Map<String, Property> requestBody, String successMode, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = upsertPropertyDefinitionPropertiesValidateBeforeCall(domain, scope, code, requestBody, successMode, null, opts);
        Type localVarReturnType = new TypeToken<BatchUpsertPropertyDefinitionPropertiesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call upsertPropertyDefinitionPropertiesAsync(String domain, String scope, String code, Map<String, Property> requestBody, String successMode, final ApiCallback<BatchUpsertPropertyDefinitionPropertiesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = upsertPropertyDefinitionPropertiesValidateBeforeCall(domain, scope, code, requestBody, successMode, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<BatchUpsertPropertyDefinitionPropertiesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call upsertPropertyDefinitionPropertiesAsync(String domain, String scope, String code, Map<String, Property> requestBody, String successMode, final ApiCallback<BatchUpsertPropertyDefinitionPropertiesResponse> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = upsertPropertyDefinitionPropertiesValidateBeforeCall(domain, scope, code, requestBody, successMode, _callback, opts);
        Type localVarReturnType = new TypeToken<BatchUpsertPropertyDefinitionPropertiesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIupsertPropertyDefinitionPropertiesRequest {
        private final String domain;
        private final String scope;
        private final String code;
        private final Map<String, Property> requestBody;
        private String successMode;

        private APIupsertPropertyDefinitionPropertiesRequest(String domain, String scope, String code, Map<String, Property> requestBody) {
            this.domain = domain;
            this.scope = scope;
            this.code = code;
            this.requestBody = requestBody;
        }

        /**
         * Set successMode
         * @param successMode Whether the batch request should fail Atomically or in a Partial fashion - Allowed Values: Atomic, Partial. (optional, default to Partial)
         * @return APIupsertPropertyDefinitionPropertiesRequest
         */
        public APIupsertPropertyDefinitionPropertiesRequest successMode(String successMode) {
            this.successMode = successMode;
            return this;
        }

        /**
         * Build call for upsertPropertyDefinitionProperties
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The asAt datetime at which the properties were updated or created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return upsertPropertyDefinitionPropertiesCall(domain, scope, code, requestBody, successMode, _callback);
        }

        /**
         * Execute upsertPropertyDefinitionProperties request
         * @return BatchUpsertPropertyDefinitionPropertiesResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The asAt datetime at which the properties were updated or created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public BatchUpsertPropertyDefinitionPropertiesResponse execute() throws ApiException {
            ApiResponse<BatchUpsertPropertyDefinitionPropertiesResponse> localVarResp = upsertPropertyDefinitionPropertiesWithHttpInfo(domain, scope, code, requestBody, successMode);
            return localVarResp.getData();
        }

        /**
         * Execute upsertPropertyDefinitionProperties request. Use any specified configuration options to override any other configuration for this request only.
         * @return BatchUpsertPropertyDefinitionPropertiesResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The asAt datetime at which the properties were updated or created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public BatchUpsertPropertyDefinitionPropertiesResponse execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<BatchUpsertPropertyDefinitionPropertiesResponse> localVarResp = upsertPropertyDefinitionPropertiesWithHttpInfo(domain, scope, code, requestBody, successMode, opts);
            return localVarResp.getData();
        }

        /**
         * Execute upsertPropertyDefinitionProperties request with HTTP info returned
         * @return ApiResponse&lt;BatchUpsertPropertyDefinitionPropertiesResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The asAt datetime at which the properties were updated or created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<BatchUpsertPropertyDefinitionPropertiesResponse> executeWithHttpInfo() throws ApiException {
            return upsertPropertyDefinitionPropertiesWithHttpInfo(domain, scope, code, requestBody, successMode);
        }

        /**
         * Execute upsertPropertyDefinitionProperties request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;BatchUpsertPropertyDefinitionPropertiesResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The asAt datetime at which the properties were updated or created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<BatchUpsertPropertyDefinitionPropertiesResponse> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return upsertPropertyDefinitionPropertiesWithHttpInfo(domain, scope, code, requestBody, successMode, opts);
        }

        /**
         * Execute upsertPropertyDefinitionProperties request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The asAt datetime at which the properties were updated or created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<BatchUpsertPropertyDefinitionPropertiesResponse> _callback) throws ApiException {
            return upsertPropertyDefinitionPropertiesAsync(domain, scope, code, requestBody, successMode, _callback);
        }

        /**
         * Execute upsertPropertyDefinitionProperties request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The asAt datetime at which the properties were updated or created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<BatchUpsertPropertyDefinitionPropertiesResponse> _callback, ConfigurationOptions opts) throws ApiException {
            return upsertPropertyDefinitionPropertiesAsync(domain, scope, code, requestBody, successMode, _callback, opts);
        }
    }

    /**
     * UpsertPropertyDefinitionProperties: Upsert properties to a property definition
     * Create or update properties for a particular property definition
     * @param domain The domain of the specified property. (required)
     * @param scope The scope of the specified property. (required)
     * @param code The code of the specified property. Together with the domain and scope this uniquely (required)
     * @param requestBody The properties to be created or updated. Each property in   the request must be keyed by its unique property key. This has the format {domain}/{scope}/{code}, for example   &#39;PropertyDefinition/Manager/Id&#39;. (required)
     * @return APIupsertPropertyDefinitionPropertiesRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The asAt datetime at which the properties were updated or created. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIupsertPropertyDefinitionPropertiesRequest upsertPropertyDefinitionProperties(String domain, String scope, String code, Map<String, Property> requestBody) {
        return new APIupsertPropertyDefinitionPropertiesRequest(domain, scope, code, requestBody);
    }
}
