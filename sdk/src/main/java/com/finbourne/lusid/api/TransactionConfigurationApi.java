/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.api;

import com.finbourne.lusid.ApiCallback;
import com.finbourne.lusid.ApiClient;
import com.finbourne.lusid.ApiException;
import com.finbourne.lusid.ApiResponse;
import com.finbourne.lusid.Configuration;
import com.finbourne.lusid.Pair;
import com.finbourne.lusid.ProgressRequestBody;
import com.finbourne.lusid.ProgressResponseBody;
import com.finbourne.lusid.extensions.ConfigurationOptions;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.finbourne.lusid.model.DeletedEntityResponse;
import com.finbourne.lusid.model.LusidProblemDetails;
import com.finbourne.lusid.model.LusidValidationProblemDetails;
import java.time.OffsetDateTime;
import com.finbourne.lusid.model.ResourceListOfSideDefinition;
import com.finbourne.lusid.model.ResourceListOfTransactionType;
import com.finbourne.lusid.model.SideDefinition;
import com.finbourne.lusid.model.SideDefinitionRequest;
import com.finbourne.lusid.model.SidesDefinitionRequest;
import com.finbourne.lusid.model.TransactionType;
import com.finbourne.lusid.model.TransactionTypeRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TransactionConfigurationApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TransactionConfigurationApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TransactionConfigurationApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call deleteSideDefinitionCall(String side, String scope, final ApiCallback _callback) throws ApiException {
        return deleteSideDefinitionCall(side, scope,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call deleteSideDefinitionCall(String side, String scope, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/transactionconfiguration/sides/{side}/$delete"
            .replace("{" + "side" + "}", localVarApiClient.escapeString(side.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (scope != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scope", scope));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteSideDefinitionValidateBeforeCall(String side, String scope, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'side' is set
        if (side == null) {
            throw new ApiException("Missing the required parameter 'side' when calling deleteSideDefinition(Async)");
        }

        return deleteSideDefinitionCall(side, scope, _callback, opts);

    }


    private ApiResponse<DeletedEntityResponse> deleteSideDefinitionWithHttpInfo(String side, String scope) throws ApiException {
        okhttp3.Call localVarCall = deleteSideDefinitionValidateBeforeCall(side, scope, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<DeletedEntityResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<DeletedEntityResponse> deleteSideDefinitionWithHttpInfo(String side, String scope, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = deleteSideDefinitionValidateBeforeCall(side, scope, null, opts);
        Type localVarReturnType = new TypeToken<DeletedEntityResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteSideDefinitionAsync(String side, String scope, final ApiCallback<DeletedEntityResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteSideDefinitionValidateBeforeCall(side, scope, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<DeletedEntityResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call deleteSideDefinitionAsync(String side, String scope, final ApiCallback<DeletedEntityResponse> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = deleteSideDefinitionValidateBeforeCall(side, scope, _callback, opts);
        Type localVarReturnType = new TypeToken<DeletedEntityResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIdeleteSideDefinitionRequest {
        private final String side;
        private String scope;

        private APIdeleteSideDefinitionRequest(String side) {
            this.side = side;
        }

        /**
         * Set scope
         * @param scope The scope in which the side exists. When not supplied the scope is &#39;default&#39;. (optional, default to default)
         * @return APIdeleteSideDefinitionRequest
         */
        public APIdeleteSideDefinitionRequest scope(String scope) {
            this.scope = scope;
            return this;
        }

        /**
         * Build call for deleteSideDefinition
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteSideDefinitionCall(side, scope, _callback);
        }

        /**
         * Execute deleteSideDefinition request
         * @return DeletedEntityResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public DeletedEntityResponse execute() throws ApiException {
            ApiResponse<DeletedEntityResponse> localVarResp = deleteSideDefinitionWithHttpInfo(side, scope);
            return localVarResp.getData();
        }

        /**
         * Execute deleteSideDefinition request. Use any specified configuration options to override any other configuration for this request only.
         * @return DeletedEntityResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public DeletedEntityResponse execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<DeletedEntityResponse> localVarResp = deleteSideDefinitionWithHttpInfo(side, scope, opts);
            return localVarResp.getData();
        }

        /**
         * Execute deleteSideDefinition request with HTTP info returned
         * @return ApiResponse&lt;DeletedEntityResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DeletedEntityResponse> executeWithHttpInfo() throws ApiException {
            return deleteSideDefinitionWithHttpInfo(side, scope);
        }

        /**
         * Execute deleteSideDefinition request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;DeletedEntityResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DeletedEntityResponse> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return deleteSideDefinitionWithHttpInfo(side, scope, opts);
        }

        /**
         * Execute deleteSideDefinition request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DeletedEntityResponse> _callback) throws ApiException {
            return deleteSideDefinitionAsync(side, scope, _callback);
        }

        /**
         * Execute deleteSideDefinition request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DeletedEntityResponse> _callback, ConfigurationOptions opts) throws ApiException {
            return deleteSideDefinitionAsync(side, scope, _callback, opts);
        }
    }

    /**
     * DeleteSideDefinition: Delete the given side definition
     * Delete the side which user specify in the request.
     * @param side The label to uniquely identify the side. (required)
     * @return APIdeleteSideDefinitionRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIdeleteSideDefinitionRequest deleteSideDefinition(String side) {
        return new APIdeleteSideDefinitionRequest(side);
    }
    private okhttp3.Call deleteTransactionTypeCall(String source, String type, String scope, final ApiCallback _callback) throws ApiException {
        return deleteTransactionTypeCall(source, type, scope,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call deleteTransactionTypeCall(String source, String type, String scope, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/transactionconfiguration/types/{source}/{type}"
            .replace("{" + "source" + "}", localVarApiClient.escapeString(source.toString()))
            .replace("{" + "type" + "}", localVarApiClient.escapeString(type.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (scope != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scope", scope));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteTransactionTypeValidateBeforeCall(String source, String type, String scope, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'source' is set
        if (source == null) {
            throw new ApiException("Missing the required parameter 'source' when calling deleteTransactionType(Async)");
        }

        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling deleteTransactionType(Async)");
        }

        return deleteTransactionTypeCall(source, type, scope, _callback, opts);

    }


    private ApiResponse<DeletedEntityResponse> deleteTransactionTypeWithHttpInfo(String source, String type, String scope) throws ApiException {
        okhttp3.Call localVarCall = deleteTransactionTypeValidateBeforeCall(source, type, scope, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<DeletedEntityResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<DeletedEntityResponse> deleteTransactionTypeWithHttpInfo(String source, String type, String scope, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = deleteTransactionTypeValidateBeforeCall(source, type, scope, null, opts);
        Type localVarReturnType = new TypeToken<DeletedEntityResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteTransactionTypeAsync(String source, String type, String scope, final ApiCallback<DeletedEntityResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteTransactionTypeValidateBeforeCall(source, type, scope, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<DeletedEntityResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call deleteTransactionTypeAsync(String source, String type, String scope, final ApiCallback<DeletedEntityResponse> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = deleteTransactionTypeValidateBeforeCall(source, type, scope, _callback, opts);
        Type localVarReturnType = new TypeToken<DeletedEntityResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIdeleteTransactionTypeRequest {
        private final String source;
        private final String type;
        private String scope;

        private APIdeleteTransactionTypeRequest(String source, String type) {
            this.source = source;
            this.type = type;
        }

        /**
         * Set scope
         * @param scope The scope in which the transaction types exists. When not supplied the scope is &#39;default&#39;. (optional, default to default)
         * @return APIdeleteTransactionTypeRequest
         */
        public APIdeleteTransactionTypeRequest scope(String scope) {
            this.scope = scope;
            return this;
        }

        /**
         * Build call for deleteTransactionType
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteTransactionTypeCall(source, type, scope, _callback);
        }

        /**
         * Execute deleteTransactionType request
         * @return DeletedEntityResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public DeletedEntityResponse execute() throws ApiException {
            ApiResponse<DeletedEntityResponse> localVarResp = deleteTransactionTypeWithHttpInfo(source, type, scope);
            return localVarResp.getData();
        }

        /**
         * Execute deleteTransactionType request. Use any specified configuration options to override any other configuration for this request only.
         * @return DeletedEntityResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public DeletedEntityResponse execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<DeletedEntityResponse> localVarResp = deleteTransactionTypeWithHttpInfo(source, type, scope, opts);
            return localVarResp.getData();
        }

        /**
         * Execute deleteTransactionType request with HTTP info returned
         * @return ApiResponse&lt;DeletedEntityResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DeletedEntityResponse> executeWithHttpInfo() throws ApiException {
            return deleteTransactionTypeWithHttpInfo(source, type, scope);
        }

        /**
         * Execute deleteTransactionType request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;DeletedEntityResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DeletedEntityResponse> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return deleteTransactionTypeWithHttpInfo(source, type, scope, opts);
        }

        /**
         * Execute deleteTransactionType request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DeletedEntityResponse> _callback) throws ApiException {
            return deleteTransactionTypeAsync(source, type, scope, _callback);
        }

        /**
         * Execute deleteTransactionType request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DeletedEntityResponse> _callback, ConfigurationOptions opts) throws ApiException {
            return deleteTransactionTypeAsync(source, type, scope, _callback, opts);
        }
    }

    /**
     * DeleteTransactionType: Delete a transaction type
     * /// WARNING! Changing existing transaction types has a material impact on how data, new and old,  is processed and aggregated by LUSID, and will affect your whole organisation. Only call this API if you are fully aware of the implications of the change.
     * @param source The source that the type is in (required)
     * @param type One of the type&#39;s aliases (required)
     * @return APIdeleteTransactionTypeRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIdeleteTransactionTypeRequest deleteTransactionType(String source, String type) {
        return new APIdeleteTransactionTypeRequest(source, type);
    }
    private okhttp3.Call deleteTransactionTypeSourceCall(String source, String scope, final ApiCallback _callback) throws ApiException {
        return deleteTransactionTypeSourceCall(source, scope,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call deleteTransactionTypeSourceCall(String source, String scope, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/transactionconfiguration/types/{source}/$delete"
            .replace("{" + "source" + "}", localVarApiClient.escapeString(source.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (scope != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scope", scope));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteTransactionTypeSourceValidateBeforeCall(String source, String scope, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'source' is set
        if (source == null) {
            throw new ApiException("Missing the required parameter 'source' when calling deleteTransactionTypeSource(Async)");
        }

        return deleteTransactionTypeSourceCall(source, scope, _callback, opts);

    }


    private ApiResponse<DeletedEntityResponse> deleteTransactionTypeSourceWithHttpInfo(String source, String scope) throws ApiException {
        okhttp3.Call localVarCall = deleteTransactionTypeSourceValidateBeforeCall(source, scope, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<DeletedEntityResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<DeletedEntityResponse> deleteTransactionTypeSourceWithHttpInfo(String source, String scope, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = deleteTransactionTypeSourceValidateBeforeCall(source, scope, null, opts);
        Type localVarReturnType = new TypeToken<DeletedEntityResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteTransactionTypeSourceAsync(String source, String scope, final ApiCallback<DeletedEntityResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteTransactionTypeSourceValidateBeforeCall(source, scope, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<DeletedEntityResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call deleteTransactionTypeSourceAsync(String source, String scope, final ApiCallback<DeletedEntityResponse> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = deleteTransactionTypeSourceValidateBeforeCall(source, scope, _callback, opts);
        Type localVarReturnType = new TypeToken<DeletedEntityResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIdeleteTransactionTypeSourceRequest {
        private final String source;
        private String scope;

        private APIdeleteTransactionTypeSourceRequest(String source) {
            this.source = source;
        }

        /**
         * Set scope
         * @param scope The scope in which the transaction types exists. When not supplied the scope is &#39;default&#39;. (optional, default to default)
         * @return APIdeleteTransactionTypeSourceRequest
         */
        public APIdeleteTransactionTypeSourceRequest scope(String scope) {
            this.scope = scope;
            return this;
        }

        /**
         * Build call for deleteTransactionTypeSource
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteTransactionTypeSourceCall(source, scope, _callback);
        }

        /**
         * Execute deleteTransactionTypeSource request
         * @return DeletedEntityResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public DeletedEntityResponse execute() throws ApiException {
            ApiResponse<DeletedEntityResponse> localVarResp = deleteTransactionTypeSourceWithHttpInfo(source, scope);
            return localVarResp.getData();
        }

        /**
         * Execute deleteTransactionTypeSource request. Use any specified configuration options to override any other configuration for this request only.
         * @return DeletedEntityResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public DeletedEntityResponse execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<DeletedEntityResponse> localVarResp = deleteTransactionTypeSourceWithHttpInfo(source, scope, opts);
            return localVarResp.getData();
        }

        /**
         * Execute deleteTransactionTypeSource request with HTTP info returned
         * @return ApiResponse&lt;DeletedEntityResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DeletedEntityResponse> executeWithHttpInfo() throws ApiException {
            return deleteTransactionTypeSourceWithHttpInfo(source, scope);
        }

        /**
         * Execute deleteTransactionTypeSource request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;DeletedEntityResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DeletedEntityResponse> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return deleteTransactionTypeSourceWithHttpInfo(source, scope, opts);
        }

        /**
         * Execute deleteTransactionTypeSource request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DeletedEntityResponse> _callback) throws ApiException {
            return deleteTransactionTypeSourceAsync(source, scope, _callback);
        }

        /**
         * Execute deleteTransactionTypeSource request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DeletedEntityResponse> _callback, ConfigurationOptions opts) throws ApiException {
            return deleteTransactionTypeSourceAsync(source, scope, _callback, opts);
        }
    }

    /**
     * DeleteTransactionTypeSource: Delete all transaction types for the given source and scope
     * Delete all the types for the given source and scope.
     * @param source The source to set the transaction types for. (required)
     * @return APIdeleteTransactionTypeSourceRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIdeleteTransactionTypeSourceRequest deleteTransactionTypeSource(String source) {
        return new APIdeleteTransactionTypeSourceRequest(source);
    }
    private okhttp3.Call getSideDefinitionCall(String side, String scope, OffsetDateTime asAt, final ApiCallback _callback) throws ApiException {
        return getSideDefinitionCall(side, scope, asAt,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call getSideDefinitionCall(String side, String scope, OffsetDateTime asAt, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/transactionconfiguration/sides/{side}"
            .replace("{" + "side" + "}", localVarApiClient.escapeString(side.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (scope != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scope", scope));
        }

        if (asAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asAt", asAt));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSideDefinitionValidateBeforeCall(String side, String scope, OffsetDateTime asAt, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'side' is set
        if (side == null) {
            throw new ApiException("Missing the required parameter 'side' when calling getSideDefinition(Async)");
        }

        return getSideDefinitionCall(side, scope, asAt, _callback, opts);

    }


    private ApiResponse<SideDefinition> getSideDefinitionWithHttpInfo(String side, String scope, OffsetDateTime asAt) throws ApiException {
        okhttp3.Call localVarCall = getSideDefinitionValidateBeforeCall(side, scope, asAt, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<SideDefinition>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<SideDefinition> getSideDefinitionWithHttpInfo(String side, String scope, OffsetDateTime asAt, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = getSideDefinitionValidateBeforeCall(side, scope, asAt, null, opts);
        Type localVarReturnType = new TypeToken<SideDefinition>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSideDefinitionAsync(String side, String scope, OffsetDateTime asAt, final ApiCallback<SideDefinition> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSideDefinitionValidateBeforeCall(side, scope, asAt, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<SideDefinition>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call getSideDefinitionAsync(String side, String scope, OffsetDateTime asAt, final ApiCallback<SideDefinition> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = getSideDefinitionValidateBeforeCall(side, scope, asAt, _callback, opts);
        Type localVarReturnType = new TypeToken<SideDefinition>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetSideDefinitionRequest {
        private final String side;
        private String scope;
        private OffsetDateTime asAt;

        private APIgetSideDefinitionRequest(String side) {
            this.side = side;
        }

        /**
         * Set scope
         * @param scope The scope in which the side exists. When not supplied the scope is &#39;default&#39;. (optional, default to default)
         * @return APIgetSideDefinitionRequest
         */
        public APIgetSideDefinitionRequest scope(String scope) {
            this.scope = scope;
            return this;
        }

        /**
         * Set asAt
         * @param asAt The asAt datetime at which to retrieve the transaction types. Defaults to returning the latest versions if not specified. (optional)
         * @return APIgetSideDefinitionRequest
         */
        public APIgetSideDefinitionRequest asAt(OffsetDateTime asAt) {
            this.asAt = asAt;
            return this;
        }

        /**
         * Build call for getSideDefinition
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSideDefinitionCall(side, scope, asAt, _callback);
        }

        /**
         * Execute getSideDefinition request
         * @return SideDefinition
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public SideDefinition execute() throws ApiException {
            ApiResponse<SideDefinition> localVarResp = getSideDefinitionWithHttpInfo(side, scope, asAt);
            return localVarResp.getData();
        }

        /**
         * Execute getSideDefinition request. Use any specified configuration options to override any other configuration for this request only.
         * @return SideDefinition
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public SideDefinition execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<SideDefinition> localVarResp = getSideDefinitionWithHttpInfo(side, scope, asAt, opts);
            return localVarResp.getData();
        }

        /**
         * Execute getSideDefinition request with HTTP info returned
         * @return ApiResponse&lt;SideDefinition&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SideDefinition> executeWithHttpInfo() throws ApiException {
            return getSideDefinitionWithHttpInfo(side, scope, asAt);
        }

        /**
         * Execute getSideDefinition request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;SideDefinition&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SideDefinition> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return getSideDefinitionWithHttpInfo(side, scope, asAt, opts);
        }

        /**
         * Execute getSideDefinition request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SideDefinition> _callback) throws ApiException {
            return getSideDefinitionAsync(side, scope, asAt, _callback);
        }

        /**
         * Execute getSideDefinition request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SideDefinition> _callback, ConfigurationOptions opts) throws ApiException {
            return getSideDefinitionAsync(side, scope, asAt, _callback, opts);
        }
    }

    /**
     * GetSideDefinition: Get the side definition for a given side name( or label)
     * Get the side definition user requested.
     * @param side The label to uniquely identify the side. (required)
     * @return APIgetSideDefinitionRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIgetSideDefinitionRequest getSideDefinition(String side) {
        return new APIgetSideDefinitionRequest(side);
    }
    private okhttp3.Call getTransactionTypeCall(String source, String type, OffsetDateTime asAt, String scope, final ApiCallback _callback) throws ApiException {
        return getTransactionTypeCall(source, type, asAt, scope,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call getTransactionTypeCall(String source, String type, OffsetDateTime asAt, String scope, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/transactionconfiguration/types/{source}/{type}"
            .replace("{" + "source" + "}", localVarApiClient.escapeString(source.toString()))
            .replace("{" + "type" + "}", localVarApiClient.escapeString(type.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (asAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asAt", asAt));
        }

        if (scope != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scope", scope));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTransactionTypeValidateBeforeCall(String source, String type, OffsetDateTime asAt, String scope, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'source' is set
        if (source == null) {
            throw new ApiException("Missing the required parameter 'source' when calling getTransactionType(Async)");
        }

        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling getTransactionType(Async)");
        }

        return getTransactionTypeCall(source, type, asAt, scope, _callback, opts);

    }


    private ApiResponse<TransactionType> getTransactionTypeWithHttpInfo(String source, String type, OffsetDateTime asAt, String scope) throws ApiException {
        okhttp3.Call localVarCall = getTransactionTypeValidateBeforeCall(source, type, asAt, scope, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<TransactionType>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<TransactionType> getTransactionTypeWithHttpInfo(String source, String type, OffsetDateTime asAt, String scope, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = getTransactionTypeValidateBeforeCall(source, type, asAt, scope, null, opts);
        Type localVarReturnType = new TypeToken<TransactionType>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getTransactionTypeAsync(String source, String type, OffsetDateTime asAt, String scope, final ApiCallback<TransactionType> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTransactionTypeValidateBeforeCall(source, type, asAt, scope, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<TransactionType>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call getTransactionTypeAsync(String source, String type, OffsetDateTime asAt, String scope, final ApiCallback<TransactionType> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = getTransactionTypeValidateBeforeCall(source, type, asAt, scope, _callback, opts);
        Type localVarReturnType = new TypeToken<TransactionType>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetTransactionTypeRequest {
        private final String source;
        private final String type;
        private OffsetDateTime asAt;
        private String scope;

        private APIgetTransactionTypeRequest(String source, String type) {
            this.source = source;
            this.type = type;
        }

        /**
         * Set asAt
         * @param asAt The asAt datetime at which to retrieve the transaction configuration.   Defaults to returning the latest version of the transaction configuration type if not specified (optional)
         * @return APIgetTransactionTypeRequest
         */
        public APIgetTransactionTypeRequest asAt(OffsetDateTime asAt) {
            this.asAt = asAt;
            return this;
        }

        /**
         * Set scope
         * @param scope The scope in which the transaction types exists. When not supplied the scope is &#39;default&#39;. (optional, default to default)
         * @return APIgetTransactionTypeRequest
         */
        public APIgetTransactionTypeRequest scope(String scope) {
            this.scope = scope;
            return this;
        }

        /**
         * Build call for getTransactionType
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getTransactionTypeCall(source, type, asAt, scope, _callback);
        }

        /**
         * Execute getTransactionType request
         * @return TransactionType
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public TransactionType execute() throws ApiException {
            ApiResponse<TransactionType> localVarResp = getTransactionTypeWithHttpInfo(source, type, asAt, scope);
            return localVarResp.getData();
        }

        /**
         * Execute getTransactionType request. Use any specified configuration options to override any other configuration for this request only.
         * @return TransactionType
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public TransactionType execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<TransactionType> localVarResp = getTransactionTypeWithHttpInfo(source, type, asAt, scope, opts);
            return localVarResp.getData();
        }

        /**
         * Execute getTransactionType request with HTTP info returned
         * @return ApiResponse&lt;TransactionType&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TransactionType> executeWithHttpInfo() throws ApiException {
            return getTransactionTypeWithHttpInfo(source, type, asAt, scope);
        }

        /**
         * Execute getTransactionType request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;TransactionType&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TransactionType> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return getTransactionTypeWithHttpInfo(source, type, asAt, scope, opts);
        }

        /**
         * Execute getTransactionType request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TransactionType> _callback) throws ApiException {
            return getTransactionTypeAsync(source, type, asAt, scope, _callback);
        }

        /**
         * Execute getTransactionType request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TransactionType> _callback, ConfigurationOptions opts) throws ApiException {
            return getTransactionTypeAsync(source, type, asAt, scope, _callback, opts);
        }
    }

    /**
     * GetTransactionType: Get a single transaction configuration type
     * Get a single transaction type. Returns failure if not found
     * @param source The source that the type is in (required)
     * @param type One of the type&#39;s aliases (required)
     * @return APIgetTransactionTypeRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIgetTransactionTypeRequest getTransactionType(String source, String type) {
        return new APIgetTransactionTypeRequest(source, type);
    }
    private okhttp3.Call listSideDefinitionsCall(OffsetDateTime asAt, String scope, final ApiCallback _callback) throws ApiException {
        return listSideDefinitionsCall(asAt, scope,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call listSideDefinitionsCall(OffsetDateTime asAt, String scope, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/transactionconfiguration/sides";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (asAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asAt", asAt));
        }

        if (scope != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scope", scope));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listSideDefinitionsValidateBeforeCall(OffsetDateTime asAt, String scope, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        return listSideDefinitionsCall(asAt, scope, _callback, opts);

    }


    private ApiResponse<ResourceListOfSideDefinition> listSideDefinitionsWithHttpInfo(OffsetDateTime asAt, String scope) throws ApiException {
        okhttp3.Call localVarCall = listSideDefinitionsValidateBeforeCall(asAt, scope, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<ResourceListOfSideDefinition>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<ResourceListOfSideDefinition> listSideDefinitionsWithHttpInfo(OffsetDateTime asAt, String scope, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = listSideDefinitionsValidateBeforeCall(asAt, scope, null, opts);
        Type localVarReturnType = new TypeToken<ResourceListOfSideDefinition>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listSideDefinitionsAsync(OffsetDateTime asAt, String scope, final ApiCallback<ResourceListOfSideDefinition> _callback) throws ApiException {

        okhttp3.Call localVarCall = listSideDefinitionsValidateBeforeCall(asAt, scope, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<ResourceListOfSideDefinition>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call listSideDefinitionsAsync(OffsetDateTime asAt, String scope, final ApiCallback<ResourceListOfSideDefinition> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = listSideDefinitionsValidateBeforeCall(asAt, scope, _callback, opts);
        Type localVarReturnType = new TypeToken<ResourceListOfSideDefinition>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIlistSideDefinitionsRequest {
        private OffsetDateTime asAt;
        private String scope;

        private APIlistSideDefinitionsRequest() {
        }

        /**
         * Set asAt
         * @param asAt The asAt datetime at which to retrieve the transaction types. Defaults to returning the latest versions if not specified. (optional)
         * @return APIlistSideDefinitionsRequest
         */
        public APIlistSideDefinitionsRequest asAt(OffsetDateTime asAt) {
            this.asAt = asAt;
            return this;
        }

        /**
         * Set scope
         * @param scope The scope in which the side exists. When not supplied the scope is &#39;default&#39;. (optional, default to default)
         * @return APIlistSideDefinitionsRequest
         */
        public APIlistSideDefinitionsRequest scope(String scope) {
            this.scope = scope;
            return this;
        }

        /**
         * Build call for listSideDefinitions
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listSideDefinitionsCall(asAt, scope, _callback);
        }

        /**
         * Execute listSideDefinitions request
         * @return ResourceListOfSideDefinition
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ResourceListOfSideDefinition execute() throws ApiException {
            ApiResponse<ResourceListOfSideDefinition> localVarResp = listSideDefinitionsWithHttpInfo(asAt, scope);
            return localVarResp.getData();
        }

        /**
         * Execute listSideDefinitions request. Use any specified configuration options to override any other configuration for this request only.
         * @return ResourceListOfSideDefinition
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ResourceListOfSideDefinition execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<ResourceListOfSideDefinition> localVarResp = listSideDefinitionsWithHttpInfo(asAt, scope, opts);
            return localVarResp.getData();
        }

        /**
         * Execute listSideDefinitions request with HTTP info returned
         * @return ApiResponse&lt;ResourceListOfSideDefinition&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ResourceListOfSideDefinition> executeWithHttpInfo() throws ApiException {
            return listSideDefinitionsWithHttpInfo(asAt, scope);
        }

        /**
         * Execute listSideDefinitions request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;ResourceListOfSideDefinition&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ResourceListOfSideDefinition> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return listSideDefinitionsWithHttpInfo(asAt, scope, opts);
        }

        /**
         * Execute listSideDefinitions request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ResourceListOfSideDefinition> _callback) throws ApiException {
            return listSideDefinitionsAsync(asAt, scope, _callback);
        }

        /**
         * Execute listSideDefinitions request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ResourceListOfSideDefinition> _callback, ConfigurationOptions opts) throws ApiException {
            return listSideDefinitionsAsync(asAt, scope, _callback, opts);
        }
    }

    /**
     * ListSideDefinitions: List the side definitions
     * List all the side definitions in the given scope
     * @return APIlistSideDefinitionsRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIlistSideDefinitionsRequest listSideDefinitions() {
        return new APIlistSideDefinitionsRequest();
    }
    private okhttp3.Call listTransactionTypesCall(OffsetDateTime asAt, String scope, final ApiCallback _callback) throws ApiException {
        return listTransactionTypesCall(asAt, scope,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call listTransactionTypesCall(OffsetDateTime asAt, String scope, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/transactionconfiguration/types";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (asAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asAt", asAt));
        }

        if (scope != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scope", scope));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listTransactionTypesValidateBeforeCall(OffsetDateTime asAt, String scope, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        return listTransactionTypesCall(asAt, scope, _callback, opts);

    }


    private ApiResponse<Map<String, List<TransactionType>>> listTransactionTypesWithHttpInfo(OffsetDateTime asAt, String scope) throws ApiException {
        okhttp3.Call localVarCall = listTransactionTypesValidateBeforeCall(asAt, scope, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<Map<String, List<TransactionType>>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<Map<String, List<TransactionType>>> listTransactionTypesWithHttpInfo(OffsetDateTime asAt, String scope, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = listTransactionTypesValidateBeforeCall(asAt, scope, null, opts);
        Type localVarReturnType = new TypeToken<Map<String, List<TransactionType>>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listTransactionTypesAsync(OffsetDateTime asAt, String scope, final ApiCallback<Map<String, List<TransactionType>>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listTransactionTypesValidateBeforeCall(asAt, scope, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<Map<String, List<TransactionType>>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call listTransactionTypesAsync(OffsetDateTime asAt, String scope, final ApiCallback<Map<String, List<TransactionType>>> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = listTransactionTypesValidateBeforeCall(asAt, scope, _callback, opts);
        Type localVarReturnType = new TypeToken<Map<String, List<TransactionType>>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIlistTransactionTypesRequest {
        private OffsetDateTime asAt;
        private String scope;

        private APIlistTransactionTypesRequest() {
        }

        /**
         * Set asAt
         * @param asAt The asAt datetime at which to retrieve the transaction types. Defaults   to returning the latest versions if not specified. (optional)
         * @return APIlistTransactionTypesRequest
         */
        public APIlistTransactionTypesRequest asAt(OffsetDateTime asAt) {
            this.asAt = asAt;
            return this;
        }

        /**
         * Set scope
         * @param scope The scope in which the side exists. When not supplied the scope is &#39;default&#39;. (optional, default to default)
         * @return APIlistTransactionTypesRequest
         */
        public APIlistTransactionTypesRequest scope(String scope) {
            this.scope = scope;
            return this;
        }

        /**
         * Build call for listTransactionTypes
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listTransactionTypesCall(asAt, scope, _callback);
        }

        /**
         * Execute listTransactionTypes request
         * @return Map&lt;String, List&lt;TransactionType&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public Map<String, List<TransactionType>> execute() throws ApiException {
            ApiResponse<Map<String, List<TransactionType>>> localVarResp = listTransactionTypesWithHttpInfo(asAt, scope);
            return localVarResp.getData();
        }

        /**
         * Execute listTransactionTypes request. Use any specified configuration options to override any other configuration for this request only.
         * @return Map&lt;String, List&lt;TransactionType&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public Map<String, List<TransactionType>> execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<Map<String, List<TransactionType>>> localVarResp = listTransactionTypesWithHttpInfo(asAt, scope, opts);
            return localVarResp.getData();
        }

        /**
         * Execute listTransactionTypes request with HTTP info returned
         * @return ApiResponse&lt;Map&lt;String, List&lt;TransactionType&gt;&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Map<String, List<TransactionType>>> executeWithHttpInfo() throws ApiException {
            return listTransactionTypesWithHttpInfo(asAt, scope);
        }

        /**
         * Execute listTransactionTypes request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;Map&lt;String, List&lt;TransactionType&gt;&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Map<String, List<TransactionType>>> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return listTransactionTypesWithHttpInfo(asAt, scope, opts);
        }

        /**
         * Execute listTransactionTypes request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Map<String, List<TransactionType>>> _callback) throws ApiException {
            return listTransactionTypesAsync(asAt, scope, _callback);
        }

        /**
         * Execute listTransactionTypes request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Map<String, List<TransactionType>>> _callback, ConfigurationOptions opts) throws ApiException {
            return listTransactionTypesAsync(asAt, scope, _callback, opts);
        }
    }

    /**
     * ListTransactionTypes: List transaction types
     * Get the list of current transaction types. For information on the default transaction types provided with  LUSID, see https://support.lusid.com/knowledgebase/article/KA-01873/.
     * @return APIlistTransactionTypesRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIlistTransactionTypesRequest listTransactionTypes() {
        return new APIlistTransactionTypesRequest();
    }
    private okhttp3.Call setSideDefinitionCall(String side, SideDefinitionRequest sideDefinitionRequest, String scope, final ApiCallback _callback) throws ApiException {
        return setSideDefinitionCall(side, sideDefinitionRequest, scope,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call setSideDefinitionCall(String side, SideDefinitionRequest sideDefinitionRequest, String scope, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = sideDefinitionRequest;

        // create path and map variables
        String localVarPath = "/api/transactionconfiguration/sides/{side}"
            .replace("{" + "side" + "}", localVarApiClient.escapeString(side.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (scope != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scope", scope));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setSideDefinitionValidateBeforeCall(String side, SideDefinitionRequest sideDefinitionRequest, String scope, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'side' is set
        if (side == null) {
            throw new ApiException("Missing the required parameter 'side' when calling setSideDefinition(Async)");
        }

        // verify the required parameter 'sideDefinitionRequest' is set
        if (sideDefinitionRequest == null) {
            throw new ApiException("Missing the required parameter 'sideDefinitionRequest' when calling setSideDefinition(Async)");
        }

        return setSideDefinitionCall(side, sideDefinitionRequest, scope, _callback, opts);

    }


    private ApiResponse<SideDefinition> setSideDefinitionWithHttpInfo(String side, SideDefinitionRequest sideDefinitionRequest, String scope) throws ApiException {
        okhttp3.Call localVarCall = setSideDefinitionValidateBeforeCall(side, sideDefinitionRequest, scope, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<SideDefinition>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<SideDefinition> setSideDefinitionWithHttpInfo(String side, SideDefinitionRequest sideDefinitionRequest, String scope, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = setSideDefinitionValidateBeforeCall(side, sideDefinitionRequest, scope, null, opts);
        Type localVarReturnType = new TypeToken<SideDefinition>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call setSideDefinitionAsync(String side, SideDefinitionRequest sideDefinitionRequest, String scope, final ApiCallback<SideDefinition> _callback) throws ApiException {

        okhttp3.Call localVarCall = setSideDefinitionValidateBeforeCall(side, sideDefinitionRequest, scope, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<SideDefinition>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call setSideDefinitionAsync(String side, SideDefinitionRequest sideDefinitionRequest, String scope, final ApiCallback<SideDefinition> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = setSideDefinitionValidateBeforeCall(side, sideDefinitionRequest, scope, _callback, opts);
        Type localVarReturnType = new TypeToken<SideDefinition>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIsetSideDefinitionRequest {
        private final String side;
        private final SideDefinitionRequest sideDefinitionRequest;
        private String scope;

        private APIsetSideDefinitionRequest(String side, SideDefinitionRequest sideDefinitionRequest) {
            this.side = side;
            this.sideDefinitionRequest = sideDefinitionRequest;
        }

        /**
         * Set scope
         * @param scope The scope in which the side exists. When not supplied the scope is &#39;default&#39;. (optional, default to default)
         * @return APIsetSideDefinitionRequest
         */
        public APIsetSideDefinitionRequest scope(String scope) {
            this.scope = scope;
            return this;
        }

        /**
         * Build call for setSideDefinition
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return setSideDefinitionCall(side, sideDefinitionRequest, scope, _callback);
        }

        /**
         * Execute setSideDefinition request
         * @return SideDefinition
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public SideDefinition execute() throws ApiException {
            ApiResponse<SideDefinition> localVarResp = setSideDefinitionWithHttpInfo(side, sideDefinitionRequest, scope);
            return localVarResp.getData();
        }

        /**
         * Execute setSideDefinition request. Use any specified configuration options to override any other configuration for this request only.
         * @return SideDefinition
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public SideDefinition execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<SideDefinition> localVarResp = setSideDefinitionWithHttpInfo(side, sideDefinitionRequest, scope, opts);
            return localVarResp.getData();
        }

        /**
         * Execute setSideDefinition request with HTTP info returned
         * @return ApiResponse&lt;SideDefinition&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SideDefinition> executeWithHttpInfo() throws ApiException {
            return setSideDefinitionWithHttpInfo(side, sideDefinitionRequest, scope);
        }

        /**
         * Execute setSideDefinition request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;SideDefinition&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SideDefinition> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return setSideDefinitionWithHttpInfo(side, sideDefinitionRequest, scope, opts);
        }

        /**
         * Execute setSideDefinition request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SideDefinition> _callback) throws ApiException {
            return setSideDefinitionAsync(side, sideDefinitionRequest, scope, _callback);
        }

        /**
         * Execute setSideDefinition request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SideDefinition> _callback, ConfigurationOptions opts) throws ApiException {
            return setSideDefinitionAsync(side, sideDefinitionRequest, scope, _callback, opts);
        }
    }

    /**
     * SetSideDefinition: Set a side definition
     * Set a new side definition for use in a transaction type. For more information, see https://support.lusid.com/knowledgebase/article/KA-01875.
     * @param side The label to uniquely identify the side. (required)
     * @param sideDefinitionRequest The side definition to create or replace. (required)
     * @return APIsetSideDefinitionRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIsetSideDefinitionRequest setSideDefinition(String side, SideDefinitionRequest sideDefinitionRequest) {
        return new APIsetSideDefinitionRequest(side, sideDefinitionRequest);
    }
    private okhttp3.Call setSideDefinitionsCall(List<SidesDefinitionRequest> sidesDefinitionRequest, String scope, final ApiCallback _callback) throws ApiException {
        return setSideDefinitionsCall(sidesDefinitionRequest, scope,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call setSideDefinitionsCall(List<SidesDefinitionRequest> sidesDefinitionRequest, String scope, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = sidesDefinitionRequest;

        // create path and map variables
        String localVarPath = "/api/transactionconfiguration/sides";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (scope != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scope", scope));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setSideDefinitionsValidateBeforeCall(List<SidesDefinitionRequest> sidesDefinitionRequest, String scope, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'sidesDefinitionRequest' is set
        if (sidesDefinitionRequest == null) {
            throw new ApiException("Missing the required parameter 'sidesDefinitionRequest' when calling setSideDefinitions(Async)");
        }

        return setSideDefinitionsCall(sidesDefinitionRequest, scope, _callback, opts);

    }


    private ApiResponse<ResourceListOfSideDefinition> setSideDefinitionsWithHttpInfo(List<SidesDefinitionRequest> sidesDefinitionRequest, String scope) throws ApiException {
        okhttp3.Call localVarCall = setSideDefinitionsValidateBeforeCall(sidesDefinitionRequest, scope, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<ResourceListOfSideDefinition>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<ResourceListOfSideDefinition> setSideDefinitionsWithHttpInfo(List<SidesDefinitionRequest> sidesDefinitionRequest, String scope, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = setSideDefinitionsValidateBeforeCall(sidesDefinitionRequest, scope, null, opts);
        Type localVarReturnType = new TypeToken<ResourceListOfSideDefinition>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call setSideDefinitionsAsync(List<SidesDefinitionRequest> sidesDefinitionRequest, String scope, final ApiCallback<ResourceListOfSideDefinition> _callback) throws ApiException {

        okhttp3.Call localVarCall = setSideDefinitionsValidateBeforeCall(sidesDefinitionRequest, scope, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<ResourceListOfSideDefinition>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call setSideDefinitionsAsync(List<SidesDefinitionRequest> sidesDefinitionRequest, String scope, final ApiCallback<ResourceListOfSideDefinition> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = setSideDefinitionsValidateBeforeCall(sidesDefinitionRequest, scope, _callback, opts);
        Type localVarReturnType = new TypeToken<ResourceListOfSideDefinition>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIsetSideDefinitionsRequest {
        private final List<SidesDefinitionRequest> sidesDefinitionRequest;
        private String scope;

        private APIsetSideDefinitionsRequest(List<SidesDefinitionRequest> sidesDefinitionRequest) {
            this.sidesDefinitionRequest = sidesDefinitionRequest;
        }

        /**
         * Set scope
         * @param scope The scope in which the side exists. When not supplied the scope is &#39;default&#39;. (optional, default to default)
         * @return APIsetSideDefinitionsRequest
         */
        public APIsetSideDefinitionsRequest scope(String scope) {
            this.scope = scope;
            return this;
        }

        /**
         * Build call for setSideDefinitions
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return setSideDefinitionsCall(sidesDefinitionRequest, scope, _callback);
        }

        /**
         * Execute setSideDefinitions request
         * @return ResourceListOfSideDefinition
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ResourceListOfSideDefinition execute() throws ApiException {
            ApiResponse<ResourceListOfSideDefinition> localVarResp = setSideDefinitionsWithHttpInfo(sidesDefinitionRequest, scope);
            return localVarResp.getData();
        }

        /**
         * Execute setSideDefinitions request. Use any specified configuration options to override any other configuration for this request only.
         * @return ResourceListOfSideDefinition
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ResourceListOfSideDefinition execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<ResourceListOfSideDefinition> localVarResp = setSideDefinitionsWithHttpInfo(sidesDefinitionRequest, scope, opts);
            return localVarResp.getData();
        }

        /**
         * Execute setSideDefinitions request with HTTP info returned
         * @return ApiResponse&lt;ResourceListOfSideDefinition&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ResourceListOfSideDefinition> executeWithHttpInfo() throws ApiException {
            return setSideDefinitionsWithHttpInfo(sidesDefinitionRequest, scope);
        }

        /**
         * Execute setSideDefinitions request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;ResourceListOfSideDefinition&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ResourceListOfSideDefinition> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return setSideDefinitionsWithHttpInfo(sidesDefinitionRequest, scope, opts);
        }

        /**
         * Execute setSideDefinitions request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ResourceListOfSideDefinition> _callback) throws ApiException {
            return setSideDefinitionsAsync(sidesDefinitionRequest, scope, _callback);
        }

        /**
         * Execute setSideDefinitions request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ResourceListOfSideDefinition> _callback, ConfigurationOptions opts) throws ApiException {
            return setSideDefinitionsAsync(sidesDefinitionRequest, scope, _callback, opts);
        }
    }

    /**
     * SetSideDefinitions: Set the given side definitions
     * Set a new side definition for use in a transaction type. For more information, see https://support.lusid.com/knowledgebase/article/KA-01875.
     * @param sidesDefinitionRequest The list of side definitions to create, or replace. (required)
     * @return APIsetSideDefinitionsRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIsetSideDefinitionsRequest setSideDefinitions(List<SidesDefinitionRequest> sidesDefinitionRequest) {
        return new APIsetSideDefinitionsRequest(sidesDefinitionRequest);
    }
    private okhttp3.Call setTransactionTypeCall(String source, String type, TransactionTypeRequest transactionTypeRequest, String scope, final ApiCallback _callback) throws ApiException {
        return setTransactionTypeCall(source, type, transactionTypeRequest, scope,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call setTransactionTypeCall(String source, String type, TransactionTypeRequest transactionTypeRequest, String scope, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = transactionTypeRequest;

        // create path and map variables
        String localVarPath = "/api/transactionconfiguration/types/{source}/{type}"
            .replace("{" + "source" + "}", localVarApiClient.escapeString(source.toString()))
            .replace("{" + "type" + "}", localVarApiClient.escapeString(type.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (scope != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scope", scope));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setTransactionTypeValidateBeforeCall(String source, String type, TransactionTypeRequest transactionTypeRequest, String scope, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'source' is set
        if (source == null) {
            throw new ApiException("Missing the required parameter 'source' when calling setTransactionType(Async)");
        }

        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling setTransactionType(Async)");
        }

        // verify the required parameter 'transactionTypeRequest' is set
        if (transactionTypeRequest == null) {
            throw new ApiException("Missing the required parameter 'transactionTypeRequest' when calling setTransactionType(Async)");
        }

        return setTransactionTypeCall(source, type, transactionTypeRequest, scope, _callback, opts);

    }


    private ApiResponse<TransactionType> setTransactionTypeWithHttpInfo(String source, String type, TransactionTypeRequest transactionTypeRequest, String scope) throws ApiException {
        okhttp3.Call localVarCall = setTransactionTypeValidateBeforeCall(source, type, transactionTypeRequest, scope, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<TransactionType>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<TransactionType> setTransactionTypeWithHttpInfo(String source, String type, TransactionTypeRequest transactionTypeRequest, String scope, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = setTransactionTypeValidateBeforeCall(source, type, transactionTypeRequest, scope, null, opts);
        Type localVarReturnType = new TypeToken<TransactionType>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call setTransactionTypeAsync(String source, String type, TransactionTypeRequest transactionTypeRequest, String scope, final ApiCallback<TransactionType> _callback) throws ApiException {

        okhttp3.Call localVarCall = setTransactionTypeValidateBeforeCall(source, type, transactionTypeRequest, scope, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<TransactionType>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call setTransactionTypeAsync(String source, String type, TransactionTypeRequest transactionTypeRequest, String scope, final ApiCallback<TransactionType> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = setTransactionTypeValidateBeforeCall(source, type, transactionTypeRequest, scope, _callback, opts);
        Type localVarReturnType = new TypeToken<TransactionType>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIsetTransactionTypeRequest {
        private final String source;
        private final String type;
        private final TransactionTypeRequest transactionTypeRequest;
        private String scope;

        private APIsetTransactionTypeRequest(String source, String type, TransactionTypeRequest transactionTypeRequest) {
            this.source = source;
            this.type = type;
            this.transactionTypeRequest = transactionTypeRequest;
        }

        /**
         * Set scope
         * @param scope The scope in which the transaction types exists. When not supplied the scope is &#39;default&#39;. (optional, default to default)
         * @return APIsetTransactionTypeRequest
         */
        public APIsetTransactionTypeRequest scope(String scope) {
            this.scope = scope;
            return this;
        }

        /**
         * Build call for setTransactionType
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return setTransactionTypeCall(source, type, transactionTypeRequest, scope, _callback);
        }

        /**
         * Execute setTransactionType request
         * @return TransactionType
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public TransactionType execute() throws ApiException {
            ApiResponse<TransactionType> localVarResp = setTransactionTypeWithHttpInfo(source, type, transactionTypeRequest, scope);
            return localVarResp.getData();
        }

        /**
         * Execute setTransactionType request. Use any specified configuration options to override any other configuration for this request only.
         * @return TransactionType
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public TransactionType execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<TransactionType> localVarResp = setTransactionTypeWithHttpInfo(source, type, transactionTypeRequest, scope, opts);
            return localVarResp.getData();
        }

        /**
         * Execute setTransactionType request with HTTP info returned
         * @return ApiResponse&lt;TransactionType&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TransactionType> executeWithHttpInfo() throws ApiException {
            return setTransactionTypeWithHttpInfo(source, type, transactionTypeRequest, scope);
        }

        /**
         * Execute setTransactionType request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;TransactionType&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TransactionType> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return setTransactionTypeWithHttpInfo(source, type, transactionTypeRequest, scope, opts);
        }

        /**
         * Execute setTransactionType request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TransactionType> _callback) throws ApiException {
            return setTransactionTypeAsync(source, type, transactionTypeRequest, scope, _callback);
        }

        /**
         * Execute setTransactionType request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TransactionType> _callback, ConfigurationOptions opts) throws ApiException {
            return setTransactionTypeAsync(source, type, transactionTypeRequest, scope, _callback, opts);
        }
    }

    /**
     * SetTransactionType: Set a specific transaction type
     * Set a transaction type for the given source and type. If the requested transaction type does not exist, it will be created    WARNING! Changing existing transaction types has a material impact on how data, new and old, is processed and aggregated by LUSID, and will affect your whole organisation. Only call this API if you are fully aware of the implications of the change.
     * @param source The source to set the transaction configuration for (required)
     * @param type One of the transaction configuration alias types to uniquely identify the configuration. If this type does not exist, then a new transaction type is created using the body of the request in the given source, without including this type (required)
     * @param transactionTypeRequest The transaction configuration to set (required)
     * @return APIsetTransactionTypeRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIsetTransactionTypeRequest setTransactionType(String source, String type, TransactionTypeRequest transactionTypeRequest) {
        return new APIsetTransactionTypeRequest(source, type, transactionTypeRequest);
    }
    private okhttp3.Call setTransactionTypeSourceCall(String source, List<TransactionTypeRequest> transactionTypeRequest, String scope, final ApiCallback _callback) throws ApiException {
        return setTransactionTypeSourceCall(source, transactionTypeRequest, scope,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call setTransactionTypeSourceCall(String source, List<TransactionTypeRequest> transactionTypeRequest, String scope, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = transactionTypeRequest;

        // create path and map variables
        String localVarPath = "/api/transactionconfiguration/types/{source}"
            .replace("{" + "source" + "}", localVarApiClient.escapeString(source.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (scope != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scope", scope));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setTransactionTypeSourceValidateBeforeCall(String source, List<TransactionTypeRequest> transactionTypeRequest, String scope, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'source' is set
        if (source == null) {
            throw new ApiException("Missing the required parameter 'source' when calling setTransactionTypeSource(Async)");
        }

        // verify the required parameter 'transactionTypeRequest' is set
        if (transactionTypeRequest == null) {
            throw new ApiException("Missing the required parameter 'transactionTypeRequest' when calling setTransactionTypeSource(Async)");
        }

        return setTransactionTypeSourceCall(source, transactionTypeRequest, scope, _callback, opts);

    }


    private ApiResponse<ResourceListOfTransactionType> setTransactionTypeSourceWithHttpInfo(String source, List<TransactionTypeRequest> transactionTypeRequest, String scope) throws ApiException {
        okhttp3.Call localVarCall = setTransactionTypeSourceValidateBeforeCall(source, transactionTypeRequest, scope, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<ResourceListOfTransactionType>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<ResourceListOfTransactionType> setTransactionTypeSourceWithHttpInfo(String source, List<TransactionTypeRequest> transactionTypeRequest, String scope, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = setTransactionTypeSourceValidateBeforeCall(source, transactionTypeRequest, scope, null, opts);
        Type localVarReturnType = new TypeToken<ResourceListOfTransactionType>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call setTransactionTypeSourceAsync(String source, List<TransactionTypeRequest> transactionTypeRequest, String scope, final ApiCallback<ResourceListOfTransactionType> _callback) throws ApiException {

        okhttp3.Call localVarCall = setTransactionTypeSourceValidateBeforeCall(source, transactionTypeRequest, scope, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<ResourceListOfTransactionType>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call setTransactionTypeSourceAsync(String source, List<TransactionTypeRequest> transactionTypeRequest, String scope, final ApiCallback<ResourceListOfTransactionType> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = setTransactionTypeSourceValidateBeforeCall(source, transactionTypeRequest, scope, _callback, opts);
        Type localVarReturnType = new TypeToken<ResourceListOfTransactionType>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIsetTransactionTypeSourceRequest {
        private final String source;
        private final List<TransactionTypeRequest> transactionTypeRequest;
        private String scope;

        private APIsetTransactionTypeSourceRequest(String source, List<TransactionTypeRequest> transactionTypeRequest) {
            this.source = source;
            this.transactionTypeRequest = transactionTypeRequest;
        }

        /**
         * Set scope
         * @param scope The scope in which the transaction types exists. When not supplied the scope is &#39;default&#39;. (optional, default to default)
         * @return APIsetTransactionTypeSourceRequest
         */
        public APIsetTransactionTypeSourceRequest scope(String scope) {
            this.scope = scope;
            return this;
        }

        /**
         * Build call for setTransactionTypeSource
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return setTransactionTypeSourceCall(source, transactionTypeRequest, scope, _callback);
        }

        /**
         * Execute setTransactionTypeSource request
         * @return ResourceListOfTransactionType
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ResourceListOfTransactionType execute() throws ApiException {
            ApiResponse<ResourceListOfTransactionType> localVarResp = setTransactionTypeSourceWithHttpInfo(source, transactionTypeRequest, scope);
            return localVarResp.getData();
        }

        /**
         * Execute setTransactionTypeSource request. Use any specified configuration options to override any other configuration for this request only.
         * @return ResourceListOfTransactionType
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ResourceListOfTransactionType execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<ResourceListOfTransactionType> localVarResp = setTransactionTypeSourceWithHttpInfo(source, transactionTypeRequest, scope, opts);
            return localVarResp.getData();
        }

        /**
         * Execute setTransactionTypeSource request with HTTP info returned
         * @return ApiResponse&lt;ResourceListOfTransactionType&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ResourceListOfTransactionType> executeWithHttpInfo() throws ApiException {
            return setTransactionTypeSourceWithHttpInfo(source, transactionTypeRequest, scope);
        }

        /**
         * Execute setTransactionTypeSource request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;ResourceListOfTransactionType&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ResourceListOfTransactionType> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return setTransactionTypeSourceWithHttpInfo(source, transactionTypeRequest, scope, opts);
        }

        /**
         * Execute setTransactionTypeSource request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ResourceListOfTransactionType> _callback) throws ApiException {
            return setTransactionTypeSourceAsync(source, transactionTypeRequest, scope, _callback);
        }

        /**
         * Execute setTransactionTypeSource request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ResourceListOfTransactionType> _callback, ConfigurationOptions opts) throws ApiException {
            return setTransactionTypeSourceAsync(source, transactionTypeRequest, scope, _callback, opts);
        }
    }

    /**
     * SetTransactionTypeSource: Set the transaction types for the given source and scope
     * The complete set of transaction types for the source.
     * @param source The source to set the transaction types for. (required)
     * @param transactionTypeRequest The set of transaction types. (required)
     * @return APIsetTransactionTypeSourceRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIsetTransactionTypeSourceRequest setTransactionTypeSource(String source, List<TransactionTypeRequest> transactionTypeRequest) {
        return new APIsetTransactionTypeSourceRequest(source, transactionTypeRequest);
    }
}
