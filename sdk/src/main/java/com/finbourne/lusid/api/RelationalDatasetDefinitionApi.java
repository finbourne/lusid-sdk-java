/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.api;

import com.finbourne.lusid.ApiCallback;
import com.finbourne.lusid.ApiClient;
import com.finbourne.lusid.ApiException;
import com.finbourne.lusid.ApiResponse;
import com.finbourne.lusid.Configuration;
import com.finbourne.lusid.Pair;
import com.finbourne.lusid.ProgressRequestBody;
import com.finbourne.lusid.ProgressResponseBody;
import com.finbourne.lusid.extensions.ConfigurationOptions;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.finbourne.lusid.model.CreateRelationalDatasetDefinitionRequest;
import com.finbourne.lusid.model.DeletedEntityResponse;
import com.finbourne.lusid.model.LusidProblemDetails;
import com.finbourne.lusid.model.LusidValidationProblemDetails;
import java.time.OffsetDateTime;
import com.finbourne.lusid.model.PagedResourceListOfRelationalDatasetDefinition;
import com.finbourne.lusid.model.RelationalDatasetDefinition;
import com.finbourne.lusid.model.UpdateRelationalDatasetDefinitionRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class RelationalDatasetDefinitionApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public RelationalDatasetDefinitionApi() {
        this(Configuration.getDefaultApiClient());
    }

    public RelationalDatasetDefinitionApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createRelationalDatasetDefinitionCall(CreateRelationalDatasetDefinitionRequest createRelationalDatasetDefinitionRequest, final ApiCallback _callback) throws ApiException {
        return createRelationalDatasetDefinitionCall(createRelationalDatasetDefinitionRequest,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call createRelationalDatasetDefinitionCall(CreateRelationalDatasetDefinitionRequest createRelationalDatasetDefinitionRequest, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createRelationalDatasetDefinitionRequest;

        // create path and map variables
        String localVarPath = "/api/relationaldatasetdefinitions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createRelationalDatasetDefinitionValidateBeforeCall(CreateRelationalDatasetDefinitionRequest createRelationalDatasetDefinitionRequest, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'createRelationalDatasetDefinitionRequest' is set
        if (createRelationalDatasetDefinitionRequest == null) {
            throw new ApiException("Missing the required parameter 'createRelationalDatasetDefinitionRequest' when calling createRelationalDatasetDefinition(Async)");
        }

        return createRelationalDatasetDefinitionCall(createRelationalDatasetDefinitionRequest, _callback, opts);

    }


    private ApiResponse<RelationalDatasetDefinition> createRelationalDatasetDefinitionWithHttpInfo(CreateRelationalDatasetDefinitionRequest createRelationalDatasetDefinitionRequest) throws ApiException {
        okhttp3.Call localVarCall = createRelationalDatasetDefinitionValidateBeforeCall(createRelationalDatasetDefinitionRequest, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<RelationalDatasetDefinition>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<RelationalDatasetDefinition> createRelationalDatasetDefinitionWithHttpInfo(CreateRelationalDatasetDefinitionRequest createRelationalDatasetDefinitionRequest, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = createRelationalDatasetDefinitionValidateBeforeCall(createRelationalDatasetDefinitionRequest, null, opts);
        Type localVarReturnType = new TypeToken<RelationalDatasetDefinition>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createRelationalDatasetDefinitionAsync(CreateRelationalDatasetDefinitionRequest createRelationalDatasetDefinitionRequest, final ApiCallback<RelationalDatasetDefinition> _callback) throws ApiException {

        okhttp3.Call localVarCall = createRelationalDatasetDefinitionValidateBeforeCall(createRelationalDatasetDefinitionRequest, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<RelationalDatasetDefinition>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call createRelationalDatasetDefinitionAsync(CreateRelationalDatasetDefinitionRequest createRelationalDatasetDefinitionRequest, final ApiCallback<RelationalDatasetDefinition> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = createRelationalDatasetDefinitionValidateBeforeCall(createRelationalDatasetDefinitionRequest, _callback, opts);
        Type localVarReturnType = new TypeToken<RelationalDatasetDefinition>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIcreateRelationalDatasetDefinitionRequest {
        private final CreateRelationalDatasetDefinitionRequest createRelationalDatasetDefinitionRequest;

        private APIcreateRelationalDatasetDefinitionRequest(CreateRelationalDatasetDefinitionRequest createRelationalDatasetDefinitionRequest) {
            this.createRelationalDatasetDefinitionRequest = createRelationalDatasetDefinitionRequest;
        }

        /**
         * Build call for createRelationalDatasetDefinition
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The created relational dataset definition. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return createRelationalDatasetDefinitionCall(createRelationalDatasetDefinitionRequest, _callback);
        }

        /**
         * Execute createRelationalDatasetDefinition request
         * @return RelationalDatasetDefinition
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The created relational dataset definition. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public RelationalDatasetDefinition execute() throws ApiException {
            ApiResponse<RelationalDatasetDefinition> localVarResp = createRelationalDatasetDefinitionWithHttpInfo(createRelationalDatasetDefinitionRequest);
            return localVarResp.getData();
        }

        /**
         * Execute createRelationalDatasetDefinition request. Use any specified configuration options to override any other configuration for this request only.
         * @return RelationalDatasetDefinition
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The created relational dataset definition. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public RelationalDatasetDefinition execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<RelationalDatasetDefinition> localVarResp = createRelationalDatasetDefinitionWithHttpInfo(createRelationalDatasetDefinitionRequest, opts);
            return localVarResp.getData();
        }

        /**
         * Execute createRelationalDatasetDefinition request with HTTP info returned
         * @return ApiResponse&lt;RelationalDatasetDefinition&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The created relational dataset definition. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<RelationalDatasetDefinition> executeWithHttpInfo() throws ApiException {
            return createRelationalDatasetDefinitionWithHttpInfo(createRelationalDatasetDefinitionRequest);
        }

        /**
         * Execute createRelationalDatasetDefinition request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;RelationalDatasetDefinition&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The created relational dataset definition. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<RelationalDatasetDefinition> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return createRelationalDatasetDefinitionWithHttpInfo(createRelationalDatasetDefinitionRequest, opts);
        }

        /**
         * Execute createRelationalDatasetDefinition request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The created relational dataset definition. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<RelationalDatasetDefinition> _callback) throws ApiException {
            return createRelationalDatasetDefinitionAsync(createRelationalDatasetDefinitionRequest, _callback);
        }

        /**
         * Execute createRelationalDatasetDefinition request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The created relational dataset definition. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<RelationalDatasetDefinition> _callback, ConfigurationOptions opts) throws ApiException {
            return createRelationalDatasetDefinitionAsync(createRelationalDatasetDefinitionRequest, _callback, opts);
        }
    }

    /**
     * [EARLY ACCESS] CreateRelationalDatasetDefinition: Create a Relational Dataset Definition
     * Create a new relational dataset definition.
     * @param createRelationalDatasetDefinitionRequest The relational dataset definition to create. (required)
     * @return APIcreateRelationalDatasetDefinitionRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The created relational dataset definition. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIcreateRelationalDatasetDefinitionRequest createRelationalDatasetDefinition(CreateRelationalDatasetDefinitionRequest createRelationalDatasetDefinitionRequest) {
        return new APIcreateRelationalDatasetDefinitionRequest(createRelationalDatasetDefinitionRequest);
    }
    private okhttp3.Call deleteRelationalDatasetDefinitionCall(String scope, String code, final ApiCallback _callback) throws ApiException {
        return deleteRelationalDatasetDefinitionCall(scope, code,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call deleteRelationalDatasetDefinitionCall(String scope, String code, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/relationaldatasetdefinitions/{scope}/{code}"
            .replace("{" + "scope" + "}", localVarApiClient.escapeString(scope.toString()))
            .replace("{" + "code" + "}", localVarApiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteRelationalDatasetDefinitionValidateBeforeCall(String scope, String code, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling deleteRelationalDatasetDefinition(Async)");
        }

        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling deleteRelationalDatasetDefinition(Async)");
        }

        return deleteRelationalDatasetDefinitionCall(scope, code, _callback, opts);

    }


    private ApiResponse<DeletedEntityResponse> deleteRelationalDatasetDefinitionWithHttpInfo(String scope, String code) throws ApiException {
        okhttp3.Call localVarCall = deleteRelationalDatasetDefinitionValidateBeforeCall(scope, code, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<DeletedEntityResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<DeletedEntityResponse> deleteRelationalDatasetDefinitionWithHttpInfo(String scope, String code, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = deleteRelationalDatasetDefinitionValidateBeforeCall(scope, code, null, opts);
        Type localVarReturnType = new TypeToken<DeletedEntityResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteRelationalDatasetDefinitionAsync(String scope, String code, final ApiCallback<DeletedEntityResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteRelationalDatasetDefinitionValidateBeforeCall(scope, code, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<DeletedEntityResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call deleteRelationalDatasetDefinitionAsync(String scope, String code, final ApiCallback<DeletedEntityResponse> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = deleteRelationalDatasetDefinitionValidateBeforeCall(scope, code, _callback, opts);
        Type localVarReturnType = new TypeToken<DeletedEntityResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIdeleteRelationalDatasetDefinitionRequest {
        private final String scope;
        private final String code;

        private APIdeleteRelationalDatasetDefinitionRequest(String scope, String code) {
            this.scope = scope;
            this.code = code;
        }

        /**
         * Build call for deleteRelationalDatasetDefinition
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The deleted entity metadata </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteRelationalDatasetDefinitionCall(scope, code, _callback);
        }

        /**
         * Execute deleteRelationalDatasetDefinition request
         * @return DeletedEntityResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The deleted entity metadata </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public DeletedEntityResponse execute() throws ApiException {
            ApiResponse<DeletedEntityResponse> localVarResp = deleteRelationalDatasetDefinitionWithHttpInfo(scope, code);
            return localVarResp.getData();
        }

        /**
         * Execute deleteRelationalDatasetDefinition request. Use any specified configuration options to override any other configuration for this request only.
         * @return DeletedEntityResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The deleted entity metadata </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public DeletedEntityResponse execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<DeletedEntityResponse> localVarResp = deleteRelationalDatasetDefinitionWithHttpInfo(scope, code, opts);
            return localVarResp.getData();
        }

        /**
         * Execute deleteRelationalDatasetDefinition request with HTTP info returned
         * @return ApiResponse&lt;DeletedEntityResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The deleted entity metadata </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DeletedEntityResponse> executeWithHttpInfo() throws ApiException {
            return deleteRelationalDatasetDefinitionWithHttpInfo(scope, code);
        }

        /**
         * Execute deleteRelationalDatasetDefinition request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;DeletedEntityResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The deleted entity metadata </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DeletedEntityResponse> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return deleteRelationalDatasetDefinitionWithHttpInfo(scope, code, opts);
        }

        /**
         * Execute deleteRelationalDatasetDefinition request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The deleted entity metadata </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DeletedEntityResponse> _callback) throws ApiException {
            return deleteRelationalDatasetDefinitionAsync(scope, code, _callback);
        }

        /**
         * Execute deleteRelationalDatasetDefinition request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The deleted entity metadata </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DeletedEntityResponse> _callback, ConfigurationOptions opts) throws ApiException {
            return deleteRelationalDatasetDefinitionAsync(scope, code, _callback, opts);
        }
    }

    /**
     * [EARLY ACCESS] DeleteRelationalDatasetDefinition: Delete a Relational Dataset Definition
     * Delete a relational dataset definition.
     * @param scope The scope of the relational dataset definition. (required)
     * @param code The code of the relational dataset definition. (required)
     * @return APIdeleteRelationalDatasetDefinitionRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The deleted entity metadata </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIdeleteRelationalDatasetDefinitionRequest deleteRelationalDatasetDefinition(String scope, String code) {
        return new APIdeleteRelationalDatasetDefinitionRequest(scope, code);
    }
    private okhttp3.Call getRelationalDatasetDefinitionCall(String scope, String code, OffsetDateTime asAt, final ApiCallback _callback) throws ApiException {
        return getRelationalDatasetDefinitionCall(scope, code, asAt,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call getRelationalDatasetDefinitionCall(String scope, String code, OffsetDateTime asAt, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/relationaldatasetdefinitions/{scope}/{code}"
            .replace("{" + "scope" + "}", localVarApiClient.escapeString(scope.toString()))
            .replace("{" + "code" + "}", localVarApiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (asAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asAt", asAt));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRelationalDatasetDefinitionValidateBeforeCall(String scope, String code, OffsetDateTime asAt, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling getRelationalDatasetDefinition(Async)");
        }

        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling getRelationalDatasetDefinition(Async)");
        }

        return getRelationalDatasetDefinitionCall(scope, code, asAt, _callback, opts);

    }


    private ApiResponse<RelationalDatasetDefinition> getRelationalDatasetDefinitionWithHttpInfo(String scope, String code, OffsetDateTime asAt) throws ApiException {
        okhttp3.Call localVarCall = getRelationalDatasetDefinitionValidateBeforeCall(scope, code, asAt, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<RelationalDatasetDefinition>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<RelationalDatasetDefinition> getRelationalDatasetDefinitionWithHttpInfo(String scope, String code, OffsetDateTime asAt, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = getRelationalDatasetDefinitionValidateBeforeCall(scope, code, asAt, null, opts);
        Type localVarReturnType = new TypeToken<RelationalDatasetDefinition>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getRelationalDatasetDefinitionAsync(String scope, String code, OffsetDateTime asAt, final ApiCallback<RelationalDatasetDefinition> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRelationalDatasetDefinitionValidateBeforeCall(scope, code, asAt, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<RelationalDatasetDefinition>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call getRelationalDatasetDefinitionAsync(String scope, String code, OffsetDateTime asAt, final ApiCallback<RelationalDatasetDefinition> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = getRelationalDatasetDefinitionValidateBeforeCall(scope, code, asAt, _callback, opts);
        Type localVarReturnType = new TypeToken<RelationalDatasetDefinition>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetRelationalDatasetDefinitionRequest {
        private final String scope;
        private final String code;
        private OffsetDateTime asAt;

        private APIgetRelationalDatasetDefinitionRequest(String scope, String code) {
            this.scope = scope;
            this.code = code;
        }

        /**
         * Set asAt
         * @param asAt The asAt datetime at which to retrieve the relational dataset definition. Defaults to return the latest version if not specified. (optional)
         * @return APIgetRelationalDatasetDefinitionRequest
         */
        public APIgetRelationalDatasetDefinitionRequest asAt(OffsetDateTime asAt) {
            this.asAt = asAt;
            return this;
        }

        /**
         * Build call for getRelationalDatasetDefinition
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested relational dataset definition. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getRelationalDatasetDefinitionCall(scope, code, asAt, _callback);
        }

        /**
         * Execute getRelationalDatasetDefinition request
         * @return RelationalDatasetDefinition
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested relational dataset definition. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public RelationalDatasetDefinition execute() throws ApiException {
            ApiResponse<RelationalDatasetDefinition> localVarResp = getRelationalDatasetDefinitionWithHttpInfo(scope, code, asAt);
            return localVarResp.getData();
        }

        /**
         * Execute getRelationalDatasetDefinition request. Use any specified configuration options to override any other configuration for this request only.
         * @return RelationalDatasetDefinition
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested relational dataset definition. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public RelationalDatasetDefinition execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<RelationalDatasetDefinition> localVarResp = getRelationalDatasetDefinitionWithHttpInfo(scope, code, asAt, opts);
            return localVarResp.getData();
        }

        /**
         * Execute getRelationalDatasetDefinition request with HTTP info returned
         * @return ApiResponse&lt;RelationalDatasetDefinition&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested relational dataset definition. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<RelationalDatasetDefinition> executeWithHttpInfo() throws ApiException {
            return getRelationalDatasetDefinitionWithHttpInfo(scope, code, asAt);
        }

        /**
         * Execute getRelationalDatasetDefinition request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;RelationalDatasetDefinition&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested relational dataset definition. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<RelationalDatasetDefinition> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return getRelationalDatasetDefinitionWithHttpInfo(scope, code, asAt, opts);
        }

        /**
         * Execute getRelationalDatasetDefinition request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested relational dataset definition. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<RelationalDatasetDefinition> _callback) throws ApiException {
            return getRelationalDatasetDefinitionAsync(scope, code, asAt, _callback);
        }

        /**
         * Execute getRelationalDatasetDefinition request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested relational dataset definition. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<RelationalDatasetDefinition> _callback, ConfigurationOptions opts) throws ApiException {
            return getRelationalDatasetDefinitionAsync(scope, code, asAt, _callback, opts);
        }
    }

    /**
     * [EARLY ACCESS] GetRelationalDatasetDefinition: Get a Relational Dataset Definition
     * Retrieve a relational dataset definition by its identifier.
     * @param scope The scope of the relational dataset definition. (required)
     * @param code The code of the relational dataset definition. (required)
     * @return APIgetRelationalDatasetDefinitionRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested relational dataset definition. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIgetRelationalDatasetDefinitionRequest getRelationalDatasetDefinition(String scope, String code) {
        return new APIgetRelationalDatasetDefinitionRequest(scope, code);
    }
    private okhttp3.Call listRelationalDatasetDefinitionsCall(OffsetDateTime asAt, String page, List<String> sortBy, Integer limit, String filter, final ApiCallback _callback) throws ApiException {
        return listRelationalDatasetDefinitionsCall(asAt, page, sortBy, limit, filter,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call listRelationalDatasetDefinitionsCall(OffsetDateTime asAt, String page, List<String> sortBy, Integer limit, String filter, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/relationaldatasetdefinitions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (asAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asAt", asAt));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (sortBy != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "sortBy", sortBy));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listRelationalDatasetDefinitionsValidateBeforeCall(OffsetDateTime asAt, String page, List<String> sortBy, Integer limit, String filter, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        return listRelationalDatasetDefinitionsCall(asAt, page, sortBy, limit, filter, _callback, opts);

    }


    private ApiResponse<PagedResourceListOfRelationalDatasetDefinition> listRelationalDatasetDefinitionsWithHttpInfo(OffsetDateTime asAt, String page, List<String> sortBy, Integer limit, String filter) throws ApiException {
        okhttp3.Call localVarCall = listRelationalDatasetDefinitionsValidateBeforeCall(asAt, page, sortBy, limit, filter, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<PagedResourceListOfRelationalDatasetDefinition>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<PagedResourceListOfRelationalDatasetDefinition> listRelationalDatasetDefinitionsWithHttpInfo(OffsetDateTime asAt, String page, List<String> sortBy, Integer limit, String filter, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = listRelationalDatasetDefinitionsValidateBeforeCall(asAt, page, sortBy, limit, filter, null, opts);
        Type localVarReturnType = new TypeToken<PagedResourceListOfRelationalDatasetDefinition>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listRelationalDatasetDefinitionsAsync(OffsetDateTime asAt, String page, List<String> sortBy, Integer limit, String filter, final ApiCallback<PagedResourceListOfRelationalDatasetDefinition> _callback) throws ApiException {

        okhttp3.Call localVarCall = listRelationalDatasetDefinitionsValidateBeforeCall(asAt, page, sortBy, limit, filter, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<PagedResourceListOfRelationalDatasetDefinition>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call listRelationalDatasetDefinitionsAsync(OffsetDateTime asAt, String page, List<String> sortBy, Integer limit, String filter, final ApiCallback<PagedResourceListOfRelationalDatasetDefinition> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = listRelationalDatasetDefinitionsValidateBeforeCall(asAt, page, sortBy, limit, filter, _callback, opts);
        Type localVarReturnType = new TypeToken<PagedResourceListOfRelationalDatasetDefinition>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIlistRelationalDatasetDefinitionsRequest {
        private OffsetDateTime asAt;
        private String page;
        private List<String> sortBy;
        private Integer limit;
        private String filter;

        private APIlistRelationalDatasetDefinitionsRequest() {
        }

        /**
         * Set asAt
         * @param asAt The asAt datetime at which to list the relational dataset definitions. Defaults to return the latest version if not specified. (optional)
         * @return APIlistRelationalDatasetDefinitionsRequest
         */
        public APIlistRelationalDatasetDefinitionsRequest asAt(OffsetDateTime asAt) {
            this.asAt = asAt;
            return this;
        }

        /**
         * Set page
         * @param page The pagination token to use to continue listing relational dataset definitions from a previous call to list relational dataset definitions. (optional)
         * @return APIlistRelationalDatasetDefinitionsRequest
         */
        public APIlistRelationalDatasetDefinitionsRequest page(String page) {
            this.page = page;
            return this;
        }

        /**
         * Set sortBy
         * @param sortBy A list of field names to sort by, each suffixed by \&quot; ASC\&quot; or \&quot; DESC\&quot; (optional)
         * @return APIlistRelationalDatasetDefinitionsRequest
         */
        public APIlistRelationalDatasetDefinitionsRequest sortBy(List<String> sortBy) {
            this.sortBy = sortBy;
            return this;
        }

        /**
         * Set limit
         * @param limit When paginating, limit the number of returned results to this many. (optional)
         * @return APIlistRelationalDatasetDefinitionsRequest
         */
        public APIlistRelationalDatasetDefinitionsRequest limit(Integer limit) {
            this.limit = limit;
            return this;
        }

        /**
         * Set filter
         * @param filter Expression to filter the result set. (optional)
         * @return APIlistRelationalDatasetDefinitionsRequest
         */
        public APIlistRelationalDatasetDefinitionsRequest filter(String filter) {
            this.filter = filter;
            return this;
        }

        /**
         * Build call for listRelationalDatasetDefinitions
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A list of relational dataset definitions. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listRelationalDatasetDefinitionsCall(asAt, page, sortBy, limit, filter, _callback);
        }

        /**
         * Execute listRelationalDatasetDefinitions request
         * @return PagedResourceListOfRelationalDatasetDefinition
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A list of relational dataset definitions. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public PagedResourceListOfRelationalDatasetDefinition execute() throws ApiException {
            ApiResponse<PagedResourceListOfRelationalDatasetDefinition> localVarResp = listRelationalDatasetDefinitionsWithHttpInfo(asAt, page, sortBy, limit, filter);
            return localVarResp.getData();
        }

        /**
         * Execute listRelationalDatasetDefinitions request. Use any specified configuration options to override any other configuration for this request only.
         * @return PagedResourceListOfRelationalDatasetDefinition
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A list of relational dataset definitions. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public PagedResourceListOfRelationalDatasetDefinition execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<PagedResourceListOfRelationalDatasetDefinition> localVarResp = listRelationalDatasetDefinitionsWithHttpInfo(asAt, page, sortBy, limit, filter, opts);
            return localVarResp.getData();
        }

        /**
         * Execute listRelationalDatasetDefinitions request with HTTP info returned
         * @return ApiResponse&lt;PagedResourceListOfRelationalDatasetDefinition&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A list of relational dataset definitions. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PagedResourceListOfRelationalDatasetDefinition> executeWithHttpInfo() throws ApiException {
            return listRelationalDatasetDefinitionsWithHttpInfo(asAt, page, sortBy, limit, filter);
        }

        /**
         * Execute listRelationalDatasetDefinitions request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;PagedResourceListOfRelationalDatasetDefinition&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A list of relational dataset definitions. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PagedResourceListOfRelationalDatasetDefinition> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return listRelationalDatasetDefinitionsWithHttpInfo(asAt, page, sortBy, limit, filter, opts);
        }

        /**
         * Execute listRelationalDatasetDefinitions request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A list of relational dataset definitions. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PagedResourceListOfRelationalDatasetDefinition> _callback) throws ApiException {
            return listRelationalDatasetDefinitionsAsync(asAt, page, sortBy, limit, filter, _callback);
        }

        /**
         * Execute listRelationalDatasetDefinitions request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A list of relational dataset definitions. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PagedResourceListOfRelationalDatasetDefinition> _callback, ConfigurationOptions opts) throws ApiException {
            return listRelationalDatasetDefinitionsAsync(asAt, page, sortBy, limit, filter, _callback, opts);
        }
    }

    /**
     * [EARLY ACCESS] ListRelationalDatasetDefinitions: List Relational Dataset Definitions
     * List all relational dataset definitions matching particular criteria.
     * @return APIlistRelationalDatasetDefinitionsRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of relational dataset definitions. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIlistRelationalDatasetDefinitionsRequest listRelationalDatasetDefinitions() {
        return new APIlistRelationalDatasetDefinitionsRequest();
    }
    private okhttp3.Call updateRelationalDatasetDefinitionCall(String scope, String code, UpdateRelationalDatasetDefinitionRequest updateRelationalDatasetDefinitionRequest, final ApiCallback _callback) throws ApiException {
        return updateRelationalDatasetDefinitionCall(scope, code, updateRelationalDatasetDefinitionRequest,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call updateRelationalDatasetDefinitionCall(String scope, String code, UpdateRelationalDatasetDefinitionRequest updateRelationalDatasetDefinitionRequest, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateRelationalDatasetDefinitionRequest;

        // create path and map variables
        String localVarPath = "/api/relationaldatasetdefinitions/{scope}/{code}"
            .replace("{" + "scope" + "}", localVarApiClient.escapeString(scope.toString()))
            .replace("{" + "code" + "}", localVarApiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateRelationalDatasetDefinitionValidateBeforeCall(String scope, String code, UpdateRelationalDatasetDefinitionRequest updateRelationalDatasetDefinitionRequest, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling updateRelationalDatasetDefinition(Async)");
        }

        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling updateRelationalDatasetDefinition(Async)");
        }

        return updateRelationalDatasetDefinitionCall(scope, code, updateRelationalDatasetDefinitionRequest, _callback, opts);

    }


    private ApiResponse<RelationalDatasetDefinition> updateRelationalDatasetDefinitionWithHttpInfo(String scope, String code, UpdateRelationalDatasetDefinitionRequest updateRelationalDatasetDefinitionRequest) throws ApiException {
        okhttp3.Call localVarCall = updateRelationalDatasetDefinitionValidateBeforeCall(scope, code, updateRelationalDatasetDefinitionRequest, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<RelationalDatasetDefinition>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<RelationalDatasetDefinition> updateRelationalDatasetDefinitionWithHttpInfo(String scope, String code, UpdateRelationalDatasetDefinitionRequest updateRelationalDatasetDefinitionRequest, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = updateRelationalDatasetDefinitionValidateBeforeCall(scope, code, updateRelationalDatasetDefinitionRequest, null, opts);
        Type localVarReturnType = new TypeToken<RelationalDatasetDefinition>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateRelationalDatasetDefinitionAsync(String scope, String code, UpdateRelationalDatasetDefinitionRequest updateRelationalDatasetDefinitionRequest, final ApiCallback<RelationalDatasetDefinition> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateRelationalDatasetDefinitionValidateBeforeCall(scope, code, updateRelationalDatasetDefinitionRequest, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<RelationalDatasetDefinition>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call updateRelationalDatasetDefinitionAsync(String scope, String code, UpdateRelationalDatasetDefinitionRequest updateRelationalDatasetDefinitionRequest, final ApiCallback<RelationalDatasetDefinition> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = updateRelationalDatasetDefinitionValidateBeforeCall(scope, code, updateRelationalDatasetDefinitionRequest, _callback, opts);
        Type localVarReturnType = new TypeToken<RelationalDatasetDefinition>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIupdateRelationalDatasetDefinitionRequest {
        private final String scope;
        private final String code;
        private UpdateRelationalDatasetDefinitionRequest updateRelationalDatasetDefinitionRequest;

        private APIupdateRelationalDatasetDefinitionRequest(String scope, String code) {
            this.scope = scope;
            this.code = code;
        }

        /**
         * Set updateRelationalDatasetDefinitionRequest
         * @param updateRelationalDatasetDefinitionRequest The updated relational dataset definition. (optional)
         * @return APIupdateRelationalDatasetDefinitionRequest
         */
        public APIupdateRelationalDatasetDefinitionRequest updateRelationalDatasetDefinitionRequest(UpdateRelationalDatasetDefinitionRequest updateRelationalDatasetDefinitionRequest) {
            this.updateRelationalDatasetDefinitionRequest = updateRelationalDatasetDefinitionRequest;
            return this;
        }

        /**
         * Build call for updateRelationalDatasetDefinition
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The updated relational dataset definition. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return updateRelationalDatasetDefinitionCall(scope, code, updateRelationalDatasetDefinitionRequest, _callback);
        }

        /**
         * Execute updateRelationalDatasetDefinition request
         * @return RelationalDatasetDefinition
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The updated relational dataset definition. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public RelationalDatasetDefinition execute() throws ApiException {
            ApiResponse<RelationalDatasetDefinition> localVarResp = updateRelationalDatasetDefinitionWithHttpInfo(scope, code, updateRelationalDatasetDefinitionRequest);
            return localVarResp.getData();
        }

        /**
         * Execute updateRelationalDatasetDefinition request. Use any specified configuration options to override any other configuration for this request only.
         * @return RelationalDatasetDefinition
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The updated relational dataset definition. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public RelationalDatasetDefinition execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<RelationalDatasetDefinition> localVarResp = updateRelationalDatasetDefinitionWithHttpInfo(scope, code, updateRelationalDatasetDefinitionRequest, opts);
            return localVarResp.getData();
        }

        /**
         * Execute updateRelationalDatasetDefinition request with HTTP info returned
         * @return ApiResponse&lt;RelationalDatasetDefinition&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The updated relational dataset definition. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<RelationalDatasetDefinition> executeWithHttpInfo() throws ApiException {
            return updateRelationalDatasetDefinitionWithHttpInfo(scope, code, updateRelationalDatasetDefinitionRequest);
        }

        /**
         * Execute updateRelationalDatasetDefinition request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;RelationalDatasetDefinition&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The updated relational dataset definition. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<RelationalDatasetDefinition> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return updateRelationalDatasetDefinitionWithHttpInfo(scope, code, updateRelationalDatasetDefinitionRequest, opts);
        }

        /**
         * Execute updateRelationalDatasetDefinition request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The updated relational dataset definition. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<RelationalDatasetDefinition> _callback) throws ApiException {
            return updateRelationalDatasetDefinitionAsync(scope, code, updateRelationalDatasetDefinitionRequest, _callback);
        }

        /**
         * Execute updateRelationalDatasetDefinition request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The updated relational dataset definition. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<RelationalDatasetDefinition> _callback, ConfigurationOptions opts) throws ApiException {
            return updateRelationalDatasetDefinitionAsync(scope, code, updateRelationalDatasetDefinitionRequest, _callback, opts);
        }
    }

    /**
     * [EARLY ACCESS] UpdateRelationalDatasetDefinition: Update a Relational Dataset Definition
     * Update an existing relational dataset definition.
     * @param scope The scope of the relational dataset definition. (required)
     * @param code The code of the relational dataset definition. (required)
     * @return APIupdateRelationalDatasetDefinitionRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated relational dataset definition. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIupdateRelationalDatasetDefinitionRequest updateRelationalDatasetDefinition(String scope, String code) {
        return new APIupdateRelationalDatasetDefinitionRequest(scope, code);
    }
}
