/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.api;

import com.finbourne.lusid.ApiCallback;
import com.finbourne.lusid.ApiClient;
import com.finbourne.lusid.ApiException;
import com.finbourne.lusid.ApiResponse;
import com.finbourne.lusid.Configuration;
import com.finbourne.lusid.Pair;
import com.finbourne.lusid.ProgressRequestBody;
import com.finbourne.lusid.ProgressResponseBody;
import com.finbourne.lusid.extensions.ConfigurationOptions;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.finbourne.lusid.model.BatchUpsertRelationalDatasetsResponse;
import com.finbourne.lusid.model.LusidProblemDetails;
import com.finbourne.lusid.model.LusidValidationProblemDetails;
import java.time.OffsetDateTime;
import com.finbourne.lusid.model.PagedResourceListOfRelationalDataPointResponse;
import com.finbourne.lusid.model.QueryRelationalDatasetRequest;
import com.finbourne.lusid.model.UpsertRelationalDataPointRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class RelationalDatasetsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public RelationalDatasetsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public RelationalDatasetsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call batchUpsertRelationalDataCall(String relationalDatasetDefinitionScope, String relationalDatasetDefinitionCode, Map<String, UpsertRelationalDataPointRequest> requestBody, String successMode, final ApiCallback _callback) throws ApiException {
        return batchUpsertRelationalDataCall(relationalDatasetDefinitionScope, relationalDatasetDefinitionCode, requestBody, successMode,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call batchUpsertRelationalDataCall(String relationalDatasetDefinitionScope, String relationalDatasetDefinitionCode, Map<String, UpsertRelationalDataPointRequest> requestBody, String successMode, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/api/relationaldatasets/{relationalDatasetDefinitionScope}/{relationalDatasetDefinitionCode}/$batchUpsert"
            .replace("{" + "relationalDatasetDefinitionScope" + "}", localVarApiClient.escapeString(relationalDatasetDefinitionScope.toString()))
            .replace("{" + "relationalDatasetDefinitionCode" + "}", localVarApiClient.escapeString(relationalDatasetDefinitionCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (successMode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("successMode", successMode));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call batchUpsertRelationalDataValidateBeforeCall(String relationalDatasetDefinitionScope, String relationalDatasetDefinitionCode, Map<String, UpsertRelationalDataPointRequest> requestBody, String successMode, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'relationalDatasetDefinitionScope' is set
        if (relationalDatasetDefinitionScope == null) {
            throw new ApiException("Missing the required parameter 'relationalDatasetDefinitionScope' when calling batchUpsertRelationalData(Async)");
        }

        // verify the required parameter 'relationalDatasetDefinitionCode' is set
        if (relationalDatasetDefinitionCode == null) {
            throw new ApiException("Missing the required parameter 'relationalDatasetDefinitionCode' when calling batchUpsertRelationalData(Async)");
        }

        // verify the required parameter 'requestBody' is set
        if (requestBody == null) {
            throw new ApiException("Missing the required parameter 'requestBody' when calling batchUpsertRelationalData(Async)");
        }

        return batchUpsertRelationalDataCall(relationalDatasetDefinitionScope, relationalDatasetDefinitionCode, requestBody, successMode, _callback, opts);

    }


    private ApiResponse<BatchUpsertRelationalDatasetsResponse> batchUpsertRelationalDataWithHttpInfo(String relationalDatasetDefinitionScope, String relationalDatasetDefinitionCode, Map<String, UpsertRelationalDataPointRequest> requestBody, String successMode) throws ApiException {
        okhttp3.Call localVarCall = batchUpsertRelationalDataValidateBeforeCall(relationalDatasetDefinitionScope, relationalDatasetDefinitionCode, requestBody, successMode, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<BatchUpsertRelationalDatasetsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<BatchUpsertRelationalDatasetsResponse> batchUpsertRelationalDataWithHttpInfo(String relationalDatasetDefinitionScope, String relationalDatasetDefinitionCode, Map<String, UpsertRelationalDataPointRequest> requestBody, String successMode, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = batchUpsertRelationalDataValidateBeforeCall(relationalDatasetDefinitionScope, relationalDatasetDefinitionCode, requestBody, successMode, null, opts);
        Type localVarReturnType = new TypeToken<BatchUpsertRelationalDatasetsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call batchUpsertRelationalDataAsync(String relationalDatasetDefinitionScope, String relationalDatasetDefinitionCode, Map<String, UpsertRelationalDataPointRequest> requestBody, String successMode, final ApiCallback<BatchUpsertRelationalDatasetsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = batchUpsertRelationalDataValidateBeforeCall(relationalDatasetDefinitionScope, relationalDatasetDefinitionCode, requestBody, successMode, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<BatchUpsertRelationalDatasetsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call batchUpsertRelationalDataAsync(String relationalDatasetDefinitionScope, String relationalDatasetDefinitionCode, Map<String, UpsertRelationalDataPointRequest> requestBody, String successMode, final ApiCallback<BatchUpsertRelationalDatasetsResponse> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = batchUpsertRelationalDataValidateBeforeCall(relationalDatasetDefinitionScope, relationalDatasetDefinitionCode, requestBody, successMode, _callback, opts);
        Type localVarReturnType = new TypeToken<BatchUpsertRelationalDatasetsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIbatchUpsertRelationalDataRequest {
        private final String relationalDatasetDefinitionScope;
        private final String relationalDatasetDefinitionCode;
        private final Map<String, UpsertRelationalDataPointRequest> requestBody;
        private String successMode;

        private APIbatchUpsertRelationalDataRequest(String relationalDatasetDefinitionScope, String relationalDatasetDefinitionCode, Map<String, UpsertRelationalDataPointRequest> requestBody) {
            this.relationalDatasetDefinitionScope = relationalDatasetDefinitionScope;
            this.relationalDatasetDefinitionCode = relationalDatasetDefinitionCode;
            this.requestBody = requestBody;
        }

        /**
         * Set successMode
         * @param successMode Whether the batch request should fail Atomically or in a Partial fashion - Allowed Values: Atomic, Partial.   Note: If using partial failure modes, then it is important to check the response body for failures as any failures will still return a 200 status code. (optional, default to Partial)
         * @return APIbatchUpsertRelationalDataRequest
         */
        public APIbatchUpsertRelationalDataRequest successMode(String successMode) {
            this.successMode = successMode;
            return this;
        }

        /**
         * Build call for batchUpsertRelationalData
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The relational data points that were upserted. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return batchUpsertRelationalDataCall(relationalDatasetDefinitionScope, relationalDatasetDefinitionCode, requestBody, successMode, _callback);
        }

        /**
         * Execute batchUpsertRelationalData request
         * @return BatchUpsertRelationalDatasetsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The relational data points that were upserted. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public BatchUpsertRelationalDatasetsResponse execute() throws ApiException {
            ApiResponse<BatchUpsertRelationalDatasetsResponse> localVarResp = batchUpsertRelationalDataWithHttpInfo(relationalDatasetDefinitionScope, relationalDatasetDefinitionCode, requestBody, successMode);
            return localVarResp.getData();
        }

        /**
         * Execute batchUpsertRelationalData request. Use any specified configuration options to override any other configuration for this request only.
         * @return BatchUpsertRelationalDatasetsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The relational data points that were upserted. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public BatchUpsertRelationalDatasetsResponse execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<BatchUpsertRelationalDatasetsResponse> localVarResp = batchUpsertRelationalDataWithHttpInfo(relationalDatasetDefinitionScope, relationalDatasetDefinitionCode, requestBody, successMode, opts);
            return localVarResp.getData();
        }

        /**
         * Execute batchUpsertRelationalData request with HTTP info returned
         * @return ApiResponse&lt;BatchUpsertRelationalDatasetsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The relational data points that were upserted. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<BatchUpsertRelationalDatasetsResponse> executeWithHttpInfo() throws ApiException {
            return batchUpsertRelationalDataWithHttpInfo(relationalDatasetDefinitionScope, relationalDatasetDefinitionCode, requestBody, successMode);
        }

        /**
         * Execute batchUpsertRelationalData request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;BatchUpsertRelationalDatasetsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The relational data points that were upserted. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<BatchUpsertRelationalDatasetsResponse> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return batchUpsertRelationalDataWithHttpInfo(relationalDatasetDefinitionScope, relationalDatasetDefinitionCode, requestBody, successMode, opts);
        }

        /**
         * Execute batchUpsertRelationalData request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The relational data points that were upserted. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<BatchUpsertRelationalDatasetsResponse> _callback) throws ApiException {
            return batchUpsertRelationalDataAsync(relationalDatasetDefinitionScope, relationalDatasetDefinitionCode, requestBody, successMode, _callback);
        }

        /**
         * Execute batchUpsertRelationalData request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The relational data points that were upserted. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<BatchUpsertRelationalDatasetsResponse> _callback, ConfigurationOptions opts) throws ApiException {
            return batchUpsertRelationalDataAsync(relationalDatasetDefinitionScope, relationalDatasetDefinitionCode, requestBody, successMode, _callback, opts);
        }
    }

    /**
     * [EXPERIMENTAL] BatchUpsertRelationalData: Batch Upsert Relational Data Points for a given Relational Dataset Definition.
     * Batch Upsert Relational Data Points for a given Relational Dataset Definition.
     * @param relationalDatasetDefinitionScope The Scope of the relational dataset definition. (required)
     * @param relationalDatasetDefinitionCode The Code of the relational dataset definition. (required)
     * @param requestBody The DataPoints to upsert. (required)
     * @return APIbatchUpsertRelationalDataRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The relational data points that were upserted. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIbatchUpsertRelationalDataRequest batchUpsertRelationalData(String relationalDatasetDefinitionScope, String relationalDatasetDefinitionCode, Map<String, UpsertRelationalDataPointRequest> requestBody) {
        return new APIbatchUpsertRelationalDataRequest(relationalDatasetDefinitionScope, relationalDatasetDefinitionCode, requestBody);
    }
    private okhttp3.Call queryRelationalDataCall(String relationalDatasetDefinitionScope, String relationalDatasetDefinitionCode, QueryRelationalDatasetRequest queryRelationalDatasetRequest, OffsetDateTime asAt, String effectiveAt, String page, Integer limit, final ApiCallback _callback) throws ApiException {
        return queryRelationalDataCall(relationalDatasetDefinitionScope, relationalDatasetDefinitionCode, queryRelationalDatasetRequest, asAt, effectiveAt, page, limit,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call queryRelationalDataCall(String relationalDatasetDefinitionScope, String relationalDatasetDefinitionCode, QueryRelationalDatasetRequest queryRelationalDatasetRequest, OffsetDateTime asAt, String effectiveAt, String page, Integer limit, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = queryRelationalDatasetRequest;

        // create path and map variables
        String localVarPath = "/api/relationaldatasets/{relationalDatasetDefinitionScope}/{relationalDatasetDefinitionCode}/$query"
            .replace("{" + "relationalDatasetDefinitionScope" + "}", localVarApiClient.escapeString(relationalDatasetDefinitionScope.toString()))
            .replace("{" + "relationalDatasetDefinitionCode" + "}", localVarApiClient.escapeString(relationalDatasetDefinitionCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (asAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asAt", asAt));
        }

        if (effectiveAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("effectiveAt", effectiveAt));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call queryRelationalDataValidateBeforeCall(String relationalDatasetDefinitionScope, String relationalDatasetDefinitionCode, QueryRelationalDatasetRequest queryRelationalDatasetRequest, OffsetDateTime asAt, String effectiveAt, String page, Integer limit, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'relationalDatasetDefinitionScope' is set
        if (relationalDatasetDefinitionScope == null) {
            throw new ApiException("Missing the required parameter 'relationalDatasetDefinitionScope' when calling queryRelationalData(Async)");
        }

        // verify the required parameter 'relationalDatasetDefinitionCode' is set
        if (relationalDatasetDefinitionCode == null) {
            throw new ApiException("Missing the required parameter 'relationalDatasetDefinitionCode' when calling queryRelationalData(Async)");
        }

        // verify the required parameter 'queryRelationalDatasetRequest' is set
        if (queryRelationalDatasetRequest == null) {
            throw new ApiException("Missing the required parameter 'queryRelationalDatasetRequest' when calling queryRelationalData(Async)");
        }

        return queryRelationalDataCall(relationalDatasetDefinitionScope, relationalDatasetDefinitionCode, queryRelationalDatasetRequest, asAt, effectiveAt, page, limit, _callback, opts);

    }


    private ApiResponse<PagedResourceListOfRelationalDataPointResponse> queryRelationalDataWithHttpInfo(String relationalDatasetDefinitionScope, String relationalDatasetDefinitionCode, QueryRelationalDatasetRequest queryRelationalDatasetRequest, OffsetDateTime asAt, String effectiveAt, String page, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = queryRelationalDataValidateBeforeCall(relationalDatasetDefinitionScope, relationalDatasetDefinitionCode, queryRelationalDatasetRequest, asAt, effectiveAt, page, limit, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<PagedResourceListOfRelationalDataPointResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<PagedResourceListOfRelationalDataPointResponse> queryRelationalDataWithHttpInfo(String relationalDatasetDefinitionScope, String relationalDatasetDefinitionCode, QueryRelationalDatasetRequest queryRelationalDatasetRequest, OffsetDateTime asAt, String effectiveAt, String page, Integer limit, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = queryRelationalDataValidateBeforeCall(relationalDatasetDefinitionScope, relationalDatasetDefinitionCode, queryRelationalDatasetRequest, asAt, effectiveAt, page, limit, null, opts);
        Type localVarReturnType = new TypeToken<PagedResourceListOfRelationalDataPointResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call queryRelationalDataAsync(String relationalDatasetDefinitionScope, String relationalDatasetDefinitionCode, QueryRelationalDatasetRequest queryRelationalDatasetRequest, OffsetDateTime asAt, String effectiveAt, String page, Integer limit, final ApiCallback<PagedResourceListOfRelationalDataPointResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = queryRelationalDataValidateBeforeCall(relationalDatasetDefinitionScope, relationalDatasetDefinitionCode, queryRelationalDatasetRequest, asAt, effectiveAt, page, limit, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<PagedResourceListOfRelationalDataPointResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call queryRelationalDataAsync(String relationalDatasetDefinitionScope, String relationalDatasetDefinitionCode, QueryRelationalDatasetRequest queryRelationalDatasetRequest, OffsetDateTime asAt, String effectiveAt, String page, Integer limit, final ApiCallback<PagedResourceListOfRelationalDataPointResponse> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = queryRelationalDataValidateBeforeCall(relationalDatasetDefinitionScope, relationalDatasetDefinitionCode, queryRelationalDatasetRequest, asAt, effectiveAt, page, limit, _callback, opts);
        Type localVarReturnType = new TypeToken<PagedResourceListOfRelationalDataPointResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIqueryRelationalDataRequest {
        private final String relationalDatasetDefinitionScope;
        private final String relationalDatasetDefinitionCode;
        private final QueryRelationalDatasetRequest queryRelationalDatasetRequest;
        private OffsetDateTime asAt;
        private String effectiveAt;
        private String page;
        private Integer limit;

        private APIqueryRelationalDataRequest(String relationalDatasetDefinitionScope, String relationalDatasetDefinitionCode, QueryRelationalDatasetRequest queryRelationalDatasetRequest) {
            this.relationalDatasetDefinitionScope = relationalDatasetDefinitionScope;
            this.relationalDatasetDefinitionCode = relationalDatasetDefinitionCode;
            this.queryRelationalDatasetRequest = queryRelationalDatasetRequest;
        }

        /**
         * Set asAt
         * @param asAt The asAt datetime at which to retrieve the dataset(s). Defaults to returning the latest version of each dataset if not specified. (optional)
         * @return APIqueryRelationalDataRequest
         */
        public APIqueryRelationalDataRequest asAt(OffsetDateTime asAt) {
            this.asAt = asAt;
            return this;
        }

        /**
         * Set effectiveAt
         * @param effectiveAt The effective datetime or cut label at which to query the datasets.   Defaults to the current LUSID system datetime if not specified. (optional)
         * @return APIqueryRelationalDataRequest
         */
        public APIqueryRelationalDataRequest effectiveAt(String effectiveAt) {
            this.effectiveAt = effectiveAt;
            return this;
        }

        /**
         * Set page
         * @param page The pagination token to use to continue query datasets. This value is returned from the previous call.   If a pagination token is provided, the filter, customSortBy, effectiveAt and asAt fields must not have changed since the original request. (optional)
         * @return APIqueryRelationalDataRequest
         */
        public APIqueryRelationalDataRequest page(String page) {
            this.page = page;
            return this;
        }

        /**
         * Set limit
         * @param limit When paginating, limit the results to this number. Defaults to 100 if not specified. (optional)
         * @return APIqueryRelationalDataRequest
         */
        public APIqueryRelationalDataRequest limit(Integer limit) {
            this.limit = limit;
            return this;
        }

        /**
         * Build call for queryRelationalData
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The relational data points that were queried. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return queryRelationalDataCall(relationalDatasetDefinitionScope, relationalDatasetDefinitionCode, queryRelationalDatasetRequest, asAt, effectiveAt, page, limit, _callback);
        }

        /**
         * Execute queryRelationalData request
         * @return PagedResourceListOfRelationalDataPointResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The relational data points that were queried. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public PagedResourceListOfRelationalDataPointResponse execute() throws ApiException {
            ApiResponse<PagedResourceListOfRelationalDataPointResponse> localVarResp = queryRelationalDataWithHttpInfo(relationalDatasetDefinitionScope, relationalDatasetDefinitionCode, queryRelationalDatasetRequest, asAt, effectiveAt, page, limit);
            return localVarResp.getData();
        }

        /**
         * Execute queryRelationalData request. Use any specified configuration options to override any other configuration for this request only.
         * @return PagedResourceListOfRelationalDataPointResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The relational data points that were queried. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public PagedResourceListOfRelationalDataPointResponse execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<PagedResourceListOfRelationalDataPointResponse> localVarResp = queryRelationalDataWithHttpInfo(relationalDatasetDefinitionScope, relationalDatasetDefinitionCode, queryRelationalDatasetRequest, asAt, effectiveAt, page, limit, opts);
            return localVarResp.getData();
        }

        /**
         * Execute queryRelationalData request with HTTP info returned
         * @return ApiResponse&lt;PagedResourceListOfRelationalDataPointResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The relational data points that were queried. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PagedResourceListOfRelationalDataPointResponse> executeWithHttpInfo() throws ApiException {
            return queryRelationalDataWithHttpInfo(relationalDatasetDefinitionScope, relationalDatasetDefinitionCode, queryRelationalDatasetRequest, asAt, effectiveAt, page, limit);
        }

        /**
         * Execute queryRelationalData request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;PagedResourceListOfRelationalDataPointResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The relational data points that were queried. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PagedResourceListOfRelationalDataPointResponse> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return queryRelationalDataWithHttpInfo(relationalDatasetDefinitionScope, relationalDatasetDefinitionCode, queryRelationalDatasetRequest, asAt, effectiveAt, page, limit, opts);
        }

        /**
         * Execute queryRelationalData request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The relational data points that were queried. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PagedResourceListOfRelationalDataPointResponse> _callback) throws ApiException {
            return queryRelationalDataAsync(relationalDatasetDefinitionScope, relationalDatasetDefinitionCode, queryRelationalDatasetRequest, asAt, effectiveAt, page, limit, _callback);
        }

        /**
         * Execute queryRelationalData request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The relational data points that were queried. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PagedResourceListOfRelationalDataPointResponse> _callback, ConfigurationOptions opts) throws ApiException {
            return queryRelationalDataAsync(relationalDatasetDefinitionScope, relationalDatasetDefinitionCode, queryRelationalDatasetRequest, asAt, effectiveAt, page, limit, _callback, opts);
        }
    }

    /**
     * [EXPERIMENTAL] QueryRelationalData: Query Relational Data Points for a given Relational Dataset Definition.
     * Query Relational Data Points for a given Relational Dataset Definition.
     * @param relationalDatasetDefinitionScope The Scope of the relational dataset definition. (required)
     * @param relationalDatasetDefinitionCode The Code of the relational dataset definition. (required)
     * @param queryRelationalDatasetRequest The query request. (required)
     * @return APIqueryRelationalDataRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The relational data points that were queried. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIqueryRelationalDataRequest queryRelationalData(String relationalDatasetDefinitionScope, String relationalDatasetDefinitionCode, QueryRelationalDatasetRequest queryRelationalDatasetRequest) {
        return new APIqueryRelationalDataRequest(relationalDatasetDefinitionScope, relationalDatasetDefinitionCode, queryRelationalDatasetRequest);
    }
}
