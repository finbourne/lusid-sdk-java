/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.api;

import com.finbourne.lusid.ApiCallback;
import com.finbourne.lusid.ApiClient;
import com.finbourne.lusid.ApiException;
import com.finbourne.lusid.ApiResponse;
import com.finbourne.lusid.Configuration;
import com.finbourne.lusid.Pair;
import com.finbourne.lusid.ProgressRequestBody;
import com.finbourne.lusid.ProgressResponseBody;
import com.finbourne.lusid.extensions.ConfigurationOptions;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.finbourne.lusid.model.CreateReferencePortfolioRequest;
import com.finbourne.lusid.model.GetReferencePortfolioConstituentsResponse;
import com.finbourne.lusid.model.LusidProblemDetails;
import com.finbourne.lusid.model.LusidValidationProblemDetails;
import java.time.OffsetDateTime;
import com.finbourne.lusid.model.Portfolio;
import com.finbourne.lusid.model.ResourceListOfConstituentsAdjustmentHeader;
import com.finbourne.lusid.model.UpsertReferencePortfolioConstituentPropertiesRequest;
import com.finbourne.lusid.model.UpsertReferencePortfolioConstituentPropertiesResponse;
import com.finbourne.lusid.model.UpsertReferencePortfolioConstituentsRequest;
import com.finbourne.lusid.model.UpsertReferencePortfolioConstituentsResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ReferencePortfolioApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ReferencePortfolioApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ReferencePortfolioApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createReferencePortfolioCall(String scope, CreateReferencePortfolioRequest createReferencePortfolioRequest, final ApiCallback _callback) throws ApiException {
        return createReferencePortfolioCall(scope, createReferencePortfolioRequest,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call createReferencePortfolioCall(String scope, CreateReferencePortfolioRequest createReferencePortfolioRequest, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createReferencePortfolioRequest;

        // create path and map variables
        String localVarPath = "/api/referenceportfolios/{scope}"
            .replace("{" + "scope" + "}", localVarApiClient.escapeString(scope.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createReferencePortfolioValidateBeforeCall(String scope, CreateReferencePortfolioRequest createReferencePortfolioRequest, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling createReferencePortfolio(Async)");
        }

        // verify the required parameter 'createReferencePortfolioRequest' is set
        if (createReferencePortfolioRequest == null) {
            throw new ApiException("Missing the required parameter 'createReferencePortfolioRequest' when calling createReferencePortfolio(Async)");
        }

        return createReferencePortfolioCall(scope, createReferencePortfolioRequest, _callback, opts);

    }


    private ApiResponse<Portfolio> createReferencePortfolioWithHttpInfo(String scope, CreateReferencePortfolioRequest createReferencePortfolioRequest) throws ApiException {
        okhttp3.Call localVarCall = createReferencePortfolioValidateBeforeCall(scope, createReferencePortfolioRequest, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<Portfolio>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<Portfolio> createReferencePortfolioWithHttpInfo(String scope, CreateReferencePortfolioRequest createReferencePortfolioRequest, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = createReferencePortfolioValidateBeforeCall(scope, createReferencePortfolioRequest, null, opts);
        Type localVarReturnType = new TypeToken<Portfolio>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createReferencePortfolioAsync(String scope, CreateReferencePortfolioRequest createReferencePortfolioRequest, final ApiCallback<Portfolio> _callback) throws ApiException {

        okhttp3.Call localVarCall = createReferencePortfolioValidateBeforeCall(scope, createReferencePortfolioRequest, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<Portfolio>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call createReferencePortfolioAsync(String scope, CreateReferencePortfolioRequest createReferencePortfolioRequest, final ApiCallback<Portfolio> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = createReferencePortfolioValidateBeforeCall(scope, createReferencePortfolioRequest, _callback, opts);
        Type localVarReturnType = new TypeToken<Portfolio>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIcreateReferencePortfolioRequest {
        private final String scope;
        private final CreateReferencePortfolioRequest createReferencePortfolioRequest;

        private APIcreateReferencePortfolioRequest(String scope, CreateReferencePortfolioRequest createReferencePortfolioRequest) {
            this.scope = scope;
            this.createReferencePortfolioRequest = createReferencePortfolioRequest;
        }

        /**
         * Build call for createReferencePortfolio
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The created reference portfolio, with populated id </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return createReferencePortfolioCall(scope, createReferencePortfolioRequest, _callback);
        }

        /**
         * Execute createReferencePortfolio request
         * @return Portfolio
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The created reference portfolio, with populated id </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public Portfolio execute() throws ApiException {
            ApiResponse<Portfolio> localVarResp = createReferencePortfolioWithHttpInfo(scope, createReferencePortfolioRequest);
            return localVarResp.getData();
        }

        /**
         * Execute createReferencePortfolio request. Use any specified configuration options to override any other configuration for this request only.
         * @return Portfolio
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The created reference portfolio, with populated id </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public Portfolio execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<Portfolio> localVarResp = createReferencePortfolioWithHttpInfo(scope, createReferencePortfolioRequest, opts);
            return localVarResp.getData();
        }

        /**
         * Execute createReferencePortfolio request with HTTP info returned
         * @return ApiResponse&lt;Portfolio&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The created reference portfolio, with populated id </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Portfolio> executeWithHttpInfo() throws ApiException {
            return createReferencePortfolioWithHttpInfo(scope, createReferencePortfolioRequest);
        }

        /**
         * Execute createReferencePortfolio request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;Portfolio&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The created reference portfolio, with populated id </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Portfolio> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return createReferencePortfolioWithHttpInfo(scope, createReferencePortfolioRequest, opts);
        }

        /**
         * Execute createReferencePortfolio request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The created reference portfolio, with populated id </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Portfolio> _callback) throws ApiException {
            return createReferencePortfolioAsync(scope, createReferencePortfolioRequest, _callback);
        }

        /**
         * Execute createReferencePortfolio request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The created reference portfolio, with populated id </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Portfolio> _callback, ConfigurationOptions opts) throws ApiException {
            return createReferencePortfolioAsync(scope, createReferencePortfolioRequest, _callback, opts);
        }
    }

    /**
     * CreateReferencePortfolio: Create reference portfolio
     * Create a reference portfolio in a particular scope.
     * @param scope The scope in which to create the reference portfolio. (required)
     * @param createReferencePortfolioRequest The definition of the reference portfolio. (required)
     * @return APIcreateReferencePortfolioRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The created reference portfolio, with populated id </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIcreateReferencePortfolioRequest createReferencePortfolio(String scope, CreateReferencePortfolioRequest createReferencePortfolioRequest) {
        return new APIcreateReferencePortfolioRequest(scope, createReferencePortfolioRequest);
    }
    private okhttp3.Call getReferencePortfolioConstituentsCall(String scope, String code, String effectiveAt, OffsetDateTime asAt, List<String> propertyKeys, final ApiCallback _callback) throws ApiException {
        return getReferencePortfolioConstituentsCall(scope, code, effectiveAt, asAt, propertyKeys,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call getReferencePortfolioConstituentsCall(String scope, String code, String effectiveAt, OffsetDateTime asAt, List<String> propertyKeys, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/referenceportfolios/{scope}/{code}/constituents"
            .replace("{" + "scope" + "}", localVarApiClient.escapeString(scope.toString()))
            .replace("{" + "code" + "}", localVarApiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (effectiveAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("effectiveAt", effectiveAt));
        }

        if (asAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asAt", asAt));
        }

        if (propertyKeys != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "propertyKeys", propertyKeys));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getReferencePortfolioConstituentsValidateBeforeCall(String scope, String code, String effectiveAt, OffsetDateTime asAt, List<String> propertyKeys, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling getReferencePortfolioConstituents(Async)");
        }

        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling getReferencePortfolioConstituents(Async)");
        }

        return getReferencePortfolioConstituentsCall(scope, code, effectiveAt, asAt, propertyKeys, _callback, opts);

    }


    private ApiResponse<GetReferencePortfolioConstituentsResponse> getReferencePortfolioConstituentsWithHttpInfo(String scope, String code, String effectiveAt, OffsetDateTime asAt, List<String> propertyKeys) throws ApiException {
        okhttp3.Call localVarCall = getReferencePortfolioConstituentsValidateBeforeCall(scope, code, effectiveAt, asAt, propertyKeys, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<GetReferencePortfolioConstituentsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<GetReferencePortfolioConstituentsResponse> getReferencePortfolioConstituentsWithHttpInfo(String scope, String code, String effectiveAt, OffsetDateTime asAt, List<String> propertyKeys, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = getReferencePortfolioConstituentsValidateBeforeCall(scope, code, effectiveAt, asAt, propertyKeys, null, opts);
        Type localVarReturnType = new TypeToken<GetReferencePortfolioConstituentsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getReferencePortfolioConstituentsAsync(String scope, String code, String effectiveAt, OffsetDateTime asAt, List<String> propertyKeys, final ApiCallback<GetReferencePortfolioConstituentsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getReferencePortfolioConstituentsValidateBeforeCall(scope, code, effectiveAt, asAt, propertyKeys, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<GetReferencePortfolioConstituentsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call getReferencePortfolioConstituentsAsync(String scope, String code, String effectiveAt, OffsetDateTime asAt, List<String> propertyKeys, final ApiCallback<GetReferencePortfolioConstituentsResponse> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = getReferencePortfolioConstituentsValidateBeforeCall(scope, code, effectiveAt, asAt, propertyKeys, _callback, opts);
        Type localVarReturnType = new TypeToken<GetReferencePortfolioConstituentsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetReferencePortfolioConstituentsRequest {
        private final String scope;
        private final String code;
        private String effectiveAt;
        private OffsetDateTime asAt;
        private List<String> propertyKeys;

        private APIgetReferencePortfolioConstituentsRequest(String scope, String code) {
            this.scope = scope;
            this.code = code;
        }

        /**
         * Set effectiveAt
         * @param effectiveAt The effective date of the constituents to retrieve. Defaults to the current LUSID system datetime if not specified. (optional)
         * @return APIgetReferencePortfolioConstituentsRequest
         */
        public APIgetReferencePortfolioConstituentsRequest effectiveAt(String effectiveAt) {
            this.effectiveAt = effectiveAt;
            return this;
        }

        /**
         * Set asAt
         * @param asAt The asAt datetime at which to retrieve constituents. Defaults to return the latest version  of each constituent if not specified. (optional)
         * @return APIgetReferencePortfolioConstituentsRequest
         */
        public APIgetReferencePortfolioConstituentsRequest asAt(OffsetDateTime asAt) {
            this.asAt = asAt;
            return this;
        }

        /**
         * Set propertyKeys
         * @param propertyKeys A list of property keys from the &#39;Instrument&#39; or &#39;ReferenceHolding&#39; domain to decorate onto  constituents. These take the format {domain}/{scope}/{code} e.g. &#39;Instrument/system/Name&#39; or  &#39;ReferenceHolding/strategy/quantsignal&#39;. Defaults to return all available instrument and reference holding properties if not specified. (optional)
         * @return APIgetReferencePortfolioConstituentsRequest
         */
        public APIgetReferencePortfolioConstituentsRequest propertyKeys(List<String> propertyKeys) {
            this.propertyKeys = propertyKeys;
            return this;
        }

        /**
         * Build call for getReferencePortfolioConstituents
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested reference portfolio constituents </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getReferencePortfolioConstituentsCall(scope, code, effectiveAt, asAt, propertyKeys, _callback);
        }

        /**
         * Execute getReferencePortfolioConstituents request
         * @return GetReferencePortfolioConstituentsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested reference portfolio constituents </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public GetReferencePortfolioConstituentsResponse execute() throws ApiException {
            ApiResponse<GetReferencePortfolioConstituentsResponse> localVarResp = getReferencePortfolioConstituentsWithHttpInfo(scope, code, effectiveAt, asAt, propertyKeys);
            return localVarResp.getData();
        }

        /**
         * Execute getReferencePortfolioConstituents request. Use any specified configuration options to override any other configuration for this request only.
         * @return GetReferencePortfolioConstituentsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested reference portfolio constituents </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public GetReferencePortfolioConstituentsResponse execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<GetReferencePortfolioConstituentsResponse> localVarResp = getReferencePortfolioConstituentsWithHttpInfo(scope, code, effectiveAt, asAt, propertyKeys, opts);
            return localVarResp.getData();
        }

        /**
         * Execute getReferencePortfolioConstituents request with HTTP info returned
         * @return ApiResponse&lt;GetReferencePortfolioConstituentsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested reference portfolio constituents </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GetReferencePortfolioConstituentsResponse> executeWithHttpInfo() throws ApiException {
            return getReferencePortfolioConstituentsWithHttpInfo(scope, code, effectiveAt, asAt, propertyKeys);
        }

        /**
         * Execute getReferencePortfolioConstituents request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;GetReferencePortfolioConstituentsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested reference portfolio constituents </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GetReferencePortfolioConstituentsResponse> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return getReferencePortfolioConstituentsWithHttpInfo(scope, code, effectiveAt, asAt, propertyKeys, opts);
        }

        /**
         * Execute getReferencePortfolioConstituents request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested reference portfolio constituents </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GetReferencePortfolioConstituentsResponse> _callback) throws ApiException {
            return getReferencePortfolioConstituentsAsync(scope, code, effectiveAt, asAt, propertyKeys, _callback);
        }

        /**
         * Execute getReferencePortfolioConstituents request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested reference portfolio constituents </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GetReferencePortfolioConstituentsResponse> _callback, ConfigurationOptions opts) throws ApiException {
            return getReferencePortfolioConstituentsAsync(scope, code, effectiveAt, asAt, propertyKeys, _callback, opts);
        }
    }

    /**
     * GetReferencePortfolioConstituents: Get reference portfolio constituents
     * Get constituents from a reference portfolio at a particular effective time.
     * @param scope The scope of the reference portfolio. (required)
     * @param code The code of the reference portfolio. Together with the scope this uniquely identifies  the reference portfolio. (required)
     * @return APIgetReferencePortfolioConstituentsRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested reference portfolio constituents </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIgetReferencePortfolioConstituentsRequest getReferencePortfolioConstituents(String scope, String code) {
        return new APIgetReferencePortfolioConstituentsRequest(scope, code);
    }
    private okhttp3.Call listConstituentsAdjustmentsCall(String scope, String code, String fromEffectiveAt, String toEffectiveAt, OffsetDateTime asAtTime, final ApiCallback _callback) throws ApiException {
        return listConstituentsAdjustmentsCall(scope, code, fromEffectiveAt, toEffectiveAt, asAtTime,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call listConstituentsAdjustmentsCall(String scope, String code, String fromEffectiveAt, String toEffectiveAt, OffsetDateTime asAtTime, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/referenceportfolios/{scope}/{code}/constituentsadjustments"
            .replace("{" + "scope" + "}", localVarApiClient.escapeString(scope.toString()))
            .replace("{" + "code" + "}", localVarApiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fromEffectiveAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fromEffectiveAt", fromEffectiveAt));
        }

        if (toEffectiveAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("toEffectiveAt", toEffectiveAt));
        }

        if (asAtTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asAtTime", asAtTime));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listConstituentsAdjustmentsValidateBeforeCall(String scope, String code, String fromEffectiveAt, String toEffectiveAt, OffsetDateTime asAtTime, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling listConstituentsAdjustments(Async)");
        }

        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling listConstituentsAdjustments(Async)");
        }

        // verify the required parameter 'fromEffectiveAt' is set
        if (fromEffectiveAt == null) {
            throw new ApiException("Missing the required parameter 'fromEffectiveAt' when calling listConstituentsAdjustments(Async)");
        }

        // verify the required parameter 'toEffectiveAt' is set
        if (toEffectiveAt == null) {
            throw new ApiException("Missing the required parameter 'toEffectiveAt' when calling listConstituentsAdjustments(Async)");
        }

        return listConstituentsAdjustmentsCall(scope, code, fromEffectiveAt, toEffectiveAt, asAtTime, _callback, opts);

    }


    private ApiResponse<ResourceListOfConstituentsAdjustmentHeader> listConstituentsAdjustmentsWithHttpInfo(String scope, String code, String fromEffectiveAt, String toEffectiveAt, OffsetDateTime asAtTime) throws ApiException {
        okhttp3.Call localVarCall = listConstituentsAdjustmentsValidateBeforeCall(scope, code, fromEffectiveAt, toEffectiveAt, asAtTime, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<ResourceListOfConstituentsAdjustmentHeader>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<ResourceListOfConstituentsAdjustmentHeader> listConstituentsAdjustmentsWithHttpInfo(String scope, String code, String fromEffectiveAt, String toEffectiveAt, OffsetDateTime asAtTime, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = listConstituentsAdjustmentsValidateBeforeCall(scope, code, fromEffectiveAt, toEffectiveAt, asAtTime, null, opts);
        Type localVarReturnType = new TypeToken<ResourceListOfConstituentsAdjustmentHeader>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listConstituentsAdjustmentsAsync(String scope, String code, String fromEffectiveAt, String toEffectiveAt, OffsetDateTime asAtTime, final ApiCallback<ResourceListOfConstituentsAdjustmentHeader> _callback) throws ApiException {

        okhttp3.Call localVarCall = listConstituentsAdjustmentsValidateBeforeCall(scope, code, fromEffectiveAt, toEffectiveAt, asAtTime, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<ResourceListOfConstituentsAdjustmentHeader>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call listConstituentsAdjustmentsAsync(String scope, String code, String fromEffectiveAt, String toEffectiveAt, OffsetDateTime asAtTime, final ApiCallback<ResourceListOfConstituentsAdjustmentHeader> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = listConstituentsAdjustmentsValidateBeforeCall(scope, code, fromEffectiveAt, toEffectiveAt, asAtTime, _callback, opts);
        Type localVarReturnType = new TypeToken<ResourceListOfConstituentsAdjustmentHeader>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIlistConstituentsAdjustmentsRequest {
        private final String scope;
        private final String code;
        private final String fromEffectiveAt;
        private final String toEffectiveAt;
        private OffsetDateTime asAtTime;

        private APIlistConstituentsAdjustmentsRequest(String scope, String code, String fromEffectiveAt, String toEffectiveAt) {
            this.scope = scope;
            this.code = code;
            this.fromEffectiveAt = fromEffectiveAt;
            this.toEffectiveAt = toEffectiveAt;
        }

        /**
         * Set asAtTime
         * @param asAtTime The asAt time for which the result is valid. (optional)
         * @return APIlistConstituentsAdjustmentsRequest
         */
        public APIlistConstituentsAdjustmentsRequest asAtTime(OffsetDateTime asAtTime) {
            this.asAtTime = asAtTime;
            return this;
        }

        /**
         * Build call for listConstituentsAdjustments
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listConstituentsAdjustmentsCall(scope, code, fromEffectiveAt, toEffectiveAt, asAtTime, _callback);
        }

        /**
         * Execute listConstituentsAdjustments request
         * @return ResourceListOfConstituentsAdjustmentHeader
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ResourceListOfConstituentsAdjustmentHeader execute() throws ApiException {
            ApiResponse<ResourceListOfConstituentsAdjustmentHeader> localVarResp = listConstituentsAdjustmentsWithHttpInfo(scope, code, fromEffectiveAt, toEffectiveAt, asAtTime);
            return localVarResp.getData();
        }

        /**
         * Execute listConstituentsAdjustments request. Use any specified configuration options to override any other configuration for this request only.
         * @return ResourceListOfConstituentsAdjustmentHeader
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ResourceListOfConstituentsAdjustmentHeader execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<ResourceListOfConstituentsAdjustmentHeader> localVarResp = listConstituentsAdjustmentsWithHttpInfo(scope, code, fromEffectiveAt, toEffectiveAt, asAtTime, opts);
            return localVarResp.getData();
        }

        /**
         * Execute listConstituentsAdjustments request with HTTP info returned
         * @return ApiResponse&lt;ResourceListOfConstituentsAdjustmentHeader&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ResourceListOfConstituentsAdjustmentHeader> executeWithHttpInfo() throws ApiException {
            return listConstituentsAdjustmentsWithHttpInfo(scope, code, fromEffectiveAt, toEffectiveAt, asAtTime);
        }

        /**
         * Execute listConstituentsAdjustments request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;ResourceListOfConstituentsAdjustmentHeader&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ResourceListOfConstituentsAdjustmentHeader> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return listConstituentsAdjustmentsWithHttpInfo(scope, code, fromEffectiveAt, toEffectiveAt, asAtTime, opts);
        }

        /**
         * Execute listConstituentsAdjustments request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ResourceListOfConstituentsAdjustmentHeader> _callback) throws ApiException {
            return listConstituentsAdjustmentsAsync(scope, code, fromEffectiveAt, toEffectiveAt, asAtTime, _callback);
        }

        /**
         * Execute listConstituentsAdjustments request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ResourceListOfConstituentsAdjustmentHeader> _callback, ConfigurationOptions opts) throws ApiException {
            return listConstituentsAdjustmentsAsync(scope, code, fromEffectiveAt, toEffectiveAt, asAtTime, _callback, opts);
        }
    }

    /**
     * ListConstituentsAdjustments: List constituents adjustments
     * List adjustments made to constituents in a reference portfolio.
     * @param scope The scope of the reference portfolio. (required)
     * @param code The code of the reference portfolio. Together with the scope this uniquely identifies  the reference portfolio. (required)
     * @param fromEffectiveAt Events between this time (inclusive) and the toEffectiveAt are returned. (required)
     * @param toEffectiveAt Events between this time (inclusive) and the fromEffectiveAt are returned. (required)
     * @return APIlistConstituentsAdjustmentsRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIlistConstituentsAdjustmentsRequest listConstituentsAdjustments(String scope, String code, String fromEffectiveAt, String toEffectiveAt) {
        return new APIlistConstituentsAdjustmentsRequest(scope, code, fromEffectiveAt, toEffectiveAt);
    }
    private okhttp3.Call upsertReferencePortfolioConstituentPropertiesCall(String scope, String code, UpsertReferencePortfolioConstituentPropertiesRequest upsertReferencePortfolioConstituentPropertiesRequest, final ApiCallback _callback) throws ApiException {
        return upsertReferencePortfolioConstituentPropertiesCall(scope, code, upsertReferencePortfolioConstituentPropertiesRequest,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call upsertReferencePortfolioConstituentPropertiesCall(String scope, String code, UpsertReferencePortfolioConstituentPropertiesRequest upsertReferencePortfolioConstituentPropertiesRequest, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = upsertReferencePortfolioConstituentPropertiesRequest;

        // create path and map variables
        String localVarPath = "/api/referenceportfolios/{scope}/{code}/constituents/properties"
            .replace("{" + "scope" + "}", localVarApiClient.escapeString(scope.toString()))
            .replace("{" + "code" + "}", localVarApiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call upsertReferencePortfolioConstituentPropertiesValidateBeforeCall(String scope, String code, UpsertReferencePortfolioConstituentPropertiesRequest upsertReferencePortfolioConstituentPropertiesRequest, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling upsertReferencePortfolioConstituentProperties(Async)");
        }

        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling upsertReferencePortfolioConstituentProperties(Async)");
        }

        // verify the required parameter 'upsertReferencePortfolioConstituentPropertiesRequest' is set
        if (upsertReferencePortfolioConstituentPropertiesRequest == null) {
            throw new ApiException("Missing the required parameter 'upsertReferencePortfolioConstituentPropertiesRequest' when calling upsertReferencePortfolioConstituentProperties(Async)");
        }

        return upsertReferencePortfolioConstituentPropertiesCall(scope, code, upsertReferencePortfolioConstituentPropertiesRequest, _callback, opts);

    }


    private ApiResponse<UpsertReferencePortfolioConstituentPropertiesResponse> upsertReferencePortfolioConstituentPropertiesWithHttpInfo(String scope, String code, UpsertReferencePortfolioConstituentPropertiesRequest upsertReferencePortfolioConstituentPropertiesRequest) throws ApiException {
        okhttp3.Call localVarCall = upsertReferencePortfolioConstituentPropertiesValidateBeforeCall(scope, code, upsertReferencePortfolioConstituentPropertiesRequest, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<UpsertReferencePortfolioConstituentPropertiesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<UpsertReferencePortfolioConstituentPropertiesResponse> upsertReferencePortfolioConstituentPropertiesWithHttpInfo(String scope, String code, UpsertReferencePortfolioConstituentPropertiesRequest upsertReferencePortfolioConstituentPropertiesRequest, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = upsertReferencePortfolioConstituentPropertiesValidateBeforeCall(scope, code, upsertReferencePortfolioConstituentPropertiesRequest, null, opts);
        Type localVarReturnType = new TypeToken<UpsertReferencePortfolioConstituentPropertiesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call upsertReferencePortfolioConstituentPropertiesAsync(String scope, String code, UpsertReferencePortfolioConstituentPropertiesRequest upsertReferencePortfolioConstituentPropertiesRequest, final ApiCallback<UpsertReferencePortfolioConstituentPropertiesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = upsertReferencePortfolioConstituentPropertiesValidateBeforeCall(scope, code, upsertReferencePortfolioConstituentPropertiesRequest, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<UpsertReferencePortfolioConstituentPropertiesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call upsertReferencePortfolioConstituentPropertiesAsync(String scope, String code, UpsertReferencePortfolioConstituentPropertiesRequest upsertReferencePortfolioConstituentPropertiesRequest, final ApiCallback<UpsertReferencePortfolioConstituentPropertiesResponse> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = upsertReferencePortfolioConstituentPropertiesValidateBeforeCall(scope, code, upsertReferencePortfolioConstituentPropertiesRequest, _callback, opts);
        Type localVarReturnType = new TypeToken<UpsertReferencePortfolioConstituentPropertiesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIupsertReferencePortfolioConstituentPropertiesRequest {
        private final String scope;
        private final String code;
        private final UpsertReferencePortfolioConstituentPropertiesRequest upsertReferencePortfolioConstituentPropertiesRequest;

        private APIupsertReferencePortfolioConstituentPropertiesRequest(String scope, String code, UpsertReferencePortfolioConstituentPropertiesRequest upsertReferencePortfolioConstituentPropertiesRequest) {
            this.scope = scope;
            this.code = code;
            this.upsertReferencePortfolioConstituentPropertiesRequest = upsertReferencePortfolioConstituentPropertiesRequest;
        }

        /**
         * Build call for upsertReferencePortfolioConstituentProperties
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return upsertReferencePortfolioConstituentPropertiesCall(scope, code, upsertReferencePortfolioConstituentPropertiesRequest, _callback);
        }

        /**
         * Execute upsertReferencePortfolioConstituentProperties request
         * @return UpsertReferencePortfolioConstituentPropertiesResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public UpsertReferencePortfolioConstituentPropertiesResponse execute() throws ApiException {
            ApiResponse<UpsertReferencePortfolioConstituentPropertiesResponse> localVarResp = upsertReferencePortfolioConstituentPropertiesWithHttpInfo(scope, code, upsertReferencePortfolioConstituentPropertiesRequest);
            return localVarResp.getData();
        }

        /**
         * Execute upsertReferencePortfolioConstituentProperties request. Use any specified configuration options to override any other configuration for this request only.
         * @return UpsertReferencePortfolioConstituentPropertiesResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public UpsertReferencePortfolioConstituentPropertiesResponse execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<UpsertReferencePortfolioConstituentPropertiesResponse> localVarResp = upsertReferencePortfolioConstituentPropertiesWithHttpInfo(scope, code, upsertReferencePortfolioConstituentPropertiesRequest, opts);
            return localVarResp.getData();
        }

        /**
         * Execute upsertReferencePortfolioConstituentProperties request with HTTP info returned
         * @return ApiResponse&lt;UpsertReferencePortfolioConstituentPropertiesResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UpsertReferencePortfolioConstituentPropertiesResponse> executeWithHttpInfo() throws ApiException {
            return upsertReferencePortfolioConstituentPropertiesWithHttpInfo(scope, code, upsertReferencePortfolioConstituentPropertiesRequest);
        }

        /**
         * Execute upsertReferencePortfolioConstituentProperties request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;UpsertReferencePortfolioConstituentPropertiesResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UpsertReferencePortfolioConstituentPropertiesResponse> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return upsertReferencePortfolioConstituentPropertiesWithHttpInfo(scope, code, upsertReferencePortfolioConstituentPropertiesRequest, opts);
        }

        /**
         * Execute upsertReferencePortfolioConstituentProperties request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UpsertReferencePortfolioConstituentPropertiesResponse> _callback) throws ApiException {
            return upsertReferencePortfolioConstituentPropertiesAsync(scope, code, upsertReferencePortfolioConstituentPropertiesRequest, _callback);
        }

        /**
         * Execute upsertReferencePortfolioConstituentProperties request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UpsertReferencePortfolioConstituentPropertiesResponse> _callback, ConfigurationOptions opts) throws ApiException {
            return upsertReferencePortfolioConstituentPropertiesAsync(scope, code, upsertReferencePortfolioConstituentPropertiesRequest, _callback, opts);
        }
    }

    /**
     * [EARLY ACCESS] UpsertReferencePortfolioConstituentProperties: Upsert constituent properties
     * Create or update one or more constituent properties for a single constituent in the reference portfolio. Each property will be updated if it already exists, created if it does not and deleted if value is null. Both constituent and portfolio must exist at the time when properties are created or updated.
     * @param scope The scope of the reference portfolio. (required)
     * @param code The code of the reference portfolio. Together with the scope this uniquely identifies  the reference portfolio. (required)
     * @param upsertReferencePortfolioConstituentPropertiesRequest The request to modify properties for the constituent. (required)
     * @return APIupsertReferencePortfolioConstituentPropertiesRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIupsertReferencePortfolioConstituentPropertiesRequest upsertReferencePortfolioConstituentProperties(String scope, String code, UpsertReferencePortfolioConstituentPropertiesRequest upsertReferencePortfolioConstituentPropertiesRequest) {
        return new APIupsertReferencePortfolioConstituentPropertiesRequest(scope, code, upsertReferencePortfolioConstituentPropertiesRequest);
    }
    private okhttp3.Call upsertReferencePortfolioConstituentsCall(String scope, String code, UpsertReferencePortfolioConstituentsRequest upsertReferencePortfolioConstituentsRequest, final ApiCallback _callback) throws ApiException {
        return upsertReferencePortfolioConstituentsCall(scope, code, upsertReferencePortfolioConstituentsRequest,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call upsertReferencePortfolioConstituentsCall(String scope, String code, UpsertReferencePortfolioConstituentsRequest upsertReferencePortfolioConstituentsRequest, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = upsertReferencePortfolioConstituentsRequest;

        // create path and map variables
        String localVarPath = "/api/referenceportfolios/{scope}/{code}/constituents"
            .replace("{" + "scope" + "}", localVarApiClient.escapeString(scope.toString()))
            .replace("{" + "code" + "}", localVarApiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call upsertReferencePortfolioConstituentsValidateBeforeCall(String scope, String code, UpsertReferencePortfolioConstituentsRequest upsertReferencePortfolioConstituentsRequest, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling upsertReferencePortfolioConstituents(Async)");
        }

        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling upsertReferencePortfolioConstituents(Async)");
        }

        // verify the required parameter 'upsertReferencePortfolioConstituentsRequest' is set
        if (upsertReferencePortfolioConstituentsRequest == null) {
            throw new ApiException("Missing the required parameter 'upsertReferencePortfolioConstituentsRequest' when calling upsertReferencePortfolioConstituents(Async)");
        }

        return upsertReferencePortfolioConstituentsCall(scope, code, upsertReferencePortfolioConstituentsRequest, _callback, opts);

    }


    private ApiResponse<UpsertReferencePortfolioConstituentsResponse> upsertReferencePortfolioConstituentsWithHttpInfo(String scope, String code, UpsertReferencePortfolioConstituentsRequest upsertReferencePortfolioConstituentsRequest) throws ApiException {
        okhttp3.Call localVarCall = upsertReferencePortfolioConstituentsValidateBeforeCall(scope, code, upsertReferencePortfolioConstituentsRequest, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<UpsertReferencePortfolioConstituentsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<UpsertReferencePortfolioConstituentsResponse> upsertReferencePortfolioConstituentsWithHttpInfo(String scope, String code, UpsertReferencePortfolioConstituentsRequest upsertReferencePortfolioConstituentsRequest, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = upsertReferencePortfolioConstituentsValidateBeforeCall(scope, code, upsertReferencePortfolioConstituentsRequest, null, opts);
        Type localVarReturnType = new TypeToken<UpsertReferencePortfolioConstituentsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call upsertReferencePortfolioConstituentsAsync(String scope, String code, UpsertReferencePortfolioConstituentsRequest upsertReferencePortfolioConstituentsRequest, final ApiCallback<UpsertReferencePortfolioConstituentsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = upsertReferencePortfolioConstituentsValidateBeforeCall(scope, code, upsertReferencePortfolioConstituentsRequest, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<UpsertReferencePortfolioConstituentsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call upsertReferencePortfolioConstituentsAsync(String scope, String code, UpsertReferencePortfolioConstituentsRequest upsertReferencePortfolioConstituentsRequest, final ApiCallback<UpsertReferencePortfolioConstituentsResponse> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = upsertReferencePortfolioConstituentsValidateBeforeCall(scope, code, upsertReferencePortfolioConstituentsRequest, _callback, opts);
        Type localVarReturnType = new TypeToken<UpsertReferencePortfolioConstituentsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIupsertReferencePortfolioConstituentsRequest {
        private final String scope;
        private final String code;
        private final UpsertReferencePortfolioConstituentsRequest upsertReferencePortfolioConstituentsRequest;

        private APIupsertReferencePortfolioConstituentsRequest(String scope, String code, UpsertReferencePortfolioConstituentsRequest upsertReferencePortfolioConstituentsRequest) {
            this.scope = scope;
            this.code = code;
            this.upsertReferencePortfolioConstituentsRequest = upsertReferencePortfolioConstituentsRequest;
        }

        /**
         * Build call for upsertReferencePortfolioConstituents
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return upsertReferencePortfolioConstituentsCall(scope, code, upsertReferencePortfolioConstituentsRequest, _callback);
        }

        /**
         * Execute upsertReferencePortfolioConstituents request
         * @return UpsertReferencePortfolioConstituentsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public UpsertReferencePortfolioConstituentsResponse execute() throws ApiException {
            ApiResponse<UpsertReferencePortfolioConstituentsResponse> localVarResp = upsertReferencePortfolioConstituentsWithHttpInfo(scope, code, upsertReferencePortfolioConstituentsRequest);
            return localVarResp.getData();
        }

        /**
         * Execute upsertReferencePortfolioConstituents request. Use any specified configuration options to override any other configuration for this request only.
         * @return UpsertReferencePortfolioConstituentsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public UpsertReferencePortfolioConstituentsResponse execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<UpsertReferencePortfolioConstituentsResponse> localVarResp = upsertReferencePortfolioConstituentsWithHttpInfo(scope, code, upsertReferencePortfolioConstituentsRequest, opts);
            return localVarResp.getData();
        }

        /**
         * Execute upsertReferencePortfolioConstituents request with HTTP info returned
         * @return ApiResponse&lt;UpsertReferencePortfolioConstituentsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UpsertReferencePortfolioConstituentsResponse> executeWithHttpInfo() throws ApiException {
            return upsertReferencePortfolioConstituentsWithHttpInfo(scope, code, upsertReferencePortfolioConstituentsRequest);
        }

        /**
         * Execute upsertReferencePortfolioConstituents request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;UpsertReferencePortfolioConstituentsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UpsertReferencePortfolioConstituentsResponse> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return upsertReferencePortfolioConstituentsWithHttpInfo(scope, code, upsertReferencePortfolioConstituentsRequest, opts);
        }

        /**
         * Execute upsertReferencePortfolioConstituents request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UpsertReferencePortfolioConstituentsResponse> _callback) throws ApiException {
            return upsertReferencePortfolioConstituentsAsync(scope, code, upsertReferencePortfolioConstituentsRequest, _callback);
        }

        /**
         * Execute upsertReferencePortfolioConstituents request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UpsertReferencePortfolioConstituentsResponse> _callback, ConfigurationOptions opts) throws ApiException {
            return upsertReferencePortfolioConstituentsAsync(scope, code, upsertReferencePortfolioConstituentsRequest, _callback, opts);
        }
    }

    /**
     * UpsertReferencePortfolioConstituents: Upsert reference portfolio constituents
     * Add constituents to a reference portfolio.
     * @param scope The scope of the reference portfolio. (required)
     * @param code The code of the reference portfolio. Together with the scope this uniquely identifies  the reference portfolio. (required)
     * @param upsertReferencePortfolioConstituentsRequest The constituents to upload to the reference portfolio. (required)
     * @return APIupsertReferencePortfolioConstituentsRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIupsertReferencePortfolioConstituentsRequest upsertReferencePortfolioConstituents(String scope, String code, UpsertReferencePortfolioConstituentsRequest upsertReferencePortfolioConstituentsRequest) {
        return new APIupsertReferencePortfolioConstituentsRequest(scope, code, upsertReferencePortfolioConstituentsRequest);
    }
}
