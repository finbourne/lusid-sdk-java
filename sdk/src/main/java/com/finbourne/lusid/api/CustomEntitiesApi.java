/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.api;

import com.finbourne.lusid.ApiCallback;
import com.finbourne.lusid.ApiClient;
import com.finbourne.lusid.ApiException;
import com.finbourne.lusid.ApiResponse;
import com.finbourne.lusid.Configuration;
import com.finbourne.lusid.Pair;
import com.finbourne.lusid.ProgressRequestBody;
import com.finbourne.lusid.ProgressResponseBody;
import com.finbourne.lusid.extensions.ConfigurationOptions;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.finbourne.lusid.model.AccessMetadataOperation;
import com.finbourne.lusid.model.AccessMetadataValue;
import com.finbourne.lusid.model.CustomEntityRequest;
import com.finbourne.lusid.model.CustomEntityResponse;
import com.finbourne.lusid.model.DeletedEntityResponse;
import com.finbourne.lusid.model.LusidProblemDetails;
import com.finbourne.lusid.model.LusidValidationProblemDetails;
import java.time.OffsetDateTime;
import com.finbourne.lusid.model.PagedResourceListOfCustomEntityResponse;
import com.finbourne.lusid.model.ResourceListOfRelationship;
import com.finbourne.lusid.model.UpsertCustomEntitiesResponse;
import com.finbourne.lusid.model.UpsertCustomEntityAccessMetadataRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CustomEntitiesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CustomEntitiesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CustomEntitiesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call deleteCustomEntityCall(String entityType, String identifierType, String identifierValue, String identifierScope, final ApiCallback _callback) throws ApiException {
        return deleteCustomEntityCall(entityType, identifierType, identifierValue, identifierScope,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call deleteCustomEntityCall(String entityType, String identifierType, String identifierValue, String identifierScope, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/customentities/{entityType}/{identifierType}/{identifierValue}"
            .replace("{" + "entityType" + "}", localVarApiClient.escapeString(entityType.toString()))
            .replace("{" + "identifierType" + "}", localVarApiClient.escapeString(identifierType.toString()))
            .replace("{" + "identifierValue" + "}", localVarApiClient.escapeString(identifierValue.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (identifierScope != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("identifierScope", identifierScope));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteCustomEntityValidateBeforeCall(String entityType, String identifierType, String identifierValue, String identifierScope, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'entityType' is set
        if (entityType == null) {
            throw new ApiException("Missing the required parameter 'entityType' when calling deleteCustomEntity(Async)");
        }

        // verify the required parameter 'identifierType' is set
        if (identifierType == null) {
            throw new ApiException("Missing the required parameter 'identifierType' when calling deleteCustomEntity(Async)");
        }

        // verify the required parameter 'identifierValue' is set
        if (identifierValue == null) {
            throw new ApiException("Missing the required parameter 'identifierValue' when calling deleteCustomEntity(Async)");
        }

        // verify the required parameter 'identifierScope' is set
        if (identifierScope == null) {
            throw new ApiException("Missing the required parameter 'identifierScope' when calling deleteCustomEntity(Async)");
        }

        return deleteCustomEntityCall(entityType, identifierType, identifierValue, identifierScope, _callback, opts);

    }


    private ApiResponse<DeletedEntityResponse> deleteCustomEntityWithHttpInfo(String entityType, String identifierType, String identifierValue, String identifierScope) throws ApiException {
        okhttp3.Call localVarCall = deleteCustomEntityValidateBeforeCall(entityType, identifierType, identifierValue, identifierScope, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<DeletedEntityResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<DeletedEntityResponse> deleteCustomEntityWithHttpInfo(String entityType, String identifierType, String identifierValue, String identifierScope, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = deleteCustomEntityValidateBeforeCall(entityType, identifierType, identifierValue, identifierScope, null, opts);
        Type localVarReturnType = new TypeToken<DeletedEntityResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteCustomEntityAsync(String entityType, String identifierType, String identifierValue, String identifierScope, final ApiCallback<DeletedEntityResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteCustomEntityValidateBeforeCall(entityType, identifierType, identifierValue, identifierScope, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<DeletedEntityResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call deleteCustomEntityAsync(String entityType, String identifierType, String identifierValue, String identifierScope, final ApiCallback<DeletedEntityResponse> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = deleteCustomEntityValidateBeforeCall(entityType, identifierType, identifierValue, identifierScope, _callback, opts);
        Type localVarReturnType = new TypeToken<DeletedEntityResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIdeleteCustomEntityRequest {
        private final String entityType;
        private final String identifierType;
        private final String identifierValue;
        private final String identifierScope;

        private APIdeleteCustomEntityRequest(String entityType, String identifierType, String identifierValue, String identifierScope) {
            this.entityType = entityType;
            this.identifierType = identifierType;
            this.identifierValue = identifierValue;
            this.identifierScope = identifierScope;
        }

        /**
         * Build call for deleteCustomEntity
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Delete a Custom Entity instance. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteCustomEntityCall(entityType, identifierType, identifierValue, identifierScope, _callback);
        }

        /**
         * Execute deleteCustomEntity request
         * @return DeletedEntityResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Delete a Custom Entity instance. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public DeletedEntityResponse execute() throws ApiException {
            ApiResponse<DeletedEntityResponse> localVarResp = deleteCustomEntityWithHttpInfo(entityType, identifierType, identifierValue, identifierScope);
            return localVarResp.getData();
        }

        /**
         * Execute deleteCustomEntity request. Use any specified configuration options to override any other configuration for this request only.
         * @return DeletedEntityResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Delete a Custom Entity instance. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public DeletedEntityResponse execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<DeletedEntityResponse> localVarResp = deleteCustomEntityWithHttpInfo(entityType, identifierType, identifierValue, identifierScope, opts);
            return localVarResp.getData();
        }

        /**
         * Execute deleteCustomEntity request with HTTP info returned
         * @return ApiResponse&lt;DeletedEntityResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Delete a Custom Entity instance. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DeletedEntityResponse> executeWithHttpInfo() throws ApiException {
            return deleteCustomEntityWithHttpInfo(entityType, identifierType, identifierValue, identifierScope);
        }

        /**
         * Execute deleteCustomEntity request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;DeletedEntityResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Delete a Custom Entity instance. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DeletedEntityResponse> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return deleteCustomEntityWithHttpInfo(entityType, identifierType, identifierValue, identifierScope, opts);
        }

        /**
         * Execute deleteCustomEntity request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Delete a Custom Entity instance. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DeletedEntityResponse> _callback) throws ApiException {
            return deleteCustomEntityAsync(entityType, identifierType, identifierValue, identifierScope, _callback);
        }

        /**
         * Execute deleteCustomEntity request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Delete a Custom Entity instance. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DeletedEntityResponse> _callback, ConfigurationOptions opts) throws ApiException {
            return deleteCustomEntityAsync(entityType, identifierType, identifierValue, identifierScope, _callback, opts);
        }
    }

    /**
     * DeleteCustomEntity: Delete a Custom Entity instance.
     * Delete a Custom Entity instance by a specific entity type.
     * @param entityType The type of Custom Entity to remove. (required)
     * @param identifierType An identifier type attached to the Custom Entity instance. (required)
     * @param identifierValue The identifier value. (required)
     * @param identifierScope The identifier scope. (required)
     * @return APIdeleteCustomEntityRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete a Custom Entity instance. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIdeleteCustomEntityRequest deleteCustomEntity(String entityType, String identifierType, String identifierValue, String identifierScope) {
        return new APIdeleteCustomEntityRequest(entityType, identifierType, identifierValue, identifierScope);
    }
    private okhttp3.Call deleteCustomEntityAccessMetadataCall(String entityType, String identifierType, String identifierValue, String metadataKey, String identifierScope, String effectiveAt, OffsetDateTime effectiveUntil, final ApiCallback _callback) throws ApiException {
        return deleteCustomEntityAccessMetadataCall(entityType, identifierType, identifierValue, metadataKey, identifierScope, effectiveAt, effectiveUntil,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call deleteCustomEntityAccessMetadataCall(String entityType, String identifierType, String identifierValue, String metadataKey, String identifierScope, String effectiveAt, OffsetDateTime effectiveUntil, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/customentities/{entityType}/{identifierType}/{identifierValue}/metadata/{metadataKey}"
            .replace("{" + "entityType" + "}", localVarApiClient.escapeString(entityType.toString()))
            .replace("{" + "identifierType" + "}", localVarApiClient.escapeString(identifierType.toString()))
            .replace("{" + "identifierValue" + "}", localVarApiClient.escapeString(identifierValue.toString()))
            .replace("{" + "metadataKey" + "}", localVarApiClient.escapeString(metadataKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (identifierScope != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("identifierScope", identifierScope));
        }

        if (effectiveAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("effectiveAt", effectiveAt));
        }

        if (effectiveUntil != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("effectiveUntil", effectiveUntil));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteCustomEntityAccessMetadataValidateBeforeCall(String entityType, String identifierType, String identifierValue, String metadataKey, String identifierScope, String effectiveAt, OffsetDateTime effectiveUntil, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'entityType' is set
        if (entityType == null) {
            throw new ApiException("Missing the required parameter 'entityType' when calling deleteCustomEntityAccessMetadata(Async)");
        }

        // verify the required parameter 'identifierType' is set
        if (identifierType == null) {
            throw new ApiException("Missing the required parameter 'identifierType' when calling deleteCustomEntityAccessMetadata(Async)");
        }

        // verify the required parameter 'identifierValue' is set
        if (identifierValue == null) {
            throw new ApiException("Missing the required parameter 'identifierValue' when calling deleteCustomEntityAccessMetadata(Async)");
        }

        // verify the required parameter 'metadataKey' is set
        if (metadataKey == null) {
            throw new ApiException("Missing the required parameter 'metadataKey' when calling deleteCustomEntityAccessMetadata(Async)");
        }

        // verify the required parameter 'identifierScope' is set
        if (identifierScope == null) {
            throw new ApiException("Missing the required parameter 'identifierScope' when calling deleteCustomEntityAccessMetadata(Async)");
        }

        return deleteCustomEntityAccessMetadataCall(entityType, identifierType, identifierValue, metadataKey, identifierScope, effectiveAt, effectiveUntil, _callback, opts);

    }


    private ApiResponse<DeletedEntityResponse> deleteCustomEntityAccessMetadataWithHttpInfo(String entityType, String identifierType, String identifierValue, String metadataKey, String identifierScope, String effectiveAt, OffsetDateTime effectiveUntil) throws ApiException {
        okhttp3.Call localVarCall = deleteCustomEntityAccessMetadataValidateBeforeCall(entityType, identifierType, identifierValue, metadataKey, identifierScope, effectiveAt, effectiveUntil, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<DeletedEntityResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<DeletedEntityResponse> deleteCustomEntityAccessMetadataWithHttpInfo(String entityType, String identifierType, String identifierValue, String metadataKey, String identifierScope, String effectiveAt, OffsetDateTime effectiveUntil, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = deleteCustomEntityAccessMetadataValidateBeforeCall(entityType, identifierType, identifierValue, metadataKey, identifierScope, effectiveAt, effectiveUntil, null, opts);
        Type localVarReturnType = new TypeToken<DeletedEntityResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteCustomEntityAccessMetadataAsync(String entityType, String identifierType, String identifierValue, String metadataKey, String identifierScope, String effectiveAt, OffsetDateTime effectiveUntil, final ApiCallback<DeletedEntityResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteCustomEntityAccessMetadataValidateBeforeCall(entityType, identifierType, identifierValue, metadataKey, identifierScope, effectiveAt, effectiveUntil, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<DeletedEntityResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call deleteCustomEntityAccessMetadataAsync(String entityType, String identifierType, String identifierValue, String metadataKey, String identifierScope, String effectiveAt, OffsetDateTime effectiveUntil, final ApiCallback<DeletedEntityResponse> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = deleteCustomEntityAccessMetadataValidateBeforeCall(entityType, identifierType, identifierValue, metadataKey, identifierScope, effectiveAt, effectiveUntil, _callback, opts);
        Type localVarReturnType = new TypeToken<DeletedEntityResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIdeleteCustomEntityAccessMetadataRequest {
        private final String entityType;
        private final String identifierType;
        private final String identifierValue;
        private final String metadataKey;
        private final String identifierScope;
        private String effectiveAt;
        private OffsetDateTime effectiveUntil;

        private APIdeleteCustomEntityAccessMetadataRequest(String entityType, String identifierType, String identifierValue, String metadataKey, String identifierScope) {
            this.entityType = entityType;
            this.identifierType = identifierType;
            this.identifierValue = identifierValue;
            this.metadataKey = metadataKey;
            this.identifierScope = identifierScope;
        }

        /**
         * Set effectiveAt
         * @param effectiveAt The effectiveAt datetime at which to retrieve the Access Metadata. (optional)
         * @return APIdeleteCustomEntityAccessMetadataRequest
         */
        public APIdeleteCustomEntityAccessMetadataRequest effectiveAt(String effectiveAt) {
            this.effectiveAt = effectiveAt;
            return this;
        }

        /**
         * Set effectiveUntil
         * @param effectiveUntil The effective datetime until which the Access Metadata is valid. If not supplied this will be valid indefinitely, or until the next &#39;effectiveAt&#39; datetime of the Access Metadata. (optional)
         * @return APIdeleteCustomEntityAccessMetadataRequest
         */
        public APIdeleteCustomEntityAccessMetadataRequest effectiveUntil(OffsetDateTime effectiveUntil) {
            this.effectiveUntil = effectiveUntil;
            return this;
        }

        /**
         * Build call for deleteCustomEntityAccessMetadata
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The access metadata for the CustomEntity or any failure. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteCustomEntityAccessMetadataCall(entityType, identifierType, identifierValue, metadataKey, identifierScope, effectiveAt, effectiveUntil, _callback);
        }

        /**
         * Execute deleteCustomEntityAccessMetadata request
         * @return DeletedEntityResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The access metadata for the CustomEntity or any failure. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public DeletedEntityResponse execute() throws ApiException {
            ApiResponse<DeletedEntityResponse> localVarResp = deleteCustomEntityAccessMetadataWithHttpInfo(entityType, identifierType, identifierValue, metadataKey, identifierScope, effectiveAt, effectiveUntil);
            return localVarResp.getData();
        }

        /**
         * Execute deleteCustomEntityAccessMetadata request. Use any specified configuration options to override any other configuration for this request only.
         * @return DeletedEntityResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The access metadata for the CustomEntity or any failure. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public DeletedEntityResponse execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<DeletedEntityResponse> localVarResp = deleteCustomEntityAccessMetadataWithHttpInfo(entityType, identifierType, identifierValue, metadataKey, identifierScope, effectiveAt, effectiveUntil, opts);
            return localVarResp.getData();
        }

        /**
         * Execute deleteCustomEntityAccessMetadata request with HTTP info returned
         * @return ApiResponse&lt;DeletedEntityResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The access metadata for the CustomEntity or any failure. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DeletedEntityResponse> executeWithHttpInfo() throws ApiException {
            return deleteCustomEntityAccessMetadataWithHttpInfo(entityType, identifierType, identifierValue, metadataKey, identifierScope, effectiveAt, effectiveUntil);
        }

        /**
         * Execute deleteCustomEntityAccessMetadata request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;DeletedEntityResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The access metadata for the CustomEntity or any failure. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DeletedEntityResponse> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return deleteCustomEntityAccessMetadataWithHttpInfo(entityType, identifierType, identifierValue, metadataKey, identifierScope, effectiveAt, effectiveUntil, opts);
        }

        /**
         * Execute deleteCustomEntityAccessMetadata request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The access metadata for the CustomEntity or any failure. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DeletedEntityResponse> _callback) throws ApiException {
            return deleteCustomEntityAccessMetadataAsync(entityType, identifierType, identifierValue, metadataKey, identifierScope, effectiveAt, effectiveUntil, _callback);
        }

        /**
         * Execute deleteCustomEntityAccessMetadata request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The access metadata for the CustomEntity or any failure. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DeletedEntityResponse> _callback, ConfigurationOptions opts) throws ApiException {
            return deleteCustomEntityAccessMetadataAsync(entityType, identifierType, identifierValue, metadataKey, identifierScope, effectiveAt, effectiveUntil, _callback, opts);
        }
    }

    /**
     * [EARLY ACCESS] DeleteCustomEntityAccessMetadata: Delete a Custom Entity Access Metadata entry
     * Deletes the Custom Entity Access Metadata entry that exactly matches the provided identifier parts.    It is important to always check to verify success (or failure).
     * @param entityType The type of the Custom Entity. (required)
     * @param identifierType An identifier type attached to the Custom Entity instance. (required)
     * @param identifierValue The identifier value. (required)
     * @param metadataKey Key of the metadata entry to delete. (required)
     * @param identifierScope The identifier scope. (required)
     * @return APIdeleteCustomEntityAccessMetadataRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The access metadata for the CustomEntity or any failure. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIdeleteCustomEntityAccessMetadataRequest deleteCustomEntityAccessMetadata(String entityType, String identifierType, String identifierValue, String metadataKey, String identifierScope) {
        return new APIdeleteCustomEntityAccessMetadataRequest(entityType, identifierType, identifierValue, metadataKey, identifierScope);
    }
    private okhttp3.Call getAllCustomEntityAccessMetadataCall(String entityType, String identifierType, String identifierValue, String identifierScope, String effectiveAt, OffsetDateTime asAt, final ApiCallback _callback) throws ApiException {
        return getAllCustomEntityAccessMetadataCall(entityType, identifierType, identifierValue, identifierScope, effectiveAt, asAt,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call getAllCustomEntityAccessMetadataCall(String entityType, String identifierType, String identifierValue, String identifierScope, String effectiveAt, OffsetDateTime asAt, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/customentities/{entityType}/{identifierType}/{identifierValue}/metadata"
            .replace("{" + "entityType" + "}", localVarApiClient.escapeString(entityType.toString()))
            .replace("{" + "identifierType" + "}", localVarApiClient.escapeString(identifierType.toString()))
            .replace("{" + "identifierValue" + "}", localVarApiClient.escapeString(identifierValue.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (identifierScope != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("identifierScope", identifierScope));
        }

        if (effectiveAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("effectiveAt", effectiveAt));
        }

        if (asAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asAt", asAt));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllCustomEntityAccessMetadataValidateBeforeCall(String entityType, String identifierType, String identifierValue, String identifierScope, String effectiveAt, OffsetDateTime asAt, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'entityType' is set
        if (entityType == null) {
            throw new ApiException("Missing the required parameter 'entityType' when calling getAllCustomEntityAccessMetadata(Async)");
        }

        // verify the required parameter 'identifierType' is set
        if (identifierType == null) {
            throw new ApiException("Missing the required parameter 'identifierType' when calling getAllCustomEntityAccessMetadata(Async)");
        }

        // verify the required parameter 'identifierValue' is set
        if (identifierValue == null) {
            throw new ApiException("Missing the required parameter 'identifierValue' when calling getAllCustomEntityAccessMetadata(Async)");
        }

        // verify the required parameter 'identifierScope' is set
        if (identifierScope == null) {
            throw new ApiException("Missing the required parameter 'identifierScope' when calling getAllCustomEntityAccessMetadata(Async)");
        }

        return getAllCustomEntityAccessMetadataCall(entityType, identifierType, identifierValue, identifierScope, effectiveAt, asAt, _callback, opts);

    }


    private ApiResponse<Map<String, List<AccessMetadataValue>>> getAllCustomEntityAccessMetadataWithHttpInfo(String entityType, String identifierType, String identifierValue, String identifierScope, String effectiveAt, OffsetDateTime asAt) throws ApiException {
        okhttp3.Call localVarCall = getAllCustomEntityAccessMetadataValidateBeforeCall(entityType, identifierType, identifierValue, identifierScope, effectiveAt, asAt, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<Map<String, List<AccessMetadataValue>>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<Map<String, List<AccessMetadataValue>>> getAllCustomEntityAccessMetadataWithHttpInfo(String entityType, String identifierType, String identifierValue, String identifierScope, String effectiveAt, OffsetDateTime asAt, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = getAllCustomEntityAccessMetadataValidateBeforeCall(entityType, identifierType, identifierValue, identifierScope, effectiveAt, asAt, null, opts);
        Type localVarReturnType = new TypeToken<Map<String, List<AccessMetadataValue>>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllCustomEntityAccessMetadataAsync(String entityType, String identifierType, String identifierValue, String identifierScope, String effectiveAt, OffsetDateTime asAt, final ApiCallback<Map<String, List<AccessMetadataValue>>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllCustomEntityAccessMetadataValidateBeforeCall(entityType, identifierType, identifierValue, identifierScope, effectiveAt, asAt, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<Map<String, List<AccessMetadataValue>>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call getAllCustomEntityAccessMetadataAsync(String entityType, String identifierType, String identifierValue, String identifierScope, String effectiveAt, OffsetDateTime asAt, final ApiCallback<Map<String, List<AccessMetadataValue>>> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = getAllCustomEntityAccessMetadataValidateBeforeCall(entityType, identifierType, identifierValue, identifierScope, effectiveAt, asAt, _callback, opts);
        Type localVarReturnType = new TypeToken<Map<String, List<AccessMetadataValue>>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetAllCustomEntityAccessMetadataRequest {
        private final String entityType;
        private final String identifierType;
        private final String identifierValue;
        private final String identifierScope;
        private String effectiveAt;
        private OffsetDateTime asAt;

        private APIgetAllCustomEntityAccessMetadataRequest(String entityType, String identifierType, String identifierValue, String identifierScope) {
            this.entityType = entityType;
            this.identifierType = identifierType;
            this.identifierValue = identifierValue;
            this.identifierScope = identifierScope;
        }

        /**
         * Set effectiveAt
         * @param effectiveAt The effective datetime or cut label at which to get the entities. Defaults to the current LUSID system datetime if not specified. (optional)
         * @return APIgetAllCustomEntityAccessMetadataRequest
         */
        public APIgetAllCustomEntityAccessMetadataRequest effectiveAt(String effectiveAt) {
            this.effectiveAt = effectiveAt;
            return this;
        }

        /**
         * Set asAt
         * @param asAt The asAt datetime at which to retrieve the Access Metadata. Defaults to returning the latest version of the metadata if not specified. (optional)
         * @return APIgetAllCustomEntityAccessMetadataRequest
         */
        public APIgetAllCustomEntityAccessMetadataRequest asAt(OffsetDateTime asAt) {
            this.asAt = asAt;
            return this;
        }

        /**
         * Build call for getAllCustomEntityAccessMetadata
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The access metadata for the CustomEntity or any failure. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllCustomEntityAccessMetadataCall(entityType, identifierType, identifierValue, identifierScope, effectiveAt, asAt, _callback);
        }

        /**
         * Execute getAllCustomEntityAccessMetadata request
         * @return Map&lt;String, List&lt;AccessMetadataValue&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The access metadata for the CustomEntity or any failure. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public Map<String, List<AccessMetadataValue>> execute() throws ApiException {
            ApiResponse<Map<String, List<AccessMetadataValue>>> localVarResp = getAllCustomEntityAccessMetadataWithHttpInfo(entityType, identifierType, identifierValue, identifierScope, effectiveAt, asAt);
            return localVarResp.getData();
        }

        /**
         * Execute getAllCustomEntityAccessMetadata request. Use any specified configuration options to override any other configuration for this request only.
         * @return Map&lt;String, List&lt;AccessMetadataValue&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The access metadata for the CustomEntity or any failure. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public Map<String, List<AccessMetadataValue>> execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<Map<String, List<AccessMetadataValue>>> localVarResp = getAllCustomEntityAccessMetadataWithHttpInfo(entityType, identifierType, identifierValue, identifierScope, effectiveAt, asAt, opts);
            return localVarResp.getData();
        }

        /**
         * Execute getAllCustomEntityAccessMetadata request with HTTP info returned
         * @return ApiResponse&lt;Map&lt;String, List&lt;AccessMetadataValue&gt;&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The access metadata for the CustomEntity or any failure. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Map<String, List<AccessMetadataValue>>> executeWithHttpInfo() throws ApiException {
            return getAllCustomEntityAccessMetadataWithHttpInfo(entityType, identifierType, identifierValue, identifierScope, effectiveAt, asAt);
        }

        /**
         * Execute getAllCustomEntityAccessMetadata request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;Map&lt;String, List&lt;AccessMetadataValue&gt;&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The access metadata for the CustomEntity or any failure. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Map<String, List<AccessMetadataValue>>> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return getAllCustomEntityAccessMetadataWithHttpInfo(entityType, identifierType, identifierValue, identifierScope, effectiveAt, asAt, opts);
        }

        /**
         * Execute getAllCustomEntityAccessMetadata request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The access metadata for the CustomEntity or any failure. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Map<String, List<AccessMetadataValue>>> _callback) throws ApiException {
            return getAllCustomEntityAccessMetadataAsync(entityType, identifierType, identifierValue, identifierScope, effectiveAt, asAt, _callback);
        }

        /**
         * Execute getAllCustomEntityAccessMetadata request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The access metadata for the CustomEntity or any failure. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Map<String, List<AccessMetadataValue>>> _callback, ConfigurationOptions opts) throws ApiException {
            return getAllCustomEntityAccessMetadataAsync(entityType, identifierType, identifierValue, identifierScope, effectiveAt, asAt, _callback, opts);
        }
    }

    /**
     * [EARLY ACCESS] GetAllCustomEntityAccessMetadata: Get all the Access Metadata rules for a Custom Entity
     * Get all the Custom Entity access metadata for the specified identifier scope, code and value
     * @param entityType The type of the Custom Entity. (required)
     * @param identifierType An identifier type attached to the Custom Entity instance. (required)
     * @param identifierValue The identifier value. (required)
     * @param identifierScope The identifier scope. (required)
     * @return APIgetAllCustomEntityAccessMetadataRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The access metadata for the CustomEntity or any failure. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIgetAllCustomEntityAccessMetadataRequest getAllCustomEntityAccessMetadata(String entityType, String identifierType, String identifierValue, String identifierScope) {
        return new APIgetAllCustomEntityAccessMetadataRequest(entityType, identifierType, identifierValue, identifierScope);
    }
    private okhttp3.Call getCustomEntityCall(String entityType, String identifierType, String identifierValue, String identifierScope, OffsetDateTime asAt, String effectiveAt, List<String> relatedEntityPropertyKeys, List<String> relationshipDefinitionIds, List<String> propertyKeys, final ApiCallback _callback) throws ApiException {
        return getCustomEntityCall(entityType, identifierType, identifierValue, identifierScope, asAt, effectiveAt, relatedEntityPropertyKeys, relationshipDefinitionIds, propertyKeys,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call getCustomEntityCall(String entityType, String identifierType, String identifierValue, String identifierScope, OffsetDateTime asAt, String effectiveAt, List<String> relatedEntityPropertyKeys, List<String> relationshipDefinitionIds, List<String> propertyKeys, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/customentities/{entityType}/{identifierType}/{identifierValue}"
            .replace("{" + "entityType" + "}", localVarApiClient.escapeString(entityType.toString()))
            .replace("{" + "identifierType" + "}", localVarApiClient.escapeString(identifierType.toString()))
            .replace("{" + "identifierValue" + "}", localVarApiClient.escapeString(identifierValue.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (identifierScope != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("identifierScope", identifierScope));
        }

        if (asAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asAt", asAt));
        }

        if (effectiveAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("effectiveAt", effectiveAt));
        }

        if (relatedEntityPropertyKeys != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "relatedEntityPropertyKeys", relatedEntityPropertyKeys));
        }

        if (relationshipDefinitionIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "relationshipDefinitionIds", relationshipDefinitionIds));
        }

        if (propertyKeys != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "propertyKeys", propertyKeys));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCustomEntityValidateBeforeCall(String entityType, String identifierType, String identifierValue, String identifierScope, OffsetDateTime asAt, String effectiveAt, List<String> relatedEntityPropertyKeys, List<String> relationshipDefinitionIds, List<String> propertyKeys, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'entityType' is set
        if (entityType == null) {
            throw new ApiException("Missing the required parameter 'entityType' when calling getCustomEntity(Async)");
        }

        // verify the required parameter 'identifierType' is set
        if (identifierType == null) {
            throw new ApiException("Missing the required parameter 'identifierType' when calling getCustomEntity(Async)");
        }

        // verify the required parameter 'identifierValue' is set
        if (identifierValue == null) {
            throw new ApiException("Missing the required parameter 'identifierValue' when calling getCustomEntity(Async)");
        }

        // verify the required parameter 'identifierScope' is set
        if (identifierScope == null) {
            throw new ApiException("Missing the required parameter 'identifierScope' when calling getCustomEntity(Async)");
        }

        return getCustomEntityCall(entityType, identifierType, identifierValue, identifierScope, asAt, effectiveAt, relatedEntityPropertyKeys, relationshipDefinitionIds, propertyKeys, _callback, opts);

    }


    private ApiResponse<CustomEntityResponse> getCustomEntityWithHttpInfo(String entityType, String identifierType, String identifierValue, String identifierScope, OffsetDateTime asAt, String effectiveAt, List<String> relatedEntityPropertyKeys, List<String> relationshipDefinitionIds, List<String> propertyKeys) throws ApiException {
        okhttp3.Call localVarCall = getCustomEntityValidateBeforeCall(entityType, identifierType, identifierValue, identifierScope, asAt, effectiveAt, relatedEntityPropertyKeys, relationshipDefinitionIds, propertyKeys, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<CustomEntityResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<CustomEntityResponse> getCustomEntityWithHttpInfo(String entityType, String identifierType, String identifierValue, String identifierScope, OffsetDateTime asAt, String effectiveAt, List<String> relatedEntityPropertyKeys, List<String> relationshipDefinitionIds, List<String> propertyKeys, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = getCustomEntityValidateBeforeCall(entityType, identifierType, identifierValue, identifierScope, asAt, effectiveAt, relatedEntityPropertyKeys, relationshipDefinitionIds, propertyKeys, null, opts);
        Type localVarReturnType = new TypeToken<CustomEntityResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCustomEntityAsync(String entityType, String identifierType, String identifierValue, String identifierScope, OffsetDateTime asAt, String effectiveAt, List<String> relatedEntityPropertyKeys, List<String> relationshipDefinitionIds, List<String> propertyKeys, final ApiCallback<CustomEntityResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCustomEntityValidateBeforeCall(entityType, identifierType, identifierValue, identifierScope, asAt, effectiveAt, relatedEntityPropertyKeys, relationshipDefinitionIds, propertyKeys, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<CustomEntityResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call getCustomEntityAsync(String entityType, String identifierType, String identifierValue, String identifierScope, OffsetDateTime asAt, String effectiveAt, List<String> relatedEntityPropertyKeys, List<String> relationshipDefinitionIds, List<String> propertyKeys, final ApiCallback<CustomEntityResponse> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = getCustomEntityValidateBeforeCall(entityType, identifierType, identifierValue, identifierScope, asAt, effectiveAt, relatedEntityPropertyKeys, relationshipDefinitionIds, propertyKeys, _callback, opts);
        Type localVarReturnType = new TypeToken<CustomEntityResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetCustomEntityRequest {
        private final String entityType;
        private final String identifierType;
        private final String identifierValue;
        private final String identifierScope;
        private OffsetDateTime asAt;
        private String effectiveAt;
        private List<String> relatedEntityPropertyKeys;
        private List<String> relationshipDefinitionIds;
        private List<String> propertyKeys;

        private APIgetCustomEntityRequest(String entityType, String identifierType, String identifierValue, String identifierScope) {
            this.entityType = entityType;
            this.identifierType = identifierType;
            this.identifierValue = identifierValue;
            this.identifierScope = identifierScope;
        }

        /**
         * Set asAt
         * @param asAt The AsAt datetime at which to retrieve the Custom Entity instance. (optional)
         * @return APIgetCustomEntityRequest
         */
        public APIgetCustomEntityRequest asAt(OffsetDateTime asAt) {
            this.asAt = asAt;
            return this;
        }

        /**
         * Set effectiveAt
         * @param effectiveAt The effective datetime or cut label at which to get the Custom Entity instance. Defaults to the current LUSID system datetime if not specified. (optional)
         * @return APIgetCustomEntityRequest
         */
        public APIgetCustomEntityRequest effectiveAt(String effectiveAt) {
            this.effectiveAt = effectiveAt;
            return this;
        }

        /**
         * Set relatedEntityPropertyKeys
         * @param relatedEntityPropertyKeys A list of property keys from any domain that supports relationships   to decorate onto related entities. These must take the format {domain}/{scope}/{code}, for example &#39;Portfolio/Manager/Id&#39;. (optional)
         * @return APIgetCustomEntityRequest
         */
        public APIgetCustomEntityRequest relatedEntityPropertyKeys(List<String> relatedEntityPropertyKeys) {
            this.relatedEntityPropertyKeys = relatedEntityPropertyKeys;
            return this;
        }

        /**
         * Set relationshipDefinitionIds
         * @param relationshipDefinitionIds A list of relationship definitions that are used to decorate related entities   onto the entity in the response. These must take the form {relationshipDefinitionScope}/{relationshipDefinitionCode}. (optional)
         * @return APIgetCustomEntityRequest
         */
        public APIgetCustomEntityRequest relationshipDefinitionIds(List<String> relationshipDefinitionIds) {
            this.relationshipDefinitionIds = relationshipDefinitionIds;
            return this;
        }

        /**
         * Set propertyKeys
         * @param propertyKeys A list of property keys from the &#39;CustomEntity&#39; domain to decorate onto   the custom entities of any type supported by that property (defined within the property definition CustomEntityTypes).   These must have the format {domain}/{scope}/{code}, for example &#39;CustomEntity/someScope/id&#39;. (optional)
         * @return APIgetCustomEntityRequest
         */
        public APIgetCustomEntityRequest propertyKeys(List<String> propertyKeys) {
            this.propertyKeys = propertyKeys;
            return this;
        }

        /**
         * Build call for getCustomEntity
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Get a custom entity instance. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCustomEntityCall(entityType, identifierType, identifierValue, identifierScope, asAt, effectiveAt, relatedEntityPropertyKeys, relationshipDefinitionIds, propertyKeys, _callback);
        }

        /**
         * Execute getCustomEntity request
         * @return CustomEntityResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Get a custom entity instance. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public CustomEntityResponse execute() throws ApiException {
            ApiResponse<CustomEntityResponse> localVarResp = getCustomEntityWithHttpInfo(entityType, identifierType, identifierValue, identifierScope, asAt, effectiveAt, relatedEntityPropertyKeys, relationshipDefinitionIds, propertyKeys);
            return localVarResp.getData();
        }

        /**
         * Execute getCustomEntity request. Use any specified configuration options to override any other configuration for this request only.
         * @return CustomEntityResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Get a custom entity instance. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public CustomEntityResponse execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<CustomEntityResponse> localVarResp = getCustomEntityWithHttpInfo(entityType, identifierType, identifierValue, identifierScope, asAt, effectiveAt, relatedEntityPropertyKeys, relationshipDefinitionIds, propertyKeys, opts);
            return localVarResp.getData();
        }

        /**
         * Execute getCustomEntity request with HTTP info returned
         * @return ApiResponse&lt;CustomEntityResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Get a custom entity instance. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CustomEntityResponse> executeWithHttpInfo() throws ApiException {
            return getCustomEntityWithHttpInfo(entityType, identifierType, identifierValue, identifierScope, asAt, effectiveAt, relatedEntityPropertyKeys, relationshipDefinitionIds, propertyKeys);
        }

        /**
         * Execute getCustomEntity request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;CustomEntityResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Get a custom entity instance. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CustomEntityResponse> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return getCustomEntityWithHttpInfo(entityType, identifierType, identifierValue, identifierScope, asAt, effectiveAt, relatedEntityPropertyKeys, relationshipDefinitionIds, propertyKeys, opts);
        }

        /**
         * Execute getCustomEntity request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Get a custom entity instance. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CustomEntityResponse> _callback) throws ApiException {
            return getCustomEntityAsync(entityType, identifierType, identifierValue, identifierScope, asAt, effectiveAt, relatedEntityPropertyKeys, relationshipDefinitionIds, propertyKeys, _callback);
        }

        /**
         * Execute getCustomEntity request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Get a custom entity instance. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CustomEntityResponse> _callback, ConfigurationOptions opts) throws ApiException {
            return getCustomEntityAsync(entityType, identifierType, identifierValue, identifierScope, asAt, effectiveAt, relatedEntityPropertyKeys, relationshipDefinitionIds, propertyKeys, _callback, opts);
        }
    }

    /**
     * GetCustomEntity: Get a Custom Entity instance.
     * Retrieve a Custom Entity instance by a specific entity type at a point in AsAt time.
     * @param entityType The type of Custom Entity to retrieve. An entityType can be created using the \&quot;CreateCustomEntityDefinition\&quot; endpoint for CustomEntityDefinitions. (required)
     * @param identifierType An identifier type attached to the Custom Entity instance. (required)
     * @param identifierValue The identifier value. (required)
     * @param identifierScope The identifier scope. (required)
     * @return APIgetCustomEntityRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a custom entity instance. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIgetCustomEntityRequest getCustomEntity(String entityType, String identifierType, String identifierValue, String identifierScope) {
        return new APIgetCustomEntityRequest(entityType, identifierType, identifierValue, identifierScope);
    }
    private okhttp3.Call getCustomEntityAccessMetadataByKeyCall(String entityType, String identifierType, String identifierValue, String metadataKey, String identifierScope, String effectiveAt, OffsetDateTime asAt, final ApiCallback _callback) throws ApiException {
        return getCustomEntityAccessMetadataByKeyCall(entityType, identifierType, identifierValue, metadataKey, identifierScope, effectiveAt, asAt,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call getCustomEntityAccessMetadataByKeyCall(String entityType, String identifierType, String identifierValue, String metadataKey, String identifierScope, String effectiveAt, OffsetDateTime asAt, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/customentities/{entityType}/{identifierType}/{identifierValue}/metadata/{metadataKey}"
            .replace("{" + "entityType" + "}", localVarApiClient.escapeString(entityType.toString()))
            .replace("{" + "identifierType" + "}", localVarApiClient.escapeString(identifierType.toString()))
            .replace("{" + "identifierValue" + "}", localVarApiClient.escapeString(identifierValue.toString()))
            .replace("{" + "metadataKey" + "}", localVarApiClient.escapeString(metadataKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (identifierScope != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("identifierScope", identifierScope));
        }

        if (effectiveAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("effectiveAt", effectiveAt));
        }

        if (asAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asAt", asAt));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCustomEntityAccessMetadataByKeyValidateBeforeCall(String entityType, String identifierType, String identifierValue, String metadataKey, String identifierScope, String effectiveAt, OffsetDateTime asAt, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'entityType' is set
        if (entityType == null) {
            throw new ApiException("Missing the required parameter 'entityType' when calling getCustomEntityAccessMetadataByKey(Async)");
        }

        // verify the required parameter 'identifierType' is set
        if (identifierType == null) {
            throw new ApiException("Missing the required parameter 'identifierType' when calling getCustomEntityAccessMetadataByKey(Async)");
        }

        // verify the required parameter 'identifierValue' is set
        if (identifierValue == null) {
            throw new ApiException("Missing the required parameter 'identifierValue' when calling getCustomEntityAccessMetadataByKey(Async)");
        }

        // verify the required parameter 'metadataKey' is set
        if (metadataKey == null) {
            throw new ApiException("Missing the required parameter 'metadataKey' when calling getCustomEntityAccessMetadataByKey(Async)");
        }

        // verify the required parameter 'identifierScope' is set
        if (identifierScope == null) {
            throw new ApiException("Missing the required parameter 'identifierScope' when calling getCustomEntityAccessMetadataByKey(Async)");
        }

        return getCustomEntityAccessMetadataByKeyCall(entityType, identifierType, identifierValue, metadataKey, identifierScope, effectiveAt, asAt, _callback, opts);

    }


    private ApiResponse<List<AccessMetadataValue>> getCustomEntityAccessMetadataByKeyWithHttpInfo(String entityType, String identifierType, String identifierValue, String metadataKey, String identifierScope, String effectiveAt, OffsetDateTime asAt) throws ApiException {
        okhttp3.Call localVarCall = getCustomEntityAccessMetadataByKeyValidateBeforeCall(entityType, identifierType, identifierValue, metadataKey, identifierScope, effectiveAt, asAt, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<List<AccessMetadataValue>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<List<AccessMetadataValue>> getCustomEntityAccessMetadataByKeyWithHttpInfo(String entityType, String identifierType, String identifierValue, String metadataKey, String identifierScope, String effectiveAt, OffsetDateTime asAt, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = getCustomEntityAccessMetadataByKeyValidateBeforeCall(entityType, identifierType, identifierValue, metadataKey, identifierScope, effectiveAt, asAt, null, opts);
        Type localVarReturnType = new TypeToken<List<AccessMetadataValue>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCustomEntityAccessMetadataByKeyAsync(String entityType, String identifierType, String identifierValue, String metadataKey, String identifierScope, String effectiveAt, OffsetDateTime asAt, final ApiCallback<List<AccessMetadataValue>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCustomEntityAccessMetadataByKeyValidateBeforeCall(entityType, identifierType, identifierValue, metadataKey, identifierScope, effectiveAt, asAt, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<List<AccessMetadataValue>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call getCustomEntityAccessMetadataByKeyAsync(String entityType, String identifierType, String identifierValue, String metadataKey, String identifierScope, String effectiveAt, OffsetDateTime asAt, final ApiCallback<List<AccessMetadataValue>> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = getCustomEntityAccessMetadataByKeyValidateBeforeCall(entityType, identifierType, identifierValue, metadataKey, identifierScope, effectiveAt, asAt, _callback, opts);
        Type localVarReturnType = new TypeToken<List<AccessMetadataValue>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetCustomEntityAccessMetadataByKeyRequest {
        private final String entityType;
        private final String identifierType;
        private final String identifierValue;
        private final String metadataKey;
        private final String identifierScope;
        private String effectiveAt;
        private OffsetDateTime asAt;

        private APIgetCustomEntityAccessMetadataByKeyRequest(String entityType, String identifierType, String identifierValue, String metadataKey, String identifierScope) {
            this.entityType = entityType;
            this.identifierType = identifierType;
            this.identifierValue = identifierValue;
            this.metadataKey = metadataKey;
            this.identifierScope = identifierScope;
        }

        /**
         * Set effectiveAt
         * @param effectiveAt The effective datetime or cut label at which to get the entities. Defaults to the current LUSID system datetime if not specified. (optional)
         * @return APIgetCustomEntityAccessMetadataByKeyRequest
         */
        public APIgetCustomEntityAccessMetadataByKeyRequest effectiveAt(String effectiveAt) {
            this.effectiveAt = effectiveAt;
            return this;
        }

        /**
         * Set asAt
         * @param asAt The asAt datetime at which to retrieve the Access Metadata. Defaults to returning the latest version of the metadata if not specified. (optional)
         * @return APIgetCustomEntityAccessMetadataByKeyRequest
         */
        public APIgetCustomEntityAccessMetadataByKeyRequest asAt(OffsetDateTime asAt) {
            this.asAt = asAt;
            return this;
        }

        /**
         * Build call for getCustomEntityAccessMetadataByKey
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The access metadata for the CustomEntity or any failure. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCustomEntityAccessMetadataByKeyCall(entityType, identifierType, identifierValue, metadataKey, identifierScope, effectiveAt, asAt, _callback);
        }

        /**
         * Execute getCustomEntityAccessMetadataByKey request
         * @return List&lt;AccessMetadataValue&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The access metadata for the CustomEntity or any failure. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public List<AccessMetadataValue> execute() throws ApiException {
            ApiResponse<List<AccessMetadataValue>> localVarResp = getCustomEntityAccessMetadataByKeyWithHttpInfo(entityType, identifierType, identifierValue, metadataKey, identifierScope, effectiveAt, asAt);
            return localVarResp.getData();
        }

        /**
         * Execute getCustomEntityAccessMetadataByKey request. Use any specified configuration options to override any other configuration for this request only.
         * @return List&lt;AccessMetadataValue&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The access metadata for the CustomEntity or any failure. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public List<AccessMetadataValue> execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<List<AccessMetadataValue>> localVarResp = getCustomEntityAccessMetadataByKeyWithHttpInfo(entityType, identifierType, identifierValue, metadataKey, identifierScope, effectiveAt, asAt, opts);
            return localVarResp.getData();
        }

        /**
         * Execute getCustomEntityAccessMetadataByKey request with HTTP info returned
         * @return ApiResponse&lt;List&lt;AccessMetadataValue&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The access metadata for the CustomEntity or any failure. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<AccessMetadataValue>> executeWithHttpInfo() throws ApiException {
            return getCustomEntityAccessMetadataByKeyWithHttpInfo(entityType, identifierType, identifierValue, metadataKey, identifierScope, effectiveAt, asAt);
        }

        /**
         * Execute getCustomEntityAccessMetadataByKey request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;List&lt;AccessMetadataValue&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The access metadata for the CustomEntity or any failure. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<AccessMetadataValue>> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return getCustomEntityAccessMetadataByKeyWithHttpInfo(entityType, identifierType, identifierValue, metadataKey, identifierScope, effectiveAt, asAt, opts);
        }

        /**
         * Execute getCustomEntityAccessMetadataByKey request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The access metadata for the CustomEntity or any failure. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<AccessMetadataValue>> _callback) throws ApiException {
            return getCustomEntityAccessMetadataByKeyAsync(entityType, identifierType, identifierValue, metadataKey, identifierScope, effectiveAt, asAt, _callback);
        }

        /**
         * Execute getCustomEntityAccessMetadataByKey request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The access metadata for the CustomEntity or any failure. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<AccessMetadataValue>> _callback, ConfigurationOptions opts) throws ApiException {
            return getCustomEntityAccessMetadataByKeyAsync(entityType, identifierType, identifierValue, metadataKey, identifierScope, effectiveAt, asAt, _callback, opts);
        }
    }

    /**
     * [EARLY ACCESS] GetCustomEntityAccessMetadataByKey: Get an entry identified by a metadataKey in the Access Metadata of a Custom Entity
     * Get Custom Entity access metadata for the specified metadata key
     * @param entityType The type of the Custom Entity. (required)
     * @param identifierType An identifier type attached to the Custom Entity instance. (required)
     * @param identifierValue The identifier value. (required)
     * @param metadataKey Key of the metadata entry to retrieve (required)
     * @param identifierScope The identifier scope. (required)
     * @return APIgetCustomEntityAccessMetadataByKeyRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The access metadata for the CustomEntity or any failure. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIgetCustomEntityAccessMetadataByKeyRequest getCustomEntityAccessMetadataByKey(String entityType, String identifierType, String identifierValue, String metadataKey, String identifierScope) {
        return new APIgetCustomEntityAccessMetadataByKeyRequest(entityType, identifierType, identifierValue, metadataKey, identifierScope);
    }
    private okhttp3.Call getCustomEntityRelationshipsCall(String entityType, String identifierScope, String identifierType, String identifierValue, String effectiveAt, OffsetDateTime asAt, String filter, List<String> identifierTypes, final ApiCallback _callback) throws ApiException {
        return getCustomEntityRelationshipsCall(entityType, identifierScope, identifierType, identifierValue, effectiveAt, asAt, filter, identifierTypes,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call getCustomEntityRelationshipsCall(String entityType, String identifierScope, String identifierType, String identifierValue, String effectiveAt, OffsetDateTime asAt, String filter, List<String> identifierTypes, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/customentities/{entityType}/{identifierType}/{identifierValue}/relationships"
            .replace("{" + "entityType" + "}", localVarApiClient.escapeString(entityType.toString()))
            .replace("{" + "identifierType" + "}", localVarApiClient.escapeString(identifierType.toString()))
            .replace("{" + "identifierValue" + "}", localVarApiClient.escapeString(identifierValue.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (identifierScope != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("identifierScope", identifierScope));
        }

        if (effectiveAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("effectiveAt", effectiveAt));
        }

        if (asAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asAt", asAt));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (identifierTypes != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "identifierTypes", identifierTypes));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCustomEntityRelationshipsValidateBeforeCall(String entityType, String identifierScope, String identifierType, String identifierValue, String effectiveAt, OffsetDateTime asAt, String filter, List<String> identifierTypes, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'entityType' is set
        if (entityType == null) {
            throw new ApiException("Missing the required parameter 'entityType' when calling getCustomEntityRelationships(Async)");
        }

        // verify the required parameter 'identifierScope' is set
        if (identifierScope == null) {
            throw new ApiException("Missing the required parameter 'identifierScope' when calling getCustomEntityRelationships(Async)");
        }

        // verify the required parameter 'identifierType' is set
        if (identifierType == null) {
            throw new ApiException("Missing the required parameter 'identifierType' when calling getCustomEntityRelationships(Async)");
        }

        // verify the required parameter 'identifierValue' is set
        if (identifierValue == null) {
            throw new ApiException("Missing the required parameter 'identifierValue' when calling getCustomEntityRelationships(Async)");
        }

        return getCustomEntityRelationshipsCall(entityType, identifierScope, identifierType, identifierValue, effectiveAt, asAt, filter, identifierTypes, _callback, opts);

    }


    private ApiResponse<ResourceListOfRelationship> getCustomEntityRelationshipsWithHttpInfo(String entityType, String identifierScope, String identifierType, String identifierValue, String effectiveAt, OffsetDateTime asAt, String filter, List<String> identifierTypes) throws ApiException {
        okhttp3.Call localVarCall = getCustomEntityRelationshipsValidateBeforeCall(entityType, identifierScope, identifierType, identifierValue, effectiveAt, asAt, filter, identifierTypes, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<ResourceListOfRelationship>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<ResourceListOfRelationship> getCustomEntityRelationshipsWithHttpInfo(String entityType, String identifierScope, String identifierType, String identifierValue, String effectiveAt, OffsetDateTime asAt, String filter, List<String> identifierTypes, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = getCustomEntityRelationshipsValidateBeforeCall(entityType, identifierScope, identifierType, identifierValue, effectiveAt, asAt, filter, identifierTypes, null, opts);
        Type localVarReturnType = new TypeToken<ResourceListOfRelationship>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCustomEntityRelationshipsAsync(String entityType, String identifierScope, String identifierType, String identifierValue, String effectiveAt, OffsetDateTime asAt, String filter, List<String> identifierTypes, final ApiCallback<ResourceListOfRelationship> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCustomEntityRelationshipsValidateBeforeCall(entityType, identifierScope, identifierType, identifierValue, effectiveAt, asAt, filter, identifierTypes, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<ResourceListOfRelationship>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call getCustomEntityRelationshipsAsync(String entityType, String identifierScope, String identifierType, String identifierValue, String effectiveAt, OffsetDateTime asAt, String filter, List<String> identifierTypes, final ApiCallback<ResourceListOfRelationship> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = getCustomEntityRelationshipsValidateBeforeCall(entityType, identifierScope, identifierType, identifierValue, effectiveAt, asAt, filter, identifierTypes, _callback, opts);
        Type localVarReturnType = new TypeToken<ResourceListOfRelationship>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetCustomEntityRelationshipsRequest {
        private final String entityType;
        private final String identifierScope;
        private final String identifierType;
        private final String identifierValue;
        private String effectiveAt;
        private OffsetDateTime asAt;
        private String filter;
        private List<String> identifierTypes;

        private APIgetCustomEntityRelationshipsRequest(String entityType, String identifierScope, String identifierType, String identifierValue) {
            this.entityType = entityType;
            this.identifierScope = identifierScope;
            this.identifierType = identifierType;
            this.identifierValue = identifierValue;
        }

        /**
         * Set effectiveAt
         * @param effectiveAt The effective datetime or cut label at which to get relationships. Defaults to the current LUSID system datetime if not specified. (optional)
         * @return APIgetCustomEntityRelationshipsRequest
         */
        public APIgetCustomEntityRelationshipsRequest effectiveAt(String effectiveAt) {
            this.effectiveAt = effectiveAt;
            return this;
        }

        /**
         * Set asAt
         * @param asAt The asAt datetime at which to retrieve relationships. Defaults to return the latest LUSID AsAt time if not specified. (optional)
         * @return APIgetCustomEntityRelationshipsRequest
         */
        public APIgetCustomEntityRelationshipsRequest asAt(OffsetDateTime asAt) {
            this.asAt = asAt;
            return this;
        }

        /**
         * Set filter
         * @param filter Expression to filter relationships. Users should provide null or empty string for this field until further notice. (optional)
         * @return APIgetCustomEntityRelationshipsRequest
         */
        public APIgetCustomEntityRelationshipsRequest filter(String filter) {
            this.filter = filter;
            return this;
        }

        /**
         * Set identifierTypes
         * @param identifierTypes Identifiers types (as property keys) used for referencing Persons or Legal Entities. These take the format   {domain}/{scope}/{code} e.g. \&quot;Person/CompanyDetails/Role\&quot;. They must be from the \&quot;Person\&quot; or \&quot;LegalEntity\&quot; domain.   Only identifier types stated will be used to look up relevant entities in relationships. If not applicable, provide an empty array. (optional)
         * @return APIgetCustomEntityRelationshipsRequest
         */
        public APIgetCustomEntityRelationshipsRequest identifierTypes(List<String> identifierTypes) {
            this.identifierTypes = identifierTypes;
            return this;
        }

        /**
         * Build call for getCustomEntityRelationships
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The relationships for the specified custom entity. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCustomEntityRelationshipsCall(entityType, identifierScope, identifierType, identifierValue, effectiveAt, asAt, filter, identifierTypes, _callback);
        }

        /**
         * Execute getCustomEntityRelationships request
         * @return ResourceListOfRelationship
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The relationships for the specified custom entity. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ResourceListOfRelationship execute() throws ApiException {
            ApiResponse<ResourceListOfRelationship> localVarResp = getCustomEntityRelationshipsWithHttpInfo(entityType, identifierScope, identifierType, identifierValue, effectiveAt, asAt, filter, identifierTypes);
            return localVarResp.getData();
        }

        /**
         * Execute getCustomEntityRelationships request. Use any specified configuration options to override any other configuration for this request only.
         * @return ResourceListOfRelationship
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The relationships for the specified custom entity. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ResourceListOfRelationship execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<ResourceListOfRelationship> localVarResp = getCustomEntityRelationshipsWithHttpInfo(entityType, identifierScope, identifierType, identifierValue, effectiveAt, asAt, filter, identifierTypes, opts);
            return localVarResp.getData();
        }

        /**
         * Execute getCustomEntityRelationships request with HTTP info returned
         * @return ApiResponse&lt;ResourceListOfRelationship&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The relationships for the specified custom entity. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ResourceListOfRelationship> executeWithHttpInfo() throws ApiException {
            return getCustomEntityRelationshipsWithHttpInfo(entityType, identifierScope, identifierType, identifierValue, effectiveAt, asAt, filter, identifierTypes);
        }

        /**
         * Execute getCustomEntityRelationships request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;ResourceListOfRelationship&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The relationships for the specified custom entity. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ResourceListOfRelationship> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return getCustomEntityRelationshipsWithHttpInfo(entityType, identifierScope, identifierType, identifierValue, effectiveAt, asAt, filter, identifierTypes, opts);
        }

        /**
         * Execute getCustomEntityRelationships request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The relationships for the specified custom entity. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ResourceListOfRelationship> _callback) throws ApiException {
            return getCustomEntityRelationshipsAsync(entityType, identifierScope, identifierType, identifierValue, effectiveAt, asAt, filter, identifierTypes, _callback);
        }

        /**
         * Execute getCustomEntityRelationships request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The relationships for the specified custom entity. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ResourceListOfRelationship> _callback, ConfigurationOptions opts) throws ApiException {
            return getCustomEntityRelationshipsAsync(entityType, identifierScope, identifierType, identifierValue, effectiveAt, asAt, filter, identifierTypes, _callback, opts);
        }
    }

    /**
     * [EARLY ACCESS] GetCustomEntityRelationships: Get Relationships for Custom Entity
     * Get relationships for the specified Custom Entity.
     * @param entityType The type of entity get relationships for. (required)
     * @param identifierScope The identifier scope. (required)
     * @param identifierType An identifier type attached to the Custom Entity. (required)
     * @param identifierValue The identifier value. (required)
     * @return APIgetCustomEntityRelationshipsRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The relationships for the specified custom entity. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIgetCustomEntityRelationshipsRequest getCustomEntityRelationships(String entityType, String identifierScope, String identifierType, String identifierValue) {
        return new APIgetCustomEntityRelationshipsRequest(entityType, identifierScope, identifierType, identifierValue);
    }
    private okhttp3.Call listCustomEntitiesCall(String entityType, String effectiveAt, OffsetDateTime asAt, Integer limit, String filter, List<String> sortBy, String page, List<String> relatedEntityPropertyKeys, List<String> relationshipDefinitionIds, List<String> propertyKeys, final ApiCallback _callback) throws ApiException {
        return listCustomEntitiesCall(entityType, effectiveAt, asAt, limit, filter, sortBy, page, relatedEntityPropertyKeys, relationshipDefinitionIds, propertyKeys,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call listCustomEntitiesCall(String entityType, String effectiveAt, OffsetDateTime asAt, Integer limit, String filter, List<String> sortBy, String page, List<String> relatedEntityPropertyKeys, List<String> relationshipDefinitionIds, List<String> propertyKeys, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/customentities/{entityType}"
            .replace("{" + "entityType" + "}", localVarApiClient.escapeString(entityType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (effectiveAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("effectiveAt", effectiveAt));
        }

        if (asAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asAt", asAt));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (sortBy != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "sortBy", sortBy));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (relatedEntityPropertyKeys != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "relatedEntityPropertyKeys", relatedEntityPropertyKeys));
        }

        if (relationshipDefinitionIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "relationshipDefinitionIds", relationshipDefinitionIds));
        }

        if (propertyKeys != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "propertyKeys", propertyKeys));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listCustomEntitiesValidateBeforeCall(String entityType, String effectiveAt, OffsetDateTime asAt, Integer limit, String filter, List<String> sortBy, String page, List<String> relatedEntityPropertyKeys, List<String> relationshipDefinitionIds, List<String> propertyKeys, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'entityType' is set
        if (entityType == null) {
            throw new ApiException("Missing the required parameter 'entityType' when calling listCustomEntities(Async)");
        }

        return listCustomEntitiesCall(entityType, effectiveAt, asAt, limit, filter, sortBy, page, relatedEntityPropertyKeys, relationshipDefinitionIds, propertyKeys, _callback, opts);

    }


    private ApiResponse<PagedResourceListOfCustomEntityResponse> listCustomEntitiesWithHttpInfo(String entityType, String effectiveAt, OffsetDateTime asAt, Integer limit, String filter, List<String> sortBy, String page, List<String> relatedEntityPropertyKeys, List<String> relationshipDefinitionIds, List<String> propertyKeys) throws ApiException {
        okhttp3.Call localVarCall = listCustomEntitiesValidateBeforeCall(entityType, effectiveAt, asAt, limit, filter, sortBy, page, relatedEntityPropertyKeys, relationshipDefinitionIds, propertyKeys, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<PagedResourceListOfCustomEntityResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<PagedResourceListOfCustomEntityResponse> listCustomEntitiesWithHttpInfo(String entityType, String effectiveAt, OffsetDateTime asAt, Integer limit, String filter, List<String> sortBy, String page, List<String> relatedEntityPropertyKeys, List<String> relationshipDefinitionIds, List<String> propertyKeys, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = listCustomEntitiesValidateBeforeCall(entityType, effectiveAt, asAt, limit, filter, sortBy, page, relatedEntityPropertyKeys, relationshipDefinitionIds, propertyKeys, null, opts);
        Type localVarReturnType = new TypeToken<PagedResourceListOfCustomEntityResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listCustomEntitiesAsync(String entityType, String effectiveAt, OffsetDateTime asAt, Integer limit, String filter, List<String> sortBy, String page, List<String> relatedEntityPropertyKeys, List<String> relationshipDefinitionIds, List<String> propertyKeys, final ApiCallback<PagedResourceListOfCustomEntityResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listCustomEntitiesValidateBeforeCall(entityType, effectiveAt, asAt, limit, filter, sortBy, page, relatedEntityPropertyKeys, relationshipDefinitionIds, propertyKeys, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<PagedResourceListOfCustomEntityResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call listCustomEntitiesAsync(String entityType, String effectiveAt, OffsetDateTime asAt, Integer limit, String filter, List<String> sortBy, String page, List<String> relatedEntityPropertyKeys, List<String> relationshipDefinitionIds, List<String> propertyKeys, final ApiCallback<PagedResourceListOfCustomEntityResponse> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = listCustomEntitiesValidateBeforeCall(entityType, effectiveAt, asAt, limit, filter, sortBy, page, relatedEntityPropertyKeys, relationshipDefinitionIds, propertyKeys, _callback, opts);
        Type localVarReturnType = new TypeToken<PagedResourceListOfCustomEntityResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIlistCustomEntitiesRequest {
        private final String entityType;
        private String effectiveAt;
        private OffsetDateTime asAt;
        private Integer limit;
        private String filter;
        private List<String> sortBy;
        private String page;
        private List<String> relatedEntityPropertyKeys;
        private List<String> relationshipDefinitionIds;
        private List<String> propertyKeys;

        private APIlistCustomEntitiesRequest(String entityType) {
            this.entityType = entityType;
        }

        /**
         * Set effectiveAt
         * @param effectiveAt The effective datetime or cut label at which to list the entities. Defaults to the current LUSID   system datetime if not specified. (optional)
         * @return APIlistCustomEntitiesRequest
         */
        public APIlistCustomEntitiesRequest effectiveAt(String effectiveAt) {
            this.effectiveAt = effectiveAt;
            return this;
        }

        /**
         * Set asAt
         * @param asAt The asAt datetime at which to list the entities. Defaults to returning the latest version   of each portfolio if not specified. (optional)
         * @return APIlistCustomEntitiesRequest
         */
        public APIlistCustomEntitiesRequest asAt(OffsetDateTime asAt) {
            this.asAt = asAt;
            return this;
        }

        /**
         * Set limit
         * @param limit When paginating, limit the results to this number. Defaults to 100 if not specified. (optional)
         * @return APIlistCustomEntitiesRequest
         */
        public APIlistCustomEntitiesRequest limit(Integer limit) {
            this.limit = limit;
            return this;
        }

        /**
         * Set filter
         * @param filter Expression to filter the results. For more information about filtering   results, see https://support.lusid.com/knowledgebase/article/KA-01914. (optional)
         * @return APIlistCustomEntitiesRequest
         */
        public APIlistCustomEntitiesRequest filter(String filter) {
            this.filter = filter;
            return this;
        }

        /**
         * Set sortBy
         * @param sortBy A list of field names or properties to sort by, each suffixed by \&quot; ASC\&quot; or \&quot; DESC\&quot;. (optional)
         * @return APIlistCustomEntitiesRequest
         */
        public APIlistCustomEntitiesRequest sortBy(List<String> sortBy) {
            this.sortBy = sortBy;
            return this;
        }

        /**
         * Set page
         * @param page The pagination token to use to continue listing entities; this   value is returned from the previous call. If a pagination token is provided, the filter, effectiveAt   and asAt fields must not have changed since the original request. (optional)
         * @return APIlistCustomEntitiesRequest
         */
        public APIlistCustomEntitiesRequest page(String page) {
            this.page = page;
            return this;
        }

        /**
         * Set relatedEntityPropertyKeys
         * @param relatedEntityPropertyKeys A list of property keys from any domain that supports relationships   to decorate onto related entities. These must take the format {domain}/{scope}/{code}, for example &#39;Portfolio/Manager/Id&#39;. (optional)
         * @return APIlistCustomEntitiesRequest
         */
        public APIlistCustomEntitiesRequest relatedEntityPropertyKeys(List<String> relatedEntityPropertyKeys) {
            this.relatedEntityPropertyKeys = relatedEntityPropertyKeys;
            return this;
        }

        /**
         * Set relationshipDefinitionIds
         * @param relationshipDefinitionIds A list of relationship definitions that are used to decorate related entities   onto the entities in the response. These must take the form {relationshipDefinitionScope}/{relationshipDefinitionCode}. (optional)
         * @return APIlistCustomEntitiesRequest
         */
        public APIlistCustomEntitiesRequest relationshipDefinitionIds(List<String> relationshipDefinitionIds) {
            this.relationshipDefinitionIds = relationshipDefinitionIds;
            return this;
        }

        /**
         * Set propertyKeys
         * @param propertyKeys A list of property keys from the &#39;CustomEntity&#39; domain to decorate onto   the custom entities of any type supported by that property (defined within the property definition CustomEntityTypes).   These must have the format {domain}/{scope}/{code}, for example &#39;CustomEntity/someScope/id&#39;. (optional)
         * @return APIlistCustomEntitiesRequest
         */
        public APIlistCustomEntitiesRequest propertyKeys(List<String> propertyKeys) {
            this.propertyKeys = propertyKeys;
            return this;
        }

        /**
         * Build call for listCustomEntities
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List custom entities of the specified entityType. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listCustomEntitiesCall(entityType, effectiveAt, asAt, limit, filter, sortBy, page, relatedEntityPropertyKeys, relationshipDefinitionIds, propertyKeys, _callback);
        }

        /**
         * Execute listCustomEntities request
         * @return PagedResourceListOfCustomEntityResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List custom entities of the specified entityType. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public PagedResourceListOfCustomEntityResponse execute() throws ApiException {
            ApiResponse<PagedResourceListOfCustomEntityResponse> localVarResp = listCustomEntitiesWithHttpInfo(entityType, effectiveAt, asAt, limit, filter, sortBy, page, relatedEntityPropertyKeys, relationshipDefinitionIds, propertyKeys);
            return localVarResp.getData();
        }

        /**
         * Execute listCustomEntities request. Use any specified configuration options to override any other configuration for this request only.
         * @return PagedResourceListOfCustomEntityResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List custom entities of the specified entityType. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public PagedResourceListOfCustomEntityResponse execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<PagedResourceListOfCustomEntityResponse> localVarResp = listCustomEntitiesWithHttpInfo(entityType, effectiveAt, asAt, limit, filter, sortBy, page, relatedEntityPropertyKeys, relationshipDefinitionIds, propertyKeys, opts);
            return localVarResp.getData();
        }

        /**
         * Execute listCustomEntities request with HTTP info returned
         * @return ApiResponse&lt;PagedResourceListOfCustomEntityResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List custom entities of the specified entityType. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PagedResourceListOfCustomEntityResponse> executeWithHttpInfo() throws ApiException {
            return listCustomEntitiesWithHttpInfo(entityType, effectiveAt, asAt, limit, filter, sortBy, page, relatedEntityPropertyKeys, relationshipDefinitionIds, propertyKeys);
        }

        /**
         * Execute listCustomEntities request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;PagedResourceListOfCustomEntityResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List custom entities of the specified entityType. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PagedResourceListOfCustomEntityResponse> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return listCustomEntitiesWithHttpInfo(entityType, effectiveAt, asAt, limit, filter, sortBy, page, relatedEntityPropertyKeys, relationshipDefinitionIds, propertyKeys, opts);
        }

        /**
         * Execute listCustomEntities request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List custom entities of the specified entityType. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PagedResourceListOfCustomEntityResponse> _callback) throws ApiException {
            return listCustomEntitiesAsync(entityType, effectiveAt, asAt, limit, filter, sortBy, page, relatedEntityPropertyKeys, relationshipDefinitionIds, propertyKeys, _callback);
        }

        /**
         * Execute listCustomEntities request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List custom entities of the specified entityType. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PagedResourceListOfCustomEntityResponse> _callback, ConfigurationOptions opts) throws ApiException {
            return listCustomEntitiesAsync(entityType, effectiveAt, asAt, limit, filter, sortBy, page, relatedEntityPropertyKeys, relationshipDefinitionIds, propertyKeys, _callback, opts);
        }
    }

    /**
     * ListCustomEntities: List Custom Entities of the specified entityType.
     * List all the Custom Entities matching particular criteria.
     * @param entityType The type of Custom Entity to list. (required)
     * @return APIlistCustomEntitiesRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List custom entities of the specified entityType. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIlistCustomEntitiesRequest listCustomEntities(String entityType) {
        return new APIlistCustomEntitiesRequest(entityType);
    }
    private okhttp3.Call patchCustomEntityAccessMetadataCall(String entityType, String identifierType, String identifierValue, String identifierScope, List<AccessMetadataOperation> accessMetadataOperation, String effectiveAt, OffsetDateTime effectiveUntil, final ApiCallback _callback) throws ApiException {
        return patchCustomEntityAccessMetadataCall(entityType, identifierType, identifierValue, identifierScope, accessMetadataOperation, effectiveAt, effectiveUntil,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call patchCustomEntityAccessMetadataCall(String entityType, String identifierType, String identifierValue, String identifierScope, List<AccessMetadataOperation> accessMetadataOperation, String effectiveAt, OffsetDateTime effectiveUntil, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = accessMetadataOperation;

        // create path and map variables
        String localVarPath = "/api/customentities/{entityType}/{identifierType}/{identifierValue}/metadata"
            .replace("{" + "entityType" + "}", localVarApiClient.escapeString(entityType.toString()))
            .replace("{" + "identifierType" + "}", localVarApiClient.escapeString(identifierType.toString()))
            .replace("{" + "identifierValue" + "}", localVarApiClient.escapeString(identifierValue.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (identifierScope != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("identifierScope", identifierScope));
        }

        if (effectiveAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("effectiveAt", effectiveAt));
        }

        if (effectiveUntil != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("effectiveUntil", effectiveUntil));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call patchCustomEntityAccessMetadataValidateBeforeCall(String entityType, String identifierType, String identifierValue, String identifierScope, List<AccessMetadataOperation> accessMetadataOperation, String effectiveAt, OffsetDateTime effectiveUntil, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'entityType' is set
        if (entityType == null) {
            throw new ApiException("Missing the required parameter 'entityType' when calling patchCustomEntityAccessMetadata(Async)");
        }

        // verify the required parameter 'identifierType' is set
        if (identifierType == null) {
            throw new ApiException("Missing the required parameter 'identifierType' when calling patchCustomEntityAccessMetadata(Async)");
        }

        // verify the required parameter 'identifierValue' is set
        if (identifierValue == null) {
            throw new ApiException("Missing the required parameter 'identifierValue' when calling patchCustomEntityAccessMetadata(Async)");
        }

        // verify the required parameter 'identifierScope' is set
        if (identifierScope == null) {
            throw new ApiException("Missing the required parameter 'identifierScope' when calling patchCustomEntityAccessMetadata(Async)");
        }

        // verify the required parameter 'accessMetadataOperation' is set
        if (accessMetadataOperation == null) {
            throw new ApiException("Missing the required parameter 'accessMetadataOperation' when calling patchCustomEntityAccessMetadata(Async)");
        }

        return patchCustomEntityAccessMetadataCall(entityType, identifierType, identifierValue, identifierScope, accessMetadataOperation, effectiveAt, effectiveUntil, _callback, opts);

    }


    private ApiResponse<Map<String, List<AccessMetadataValue>>> patchCustomEntityAccessMetadataWithHttpInfo(String entityType, String identifierType, String identifierValue, String identifierScope, List<AccessMetadataOperation> accessMetadataOperation, String effectiveAt, OffsetDateTime effectiveUntil) throws ApiException {
        okhttp3.Call localVarCall = patchCustomEntityAccessMetadataValidateBeforeCall(entityType, identifierType, identifierValue, identifierScope, accessMetadataOperation, effectiveAt, effectiveUntil, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<Map<String, List<AccessMetadataValue>>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<Map<String, List<AccessMetadataValue>>> patchCustomEntityAccessMetadataWithHttpInfo(String entityType, String identifierType, String identifierValue, String identifierScope, List<AccessMetadataOperation> accessMetadataOperation, String effectiveAt, OffsetDateTime effectiveUntil, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = patchCustomEntityAccessMetadataValidateBeforeCall(entityType, identifierType, identifierValue, identifierScope, accessMetadataOperation, effectiveAt, effectiveUntil, null, opts);
        Type localVarReturnType = new TypeToken<Map<String, List<AccessMetadataValue>>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call patchCustomEntityAccessMetadataAsync(String entityType, String identifierType, String identifierValue, String identifierScope, List<AccessMetadataOperation> accessMetadataOperation, String effectiveAt, OffsetDateTime effectiveUntil, final ApiCallback<Map<String, List<AccessMetadataValue>>> _callback) throws ApiException {

        okhttp3.Call localVarCall = patchCustomEntityAccessMetadataValidateBeforeCall(entityType, identifierType, identifierValue, identifierScope, accessMetadataOperation, effectiveAt, effectiveUntil, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<Map<String, List<AccessMetadataValue>>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call patchCustomEntityAccessMetadataAsync(String entityType, String identifierType, String identifierValue, String identifierScope, List<AccessMetadataOperation> accessMetadataOperation, String effectiveAt, OffsetDateTime effectiveUntil, final ApiCallback<Map<String, List<AccessMetadataValue>>> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = patchCustomEntityAccessMetadataValidateBeforeCall(entityType, identifierType, identifierValue, identifierScope, accessMetadataOperation, effectiveAt, effectiveUntil, _callback, opts);
        Type localVarReturnType = new TypeToken<Map<String, List<AccessMetadataValue>>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIpatchCustomEntityAccessMetadataRequest {
        private final String entityType;
        private final String identifierType;
        private final String identifierValue;
        private final String identifierScope;
        private final List<AccessMetadataOperation> accessMetadataOperation;
        private String effectiveAt;
        private OffsetDateTime effectiveUntil;

        private APIpatchCustomEntityAccessMetadataRequest(String entityType, String identifierType, String identifierValue, String identifierScope, List<AccessMetadataOperation> accessMetadataOperation) {
            this.entityType = entityType;
            this.identifierType = identifierType;
            this.identifierValue = identifierValue;
            this.identifierScope = identifierScope;
            this.accessMetadataOperation = accessMetadataOperation;
        }

        /**
         * Set effectiveAt
         * @param effectiveAt The effectiveAt datetime at which the Access Metadata will be effective from (optional)
         * @return APIpatchCustomEntityAccessMetadataRequest
         */
        public APIpatchCustomEntityAccessMetadataRequest effectiveAt(String effectiveAt) {
            this.effectiveAt = effectiveAt;
            return this;
        }

        /**
         * Set effectiveUntil
         * @param effectiveUntil The effective datetime until which the Access Metadata is valid. If not supplied this will be valid indefinitely, or until the next &#39;effectiveAt&#39; datetime of the Access Metadata (optional)
         * @return APIpatchCustomEntityAccessMetadataRequest
         */
        public APIpatchCustomEntityAccessMetadataRequest effectiveUntil(OffsetDateTime effectiveUntil) {
            this.effectiveUntil = effectiveUntil;
            return this;
        }

        /**
         * Build call for patchCustomEntityAccessMetadata
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The access metadata for the CustomEntity or any failure. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return patchCustomEntityAccessMetadataCall(entityType, identifierType, identifierValue, identifierScope, accessMetadataOperation, effectiveAt, effectiveUntil, _callback);
        }

        /**
         * Execute patchCustomEntityAccessMetadata request
         * @return Map&lt;String, List&lt;AccessMetadataValue&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The access metadata for the CustomEntity or any failure. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public Map<String, List<AccessMetadataValue>> execute() throws ApiException {
            ApiResponse<Map<String, List<AccessMetadataValue>>> localVarResp = patchCustomEntityAccessMetadataWithHttpInfo(entityType, identifierType, identifierValue, identifierScope, accessMetadataOperation, effectiveAt, effectiveUntil);
            return localVarResp.getData();
        }

        /**
         * Execute patchCustomEntityAccessMetadata request. Use any specified configuration options to override any other configuration for this request only.
         * @return Map&lt;String, List&lt;AccessMetadataValue&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The access metadata for the CustomEntity or any failure. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public Map<String, List<AccessMetadataValue>> execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<Map<String, List<AccessMetadataValue>>> localVarResp = patchCustomEntityAccessMetadataWithHttpInfo(entityType, identifierType, identifierValue, identifierScope, accessMetadataOperation, effectiveAt, effectiveUntil, opts);
            return localVarResp.getData();
        }

        /**
         * Execute patchCustomEntityAccessMetadata request with HTTP info returned
         * @return ApiResponse&lt;Map&lt;String, List&lt;AccessMetadataValue&gt;&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The access metadata for the CustomEntity or any failure. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Map<String, List<AccessMetadataValue>>> executeWithHttpInfo() throws ApiException {
            return patchCustomEntityAccessMetadataWithHttpInfo(entityType, identifierType, identifierValue, identifierScope, accessMetadataOperation, effectiveAt, effectiveUntil);
        }

        /**
         * Execute patchCustomEntityAccessMetadata request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;Map&lt;String, List&lt;AccessMetadataValue&gt;&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The access metadata for the CustomEntity or any failure. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Map<String, List<AccessMetadataValue>>> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return patchCustomEntityAccessMetadataWithHttpInfo(entityType, identifierType, identifierValue, identifierScope, accessMetadataOperation, effectiveAt, effectiveUntil, opts);
        }

        /**
         * Execute patchCustomEntityAccessMetadata request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The access metadata for the CustomEntity or any failure. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Map<String, List<AccessMetadataValue>>> _callback) throws ApiException {
            return patchCustomEntityAccessMetadataAsync(entityType, identifierType, identifierValue, identifierScope, accessMetadataOperation, effectiveAt, effectiveUntil, _callback);
        }

        /**
         * Execute patchCustomEntityAccessMetadata request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The access metadata for the CustomEntity or any failure. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Map<String, List<AccessMetadataValue>>> _callback, ConfigurationOptions opts) throws ApiException {
            return patchCustomEntityAccessMetadataAsync(entityType, identifierType, identifierValue, identifierScope, accessMetadataOperation, effectiveAt, effectiveUntil, _callback, opts);
        }
    }

    /**
     * [EARLY ACCESS] PatchCustomEntityAccessMetadata: Patch Access Metadata rules for a Custom Entity.
     * Patch Custom Entity Access Metadata Rules in a single scope.  The behaviour is defined by the JSON Patch specification.     Currently only &#39;add&#39; is a supported operation on the patch document    Currently only valid metadata keys are supported paths on the patch document     The response will return any affected Custom Entity Access Metadata rules or a failure message if unsuccessful.     It is important to always check to verify success (or failure).     Multiple rules for a metadataKey can exist with different effective at dates, when resources are accessed the rule that is active for the current time will be fetched.
     * @param entityType The type of the Custom Entity. (required)
     * @param identifierType An identifier type attached to the Custom Entity instance. (required)
     * @param identifierValue The identifier value. (required)
     * @param identifierScope The identifier scope. (required)
     * @param accessMetadataOperation The Json Patch document (required)
     * @return APIpatchCustomEntityAccessMetadataRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The access metadata for the CustomEntity or any failure. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIpatchCustomEntityAccessMetadataRequest patchCustomEntityAccessMetadata(String entityType, String identifierType, String identifierValue, String identifierScope, List<AccessMetadataOperation> accessMetadataOperation) {
        return new APIpatchCustomEntityAccessMetadataRequest(entityType, identifierType, identifierValue, identifierScope, accessMetadataOperation);
    }
    private okhttp3.Call upsertCustomEntitiesCall(String entityType, String successMode, Map<String, CustomEntityRequest> requestBody, final ApiCallback _callback) throws ApiException {
        return upsertCustomEntitiesCall(entityType, successMode, requestBody,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call upsertCustomEntitiesCall(String entityType, String successMode, Map<String, CustomEntityRequest> requestBody, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/api/customentities/{entityType}/$batchUpsert"
            .replace("{" + "entityType" + "}", localVarApiClient.escapeString(entityType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (successMode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("successMode", successMode));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call upsertCustomEntitiesValidateBeforeCall(String entityType, String successMode, Map<String, CustomEntityRequest> requestBody, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'entityType' is set
        if (entityType == null) {
            throw new ApiException("Missing the required parameter 'entityType' when calling upsertCustomEntities(Async)");
        }

        // verify the required parameter 'successMode' is set
        if (successMode == null) {
            throw new ApiException("Missing the required parameter 'successMode' when calling upsertCustomEntities(Async)");
        }

        // verify the required parameter 'requestBody' is set
        if (requestBody == null) {
            throw new ApiException("Missing the required parameter 'requestBody' when calling upsertCustomEntities(Async)");
        }

        return upsertCustomEntitiesCall(entityType, successMode, requestBody, _callback, opts);

    }


    private ApiResponse<UpsertCustomEntitiesResponse> upsertCustomEntitiesWithHttpInfo(String entityType, String successMode, Map<String, CustomEntityRequest> requestBody) throws ApiException {
        okhttp3.Call localVarCall = upsertCustomEntitiesValidateBeforeCall(entityType, successMode, requestBody, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<UpsertCustomEntitiesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<UpsertCustomEntitiesResponse> upsertCustomEntitiesWithHttpInfo(String entityType, String successMode, Map<String, CustomEntityRequest> requestBody, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = upsertCustomEntitiesValidateBeforeCall(entityType, successMode, requestBody, null, opts);
        Type localVarReturnType = new TypeToken<UpsertCustomEntitiesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call upsertCustomEntitiesAsync(String entityType, String successMode, Map<String, CustomEntityRequest> requestBody, final ApiCallback<UpsertCustomEntitiesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = upsertCustomEntitiesValidateBeforeCall(entityType, successMode, requestBody, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<UpsertCustomEntitiesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call upsertCustomEntitiesAsync(String entityType, String successMode, Map<String, CustomEntityRequest> requestBody, final ApiCallback<UpsertCustomEntitiesResponse> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = upsertCustomEntitiesValidateBeforeCall(entityType, successMode, requestBody, _callback, opts);
        Type localVarReturnType = new TypeToken<UpsertCustomEntitiesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIupsertCustomEntitiesRequest {
        private final String entityType;
        private final String successMode;
        private final Map<String, CustomEntityRequest> requestBody;

        private APIupsertCustomEntitiesRequest(String entityType, String successMode, Map<String, CustomEntityRequest> requestBody) {
            this.entityType = entityType;
            this.successMode = successMode;
            this.requestBody = requestBody;
        }

        /**
         * Build call for upsertCustomEntities
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The upserted custom entity instance </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return upsertCustomEntitiesCall(entityType, successMode, requestBody, _callback);
        }

        /**
         * Execute upsertCustomEntities request
         * @return UpsertCustomEntitiesResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The upserted custom entity instance </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public UpsertCustomEntitiesResponse execute() throws ApiException {
            ApiResponse<UpsertCustomEntitiesResponse> localVarResp = upsertCustomEntitiesWithHttpInfo(entityType, successMode, requestBody);
            return localVarResp.getData();
        }

        /**
         * Execute upsertCustomEntities request. Use any specified configuration options to override any other configuration for this request only.
         * @return UpsertCustomEntitiesResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The upserted custom entity instance </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public UpsertCustomEntitiesResponse execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<UpsertCustomEntitiesResponse> localVarResp = upsertCustomEntitiesWithHttpInfo(entityType, successMode, requestBody, opts);
            return localVarResp.getData();
        }

        /**
         * Execute upsertCustomEntities request with HTTP info returned
         * @return ApiResponse&lt;UpsertCustomEntitiesResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The upserted custom entity instance </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UpsertCustomEntitiesResponse> executeWithHttpInfo() throws ApiException {
            return upsertCustomEntitiesWithHttpInfo(entityType, successMode, requestBody);
        }

        /**
         * Execute upsertCustomEntities request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;UpsertCustomEntitiesResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The upserted custom entity instance </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UpsertCustomEntitiesResponse> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return upsertCustomEntitiesWithHttpInfo(entityType, successMode, requestBody, opts);
        }

        /**
         * Execute upsertCustomEntities request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The upserted custom entity instance </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UpsertCustomEntitiesResponse> _callback) throws ApiException {
            return upsertCustomEntitiesAsync(entityType, successMode, requestBody, _callback);
        }

        /**
         * Execute upsertCustomEntities request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The upserted custom entity instance </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UpsertCustomEntitiesResponse> _callback, ConfigurationOptions opts) throws ApiException {
            return upsertCustomEntitiesAsync(entityType, successMode, requestBody, _callback, opts);
        }
    }

    /**
     * [EARLY ACCESS] UpsertCustomEntities: Batch upsert instances of Custom Entities
     * Note: If using partial failure modes, then it is important to check the response body for failures as any failures will still return a 200 status code
     * @param entityType The type of the Custom Entity to be created. An entityType can be created using the \&quot;CreateCustomEntityDefinition\&quot; endpoint for CustomEntityDefinitions. (required)
     * @param successMode Whether the batch request should fail Atomically or in a Partial fashion - Allowed Values: Atomic, Partial (required)
     * @param requestBody The payload describing the Custom Entity instances (required)
     * @return APIupsertCustomEntitiesRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The upserted custom entity instance </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIupsertCustomEntitiesRequest upsertCustomEntities(String entityType, String successMode, Map<String, CustomEntityRequest> requestBody) {
        return new APIupsertCustomEntitiesRequest(entityType, successMode, requestBody);
    }
    private okhttp3.Call upsertCustomEntityCall(String entityType, CustomEntityRequest customEntityRequest, final ApiCallback _callback) throws ApiException {
        return upsertCustomEntityCall(entityType, customEntityRequest,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call upsertCustomEntityCall(String entityType, CustomEntityRequest customEntityRequest, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = customEntityRequest;

        // create path and map variables
        String localVarPath = "/api/customentities/{entityType}"
            .replace("{" + "entityType" + "}", localVarApiClient.escapeString(entityType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call upsertCustomEntityValidateBeforeCall(String entityType, CustomEntityRequest customEntityRequest, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'entityType' is set
        if (entityType == null) {
            throw new ApiException("Missing the required parameter 'entityType' when calling upsertCustomEntity(Async)");
        }

        // verify the required parameter 'customEntityRequest' is set
        if (customEntityRequest == null) {
            throw new ApiException("Missing the required parameter 'customEntityRequest' when calling upsertCustomEntity(Async)");
        }

        return upsertCustomEntityCall(entityType, customEntityRequest, _callback, opts);

    }


    private ApiResponse<CustomEntityResponse> upsertCustomEntityWithHttpInfo(String entityType, CustomEntityRequest customEntityRequest) throws ApiException {
        okhttp3.Call localVarCall = upsertCustomEntityValidateBeforeCall(entityType, customEntityRequest, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<CustomEntityResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<CustomEntityResponse> upsertCustomEntityWithHttpInfo(String entityType, CustomEntityRequest customEntityRequest, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = upsertCustomEntityValidateBeforeCall(entityType, customEntityRequest, null, opts);
        Type localVarReturnType = new TypeToken<CustomEntityResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call upsertCustomEntityAsync(String entityType, CustomEntityRequest customEntityRequest, final ApiCallback<CustomEntityResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = upsertCustomEntityValidateBeforeCall(entityType, customEntityRequest, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<CustomEntityResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call upsertCustomEntityAsync(String entityType, CustomEntityRequest customEntityRequest, final ApiCallback<CustomEntityResponse> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = upsertCustomEntityValidateBeforeCall(entityType, customEntityRequest, _callback, opts);
        Type localVarReturnType = new TypeToken<CustomEntityResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIupsertCustomEntityRequest {
        private final String entityType;
        private final CustomEntityRequest customEntityRequest;

        private APIupsertCustomEntityRequest(String entityType, CustomEntityRequest customEntityRequest) {
            this.entityType = entityType;
            this.customEntityRequest = customEntityRequest;
        }

        /**
         * Build call for upsertCustomEntity
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The upserted custom entity instance </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return upsertCustomEntityCall(entityType, customEntityRequest, _callback);
        }

        /**
         * Execute upsertCustomEntity request
         * @return CustomEntityResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The upserted custom entity instance </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public CustomEntityResponse execute() throws ApiException {
            ApiResponse<CustomEntityResponse> localVarResp = upsertCustomEntityWithHttpInfo(entityType, customEntityRequest);
            return localVarResp.getData();
        }

        /**
         * Execute upsertCustomEntity request. Use any specified configuration options to override any other configuration for this request only.
         * @return CustomEntityResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The upserted custom entity instance </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public CustomEntityResponse execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<CustomEntityResponse> localVarResp = upsertCustomEntityWithHttpInfo(entityType, customEntityRequest, opts);
            return localVarResp.getData();
        }

        /**
         * Execute upsertCustomEntity request with HTTP info returned
         * @return ApiResponse&lt;CustomEntityResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The upserted custom entity instance </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CustomEntityResponse> executeWithHttpInfo() throws ApiException {
            return upsertCustomEntityWithHttpInfo(entityType, customEntityRequest);
        }

        /**
         * Execute upsertCustomEntity request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;CustomEntityResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The upserted custom entity instance </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CustomEntityResponse> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return upsertCustomEntityWithHttpInfo(entityType, customEntityRequest, opts);
        }

        /**
         * Execute upsertCustomEntity request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The upserted custom entity instance </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CustomEntityResponse> _callback) throws ApiException {
            return upsertCustomEntityAsync(entityType, customEntityRequest, _callback);
        }

        /**
         * Execute upsertCustomEntity request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The upserted custom entity instance </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CustomEntityResponse> _callback, ConfigurationOptions opts) throws ApiException {
            return upsertCustomEntityAsync(entityType, customEntityRequest, _callback, opts);
        }
    }

    /**
     * UpsertCustomEntity: Upsert a Custom Entity instance
     * Insert the Custom Entity if it does not exist or update the Custom Entity with the supplied state if it does exist.
     * @param entityType The type of the Custom Entity to be created. An entityType can be created using the \&quot;CreateCustomEntityDefinition\&quot; endpoint for CustomEntityDefinitions. (required)
     * @param customEntityRequest The payload describing the Custom Entity instance. (required)
     * @return APIupsertCustomEntityRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The upserted custom entity instance </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIupsertCustomEntityRequest upsertCustomEntity(String entityType, CustomEntityRequest customEntityRequest) {
        return new APIupsertCustomEntityRequest(entityType, customEntityRequest);
    }
    private okhttp3.Call upsertCustomEntityAccessMetadataCall(String entityType, String identifierType, String identifierValue, String metadataKey, String identifierScope, UpsertCustomEntityAccessMetadataRequest upsertCustomEntityAccessMetadataRequest, String effectiveAt, OffsetDateTime effectiveUntil, final ApiCallback _callback) throws ApiException {
        return upsertCustomEntityAccessMetadataCall(entityType, identifierType, identifierValue, metadataKey, identifierScope, upsertCustomEntityAccessMetadataRequest, effectiveAt, effectiveUntil,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call upsertCustomEntityAccessMetadataCall(String entityType, String identifierType, String identifierValue, String metadataKey, String identifierScope, UpsertCustomEntityAccessMetadataRequest upsertCustomEntityAccessMetadataRequest, String effectiveAt, OffsetDateTime effectiveUntil, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = upsertCustomEntityAccessMetadataRequest;

        // create path and map variables
        String localVarPath = "/api/customentities/{entityType}/{identifierType}/{identifierValue}/metadata/{metadataKey}"
            .replace("{" + "entityType" + "}", localVarApiClient.escapeString(entityType.toString()))
            .replace("{" + "identifierType" + "}", localVarApiClient.escapeString(identifierType.toString()))
            .replace("{" + "identifierValue" + "}", localVarApiClient.escapeString(identifierValue.toString()))
            .replace("{" + "metadataKey" + "}", localVarApiClient.escapeString(metadataKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (identifierScope != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("identifierScope", identifierScope));
        }

        if (effectiveAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("effectiveAt", effectiveAt));
        }

        if (effectiveUntil != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("effectiveUntil", effectiveUntil));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call upsertCustomEntityAccessMetadataValidateBeforeCall(String entityType, String identifierType, String identifierValue, String metadataKey, String identifierScope, UpsertCustomEntityAccessMetadataRequest upsertCustomEntityAccessMetadataRequest, String effectiveAt, OffsetDateTime effectiveUntil, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'entityType' is set
        if (entityType == null) {
            throw new ApiException("Missing the required parameter 'entityType' when calling upsertCustomEntityAccessMetadata(Async)");
        }

        // verify the required parameter 'identifierType' is set
        if (identifierType == null) {
            throw new ApiException("Missing the required parameter 'identifierType' when calling upsertCustomEntityAccessMetadata(Async)");
        }

        // verify the required parameter 'identifierValue' is set
        if (identifierValue == null) {
            throw new ApiException("Missing the required parameter 'identifierValue' when calling upsertCustomEntityAccessMetadata(Async)");
        }

        // verify the required parameter 'metadataKey' is set
        if (metadataKey == null) {
            throw new ApiException("Missing the required parameter 'metadataKey' when calling upsertCustomEntityAccessMetadata(Async)");
        }

        // verify the required parameter 'identifierScope' is set
        if (identifierScope == null) {
            throw new ApiException("Missing the required parameter 'identifierScope' when calling upsertCustomEntityAccessMetadata(Async)");
        }

        // verify the required parameter 'upsertCustomEntityAccessMetadataRequest' is set
        if (upsertCustomEntityAccessMetadataRequest == null) {
            throw new ApiException("Missing the required parameter 'upsertCustomEntityAccessMetadataRequest' when calling upsertCustomEntityAccessMetadata(Async)");
        }

        return upsertCustomEntityAccessMetadataCall(entityType, identifierType, identifierValue, metadataKey, identifierScope, upsertCustomEntityAccessMetadataRequest, effectiveAt, effectiveUntil, _callback, opts);

    }


    private ApiResponse<List<AccessMetadataValue>> upsertCustomEntityAccessMetadataWithHttpInfo(String entityType, String identifierType, String identifierValue, String metadataKey, String identifierScope, UpsertCustomEntityAccessMetadataRequest upsertCustomEntityAccessMetadataRequest, String effectiveAt, OffsetDateTime effectiveUntil) throws ApiException {
        okhttp3.Call localVarCall = upsertCustomEntityAccessMetadataValidateBeforeCall(entityType, identifierType, identifierValue, metadataKey, identifierScope, upsertCustomEntityAccessMetadataRequest, effectiveAt, effectiveUntil, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<List<AccessMetadataValue>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<List<AccessMetadataValue>> upsertCustomEntityAccessMetadataWithHttpInfo(String entityType, String identifierType, String identifierValue, String metadataKey, String identifierScope, UpsertCustomEntityAccessMetadataRequest upsertCustomEntityAccessMetadataRequest, String effectiveAt, OffsetDateTime effectiveUntil, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = upsertCustomEntityAccessMetadataValidateBeforeCall(entityType, identifierType, identifierValue, metadataKey, identifierScope, upsertCustomEntityAccessMetadataRequest, effectiveAt, effectiveUntil, null, opts);
        Type localVarReturnType = new TypeToken<List<AccessMetadataValue>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call upsertCustomEntityAccessMetadataAsync(String entityType, String identifierType, String identifierValue, String metadataKey, String identifierScope, UpsertCustomEntityAccessMetadataRequest upsertCustomEntityAccessMetadataRequest, String effectiveAt, OffsetDateTime effectiveUntil, final ApiCallback<List<AccessMetadataValue>> _callback) throws ApiException {

        okhttp3.Call localVarCall = upsertCustomEntityAccessMetadataValidateBeforeCall(entityType, identifierType, identifierValue, metadataKey, identifierScope, upsertCustomEntityAccessMetadataRequest, effectiveAt, effectiveUntil, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<List<AccessMetadataValue>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call upsertCustomEntityAccessMetadataAsync(String entityType, String identifierType, String identifierValue, String metadataKey, String identifierScope, UpsertCustomEntityAccessMetadataRequest upsertCustomEntityAccessMetadataRequest, String effectiveAt, OffsetDateTime effectiveUntil, final ApiCallback<List<AccessMetadataValue>> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = upsertCustomEntityAccessMetadataValidateBeforeCall(entityType, identifierType, identifierValue, metadataKey, identifierScope, upsertCustomEntityAccessMetadataRequest, effectiveAt, effectiveUntil, _callback, opts);
        Type localVarReturnType = new TypeToken<List<AccessMetadataValue>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIupsertCustomEntityAccessMetadataRequest {
        private final String entityType;
        private final String identifierType;
        private final String identifierValue;
        private final String metadataKey;
        private final String identifierScope;
        private final UpsertCustomEntityAccessMetadataRequest upsertCustomEntityAccessMetadataRequest;
        private String effectiveAt;
        private OffsetDateTime effectiveUntil;

        private APIupsertCustomEntityAccessMetadataRequest(String entityType, String identifierType, String identifierValue, String metadataKey, String identifierScope, UpsertCustomEntityAccessMetadataRequest upsertCustomEntityAccessMetadataRequest) {
            this.entityType = entityType;
            this.identifierType = identifierType;
            this.identifierValue = identifierValue;
            this.metadataKey = metadataKey;
            this.identifierScope = identifierScope;
            this.upsertCustomEntityAccessMetadataRequest = upsertCustomEntityAccessMetadataRequest;
        }

        /**
         * Set effectiveAt
         * @param effectiveAt The effectiveAt datetime at which the Access Metadata will be effective from (optional)
         * @return APIupsertCustomEntityAccessMetadataRequest
         */
        public APIupsertCustomEntityAccessMetadataRequest effectiveAt(String effectiveAt) {
            this.effectiveAt = effectiveAt;
            return this;
        }

        /**
         * Set effectiveUntil
         * @param effectiveUntil The effective datetime until which the Access Metadata is valid. If not supplied this will be valid indefinitely, or until the next &#39;effectiveAt&#39; datetime of the Access Metadata (optional)
         * @return APIupsertCustomEntityAccessMetadataRequest
         */
        public APIupsertCustomEntityAccessMetadataRequest effectiveUntil(OffsetDateTime effectiveUntil) {
            this.effectiveUntil = effectiveUntil;
            return this;
        }

        /**
         * Build call for upsertCustomEntityAccessMetadata
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The access metadata for the CustomEntity or any failure. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return upsertCustomEntityAccessMetadataCall(entityType, identifierType, identifierValue, metadataKey, identifierScope, upsertCustomEntityAccessMetadataRequest, effectiveAt, effectiveUntil, _callback);
        }

        /**
         * Execute upsertCustomEntityAccessMetadata request
         * @return List&lt;AccessMetadataValue&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The access metadata for the CustomEntity or any failure. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public List<AccessMetadataValue> execute() throws ApiException {
            ApiResponse<List<AccessMetadataValue>> localVarResp = upsertCustomEntityAccessMetadataWithHttpInfo(entityType, identifierType, identifierValue, metadataKey, identifierScope, upsertCustomEntityAccessMetadataRequest, effectiveAt, effectiveUntil);
            return localVarResp.getData();
        }

        /**
         * Execute upsertCustomEntityAccessMetadata request. Use any specified configuration options to override any other configuration for this request only.
         * @return List&lt;AccessMetadataValue&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The access metadata for the CustomEntity or any failure. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public List<AccessMetadataValue> execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<List<AccessMetadataValue>> localVarResp = upsertCustomEntityAccessMetadataWithHttpInfo(entityType, identifierType, identifierValue, metadataKey, identifierScope, upsertCustomEntityAccessMetadataRequest, effectiveAt, effectiveUntil, opts);
            return localVarResp.getData();
        }

        /**
         * Execute upsertCustomEntityAccessMetadata request with HTTP info returned
         * @return ApiResponse&lt;List&lt;AccessMetadataValue&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The access metadata for the CustomEntity or any failure. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<AccessMetadataValue>> executeWithHttpInfo() throws ApiException {
            return upsertCustomEntityAccessMetadataWithHttpInfo(entityType, identifierType, identifierValue, metadataKey, identifierScope, upsertCustomEntityAccessMetadataRequest, effectiveAt, effectiveUntil);
        }

        /**
         * Execute upsertCustomEntityAccessMetadata request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;List&lt;AccessMetadataValue&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The access metadata for the CustomEntity or any failure. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<AccessMetadataValue>> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return upsertCustomEntityAccessMetadataWithHttpInfo(entityType, identifierType, identifierValue, metadataKey, identifierScope, upsertCustomEntityAccessMetadataRequest, effectiveAt, effectiveUntil, opts);
        }

        /**
         * Execute upsertCustomEntityAccessMetadata request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The access metadata for the CustomEntity or any failure. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<AccessMetadataValue>> _callback) throws ApiException {
            return upsertCustomEntityAccessMetadataAsync(entityType, identifierType, identifierValue, metadataKey, identifierScope, upsertCustomEntityAccessMetadataRequest, effectiveAt, effectiveUntil, _callback);
        }

        /**
         * Execute upsertCustomEntityAccessMetadata request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The access metadata for the CustomEntity or any failure. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<AccessMetadataValue>> _callback, ConfigurationOptions opts) throws ApiException {
            return upsertCustomEntityAccessMetadataAsync(entityType, identifierType, identifierValue, metadataKey, identifierScope, upsertCustomEntityAccessMetadataRequest, effectiveAt, effectiveUntil, _callback, opts);
        }
    }

    /**
     * [EARLY ACCESS] UpsertCustomEntityAccessMetadata: Upsert a Custom Entity Access Metadata entry associated with a specific metadataKey. This creates or updates the data in LUSID.
     * Update or insert one Custom Entity Access Metadata entry in a single scope. An item will be updated if it already exists  and inserted if it does not.     The response will return the successfully updated or inserted Custom Entity Access Metadata rule or failure message if unsuccessful.     It is important to always check to verify success (or failure).     Multiple rules for a metadataKey can exist with different effective at dates, when resources are accessed the rule that is active for the current time will be fetched.
     * @param entityType The type of the Custom Entity. (required)
     * @param identifierType An identifier type attached to the Custom Entity instance. (required)
     * @param identifierValue The identifier value. (required)
     * @param metadataKey Key of the metadata entry to retrieve (required)
     * @param identifierScope The identifier scope. (required)
     * @param upsertCustomEntityAccessMetadataRequest The Custom Entity Access Metadata entry to upsert (required)
     * @return APIupsertCustomEntityAccessMetadataRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The access metadata for the CustomEntity or any failure. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIupsertCustomEntityAccessMetadataRequest upsertCustomEntityAccessMetadata(String entityType, String identifierType, String identifierValue, String metadataKey, String identifierScope, UpsertCustomEntityAccessMetadataRequest upsertCustomEntityAccessMetadataRequest) {
        return new APIupsertCustomEntityAccessMetadataRequest(entityType, identifierType, identifierValue, metadataKey, identifierScope, upsertCustomEntityAccessMetadataRequest);
    }
}
