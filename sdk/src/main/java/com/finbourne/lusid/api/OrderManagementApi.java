/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.api;

import com.finbourne.lusid.ApiCallback;
import com.finbourne.lusid.ApiClient;
import com.finbourne.lusid.ApiException;
import com.finbourne.lusid.ApiResponse;
import com.finbourne.lusid.Configuration;
import com.finbourne.lusid.Pair;
import com.finbourne.lusid.ProgressRequestBody;
import com.finbourne.lusid.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.finbourne.lusid.model.AllocationServiceRunResponse;
import com.finbourne.lusid.model.BlockAndOrdersCreateRequest;
import com.finbourne.lusid.model.BookTransactionsRequest;
import com.finbourne.lusid.model.BookTransactionsResponse;
import com.finbourne.lusid.model.CancelOrdersResponse;
import com.finbourne.lusid.model.CancelPlacementsResponse;
import com.finbourne.lusid.model.LusidProblemDetails;
import com.finbourne.lusid.model.LusidValidationProblemDetails;
import com.finbourne.lusid.model.MoveOrdersToDifferentBlocksRequest;
import com.finbourne.lusid.model.OrderUpdateRequest;
import com.finbourne.lusid.model.PlaceBlocksRequest;
import com.finbourne.lusid.model.PlacementUpdateRequest;
import com.finbourne.lusid.model.ResourceId;
import com.finbourne.lusid.model.ResourceListOfBlockAndOrders;
import com.finbourne.lusid.model.ResourceListOfMovedOrderToDifferentBlockResponse;
import com.finbourne.lusid.model.ResourceListOfPlacement;
import com.finbourne.lusid.model.UpdateOrdersResponse;
import com.finbourne.lusid.model.UpdatePlacementsResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class OrderManagementApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public OrderManagementApi() {
        this(Configuration.getDefaultApiClient());
    }

    public OrderManagementApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call bookTransactionsCall(BookTransactionsRequest bookTransactionsRequest, Boolean applyFeesAndCommission, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = bookTransactionsRequest;

        // create path and map variables
        String localVarPath = "/api/ordermanagement/booktransactions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (applyFeesAndCommission != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("applyFeesAndCommission", applyFeesAndCommission));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call bookTransactionsValidateBeforeCall(BookTransactionsRequest bookTransactionsRequest, Boolean applyFeesAndCommission, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'bookTransactionsRequest' is set
        if (bookTransactionsRequest == null) {
            throw new ApiException("Missing the required parameter 'bookTransactionsRequest' when calling bookTransactions(Async)");
        }

        return bookTransactionsCall(bookTransactionsRequest, applyFeesAndCommission, _callback);

    }


    private ApiResponse<BookTransactionsResponse> bookTransactionsWithHttpInfo(BookTransactionsRequest bookTransactionsRequest, Boolean applyFeesAndCommission) throws ApiException {
        okhttp3.Call localVarCall = bookTransactionsValidateBeforeCall(bookTransactionsRequest, applyFeesAndCommission, null);
        Type localVarReturnType = new TypeToken<BookTransactionsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call bookTransactionsAsync(BookTransactionsRequest bookTransactionsRequest, Boolean applyFeesAndCommission, final ApiCallback<BookTransactionsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = bookTransactionsValidateBeforeCall(bookTransactionsRequest, applyFeesAndCommission, _callback);
        Type localVarReturnType = new TypeToken<BookTransactionsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIbookTransactionsRequest {
        private final BookTransactionsRequest bookTransactionsRequest;
        private Boolean applyFeesAndCommission;

        private APIbookTransactionsRequest(BookTransactionsRequest bookTransactionsRequest) {
            this.bookTransactionsRequest = bookTransactionsRequest;
        }

        /**
         * Set applyFeesAndCommission
         * @param applyFeesAndCommission Whether to apply fees and commissions to transactions (default: true) (optional, default to true)
         * @return APIbookTransactionsRequest
         */
        public APIbookTransactionsRequest applyFeesAndCommission(Boolean applyFeesAndCommission) {
            this.applyFeesAndCommission = applyFeesAndCommission;
            return this;
        }

        /**
         * Build call for bookTransactions
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The results from booking transactions from allocations </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return bookTransactionsCall(bookTransactionsRequest, applyFeesAndCommission, _callback);
        }

        /**
         * Execute bookTransactions request
         * @return BookTransactionsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The results from booking transactions from allocations </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public BookTransactionsResponse execute() throws ApiException {
            ApiResponse<BookTransactionsResponse> localVarResp = bookTransactionsWithHttpInfo(bookTransactionsRequest, applyFeesAndCommission);
            return localVarResp.getData();
        }

        /**
         * Execute bookTransactions request with HTTP info returned
         * @return ApiResponse&lt;BookTransactionsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The results from booking transactions from allocations </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<BookTransactionsResponse> executeWithHttpInfo() throws ApiException {
            return bookTransactionsWithHttpInfo(bookTransactionsRequest, applyFeesAndCommission);
        }

        /**
         * Execute bookTransactions request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The results from booking transactions from allocations </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<BookTransactionsResponse> _callback) throws ApiException {
            return bookTransactionsAsync(bookTransactionsRequest, applyFeesAndCommission, _callback);
        }
    }

    /**
     * [EXPERIMENTAL] BookTransactions: Books transactions using specific allocations as a source.
     * Takes a collection of allocation IDs, and maps fields from those allocations and related orders onto new transactions.
     * @param bookTransactionsRequest The allocations to create transactions for (required)
     * @return APIbookTransactionsRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The results from booking transactions from allocations </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIbookTransactionsRequest bookTransactions(BookTransactionsRequest bookTransactionsRequest) {
        return new APIbookTransactionsRequest(bookTransactionsRequest);
    }
    private okhttp3.Call cancelOrdersCall(Map<String, ResourceId> requestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/api/ordermanagement/cancelorders";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cancelOrdersValidateBeforeCall(Map<String, ResourceId> requestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'requestBody' is set
        if (requestBody == null) {
            throw new ApiException("Missing the required parameter 'requestBody' when calling cancelOrders(Async)");
        }

        return cancelOrdersCall(requestBody, _callback);

    }


    private ApiResponse<CancelOrdersResponse> cancelOrdersWithHttpInfo(Map<String, ResourceId> requestBody) throws ApiException {
        okhttp3.Call localVarCall = cancelOrdersValidateBeforeCall(requestBody, null);
        Type localVarReturnType = new TypeToken<CancelOrdersResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call cancelOrdersAsync(Map<String, ResourceId> requestBody, final ApiCallback<CancelOrdersResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = cancelOrdersValidateBeforeCall(requestBody, _callback);
        Type localVarReturnType = new TypeToken<CancelOrdersResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIcancelOrdersRequest {
        private final Map<String, ResourceId> requestBody;

        private APIcancelOrdersRequest(Map<String, ResourceId> requestBody) {
            this.requestBody = requestBody;
        }

        /**
         * Build call for cancelOrders
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The successfully cancelled orders along with any failures </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return cancelOrdersCall(requestBody, _callback);
        }

        /**
         * Execute cancelOrders request
         * @return CancelOrdersResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The successfully cancelled orders along with any failures </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public CancelOrdersResponse execute() throws ApiException {
            ApiResponse<CancelOrdersResponse> localVarResp = cancelOrdersWithHttpInfo(requestBody);
            return localVarResp.getData();
        }

        /**
         * Execute cancelOrders request with HTTP info returned
         * @return ApiResponse&lt;CancelOrdersResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The successfully cancelled orders along with any failures </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CancelOrdersResponse> executeWithHttpInfo() throws ApiException {
            return cancelOrdersWithHttpInfo(requestBody);
        }

        /**
         * Execute cancelOrders request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The successfully cancelled orders along with any failures </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CancelOrdersResponse> _callback) throws ApiException {
            return cancelOrdersAsync(requestBody, _callback);
        }
    }

    /**
     * [EARLY ACCESS] CancelOrders: Cancel existing orders
     * The response returns both the collection of successfully canceled orders, as well as those  that failed. For each failure, a reason is provided. It is important to check the failed set for  unsuccessful results.
     * @param requestBody The request containing the ids of the orders to be cancelled. (required)
     * @return APIcancelOrdersRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The successfully cancelled orders along with any failures </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIcancelOrdersRequest cancelOrders(Map<String, ResourceId> requestBody) {
        return new APIcancelOrdersRequest(requestBody);
    }
    private okhttp3.Call cancelPlacementsCall(Map<String, ResourceId> requestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/api/ordermanagement/$cancelplacements";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cancelPlacementsValidateBeforeCall(Map<String, ResourceId> requestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'requestBody' is set
        if (requestBody == null) {
            throw new ApiException("Missing the required parameter 'requestBody' when calling cancelPlacements(Async)");
        }

        return cancelPlacementsCall(requestBody, _callback);

    }


    private ApiResponse<CancelPlacementsResponse> cancelPlacementsWithHttpInfo(Map<String, ResourceId> requestBody) throws ApiException {
        okhttp3.Call localVarCall = cancelPlacementsValidateBeforeCall(requestBody, null);
        Type localVarReturnType = new TypeToken<CancelPlacementsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call cancelPlacementsAsync(Map<String, ResourceId> requestBody, final ApiCallback<CancelPlacementsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = cancelPlacementsValidateBeforeCall(requestBody, _callback);
        Type localVarReturnType = new TypeToken<CancelPlacementsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIcancelPlacementsRequest {
        private final Map<String, ResourceId> requestBody;

        private APIcancelPlacementsRequest(Map<String, ResourceId> requestBody) {
            this.requestBody = requestBody;
        }

        /**
         * Build call for cancelPlacements
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The successfully cancelled placements along with any failures </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return cancelPlacementsCall(requestBody, _callback);
        }

        /**
         * Execute cancelPlacements request
         * @return CancelPlacementsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The successfully cancelled placements along with any failures </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public CancelPlacementsResponse execute() throws ApiException {
            ApiResponse<CancelPlacementsResponse> localVarResp = cancelPlacementsWithHttpInfo(requestBody);
            return localVarResp.getData();
        }

        /**
         * Execute cancelPlacements request with HTTP info returned
         * @return ApiResponse&lt;CancelPlacementsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The successfully cancelled placements along with any failures </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CancelPlacementsResponse> executeWithHttpInfo() throws ApiException {
            return cancelPlacementsWithHttpInfo(requestBody);
        }

        /**
         * Execute cancelPlacements request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The successfully cancelled placements along with any failures </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CancelPlacementsResponse> _callback) throws ApiException {
            return cancelPlacementsAsync(requestBody, _callback);
        }
    }

    /**
     * [EARLY ACCESS] CancelPlacements: Cancel existing placements
     * The response returns both the collection of successfully canceled placements, as well as those  that failed. For each failure, a reason is provided. It is important to check the failed set for  unsuccessful results.
     * @param requestBody The request containing the ids of the placements to be cancelled. (required)
     * @return APIcancelPlacementsRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The successfully cancelled placements along with any failures </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIcancelPlacementsRequest cancelPlacements(Map<String, ResourceId> requestBody) {
        return new APIcancelPlacementsRequest(requestBody);
    }
    private okhttp3.Call createOrdersCall(BlockAndOrdersCreateRequest blockAndOrdersCreateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = blockAndOrdersCreateRequest;

        // create path and map variables
        String localVarPath = "/api/ordermanagement/createorders";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createOrdersValidateBeforeCall(BlockAndOrdersCreateRequest blockAndOrdersCreateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'blockAndOrdersCreateRequest' is set
        if (blockAndOrdersCreateRequest == null) {
            throw new ApiException("Missing the required parameter 'blockAndOrdersCreateRequest' when calling createOrders(Async)");
        }

        return createOrdersCall(blockAndOrdersCreateRequest, _callback);

    }


    private ApiResponse<ResourceListOfBlockAndOrders> createOrdersWithHttpInfo(BlockAndOrdersCreateRequest blockAndOrdersCreateRequest) throws ApiException {
        okhttp3.Call localVarCall = createOrdersValidateBeforeCall(blockAndOrdersCreateRequest, null);
        Type localVarReturnType = new TypeToken<ResourceListOfBlockAndOrders>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createOrdersAsync(BlockAndOrdersCreateRequest blockAndOrdersCreateRequest, final ApiCallback<ResourceListOfBlockAndOrders> _callback) throws ApiException {

        okhttp3.Call localVarCall = createOrdersValidateBeforeCall(blockAndOrdersCreateRequest, _callback);
        Type localVarReturnType = new TypeToken<ResourceListOfBlockAndOrders>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIcreateOrdersRequest {
        private final BlockAndOrdersCreateRequest blockAndOrdersCreateRequest;

        private APIcreateOrdersRequest(BlockAndOrdersCreateRequest blockAndOrdersCreateRequest) {
            this.blockAndOrdersCreateRequest = blockAndOrdersCreateRequest;
        }

        /**
         * Build call for createOrders
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> A collection of block and associated orders. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return createOrdersCall(blockAndOrdersCreateRequest, _callback);
        }

        /**
         * Execute createOrders request
         * @return ResourceListOfBlockAndOrders
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> A collection of block and associated orders. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ResourceListOfBlockAndOrders execute() throws ApiException {
            ApiResponse<ResourceListOfBlockAndOrders> localVarResp = createOrdersWithHttpInfo(blockAndOrdersCreateRequest);
            return localVarResp.getData();
        }

        /**
         * Execute createOrders request with HTTP info returned
         * @return ApiResponse&lt;ResourceListOfBlockAndOrders&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> A collection of block and associated orders. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ResourceListOfBlockAndOrders> executeWithHttpInfo() throws ApiException {
            return createOrdersWithHttpInfo(blockAndOrdersCreateRequest);
        }

        /**
         * Execute createOrders request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> A collection of block and associated orders. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ResourceListOfBlockAndOrders> _callback) throws ApiException {
            return createOrdersAsync(blockAndOrdersCreateRequest, _callback);
        }
    }

    /**
     * [EARLY ACCESS] CreateOrders: Upsert a Block and associated orders
     * Upsert a Block and create associated orders.  This will fail if the block exists and already references orders with differing fields to the upsert request.
     * @param blockAndOrdersCreateRequest The collection of block and orders requests. (required)
     * @return APIcreateOrdersRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A collection of block and associated orders. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIcreateOrdersRequest createOrders(BlockAndOrdersCreateRequest blockAndOrdersCreateRequest) {
        return new APIcreateOrdersRequest(blockAndOrdersCreateRequest);
    }
    private okhttp3.Call moveOrdersCall(MoveOrdersToDifferentBlocksRequest moveOrdersToDifferentBlocksRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = moveOrdersToDifferentBlocksRequest;

        // create path and map variables
        String localVarPath = "/api/ordermanagement/moveorders";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call moveOrdersValidateBeforeCall(MoveOrdersToDifferentBlocksRequest moveOrdersToDifferentBlocksRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'moveOrdersToDifferentBlocksRequest' is set
        if (moveOrdersToDifferentBlocksRequest == null) {
            throw new ApiException("Missing the required parameter 'moveOrdersToDifferentBlocksRequest' when calling moveOrders(Async)");
        }

        return moveOrdersCall(moveOrdersToDifferentBlocksRequest, _callback);

    }


    private ApiResponse<ResourceListOfMovedOrderToDifferentBlockResponse> moveOrdersWithHttpInfo(MoveOrdersToDifferentBlocksRequest moveOrdersToDifferentBlocksRequest) throws ApiException {
        okhttp3.Call localVarCall = moveOrdersValidateBeforeCall(moveOrdersToDifferentBlocksRequest, null);
        Type localVarReturnType = new TypeToken<ResourceListOfMovedOrderToDifferentBlockResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call moveOrdersAsync(MoveOrdersToDifferentBlocksRequest moveOrdersToDifferentBlocksRequest, final ApiCallback<ResourceListOfMovedOrderToDifferentBlockResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = moveOrdersValidateBeforeCall(moveOrdersToDifferentBlocksRequest, _callback);
        Type localVarReturnType = new TypeToken<ResourceListOfMovedOrderToDifferentBlockResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APImoveOrdersRequest {
        private final MoveOrdersToDifferentBlocksRequest moveOrdersToDifferentBlocksRequest;

        private APImoveOrdersRequest(MoveOrdersToDifferentBlocksRequest moveOrdersToDifferentBlocksRequest) {
            this.moveOrdersToDifferentBlocksRequest = moveOrdersToDifferentBlocksRequest;
        }

        /**
         * Build call for moveOrders
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A collection of block and order pairs for each order moved into a block, and the Id of the order&#39;s previous block (if any). </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return moveOrdersCall(moveOrdersToDifferentBlocksRequest, _callback);
        }

        /**
         * Execute moveOrders request
         * @return ResourceListOfMovedOrderToDifferentBlockResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A collection of block and order pairs for each order moved into a block, and the Id of the order&#39;s previous block (if any). </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ResourceListOfMovedOrderToDifferentBlockResponse execute() throws ApiException {
            ApiResponse<ResourceListOfMovedOrderToDifferentBlockResponse> localVarResp = moveOrdersWithHttpInfo(moveOrdersToDifferentBlocksRequest);
            return localVarResp.getData();
        }

        /**
         * Execute moveOrders request with HTTP info returned
         * @return ApiResponse&lt;ResourceListOfMovedOrderToDifferentBlockResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A collection of block and order pairs for each order moved into a block, and the Id of the order&#39;s previous block (if any). </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ResourceListOfMovedOrderToDifferentBlockResponse> executeWithHttpInfo() throws ApiException {
            return moveOrdersWithHttpInfo(moveOrdersToDifferentBlocksRequest);
        }

        /**
         * Execute moveOrders request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A collection of block and order pairs for each order moved into a block, and the Id of the order&#39;s previous block (if any). </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ResourceListOfMovedOrderToDifferentBlockResponse> _callback) throws ApiException {
            return moveOrdersAsync(moveOrdersToDifferentBlocksRequest, _callback);
        }
    }

    /**
     * [EARLY ACCESS] MoveOrders: Move orders to new or existing block
     * Move an order to a block, creating the block if it does not already exist.   This will fail if the block exists and already references orders with differing fields to the upsert request.
     * @param moveOrdersToDifferentBlocksRequest The collection of order and destination block ids. (required)
     * @return APImoveOrdersRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A collection of block and order pairs for each order moved into a block, and the Id of the order&#39;s previous block (if any). </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APImoveOrdersRequest moveOrders(MoveOrdersToDifferentBlocksRequest moveOrdersToDifferentBlocksRequest) {
        return new APImoveOrdersRequest(moveOrdersToDifferentBlocksRequest);
    }
    private okhttp3.Call placeBlocksCall(PlaceBlocksRequest placeBlocksRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = placeBlocksRequest;

        // create path and map variables
        String localVarPath = "/api/ordermanagement/placeblocks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call placeBlocksValidateBeforeCall(PlaceBlocksRequest placeBlocksRequest, final ApiCallback _callback) throws ApiException {
        return placeBlocksCall(placeBlocksRequest, _callback);

    }


    private ApiResponse<ResourceListOfPlacement> placeBlocksWithHttpInfo(PlaceBlocksRequest placeBlocksRequest) throws ApiException {
        okhttp3.Call localVarCall = placeBlocksValidateBeforeCall(placeBlocksRequest, null);
        Type localVarReturnType = new TypeToken<ResourceListOfPlacement>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call placeBlocksAsync(PlaceBlocksRequest placeBlocksRequest, final ApiCallback<ResourceListOfPlacement> _callback) throws ApiException {

        okhttp3.Call localVarCall = placeBlocksValidateBeforeCall(placeBlocksRequest, _callback);
        Type localVarReturnType = new TypeToken<ResourceListOfPlacement>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIplaceBlocksRequest {
        private PlaceBlocksRequest placeBlocksRequest;

        private APIplaceBlocksRequest() {
        }

        /**
         * Set placeBlocksRequest
         * @param placeBlocksRequest The request containing the blocks to the placed. (optional)
         * @return APIplaceBlocksRequest
         */
        public APIplaceBlocksRequest placeBlocksRequest(PlaceBlocksRequest placeBlocksRequest) {
            this.placeBlocksRequest = placeBlocksRequest;
            return this;
        }

        /**
         * Build call for placeBlocks
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The block placements. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return placeBlocksCall(placeBlocksRequest, _callback);
        }

        /**
         * Execute placeBlocks request
         * @return ResourceListOfPlacement
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The block placements. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ResourceListOfPlacement execute() throws ApiException {
            ApiResponse<ResourceListOfPlacement> localVarResp = placeBlocksWithHttpInfo(placeBlocksRequest);
            return localVarResp.getData();
        }

        /**
         * Execute placeBlocks request with HTTP info returned
         * @return ApiResponse&lt;ResourceListOfPlacement&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The block placements. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ResourceListOfPlacement> executeWithHttpInfo() throws ApiException {
            return placeBlocksWithHttpInfo(placeBlocksRequest);
        }

        /**
         * Execute placeBlocks request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The block placements. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ResourceListOfPlacement> _callback) throws ApiException {
            return placeBlocksAsync(placeBlocksRequest, _callback);
        }
    }

    /**
     * [EARLY ACCESS] PlaceBlocks: Places blocks for a given list of placement requests.
     * The referenced block&#39;s existence will be verified.
     * @return APIplaceBlocksRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The block placements. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIplaceBlocksRequest placeBlocks() {
        return new APIplaceBlocksRequest();
    }
    private okhttp3.Call runAllocationServiceCall(List<ResourceId> resourceId, String allocationAlgorithm, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = resourceId;

        // create path and map variables
        String localVarPath = "/api/ordermanagement/allocate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (allocationAlgorithm != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("allocationAlgorithm", allocationAlgorithm));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call runAllocationServiceValidateBeforeCall(List<ResourceId> resourceId, String allocationAlgorithm, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceId' is set
        if (resourceId == null) {
            throw new ApiException("Missing the required parameter 'resourceId' when calling runAllocationService(Async)");
        }

        return runAllocationServiceCall(resourceId, allocationAlgorithm, _callback);

    }


    private ApiResponse<AllocationServiceRunResponse> runAllocationServiceWithHttpInfo(List<ResourceId> resourceId, String allocationAlgorithm) throws ApiException {
        okhttp3.Call localVarCall = runAllocationServiceValidateBeforeCall(resourceId, allocationAlgorithm, null);
        Type localVarReturnType = new TypeToken<AllocationServiceRunResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call runAllocationServiceAsync(List<ResourceId> resourceId, String allocationAlgorithm, final ApiCallback<AllocationServiceRunResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = runAllocationServiceValidateBeforeCall(resourceId, allocationAlgorithm, _callback);
        Type localVarReturnType = new TypeToken<AllocationServiceRunResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIrunAllocationServiceRequest {
        private final List<ResourceId> resourceId;
        private String allocationAlgorithm;

        private APIrunAllocationServiceRequest(List<ResourceId> resourceId) {
            this.resourceId = resourceId;
        }

        /**
         * Set allocationAlgorithm
         * @param allocationAlgorithm A string representation of the allocation algorithm you would like to use to allocate shares from executions e.g. \&quot;PR-FIFO\&quot;.  This defaults to \&quot;PR-FIFO\&quot;. (optional)
         * @return APIrunAllocationServiceRequest
         */
        public APIrunAllocationServiceRequest allocationAlgorithm(String allocationAlgorithm) {
            this.allocationAlgorithm = allocationAlgorithm;
            return this;
        }

        /**
         * Build call for runAllocationService
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The results from a run of the Allocation Service </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return runAllocationServiceCall(resourceId, allocationAlgorithm, _callback);
        }

        /**
         * Execute runAllocationService request
         * @return AllocationServiceRunResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The results from a run of the Allocation Service </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public AllocationServiceRunResponse execute() throws ApiException {
            ApiResponse<AllocationServiceRunResponse> localVarResp = runAllocationServiceWithHttpInfo(resourceId, allocationAlgorithm);
            return localVarResp.getData();
        }

        /**
         * Execute runAllocationService request with HTTP info returned
         * @return ApiResponse&lt;AllocationServiceRunResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The results from a run of the Allocation Service </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AllocationServiceRunResponse> executeWithHttpInfo() throws ApiException {
            return runAllocationServiceWithHttpInfo(resourceId, allocationAlgorithm);
        }

        /**
         * Execute runAllocationService request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The results from a run of the Allocation Service </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AllocationServiceRunResponse> _callback) throws ApiException {
            return runAllocationServiceAsync(resourceId, allocationAlgorithm, _callback);
        }
    }

    /**
     * [EXPERIMENTAL] RunAllocationService: Runs the Allocation Service
     * This will allocate executions for a given list of placements back to their originating orders.
     * @param resourceId The List of Placement IDs for which you wish to allocate executions. (required)
     * @return APIrunAllocationServiceRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The results from a run of the Allocation Service </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIrunAllocationServiceRequest runAllocationService(List<ResourceId> resourceId) {
        return new APIrunAllocationServiceRequest(resourceId);
    }
    private okhttp3.Call updateOrdersCall(Map<String, OrderUpdateRequest> requestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/api/ordermanagement/updateorders";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateOrdersValidateBeforeCall(Map<String, OrderUpdateRequest> requestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'requestBody' is set
        if (requestBody == null) {
            throw new ApiException("Missing the required parameter 'requestBody' when calling updateOrders(Async)");
        }

        return updateOrdersCall(requestBody, _callback);

    }


    private ApiResponse<UpdateOrdersResponse> updateOrdersWithHttpInfo(Map<String, OrderUpdateRequest> requestBody) throws ApiException {
        okhttp3.Call localVarCall = updateOrdersValidateBeforeCall(requestBody, null);
        Type localVarReturnType = new TypeToken<UpdateOrdersResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateOrdersAsync(Map<String, OrderUpdateRequest> requestBody, final ApiCallback<UpdateOrdersResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateOrdersValidateBeforeCall(requestBody, _callback);
        Type localVarReturnType = new TypeToken<UpdateOrdersResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIupdateOrdersRequest {
        private final Map<String, OrderUpdateRequest> requestBody;

        private APIupdateOrdersRequest(Map<String, OrderUpdateRequest> requestBody) {
            this.requestBody = requestBody;
        }

        /**
         * Build call for updateOrders
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The successfully updated orders along with any failures </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return updateOrdersCall(requestBody, _callback);
        }

        /**
         * Execute updateOrders request
         * @return UpdateOrdersResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The successfully updated orders along with any failures </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public UpdateOrdersResponse execute() throws ApiException {
            ApiResponse<UpdateOrdersResponse> localVarResp = updateOrdersWithHttpInfo(requestBody);
            return localVarResp.getData();
        }

        /**
         * Execute updateOrders request with HTTP info returned
         * @return ApiResponse&lt;UpdateOrdersResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The successfully updated orders along with any failures </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UpdateOrdersResponse> executeWithHttpInfo() throws ApiException {
            return updateOrdersWithHttpInfo(requestBody);
        }

        /**
         * Execute updateOrders request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The successfully updated orders along with any failures </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UpdateOrdersResponse> _callback) throws ApiException {
            return updateOrdersAsync(requestBody, _callback);
        }
    }

    /**
     * [EARLY ACCESS] UpdateOrders: Update existing orders
     * The response returns both the collection of successfully updated orders, as well as those  that failed. For each failure, a reason is provided. It is important to check the failed set for  unsuccessful results.
     * @param requestBody The request containing the orders to be updated. (required)
     * @return APIupdateOrdersRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The successfully updated orders along with any failures </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIupdateOrdersRequest updateOrders(Map<String, OrderUpdateRequest> requestBody) {
        return new APIupdateOrdersRequest(requestBody);
    }
    private okhttp3.Call updatePlacementsCall(Map<String, PlacementUpdateRequest> requestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/api/ordermanagement/$updateplacements";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updatePlacementsValidateBeforeCall(Map<String, PlacementUpdateRequest> requestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'requestBody' is set
        if (requestBody == null) {
            throw new ApiException("Missing the required parameter 'requestBody' when calling updatePlacements(Async)");
        }

        return updatePlacementsCall(requestBody, _callback);

    }


    private ApiResponse<UpdatePlacementsResponse> updatePlacementsWithHttpInfo(Map<String, PlacementUpdateRequest> requestBody) throws ApiException {
        okhttp3.Call localVarCall = updatePlacementsValidateBeforeCall(requestBody, null);
        Type localVarReturnType = new TypeToken<UpdatePlacementsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updatePlacementsAsync(Map<String, PlacementUpdateRequest> requestBody, final ApiCallback<UpdatePlacementsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updatePlacementsValidateBeforeCall(requestBody, _callback);
        Type localVarReturnType = new TypeToken<UpdatePlacementsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIupdatePlacementsRequest {
        private final Map<String, PlacementUpdateRequest> requestBody;

        private APIupdatePlacementsRequest(Map<String, PlacementUpdateRequest> requestBody) {
            this.requestBody = requestBody;
        }

        /**
         * Build call for updatePlacements
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The successfully updated placements along with any failures </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return updatePlacementsCall(requestBody, _callback);
        }

        /**
         * Execute updatePlacements request
         * @return UpdatePlacementsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The successfully updated placements along with any failures </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public UpdatePlacementsResponse execute() throws ApiException {
            ApiResponse<UpdatePlacementsResponse> localVarResp = updatePlacementsWithHttpInfo(requestBody);
            return localVarResp.getData();
        }

        /**
         * Execute updatePlacements request with HTTP info returned
         * @return ApiResponse&lt;UpdatePlacementsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The successfully updated placements along with any failures </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UpdatePlacementsResponse> executeWithHttpInfo() throws ApiException {
            return updatePlacementsWithHttpInfo(requestBody);
        }

        /**
         * Execute updatePlacements request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The successfully updated placements along with any failures </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UpdatePlacementsResponse> _callback) throws ApiException {
            return updatePlacementsAsync(requestBody, _callback);
        }
    }

    /**
     * [EARLY ACCESS] UpdatePlacements: Update existing placements
     * The response returns both the collection of successfully updated placements, as well as those  that failed. For each failure, a reason is provided. It is important to check the failed set for  unsuccessful results.
     * @param requestBody The request containing the placements to be updated. (required)
     * @return APIupdatePlacementsRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The successfully updated placements along with any failures </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIupdatePlacementsRequest updatePlacements(Map<String, PlacementUpdateRequest> requestBody) {
        return new APIupdatePlacementsRequest(requestBody);
    }
}
