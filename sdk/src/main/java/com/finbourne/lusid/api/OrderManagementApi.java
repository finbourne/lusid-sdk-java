/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.api;

import com.finbourne.lusid.ApiCallback;
import com.finbourne.lusid.ApiClient;
import com.finbourne.lusid.ApiException;
import com.finbourne.lusid.ApiResponse;
import com.finbourne.lusid.Configuration;
import com.finbourne.lusid.Pair;
import com.finbourne.lusid.ProgressRequestBody;
import com.finbourne.lusid.ProgressResponseBody;
import com.finbourne.lusid.extensions.ConfigurationOptions;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.finbourne.lusid.model.AllocationServiceRunResponse;
import com.finbourne.lusid.model.BlockAndOrdersCreateRequest;
import com.finbourne.lusid.model.BookTransactionsRequest;
import com.finbourne.lusid.model.BookTransactionsResponse;
import com.finbourne.lusid.model.CancelOrdersAndMoveRemainingRequest;
import com.finbourne.lusid.model.CancelOrdersAndMoveRemainingResponse;
import com.finbourne.lusid.model.CancelOrdersResponse;
import com.finbourne.lusid.model.CancelPlacementsResponse;
import com.finbourne.lusid.model.LusidProblemDetails;
import com.finbourne.lusid.model.LusidValidationProblemDetails;
import com.finbourne.lusid.model.MoveOrdersToDifferentBlocksRequest;
import java.time.OffsetDateTime;
import com.finbourne.lusid.model.OrderUpdateRequest;
import com.finbourne.lusid.model.PlaceBlocksRequest;
import com.finbourne.lusid.model.PlacementUpdateRequest;
import com.finbourne.lusid.model.ResourceId;
import com.finbourne.lusid.model.ResourceListOfBlockAndOrders;
import com.finbourne.lusid.model.ResourceListOfChangeIntervalWithOrderManagementDetail;
import com.finbourne.lusid.model.ResourceListOfMovedOrderToDifferentBlockResponse;
import com.finbourne.lusid.model.ResourceListOfPlacement;
import com.finbourne.lusid.model.UpdateOrdersResponse;
import com.finbourne.lusid.model.UpdatePlacementsResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class OrderManagementApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public OrderManagementApi() {
        this(Configuration.getDefaultApiClient());
    }

    public OrderManagementApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call bookTransactionsCall(BookTransactionsRequest bookTransactionsRequest, Boolean applyFeesAndCommission, Boolean markOrdersAndAllocationsAsBooked, Boolean usePreviewTransactionsForPricing, final ApiCallback _callback) throws ApiException {
        return bookTransactionsCall(bookTransactionsRequest, applyFeesAndCommission, markOrdersAndAllocationsAsBooked, usePreviewTransactionsForPricing,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call bookTransactionsCall(BookTransactionsRequest bookTransactionsRequest, Boolean applyFeesAndCommission, Boolean markOrdersAndAllocationsAsBooked, Boolean usePreviewTransactionsForPricing, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = bookTransactionsRequest;

        // create path and map variables
        String localVarPath = "/api/ordermanagement/booktransactions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (applyFeesAndCommission != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("applyFeesAndCommission", applyFeesAndCommission));
        }

        if (markOrdersAndAllocationsAsBooked != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("markOrdersAndAllocationsAsBooked", markOrdersAndAllocationsAsBooked));
        }

        if (usePreviewTransactionsForPricing != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("usePreviewTransactionsForPricing", usePreviewTransactionsForPricing));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call bookTransactionsValidateBeforeCall(BookTransactionsRequest bookTransactionsRequest, Boolean applyFeesAndCommission, Boolean markOrdersAndAllocationsAsBooked, Boolean usePreviewTransactionsForPricing, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'bookTransactionsRequest' is set
        if (bookTransactionsRequest == null) {
            throw new ApiException("Missing the required parameter 'bookTransactionsRequest' when calling bookTransactions(Async)");
        }

        return bookTransactionsCall(bookTransactionsRequest, applyFeesAndCommission, markOrdersAndAllocationsAsBooked, usePreviewTransactionsForPricing, _callback, opts);

    }


    private ApiResponse<BookTransactionsResponse> bookTransactionsWithHttpInfo(BookTransactionsRequest bookTransactionsRequest, Boolean applyFeesAndCommission, Boolean markOrdersAndAllocationsAsBooked, Boolean usePreviewTransactionsForPricing) throws ApiException {
        okhttp3.Call localVarCall = bookTransactionsValidateBeforeCall(bookTransactionsRequest, applyFeesAndCommission, markOrdersAndAllocationsAsBooked, usePreviewTransactionsForPricing, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<BookTransactionsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<BookTransactionsResponse> bookTransactionsWithHttpInfo(BookTransactionsRequest bookTransactionsRequest, Boolean applyFeesAndCommission, Boolean markOrdersAndAllocationsAsBooked, Boolean usePreviewTransactionsForPricing, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = bookTransactionsValidateBeforeCall(bookTransactionsRequest, applyFeesAndCommission, markOrdersAndAllocationsAsBooked, usePreviewTransactionsForPricing, null, opts);
        Type localVarReturnType = new TypeToken<BookTransactionsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call bookTransactionsAsync(BookTransactionsRequest bookTransactionsRequest, Boolean applyFeesAndCommission, Boolean markOrdersAndAllocationsAsBooked, Boolean usePreviewTransactionsForPricing, final ApiCallback<BookTransactionsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = bookTransactionsValidateBeforeCall(bookTransactionsRequest, applyFeesAndCommission, markOrdersAndAllocationsAsBooked, usePreviewTransactionsForPricing, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<BookTransactionsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call bookTransactionsAsync(BookTransactionsRequest bookTransactionsRequest, Boolean applyFeesAndCommission, Boolean markOrdersAndAllocationsAsBooked, Boolean usePreviewTransactionsForPricing, final ApiCallback<BookTransactionsResponse> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = bookTransactionsValidateBeforeCall(bookTransactionsRequest, applyFeesAndCommission, markOrdersAndAllocationsAsBooked, usePreviewTransactionsForPricing, _callback, opts);
        Type localVarReturnType = new TypeToken<BookTransactionsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIbookTransactionsRequest {
        private final BookTransactionsRequest bookTransactionsRequest;
        private Boolean applyFeesAndCommission;
        private Boolean markOrdersAndAllocationsAsBooked;
        private Boolean usePreviewTransactionsForPricing;

        private APIbookTransactionsRequest(BookTransactionsRequest bookTransactionsRequest) {
            this.bookTransactionsRequest = bookTransactionsRequest;
        }

        /**
         * Set applyFeesAndCommission
         * @param applyFeesAndCommission Whether to apply fees and commissions to transactions (default: true) (optional, default to true)
         * @return APIbookTransactionsRequest
         */
        public APIbookTransactionsRequest applyFeesAndCommission(Boolean applyFeesAndCommission) {
            this.applyFeesAndCommission = applyFeesAndCommission;
            return this;
        }

        /**
         * Set markOrdersAndAllocationsAsBooked
         * @param markOrdersAndAllocationsAsBooked Whether to mark allocations and fully-booked orders with state Booked (optional, default to false)
         * @return APIbookTransactionsRequest
         */
        public APIbookTransactionsRequest markOrdersAndAllocationsAsBooked(Boolean markOrdersAndAllocationsAsBooked) {
            this.markOrdersAndAllocationsAsBooked = markOrdersAndAllocationsAsBooked;
            return this;
        }

        /**
         * Set usePreviewTransactionsForPricing
         * @param usePreviewTransactionsForPricing Whether to use calculators for the transaction type to work out pricing fields on the booked transactions (optional, default to false)
         * @return APIbookTransactionsRequest
         */
        public APIbookTransactionsRequest usePreviewTransactionsForPricing(Boolean usePreviewTransactionsForPricing) {
            this.usePreviewTransactionsForPricing = usePreviewTransactionsForPricing;
            return this;
        }

        /**
         * Build call for bookTransactions
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The results from booking transactions from allocations </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return bookTransactionsCall(bookTransactionsRequest, applyFeesAndCommission, markOrdersAndAllocationsAsBooked, usePreviewTransactionsForPricing, _callback);
        }

        /**
         * Execute bookTransactions request
         * @return BookTransactionsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The results from booking transactions from allocations </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public BookTransactionsResponse execute() throws ApiException {
            ApiResponse<BookTransactionsResponse> localVarResp = bookTransactionsWithHttpInfo(bookTransactionsRequest, applyFeesAndCommission, markOrdersAndAllocationsAsBooked, usePreviewTransactionsForPricing);
            return localVarResp.getData();
        }

        /**
         * Execute bookTransactions request. Use any specified configuration options to override any other configuration for this request only.
         * @return BookTransactionsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The results from booking transactions from allocations </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public BookTransactionsResponse execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<BookTransactionsResponse> localVarResp = bookTransactionsWithHttpInfo(bookTransactionsRequest, applyFeesAndCommission, markOrdersAndAllocationsAsBooked, usePreviewTransactionsForPricing, opts);
            return localVarResp.getData();
        }

        /**
         * Execute bookTransactions request with HTTP info returned
         * @return ApiResponse&lt;BookTransactionsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The results from booking transactions from allocations </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<BookTransactionsResponse> executeWithHttpInfo() throws ApiException {
            return bookTransactionsWithHttpInfo(bookTransactionsRequest, applyFeesAndCommission, markOrdersAndAllocationsAsBooked, usePreviewTransactionsForPricing);
        }

        /**
         * Execute bookTransactions request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;BookTransactionsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The results from booking transactions from allocations </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<BookTransactionsResponse> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return bookTransactionsWithHttpInfo(bookTransactionsRequest, applyFeesAndCommission, markOrdersAndAllocationsAsBooked, usePreviewTransactionsForPricing, opts);
        }

        /**
         * Execute bookTransactions request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The results from booking transactions from allocations </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<BookTransactionsResponse> _callback) throws ApiException {
            return bookTransactionsAsync(bookTransactionsRequest, applyFeesAndCommission, markOrdersAndAllocationsAsBooked, usePreviewTransactionsForPricing, _callback);
        }

        /**
         * Execute bookTransactions request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The results from booking transactions from allocations </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<BookTransactionsResponse> _callback, ConfigurationOptions opts) throws ApiException {
            return bookTransactionsAsync(bookTransactionsRequest, applyFeesAndCommission, markOrdersAndAllocationsAsBooked, usePreviewTransactionsForPricing, _callback, opts);
        }
    }

    /**
     * [EXPERIMENTAL] BookTransactions: Books transactions using specific allocations as a source.
     * Takes a collection of allocation IDs, and maps fields from those allocations and related orders onto new transactions.
     * @param bookTransactionsRequest The allocations to create transactions for (required)
     * @return APIbookTransactionsRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The results from booking transactions from allocations </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIbookTransactionsRequest bookTransactions(BookTransactionsRequest bookTransactionsRequest) {
        return new APIbookTransactionsRequest(bookTransactionsRequest);
    }
    private okhttp3.Call cancelOrdersCall(Map<String, ResourceId> requestBody, final ApiCallback _callback) throws ApiException {
        return cancelOrdersCall(requestBody,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call cancelOrdersCall(Map<String, ResourceId> requestBody, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/api/ordermanagement/cancelorders";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cancelOrdersValidateBeforeCall(Map<String, ResourceId> requestBody, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'requestBody' is set
        if (requestBody == null) {
            throw new ApiException("Missing the required parameter 'requestBody' when calling cancelOrders(Async)");
        }

        return cancelOrdersCall(requestBody, _callback, opts);

    }


    private ApiResponse<CancelOrdersResponse> cancelOrdersWithHttpInfo(Map<String, ResourceId> requestBody) throws ApiException {
        okhttp3.Call localVarCall = cancelOrdersValidateBeforeCall(requestBody, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<CancelOrdersResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<CancelOrdersResponse> cancelOrdersWithHttpInfo(Map<String, ResourceId> requestBody, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = cancelOrdersValidateBeforeCall(requestBody, null, opts);
        Type localVarReturnType = new TypeToken<CancelOrdersResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call cancelOrdersAsync(Map<String, ResourceId> requestBody, final ApiCallback<CancelOrdersResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = cancelOrdersValidateBeforeCall(requestBody, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<CancelOrdersResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call cancelOrdersAsync(Map<String, ResourceId> requestBody, final ApiCallback<CancelOrdersResponse> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = cancelOrdersValidateBeforeCall(requestBody, _callback, opts);
        Type localVarReturnType = new TypeToken<CancelOrdersResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIcancelOrdersRequest {
        private final Map<String, ResourceId> requestBody;

        private APIcancelOrdersRequest(Map<String, ResourceId> requestBody) {
            this.requestBody = requestBody;
        }

        /**
         * Build call for cancelOrders
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The successfully cancelled orders along with any failures </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return cancelOrdersCall(requestBody, _callback);
        }

        /**
         * Execute cancelOrders request
         * @return CancelOrdersResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The successfully cancelled orders along with any failures </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public CancelOrdersResponse execute() throws ApiException {
            ApiResponse<CancelOrdersResponse> localVarResp = cancelOrdersWithHttpInfo(requestBody);
            return localVarResp.getData();
        }

        /**
         * Execute cancelOrders request. Use any specified configuration options to override any other configuration for this request only.
         * @return CancelOrdersResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The successfully cancelled orders along with any failures </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public CancelOrdersResponse execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<CancelOrdersResponse> localVarResp = cancelOrdersWithHttpInfo(requestBody, opts);
            return localVarResp.getData();
        }

        /**
         * Execute cancelOrders request with HTTP info returned
         * @return ApiResponse&lt;CancelOrdersResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The successfully cancelled orders along with any failures </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CancelOrdersResponse> executeWithHttpInfo() throws ApiException {
            return cancelOrdersWithHttpInfo(requestBody);
        }

        /**
         * Execute cancelOrders request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;CancelOrdersResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The successfully cancelled orders along with any failures </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CancelOrdersResponse> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return cancelOrdersWithHttpInfo(requestBody, opts);
        }

        /**
         * Execute cancelOrders request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The successfully cancelled orders along with any failures </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CancelOrdersResponse> _callback) throws ApiException {
            return cancelOrdersAsync(requestBody, _callback);
        }

        /**
         * Execute cancelOrders request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The successfully cancelled orders along with any failures </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CancelOrdersResponse> _callback, ConfigurationOptions opts) throws ApiException {
            return cancelOrdersAsync(requestBody, _callback, opts);
        }
    }

    /**
     * [EARLY ACCESS] CancelOrders: Cancel existing orders
     * The response returns both the collection of successfully canceled orders, as well as those  that failed. For each failure, a reason is provided. It is important to check the failed set for  unsuccessful results.
     * @param requestBody The request containing the ids of the orders to be cancelled. (required)
     * @return APIcancelOrdersRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The successfully cancelled orders along with any failures </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIcancelOrdersRequest cancelOrders(Map<String, ResourceId> requestBody) {
        return new APIcancelOrdersRequest(requestBody);
    }
    private okhttp3.Call cancelOrdersAndMoveRemainingCall(Map<String, CancelOrdersAndMoveRemainingRequest> requestBody, final ApiCallback _callback) throws ApiException {
        return cancelOrdersAndMoveRemainingCall(requestBody,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call cancelOrdersAndMoveRemainingCall(Map<String, CancelOrdersAndMoveRemainingRequest> requestBody, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/api/ordermanagement/cancelordersandmoveremaining";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cancelOrdersAndMoveRemainingValidateBeforeCall(Map<String, CancelOrdersAndMoveRemainingRequest> requestBody, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'requestBody' is set
        if (requestBody == null) {
            throw new ApiException("Missing the required parameter 'requestBody' when calling cancelOrdersAndMoveRemaining(Async)");
        }

        return cancelOrdersAndMoveRemainingCall(requestBody, _callback, opts);

    }


    private ApiResponse<CancelOrdersAndMoveRemainingResponse> cancelOrdersAndMoveRemainingWithHttpInfo(Map<String, CancelOrdersAndMoveRemainingRequest> requestBody) throws ApiException {
        okhttp3.Call localVarCall = cancelOrdersAndMoveRemainingValidateBeforeCall(requestBody, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<CancelOrdersAndMoveRemainingResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<CancelOrdersAndMoveRemainingResponse> cancelOrdersAndMoveRemainingWithHttpInfo(Map<String, CancelOrdersAndMoveRemainingRequest> requestBody, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = cancelOrdersAndMoveRemainingValidateBeforeCall(requestBody, null, opts);
        Type localVarReturnType = new TypeToken<CancelOrdersAndMoveRemainingResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call cancelOrdersAndMoveRemainingAsync(Map<String, CancelOrdersAndMoveRemainingRequest> requestBody, final ApiCallback<CancelOrdersAndMoveRemainingResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = cancelOrdersAndMoveRemainingValidateBeforeCall(requestBody, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<CancelOrdersAndMoveRemainingResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call cancelOrdersAndMoveRemainingAsync(Map<String, CancelOrdersAndMoveRemainingRequest> requestBody, final ApiCallback<CancelOrdersAndMoveRemainingResponse> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = cancelOrdersAndMoveRemainingValidateBeforeCall(requestBody, _callback, opts);
        Type localVarReturnType = new TypeToken<CancelOrdersAndMoveRemainingResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIcancelOrdersAndMoveRemainingRequest {
        private final Map<String, CancelOrdersAndMoveRemainingRequest> requestBody;

        private APIcancelOrdersAndMoveRemainingRequest(Map<String, CancelOrdersAndMoveRemainingRequest> requestBody) {
            this.requestBody = requestBody;
        }

        /**
         * Build call for cancelOrdersAndMoveRemaining
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The successfully cancelled and moved orders, along with any failures </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return cancelOrdersAndMoveRemainingCall(requestBody, _callback);
        }

        /**
         * Execute cancelOrdersAndMoveRemaining request
         * @return CancelOrdersAndMoveRemainingResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The successfully cancelled and moved orders, along with any failures </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public CancelOrdersAndMoveRemainingResponse execute() throws ApiException {
            ApiResponse<CancelOrdersAndMoveRemainingResponse> localVarResp = cancelOrdersAndMoveRemainingWithHttpInfo(requestBody);
            return localVarResp.getData();
        }

        /**
         * Execute cancelOrdersAndMoveRemaining request. Use any specified configuration options to override any other configuration for this request only.
         * @return CancelOrdersAndMoveRemainingResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The successfully cancelled and moved orders, along with any failures </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public CancelOrdersAndMoveRemainingResponse execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<CancelOrdersAndMoveRemainingResponse> localVarResp = cancelOrdersAndMoveRemainingWithHttpInfo(requestBody, opts);
            return localVarResp.getData();
        }

        /**
         * Execute cancelOrdersAndMoveRemaining request with HTTP info returned
         * @return ApiResponse&lt;CancelOrdersAndMoveRemainingResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The successfully cancelled and moved orders, along with any failures </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CancelOrdersAndMoveRemainingResponse> executeWithHttpInfo() throws ApiException {
            return cancelOrdersAndMoveRemainingWithHttpInfo(requestBody);
        }

        /**
         * Execute cancelOrdersAndMoveRemaining request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;CancelOrdersAndMoveRemainingResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The successfully cancelled and moved orders, along with any failures </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CancelOrdersAndMoveRemainingResponse> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return cancelOrdersAndMoveRemainingWithHttpInfo(requestBody, opts);
        }

        /**
         * Execute cancelOrdersAndMoveRemaining request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The successfully cancelled and moved orders, along with any failures </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CancelOrdersAndMoveRemainingResponse> _callback) throws ApiException {
            return cancelOrdersAndMoveRemainingAsync(requestBody, _callback);
        }

        /**
         * Execute cancelOrdersAndMoveRemaining request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The successfully cancelled and moved orders, along with any failures </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CancelOrdersAndMoveRemainingResponse> _callback, ConfigurationOptions opts) throws ApiException {
            return cancelOrdersAndMoveRemainingAsync(requestBody, _callback, opts);
        }
    }

    /**
     * [EARLY ACCESS] CancelOrdersAndMoveRemaining: Cancel existing orders and move any unplaced quantities to new orders in new blocks
     * Cancels existing orders, reducing their quantities to those aleady placed. Any remaining quantities are moved  to new orders in new blocks. The placed quantities are distributed to the cancelled orders on a pro-rata basis.
     * @param requestBody The request containing the orders to be cancelled, and the destinations of remaining quantities. (required)
     * @return APIcancelOrdersAndMoveRemainingRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The successfully cancelled and moved orders, along with any failures </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIcancelOrdersAndMoveRemainingRequest cancelOrdersAndMoveRemaining(Map<String, CancelOrdersAndMoveRemainingRequest> requestBody) {
        return new APIcancelOrdersAndMoveRemainingRequest(requestBody);
    }
    private okhttp3.Call cancelPlacementsCall(Map<String, ResourceId> requestBody, final ApiCallback _callback) throws ApiException {
        return cancelPlacementsCall(requestBody,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call cancelPlacementsCall(Map<String, ResourceId> requestBody, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/api/ordermanagement/$cancelplacements";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cancelPlacementsValidateBeforeCall(Map<String, ResourceId> requestBody, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'requestBody' is set
        if (requestBody == null) {
            throw new ApiException("Missing the required parameter 'requestBody' when calling cancelPlacements(Async)");
        }

        return cancelPlacementsCall(requestBody, _callback, opts);

    }


    private ApiResponse<CancelPlacementsResponse> cancelPlacementsWithHttpInfo(Map<String, ResourceId> requestBody) throws ApiException {
        okhttp3.Call localVarCall = cancelPlacementsValidateBeforeCall(requestBody, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<CancelPlacementsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<CancelPlacementsResponse> cancelPlacementsWithHttpInfo(Map<String, ResourceId> requestBody, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = cancelPlacementsValidateBeforeCall(requestBody, null, opts);
        Type localVarReturnType = new TypeToken<CancelPlacementsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call cancelPlacementsAsync(Map<String, ResourceId> requestBody, final ApiCallback<CancelPlacementsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = cancelPlacementsValidateBeforeCall(requestBody, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<CancelPlacementsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call cancelPlacementsAsync(Map<String, ResourceId> requestBody, final ApiCallback<CancelPlacementsResponse> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = cancelPlacementsValidateBeforeCall(requestBody, _callback, opts);
        Type localVarReturnType = new TypeToken<CancelPlacementsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIcancelPlacementsRequest {
        private final Map<String, ResourceId> requestBody;

        private APIcancelPlacementsRequest(Map<String, ResourceId> requestBody) {
            this.requestBody = requestBody;
        }

        /**
         * Build call for cancelPlacements
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The successfully cancelled placements along with any failures </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return cancelPlacementsCall(requestBody, _callback);
        }

        /**
         * Execute cancelPlacements request
         * @return CancelPlacementsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The successfully cancelled placements along with any failures </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public CancelPlacementsResponse execute() throws ApiException {
            ApiResponse<CancelPlacementsResponse> localVarResp = cancelPlacementsWithHttpInfo(requestBody);
            return localVarResp.getData();
        }

        /**
         * Execute cancelPlacements request. Use any specified configuration options to override any other configuration for this request only.
         * @return CancelPlacementsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The successfully cancelled placements along with any failures </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public CancelPlacementsResponse execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<CancelPlacementsResponse> localVarResp = cancelPlacementsWithHttpInfo(requestBody, opts);
            return localVarResp.getData();
        }

        /**
         * Execute cancelPlacements request with HTTP info returned
         * @return ApiResponse&lt;CancelPlacementsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The successfully cancelled placements along with any failures </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CancelPlacementsResponse> executeWithHttpInfo() throws ApiException {
            return cancelPlacementsWithHttpInfo(requestBody);
        }

        /**
         * Execute cancelPlacements request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;CancelPlacementsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The successfully cancelled placements along with any failures </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CancelPlacementsResponse> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return cancelPlacementsWithHttpInfo(requestBody, opts);
        }

        /**
         * Execute cancelPlacements request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The successfully cancelled placements along with any failures </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CancelPlacementsResponse> _callback) throws ApiException {
            return cancelPlacementsAsync(requestBody, _callback);
        }

        /**
         * Execute cancelPlacements request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The successfully cancelled placements along with any failures </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CancelPlacementsResponse> _callback, ConfigurationOptions opts) throws ApiException {
            return cancelPlacementsAsync(requestBody, _callback, opts);
        }
    }

    /**
     * [EARLY ACCESS] CancelPlacements: Cancel existing placements
     * The response returns both the collection of successfully canceled placements, as well as those  that failed. For each failure, a reason is provided. It is important to check the failed set for  unsuccessful results.
     * @param requestBody The request containing the ids of the placements to be cancelled. (required)
     * @return APIcancelPlacementsRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The successfully cancelled placements along with any failures </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIcancelPlacementsRequest cancelPlacements(Map<String, ResourceId> requestBody) {
        return new APIcancelPlacementsRequest(requestBody);
    }
    private okhttp3.Call createOrdersCall(BlockAndOrdersCreateRequest blockAndOrdersCreateRequest, final ApiCallback _callback) throws ApiException {
        return createOrdersCall(blockAndOrdersCreateRequest,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call createOrdersCall(BlockAndOrdersCreateRequest blockAndOrdersCreateRequest, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = blockAndOrdersCreateRequest;

        // create path and map variables
        String localVarPath = "/api/ordermanagement/createorders";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createOrdersValidateBeforeCall(BlockAndOrdersCreateRequest blockAndOrdersCreateRequest, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'blockAndOrdersCreateRequest' is set
        if (blockAndOrdersCreateRequest == null) {
            throw new ApiException("Missing the required parameter 'blockAndOrdersCreateRequest' when calling createOrders(Async)");
        }

        return createOrdersCall(blockAndOrdersCreateRequest, _callback, opts);

    }


    private ApiResponse<ResourceListOfBlockAndOrders> createOrdersWithHttpInfo(BlockAndOrdersCreateRequest blockAndOrdersCreateRequest) throws ApiException {
        okhttp3.Call localVarCall = createOrdersValidateBeforeCall(blockAndOrdersCreateRequest, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<ResourceListOfBlockAndOrders>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<ResourceListOfBlockAndOrders> createOrdersWithHttpInfo(BlockAndOrdersCreateRequest blockAndOrdersCreateRequest, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = createOrdersValidateBeforeCall(blockAndOrdersCreateRequest, null, opts);
        Type localVarReturnType = new TypeToken<ResourceListOfBlockAndOrders>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createOrdersAsync(BlockAndOrdersCreateRequest blockAndOrdersCreateRequest, final ApiCallback<ResourceListOfBlockAndOrders> _callback) throws ApiException {

        okhttp3.Call localVarCall = createOrdersValidateBeforeCall(blockAndOrdersCreateRequest, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<ResourceListOfBlockAndOrders>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call createOrdersAsync(BlockAndOrdersCreateRequest blockAndOrdersCreateRequest, final ApiCallback<ResourceListOfBlockAndOrders> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = createOrdersValidateBeforeCall(blockAndOrdersCreateRequest, _callback, opts);
        Type localVarReturnType = new TypeToken<ResourceListOfBlockAndOrders>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIcreateOrdersRequest {
        private final BlockAndOrdersCreateRequest blockAndOrdersCreateRequest;

        private APIcreateOrdersRequest(BlockAndOrdersCreateRequest blockAndOrdersCreateRequest) {
            this.blockAndOrdersCreateRequest = blockAndOrdersCreateRequest;
        }

        /**
         * Build call for createOrders
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> A collection of block and associated orders. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return createOrdersCall(blockAndOrdersCreateRequest, _callback);
        }

        /**
         * Execute createOrders request
         * @return ResourceListOfBlockAndOrders
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> A collection of block and associated orders. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ResourceListOfBlockAndOrders execute() throws ApiException {
            ApiResponse<ResourceListOfBlockAndOrders> localVarResp = createOrdersWithHttpInfo(blockAndOrdersCreateRequest);
            return localVarResp.getData();
        }

        /**
         * Execute createOrders request. Use any specified configuration options to override any other configuration for this request only.
         * @return ResourceListOfBlockAndOrders
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> A collection of block and associated orders. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ResourceListOfBlockAndOrders execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<ResourceListOfBlockAndOrders> localVarResp = createOrdersWithHttpInfo(blockAndOrdersCreateRequest, opts);
            return localVarResp.getData();
        }

        /**
         * Execute createOrders request with HTTP info returned
         * @return ApiResponse&lt;ResourceListOfBlockAndOrders&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> A collection of block and associated orders. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ResourceListOfBlockAndOrders> executeWithHttpInfo() throws ApiException {
            return createOrdersWithHttpInfo(blockAndOrdersCreateRequest);
        }

        /**
         * Execute createOrders request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;ResourceListOfBlockAndOrders&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> A collection of block and associated orders. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ResourceListOfBlockAndOrders> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return createOrdersWithHttpInfo(blockAndOrdersCreateRequest, opts);
        }

        /**
         * Execute createOrders request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> A collection of block and associated orders. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ResourceListOfBlockAndOrders> _callback) throws ApiException {
            return createOrdersAsync(blockAndOrdersCreateRequest, _callback);
        }

        /**
         * Execute createOrders request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> A collection of block and associated orders. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ResourceListOfBlockAndOrders> _callback, ConfigurationOptions opts) throws ApiException {
            return createOrdersAsync(blockAndOrdersCreateRequest, _callback, opts);
        }
    }

    /**
     * [EARLY ACCESS] CreateOrders: Upsert a Block and associated orders
     * Upsert a Block and create associated orders.  This will fail if the block exists and already references orders with differing fields to the upsert request.
     * @param blockAndOrdersCreateRequest The collection of block and orders requests. (required)
     * @return APIcreateOrdersRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A collection of block and associated orders. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIcreateOrdersRequest createOrders(BlockAndOrdersCreateRequest blockAndOrdersCreateRequest) {
        return new APIcreateOrdersRequest(blockAndOrdersCreateRequest);
    }
    private okhttp3.Call getOrderHistoryCall(String scope, String code, OffsetDateTime asAt, final ApiCallback _callback) throws ApiException {
        return getOrderHistoryCall(scope, code, asAt,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call getOrderHistoryCall(String scope, String code, OffsetDateTime asAt, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/ordermanagement/order/{scope}/{code}/$history"
            .replace("{" + "scope" + "}", localVarApiClient.escapeString(scope.toString()))
            .replace("{" + "code" + "}", localVarApiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (asAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asAt", asAt));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrderHistoryValidateBeforeCall(String scope, String code, OffsetDateTime asAt, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling getOrderHistory(Async)");
        }

        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling getOrderHistory(Async)");
        }

        return getOrderHistoryCall(scope, code, asAt, _callback, opts);

    }


    private ApiResponse<ResourceListOfChangeIntervalWithOrderManagementDetail> getOrderHistoryWithHttpInfo(String scope, String code, OffsetDateTime asAt) throws ApiException {
        okhttp3.Call localVarCall = getOrderHistoryValidateBeforeCall(scope, code, asAt, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<ResourceListOfChangeIntervalWithOrderManagementDetail>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<ResourceListOfChangeIntervalWithOrderManagementDetail> getOrderHistoryWithHttpInfo(String scope, String code, OffsetDateTime asAt, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = getOrderHistoryValidateBeforeCall(scope, code, asAt, null, opts);
        Type localVarReturnType = new TypeToken<ResourceListOfChangeIntervalWithOrderManagementDetail>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getOrderHistoryAsync(String scope, String code, OffsetDateTime asAt, final ApiCallback<ResourceListOfChangeIntervalWithOrderManagementDetail> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrderHistoryValidateBeforeCall(scope, code, asAt, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<ResourceListOfChangeIntervalWithOrderManagementDetail>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call getOrderHistoryAsync(String scope, String code, OffsetDateTime asAt, final ApiCallback<ResourceListOfChangeIntervalWithOrderManagementDetail> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = getOrderHistoryValidateBeforeCall(scope, code, asAt, _callback, opts);
        Type localVarReturnType = new TypeToken<ResourceListOfChangeIntervalWithOrderManagementDetail>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetOrderHistoryRequest {
        private final String scope;
        private final String code;
        private OffsetDateTime asAt;

        private APIgetOrderHistoryRequest(String scope, String code) {
            this.scope = scope;
            this.code = code;
        }

        /**
         * Set asAt
         * @param asAt The asAt datetime at which to retrieve the history of the order and related entities. Defaults   to return the latest version if not specified. (optional)
         * @return APIgetOrderHistoryRequest
         */
        public APIgetOrderHistoryRequest asAt(OffsetDateTime asAt) {
            this.asAt = asAt;
            return this;
        }

        /**
         * Build call for getOrderHistory
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The history of the specified order and related entities (changes that have been made to it). </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Order not found. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getOrderHistoryCall(scope, code, asAt, _callback);
        }

        /**
         * Execute getOrderHistory request
         * @return ResourceListOfChangeIntervalWithOrderManagementDetail
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The history of the specified order and related entities (changes that have been made to it). </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Order not found. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ResourceListOfChangeIntervalWithOrderManagementDetail execute() throws ApiException {
            ApiResponse<ResourceListOfChangeIntervalWithOrderManagementDetail> localVarResp = getOrderHistoryWithHttpInfo(scope, code, asAt);
            return localVarResp.getData();
        }

        /**
         * Execute getOrderHistory request. Use any specified configuration options to override any other configuration for this request only.
         * @return ResourceListOfChangeIntervalWithOrderManagementDetail
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The history of the specified order and related entities (changes that have been made to it). </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Order not found. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ResourceListOfChangeIntervalWithOrderManagementDetail execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<ResourceListOfChangeIntervalWithOrderManagementDetail> localVarResp = getOrderHistoryWithHttpInfo(scope, code, asAt, opts);
            return localVarResp.getData();
        }

        /**
         * Execute getOrderHistory request with HTTP info returned
         * @return ApiResponse&lt;ResourceListOfChangeIntervalWithOrderManagementDetail&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The history of the specified order and related entities (changes that have been made to it). </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Order not found. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ResourceListOfChangeIntervalWithOrderManagementDetail> executeWithHttpInfo() throws ApiException {
            return getOrderHistoryWithHttpInfo(scope, code, asAt);
        }

        /**
         * Execute getOrderHistory request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;ResourceListOfChangeIntervalWithOrderManagementDetail&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The history of the specified order and related entities (changes that have been made to it). </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Order not found. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ResourceListOfChangeIntervalWithOrderManagementDetail> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return getOrderHistoryWithHttpInfo(scope, code, asAt, opts);
        }

        /**
         * Execute getOrderHistory request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The history of the specified order and related entities (changes that have been made to it). </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Order not found. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ResourceListOfChangeIntervalWithOrderManagementDetail> _callback) throws ApiException {
            return getOrderHistoryAsync(scope, code, asAt, _callback);
        }

        /**
         * Execute getOrderHistory request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The history of the specified order and related entities (changes that have been made to it). </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Order not found. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ResourceListOfChangeIntervalWithOrderManagementDetail> _callback, ConfigurationOptions opts) throws ApiException {
            return getOrderHistoryAsync(scope, code, asAt, _callback, opts);
        }
    }

    /**
     * [EXPERIMENTAL] GetOrderHistory: Get the history of an order and related entity changes
     * Get the changes that have happened to an order and related entities.
     * @param scope The scope of the order. (required)
     * @param code The code of the order. (required)
     * @return APIgetOrderHistoryRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The history of the specified order and related entities (changes that have been made to it). </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Order not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIgetOrderHistoryRequest getOrderHistory(String scope, String code) {
        return new APIgetOrderHistoryRequest(scope, code);
    }
    private okhttp3.Call moveOrdersCall(MoveOrdersToDifferentBlocksRequest moveOrdersToDifferentBlocksRequest, final ApiCallback _callback) throws ApiException {
        return moveOrdersCall(moveOrdersToDifferentBlocksRequest,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call moveOrdersCall(MoveOrdersToDifferentBlocksRequest moveOrdersToDifferentBlocksRequest, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = moveOrdersToDifferentBlocksRequest;

        // create path and map variables
        String localVarPath = "/api/ordermanagement/moveorders";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call moveOrdersValidateBeforeCall(MoveOrdersToDifferentBlocksRequest moveOrdersToDifferentBlocksRequest, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'moveOrdersToDifferentBlocksRequest' is set
        if (moveOrdersToDifferentBlocksRequest == null) {
            throw new ApiException("Missing the required parameter 'moveOrdersToDifferentBlocksRequest' when calling moveOrders(Async)");
        }

        return moveOrdersCall(moveOrdersToDifferentBlocksRequest, _callback, opts);

    }


    private ApiResponse<ResourceListOfMovedOrderToDifferentBlockResponse> moveOrdersWithHttpInfo(MoveOrdersToDifferentBlocksRequest moveOrdersToDifferentBlocksRequest) throws ApiException {
        okhttp3.Call localVarCall = moveOrdersValidateBeforeCall(moveOrdersToDifferentBlocksRequest, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<ResourceListOfMovedOrderToDifferentBlockResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<ResourceListOfMovedOrderToDifferentBlockResponse> moveOrdersWithHttpInfo(MoveOrdersToDifferentBlocksRequest moveOrdersToDifferentBlocksRequest, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = moveOrdersValidateBeforeCall(moveOrdersToDifferentBlocksRequest, null, opts);
        Type localVarReturnType = new TypeToken<ResourceListOfMovedOrderToDifferentBlockResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call moveOrdersAsync(MoveOrdersToDifferentBlocksRequest moveOrdersToDifferentBlocksRequest, final ApiCallback<ResourceListOfMovedOrderToDifferentBlockResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = moveOrdersValidateBeforeCall(moveOrdersToDifferentBlocksRequest, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<ResourceListOfMovedOrderToDifferentBlockResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call moveOrdersAsync(MoveOrdersToDifferentBlocksRequest moveOrdersToDifferentBlocksRequest, final ApiCallback<ResourceListOfMovedOrderToDifferentBlockResponse> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = moveOrdersValidateBeforeCall(moveOrdersToDifferentBlocksRequest, _callback, opts);
        Type localVarReturnType = new TypeToken<ResourceListOfMovedOrderToDifferentBlockResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APImoveOrdersRequest {
        private final MoveOrdersToDifferentBlocksRequest moveOrdersToDifferentBlocksRequest;

        private APImoveOrdersRequest(MoveOrdersToDifferentBlocksRequest moveOrdersToDifferentBlocksRequest) {
            this.moveOrdersToDifferentBlocksRequest = moveOrdersToDifferentBlocksRequest;
        }

        /**
         * Build call for moveOrders
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A collection of block and order pairs for each order moved into a block, and the Id of the order&#39;s previous block (if any). </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return moveOrdersCall(moveOrdersToDifferentBlocksRequest, _callback);
        }

        /**
         * Execute moveOrders request
         * @return ResourceListOfMovedOrderToDifferentBlockResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A collection of block and order pairs for each order moved into a block, and the Id of the order&#39;s previous block (if any). </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ResourceListOfMovedOrderToDifferentBlockResponse execute() throws ApiException {
            ApiResponse<ResourceListOfMovedOrderToDifferentBlockResponse> localVarResp = moveOrdersWithHttpInfo(moveOrdersToDifferentBlocksRequest);
            return localVarResp.getData();
        }

        /**
         * Execute moveOrders request. Use any specified configuration options to override any other configuration for this request only.
         * @return ResourceListOfMovedOrderToDifferentBlockResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A collection of block and order pairs for each order moved into a block, and the Id of the order&#39;s previous block (if any). </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ResourceListOfMovedOrderToDifferentBlockResponse execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<ResourceListOfMovedOrderToDifferentBlockResponse> localVarResp = moveOrdersWithHttpInfo(moveOrdersToDifferentBlocksRequest, opts);
            return localVarResp.getData();
        }

        /**
         * Execute moveOrders request with HTTP info returned
         * @return ApiResponse&lt;ResourceListOfMovedOrderToDifferentBlockResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A collection of block and order pairs for each order moved into a block, and the Id of the order&#39;s previous block (if any). </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ResourceListOfMovedOrderToDifferentBlockResponse> executeWithHttpInfo() throws ApiException {
            return moveOrdersWithHttpInfo(moveOrdersToDifferentBlocksRequest);
        }

        /**
         * Execute moveOrders request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;ResourceListOfMovedOrderToDifferentBlockResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A collection of block and order pairs for each order moved into a block, and the Id of the order&#39;s previous block (if any). </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ResourceListOfMovedOrderToDifferentBlockResponse> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return moveOrdersWithHttpInfo(moveOrdersToDifferentBlocksRequest, opts);
        }

        /**
         * Execute moveOrders request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A collection of block and order pairs for each order moved into a block, and the Id of the order&#39;s previous block (if any). </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ResourceListOfMovedOrderToDifferentBlockResponse> _callback) throws ApiException {
            return moveOrdersAsync(moveOrdersToDifferentBlocksRequest, _callback);
        }

        /**
         * Execute moveOrders request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A collection of block and order pairs for each order moved into a block, and the Id of the order&#39;s previous block (if any). </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ResourceListOfMovedOrderToDifferentBlockResponse> _callback, ConfigurationOptions opts) throws ApiException {
            return moveOrdersAsync(moveOrdersToDifferentBlocksRequest, _callback, opts);
        }
    }

    /**
     * [EARLY ACCESS] MoveOrders: Move orders to new or existing block
     * Move an order to a block, creating the block if it does not already exist.   This will fail if the block exists and already references orders with differing fields to the upsert request.
     * @param moveOrdersToDifferentBlocksRequest The collection of order and destination block ids. (required)
     * @return APImoveOrdersRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A collection of block and order pairs for each order moved into a block, and the Id of the order&#39;s previous block (if any). </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APImoveOrdersRequest moveOrders(MoveOrdersToDifferentBlocksRequest moveOrdersToDifferentBlocksRequest) {
        return new APImoveOrdersRequest(moveOrdersToDifferentBlocksRequest);
    }
    private okhttp3.Call placeBlocksCall(PlaceBlocksRequest placeBlocksRequest, final ApiCallback _callback) throws ApiException {
        return placeBlocksCall(placeBlocksRequest,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call placeBlocksCall(PlaceBlocksRequest placeBlocksRequest, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = placeBlocksRequest;

        // create path and map variables
        String localVarPath = "/api/ordermanagement/placeblocks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call placeBlocksValidateBeforeCall(PlaceBlocksRequest placeBlocksRequest, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        return placeBlocksCall(placeBlocksRequest, _callback, opts);

    }


    private ApiResponse<ResourceListOfPlacement> placeBlocksWithHttpInfo(PlaceBlocksRequest placeBlocksRequest) throws ApiException {
        okhttp3.Call localVarCall = placeBlocksValidateBeforeCall(placeBlocksRequest, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<ResourceListOfPlacement>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<ResourceListOfPlacement> placeBlocksWithHttpInfo(PlaceBlocksRequest placeBlocksRequest, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = placeBlocksValidateBeforeCall(placeBlocksRequest, null, opts);
        Type localVarReturnType = new TypeToken<ResourceListOfPlacement>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call placeBlocksAsync(PlaceBlocksRequest placeBlocksRequest, final ApiCallback<ResourceListOfPlacement> _callback) throws ApiException {

        okhttp3.Call localVarCall = placeBlocksValidateBeforeCall(placeBlocksRequest, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<ResourceListOfPlacement>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call placeBlocksAsync(PlaceBlocksRequest placeBlocksRequest, final ApiCallback<ResourceListOfPlacement> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = placeBlocksValidateBeforeCall(placeBlocksRequest, _callback, opts);
        Type localVarReturnType = new TypeToken<ResourceListOfPlacement>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIplaceBlocksRequest {
        private PlaceBlocksRequest placeBlocksRequest;

        private APIplaceBlocksRequest() {
        }

        /**
         * Set placeBlocksRequest
         * @param placeBlocksRequest The request containing the blocks to the placed. (optional)
         * @return APIplaceBlocksRequest
         */
        public APIplaceBlocksRequest placeBlocksRequest(PlaceBlocksRequest placeBlocksRequest) {
            this.placeBlocksRequest = placeBlocksRequest;
            return this;
        }

        /**
         * Build call for placeBlocks
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The block placements. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return placeBlocksCall(placeBlocksRequest, _callback);
        }

        /**
         * Execute placeBlocks request
         * @return ResourceListOfPlacement
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The block placements. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ResourceListOfPlacement execute() throws ApiException {
            ApiResponse<ResourceListOfPlacement> localVarResp = placeBlocksWithHttpInfo(placeBlocksRequest);
            return localVarResp.getData();
        }

        /**
         * Execute placeBlocks request. Use any specified configuration options to override any other configuration for this request only.
         * @return ResourceListOfPlacement
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The block placements. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ResourceListOfPlacement execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<ResourceListOfPlacement> localVarResp = placeBlocksWithHttpInfo(placeBlocksRequest, opts);
            return localVarResp.getData();
        }

        /**
         * Execute placeBlocks request with HTTP info returned
         * @return ApiResponse&lt;ResourceListOfPlacement&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The block placements. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ResourceListOfPlacement> executeWithHttpInfo() throws ApiException {
            return placeBlocksWithHttpInfo(placeBlocksRequest);
        }

        /**
         * Execute placeBlocks request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;ResourceListOfPlacement&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The block placements. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ResourceListOfPlacement> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return placeBlocksWithHttpInfo(placeBlocksRequest, opts);
        }

        /**
         * Execute placeBlocks request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The block placements. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ResourceListOfPlacement> _callback) throws ApiException {
            return placeBlocksAsync(placeBlocksRequest, _callback);
        }

        /**
         * Execute placeBlocks request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The block placements. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ResourceListOfPlacement> _callback, ConfigurationOptions opts) throws ApiException {
            return placeBlocksAsync(placeBlocksRequest, _callback, opts);
        }
    }

    /**
     * [EARLY ACCESS] PlaceBlocks: Places blocks for a given list of placement requests.
     * The referenced block&#39;s existence will be verified.
     * @return APIplaceBlocksRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The block placements. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIplaceBlocksRequest placeBlocks() {
        return new APIplaceBlocksRequest();
    }
    private okhttp3.Call runAllocationServiceCall(List<ResourceId> resourceId, String allocationAlgorithm, final ApiCallback _callback) throws ApiException {
        return runAllocationServiceCall(resourceId, allocationAlgorithm,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call runAllocationServiceCall(List<ResourceId> resourceId, String allocationAlgorithm, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = resourceId;

        // create path and map variables
        String localVarPath = "/api/ordermanagement/allocate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (allocationAlgorithm != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("allocationAlgorithm", allocationAlgorithm));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call runAllocationServiceValidateBeforeCall(List<ResourceId> resourceId, String allocationAlgorithm, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'resourceId' is set
        if (resourceId == null) {
            throw new ApiException("Missing the required parameter 'resourceId' when calling runAllocationService(Async)");
        }

        return runAllocationServiceCall(resourceId, allocationAlgorithm, _callback, opts);

    }


    private ApiResponse<AllocationServiceRunResponse> runAllocationServiceWithHttpInfo(List<ResourceId> resourceId, String allocationAlgorithm) throws ApiException {
        okhttp3.Call localVarCall = runAllocationServiceValidateBeforeCall(resourceId, allocationAlgorithm, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<AllocationServiceRunResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<AllocationServiceRunResponse> runAllocationServiceWithHttpInfo(List<ResourceId> resourceId, String allocationAlgorithm, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = runAllocationServiceValidateBeforeCall(resourceId, allocationAlgorithm, null, opts);
        Type localVarReturnType = new TypeToken<AllocationServiceRunResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call runAllocationServiceAsync(List<ResourceId> resourceId, String allocationAlgorithm, final ApiCallback<AllocationServiceRunResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = runAllocationServiceValidateBeforeCall(resourceId, allocationAlgorithm, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<AllocationServiceRunResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call runAllocationServiceAsync(List<ResourceId> resourceId, String allocationAlgorithm, final ApiCallback<AllocationServiceRunResponse> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = runAllocationServiceValidateBeforeCall(resourceId, allocationAlgorithm, _callback, opts);
        Type localVarReturnType = new TypeToken<AllocationServiceRunResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIrunAllocationServiceRequest {
        private final List<ResourceId> resourceId;
        private String allocationAlgorithm;

        private APIrunAllocationServiceRequest(List<ResourceId> resourceId) {
            this.resourceId = resourceId;
        }

        /**
         * Set allocationAlgorithm
         * @param allocationAlgorithm A string representation of the allocation algorithm you would like to use to allocate shares from executions e.g. \&quot;PR-FIFO\&quot;.  This defaults to \&quot;PR-FIFO\&quot;. (optional)
         * @return APIrunAllocationServiceRequest
         */
        public APIrunAllocationServiceRequest allocationAlgorithm(String allocationAlgorithm) {
            this.allocationAlgorithm = allocationAlgorithm;
            return this;
        }

        /**
         * Build call for runAllocationService
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The results from a run of the Allocation Service </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return runAllocationServiceCall(resourceId, allocationAlgorithm, _callback);
        }

        /**
         * Execute runAllocationService request
         * @return AllocationServiceRunResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The results from a run of the Allocation Service </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public AllocationServiceRunResponse execute() throws ApiException {
            ApiResponse<AllocationServiceRunResponse> localVarResp = runAllocationServiceWithHttpInfo(resourceId, allocationAlgorithm);
            return localVarResp.getData();
        }

        /**
         * Execute runAllocationService request. Use any specified configuration options to override any other configuration for this request only.
         * @return AllocationServiceRunResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The results from a run of the Allocation Service </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public AllocationServiceRunResponse execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<AllocationServiceRunResponse> localVarResp = runAllocationServiceWithHttpInfo(resourceId, allocationAlgorithm, opts);
            return localVarResp.getData();
        }

        /**
         * Execute runAllocationService request with HTTP info returned
         * @return ApiResponse&lt;AllocationServiceRunResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The results from a run of the Allocation Service </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AllocationServiceRunResponse> executeWithHttpInfo() throws ApiException {
            return runAllocationServiceWithHttpInfo(resourceId, allocationAlgorithm);
        }

        /**
         * Execute runAllocationService request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;AllocationServiceRunResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The results from a run of the Allocation Service </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AllocationServiceRunResponse> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return runAllocationServiceWithHttpInfo(resourceId, allocationAlgorithm, opts);
        }

        /**
         * Execute runAllocationService request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The results from a run of the Allocation Service </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AllocationServiceRunResponse> _callback) throws ApiException {
            return runAllocationServiceAsync(resourceId, allocationAlgorithm, _callback);
        }

        /**
         * Execute runAllocationService request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The results from a run of the Allocation Service </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AllocationServiceRunResponse> _callback, ConfigurationOptions opts) throws ApiException {
            return runAllocationServiceAsync(resourceId, allocationAlgorithm, _callback, opts);
        }
    }

    /**
     * [EXPERIMENTAL] RunAllocationService: Runs the Allocation Service
     * This will allocate executions for a given list of placements back to their originating orders.
     * @param resourceId The List of Placement IDs for which you wish to allocate executions. (required)
     * @return APIrunAllocationServiceRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The results from a run of the Allocation Service </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIrunAllocationServiceRequest runAllocationService(List<ResourceId> resourceId) {
        return new APIrunAllocationServiceRequest(resourceId);
    }
    private okhttp3.Call updateOrdersCall(Map<String, OrderUpdateRequest> requestBody, final ApiCallback _callback) throws ApiException {
        return updateOrdersCall(requestBody,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call updateOrdersCall(Map<String, OrderUpdateRequest> requestBody, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/api/ordermanagement/updateorders";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateOrdersValidateBeforeCall(Map<String, OrderUpdateRequest> requestBody, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'requestBody' is set
        if (requestBody == null) {
            throw new ApiException("Missing the required parameter 'requestBody' when calling updateOrders(Async)");
        }

        return updateOrdersCall(requestBody, _callback, opts);

    }


    private ApiResponse<UpdateOrdersResponse> updateOrdersWithHttpInfo(Map<String, OrderUpdateRequest> requestBody) throws ApiException {
        okhttp3.Call localVarCall = updateOrdersValidateBeforeCall(requestBody, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<UpdateOrdersResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<UpdateOrdersResponse> updateOrdersWithHttpInfo(Map<String, OrderUpdateRequest> requestBody, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = updateOrdersValidateBeforeCall(requestBody, null, opts);
        Type localVarReturnType = new TypeToken<UpdateOrdersResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateOrdersAsync(Map<String, OrderUpdateRequest> requestBody, final ApiCallback<UpdateOrdersResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateOrdersValidateBeforeCall(requestBody, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<UpdateOrdersResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call updateOrdersAsync(Map<String, OrderUpdateRequest> requestBody, final ApiCallback<UpdateOrdersResponse> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = updateOrdersValidateBeforeCall(requestBody, _callback, opts);
        Type localVarReturnType = new TypeToken<UpdateOrdersResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIupdateOrdersRequest {
        private final Map<String, OrderUpdateRequest> requestBody;

        private APIupdateOrdersRequest(Map<String, OrderUpdateRequest> requestBody) {
            this.requestBody = requestBody;
        }

        /**
         * Build call for updateOrders
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The successfully updated orders along with any failures </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return updateOrdersCall(requestBody, _callback);
        }

        /**
         * Execute updateOrders request
         * @return UpdateOrdersResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The successfully updated orders along with any failures </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public UpdateOrdersResponse execute() throws ApiException {
            ApiResponse<UpdateOrdersResponse> localVarResp = updateOrdersWithHttpInfo(requestBody);
            return localVarResp.getData();
        }

        /**
         * Execute updateOrders request. Use any specified configuration options to override any other configuration for this request only.
         * @return UpdateOrdersResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The successfully updated orders along with any failures </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public UpdateOrdersResponse execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<UpdateOrdersResponse> localVarResp = updateOrdersWithHttpInfo(requestBody, opts);
            return localVarResp.getData();
        }

        /**
         * Execute updateOrders request with HTTP info returned
         * @return ApiResponse&lt;UpdateOrdersResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The successfully updated orders along with any failures </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UpdateOrdersResponse> executeWithHttpInfo() throws ApiException {
            return updateOrdersWithHttpInfo(requestBody);
        }

        /**
         * Execute updateOrders request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;UpdateOrdersResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The successfully updated orders along with any failures </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UpdateOrdersResponse> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return updateOrdersWithHttpInfo(requestBody, opts);
        }

        /**
         * Execute updateOrders request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The successfully updated orders along with any failures </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UpdateOrdersResponse> _callback) throws ApiException {
            return updateOrdersAsync(requestBody, _callback);
        }

        /**
         * Execute updateOrders request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The successfully updated orders along with any failures </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UpdateOrdersResponse> _callback, ConfigurationOptions opts) throws ApiException {
            return updateOrdersAsync(requestBody, _callback, opts);
        }
    }

    /**
     * [EARLY ACCESS] UpdateOrders: Update existing orders
     * The response returns both the collection of successfully updated orders, as well as those  that failed. For each failure, a reason is provided. It is important to check the failed set for  unsuccessful results.
     * @param requestBody The request containing the orders to be updated. (required)
     * @return APIupdateOrdersRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The successfully updated orders along with any failures </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIupdateOrdersRequest updateOrders(Map<String, OrderUpdateRequest> requestBody) {
        return new APIupdateOrdersRequest(requestBody);
    }
    private okhttp3.Call updatePlacementsCall(Map<String, PlacementUpdateRequest> requestBody, final ApiCallback _callback) throws ApiException {
        return updatePlacementsCall(requestBody,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call updatePlacementsCall(Map<String, PlacementUpdateRequest> requestBody, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/api/ordermanagement/$updateplacements";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updatePlacementsValidateBeforeCall(Map<String, PlacementUpdateRequest> requestBody, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'requestBody' is set
        if (requestBody == null) {
            throw new ApiException("Missing the required parameter 'requestBody' when calling updatePlacements(Async)");
        }

        return updatePlacementsCall(requestBody, _callback, opts);

    }


    private ApiResponse<UpdatePlacementsResponse> updatePlacementsWithHttpInfo(Map<String, PlacementUpdateRequest> requestBody) throws ApiException {
        okhttp3.Call localVarCall = updatePlacementsValidateBeforeCall(requestBody, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<UpdatePlacementsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<UpdatePlacementsResponse> updatePlacementsWithHttpInfo(Map<String, PlacementUpdateRequest> requestBody, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = updatePlacementsValidateBeforeCall(requestBody, null, opts);
        Type localVarReturnType = new TypeToken<UpdatePlacementsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updatePlacementsAsync(Map<String, PlacementUpdateRequest> requestBody, final ApiCallback<UpdatePlacementsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updatePlacementsValidateBeforeCall(requestBody, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<UpdatePlacementsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call updatePlacementsAsync(Map<String, PlacementUpdateRequest> requestBody, final ApiCallback<UpdatePlacementsResponse> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = updatePlacementsValidateBeforeCall(requestBody, _callback, opts);
        Type localVarReturnType = new TypeToken<UpdatePlacementsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIupdatePlacementsRequest {
        private final Map<String, PlacementUpdateRequest> requestBody;

        private APIupdatePlacementsRequest(Map<String, PlacementUpdateRequest> requestBody) {
            this.requestBody = requestBody;
        }

        /**
         * Build call for updatePlacements
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The successfully updated placements along with any failures </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return updatePlacementsCall(requestBody, _callback);
        }

        /**
         * Execute updatePlacements request
         * @return UpdatePlacementsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The successfully updated placements along with any failures </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public UpdatePlacementsResponse execute() throws ApiException {
            ApiResponse<UpdatePlacementsResponse> localVarResp = updatePlacementsWithHttpInfo(requestBody);
            return localVarResp.getData();
        }

        /**
         * Execute updatePlacements request. Use any specified configuration options to override any other configuration for this request only.
         * @return UpdatePlacementsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The successfully updated placements along with any failures </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public UpdatePlacementsResponse execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<UpdatePlacementsResponse> localVarResp = updatePlacementsWithHttpInfo(requestBody, opts);
            return localVarResp.getData();
        }

        /**
         * Execute updatePlacements request with HTTP info returned
         * @return ApiResponse&lt;UpdatePlacementsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The successfully updated placements along with any failures </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UpdatePlacementsResponse> executeWithHttpInfo() throws ApiException {
            return updatePlacementsWithHttpInfo(requestBody);
        }

        /**
         * Execute updatePlacements request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;UpdatePlacementsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The successfully updated placements along with any failures </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UpdatePlacementsResponse> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return updatePlacementsWithHttpInfo(requestBody, opts);
        }

        /**
         * Execute updatePlacements request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The successfully updated placements along with any failures </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UpdatePlacementsResponse> _callback) throws ApiException {
            return updatePlacementsAsync(requestBody, _callback);
        }

        /**
         * Execute updatePlacements request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The successfully updated placements along with any failures </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UpdatePlacementsResponse> _callback, ConfigurationOptions opts) throws ApiException {
            return updatePlacementsAsync(requestBody, _callback, opts);
        }
    }

    /**
     * [EARLY ACCESS] UpdatePlacements: Update existing placements
     * The response returns both the collection of successfully updated placements, as well as those  that failed. For each failure, a reason is provided. It is important to check the failed set for  unsuccessful results.
     * @param requestBody The request containing the placements to be updated. (required)
     * @return APIupdatePlacementsRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The successfully updated placements along with any failures </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIupdatePlacementsRequest updatePlacements(Map<String, PlacementUpdateRequest> requestBody) {
        return new APIupdatePlacementsRequest(requestBody);
    }
}
