/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.api;

import com.finbourne.lusid.ApiCallback;
import com.finbourne.lusid.ApiClient;
import com.finbourne.lusid.ApiException;
import com.finbourne.lusid.ApiResponse;
import com.finbourne.lusid.Configuration;
import com.finbourne.lusid.Pair;
import com.finbourne.lusid.ProgressRequestBody;
import com.finbourne.lusid.ProgressResponseBody;
import com.finbourne.lusid.extensions.ConfigurationOptions;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.finbourne.lusid.model.DeletedEntityResponse;
import com.finbourne.lusid.model.LusidProblemDetails;
import com.finbourne.lusid.model.LusidValidationProblemDetails;
import java.time.OffsetDateTime;
import com.finbourne.lusid.model.SetTransactionConfigurationSourceRequest;
import com.finbourne.lusid.model.SideConfigurationDataRequest;
import com.finbourne.lusid.model.TransactionConfigurationDataRequest;
import com.finbourne.lusid.model.TransactionSetConfigurationData;
import com.finbourne.lusid.model.TransactionSetConfigurationDataRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SystemConfigurationApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SystemConfigurationApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SystemConfigurationApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createConfigurationTransactionTypeCall(TransactionConfigurationDataRequest transactionConfigurationDataRequest, final ApiCallback _callback) throws ApiException {
        return createConfigurationTransactionTypeCall(transactionConfigurationDataRequest,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call createConfigurationTransactionTypeCall(TransactionConfigurationDataRequest transactionConfigurationDataRequest, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = transactionConfigurationDataRequest;

        // create path and map variables
        String localVarPath = "/api/systemconfiguration/transactions/type";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createConfigurationTransactionTypeValidateBeforeCall(TransactionConfigurationDataRequest transactionConfigurationDataRequest, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        return createConfigurationTransactionTypeCall(transactionConfigurationDataRequest, _callback, opts);

    }


    private ApiResponse<TransactionSetConfigurationData> createConfigurationTransactionTypeWithHttpInfo(TransactionConfigurationDataRequest transactionConfigurationDataRequest) throws ApiException {
        okhttp3.Call localVarCall = createConfigurationTransactionTypeValidateBeforeCall(transactionConfigurationDataRequest, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<TransactionSetConfigurationData>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<TransactionSetConfigurationData> createConfigurationTransactionTypeWithHttpInfo(TransactionConfigurationDataRequest transactionConfigurationDataRequest, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = createConfigurationTransactionTypeValidateBeforeCall(transactionConfigurationDataRequest, null, opts);
        Type localVarReturnType = new TypeToken<TransactionSetConfigurationData>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createConfigurationTransactionTypeAsync(TransactionConfigurationDataRequest transactionConfigurationDataRequest, final ApiCallback<TransactionSetConfigurationData> _callback) throws ApiException {

        okhttp3.Call localVarCall = createConfigurationTransactionTypeValidateBeforeCall(transactionConfigurationDataRequest, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<TransactionSetConfigurationData>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call createConfigurationTransactionTypeAsync(TransactionConfigurationDataRequest transactionConfigurationDataRequest, final ApiCallback<TransactionSetConfigurationData> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = createConfigurationTransactionTypeValidateBeforeCall(transactionConfigurationDataRequest, _callback, opts);
        Type localVarReturnType = new TypeToken<TransactionSetConfigurationData>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIcreateConfigurationTransactionTypeRequest {
        private TransactionConfigurationDataRequest transactionConfigurationDataRequest;

        private APIcreateConfigurationTransactionTypeRequest() {
        }

        /**
         * Set transactionConfigurationDataRequest
         * @param transactionConfigurationDataRequest A transaction type definition. (optional)
         * @return APIcreateConfigurationTransactionTypeRequest
         */
        public APIcreateConfigurationTransactionTypeRequest transactionConfigurationDataRequest(TransactionConfigurationDataRequest transactionConfigurationDataRequest) {
            this.transactionConfigurationDataRequest = transactionConfigurationDataRequest;
            return this;
        }

        /**
         * Build call for createConfigurationTransactionType
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return createConfigurationTransactionTypeCall(transactionConfigurationDataRequest, _callback);
        }

        /**
         * Execute createConfigurationTransactionType request
         * @return TransactionSetConfigurationData
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public TransactionSetConfigurationData execute() throws ApiException {
            ApiResponse<TransactionSetConfigurationData> localVarResp = createConfigurationTransactionTypeWithHttpInfo(transactionConfigurationDataRequest);
            return localVarResp.getData();
        }

        /**
         * Execute createConfigurationTransactionType request. Use any specified configuration options to override any other configuration for this request only.
         * @return TransactionSetConfigurationData
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public TransactionSetConfigurationData execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<TransactionSetConfigurationData> localVarResp = createConfigurationTransactionTypeWithHttpInfo(transactionConfigurationDataRequest, opts);
            return localVarResp.getData();
        }

        /**
         * Execute createConfigurationTransactionType request with HTTP info returned
         * @return ApiResponse&lt;TransactionSetConfigurationData&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TransactionSetConfigurationData> executeWithHttpInfo() throws ApiException {
            return createConfigurationTransactionTypeWithHttpInfo(transactionConfigurationDataRequest);
        }

        /**
         * Execute createConfigurationTransactionType request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;TransactionSetConfigurationData&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TransactionSetConfigurationData> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return createConfigurationTransactionTypeWithHttpInfo(transactionConfigurationDataRequest, opts);
        }

        /**
         * Execute createConfigurationTransactionType request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TransactionSetConfigurationData> _callback) throws ApiException {
            return createConfigurationTransactionTypeAsync(transactionConfigurationDataRequest, _callback);
        }

        /**
         * Execute createConfigurationTransactionType request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TransactionSetConfigurationData> _callback, ConfigurationOptions opts) throws ApiException {
            return createConfigurationTransactionTypeAsync(transactionConfigurationDataRequest, _callback, opts);
        }
    }

    /**
     * [EARLY ACCESS] CreateConfigurationTransactionType: Create transaction type
     * Create a new transaction type by specifying a definition and mappings to movements.
     * @return APIcreateConfigurationTransactionTypeRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIcreateConfigurationTransactionTypeRequest createConfigurationTransactionType() {
        return new APIcreateConfigurationTransactionTypeRequest();
    }
    private okhttp3.Call createSideDefinitionCall(SideConfigurationDataRequest sideConfigurationDataRequest, final ApiCallback _callback) throws ApiException {
        return createSideDefinitionCall(sideConfigurationDataRequest,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call createSideDefinitionCall(SideConfigurationDataRequest sideConfigurationDataRequest, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = sideConfigurationDataRequest;

        // create path and map variables
        String localVarPath = "/api/systemconfiguration/transactions/side";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createSideDefinitionValidateBeforeCall(SideConfigurationDataRequest sideConfigurationDataRequest, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        return createSideDefinitionCall(sideConfigurationDataRequest, _callback, opts);

    }


    private ApiResponse<TransactionSetConfigurationData> createSideDefinitionWithHttpInfo(SideConfigurationDataRequest sideConfigurationDataRequest) throws ApiException {
        okhttp3.Call localVarCall = createSideDefinitionValidateBeforeCall(sideConfigurationDataRequest, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<TransactionSetConfigurationData>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<TransactionSetConfigurationData> createSideDefinitionWithHttpInfo(SideConfigurationDataRequest sideConfigurationDataRequest, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = createSideDefinitionValidateBeforeCall(sideConfigurationDataRequest, null, opts);
        Type localVarReturnType = new TypeToken<TransactionSetConfigurationData>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createSideDefinitionAsync(SideConfigurationDataRequest sideConfigurationDataRequest, final ApiCallback<TransactionSetConfigurationData> _callback) throws ApiException {

        okhttp3.Call localVarCall = createSideDefinitionValidateBeforeCall(sideConfigurationDataRequest, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<TransactionSetConfigurationData>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call createSideDefinitionAsync(SideConfigurationDataRequest sideConfigurationDataRequest, final ApiCallback<TransactionSetConfigurationData> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = createSideDefinitionValidateBeforeCall(sideConfigurationDataRequest, _callback, opts);
        Type localVarReturnType = new TypeToken<TransactionSetConfigurationData>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIcreateSideDefinitionRequest {
        private SideConfigurationDataRequest sideConfigurationDataRequest;

        private APIcreateSideDefinitionRequest() {
        }

        /**
         * Set sideConfigurationDataRequest
         * @param sideConfigurationDataRequest The definition of the side. (optional)
         * @return APIcreateSideDefinitionRequest
         */
        public APIcreateSideDefinitionRequest sideConfigurationDataRequest(SideConfigurationDataRequest sideConfigurationDataRequest) {
            this.sideConfigurationDataRequest = sideConfigurationDataRequest;
            return this;
        }

        /**
         * Build call for createSideDefinition
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return createSideDefinitionCall(sideConfigurationDataRequest, _callback);
        }

        /**
         * Execute createSideDefinition request
         * @return TransactionSetConfigurationData
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public TransactionSetConfigurationData execute() throws ApiException {
            ApiResponse<TransactionSetConfigurationData> localVarResp = createSideDefinitionWithHttpInfo(sideConfigurationDataRequest);
            return localVarResp.getData();
        }

        /**
         * Execute createSideDefinition request. Use any specified configuration options to override any other configuration for this request only.
         * @return TransactionSetConfigurationData
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public TransactionSetConfigurationData execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<TransactionSetConfigurationData> localVarResp = createSideDefinitionWithHttpInfo(sideConfigurationDataRequest, opts);
            return localVarResp.getData();
        }

        /**
         * Execute createSideDefinition request with HTTP info returned
         * @return ApiResponse&lt;TransactionSetConfigurationData&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TransactionSetConfigurationData> executeWithHttpInfo() throws ApiException {
            return createSideDefinitionWithHttpInfo(sideConfigurationDataRequest);
        }

        /**
         * Execute createSideDefinition request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;TransactionSetConfigurationData&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TransactionSetConfigurationData> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return createSideDefinitionWithHttpInfo(sideConfigurationDataRequest, opts);
        }

        /**
         * Execute createSideDefinition request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TransactionSetConfigurationData> _callback) throws ApiException {
            return createSideDefinitionAsync(sideConfigurationDataRequest, _callback);
        }

        /**
         * Execute createSideDefinition request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TransactionSetConfigurationData> _callback, ConfigurationOptions opts) throws ApiException {
            return createSideDefinitionAsync(sideConfigurationDataRequest, _callback, opts);
        }
    }

    /**
     * [EXPERIMENTAL] CreateSideDefinition: Create side definition
     * Create a new side definition for use in a transaction type. For more information, see https://support.lusid.com/knowledgebase/article/KA-01875.
     * @return APIcreateSideDefinitionRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIcreateSideDefinitionRequest createSideDefinition() {
        return new APIcreateSideDefinitionRequest();
    }
    private okhttp3.Call deleteTransactionConfigurationSourceCall(String source, final ApiCallback _callback) throws ApiException {
        return deleteTransactionConfigurationSourceCall(source,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call deleteTransactionConfigurationSourceCall(String source, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/systemconfiguration/transactions/type/{source}"
            .replace("{" + "source" + "}", localVarApiClient.escapeString(source.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteTransactionConfigurationSourceValidateBeforeCall(String source, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'source' is set
        if (source == null) {
            throw new ApiException("Missing the required parameter 'source' when calling deleteTransactionConfigurationSource(Async)");
        }

        return deleteTransactionConfigurationSourceCall(source, _callback, opts);

    }


    private ApiResponse<DeletedEntityResponse> deleteTransactionConfigurationSourceWithHttpInfo(String source) throws ApiException {
        okhttp3.Call localVarCall = deleteTransactionConfigurationSourceValidateBeforeCall(source, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<DeletedEntityResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<DeletedEntityResponse> deleteTransactionConfigurationSourceWithHttpInfo(String source, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = deleteTransactionConfigurationSourceValidateBeforeCall(source, null, opts);
        Type localVarReturnType = new TypeToken<DeletedEntityResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteTransactionConfigurationSourceAsync(String source, final ApiCallback<DeletedEntityResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteTransactionConfigurationSourceValidateBeforeCall(source, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<DeletedEntityResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call deleteTransactionConfigurationSourceAsync(String source, final ApiCallback<DeletedEntityResponse> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = deleteTransactionConfigurationSourceValidateBeforeCall(source, _callback, opts);
        Type localVarReturnType = new TypeToken<DeletedEntityResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIdeleteTransactionConfigurationSourceRequest {
        private final String source;

        private APIdeleteTransactionConfigurationSourceRequest(String source) {
            this.source = source;
        }

        /**
         * Build call for deleteTransactionConfigurationSource
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteTransactionConfigurationSourceCall(source, _callback);
        }

        /**
         * Execute deleteTransactionConfigurationSource request
         * @return DeletedEntityResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public DeletedEntityResponse execute() throws ApiException {
            ApiResponse<DeletedEntityResponse> localVarResp = deleteTransactionConfigurationSourceWithHttpInfo(source);
            return localVarResp.getData();
        }

        /**
         * Execute deleteTransactionConfigurationSource request. Use any specified configuration options to override any other configuration for this request only.
         * @return DeletedEntityResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public DeletedEntityResponse execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<DeletedEntityResponse> localVarResp = deleteTransactionConfigurationSourceWithHttpInfo(source, opts);
            return localVarResp.getData();
        }

        /**
         * Execute deleteTransactionConfigurationSource request with HTTP info returned
         * @return ApiResponse&lt;DeletedEntityResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DeletedEntityResponse> executeWithHttpInfo() throws ApiException {
            return deleteTransactionConfigurationSourceWithHttpInfo(source);
        }

        /**
         * Execute deleteTransactionConfigurationSource request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;DeletedEntityResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DeletedEntityResponse> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return deleteTransactionConfigurationSourceWithHttpInfo(source, opts);
        }

        /**
         * Execute deleteTransactionConfigurationSource request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DeletedEntityResponse> _callback) throws ApiException {
            return deleteTransactionConfigurationSourceAsync(source, _callback);
        }

        /**
         * Execute deleteTransactionConfigurationSource request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DeletedEntityResponse> _callback, ConfigurationOptions opts) throws ApiException {
            return deleteTransactionConfigurationSourceAsync(source, _callback, opts);
        }
    }

    /**
     * [EXPERIMENTAL] DeleteTransactionConfigurationSource: Delete all transaction configurations for a source
     * /// WARNING! Changing existing transaction types has a material impact on how data, new and old, is processed and aggregated by LUSID, and will affect your whole organisation. Only call this API if you are fully aware of the implications of the change.
     * @param source The source to delete transaction configurations for (required)
     * @return APIdeleteTransactionConfigurationSourceRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIdeleteTransactionConfigurationSourceRequest deleteTransactionConfigurationSource(String source) {
        return new APIdeleteTransactionConfigurationSourceRequest(source);
    }
    private okhttp3.Call getTransactionConfigurationSourceCall(String source, OffsetDateTime asAt, final ApiCallback _callback) throws ApiException {
        return getTransactionConfigurationSourceCall(source, asAt,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call getTransactionConfigurationSourceCall(String source, OffsetDateTime asAt, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/systemconfiguration/transactions/type/{source}"
            .replace("{" + "source" + "}", localVarApiClient.escapeString(source.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (asAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asAt", asAt));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTransactionConfigurationSourceValidateBeforeCall(String source, OffsetDateTime asAt, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'source' is set
        if (source == null) {
            throw new ApiException("Missing the required parameter 'source' when calling getTransactionConfigurationSource(Async)");
        }

        return getTransactionConfigurationSourceCall(source, asAt, _callback, opts);

    }


    private ApiResponse<TransactionSetConfigurationData> getTransactionConfigurationSourceWithHttpInfo(String source, OffsetDateTime asAt) throws ApiException {
        okhttp3.Call localVarCall = getTransactionConfigurationSourceValidateBeforeCall(source, asAt, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<TransactionSetConfigurationData>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<TransactionSetConfigurationData> getTransactionConfigurationSourceWithHttpInfo(String source, OffsetDateTime asAt, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = getTransactionConfigurationSourceValidateBeforeCall(source, asAt, null, opts);
        Type localVarReturnType = new TypeToken<TransactionSetConfigurationData>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getTransactionConfigurationSourceAsync(String source, OffsetDateTime asAt, final ApiCallback<TransactionSetConfigurationData> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTransactionConfigurationSourceValidateBeforeCall(source, asAt, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<TransactionSetConfigurationData>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call getTransactionConfigurationSourceAsync(String source, OffsetDateTime asAt, final ApiCallback<TransactionSetConfigurationData> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = getTransactionConfigurationSourceValidateBeforeCall(source, asAt, _callback, opts);
        Type localVarReturnType = new TypeToken<TransactionSetConfigurationData>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetTransactionConfigurationSourceRequest {
        private final String source;
        private OffsetDateTime asAt;

        private APIgetTransactionConfigurationSourceRequest(String source) {
            this.source = source;
        }

        /**
         * Set asAt
         * @param asAt The asAt datetime at which to retrieve the transaction configurations.  Defaults to returning the latest version of the transaction configurations if not specified. (optional)
         * @return APIgetTransactionConfigurationSourceRequest
         */
        public APIgetTransactionConfigurationSourceRequest asAt(OffsetDateTime asAt) {
            this.asAt = asAt;
            return this;
        }

        /**
         * Build call for getTransactionConfigurationSource
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getTransactionConfigurationSourceCall(source, asAt, _callback);
        }

        /**
         * Execute getTransactionConfigurationSource request
         * @return TransactionSetConfigurationData
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public TransactionSetConfigurationData execute() throws ApiException {
            ApiResponse<TransactionSetConfigurationData> localVarResp = getTransactionConfigurationSourceWithHttpInfo(source, asAt);
            return localVarResp.getData();
        }

        /**
         * Execute getTransactionConfigurationSource request. Use any specified configuration options to override any other configuration for this request only.
         * @return TransactionSetConfigurationData
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public TransactionSetConfigurationData execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<TransactionSetConfigurationData> localVarResp = getTransactionConfigurationSourceWithHttpInfo(source, asAt, opts);
            return localVarResp.getData();
        }

        /**
         * Execute getTransactionConfigurationSource request with HTTP info returned
         * @return ApiResponse&lt;TransactionSetConfigurationData&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TransactionSetConfigurationData> executeWithHttpInfo() throws ApiException {
            return getTransactionConfigurationSourceWithHttpInfo(source, asAt);
        }

        /**
         * Execute getTransactionConfigurationSource request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;TransactionSetConfigurationData&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TransactionSetConfigurationData> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return getTransactionConfigurationSourceWithHttpInfo(source, asAt, opts);
        }

        /**
         * Execute getTransactionConfigurationSource request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TransactionSetConfigurationData> _callback) throws ApiException {
            return getTransactionConfigurationSourceAsync(source, asAt, _callback);
        }

        /**
         * Execute getTransactionConfigurationSource request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TransactionSetConfigurationData> _callback, ConfigurationOptions opts) throws ApiException {
            return getTransactionConfigurationSourceAsync(source, asAt, _callback, opts);
        }
    }

    /**
     * [EXPERIMENTAL] GetTransactionConfigurationSource: Get all transaction configurations for a source
     * Returns failure if requested source is not found
     * @param source The source for which to retrieve transaction configurations (required)
     * @return APIgetTransactionConfigurationSourceRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIgetTransactionConfigurationSourceRequest getTransactionConfigurationSource(String source) {
        return new APIgetTransactionConfigurationSourceRequest(source);
    }
    private okhttp3.Call listConfigurationTransactionTypesCall(OffsetDateTime asAt, final ApiCallback _callback) throws ApiException {
        return listConfigurationTransactionTypesCall(asAt,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call listConfigurationTransactionTypesCall(OffsetDateTime asAt, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/systemconfiguration/transactions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (asAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asAt", asAt));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listConfigurationTransactionTypesValidateBeforeCall(OffsetDateTime asAt, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        return listConfigurationTransactionTypesCall(asAt, _callback, opts);

    }


    private ApiResponse<TransactionSetConfigurationData> listConfigurationTransactionTypesWithHttpInfo(OffsetDateTime asAt) throws ApiException {
        okhttp3.Call localVarCall = listConfigurationTransactionTypesValidateBeforeCall(asAt, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<TransactionSetConfigurationData>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<TransactionSetConfigurationData> listConfigurationTransactionTypesWithHttpInfo(OffsetDateTime asAt, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = listConfigurationTransactionTypesValidateBeforeCall(asAt, null, opts);
        Type localVarReturnType = new TypeToken<TransactionSetConfigurationData>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listConfigurationTransactionTypesAsync(OffsetDateTime asAt, final ApiCallback<TransactionSetConfigurationData> _callback) throws ApiException {

        okhttp3.Call localVarCall = listConfigurationTransactionTypesValidateBeforeCall(asAt, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<TransactionSetConfigurationData>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call listConfigurationTransactionTypesAsync(OffsetDateTime asAt, final ApiCallback<TransactionSetConfigurationData> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = listConfigurationTransactionTypesValidateBeforeCall(asAt, _callback, opts);
        Type localVarReturnType = new TypeToken<TransactionSetConfigurationData>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIlistConfigurationTransactionTypesRequest {
        private OffsetDateTime asAt;

        private APIlistConfigurationTransactionTypesRequest() {
        }

        /**
         * Set asAt
         * @param asAt The asAt datetime at which to retrieve the transaction types. Defaults  to returning the latest versions if not specified. (optional)
         * @return APIlistConfigurationTransactionTypesRequest
         */
        public APIlistConfigurationTransactionTypesRequest asAt(OffsetDateTime asAt) {
            this.asAt = asAt;
            return this;
        }

        /**
         * Build call for listConfigurationTransactionTypes
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listConfigurationTransactionTypesCall(asAt, _callback);
        }

        /**
         * Execute listConfigurationTransactionTypes request
         * @return TransactionSetConfigurationData
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public TransactionSetConfigurationData execute() throws ApiException {
            ApiResponse<TransactionSetConfigurationData> localVarResp = listConfigurationTransactionTypesWithHttpInfo(asAt);
            return localVarResp.getData();
        }

        /**
         * Execute listConfigurationTransactionTypes request. Use any specified configuration options to override any other configuration for this request only.
         * @return TransactionSetConfigurationData
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public TransactionSetConfigurationData execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<TransactionSetConfigurationData> localVarResp = listConfigurationTransactionTypesWithHttpInfo(asAt, opts);
            return localVarResp.getData();
        }

        /**
         * Execute listConfigurationTransactionTypes request with HTTP info returned
         * @return ApiResponse&lt;TransactionSetConfigurationData&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TransactionSetConfigurationData> executeWithHttpInfo() throws ApiException {
            return listConfigurationTransactionTypesWithHttpInfo(asAt);
        }

        /**
         * Execute listConfigurationTransactionTypes request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;TransactionSetConfigurationData&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TransactionSetConfigurationData> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return listConfigurationTransactionTypesWithHttpInfo(asAt, opts);
        }

        /**
         * Execute listConfigurationTransactionTypes request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TransactionSetConfigurationData> _callback) throws ApiException {
            return listConfigurationTransactionTypesAsync(asAt, _callback);
        }

        /**
         * Execute listConfigurationTransactionTypes request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TransactionSetConfigurationData> _callback, ConfigurationOptions opts) throws ApiException {
            return listConfigurationTransactionTypesAsync(asAt, _callback, opts);
        }
    }

    /**
     * [EARLY ACCESS] ListConfigurationTransactionTypes: List transaction types
     * Get the list of current transaction types. For information on the default transaction types provided with LUSID, see https://support.lusid.com/knowledgebase/article/KA-01873/.
     * @return APIlistConfigurationTransactionTypesRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIlistConfigurationTransactionTypesRequest listConfigurationTransactionTypes() {
        return new APIlistConfigurationTransactionTypesRequest();
    }
    private okhttp3.Call setConfigurationTransactionTypesCall(TransactionSetConfigurationDataRequest transactionSetConfigurationDataRequest, final ApiCallback _callback) throws ApiException {
        return setConfigurationTransactionTypesCall(transactionSetConfigurationDataRequest,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call setConfigurationTransactionTypesCall(TransactionSetConfigurationDataRequest transactionSetConfigurationDataRequest, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = transactionSetConfigurationDataRequest;

        // create path and map variables
        String localVarPath = "/api/systemconfiguration/transactions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setConfigurationTransactionTypesValidateBeforeCall(TransactionSetConfigurationDataRequest transactionSetConfigurationDataRequest, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        return setConfigurationTransactionTypesCall(transactionSetConfigurationDataRequest, _callback, opts);

    }


    private ApiResponse<TransactionSetConfigurationData> setConfigurationTransactionTypesWithHttpInfo(TransactionSetConfigurationDataRequest transactionSetConfigurationDataRequest) throws ApiException {
        okhttp3.Call localVarCall = setConfigurationTransactionTypesValidateBeforeCall(transactionSetConfigurationDataRequest, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<TransactionSetConfigurationData>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<TransactionSetConfigurationData> setConfigurationTransactionTypesWithHttpInfo(TransactionSetConfigurationDataRequest transactionSetConfigurationDataRequest, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = setConfigurationTransactionTypesValidateBeforeCall(transactionSetConfigurationDataRequest, null, opts);
        Type localVarReturnType = new TypeToken<TransactionSetConfigurationData>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call setConfigurationTransactionTypesAsync(TransactionSetConfigurationDataRequest transactionSetConfigurationDataRequest, final ApiCallback<TransactionSetConfigurationData> _callback) throws ApiException {

        okhttp3.Call localVarCall = setConfigurationTransactionTypesValidateBeforeCall(transactionSetConfigurationDataRequest, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<TransactionSetConfigurationData>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call setConfigurationTransactionTypesAsync(TransactionSetConfigurationDataRequest transactionSetConfigurationDataRequest, final ApiCallback<TransactionSetConfigurationData> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = setConfigurationTransactionTypesValidateBeforeCall(transactionSetConfigurationDataRequest, _callback, opts);
        Type localVarReturnType = new TypeToken<TransactionSetConfigurationData>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIsetConfigurationTransactionTypesRequest {
        private TransactionSetConfigurationDataRequest transactionSetConfigurationDataRequest;

        private APIsetConfigurationTransactionTypesRequest() {
        }

        /**
         * Set transactionSetConfigurationDataRequest
         * @param transactionSetConfigurationDataRequest The complete set of transaction type definitions. (optional)
         * @return APIsetConfigurationTransactionTypesRequest
         */
        public APIsetConfigurationTransactionTypesRequest transactionSetConfigurationDataRequest(TransactionSetConfigurationDataRequest transactionSetConfigurationDataRequest) {
            this.transactionSetConfigurationDataRequest = transactionSetConfigurationDataRequest;
            return this;
        }

        /**
         * Build call for setConfigurationTransactionTypes
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return setConfigurationTransactionTypesCall(transactionSetConfigurationDataRequest, _callback);
        }

        /**
         * Execute setConfigurationTransactionTypes request
         * @return TransactionSetConfigurationData
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public TransactionSetConfigurationData execute() throws ApiException {
            ApiResponse<TransactionSetConfigurationData> localVarResp = setConfigurationTransactionTypesWithHttpInfo(transactionSetConfigurationDataRequest);
            return localVarResp.getData();
        }

        /**
         * Execute setConfigurationTransactionTypes request. Use any specified configuration options to override any other configuration for this request only.
         * @return TransactionSetConfigurationData
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public TransactionSetConfigurationData execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<TransactionSetConfigurationData> localVarResp = setConfigurationTransactionTypesWithHttpInfo(transactionSetConfigurationDataRequest, opts);
            return localVarResp.getData();
        }

        /**
         * Execute setConfigurationTransactionTypes request with HTTP info returned
         * @return ApiResponse&lt;TransactionSetConfigurationData&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TransactionSetConfigurationData> executeWithHttpInfo() throws ApiException {
            return setConfigurationTransactionTypesWithHttpInfo(transactionSetConfigurationDataRequest);
        }

        /**
         * Execute setConfigurationTransactionTypes request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;TransactionSetConfigurationData&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TransactionSetConfigurationData> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return setConfigurationTransactionTypesWithHttpInfo(transactionSetConfigurationDataRequest, opts);
        }

        /**
         * Execute setConfigurationTransactionTypes request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TransactionSetConfigurationData> _callback) throws ApiException {
            return setConfigurationTransactionTypesAsync(transactionSetConfigurationDataRequest, _callback);
        }

        /**
         * Execute setConfigurationTransactionTypes request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TransactionSetConfigurationData> _callback, ConfigurationOptions opts) throws ApiException {
            return setConfigurationTransactionTypesAsync(transactionSetConfigurationDataRequest, _callback, opts);
        }
    }

    /**
     * [EXPERIMENTAL] SetConfigurationTransactionTypes: Set transaction types
     * Configure all existing transaction types. Note it is not possible to configure a single existing transaction type on its own.   WARNING! Changing existing transaction types has a material impact on how data, new and old, is processed and aggregated by LUSID, and will affect your whole organisation. Only call this API if you are fully aware of the implications of the change.
     * @return APIsetConfigurationTransactionTypesRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIsetConfigurationTransactionTypesRequest setConfigurationTransactionTypes() {
        return new APIsetConfigurationTransactionTypesRequest();
    }
    private okhttp3.Call setTransactionConfigurationSourceCall(String source, List<SetTransactionConfigurationSourceRequest> setTransactionConfigurationSourceRequest, final ApiCallback _callback) throws ApiException {
        return setTransactionConfigurationSourceCall(source, setTransactionConfigurationSourceRequest,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call setTransactionConfigurationSourceCall(String source, List<SetTransactionConfigurationSourceRequest> setTransactionConfigurationSourceRequest, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = setTransactionConfigurationSourceRequest;

        // create path and map variables
        String localVarPath = "/api/systemconfiguration/transactions/type/{source}"
            .replace("{" + "source" + "}", localVarApiClient.escapeString(source.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setTransactionConfigurationSourceValidateBeforeCall(String source, List<SetTransactionConfigurationSourceRequest> setTransactionConfigurationSourceRequest, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'source' is set
        if (source == null) {
            throw new ApiException("Missing the required parameter 'source' when calling setTransactionConfigurationSource(Async)");
        }

        // verify the required parameter 'setTransactionConfigurationSourceRequest' is set
        if (setTransactionConfigurationSourceRequest == null) {
            throw new ApiException("Missing the required parameter 'setTransactionConfigurationSourceRequest' when calling setTransactionConfigurationSource(Async)");
        }

        return setTransactionConfigurationSourceCall(source, setTransactionConfigurationSourceRequest, _callback, opts);

    }


    private ApiResponse<TransactionSetConfigurationData> setTransactionConfigurationSourceWithHttpInfo(String source, List<SetTransactionConfigurationSourceRequest> setTransactionConfigurationSourceRequest) throws ApiException {
        okhttp3.Call localVarCall = setTransactionConfigurationSourceValidateBeforeCall(source, setTransactionConfigurationSourceRequest, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<TransactionSetConfigurationData>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<TransactionSetConfigurationData> setTransactionConfigurationSourceWithHttpInfo(String source, List<SetTransactionConfigurationSourceRequest> setTransactionConfigurationSourceRequest, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = setTransactionConfigurationSourceValidateBeforeCall(source, setTransactionConfigurationSourceRequest, null, opts);
        Type localVarReturnType = new TypeToken<TransactionSetConfigurationData>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call setTransactionConfigurationSourceAsync(String source, List<SetTransactionConfigurationSourceRequest> setTransactionConfigurationSourceRequest, final ApiCallback<TransactionSetConfigurationData> _callback) throws ApiException {

        okhttp3.Call localVarCall = setTransactionConfigurationSourceValidateBeforeCall(source, setTransactionConfigurationSourceRequest, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<TransactionSetConfigurationData>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call setTransactionConfigurationSourceAsync(String source, List<SetTransactionConfigurationSourceRequest> setTransactionConfigurationSourceRequest, final ApiCallback<TransactionSetConfigurationData> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = setTransactionConfigurationSourceValidateBeforeCall(source, setTransactionConfigurationSourceRequest, _callback, opts);
        Type localVarReturnType = new TypeToken<TransactionSetConfigurationData>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIsetTransactionConfigurationSourceRequest {
        private final String source;
        private final List<SetTransactionConfigurationSourceRequest> setTransactionConfigurationSourceRequest;

        private APIsetTransactionConfigurationSourceRequest(String source, List<SetTransactionConfigurationSourceRequest> setTransactionConfigurationSourceRequest) {
            this.source = source;
            this.setTransactionConfigurationSourceRequest = setTransactionConfigurationSourceRequest;
        }

        /**
         * Build call for setTransactionConfigurationSource
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return setTransactionConfigurationSourceCall(source, setTransactionConfigurationSourceRequest, _callback);
        }

        /**
         * Execute setTransactionConfigurationSource request
         * @return TransactionSetConfigurationData
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public TransactionSetConfigurationData execute() throws ApiException {
            ApiResponse<TransactionSetConfigurationData> localVarResp = setTransactionConfigurationSourceWithHttpInfo(source, setTransactionConfigurationSourceRequest);
            return localVarResp.getData();
        }

        /**
         * Execute setTransactionConfigurationSource request. Use any specified configuration options to override any other configuration for this request only.
         * @return TransactionSetConfigurationData
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public TransactionSetConfigurationData execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<TransactionSetConfigurationData> localVarResp = setTransactionConfigurationSourceWithHttpInfo(source, setTransactionConfigurationSourceRequest, opts);
            return localVarResp.getData();
        }

        /**
         * Execute setTransactionConfigurationSource request with HTTP info returned
         * @return ApiResponse&lt;TransactionSetConfigurationData&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TransactionSetConfigurationData> executeWithHttpInfo() throws ApiException {
            return setTransactionConfigurationSourceWithHttpInfo(source, setTransactionConfigurationSourceRequest);
        }

        /**
         * Execute setTransactionConfigurationSource request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;TransactionSetConfigurationData&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TransactionSetConfigurationData> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return setTransactionConfigurationSourceWithHttpInfo(source, setTransactionConfigurationSourceRequest, opts);
        }

        /**
         * Execute setTransactionConfigurationSource request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TransactionSetConfigurationData> _callback) throws ApiException {
            return setTransactionConfigurationSourceAsync(source, setTransactionConfigurationSourceRequest, _callback);
        }

        /**
         * Execute setTransactionConfigurationSource request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TransactionSetConfigurationData> _callback, ConfigurationOptions opts) throws ApiException {
            return setTransactionConfigurationSourceAsync(source, setTransactionConfigurationSourceRequest, _callback, opts);
        }
    }

    /**
     * [EXPERIMENTAL] SetTransactionConfigurationSource: Set transaction types for a source
     * This will replace all the existing transaction configurations for the given source   WARNING! Changing existing transaction types has a material impact on how data, new and old, is processed and aggregated by LUSID, and will affect your whole organisation. Only call this API if you are fully aware of the implications of the change.
     * @param source The source to set the transaction configurations for (required)
     * @param setTransactionConfigurationSourceRequest The set of transaction configurations (required)
     * @return APIsetTransactionConfigurationSourceRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIsetTransactionConfigurationSourceRequest setTransactionConfigurationSource(String source, List<SetTransactionConfigurationSourceRequest> setTransactionConfigurationSourceRequest) {
        return new APIsetTransactionConfigurationSourceRequest(source, setTransactionConfigurationSourceRequest);
    }
}
