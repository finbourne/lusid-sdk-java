/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.api;

import com.finbourne.lusid.ApiCallback;
import com.finbourne.lusid.ApiClient;
import com.finbourne.lusid.ApiException;
import com.finbourne.lusid.ApiResponse;
import com.finbourne.lusid.Configuration;
import com.finbourne.lusid.Pair;
import com.finbourne.lusid.ProgressRequestBody;
import com.finbourne.lusid.ProgressResponseBody;
import com.finbourne.lusid.extensions.ConfigurationOptions;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.finbourne.lusid.model.FileResponse;
import com.finbourne.lusid.model.LusidProblemDetails;
import com.finbourne.lusid.model.LusidValidationProblemDetails;
import com.finbourne.lusid.model.ResourceListOfAccessControlledResource;
import com.finbourne.lusid.model.VersionSummaryDto;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ApplicationMetadataApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ApplicationMetadataApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ApplicationMetadataApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getExcelAddinCall(String version, final ApiCallback _callback) throws ApiException {
        return getExcelAddinCall(version,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call getExcelAddinCall(String version, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/metadata/downloads/exceladdin";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("version", version));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getExcelAddinValidateBeforeCall(String version, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        return getExcelAddinCall(version, _callback, opts);

    }


    private ApiResponse<FileResponse> getExcelAddinWithHttpInfo(String version) throws ApiException {
        okhttp3.Call localVarCall = getExcelAddinValidateBeforeCall(version, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<FileResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<FileResponse> getExcelAddinWithHttpInfo(String version, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = getExcelAddinValidateBeforeCall(version, null, opts);
        Type localVarReturnType = new TypeToken<FileResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getExcelAddinAsync(String version, final ApiCallback<FileResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getExcelAddinValidateBeforeCall(version, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<FileResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call getExcelAddinAsync(String version, final ApiCallback<FileResponse> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = getExcelAddinValidateBeforeCall(version, _callback, opts);
        Type localVarReturnType = new TypeToken<FileResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetExcelAddinRequest {
        private String version;

        private APIgetExcelAddinRequest() {
        }

        /**
         * Set version
         * @param version The requested version of the Excel plugin (optional)
         * @return APIgetExcelAddinRequest
         */
        public APIgetExcelAddinRequest version(String version) {
            this.version = version;
            return this;
        }

        /**
         * Build call for getExcelAddin
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getExcelAddinCall(version, _callback);
        }

        /**
         * Execute getExcelAddin request
         * @return FileResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public FileResponse execute() throws ApiException {
            ApiResponse<FileResponse> localVarResp = getExcelAddinWithHttpInfo(version);
            return localVarResp.getData();
        }

        /**
         * Execute getExcelAddin request. Use any specified configuration options to override any other configuration for this request only.
         * @return FileResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public FileResponse execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<FileResponse> localVarResp = getExcelAddinWithHttpInfo(version, opts);
            return localVarResp.getData();
        }

        /**
         * Execute getExcelAddin request with HTTP info returned
         * @return ApiResponse&lt;FileResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<FileResponse> executeWithHttpInfo() throws ApiException {
            return getExcelAddinWithHttpInfo(version);
        }

        /**
         * Execute getExcelAddin request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;FileResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<FileResponse> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return getExcelAddinWithHttpInfo(version, opts);
        }

        /**
         * Execute getExcelAddin request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<FileResponse> _callback) throws ApiException {
            return getExcelAddinAsync(version, _callback);
        }

        /**
         * Execute getExcelAddin request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<FileResponse> _callback, ConfigurationOptions opts) throws ApiException {
            return getExcelAddinAsync(version, _callback, opts);
        }
    }

    /**
     * GetExcelAddin: Download Excel Addin
     * Download the LUSID Excel Addin for Microsoft Excel. Not providing a specific value will return the latest version being returned
     * @return APIgetExcelAddinRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIgetExcelAddinRequest getExcelAddin() {
        return new APIgetExcelAddinRequest();
    }
    private okhttp3.Call getLusidVersionsCall(final ApiCallback _callback) throws ApiException {
        return getLusidVersionsCall( _callback, new ConfigurationOptions());
    }

    private okhttp3.Call getLusidVersionsCall(final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/metadata/versions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLusidVersionsValidateBeforeCall(final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        return getLusidVersionsCall(_callback, opts);

    }


    private ApiResponse<VersionSummaryDto> getLusidVersionsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getLusidVersionsValidateBeforeCall(null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<VersionSummaryDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<VersionSummaryDto> getLusidVersionsWithHttpInfo(ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = getLusidVersionsValidateBeforeCall(null, opts);
        Type localVarReturnType = new TypeToken<VersionSummaryDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getLusidVersionsAsync(final ApiCallback<VersionSummaryDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = getLusidVersionsValidateBeforeCall(_callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<VersionSummaryDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call getLusidVersionsAsync(final ApiCallback<VersionSummaryDto> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = getLusidVersionsValidateBeforeCall(_callback, opts);
        Type localVarReturnType = new TypeToken<VersionSummaryDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetLusidVersionsRequest {

        private APIgetLusidVersionsRequest() {
        }

        /**
         * Build call for getLusidVersions
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Collection of versions associated with LUSID </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getLusidVersionsCall(_callback);
        }

        /**
         * Execute getLusidVersions request
         * @return VersionSummaryDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Collection of versions associated with LUSID </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public VersionSummaryDto execute() throws ApiException {
            ApiResponse<VersionSummaryDto> localVarResp = getLusidVersionsWithHttpInfo();
            return localVarResp.getData();
        }

        /**
         * Execute getLusidVersions request. Use any specified configuration options to override any other configuration for this request only.
         * @return VersionSummaryDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Collection of versions associated with LUSID </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public VersionSummaryDto execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<VersionSummaryDto> localVarResp = getLusidVersionsWithHttpInfo(opts);
            return localVarResp.getData();
        }

        /**
         * Execute getLusidVersions request with HTTP info returned
         * @return ApiResponse&lt;VersionSummaryDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Collection of versions associated with LUSID </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<VersionSummaryDto> executeWithHttpInfo() throws ApiException {
            return getLusidVersionsWithHttpInfo();
        }

        /**
         * Execute getLusidVersions request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;VersionSummaryDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Collection of versions associated with LUSID </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<VersionSummaryDto> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return getLusidVersionsWithHttpInfo(opts);
        }

        /**
         * Execute getLusidVersions request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Collection of versions associated with LUSID </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<VersionSummaryDto> _callback) throws ApiException {
            return getLusidVersionsAsync(_callback);
        }

        /**
         * Execute getLusidVersions request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Collection of versions associated with LUSID </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<VersionSummaryDto> _callback, ConfigurationOptions opts) throws ApiException {
            return getLusidVersionsAsync(_callback, opts);
        }
    }

    /**
     * GetLusidVersions: Get LUSID versions
     * Get the semantic versions associated with LUSID and its ecosystem
     * @return APIgetLusidVersionsRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Collection of versions associated with LUSID </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIgetLusidVersionsRequest getLusidVersions() {
        return new APIgetLusidVersionsRequest();
    }
    private okhttp3.Call listAccessControlledResourcesCall(String filter, final ApiCallback _callback) throws ApiException {
        return listAccessControlledResourcesCall(filter,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call listAccessControlledResourcesCall(String filter, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/metadata/access/resources";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAccessControlledResourcesValidateBeforeCall(String filter, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        return listAccessControlledResourcesCall(filter, _callback, opts);

    }


    private ApiResponse<ResourceListOfAccessControlledResource> listAccessControlledResourcesWithHttpInfo(String filter) throws ApiException {
        okhttp3.Call localVarCall = listAccessControlledResourcesValidateBeforeCall(filter, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<ResourceListOfAccessControlledResource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<ResourceListOfAccessControlledResource> listAccessControlledResourcesWithHttpInfo(String filter, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = listAccessControlledResourcesValidateBeforeCall(filter, null, opts);
        Type localVarReturnType = new TypeToken<ResourceListOfAccessControlledResource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAccessControlledResourcesAsync(String filter, final ApiCallback<ResourceListOfAccessControlledResource> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAccessControlledResourcesValidateBeforeCall(filter, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<ResourceListOfAccessControlledResource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call listAccessControlledResourcesAsync(String filter, final ApiCallback<ResourceListOfAccessControlledResource> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = listAccessControlledResourcesValidateBeforeCall(filter, _callback, opts);
        Type localVarReturnType = new TypeToken<ResourceListOfAccessControlledResource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIlistAccessControlledResourcesRequest {
        private String filter;

        private APIlistAccessControlledResourcesRequest() {
        }

        /**
         * Set filter
         * @param filter Optional. Expression to filter the result set.    For example, to filter on the Application, use \&quot;application eq &#39;string&#39;\&quot;   Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid. (optional)
         * @return APIlistAccessControlledResourcesRequest
         */
        public APIlistAccessControlledResourcesRequest filter(String filter) {
            this.filter = filter;
            return this;
        }

        /**
         * Build call for listAccessControlledResources
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listAccessControlledResourcesCall(filter, _callback);
        }

        /**
         * Execute listAccessControlledResources request
         * @return ResourceListOfAccessControlledResource
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ResourceListOfAccessControlledResource execute() throws ApiException {
            ApiResponse<ResourceListOfAccessControlledResource> localVarResp = listAccessControlledResourcesWithHttpInfo(filter);
            return localVarResp.getData();
        }

        /**
         * Execute listAccessControlledResources request. Use any specified configuration options to override any other configuration for this request only.
         * @return ResourceListOfAccessControlledResource
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ResourceListOfAccessControlledResource execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<ResourceListOfAccessControlledResource> localVarResp = listAccessControlledResourcesWithHttpInfo(filter, opts);
            return localVarResp.getData();
        }

        /**
         * Execute listAccessControlledResources request with HTTP info returned
         * @return ApiResponse&lt;ResourceListOfAccessControlledResource&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ResourceListOfAccessControlledResource> executeWithHttpInfo() throws ApiException {
            return listAccessControlledResourcesWithHttpInfo(filter);
        }

        /**
         * Execute listAccessControlledResources request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;ResourceListOfAccessControlledResource&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ResourceListOfAccessControlledResource> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return listAccessControlledResourcesWithHttpInfo(filter, opts);
        }

        /**
         * Execute listAccessControlledResources request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ResourceListOfAccessControlledResource> _callback) throws ApiException {
            return listAccessControlledResourcesAsync(filter, _callback);
        }

        /**
         * Execute listAccessControlledResources request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ResourceListOfAccessControlledResource> _callback, ConfigurationOptions opts) throws ApiException {
            return listAccessControlledResourcesAsync(filter, _callback, opts);
        }
    }

    /**
     * ListAccessControlledResources: Get resources available for access control
     * Get the comprehensive set of resources that are available for access control
     * @return APIlistAccessControlledResourcesRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIlistAccessControlledResourcesRequest listAccessControlledResources() {
        return new APIlistAccessControlledResourcesRequest();
    }
}
