/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.api;

import com.finbourne.lusid.ApiCallback;
import com.finbourne.lusid.ApiClient;
import com.finbourne.lusid.ApiException;
import com.finbourne.lusid.ApiResponse;
import com.finbourne.lusid.Configuration;
import com.finbourne.lusid.Pair;
import com.finbourne.lusid.ProgressRequestBody;
import com.finbourne.lusid.ProgressResponseBody;
import com.finbourne.lusid.extensions.ConfigurationOptions;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.finbourne.lusid.model.AnnulSingleStructuredDataResponse;
import com.finbourne.lusid.model.GetCounterpartyAgreementResponse;
import com.finbourne.lusid.model.GetCreditSupportAnnexResponse;
import com.finbourne.lusid.model.LusidProblemDetails;
import com.finbourne.lusid.model.LusidValidationProblemDetails;
import java.time.OffsetDateTime;
import com.finbourne.lusid.model.ResourceListOfGetCounterpartyAgreementResponse;
import com.finbourne.lusid.model.ResourceListOfGetCreditSupportAnnexResponse;
import com.finbourne.lusid.model.UpsertCounterpartyAgreementRequest;
import com.finbourne.lusid.model.UpsertCreditSupportAnnexRequest;
import com.finbourne.lusid.model.UpsertSingleStructuredDataResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CounterpartiesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CounterpartiesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CounterpartiesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call deleteCounterpartyAgreementCall(String scope, String code, final ApiCallback _callback) throws ApiException {
        return deleteCounterpartyAgreementCall(scope, code,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call deleteCounterpartyAgreementCall(String scope, String code, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/counterparties/counterpartyagreements/{scope}/{code}"
            .replace("{" + "scope" + "}", localVarApiClient.escapeString(scope.toString()))
            .replace("{" + "code" + "}", localVarApiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteCounterpartyAgreementValidateBeforeCall(String scope, String code, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling deleteCounterpartyAgreement(Async)");
        }

        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling deleteCounterpartyAgreement(Async)");
        }

        return deleteCounterpartyAgreementCall(scope, code, _callback, opts);

    }


    private ApiResponse<AnnulSingleStructuredDataResponse> deleteCounterpartyAgreementWithHttpInfo(String scope, String code) throws ApiException {
        okhttp3.Call localVarCall = deleteCounterpartyAgreementValidateBeforeCall(scope, code, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<AnnulSingleStructuredDataResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<AnnulSingleStructuredDataResponse> deleteCounterpartyAgreementWithHttpInfo(String scope, String code, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = deleteCounterpartyAgreementValidateBeforeCall(scope, code, null, opts);
        Type localVarReturnType = new TypeToken<AnnulSingleStructuredDataResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteCounterpartyAgreementAsync(String scope, String code, final ApiCallback<AnnulSingleStructuredDataResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteCounterpartyAgreementValidateBeforeCall(scope, code, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<AnnulSingleStructuredDataResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call deleteCounterpartyAgreementAsync(String scope, String code, final ApiCallback<AnnulSingleStructuredDataResponse> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = deleteCounterpartyAgreementValidateBeforeCall(scope, code, _callback, opts);
        Type localVarReturnType = new TypeToken<AnnulSingleStructuredDataResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIdeleteCounterpartyAgreementRequest {
        private final String scope;
        private final String code;

        private APIdeleteCounterpartyAgreementRequest(String scope, String code) {
            this.scope = scope;
            this.code = code;
        }

        /**
         * Build call for deleteCounterpartyAgreement
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The AsAt of deletion or failure </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteCounterpartyAgreementCall(scope, code, _callback);
        }

        /**
         * Execute deleteCounterpartyAgreement request
         * @return AnnulSingleStructuredDataResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The AsAt of deletion or failure </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public AnnulSingleStructuredDataResponse execute() throws ApiException {
            ApiResponse<AnnulSingleStructuredDataResponse> localVarResp = deleteCounterpartyAgreementWithHttpInfo(scope, code);
            return localVarResp.getData();
        }

        /**
         * Execute deleteCounterpartyAgreement request. Use any specified configuration options to override any other configuration for this request only.
         * @return AnnulSingleStructuredDataResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The AsAt of deletion or failure </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public AnnulSingleStructuredDataResponse execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<AnnulSingleStructuredDataResponse> localVarResp = deleteCounterpartyAgreementWithHttpInfo(scope, code, opts);
            return localVarResp.getData();
        }

        /**
         * Execute deleteCounterpartyAgreement request with HTTP info returned
         * @return ApiResponse&lt;AnnulSingleStructuredDataResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The AsAt of deletion or failure </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AnnulSingleStructuredDataResponse> executeWithHttpInfo() throws ApiException {
            return deleteCounterpartyAgreementWithHttpInfo(scope, code);
        }

        /**
         * Execute deleteCounterpartyAgreement request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;AnnulSingleStructuredDataResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The AsAt of deletion or failure </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AnnulSingleStructuredDataResponse> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return deleteCounterpartyAgreementWithHttpInfo(scope, code, opts);
        }

        /**
         * Execute deleteCounterpartyAgreement request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The AsAt of deletion or failure </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AnnulSingleStructuredDataResponse> _callback) throws ApiException {
            return deleteCounterpartyAgreementAsync(scope, code, _callback);
        }

        /**
         * Execute deleteCounterpartyAgreement request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The AsAt of deletion or failure </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AnnulSingleStructuredDataResponse> _callback, ConfigurationOptions opts) throws ApiException {
            return deleteCounterpartyAgreementAsync(scope, code, _callback, opts);
        }
    }

    /**
     * [EARLY ACCESS] DeleteCounterpartyAgreement: Delete the Counterparty Agreement of given scope and code
     * Delete the specified Counterparty Agreement from a single scope.  The response will return either detail of the deleted item, or an explanation (failure) as to why this did not succeed.     It is important to always check for any unsuccessful response.
     * @param scope The scope of the Counterparty Agreement to delete. (required)
     * @param code The Counterparty Agreement to delete. (required)
     * @return APIdeleteCounterpartyAgreementRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The AsAt of deletion or failure </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIdeleteCounterpartyAgreementRequest deleteCounterpartyAgreement(String scope, String code) {
        return new APIdeleteCounterpartyAgreementRequest(scope, code);
    }
    private okhttp3.Call deleteCreditSupportAnnexCall(String scope, String code, final ApiCallback _callback) throws ApiException {
        return deleteCreditSupportAnnexCall(scope, code,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call deleteCreditSupportAnnexCall(String scope, String code, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/counterparties/creditsupportannexes/{scope}/{code}"
            .replace("{" + "scope" + "}", localVarApiClient.escapeString(scope.toString()))
            .replace("{" + "code" + "}", localVarApiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteCreditSupportAnnexValidateBeforeCall(String scope, String code, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling deleteCreditSupportAnnex(Async)");
        }

        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling deleteCreditSupportAnnex(Async)");
        }

        return deleteCreditSupportAnnexCall(scope, code, _callback, opts);

    }


    private ApiResponse<AnnulSingleStructuredDataResponse> deleteCreditSupportAnnexWithHttpInfo(String scope, String code) throws ApiException {
        okhttp3.Call localVarCall = deleteCreditSupportAnnexValidateBeforeCall(scope, code, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<AnnulSingleStructuredDataResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<AnnulSingleStructuredDataResponse> deleteCreditSupportAnnexWithHttpInfo(String scope, String code, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = deleteCreditSupportAnnexValidateBeforeCall(scope, code, null, opts);
        Type localVarReturnType = new TypeToken<AnnulSingleStructuredDataResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteCreditSupportAnnexAsync(String scope, String code, final ApiCallback<AnnulSingleStructuredDataResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteCreditSupportAnnexValidateBeforeCall(scope, code, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<AnnulSingleStructuredDataResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call deleteCreditSupportAnnexAsync(String scope, String code, final ApiCallback<AnnulSingleStructuredDataResponse> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = deleteCreditSupportAnnexValidateBeforeCall(scope, code, _callback, opts);
        Type localVarReturnType = new TypeToken<AnnulSingleStructuredDataResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIdeleteCreditSupportAnnexRequest {
        private final String scope;
        private final String code;

        private APIdeleteCreditSupportAnnexRequest(String scope, String code) {
            this.scope = scope;
            this.code = code;
        }

        /**
         * Build call for deleteCreditSupportAnnex
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The AsAt of deletion or failure </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteCreditSupportAnnexCall(scope, code, _callback);
        }

        /**
         * Execute deleteCreditSupportAnnex request
         * @return AnnulSingleStructuredDataResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The AsAt of deletion or failure </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public AnnulSingleStructuredDataResponse execute() throws ApiException {
            ApiResponse<AnnulSingleStructuredDataResponse> localVarResp = deleteCreditSupportAnnexWithHttpInfo(scope, code);
            return localVarResp.getData();
        }

        /**
         * Execute deleteCreditSupportAnnex request. Use any specified configuration options to override any other configuration for this request only.
         * @return AnnulSingleStructuredDataResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The AsAt of deletion or failure </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public AnnulSingleStructuredDataResponse execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<AnnulSingleStructuredDataResponse> localVarResp = deleteCreditSupportAnnexWithHttpInfo(scope, code, opts);
            return localVarResp.getData();
        }

        /**
         * Execute deleteCreditSupportAnnex request with HTTP info returned
         * @return ApiResponse&lt;AnnulSingleStructuredDataResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The AsAt of deletion or failure </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AnnulSingleStructuredDataResponse> executeWithHttpInfo() throws ApiException {
            return deleteCreditSupportAnnexWithHttpInfo(scope, code);
        }

        /**
         * Execute deleteCreditSupportAnnex request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;AnnulSingleStructuredDataResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The AsAt of deletion or failure </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AnnulSingleStructuredDataResponse> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return deleteCreditSupportAnnexWithHttpInfo(scope, code, opts);
        }

        /**
         * Execute deleteCreditSupportAnnex request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The AsAt of deletion or failure </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AnnulSingleStructuredDataResponse> _callback) throws ApiException {
            return deleteCreditSupportAnnexAsync(scope, code, _callback);
        }

        /**
         * Execute deleteCreditSupportAnnex request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The AsAt of deletion or failure </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AnnulSingleStructuredDataResponse> _callback, ConfigurationOptions opts) throws ApiException {
            return deleteCreditSupportAnnexAsync(scope, code, _callback, opts);
        }
    }

    /**
     * [EARLY ACCESS] DeleteCreditSupportAnnex: Delete the Credit Support Annex of given scope and code
     * Delete the specified Credit Support Annex from a single scope.  The response will return either detail of the deleted item, or an explanation (failure) as to why this did not succeed.     It is important to always check for any unsuccessful response.
     * @param scope The scope of the Credit Support Annex to delete. (required)
     * @param code The Credit Support Annex to delete. (required)
     * @return APIdeleteCreditSupportAnnexRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The AsAt of deletion or failure </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIdeleteCreditSupportAnnexRequest deleteCreditSupportAnnex(String scope, String code) {
        return new APIdeleteCreditSupportAnnexRequest(scope, code);
    }
    private okhttp3.Call getCounterpartyAgreementCall(String scope, String code, OffsetDateTime asAt, final ApiCallback _callback) throws ApiException {
        return getCounterpartyAgreementCall(scope, code, asAt,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call getCounterpartyAgreementCall(String scope, String code, OffsetDateTime asAt, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/counterparties/counterpartyagreements/{scope}/{code}"
            .replace("{" + "scope" + "}", localVarApiClient.escapeString(scope.toString()))
            .replace("{" + "code" + "}", localVarApiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (asAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asAt", asAt));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCounterpartyAgreementValidateBeforeCall(String scope, String code, OffsetDateTime asAt, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling getCounterpartyAgreement(Async)");
        }

        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling getCounterpartyAgreement(Async)");
        }

        return getCounterpartyAgreementCall(scope, code, asAt, _callback, opts);

    }


    private ApiResponse<GetCounterpartyAgreementResponse> getCounterpartyAgreementWithHttpInfo(String scope, String code, OffsetDateTime asAt) throws ApiException {
        okhttp3.Call localVarCall = getCounterpartyAgreementValidateBeforeCall(scope, code, asAt, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<GetCounterpartyAgreementResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<GetCounterpartyAgreementResponse> getCounterpartyAgreementWithHttpInfo(String scope, String code, OffsetDateTime asAt, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = getCounterpartyAgreementValidateBeforeCall(scope, code, asAt, null, opts);
        Type localVarReturnType = new TypeToken<GetCounterpartyAgreementResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCounterpartyAgreementAsync(String scope, String code, OffsetDateTime asAt, final ApiCallback<GetCounterpartyAgreementResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCounterpartyAgreementValidateBeforeCall(scope, code, asAt, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<GetCounterpartyAgreementResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call getCounterpartyAgreementAsync(String scope, String code, OffsetDateTime asAt, final ApiCallback<GetCounterpartyAgreementResponse> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = getCounterpartyAgreementValidateBeforeCall(scope, code, asAt, _callback, opts);
        Type localVarReturnType = new TypeToken<GetCounterpartyAgreementResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetCounterpartyAgreementRequest {
        private final String scope;
        private final String code;
        private OffsetDateTime asAt;

        private APIgetCounterpartyAgreementRequest(String scope, String code) {
            this.scope = scope;
            this.code = code;
        }

        /**
         * Set asAt
         * @param asAt The asAt datetime at which to retrieve the Counterparty Agreement. Defaults to return the latest version if not specified. (optional)
         * @return APIgetCounterpartyAgreementRequest
         */
        public APIgetCounterpartyAgreementRequest asAt(OffsetDateTime asAt) {
            this.asAt = asAt;
            return this;
        }

        /**
         * Build call for getCounterpartyAgreement
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The successfully retrieved Counterparty Agreement or any failure </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCounterpartyAgreementCall(scope, code, asAt, _callback);
        }

        /**
         * Execute getCounterpartyAgreement request
         * @return GetCounterpartyAgreementResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The successfully retrieved Counterparty Agreement or any failure </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public GetCounterpartyAgreementResponse execute() throws ApiException {
            ApiResponse<GetCounterpartyAgreementResponse> localVarResp = getCounterpartyAgreementWithHttpInfo(scope, code, asAt);
            return localVarResp.getData();
        }

        /**
         * Execute getCounterpartyAgreement request. Use any specified configuration options to override any other configuration for this request only.
         * @return GetCounterpartyAgreementResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The successfully retrieved Counterparty Agreement or any failure </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public GetCounterpartyAgreementResponse execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<GetCounterpartyAgreementResponse> localVarResp = getCounterpartyAgreementWithHttpInfo(scope, code, asAt, opts);
            return localVarResp.getData();
        }

        /**
         * Execute getCounterpartyAgreement request with HTTP info returned
         * @return ApiResponse&lt;GetCounterpartyAgreementResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The successfully retrieved Counterparty Agreement or any failure </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GetCounterpartyAgreementResponse> executeWithHttpInfo() throws ApiException {
            return getCounterpartyAgreementWithHttpInfo(scope, code, asAt);
        }

        /**
         * Execute getCounterpartyAgreement request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;GetCounterpartyAgreementResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The successfully retrieved Counterparty Agreement or any failure </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GetCounterpartyAgreementResponse> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return getCounterpartyAgreementWithHttpInfo(scope, code, asAt, opts);
        }

        /**
         * Execute getCounterpartyAgreement request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The successfully retrieved Counterparty Agreement or any failure </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GetCounterpartyAgreementResponse> _callback) throws ApiException {
            return getCounterpartyAgreementAsync(scope, code, asAt, _callback);
        }

        /**
         * Execute getCounterpartyAgreement request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The successfully retrieved Counterparty Agreement or any failure </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GetCounterpartyAgreementResponse> _callback, ConfigurationOptions opts) throws ApiException {
            return getCounterpartyAgreementAsync(scope, code, asAt, _callback, opts);
        }
    }

    /**
     * [EARLY ACCESS] GetCounterpartyAgreement: Get Counterparty Agreement
     * Get a Counterparty Agreement from a single scope.  The response will return either the Counterparty Agreement that has been stored, or a failure explaining why the request was unsuccessful.  It is important to always check for any unsuccessful requests (failures).
     * @param scope The scope of the Counterparty Agreement to retrieve. (required)
     * @param code The name of the Counterparty Agreement to retrieve the data for. (required)
     * @return APIgetCounterpartyAgreementRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The successfully retrieved Counterparty Agreement or any failure </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIgetCounterpartyAgreementRequest getCounterpartyAgreement(String scope, String code) {
        return new APIgetCounterpartyAgreementRequest(scope, code);
    }
    private okhttp3.Call getCreditSupportAnnexCall(String scope, String code, OffsetDateTime asAt, final ApiCallback _callback) throws ApiException {
        return getCreditSupportAnnexCall(scope, code, asAt,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call getCreditSupportAnnexCall(String scope, String code, OffsetDateTime asAt, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/counterparties/creditsupportannexes/{scope}/{code}"
            .replace("{" + "scope" + "}", localVarApiClient.escapeString(scope.toString()))
            .replace("{" + "code" + "}", localVarApiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (asAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asAt", asAt));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCreditSupportAnnexValidateBeforeCall(String scope, String code, OffsetDateTime asAt, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling getCreditSupportAnnex(Async)");
        }

        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling getCreditSupportAnnex(Async)");
        }

        return getCreditSupportAnnexCall(scope, code, asAt, _callback, opts);

    }


    private ApiResponse<GetCreditSupportAnnexResponse> getCreditSupportAnnexWithHttpInfo(String scope, String code, OffsetDateTime asAt) throws ApiException {
        okhttp3.Call localVarCall = getCreditSupportAnnexValidateBeforeCall(scope, code, asAt, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<GetCreditSupportAnnexResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<GetCreditSupportAnnexResponse> getCreditSupportAnnexWithHttpInfo(String scope, String code, OffsetDateTime asAt, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = getCreditSupportAnnexValidateBeforeCall(scope, code, asAt, null, opts);
        Type localVarReturnType = new TypeToken<GetCreditSupportAnnexResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCreditSupportAnnexAsync(String scope, String code, OffsetDateTime asAt, final ApiCallback<GetCreditSupportAnnexResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCreditSupportAnnexValidateBeforeCall(scope, code, asAt, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<GetCreditSupportAnnexResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call getCreditSupportAnnexAsync(String scope, String code, OffsetDateTime asAt, final ApiCallback<GetCreditSupportAnnexResponse> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = getCreditSupportAnnexValidateBeforeCall(scope, code, asAt, _callback, opts);
        Type localVarReturnType = new TypeToken<GetCreditSupportAnnexResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetCreditSupportAnnexRequest {
        private final String scope;
        private final String code;
        private OffsetDateTime asAt;

        private APIgetCreditSupportAnnexRequest(String scope, String code) {
            this.scope = scope;
            this.code = code;
        }

        /**
         * Set asAt
         * @param asAt The asAt datetime at which to retrieve the Credit Support Annex . Defaults to return the latest version if not specified. (optional)
         * @return APIgetCreditSupportAnnexRequest
         */
        public APIgetCreditSupportAnnexRequest asAt(OffsetDateTime asAt) {
            this.asAt = asAt;
            return this;
        }

        /**
         * Build call for getCreditSupportAnnex
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The successfully retrieved credit support annexes or any failure </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCreditSupportAnnexCall(scope, code, asAt, _callback);
        }

        /**
         * Execute getCreditSupportAnnex request
         * @return GetCreditSupportAnnexResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The successfully retrieved credit support annexes or any failure </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public GetCreditSupportAnnexResponse execute() throws ApiException {
            ApiResponse<GetCreditSupportAnnexResponse> localVarResp = getCreditSupportAnnexWithHttpInfo(scope, code, asAt);
            return localVarResp.getData();
        }

        /**
         * Execute getCreditSupportAnnex request. Use any specified configuration options to override any other configuration for this request only.
         * @return GetCreditSupportAnnexResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The successfully retrieved credit support annexes or any failure </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public GetCreditSupportAnnexResponse execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<GetCreditSupportAnnexResponse> localVarResp = getCreditSupportAnnexWithHttpInfo(scope, code, asAt, opts);
            return localVarResp.getData();
        }

        /**
         * Execute getCreditSupportAnnex request with HTTP info returned
         * @return ApiResponse&lt;GetCreditSupportAnnexResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The successfully retrieved credit support annexes or any failure </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GetCreditSupportAnnexResponse> executeWithHttpInfo() throws ApiException {
            return getCreditSupportAnnexWithHttpInfo(scope, code, asAt);
        }

        /**
         * Execute getCreditSupportAnnex request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;GetCreditSupportAnnexResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The successfully retrieved credit support annexes or any failure </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GetCreditSupportAnnexResponse> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return getCreditSupportAnnexWithHttpInfo(scope, code, asAt, opts);
        }

        /**
         * Execute getCreditSupportAnnex request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The successfully retrieved credit support annexes or any failure </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GetCreditSupportAnnexResponse> _callback) throws ApiException {
            return getCreditSupportAnnexAsync(scope, code, asAt, _callback);
        }

        /**
         * Execute getCreditSupportAnnex request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The successfully retrieved credit support annexes or any failure </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GetCreditSupportAnnexResponse> _callback, ConfigurationOptions opts) throws ApiException {
            return getCreditSupportAnnexAsync(scope, code, asAt, _callback, opts);
        }
    }

    /**
     * [EARLY ACCESS] GetCreditSupportAnnex: Get Credit Support Annex
     * Get a Credit Support Annex from a single scope.  The response will return either the Credit Support Annex that has been stored, or a failure explaining why the request was unsuccessful.  It is important to always check for any unsuccessful requests (failures).
     * @param scope The scope of the Credit Support Annex to retrieve. (required)
     * @param code The name of the Credit Support Annex to retrieve the data for. (required)
     * @return APIgetCreditSupportAnnexRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The successfully retrieved credit support annexes or any failure </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIgetCreditSupportAnnexRequest getCreditSupportAnnex(String scope, String code) {
        return new APIgetCreditSupportAnnexRequest(scope, code);
    }
    private okhttp3.Call listCounterpartyAgreementsCall(OffsetDateTime asAt, final ApiCallback _callback) throws ApiException {
        return listCounterpartyAgreementsCall(asAt,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call listCounterpartyAgreementsCall(OffsetDateTime asAt, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/counterparties/counterpartyagreements";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (asAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asAt", asAt));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listCounterpartyAgreementsValidateBeforeCall(OffsetDateTime asAt, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        return listCounterpartyAgreementsCall(asAt, _callback, opts);

    }


    private ApiResponse<ResourceListOfGetCounterpartyAgreementResponse> listCounterpartyAgreementsWithHttpInfo(OffsetDateTime asAt) throws ApiException {
        okhttp3.Call localVarCall = listCounterpartyAgreementsValidateBeforeCall(asAt, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<ResourceListOfGetCounterpartyAgreementResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<ResourceListOfGetCounterpartyAgreementResponse> listCounterpartyAgreementsWithHttpInfo(OffsetDateTime asAt, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = listCounterpartyAgreementsValidateBeforeCall(asAt, null, opts);
        Type localVarReturnType = new TypeToken<ResourceListOfGetCounterpartyAgreementResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listCounterpartyAgreementsAsync(OffsetDateTime asAt, final ApiCallback<ResourceListOfGetCounterpartyAgreementResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listCounterpartyAgreementsValidateBeforeCall(asAt, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<ResourceListOfGetCounterpartyAgreementResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call listCounterpartyAgreementsAsync(OffsetDateTime asAt, final ApiCallback<ResourceListOfGetCounterpartyAgreementResponse> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = listCounterpartyAgreementsValidateBeforeCall(asAt, _callback, opts);
        Type localVarReturnType = new TypeToken<ResourceListOfGetCounterpartyAgreementResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIlistCounterpartyAgreementsRequest {
        private OffsetDateTime asAt;

        private APIlistCounterpartyAgreementsRequest() {
        }

        /**
         * Set asAt
         * @param asAt The asAt datetime at which to list the Counterparty Agreements. Defaults to latest if not specified. (optional)
         * @return APIlistCounterpartyAgreementsRequest
         */
        public APIlistCounterpartyAgreementsRequest asAt(OffsetDateTime asAt) {
            this.asAt = asAt;
            return this;
        }

        /**
         * Build call for listCounterpartyAgreements
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested Counterparty Agreements </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listCounterpartyAgreementsCall(asAt, _callback);
        }

        /**
         * Execute listCounterpartyAgreements request
         * @return ResourceListOfGetCounterpartyAgreementResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested Counterparty Agreements </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ResourceListOfGetCounterpartyAgreementResponse execute() throws ApiException {
            ApiResponse<ResourceListOfGetCounterpartyAgreementResponse> localVarResp = listCounterpartyAgreementsWithHttpInfo(asAt);
            return localVarResp.getData();
        }

        /**
         * Execute listCounterpartyAgreements request. Use any specified configuration options to override any other configuration for this request only.
         * @return ResourceListOfGetCounterpartyAgreementResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested Counterparty Agreements </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ResourceListOfGetCounterpartyAgreementResponse execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<ResourceListOfGetCounterpartyAgreementResponse> localVarResp = listCounterpartyAgreementsWithHttpInfo(asAt, opts);
            return localVarResp.getData();
        }

        /**
         * Execute listCounterpartyAgreements request with HTTP info returned
         * @return ApiResponse&lt;ResourceListOfGetCounterpartyAgreementResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested Counterparty Agreements </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ResourceListOfGetCounterpartyAgreementResponse> executeWithHttpInfo() throws ApiException {
            return listCounterpartyAgreementsWithHttpInfo(asAt);
        }

        /**
         * Execute listCounterpartyAgreements request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;ResourceListOfGetCounterpartyAgreementResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested Counterparty Agreements </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ResourceListOfGetCounterpartyAgreementResponse> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return listCounterpartyAgreementsWithHttpInfo(asAt, opts);
        }

        /**
         * Execute listCounterpartyAgreements request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested Counterparty Agreements </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ResourceListOfGetCounterpartyAgreementResponse> _callback) throws ApiException {
            return listCounterpartyAgreementsAsync(asAt, _callback);
        }

        /**
         * Execute listCounterpartyAgreements request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested Counterparty Agreements </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ResourceListOfGetCounterpartyAgreementResponse> _callback, ConfigurationOptions opts) throws ApiException {
            return listCounterpartyAgreementsAsync(asAt, _callback, opts);
        }
    }

    /**
     * [EARLY ACCESS] ListCounterpartyAgreements: List the set of Counterparty Agreements
     * List the set of Counterparty Agreements at the specified AsAt date/time
     * @return APIlistCounterpartyAgreementsRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested Counterparty Agreements </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIlistCounterpartyAgreementsRequest listCounterpartyAgreements() {
        return new APIlistCounterpartyAgreementsRequest();
    }
    private okhttp3.Call listCreditSupportAnnexesCall(OffsetDateTime asAt, final ApiCallback _callback) throws ApiException {
        return listCreditSupportAnnexesCall(asAt,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call listCreditSupportAnnexesCall(OffsetDateTime asAt, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/counterparties/creditsupportannexes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (asAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asAt", asAt));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listCreditSupportAnnexesValidateBeforeCall(OffsetDateTime asAt, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        return listCreditSupportAnnexesCall(asAt, _callback, opts);

    }


    private ApiResponse<ResourceListOfGetCreditSupportAnnexResponse> listCreditSupportAnnexesWithHttpInfo(OffsetDateTime asAt) throws ApiException {
        okhttp3.Call localVarCall = listCreditSupportAnnexesValidateBeforeCall(asAt, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<ResourceListOfGetCreditSupportAnnexResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<ResourceListOfGetCreditSupportAnnexResponse> listCreditSupportAnnexesWithHttpInfo(OffsetDateTime asAt, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = listCreditSupportAnnexesValidateBeforeCall(asAt, null, opts);
        Type localVarReturnType = new TypeToken<ResourceListOfGetCreditSupportAnnexResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listCreditSupportAnnexesAsync(OffsetDateTime asAt, final ApiCallback<ResourceListOfGetCreditSupportAnnexResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listCreditSupportAnnexesValidateBeforeCall(asAt, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<ResourceListOfGetCreditSupportAnnexResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call listCreditSupportAnnexesAsync(OffsetDateTime asAt, final ApiCallback<ResourceListOfGetCreditSupportAnnexResponse> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = listCreditSupportAnnexesValidateBeforeCall(asAt, _callback, opts);
        Type localVarReturnType = new TypeToken<ResourceListOfGetCreditSupportAnnexResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIlistCreditSupportAnnexesRequest {
        private OffsetDateTime asAt;

        private APIlistCreditSupportAnnexesRequest() {
        }

        /**
         * Set asAt
         * @param asAt The asAt datetime at which to list the Credit Support Annexes. Defaults to latest if not specified. (optional)
         * @return APIlistCreditSupportAnnexesRequest
         */
        public APIlistCreditSupportAnnexesRequest asAt(OffsetDateTime asAt) {
            this.asAt = asAt;
            return this;
        }

        /**
         * Build call for listCreditSupportAnnexes
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested Credit Support Annexes </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listCreditSupportAnnexesCall(asAt, _callback);
        }

        /**
         * Execute listCreditSupportAnnexes request
         * @return ResourceListOfGetCreditSupportAnnexResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested Credit Support Annexes </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ResourceListOfGetCreditSupportAnnexResponse execute() throws ApiException {
            ApiResponse<ResourceListOfGetCreditSupportAnnexResponse> localVarResp = listCreditSupportAnnexesWithHttpInfo(asAt);
            return localVarResp.getData();
        }

        /**
         * Execute listCreditSupportAnnexes request. Use any specified configuration options to override any other configuration for this request only.
         * @return ResourceListOfGetCreditSupportAnnexResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested Credit Support Annexes </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ResourceListOfGetCreditSupportAnnexResponse execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<ResourceListOfGetCreditSupportAnnexResponse> localVarResp = listCreditSupportAnnexesWithHttpInfo(asAt, opts);
            return localVarResp.getData();
        }

        /**
         * Execute listCreditSupportAnnexes request with HTTP info returned
         * @return ApiResponse&lt;ResourceListOfGetCreditSupportAnnexResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested Credit Support Annexes </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ResourceListOfGetCreditSupportAnnexResponse> executeWithHttpInfo() throws ApiException {
            return listCreditSupportAnnexesWithHttpInfo(asAt);
        }

        /**
         * Execute listCreditSupportAnnexes request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;ResourceListOfGetCreditSupportAnnexResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested Credit Support Annexes </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ResourceListOfGetCreditSupportAnnexResponse> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return listCreditSupportAnnexesWithHttpInfo(asAt, opts);
        }

        /**
         * Execute listCreditSupportAnnexes request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested Credit Support Annexes </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ResourceListOfGetCreditSupportAnnexResponse> _callback) throws ApiException {
            return listCreditSupportAnnexesAsync(asAt, _callback);
        }

        /**
         * Execute listCreditSupportAnnexes request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested Credit Support Annexes </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ResourceListOfGetCreditSupportAnnexResponse> _callback, ConfigurationOptions opts) throws ApiException {
            return listCreditSupportAnnexesAsync(asAt, _callback, opts);
        }
    }

    /**
     * [EARLY ACCESS] ListCreditSupportAnnexes: List the set of Credit Support Annexes
     * List the set of Credit Support Annexes at the specified AsAt date/time
     * @return APIlistCreditSupportAnnexesRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested Credit Support Annexes </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIlistCreditSupportAnnexesRequest listCreditSupportAnnexes() {
        return new APIlistCreditSupportAnnexesRequest();
    }
    private okhttp3.Call upsertCounterpartyAgreementCall(UpsertCounterpartyAgreementRequest upsertCounterpartyAgreementRequest, final ApiCallback _callback) throws ApiException {
        return upsertCounterpartyAgreementCall(upsertCounterpartyAgreementRequest,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call upsertCounterpartyAgreementCall(UpsertCounterpartyAgreementRequest upsertCounterpartyAgreementRequest, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = upsertCounterpartyAgreementRequest;

        // create path and map variables
        String localVarPath = "/api/counterparties/counterpartyagreements";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call upsertCounterpartyAgreementValidateBeforeCall(UpsertCounterpartyAgreementRequest upsertCounterpartyAgreementRequest, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'upsertCounterpartyAgreementRequest' is set
        if (upsertCounterpartyAgreementRequest == null) {
            throw new ApiException("Missing the required parameter 'upsertCounterpartyAgreementRequest' when calling upsertCounterpartyAgreement(Async)");
        }

        return upsertCounterpartyAgreementCall(upsertCounterpartyAgreementRequest, _callback, opts);

    }


    private ApiResponse<UpsertSingleStructuredDataResponse> upsertCounterpartyAgreementWithHttpInfo(UpsertCounterpartyAgreementRequest upsertCounterpartyAgreementRequest) throws ApiException {
        okhttp3.Call localVarCall = upsertCounterpartyAgreementValidateBeforeCall(upsertCounterpartyAgreementRequest, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<UpsertSingleStructuredDataResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<UpsertSingleStructuredDataResponse> upsertCounterpartyAgreementWithHttpInfo(UpsertCounterpartyAgreementRequest upsertCounterpartyAgreementRequest, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = upsertCounterpartyAgreementValidateBeforeCall(upsertCounterpartyAgreementRequest, null, opts);
        Type localVarReturnType = new TypeToken<UpsertSingleStructuredDataResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call upsertCounterpartyAgreementAsync(UpsertCounterpartyAgreementRequest upsertCounterpartyAgreementRequest, final ApiCallback<UpsertSingleStructuredDataResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = upsertCounterpartyAgreementValidateBeforeCall(upsertCounterpartyAgreementRequest, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<UpsertSingleStructuredDataResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call upsertCounterpartyAgreementAsync(UpsertCounterpartyAgreementRequest upsertCounterpartyAgreementRequest, final ApiCallback<UpsertSingleStructuredDataResponse> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = upsertCounterpartyAgreementValidateBeforeCall(upsertCounterpartyAgreementRequest, _callback, opts);
        Type localVarReturnType = new TypeToken<UpsertSingleStructuredDataResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIupsertCounterpartyAgreementRequest {
        private final UpsertCounterpartyAgreementRequest upsertCounterpartyAgreementRequest;

        private APIupsertCounterpartyAgreementRequest(UpsertCounterpartyAgreementRequest upsertCounterpartyAgreementRequest) {
            this.upsertCounterpartyAgreementRequest = upsertCounterpartyAgreementRequest;
        }

        /**
         * Build call for upsertCounterpartyAgreement
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The successfully updated or inserted Counterparty Agreement or any failure </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return upsertCounterpartyAgreementCall(upsertCounterpartyAgreementRequest, _callback);
        }

        /**
         * Execute upsertCounterpartyAgreement request
         * @return UpsertSingleStructuredDataResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The successfully updated or inserted Counterparty Agreement or any failure </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public UpsertSingleStructuredDataResponse execute() throws ApiException {
            ApiResponse<UpsertSingleStructuredDataResponse> localVarResp = upsertCounterpartyAgreementWithHttpInfo(upsertCounterpartyAgreementRequest);
            return localVarResp.getData();
        }

        /**
         * Execute upsertCounterpartyAgreement request. Use any specified configuration options to override any other configuration for this request only.
         * @return UpsertSingleStructuredDataResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The successfully updated or inserted Counterparty Agreement or any failure </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public UpsertSingleStructuredDataResponse execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<UpsertSingleStructuredDataResponse> localVarResp = upsertCounterpartyAgreementWithHttpInfo(upsertCounterpartyAgreementRequest, opts);
            return localVarResp.getData();
        }

        /**
         * Execute upsertCounterpartyAgreement request with HTTP info returned
         * @return ApiResponse&lt;UpsertSingleStructuredDataResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The successfully updated or inserted Counterparty Agreement or any failure </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UpsertSingleStructuredDataResponse> executeWithHttpInfo() throws ApiException {
            return upsertCounterpartyAgreementWithHttpInfo(upsertCounterpartyAgreementRequest);
        }

        /**
         * Execute upsertCounterpartyAgreement request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;UpsertSingleStructuredDataResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The successfully updated or inserted Counterparty Agreement or any failure </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UpsertSingleStructuredDataResponse> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return upsertCounterpartyAgreementWithHttpInfo(upsertCounterpartyAgreementRequest, opts);
        }

        /**
         * Execute upsertCounterpartyAgreement request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The successfully updated or inserted Counterparty Agreement or any failure </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UpsertSingleStructuredDataResponse> _callback) throws ApiException {
            return upsertCounterpartyAgreementAsync(upsertCounterpartyAgreementRequest, _callback);
        }

        /**
         * Execute upsertCounterpartyAgreement request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The successfully updated or inserted Counterparty Agreement or any failure </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UpsertSingleStructuredDataResponse> _callback, ConfigurationOptions opts) throws ApiException {
            return upsertCounterpartyAgreementAsync(upsertCounterpartyAgreementRequest, _callback, opts);
        }
    }

    /**
     * [EARLY ACCESS] UpsertCounterpartyAgreement: Upsert Counterparty Agreement
     * Update or insert Counterparty Agreement in a single scope. An item will be updated if it already exists and inserted if it does not.     The response will return the successfully updated or inserted Counterparty Agreement or failure message if unsuccessful     It is important to always check to verify success (or failure).
     * @param upsertCounterpartyAgreementRequest The Counterparty Agreement to update or insert (required)
     * @return APIupsertCounterpartyAgreementRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The successfully updated or inserted Counterparty Agreement or any failure </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIupsertCounterpartyAgreementRequest upsertCounterpartyAgreement(UpsertCounterpartyAgreementRequest upsertCounterpartyAgreementRequest) {
        return new APIupsertCounterpartyAgreementRequest(upsertCounterpartyAgreementRequest);
    }
    private okhttp3.Call upsertCreditSupportAnnexCall(UpsertCreditSupportAnnexRequest upsertCreditSupportAnnexRequest, final ApiCallback _callback) throws ApiException {
        return upsertCreditSupportAnnexCall(upsertCreditSupportAnnexRequest,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call upsertCreditSupportAnnexCall(UpsertCreditSupportAnnexRequest upsertCreditSupportAnnexRequest, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = upsertCreditSupportAnnexRequest;

        // create path and map variables
        String localVarPath = "/api/counterparties/creditsupportannexes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call upsertCreditSupportAnnexValidateBeforeCall(UpsertCreditSupportAnnexRequest upsertCreditSupportAnnexRequest, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'upsertCreditSupportAnnexRequest' is set
        if (upsertCreditSupportAnnexRequest == null) {
            throw new ApiException("Missing the required parameter 'upsertCreditSupportAnnexRequest' when calling upsertCreditSupportAnnex(Async)");
        }

        return upsertCreditSupportAnnexCall(upsertCreditSupportAnnexRequest, _callback, opts);

    }


    private ApiResponse<UpsertSingleStructuredDataResponse> upsertCreditSupportAnnexWithHttpInfo(UpsertCreditSupportAnnexRequest upsertCreditSupportAnnexRequest) throws ApiException {
        okhttp3.Call localVarCall = upsertCreditSupportAnnexValidateBeforeCall(upsertCreditSupportAnnexRequest, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<UpsertSingleStructuredDataResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<UpsertSingleStructuredDataResponse> upsertCreditSupportAnnexWithHttpInfo(UpsertCreditSupportAnnexRequest upsertCreditSupportAnnexRequest, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = upsertCreditSupportAnnexValidateBeforeCall(upsertCreditSupportAnnexRequest, null, opts);
        Type localVarReturnType = new TypeToken<UpsertSingleStructuredDataResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call upsertCreditSupportAnnexAsync(UpsertCreditSupportAnnexRequest upsertCreditSupportAnnexRequest, final ApiCallback<UpsertSingleStructuredDataResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = upsertCreditSupportAnnexValidateBeforeCall(upsertCreditSupportAnnexRequest, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<UpsertSingleStructuredDataResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call upsertCreditSupportAnnexAsync(UpsertCreditSupportAnnexRequest upsertCreditSupportAnnexRequest, final ApiCallback<UpsertSingleStructuredDataResponse> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = upsertCreditSupportAnnexValidateBeforeCall(upsertCreditSupportAnnexRequest, _callback, opts);
        Type localVarReturnType = new TypeToken<UpsertSingleStructuredDataResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIupsertCreditSupportAnnexRequest {
        private final UpsertCreditSupportAnnexRequest upsertCreditSupportAnnexRequest;

        private APIupsertCreditSupportAnnexRequest(UpsertCreditSupportAnnexRequest upsertCreditSupportAnnexRequest) {
            this.upsertCreditSupportAnnexRequest = upsertCreditSupportAnnexRequest;
        }

        /**
         * Build call for upsertCreditSupportAnnex
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The successfully updated or inserted item or any failure </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return upsertCreditSupportAnnexCall(upsertCreditSupportAnnexRequest, _callback);
        }

        /**
         * Execute upsertCreditSupportAnnex request
         * @return UpsertSingleStructuredDataResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The successfully updated or inserted item or any failure </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public UpsertSingleStructuredDataResponse execute() throws ApiException {
            ApiResponse<UpsertSingleStructuredDataResponse> localVarResp = upsertCreditSupportAnnexWithHttpInfo(upsertCreditSupportAnnexRequest);
            return localVarResp.getData();
        }

        /**
         * Execute upsertCreditSupportAnnex request. Use any specified configuration options to override any other configuration for this request only.
         * @return UpsertSingleStructuredDataResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The successfully updated or inserted item or any failure </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public UpsertSingleStructuredDataResponse execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<UpsertSingleStructuredDataResponse> localVarResp = upsertCreditSupportAnnexWithHttpInfo(upsertCreditSupportAnnexRequest, opts);
            return localVarResp.getData();
        }

        /**
         * Execute upsertCreditSupportAnnex request with HTTP info returned
         * @return ApiResponse&lt;UpsertSingleStructuredDataResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The successfully updated or inserted item or any failure </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UpsertSingleStructuredDataResponse> executeWithHttpInfo() throws ApiException {
            return upsertCreditSupportAnnexWithHttpInfo(upsertCreditSupportAnnexRequest);
        }

        /**
         * Execute upsertCreditSupportAnnex request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;UpsertSingleStructuredDataResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The successfully updated or inserted item or any failure </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UpsertSingleStructuredDataResponse> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return upsertCreditSupportAnnexWithHttpInfo(upsertCreditSupportAnnexRequest, opts);
        }

        /**
         * Execute upsertCreditSupportAnnex request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The successfully updated or inserted item or any failure </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UpsertSingleStructuredDataResponse> _callback) throws ApiException {
            return upsertCreditSupportAnnexAsync(upsertCreditSupportAnnexRequest, _callback);
        }

        /**
         * Execute upsertCreditSupportAnnex request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The successfully updated or inserted item or any failure </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UpsertSingleStructuredDataResponse> _callback, ConfigurationOptions opts) throws ApiException {
            return upsertCreditSupportAnnexAsync(upsertCreditSupportAnnexRequest, _callback, opts);
        }
    }

    /**
     * [EARLY ACCESS] UpsertCreditSupportAnnex: Upsert Credit Support Annex
     * Update or insert Credit Support Annex in a single scope. An item will be updated if it already exists and inserted if it does not.     The response will return the successfully updated or inserted Credit Support Annex or failure message if unsuccessful     It is important to always check to verify success (or failure).
     * @param upsertCreditSupportAnnexRequest The Credit Support Annex to update or insert (required)
     * @return APIupsertCreditSupportAnnexRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The successfully updated or inserted item or any failure </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIupsertCreditSupportAnnexRequest upsertCreditSupportAnnex(UpsertCreditSupportAnnexRequest upsertCreditSupportAnnexRequest) {
        return new APIupsertCreditSupportAnnexRequest(upsertCreditSupportAnnexRequest);
    }
}
