/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.api;

import com.finbourne.lusid.ApiCallback;
import com.finbourne.lusid.ApiClient;
import com.finbourne.lusid.ApiException;
import com.finbourne.lusid.ApiResponse;
import com.finbourne.lusid.Configuration;
import com.finbourne.lusid.Pair;
import com.finbourne.lusid.ProgressRequestBody;
import com.finbourne.lusid.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.finbourne.lusid.model.Dialect;
import com.finbourne.lusid.model.LusidProblemDetails;
import com.finbourne.lusid.model.LusidValidationProblemDetails;
import java.time.OffsetDateTime;
import com.finbourne.lusid.model.PagedResourceListOfDialectId;
import com.finbourne.lusid.model.PagedResourceListOfTranslationScriptId;
import com.finbourne.lusid.model.TranslateEntitiesInlinedRequest;
import com.finbourne.lusid.model.TranslateEntitiesRequest;
import com.finbourne.lusid.model.TranslateEntitiesResponse;
import com.finbourne.lusid.model.TranslationScript;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ScriptedTranslationApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ScriptedTranslationApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ScriptedTranslationApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getTranslationDialect
     * @param scope The scope of the dialect. (required)
     * @param vendor The vendor of the dialect, the entity that created it. e.g. ISDA, FINBOURNE. (required)
     * @param sourceSystem The source system of the dialect, the system that understands it. e.g. LUSID, QuantLib. (required)
     * @param entityType The type of entity this dialect describes e.g. Instrument. (required)
     * @param serialisationFormat The serialisation format of a document in this dialect. e.g. JSON, XML. (required)
     * @param version The semantic version of the dialect: MAJOR.MINOR.PATCH. (required)
     * @param asAt The asAt datetime at which to retrieve the dialect. Defaults to return the latest version of the dialect if not specified. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The dialect with the given ID. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTranslationDialectCall(String scope, String vendor, String sourceSystem, String entityType, String serialisationFormat, String version, OffsetDateTime asAt, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/scriptedtranslation/dialects/{scope}/{vendor}/{sourceSystem}/{entityType}/{serialisationFormat}/{version}"
            .replace("{" + "scope" + "}", localVarApiClient.escapeString(scope.toString()))
            .replace("{" + "vendor" + "}", localVarApiClient.escapeString(vendor.toString()))
            .replace("{" + "sourceSystem" + "}", localVarApiClient.escapeString(sourceSystem.toString()))
            .replace("{" + "entityType" + "}", localVarApiClient.escapeString(entityType.toString()))
            .replace("{" + "serialisationFormat" + "}", localVarApiClient.escapeString(serialisationFormat.toString()))
            .replace("{" + "version" + "}", localVarApiClient.escapeString(version.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (asAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asAt", asAt));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTranslationDialectValidateBeforeCall(String scope, String vendor, String sourceSystem, String entityType, String serialisationFormat, String version, OffsetDateTime asAt, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling getTranslationDialect(Async)");
        }

        // verify the required parameter 'vendor' is set
        if (vendor == null) {
            throw new ApiException("Missing the required parameter 'vendor' when calling getTranslationDialect(Async)");
        }

        // verify the required parameter 'sourceSystem' is set
        if (sourceSystem == null) {
            throw new ApiException("Missing the required parameter 'sourceSystem' when calling getTranslationDialect(Async)");
        }

        // verify the required parameter 'entityType' is set
        if (entityType == null) {
            throw new ApiException("Missing the required parameter 'entityType' when calling getTranslationDialect(Async)");
        }

        // verify the required parameter 'serialisationFormat' is set
        if (serialisationFormat == null) {
            throw new ApiException("Missing the required parameter 'serialisationFormat' when calling getTranslationDialect(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling getTranslationDialect(Async)");
        }

        return getTranslationDialectCall(scope, vendor, sourceSystem, entityType, serialisationFormat, version, asAt, _callback);

    }

    /**
     * [EARLY ACCESS] GetTranslationDialect: Get a dialect.
     * Get the dialect with the given identifier at the specific asAt time.
     * @param scope The scope of the dialect. (required)
     * @param vendor The vendor of the dialect, the entity that created it. e.g. ISDA, FINBOURNE. (required)
     * @param sourceSystem The source system of the dialect, the system that understands it. e.g. LUSID, QuantLib. (required)
     * @param entityType The type of entity this dialect describes e.g. Instrument. (required)
     * @param serialisationFormat The serialisation format of a document in this dialect. e.g. JSON, XML. (required)
     * @param version The semantic version of the dialect: MAJOR.MINOR.PATCH. (required)
     * @param asAt The asAt datetime at which to retrieve the dialect. Defaults to return the latest version of the dialect if not specified. (optional)
     * @return Dialect
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The dialect with the given ID. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public Dialect getTranslationDialect(String scope, String vendor, String sourceSystem, String entityType, String serialisationFormat, String version, OffsetDateTime asAt) throws ApiException {
        ApiResponse<Dialect> localVarResp = getTranslationDialectWithHttpInfo(scope, vendor, sourceSystem, entityType, serialisationFormat, version, asAt);
        return localVarResp.getData();
    }

    /**
     * [EARLY ACCESS] GetTranslationDialect: Get a dialect.
     * Get the dialect with the given identifier at the specific asAt time.
     * @param scope The scope of the dialect. (required)
     * @param vendor The vendor of the dialect, the entity that created it. e.g. ISDA, FINBOURNE. (required)
     * @param sourceSystem The source system of the dialect, the system that understands it. e.g. LUSID, QuantLib. (required)
     * @param entityType The type of entity this dialect describes e.g. Instrument. (required)
     * @param serialisationFormat The serialisation format of a document in this dialect. e.g. JSON, XML. (required)
     * @param version The semantic version of the dialect: MAJOR.MINOR.PATCH. (required)
     * @param asAt The asAt datetime at which to retrieve the dialect. Defaults to return the latest version of the dialect if not specified. (optional)
     * @return ApiResponse&lt;Dialect&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The dialect with the given ID. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Dialect> getTranslationDialectWithHttpInfo(String scope, String vendor, String sourceSystem, String entityType, String serialisationFormat, String version, OffsetDateTime asAt) throws ApiException {
        okhttp3.Call localVarCall = getTranslationDialectValidateBeforeCall(scope, vendor, sourceSystem, entityType, serialisationFormat, version, asAt, null);
        Type localVarReturnType = new TypeToken<Dialect>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * [EARLY ACCESS] GetTranslationDialect: Get a dialect. (asynchronously)
     * Get the dialect with the given identifier at the specific asAt time.
     * @param scope The scope of the dialect. (required)
     * @param vendor The vendor of the dialect, the entity that created it. e.g. ISDA, FINBOURNE. (required)
     * @param sourceSystem The source system of the dialect, the system that understands it. e.g. LUSID, QuantLib. (required)
     * @param entityType The type of entity this dialect describes e.g. Instrument. (required)
     * @param serialisationFormat The serialisation format of a document in this dialect. e.g. JSON, XML. (required)
     * @param version The semantic version of the dialect: MAJOR.MINOR.PATCH. (required)
     * @param asAt The asAt datetime at which to retrieve the dialect. Defaults to return the latest version of the dialect if not specified. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The dialect with the given ID. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTranslationDialectAsync(String scope, String vendor, String sourceSystem, String entityType, String serialisationFormat, String version, OffsetDateTime asAt, final ApiCallback<Dialect> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTranslationDialectValidateBeforeCall(scope, vendor, sourceSystem, entityType, serialisationFormat, version, asAt, _callback);
        Type localVarReturnType = new TypeToken<Dialect>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTranslationScript
     * @param scope Scope of the translation script. (required)
     * @param code Code of the translation script. (required)
     * @param version Semantic version of the translation script. (required)
     * @param asAt The asAt datetime at which to retrieve the translation script. Defaults to latest. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested translation script. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTranslationScriptCall(String scope, String code, String version, OffsetDateTime asAt, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/scriptedtranslation/scripts/{scope}/{code}/{version}"
            .replace("{" + "scope" + "}", localVarApiClient.escapeString(scope.toString()))
            .replace("{" + "code" + "}", localVarApiClient.escapeString(code.toString()))
            .replace("{" + "version" + "}", localVarApiClient.escapeString(version.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (asAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asAt", asAt));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTranslationScriptValidateBeforeCall(String scope, String code, String version, OffsetDateTime asAt, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling getTranslationScript(Async)");
        }

        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling getTranslationScript(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling getTranslationScript(Async)");
        }

        return getTranslationScriptCall(scope, code, version, asAt, _callback);

    }

    /**
     * [EARLY ACCESS] GetTranslationScript: Retrieve a translation script by its identifier.
     * Retrieves a translation script to be used for translating financial entities.
     * @param scope Scope of the translation script. (required)
     * @param code Code of the translation script. (required)
     * @param version Semantic version of the translation script. (required)
     * @param asAt The asAt datetime at which to retrieve the translation script. Defaults to latest. (optional)
     * @return TranslationScript
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested translation script. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public TranslationScript getTranslationScript(String scope, String code, String version, OffsetDateTime asAt) throws ApiException {
        ApiResponse<TranslationScript> localVarResp = getTranslationScriptWithHttpInfo(scope, code, version, asAt);
        return localVarResp.getData();
    }

    /**
     * [EARLY ACCESS] GetTranslationScript: Retrieve a translation script by its identifier.
     * Retrieves a translation script to be used for translating financial entities.
     * @param scope Scope of the translation script. (required)
     * @param code Code of the translation script. (required)
     * @param version Semantic version of the translation script. (required)
     * @param asAt The asAt datetime at which to retrieve the translation script. Defaults to latest. (optional)
     * @return ApiResponse&lt;TranslationScript&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested translation script. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TranslationScript> getTranslationScriptWithHttpInfo(String scope, String code, String version, OffsetDateTime asAt) throws ApiException {
        okhttp3.Call localVarCall = getTranslationScriptValidateBeforeCall(scope, code, version, asAt, null);
        Type localVarReturnType = new TypeToken<TranslationScript>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * [EARLY ACCESS] GetTranslationScript: Retrieve a translation script by its identifier. (asynchronously)
     * Retrieves a translation script to be used for translating financial entities.
     * @param scope Scope of the translation script. (required)
     * @param code Code of the translation script. (required)
     * @param version Semantic version of the translation script. (required)
     * @param asAt The asAt datetime at which to retrieve the translation script. Defaults to latest. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested translation script. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTranslationScriptAsync(String scope, String code, String version, OffsetDateTime asAt, final ApiCallback<TranslationScript> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTranslationScriptValidateBeforeCall(scope, code, version, asAt, _callback);
        Type localVarReturnType = new TypeToken<TranslationScript>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listDialectIds
     * @param asAt The asAt datetime at which to retrieve the dialects.              Defaults to return the latest version of the dialect if not specified. (optional)
     * @param page The pagination token to use to continue listing dialect IDs from a previous call to list dialect IDs.              This value is returned from the previous call. If a pagination token is provided the filter and asAt fields              must not have changed since the original request. (optional)
     * @param limit When paginating, limit the number of returned results to this many. (optional)
     * @param filter Expression to filter the result set. Read more about filtering results from LUSID here:              https://support.lusid.com/filtering-results-from-lusid. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A collection of dialect IDs. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listDialectIdsCall(OffsetDateTime asAt, String page, Integer limit, String filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/scriptedtranslation/dialects/ids";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (asAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asAt", asAt));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listDialectIdsValidateBeforeCall(OffsetDateTime asAt, String page, Integer limit, String filter, final ApiCallback _callback) throws ApiException {
        return listDialectIdsCall(asAt, page, limit, filter, _callback);

    }

    /**
     * [EARLY ACCESS] ListDialectIds: List dialect identifiers matching an optional filter.
     * List the stored dialects&#39; identifiers with pagination and filtering at the specified asAt time.
     * @param asAt The asAt datetime at which to retrieve the dialects.              Defaults to return the latest version of the dialect if not specified. (optional)
     * @param page The pagination token to use to continue listing dialect IDs from a previous call to list dialect IDs.              This value is returned from the previous call. If a pagination token is provided the filter and asAt fields              must not have changed since the original request. (optional)
     * @param limit When paginating, limit the number of returned results to this many. (optional)
     * @param filter Expression to filter the result set. Read more about filtering results from LUSID here:              https://support.lusid.com/filtering-results-from-lusid. (optional)
     * @return PagedResourceListOfDialectId
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A collection of dialect IDs. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public PagedResourceListOfDialectId listDialectIds(OffsetDateTime asAt, String page, Integer limit, String filter) throws ApiException {
        ApiResponse<PagedResourceListOfDialectId> localVarResp = listDialectIdsWithHttpInfo(asAt, page, limit, filter);
        return localVarResp.getData();
    }

    /**
     * [EARLY ACCESS] ListDialectIds: List dialect identifiers matching an optional filter.
     * List the stored dialects&#39; identifiers with pagination and filtering at the specified asAt time.
     * @param asAt The asAt datetime at which to retrieve the dialects.              Defaults to return the latest version of the dialect if not specified. (optional)
     * @param page The pagination token to use to continue listing dialect IDs from a previous call to list dialect IDs.              This value is returned from the previous call. If a pagination token is provided the filter and asAt fields              must not have changed since the original request. (optional)
     * @param limit When paginating, limit the number of returned results to this many. (optional)
     * @param filter Expression to filter the result set. Read more about filtering results from LUSID here:              https://support.lusid.com/filtering-results-from-lusid. (optional)
     * @return ApiResponse&lt;PagedResourceListOfDialectId&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A collection of dialect IDs. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PagedResourceListOfDialectId> listDialectIdsWithHttpInfo(OffsetDateTime asAt, String page, Integer limit, String filter) throws ApiException {
        okhttp3.Call localVarCall = listDialectIdsValidateBeforeCall(asAt, page, limit, filter, null);
        Type localVarReturnType = new TypeToken<PagedResourceListOfDialectId>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * [EARLY ACCESS] ListDialectIds: List dialect identifiers matching an optional filter. (asynchronously)
     * List the stored dialects&#39; identifiers with pagination and filtering at the specified asAt time.
     * @param asAt The asAt datetime at which to retrieve the dialects.              Defaults to return the latest version of the dialect if not specified. (optional)
     * @param page The pagination token to use to continue listing dialect IDs from a previous call to list dialect IDs.              This value is returned from the previous call. If a pagination token is provided the filter and asAt fields              must not have changed since the original request. (optional)
     * @param limit When paginating, limit the number of returned results to this many. (optional)
     * @param filter Expression to filter the result set. Read more about filtering results from LUSID here:              https://support.lusid.com/filtering-results-from-lusid. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A collection of dialect IDs. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listDialectIdsAsync(OffsetDateTime asAt, String page, Integer limit, String filter, final ApiCallback<PagedResourceListOfDialectId> _callback) throws ApiException {

        okhttp3.Call localVarCall = listDialectIdsValidateBeforeCall(asAt, page, limit, filter, _callback);
        Type localVarReturnType = new TypeToken<PagedResourceListOfDialectId>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listTranslationScriptIds
     * @param asAt The asAt datetime at which to retrieve the script identifiers. Defaults to latest. (optional)
     * @param limit When paginating, limit the results to this number. Defaults to 100 if not specified. (optional)
     * @param filter Expression to filter the results. For example, Id.Version.Major eq 1 to list IDs with major version 1              or Id.Scope eq &#39;my-scripts&#39; to list result only for a particular scope. (optional)
     * @param page The pagination token to use to continue listing translation script IDs; this              value is returned from the previous call. If a pagination token is provided, the filter field              must not have changed since the original request. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested translation script IDs. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listTranslationScriptIdsCall(OffsetDateTime asAt, Integer limit, String filter, String page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/scriptedtranslation/scripts/ids";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (asAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asAt", asAt));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listTranslationScriptIdsValidateBeforeCall(OffsetDateTime asAt, Integer limit, String filter, String page, final ApiCallback _callback) throws ApiException {
        return listTranslationScriptIdsCall(asAt, limit, filter, page, _callback);

    }

    /**
     * [EARLY ACCESS] ListTranslationScriptIds: List translation script identifiers.
     * List translation script ids.
     * @param asAt The asAt datetime at which to retrieve the script identifiers. Defaults to latest. (optional)
     * @param limit When paginating, limit the results to this number. Defaults to 100 if not specified. (optional)
     * @param filter Expression to filter the results. For example, Id.Version.Major eq 1 to list IDs with major version 1              or Id.Scope eq &#39;my-scripts&#39; to list result only for a particular scope. (optional)
     * @param page The pagination token to use to continue listing translation script IDs; this              value is returned from the previous call. If a pagination token is provided, the filter field              must not have changed since the original request. (optional)
     * @return PagedResourceListOfTranslationScriptId
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested translation script IDs. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public PagedResourceListOfTranslationScriptId listTranslationScriptIds(OffsetDateTime asAt, Integer limit, String filter, String page) throws ApiException {
        ApiResponse<PagedResourceListOfTranslationScriptId> localVarResp = listTranslationScriptIdsWithHttpInfo(asAt, limit, filter, page);
        return localVarResp.getData();
    }

    /**
     * [EARLY ACCESS] ListTranslationScriptIds: List translation script identifiers.
     * List translation script ids.
     * @param asAt The asAt datetime at which to retrieve the script identifiers. Defaults to latest. (optional)
     * @param limit When paginating, limit the results to this number. Defaults to 100 if not specified. (optional)
     * @param filter Expression to filter the results. For example, Id.Version.Major eq 1 to list IDs with major version 1              or Id.Scope eq &#39;my-scripts&#39; to list result only for a particular scope. (optional)
     * @param page The pagination token to use to continue listing translation script IDs; this              value is returned from the previous call. If a pagination token is provided, the filter field              must not have changed since the original request. (optional)
     * @return ApiResponse&lt;PagedResourceListOfTranslationScriptId&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested translation script IDs. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PagedResourceListOfTranslationScriptId> listTranslationScriptIdsWithHttpInfo(OffsetDateTime asAt, Integer limit, String filter, String page) throws ApiException {
        okhttp3.Call localVarCall = listTranslationScriptIdsValidateBeforeCall(asAt, limit, filter, page, null);
        Type localVarReturnType = new TypeToken<PagedResourceListOfTranslationScriptId>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * [EARLY ACCESS] ListTranslationScriptIds: List translation script identifiers. (asynchronously)
     * List translation script ids.
     * @param asAt The asAt datetime at which to retrieve the script identifiers. Defaults to latest. (optional)
     * @param limit When paginating, limit the results to this number. Defaults to 100 if not specified. (optional)
     * @param filter Expression to filter the results. For example, Id.Version.Major eq 1 to list IDs with major version 1              or Id.Scope eq &#39;my-scripts&#39; to list result only for a particular scope. (optional)
     * @param page The pagination token to use to continue listing translation script IDs; this              value is returned from the previous call. If a pagination token is provided, the filter field              must not have changed since the original request. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested translation script IDs. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listTranslationScriptIdsAsync(OffsetDateTime asAt, Integer limit, String filter, String page, final ApiCallback<PagedResourceListOfTranslationScriptId> _callback) throws ApiException {

        okhttp3.Call localVarCall = listTranslationScriptIdsValidateBeforeCall(asAt, limit, filter, page, _callback);
        Type localVarReturnType = new TypeToken<PagedResourceListOfTranslationScriptId>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for translateEntities
     * @param translateEntitiesRequest The entities to translate, along with identifiers for the script and (optional) dialect to use. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The translated entities along with any errors for entities that failed to be translated indexed by their correlation IDs. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call translateEntitiesCall(TranslateEntitiesRequest translateEntitiesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = translateEntitiesRequest;

        // create path and map variables
        String localVarPath = "/api/scriptedtranslation/translateentities";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call translateEntitiesValidateBeforeCall(TranslateEntitiesRequest translateEntitiesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'translateEntitiesRequest' is set
        if (translateEntitiesRequest == null) {
            throw new ApiException("Missing the required parameter 'translateEntitiesRequest' when calling translateEntities(Async)");
        }

        return translateEntitiesCall(translateEntitiesRequest, _callback);

    }

    /**
     * [EARLY ACCESS] TranslateEntities: Translate a collection of entities with a specified translation script.
     * Run the provided translation request. The entities to translate are specified in the request body as a  dictionary with (ephemeral) unique correlation IDs. The script to use and optional dialect to validate  results against are sourced from the database.
     * @param translateEntitiesRequest The entities to translate, along with identifiers for the script and (optional) dialect to use. (required)
     * @return TranslateEntitiesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The translated entities along with any errors for entities that failed to be translated indexed by their correlation IDs. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public TranslateEntitiesResponse translateEntities(TranslateEntitiesRequest translateEntitiesRequest) throws ApiException {
        ApiResponse<TranslateEntitiesResponse> localVarResp = translateEntitiesWithHttpInfo(translateEntitiesRequest);
        return localVarResp.getData();
    }

    /**
     * [EARLY ACCESS] TranslateEntities: Translate a collection of entities with a specified translation script.
     * Run the provided translation request. The entities to translate are specified in the request body as a  dictionary with (ephemeral) unique correlation IDs. The script to use and optional dialect to validate  results against are sourced from the database.
     * @param translateEntitiesRequest The entities to translate, along with identifiers for the script and (optional) dialect to use. (required)
     * @return ApiResponse&lt;TranslateEntitiesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The translated entities along with any errors for entities that failed to be translated indexed by their correlation IDs. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TranslateEntitiesResponse> translateEntitiesWithHttpInfo(TranslateEntitiesRequest translateEntitiesRequest) throws ApiException {
        okhttp3.Call localVarCall = translateEntitiesValidateBeforeCall(translateEntitiesRequest, null);
        Type localVarReturnType = new TypeToken<TranslateEntitiesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * [EARLY ACCESS] TranslateEntities: Translate a collection of entities with a specified translation script. (asynchronously)
     * Run the provided translation request. The entities to translate are specified in the request body as a  dictionary with (ephemeral) unique correlation IDs. The script to use and optional dialect to validate  results against are sourced from the database.
     * @param translateEntitiesRequest The entities to translate, along with identifiers for the script and (optional) dialect to use. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The translated entities along with any errors for entities that failed to be translated indexed by their correlation IDs. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call translateEntitiesAsync(TranslateEntitiesRequest translateEntitiesRequest, final ApiCallback<TranslateEntitiesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = translateEntitiesValidateBeforeCall(translateEntitiesRequest, _callback);
        Type localVarReturnType = new TypeToken<TranslateEntitiesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for translateEntitiesInlined
     * @param translateEntitiesInlinedRequest The entities to translate, along with the script to use and an optional schema for validation. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The translated entities along with any errors for entities that failed to be translated indexed by their correlation IDs. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call translateEntitiesInlinedCall(TranslateEntitiesInlinedRequest translateEntitiesInlinedRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = translateEntitiesInlinedRequest;

        // create path and map variables
        String localVarPath = "/api/scriptedtranslation/translateentitiesinlined";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call translateEntitiesInlinedValidateBeforeCall(TranslateEntitiesInlinedRequest translateEntitiesInlinedRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'translateEntitiesInlinedRequest' is set
        if (translateEntitiesInlinedRequest == null) {
            throw new ApiException("Missing the required parameter 'translateEntitiesInlinedRequest' when calling translateEntitiesInlined(Async)");
        }

        return translateEntitiesInlinedCall(translateEntitiesInlinedRequest, _callback);

    }

    /**
     * [EARLY ACCESS] TranslateEntitiesInlined: Translate a collection of entities, inlining the body of the translation script.
     * Run the provided translation request. The entities to translate, script to use and dialect to validate results against  are all specified in the request body. The entities are given as a dictionary with (ephemeral) unique correlation IDs.
     * @param translateEntitiesInlinedRequest The entities to translate, along with the script to use and an optional schema for validation. (required)
     * @return TranslateEntitiesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The translated entities along with any errors for entities that failed to be translated indexed by their correlation IDs. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public TranslateEntitiesResponse translateEntitiesInlined(TranslateEntitiesInlinedRequest translateEntitiesInlinedRequest) throws ApiException {
        ApiResponse<TranslateEntitiesResponse> localVarResp = translateEntitiesInlinedWithHttpInfo(translateEntitiesInlinedRequest);
        return localVarResp.getData();
    }

    /**
     * [EARLY ACCESS] TranslateEntitiesInlined: Translate a collection of entities, inlining the body of the translation script.
     * Run the provided translation request. The entities to translate, script to use and dialect to validate results against  are all specified in the request body. The entities are given as a dictionary with (ephemeral) unique correlation IDs.
     * @param translateEntitiesInlinedRequest The entities to translate, along with the script to use and an optional schema for validation. (required)
     * @return ApiResponse&lt;TranslateEntitiesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The translated entities along with any errors for entities that failed to be translated indexed by their correlation IDs. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TranslateEntitiesResponse> translateEntitiesInlinedWithHttpInfo(TranslateEntitiesInlinedRequest translateEntitiesInlinedRequest) throws ApiException {
        okhttp3.Call localVarCall = translateEntitiesInlinedValidateBeforeCall(translateEntitiesInlinedRequest, null);
        Type localVarReturnType = new TypeToken<TranslateEntitiesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * [EARLY ACCESS] TranslateEntitiesInlined: Translate a collection of entities, inlining the body of the translation script. (asynchronously)
     * Run the provided translation request. The entities to translate, script to use and dialect to validate results against  are all specified in the request body. The entities are given as a dictionary with (ephemeral) unique correlation IDs.
     * @param translateEntitiesInlinedRequest The entities to translate, along with the script to use and an optional schema for validation. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The translated entities along with any errors for entities that failed to be translated indexed by their correlation IDs. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call translateEntitiesInlinedAsync(TranslateEntitiesInlinedRequest translateEntitiesInlinedRequest, final ApiCallback<TranslateEntitiesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = translateEntitiesInlinedValidateBeforeCall(translateEntitiesInlinedRequest, _callback);
        Type localVarReturnType = new TypeToken<TranslateEntitiesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for upsertTranslationDialect
     * @param dialect The dialect to upsert. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The upserted dialect. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call upsertTranslationDialectCall(Dialect dialect, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = dialect;

        // create path and map variables
        String localVarPath = "/api/scriptedtranslation/dialects";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call upsertTranslationDialectValidateBeforeCall(Dialect dialect, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dialect' is set
        if (dialect == null) {
            throw new ApiException("Missing the required parameter 'dialect' when calling upsertTranslationDialect(Async)");
        }

        return upsertTranslationDialectCall(dialect, _callback);

    }

    /**
     * [EARLY ACCESS] UpsertTranslationDialect: Upsert a Dialect.
     * Upsert the given dialect.
     * @param dialect The dialect to upsert. (required)
     * @return Dialect
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The upserted dialect. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public Dialect upsertTranslationDialect(Dialect dialect) throws ApiException {
        ApiResponse<Dialect> localVarResp = upsertTranslationDialectWithHttpInfo(dialect);
        return localVarResp.getData();
    }

    /**
     * [EARLY ACCESS] UpsertTranslationDialect: Upsert a Dialect.
     * Upsert the given dialect.
     * @param dialect The dialect to upsert. (required)
     * @return ApiResponse&lt;Dialect&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The upserted dialect. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Dialect> upsertTranslationDialectWithHttpInfo(Dialect dialect) throws ApiException {
        okhttp3.Call localVarCall = upsertTranslationDialectValidateBeforeCall(dialect, null);
        Type localVarReturnType = new TypeToken<Dialect>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * [EARLY ACCESS] UpsertTranslationDialect: Upsert a Dialect. (asynchronously)
     * Upsert the given dialect.
     * @param dialect The dialect to upsert. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The upserted dialect. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call upsertTranslationDialectAsync(Dialect dialect, final ApiCallback<Dialect> _callback) throws ApiException {

        okhttp3.Call localVarCall = upsertTranslationDialectValidateBeforeCall(dialect, _callback);
        Type localVarReturnType = new TypeToken<Dialect>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for upsertTranslationScript
     * @param translationScript The translation script to be upserted. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The successfully created translation script. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call upsertTranslationScriptCall(TranslationScript translationScript, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = translationScript;

        // create path and map variables
        String localVarPath = "/api/scriptedtranslation/scripts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call upsertTranslationScriptValidateBeforeCall(TranslationScript translationScript, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'translationScript' is set
        if (translationScript == null) {
            throw new ApiException("Missing the required parameter 'translationScript' when calling upsertTranslationScript(Async)");
        }

        return upsertTranslationScriptCall(translationScript, _callback);

    }

    /**
     * [EARLY ACCESS] UpsertTranslationScript: Upsert a translation script.
     * Upserts a translation script to be used for translating financial entities.
     * @param translationScript The translation script to be upserted. (required)
     * @return TranslationScript
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The successfully created translation script. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public TranslationScript upsertTranslationScript(TranslationScript translationScript) throws ApiException {
        ApiResponse<TranslationScript> localVarResp = upsertTranslationScriptWithHttpInfo(translationScript);
        return localVarResp.getData();
    }

    /**
     * [EARLY ACCESS] UpsertTranslationScript: Upsert a translation script.
     * Upserts a translation script to be used for translating financial entities.
     * @param translationScript The translation script to be upserted. (required)
     * @return ApiResponse&lt;TranslationScript&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The successfully created translation script. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TranslationScript> upsertTranslationScriptWithHttpInfo(TranslationScript translationScript) throws ApiException {
        okhttp3.Call localVarCall = upsertTranslationScriptValidateBeforeCall(translationScript, null);
        Type localVarReturnType = new TypeToken<TranslationScript>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * [EARLY ACCESS] UpsertTranslationScript: Upsert a translation script. (asynchronously)
     * Upserts a translation script to be used for translating financial entities.
     * @param translationScript The translation script to be upserted. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The successfully created translation script. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call upsertTranslationScriptAsync(TranslationScript translationScript, final ApiCallback<TranslationScript> _callback) throws ApiException {

        okhttp3.Call localVarCall = upsertTranslationScriptValidateBeforeCall(translationScript, _callback);
        Type localVarReturnType = new TypeToken<TranslationScript>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
