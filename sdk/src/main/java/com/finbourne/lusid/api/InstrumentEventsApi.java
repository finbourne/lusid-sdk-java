/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.api;

import com.finbourne.lusid.ApiCallback;
import com.finbourne.lusid.ApiClient;
import com.finbourne.lusid.ApiException;
import com.finbourne.lusid.ApiResponse;
import com.finbourne.lusid.Configuration;
import com.finbourne.lusid.Pair;
import com.finbourne.lusid.ProgressRequestBody;
import com.finbourne.lusid.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.finbourne.lusid.model.BucketedCashFlowResponse;
import com.finbourne.lusid.model.LusidProblemDetails;
import com.finbourne.lusid.model.LusidValidationProblemDetails;
import java.time.OffsetDateTime;
import com.finbourne.lusid.model.QueryApplicableInstrumentEventsRequest;
import com.finbourne.lusid.model.QueryBucketedCashFlowsRequest;
import com.finbourne.lusid.model.QueryCashFlowsRequest;
import com.finbourne.lusid.model.QueryInstrumentEventsRequest;
import com.finbourne.lusid.model.QueryTradeTicketsRequest;
import com.finbourne.lusid.model.ResourceListOfApplicableInstrumentEvent;
import com.finbourne.lusid.model.ResourceListOfInstrumentCashFlow;
import com.finbourne.lusid.model.ResourceListOfInstrumentEventHolder;
import com.finbourne.lusid.model.ResourceListOfPortfolioTradeTicket;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class InstrumentEventsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public InstrumentEventsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public InstrumentEventsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call queryApplicableInstrumentEventsCall(OffsetDateTime asAt, Integer limit, String page, QueryApplicableInstrumentEventsRequest queryApplicableInstrumentEventsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = queryApplicableInstrumentEventsRequest;

        // create path and map variables
        String localVarPath = "/api/instrumentevents/$queryApplicableInstrumentEvents";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (asAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asAt", asAt));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call queryApplicableInstrumentEventsValidateBeforeCall(OffsetDateTime asAt, Integer limit, String page, QueryApplicableInstrumentEventsRequest queryApplicableInstrumentEventsRequest, final ApiCallback _callback) throws ApiException {
        return queryApplicableInstrumentEventsCall(asAt, limit, page, queryApplicableInstrumentEventsRequest, _callback);

    }


    private ApiResponse<ResourceListOfApplicableInstrumentEvent> queryApplicableInstrumentEventsWithHttpInfo(OffsetDateTime asAt, Integer limit, String page, QueryApplicableInstrumentEventsRequest queryApplicableInstrumentEventsRequest) throws ApiException {
        okhttp3.Call localVarCall = queryApplicableInstrumentEventsValidateBeforeCall(asAt, limit, page, queryApplicableInstrumentEventsRequest, null);
        Type localVarReturnType = new TypeToken<ResourceListOfApplicableInstrumentEvent>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call queryApplicableInstrumentEventsAsync(OffsetDateTime asAt, Integer limit, String page, QueryApplicableInstrumentEventsRequest queryApplicableInstrumentEventsRequest, final ApiCallback<ResourceListOfApplicableInstrumentEvent> _callback) throws ApiException {

        okhttp3.Call localVarCall = queryApplicableInstrumentEventsValidateBeforeCall(asAt, limit, page, queryApplicableInstrumentEventsRequest, _callback);
        Type localVarReturnType = new TypeToken<ResourceListOfApplicableInstrumentEvent>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIqueryApplicableInstrumentEventsRequest {
        private OffsetDateTime asAt;
        private Integer limit;
        private String page;
        private QueryApplicableInstrumentEventsRequest queryApplicableInstrumentEventsRequest;

        private APIqueryApplicableInstrumentEventsRequest() {
        }

        /**
         * Set asAt
         * @param asAt The as at time to use. (optional)
         * @return APIqueryApplicableInstrumentEventsRequest
         */
        public APIqueryApplicableInstrumentEventsRequest asAt(OffsetDateTime asAt) {
            this.asAt = asAt;
            return this;
        }

        /**
         * Set limit
         * @param limit Optional. When paginating, limit the number of returned results to this many. If not specified, a default  of 100 is used. (optional, default to 100)
         * @return APIqueryApplicableInstrumentEventsRequest
         */
        public APIqueryApplicableInstrumentEventsRequest limit(Integer limit) {
            this.limit = limit;
            return this;
        }

        /**
         * Set page
         * @param page Optional. The pagination token to use to continue listing items from a previous call. Page values are  return from list calls, and must be supplied exactly as returned. Additionally, when specifying this (optional)
         * @return APIqueryApplicableInstrumentEventsRequest
         */
        public APIqueryApplicableInstrumentEventsRequest page(String page) {
            this.page = page;
            return this;
        }

        /**
         * Set queryApplicableInstrumentEventsRequest
         * @param queryApplicableInstrumentEventsRequest The filter parameters used to retrieve applicable instrument events. (optional)
         * @return APIqueryApplicableInstrumentEventsRequest
         */
        public APIqueryApplicableInstrumentEventsRequest queryApplicableInstrumentEventsRequest(QueryApplicableInstrumentEventsRequest queryApplicableInstrumentEventsRequest) {
            this.queryApplicableInstrumentEventsRequest = queryApplicableInstrumentEventsRequest;
            return this;
        }

        /**
         * Build call for queryApplicableInstrumentEvents
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Applicable Instrument Events </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return queryApplicableInstrumentEventsCall(asAt, limit, page, queryApplicableInstrumentEventsRequest, _callback);
        }

        /**
         * Execute queryApplicableInstrumentEvents request
         * @return ResourceListOfApplicableInstrumentEvent
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Applicable Instrument Events </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ResourceListOfApplicableInstrumentEvent execute() throws ApiException {
            ApiResponse<ResourceListOfApplicableInstrumentEvent> localVarResp = queryApplicableInstrumentEventsWithHttpInfo(asAt, limit, page, queryApplicableInstrumentEventsRequest);
            return localVarResp.getData();
        }

        /**
         * Execute queryApplicableInstrumentEvents request with HTTP info returned
         * @return ApiResponse&lt;ResourceListOfApplicableInstrumentEvent&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Applicable Instrument Events </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ResourceListOfApplicableInstrumentEvent> executeWithHttpInfo() throws ApiException {
            return queryApplicableInstrumentEventsWithHttpInfo(asAt, limit, page, queryApplicableInstrumentEventsRequest);
        }

        /**
         * Execute queryApplicableInstrumentEvents request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Applicable Instrument Events </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ResourceListOfApplicableInstrumentEvent> _callback) throws ApiException {
            return queryApplicableInstrumentEventsAsync(asAt, limit, page, queryApplicableInstrumentEventsRequest, _callback);
        }
    }

    /**
     * [EXPERIMENTAL] QueryApplicableInstrumentEvents: Returns a list of applicable instrument events based on the holdings of the portfolios and date range specified in the query.
     * Returns a list of applicable instrument events based on the holdings of the portfolios and date range specified in the query.
     * @return APIqueryApplicableInstrumentEventsRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Applicable Instrument Events </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIqueryApplicableInstrumentEventsRequest queryApplicableInstrumentEvents() {
        return new APIqueryApplicableInstrumentEventsRequest();
    }
    private okhttp3.Call queryBucketedCashFlowsCall(QueryBucketedCashFlowsRequest queryBucketedCashFlowsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = queryBucketedCashFlowsRequest;

        // create path and map variables
        String localVarPath = "/api/instrumentevents/$queryBucketedCashFlows";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call queryBucketedCashFlowsValidateBeforeCall(QueryBucketedCashFlowsRequest queryBucketedCashFlowsRequest, final ApiCallback _callback) throws ApiException {
        return queryBucketedCashFlowsCall(queryBucketedCashFlowsRequest, _callback);

    }


    private ApiResponse<BucketedCashFlowResponse> queryBucketedCashFlowsWithHttpInfo(QueryBucketedCashFlowsRequest queryBucketedCashFlowsRequest) throws ApiException {
        okhttp3.Call localVarCall = queryBucketedCashFlowsValidateBeforeCall(queryBucketedCashFlowsRequest, null);
        Type localVarReturnType = new TypeToken<BucketedCashFlowResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call queryBucketedCashFlowsAsync(QueryBucketedCashFlowsRequest queryBucketedCashFlowsRequest, final ApiCallback<BucketedCashFlowResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = queryBucketedCashFlowsValidateBeforeCall(queryBucketedCashFlowsRequest, _callback);
        Type localVarReturnType = new TypeToken<BucketedCashFlowResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIqueryBucketedCashFlowsRequest {
        private QueryBucketedCashFlowsRequest queryBucketedCashFlowsRequest;

        private APIqueryBucketedCashFlowsRequest() {
        }

        /**
         * Set queryBucketedCashFlowsRequest
         * @param queryBucketedCashFlowsRequest The Query Information. (optional)
         * @return APIqueryBucketedCashFlowsRequest
         */
        public APIqueryBucketedCashFlowsRequest queryBucketedCashFlowsRequest(QueryBucketedCashFlowsRequest queryBucketedCashFlowsRequest) {
            this.queryBucketedCashFlowsRequest = queryBucketedCashFlowsRequest;
            return this;
        }

        /**
         * Build call for queryBucketedCashFlows
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Query bucketed cashflows across portfolios. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return queryBucketedCashFlowsCall(queryBucketedCashFlowsRequest, _callback);
        }

        /**
         * Execute queryBucketedCashFlows request
         * @return BucketedCashFlowResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Query bucketed cashflows across portfolios. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public BucketedCashFlowResponse execute() throws ApiException {
            ApiResponse<BucketedCashFlowResponse> localVarResp = queryBucketedCashFlowsWithHttpInfo(queryBucketedCashFlowsRequest);
            return localVarResp.getData();
        }

        /**
         * Execute queryBucketedCashFlows request with HTTP info returned
         * @return ApiResponse&lt;BucketedCashFlowResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Query bucketed cashflows across portfolios. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<BucketedCashFlowResponse> executeWithHttpInfo() throws ApiException {
            return queryBucketedCashFlowsWithHttpInfo(queryBucketedCashFlowsRequest);
        }

        /**
         * Execute queryBucketedCashFlows request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Query bucketed cashflows across portfolios. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<BucketedCashFlowResponse> _callback) throws ApiException {
            return queryBucketedCashFlowsAsync(queryBucketedCashFlowsRequest, _callback);
        }
    }

    /**
     * QueryBucketedCashFlows: Returns bucketed cashflows based on the holdings of the portfolios and date range specified in the query.
     * Returns bucketed cashflows based on the holdings of the portfolios and date range specified in the query.
     * @return APIqueryBucketedCashFlowsRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Query bucketed cashflows across portfolios. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIqueryBucketedCashFlowsRequest queryBucketedCashFlows() {
        return new APIqueryBucketedCashFlowsRequest();
    }
    private okhttp3.Call queryCashFlowsCall(Integer limit, String page, QueryCashFlowsRequest queryCashFlowsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = queryCashFlowsRequest;

        // create path and map variables
        String localVarPath = "/api/instrumentevents/$queryCashFlows";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call queryCashFlowsValidateBeforeCall(Integer limit, String page, QueryCashFlowsRequest queryCashFlowsRequest, final ApiCallback _callback) throws ApiException {
        return queryCashFlowsCall(limit, page, queryCashFlowsRequest, _callback);

    }


    private ApiResponse<ResourceListOfInstrumentCashFlow> queryCashFlowsWithHttpInfo(Integer limit, String page, QueryCashFlowsRequest queryCashFlowsRequest) throws ApiException {
        okhttp3.Call localVarCall = queryCashFlowsValidateBeforeCall(limit, page, queryCashFlowsRequest, null);
        Type localVarReturnType = new TypeToken<ResourceListOfInstrumentCashFlow>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call queryCashFlowsAsync(Integer limit, String page, QueryCashFlowsRequest queryCashFlowsRequest, final ApiCallback<ResourceListOfInstrumentCashFlow> _callback) throws ApiException {

        okhttp3.Call localVarCall = queryCashFlowsValidateBeforeCall(limit, page, queryCashFlowsRequest, _callback);
        Type localVarReturnType = new TypeToken<ResourceListOfInstrumentCashFlow>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIqueryCashFlowsRequest {
        private Integer limit;
        private String page;
        private QueryCashFlowsRequest queryCashFlowsRequest;

        private APIqueryCashFlowsRequest() {
        }

        /**
         * Set limit
         * @param limit Optional. When paginating, limit the number of returned results to this many. If not specified, a default  of 1000 is used. (optional, default to 1000)
         * @return APIqueryCashFlowsRequest
         */
        public APIqueryCashFlowsRequest limit(Integer limit) {
            this.limit = limit;
            return this;
        }

        /**
         * Set page
         * @param page Optional. The pagination token to use to continue listing items from a previous call. Page values are  return from list calls, and must be supplied exactly as returned. Additionally, when specifying this  value, queryBody, and limit must not  be modified. (optional)
         * @return APIqueryCashFlowsRequest
         */
        public APIqueryCashFlowsRequest page(String page) {
            this.page = page;
            return this;
        }

        /**
         * Set queryCashFlowsRequest
         * @param queryCashFlowsRequest The filter parameters used to retrieve instrument events. (optional)
         * @return APIqueryCashFlowsRequest
         */
        public APIqueryCashFlowsRequest queryCashFlowsRequest(QueryCashFlowsRequest queryCashFlowsRequest) {
            this.queryCashFlowsRequest = queryCashFlowsRequest;
            return this;
        }

        /**
         * Build call for queryCashFlows
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Instrument Events as Cashflows. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return queryCashFlowsCall(limit, page, queryCashFlowsRequest, _callback);
        }

        /**
         * Execute queryCashFlows request
         * @return ResourceListOfInstrumentCashFlow
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Instrument Events as Cashflows. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ResourceListOfInstrumentCashFlow execute() throws ApiException {
            ApiResponse<ResourceListOfInstrumentCashFlow> localVarResp = queryCashFlowsWithHttpInfo(limit, page, queryCashFlowsRequest);
            return localVarResp.getData();
        }

        /**
         * Execute queryCashFlows request with HTTP info returned
         * @return ApiResponse&lt;ResourceListOfInstrumentCashFlow&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Instrument Events as Cashflows. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ResourceListOfInstrumentCashFlow> executeWithHttpInfo() throws ApiException {
            return queryCashFlowsWithHttpInfo(limit, page, queryCashFlowsRequest);
        }

        /**
         * Execute queryCashFlows request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Instrument Events as Cashflows. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ResourceListOfInstrumentCashFlow> _callback) throws ApiException {
            return queryCashFlowsAsync(limit, page, queryCashFlowsRequest, _callback);
        }
    }

    /**
     * [EXPERIMENTAL] QueryCashFlows: Returns a list of cashflows based on the holdings of the portfolios and date range specified in the query.
     * Returns a list of cashflows based on the holdings of the portfolios and date range specified in the query.
     * @return APIqueryCashFlowsRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Instrument Events as Cashflows. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIqueryCashFlowsRequest queryCashFlows() {
        return new APIqueryCashFlowsRequest();
    }
    private okhttp3.Call queryInstrumentEventsCall(Integer limit, String page, QueryInstrumentEventsRequest queryInstrumentEventsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = queryInstrumentEventsRequest;

        // create path and map variables
        String localVarPath = "/api/instrumentevents/$query";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call queryInstrumentEventsValidateBeforeCall(Integer limit, String page, QueryInstrumentEventsRequest queryInstrumentEventsRequest, final ApiCallback _callback) throws ApiException {
        return queryInstrumentEventsCall(limit, page, queryInstrumentEventsRequest, _callback);

    }


    private ApiResponse<ResourceListOfInstrumentEventHolder> queryInstrumentEventsWithHttpInfo(Integer limit, String page, QueryInstrumentEventsRequest queryInstrumentEventsRequest) throws ApiException {
        okhttp3.Call localVarCall = queryInstrumentEventsValidateBeforeCall(limit, page, queryInstrumentEventsRequest, null);
        Type localVarReturnType = new TypeToken<ResourceListOfInstrumentEventHolder>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call queryInstrumentEventsAsync(Integer limit, String page, QueryInstrumentEventsRequest queryInstrumentEventsRequest, final ApiCallback<ResourceListOfInstrumentEventHolder> _callback) throws ApiException {

        okhttp3.Call localVarCall = queryInstrumentEventsValidateBeforeCall(limit, page, queryInstrumentEventsRequest, _callback);
        Type localVarReturnType = new TypeToken<ResourceListOfInstrumentEventHolder>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIqueryInstrumentEventsRequest {
        private Integer limit;
        private String page;
        private QueryInstrumentEventsRequest queryInstrumentEventsRequest;

        private APIqueryInstrumentEventsRequest() {
        }

        /**
         * Set limit
         * @param limit Optional. When paginating, limit the number of returned results to this many. If not specified, a default  of 1000 is used. (optional, default to 1000)
         * @return APIqueryInstrumentEventsRequest
         */
        public APIqueryInstrumentEventsRequest limit(Integer limit) {
            this.limit = limit;
            return this;
        }

        /**
         * Set page
         * @param page Optional. The pagination token to use to continue listing items from a previous call. Page values are  return from list calls, and must be supplied exactly as returned. Additionally, when specifying this  value, queryBody, and limit must not  be modified. (optional)
         * @return APIqueryInstrumentEventsRequest
         */
        public APIqueryInstrumentEventsRequest page(String page) {
            this.page = page;
            return this;
        }

        /**
         * Set queryInstrumentEventsRequest
         * @param queryInstrumentEventsRequest The filter parameters used to retrieve instrument events. (optional)
         * @return APIqueryInstrumentEventsRequest
         */
        public APIqueryInstrumentEventsRequest queryInstrumentEventsRequest(QueryInstrumentEventsRequest queryInstrumentEventsRequest) {
            this.queryInstrumentEventsRequest = queryInstrumentEventsRequest;
            return this;
        }

        /**
         * Build call for queryInstrumentEvents
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Instrument Events </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return queryInstrumentEventsCall(limit, page, queryInstrumentEventsRequest, _callback);
        }

        /**
         * Execute queryInstrumentEvents request
         * @return ResourceListOfInstrumentEventHolder
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Instrument Events </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ResourceListOfInstrumentEventHolder execute() throws ApiException {
            ApiResponse<ResourceListOfInstrumentEventHolder> localVarResp = queryInstrumentEventsWithHttpInfo(limit, page, queryInstrumentEventsRequest);
            return localVarResp.getData();
        }

        /**
         * Execute queryInstrumentEvents request with HTTP info returned
         * @return ApiResponse&lt;ResourceListOfInstrumentEventHolder&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Instrument Events </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ResourceListOfInstrumentEventHolder> executeWithHttpInfo() throws ApiException {
            return queryInstrumentEventsWithHttpInfo(limit, page, queryInstrumentEventsRequest);
        }

        /**
         * Execute queryInstrumentEvents request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Instrument Events </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ResourceListOfInstrumentEventHolder> _callback) throws ApiException {
            return queryInstrumentEventsAsync(limit, page, queryInstrumentEventsRequest, _callback);
        }
    }

    /**
     * [EXPERIMENTAL] QueryInstrumentEvents: Returns a list of instrument events based on the holdings of the portfolios and date range specified in the query.
     * Returns a list of instrument events based on the holdings of the portfolios and date range specified in the query.
     * @return APIqueryInstrumentEventsRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Instrument Events </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIqueryInstrumentEventsRequest queryInstrumentEvents() {
        return new APIqueryInstrumentEventsRequest();
    }
    private okhttp3.Call queryTradeTicketsCall(Integer limit, String page, QueryTradeTicketsRequest queryTradeTicketsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = queryTradeTicketsRequest;

        // create path and map variables
        String localVarPath = "/api/instrumentevents/$queryTradeTickets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call queryTradeTicketsValidateBeforeCall(Integer limit, String page, QueryTradeTicketsRequest queryTradeTicketsRequest, final ApiCallback _callback) throws ApiException {
        return queryTradeTicketsCall(limit, page, queryTradeTicketsRequest, _callback);

    }


    private ApiResponse<ResourceListOfPortfolioTradeTicket> queryTradeTicketsWithHttpInfo(Integer limit, String page, QueryTradeTicketsRequest queryTradeTicketsRequest) throws ApiException {
        okhttp3.Call localVarCall = queryTradeTicketsValidateBeforeCall(limit, page, queryTradeTicketsRequest, null);
        Type localVarReturnType = new TypeToken<ResourceListOfPortfolioTradeTicket>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call queryTradeTicketsAsync(Integer limit, String page, QueryTradeTicketsRequest queryTradeTicketsRequest, final ApiCallback<ResourceListOfPortfolioTradeTicket> _callback) throws ApiException {

        okhttp3.Call localVarCall = queryTradeTicketsValidateBeforeCall(limit, page, queryTradeTicketsRequest, _callback);
        Type localVarReturnType = new TypeToken<ResourceListOfPortfolioTradeTicket>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIqueryTradeTicketsRequest {
        private Integer limit;
        private String page;
        private QueryTradeTicketsRequest queryTradeTicketsRequest;

        private APIqueryTradeTicketsRequest() {
        }

        /**
         * Set limit
         * @param limit Optional. When paginating, limit the number of returned results to this many. If not specified, a default  of 1000 is used. (optional, default to 1000)
         * @return APIqueryTradeTicketsRequest
         */
        public APIqueryTradeTicketsRequest limit(Integer limit) {
            this.limit = limit;
            return this;
        }

        /**
         * Set page
         * @param page Optional. The pagination token to use to continue listing items from a previous call. Page values are  return from list calls, and must be supplied exactly as returned. Additionally, when specifying this  value, queryBody, and limit must not  be modified. (optional)
         * @return APIqueryTradeTicketsRequest
         */
        public APIqueryTradeTicketsRequest page(String page) {
            this.page = page;
            return this;
        }

        /**
         * Set queryTradeTicketsRequest
         * @param queryTradeTicketsRequest The filter parameters used to retrieve instrument events. (optional)
         * @return APIqueryTradeTicketsRequest
         */
        public APIqueryTradeTicketsRequest queryTradeTicketsRequest(QueryTradeTicketsRequest queryTradeTicketsRequest) {
            this.queryTradeTicketsRequest = queryTradeTicketsRequest;
            return this;
        }

        /**
         * Build call for queryTradeTickets
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Instrument Events as Upsertable TradeTickets. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return queryTradeTicketsCall(limit, page, queryTradeTicketsRequest, _callback);
        }

        /**
         * Execute queryTradeTickets request
         * @return ResourceListOfPortfolioTradeTicket
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Instrument Events as Upsertable TradeTickets. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ResourceListOfPortfolioTradeTicket execute() throws ApiException {
            ApiResponse<ResourceListOfPortfolioTradeTicket> localVarResp = queryTradeTicketsWithHttpInfo(limit, page, queryTradeTicketsRequest);
            return localVarResp.getData();
        }

        /**
         * Execute queryTradeTickets request with HTTP info returned
         * @return ApiResponse&lt;ResourceListOfPortfolioTradeTicket&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Instrument Events as Upsertable TradeTickets. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ResourceListOfPortfolioTradeTicket> executeWithHttpInfo() throws ApiException {
            return queryTradeTicketsWithHttpInfo(limit, page, queryTradeTicketsRequest);
        }

        /**
         * Execute queryTradeTickets request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Instrument Events as Upsertable TradeTickets. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ResourceListOfPortfolioTradeTicket> _callback) throws ApiException {
            return queryTradeTicketsAsync(limit, page, queryTradeTicketsRequest, _callback);
        }
    }

    /**
     * [EXPERIMENTAL] QueryTradeTickets: Returns a list of trade tickets based on the holdings of the portfolios and date range specified in the query.
     * Returns a list of trade tickets based on the holdings of the portfolios and date range specified in the query.    These trade tickets are derived from events that involve transition of instrument states, such as transitions  on exercise or default of an instrument. The trade tickets are to allow the new position to be created given the  existing portfolio configuration.
     * @return APIqueryTradeTicketsRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Instrument Events as Upsertable TradeTickets. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIqueryTradeTicketsRequest queryTradeTickets() {
        return new APIqueryTradeTicketsRequest();
    }
}
