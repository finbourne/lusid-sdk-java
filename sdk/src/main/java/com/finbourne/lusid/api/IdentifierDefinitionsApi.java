/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.api;

import com.finbourne.lusid.ApiCallback;
import com.finbourne.lusid.ApiClient;
import com.finbourne.lusid.ApiException;
import com.finbourne.lusid.ApiResponse;
import com.finbourne.lusid.Configuration;
import com.finbourne.lusid.Pair;
import com.finbourne.lusid.ProgressRequestBody;
import com.finbourne.lusid.ProgressResponseBody;
import com.finbourne.lusid.extensions.ConfigurationOptions;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.finbourne.lusid.model.CreateIdentifierDefinitionRequest;
import com.finbourne.lusid.model.DeletedEntityResponse;
import com.finbourne.lusid.model.IdentifierDefinition;
import com.finbourne.lusid.model.LusidProblemDetails;
import com.finbourne.lusid.model.LusidValidationProblemDetails;
import java.time.OffsetDateTime;
import com.finbourne.lusid.model.PagedResourceListOfIdentifierDefinition;
import com.finbourne.lusid.model.UpdateIdentifierDefinitionRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class IdentifierDefinitionsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public IdentifierDefinitionsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public IdentifierDefinitionsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createIdentifierDefinitionCall(CreateIdentifierDefinitionRequest createIdentifierDefinitionRequest, final ApiCallback _callback) throws ApiException {
        return createIdentifierDefinitionCall(createIdentifierDefinitionRequest,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call createIdentifierDefinitionCall(CreateIdentifierDefinitionRequest createIdentifierDefinitionRequest, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createIdentifierDefinitionRequest;

        // create path and map variables
        String localVarPath = "/api/identifierdefinitions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createIdentifierDefinitionValidateBeforeCall(CreateIdentifierDefinitionRequest createIdentifierDefinitionRequest, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        return createIdentifierDefinitionCall(createIdentifierDefinitionRequest, _callback, opts);

    }


    private ApiResponse<IdentifierDefinition> createIdentifierDefinitionWithHttpInfo(CreateIdentifierDefinitionRequest createIdentifierDefinitionRequest) throws ApiException {
        okhttp3.Call localVarCall = createIdentifierDefinitionValidateBeforeCall(createIdentifierDefinitionRequest, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<IdentifierDefinition>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<IdentifierDefinition> createIdentifierDefinitionWithHttpInfo(CreateIdentifierDefinitionRequest createIdentifierDefinitionRequest, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = createIdentifierDefinitionValidateBeforeCall(createIdentifierDefinitionRequest, null, opts);
        Type localVarReturnType = new TypeToken<IdentifierDefinition>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createIdentifierDefinitionAsync(CreateIdentifierDefinitionRequest createIdentifierDefinitionRequest, final ApiCallback<IdentifierDefinition> _callback) throws ApiException {

        okhttp3.Call localVarCall = createIdentifierDefinitionValidateBeforeCall(createIdentifierDefinitionRequest, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<IdentifierDefinition>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call createIdentifierDefinitionAsync(CreateIdentifierDefinitionRequest createIdentifierDefinitionRequest, final ApiCallback<IdentifierDefinition> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = createIdentifierDefinitionValidateBeforeCall(createIdentifierDefinitionRequest, _callback, opts);
        Type localVarReturnType = new TypeToken<IdentifierDefinition>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIcreateIdentifierDefinitionRequest {
        private CreateIdentifierDefinitionRequest createIdentifierDefinitionRequest;

        private APIcreateIdentifierDefinitionRequest() {
        }

        /**
         * Set createIdentifierDefinitionRequest
         * @param createIdentifierDefinitionRequest The request defining the new definition (optional)
         * @return APIcreateIdentifierDefinitionRequest
         */
        public APIcreateIdentifierDefinitionRequest createIdentifierDefinitionRequest(CreateIdentifierDefinitionRequest createIdentifierDefinitionRequest) {
            this.createIdentifierDefinitionRequest = createIdentifierDefinitionRequest;
            return this;
        }

        /**
         * Build call for createIdentifierDefinition
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The created Identifier Definition </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return createIdentifierDefinitionCall(createIdentifierDefinitionRequest, _callback);
        }

        /**
         * Execute createIdentifierDefinition request
         * @return IdentifierDefinition
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The created Identifier Definition </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public IdentifierDefinition execute() throws ApiException {
            ApiResponse<IdentifierDefinition> localVarResp = createIdentifierDefinitionWithHttpInfo(createIdentifierDefinitionRequest);
            return localVarResp.getData();
        }

        /**
         * Execute createIdentifierDefinition request. Use any specified configuration options to override any other configuration for this request only.
         * @return IdentifierDefinition
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The created Identifier Definition </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public IdentifierDefinition execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<IdentifierDefinition> localVarResp = createIdentifierDefinitionWithHttpInfo(createIdentifierDefinitionRequest, opts);
            return localVarResp.getData();
        }

        /**
         * Execute createIdentifierDefinition request with HTTP info returned
         * @return ApiResponse&lt;IdentifierDefinition&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The created Identifier Definition </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<IdentifierDefinition> executeWithHttpInfo() throws ApiException {
            return createIdentifierDefinitionWithHttpInfo(createIdentifierDefinitionRequest);
        }

        /**
         * Execute createIdentifierDefinition request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;IdentifierDefinition&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The created Identifier Definition </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<IdentifierDefinition> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return createIdentifierDefinitionWithHttpInfo(createIdentifierDefinitionRequest, opts);
        }

        /**
         * Execute createIdentifierDefinition request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The created Identifier Definition </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<IdentifierDefinition> _callback) throws ApiException {
            return createIdentifierDefinitionAsync(createIdentifierDefinitionRequest, _callback);
        }

        /**
         * Execute createIdentifierDefinition request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The created Identifier Definition </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<IdentifierDefinition> _callback, ConfigurationOptions opts) throws ApiException {
            return createIdentifierDefinitionAsync(createIdentifierDefinitionRequest, _callback, opts);
        }
    }

    /**
     * [EXPERIMENTAL] CreateIdentifierDefinition: Create an Identifier Definition
     * Define a new Identifier Definition
     * @return APIcreateIdentifierDefinitionRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The created Identifier Definition </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIcreateIdentifierDefinitionRequest createIdentifierDefinition() {
        return new APIcreateIdentifierDefinitionRequest();
    }
    private okhttp3.Call deleteIdentifierDefinitionCall(String domain, String identifierScope, String identifierType, final ApiCallback _callback) throws ApiException {
        return deleteIdentifierDefinitionCall(domain, identifierScope, identifierType,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call deleteIdentifierDefinitionCall(String domain, String identifierScope, String identifierType, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/identifierdefinitions/{domain}/{identifierScope}/{identifierType}"
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()))
            .replace("{" + "identifierScope" + "}", localVarApiClient.escapeString(identifierScope.toString()))
            .replace("{" + "identifierType" + "}", localVarApiClient.escapeString(identifierType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteIdentifierDefinitionValidateBeforeCall(String domain, String identifierScope, String identifierType, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling deleteIdentifierDefinition(Async)");
        }

        // verify the required parameter 'identifierScope' is set
        if (identifierScope == null) {
            throw new ApiException("Missing the required parameter 'identifierScope' when calling deleteIdentifierDefinition(Async)");
        }

        // verify the required parameter 'identifierType' is set
        if (identifierType == null) {
            throw new ApiException("Missing the required parameter 'identifierType' when calling deleteIdentifierDefinition(Async)");
        }

        return deleteIdentifierDefinitionCall(domain, identifierScope, identifierType, _callback, opts);

    }


    private ApiResponse<DeletedEntityResponse> deleteIdentifierDefinitionWithHttpInfo(String domain, String identifierScope, String identifierType) throws ApiException {
        okhttp3.Call localVarCall = deleteIdentifierDefinitionValidateBeforeCall(domain, identifierScope, identifierType, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<DeletedEntityResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<DeletedEntityResponse> deleteIdentifierDefinitionWithHttpInfo(String domain, String identifierScope, String identifierType, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = deleteIdentifierDefinitionValidateBeforeCall(domain, identifierScope, identifierType, null, opts);
        Type localVarReturnType = new TypeToken<DeletedEntityResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteIdentifierDefinitionAsync(String domain, String identifierScope, String identifierType, final ApiCallback<DeletedEntityResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteIdentifierDefinitionValidateBeforeCall(domain, identifierScope, identifierType, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<DeletedEntityResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call deleteIdentifierDefinitionAsync(String domain, String identifierScope, String identifierType, final ApiCallback<DeletedEntityResponse> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = deleteIdentifierDefinitionValidateBeforeCall(domain, identifierScope, identifierType, _callback, opts);
        Type localVarReturnType = new TypeToken<DeletedEntityResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIdeleteIdentifierDefinitionRequest {
        private final String domain;
        private final String identifierScope;
        private final String identifierType;

        private APIdeleteIdentifierDefinitionRequest(String domain, String identifierScope, String identifierType) {
            this.domain = domain;
            this.identifierScope = identifierScope;
            this.identifierType = identifierType;
        }

        /**
         * Build call for deleteIdentifierDefinition
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The deleted entity metadata </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteIdentifierDefinitionCall(domain, identifierScope, identifierType, _callback);
        }

        /**
         * Execute deleteIdentifierDefinition request
         * @return DeletedEntityResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The deleted entity metadata </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public DeletedEntityResponse execute() throws ApiException {
            ApiResponse<DeletedEntityResponse> localVarResp = deleteIdentifierDefinitionWithHttpInfo(domain, identifierScope, identifierType);
            return localVarResp.getData();
        }

        /**
         * Execute deleteIdentifierDefinition request. Use any specified configuration options to override any other configuration for this request only.
         * @return DeletedEntityResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The deleted entity metadata </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public DeletedEntityResponse execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<DeletedEntityResponse> localVarResp = deleteIdentifierDefinitionWithHttpInfo(domain, identifierScope, identifierType, opts);
            return localVarResp.getData();
        }

        /**
         * Execute deleteIdentifierDefinition request with HTTP info returned
         * @return ApiResponse&lt;DeletedEntityResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The deleted entity metadata </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DeletedEntityResponse> executeWithHttpInfo() throws ApiException {
            return deleteIdentifierDefinitionWithHttpInfo(domain, identifierScope, identifierType);
        }

        /**
         * Execute deleteIdentifierDefinition request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;DeletedEntityResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The deleted entity metadata </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DeletedEntityResponse> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return deleteIdentifierDefinitionWithHttpInfo(domain, identifierScope, identifierType, opts);
        }

        /**
         * Execute deleteIdentifierDefinition request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The deleted entity metadata </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DeletedEntityResponse> _callback) throws ApiException {
            return deleteIdentifierDefinitionAsync(domain, identifierScope, identifierType, _callback);
        }

        /**
         * Execute deleteIdentifierDefinition request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The deleted entity metadata </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DeletedEntityResponse> _callback, ConfigurationOptions opts) throws ApiException {
            return deleteIdentifierDefinitionAsync(domain, identifierScope, identifierType, _callback, opts);
        }
    }

    /**
     * [EXPERIMENTAL] DeleteIdentifierDefinition: Delete a particular Identifier Definition
     * The deletion will take effect from the Identifier Definition deletion datetime.  i.e. will no longer exist at any asAt datetime after the asAt datetime of deletion.
     * @param domain The type of entity to which the identifier relates (required)
     * @param identifierScope The scope that the identifier exists in (required)
     * @param identifierType What the identifier represents. Together with \&quot;domain\&quot; and \&quot;identifierScope\&quot; this uniquely identifies the identifier definition (required)
     * @return APIdeleteIdentifierDefinitionRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The deleted entity metadata </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIdeleteIdentifierDefinitionRequest deleteIdentifierDefinition(String domain, String identifierScope, String identifierType) {
        return new APIdeleteIdentifierDefinitionRequest(domain, identifierScope, identifierType);
    }
    private okhttp3.Call getIdentifierDefinitionCall(String domain, String identifierScope, String identifierType, OffsetDateTime asAt, String effectiveAt, List<String> propertyKeys, final ApiCallback _callback) throws ApiException {
        return getIdentifierDefinitionCall(domain, identifierScope, identifierType, asAt, effectiveAt, propertyKeys,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call getIdentifierDefinitionCall(String domain, String identifierScope, String identifierType, OffsetDateTime asAt, String effectiveAt, List<String> propertyKeys, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/identifierdefinitions/{domain}/{identifierScope}/{identifierType}"
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()))
            .replace("{" + "identifierScope" + "}", localVarApiClient.escapeString(identifierScope.toString()))
            .replace("{" + "identifierType" + "}", localVarApiClient.escapeString(identifierType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (asAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asAt", asAt));
        }

        if (effectiveAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("effectiveAt", effectiveAt));
        }

        if (propertyKeys != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "propertyKeys", propertyKeys));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getIdentifierDefinitionValidateBeforeCall(String domain, String identifierScope, String identifierType, OffsetDateTime asAt, String effectiveAt, List<String> propertyKeys, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling getIdentifierDefinition(Async)");
        }

        // verify the required parameter 'identifierScope' is set
        if (identifierScope == null) {
            throw new ApiException("Missing the required parameter 'identifierScope' when calling getIdentifierDefinition(Async)");
        }

        // verify the required parameter 'identifierType' is set
        if (identifierType == null) {
            throw new ApiException("Missing the required parameter 'identifierType' when calling getIdentifierDefinition(Async)");
        }

        return getIdentifierDefinitionCall(domain, identifierScope, identifierType, asAt, effectiveAt, propertyKeys, _callback, opts);

    }


    private ApiResponse<IdentifierDefinition> getIdentifierDefinitionWithHttpInfo(String domain, String identifierScope, String identifierType, OffsetDateTime asAt, String effectiveAt, List<String> propertyKeys) throws ApiException {
        okhttp3.Call localVarCall = getIdentifierDefinitionValidateBeforeCall(domain, identifierScope, identifierType, asAt, effectiveAt, propertyKeys, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<IdentifierDefinition>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<IdentifierDefinition> getIdentifierDefinitionWithHttpInfo(String domain, String identifierScope, String identifierType, OffsetDateTime asAt, String effectiveAt, List<String> propertyKeys, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = getIdentifierDefinitionValidateBeforeCall(domain, identifierScope, identifierType, asAt, effectiveAt, propertyKeys, null, opts);
        Type localVarReturnType = new TypeToken<IdentifierDefinition>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getIdentifierDefinitionAsync(String domain, String identifierScope, String identifierType, OffsetDateTime asAt, String effectiveAt, List<String> propertyKeys, final ApiCallback<IdentifierDefinition> _callback) throws ApiException {

        okhttp3.Call localVarCall = getIdentifierDefinitionValidateBeforeCall(domain, identifierScope, identifierType, asAt, effectiveAt, propertyKeys, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<IdentifierDefinition>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call getIdentifierDefinitionAsync(String domain, String identifierScope, String identifierType, OffsetDateTime asAt, String effectiveAt, List<String> propertyKeys, final ApiCallback<IdentifierDefinition> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = getIdentifierDefinitionValidateBeforeCall(domain, identifierScope, identifierType, asAt, effectiveAt, propertyKeys, _callback, opts);
        Type localVarReturnType = new TypeToken<IdentifierDefinition>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetIdentifierDefinitionRequest {
        private final String domain;
        private final String identifierScope;
        private final String identifierType;
        private OffsetDateTime asAt;
        private String effectiveAt;
        private List<String> propertyKeys;

        private APIgetIdentifierDefinitionRequest(String domain, String identifierScope, String identifierType) {
            this.domain = domain;
            this.identifierScope = identifierScope;
            this.identifierType = identifierType;
        }

        /**
         * Set asAt
         * @param asAt The asAt datetime at which to retrieve the Identifier Definition. Defaults to return   the latest version of the definition if not specified. (optional)
         * @return APIgetIdentifierDefinitionRequest
         */
        public APIgetIdentifierDefinitionRequest asAt(OffsetDateTime asAt) {
            this.asAt = asAt;
            return this;
        }

        /**
         * Set effectiveAt
         * @param effectiveAt The effectiveAt datetime at which to retrieve the Identifier Definitions.   Since Identifier Definitions exist for all effective time, this will only apply to properties (if requested)   on the Identifier Definition. (optional)
         * @return APIgetIdentifierDefinitionRequest
         */
        public APIgetIdentifierDefinitionRequest effectiveAt(String effectiveAt) {
            this.effectiveAt = effectiveAt;
            return this;
        }

        /**
         * Set propertyKeys
         * @param propertyKeys A list of property keys from the &#39;IdentifierDefinition&#39; domain to decorate onto the Identifier Definition.   These must take the format {domain}/{scope}/{code}. If no properties are specified, then no properties will be returned. (optional)
         * @return APIgetIdentifierDefinitionRequest
         */
        public APIgetIdentifierDefinitionRequest propertyKeys(List<String> propertyKeys) {
            this.propertyKeys = propertyKeys;
            return this;
        }

        /**
         * Build call for getIdentifierDefinition
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested Identifier Definition </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getIdentifierDefinitionCall(domain, identifierScope, identifierType, asAt, effectiveAt, propertyKeys, _callback);
        }

        /**
         * Execute getIdentifierDefinition request
         * @return IdentifierDefinition
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested Identifier Definition </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public IdentifierDefinition execute() throws ApiException {
            ApiResponse<IdentifierDefinition> localVarResp = getIdentifierDefinitionWithHttpInfo(domain, identifierScope, identifierType, asAt, effectiveAt, propertyKeys);
            return localVarResp.getData();
        }

        /**
         * Execute getIdentifierDefinition request. Use any specified configuration options to override any other configuration for this request only.
         * @return IdentifierDefinition
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested Identifier Definition </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public IdentifierDefinition execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<IdentifierDefinition> localVarResp = getIdentifierDefinitionWithHttpInfo(domain, identifierScope, identifierType, asAt, effectiveAt, propertyKeys, opts);
            return localVarResp.getData();
        }

        /**
         * Execute getIdentifierDefinition request with HTTP info returned
         * @return ApiResponse&lt;IdentifierDefinition&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested Identifier Definition </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<IdentifierDefinition> executeWithHttpInfo() throws ApiException {
            return getIdentifierDefinitionWithHttpInfo(domain, identifierScope, identifierType, asAt, effectiveAt, propertyKeys);
        }

        /**
         * Execute getIdentifierDefinition request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;IdentifierDefinition&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested Identifier Definition </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<IdentifierDefinition> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return getIdentifierDefinitionWithHttpInfo(domain, identifierScope, identifierType, asAt, effectiveAt, propertyKeys, opts);
        }

        /**
         * Execute getIdentifierDefinition request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested Identifier Definition </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<IdentifierDefinition> _callback) throws ApiException {
            return getIdentifierDefinitionAsync(domain, identifierScope, identifierType, asAt, effectiveAt, propertyKeys, _callback);
        }

        /**
         * Execute getIdentifierDefinition request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested Identifier Definition </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<IdentifierDefinition> _callback, ConfigurationOptions opts) throws ApiException {
            return getIdentifierDefinitionAsync(domain, identifierScope, identifierType, asAt, effectiveAt, propertyKeys, _callback, opts);
        }
    }

    /**
     * [EXPERIMENTAL] GetIdentifierDefinition: Get a single Identifier Definition
     * Get a single Identifier Definition using domain, identifierScope, identifierType, and an optional asAt   - defaulting to latest if not specified
     * @param domain The type of entity to which the identifier relates. (required)
     * @param identifierScope The scope that the identifier exists in (required)
     * @param identifierType What the identifier represents. Together with \&quot;domain\&quot; and \&quot;identifierScope\&quot; this uniquely identifies the identifier definition (required)
     * @return APIgetIdentifierDefinitionRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested Identifier Definition </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIgetIdentifierDefinitionRequest getIdentifierDefinition(String domain, String identifierScope, String identifierType) {
        return new APIgetIdentifierDefinitionRequest(domain, identifierScope, identifierType);
    }
    private okhttp3.Call listIdentifierDefinitionsCall(String effectiveAt, OffsetDateTime asAt, String page, Integer limit, String filter, List<String> sortBy, List<String> propertyKeys, final ApiCallback _callback) throws ApiException {
        return listIdentifierDefinitionsCall(effectiveAt, asAt, page, limit, filter, sortBy, propertyKeys,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call listIdentifierDefinitionsCall(String effectiveAt, OffsetDateTime asAt, String page, Integer limit, String filter, List<String> sortBy, List<String> propertyKeys, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/identifierdefinitions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (effectiveAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("effectiveAt", effectiveAt));
        }

        if (asAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asAt", asAt));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (sortBy != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "sortBy", sortBy));
        }

        if (propertyKeys != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "propertyKeys", propertyKeys));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listIdentifierDefinitionsValidateBeforeCall(String effectiveAt, OffsetDateTime asAt, String page, Integer limit, String filter, List<String> sortBy, List<String> propertyKeys, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        return listIdentifierDefinitionsCall(effectiveAt, asAt, page, limit, filter, sortBy, propertyKeys, _callback, opts);

    }


    private ApiResponse<PagedResourceListOfIdentifierDefinition> listIdentifierDefinitionsWithHttpInfo(String effectiveAt, OffsetDateTime asAt, String page, Integer limit, String filter, List<String> sortBy, List<String> propertyKeys) throws ApiException {
        okhttp3.Call localVarCall = listIdentifierDefinitionsValidateBeforeCall(effectiveAt, asAt, page, limit, filter, sortBy, propertyKeys, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<PagedResourceListOfIdentifierDefinition>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<PagedResourceListOfIdentifierDefinition> listIdentifierDefinitionsWithHttpInfo(String effectiveAt, OffsetDateTime asAt, String page, Integer limit, String filter, List<String> sortBy, List<String> propertyKeys, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = listIdentifierDefinitionsValidateBeforeCall(effectiveAt, asAt, page, limit, filter, sortBy, propertyKeys, null, opts);
        Type localVarReturnType = new TypeToken<PagedResourceListOfIdentifierDefinition>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listIdentifierDefinitionsAsync(String effectiveAt, OffsetDateTime asAt, String page, Integer limit, String filter, List<String> sortBy, List<String> propertyKeys, final ApiCallback<PagedResourceListOfIdentifierDefinition> _callback) throws ApiException {

        okhttp3.Call localVarCall = listIdentifierDefinitionsValidateBeforeCall(effectiveAt, asAt, page, limit, filter, sortBy, propertyKeys, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<PagedResourceListOfIdentifierDefinition>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call listIdentifierDefinitionsAsync(String effectiveAt, OffsetDateTime asAt, String page, Integer limit, String filter, List<String> sortBy, List<String> propertyKeys, final ApiCallback<PagedResourceListOfIdentifierDefinition> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = listIdentifierDefinitionsValidateBeforeCall(effectiveAt, asAt, page, limit, filter, sortBy, propertyKeys, _callback, opts);
        Type localVarReturnType = new TypeToken<PagedResourceListOfIdentifierDefinition>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIlistIdentifierDefinitionsRequest {
        private String effectiveAt;
        private OffsetDateTime asAt;
        private String page;
        private Integer limit;
        private String filter;
        private List<String> sortBy;
        private List<String> propertyKeys;

        private APIlistIdentifierDefinitionsRequest() {
        }

        /**
         * Set effectiveAt
         * @param effectiveAt The effectiveAt datetime at which to retrieve the Identifier Definitions.   Since Identifier Definitions exist for all effective time, this will only apply to properties (if requested)   on the Identifier Definition. (optional)
         * @return APIlistIdentifierDefinitionsRequest
         */
        public APIlistIdentifierDefinitionsRequest effectiveAt(String effectiveAt) {
            this.effectiveAt = effectiveAt;
            return this;
        }

        /**
         * Set asAt
         * @param asAt The asAt datetime at which to retrieve the Identifier Definitions. Defaults to return the latest   version of the Identifier Definitions if not specified. (optional)
         * @return APIlistIdentifierDefinitionsRequest
         */
        public APIlistIdentifierDefinitionsRequest asAt(OffsetDateTime asAt) {
            this.asAt = asAt;
            return this;
        }

        /**
         * Set page
         * @param page The pagination token to use to continue listing Identifier Definitions from a previous call to list   Identifier Definitions. This value is returned from the previous call. If a pagination token is provided the sortBy,   filter, effectiveAt, and asAt fields must not have changed since the original request. (optional)
         * @return APIlistIdentifierDefinitionsRequest
         */
        public APIlistIdentifierDefinitionsRequest page(String page) {
            this.page = page;
            return this;
        }

        /**
         * Set limit
         * @param limit When paginating, limit the number of returned results to this many per page. (optional)
         * @return APIlistIdentifierDefinitionsRequest
         */
        public APIlistIdentifierDefinitionsRequest limit(Integer limit) {
            this.limit = limit;
            return this;
        }

        /**
         * Set filter
         * @param filter Expression to filter the result set. Read more about filtering results from LUSID here:   https://support.lusid.com/filtering-results-from-lusid. (optional)
         * @return APIlistIdentifierDefinitionsRequest
         */
        public APIlistIdentifierDefinitionsRequest filter(String filter) {
            this.filter = filter;
            return this;
        }

        /**
         * Set sortBy
         * @param sortBy A list of field names to sort by, each suffixed by \&quot; ASC\&quot; or \&quot; DESC\&quot; (optional)
         * @return APIlistIdentifierDefinitionsRequest
         */
        public APIlistIdentifierDefinitionsRequest sortBy(List<String> sortBy) {
            this.sortBy = sortBy;
            return this;
        }

        /**
         * Set propertyKeys
         * @param propertyKeys A list of property keys from the &#39;IdentifierDefinition&#39; domain to decorate onto the Identifier Definition.   These must take the format {domain}/{scope}/{code}. (optional)
         * @return APIlistIdentifierDefinitionsRequest
         */
        public APIlistIdentifierDefinitionsRequest propertyKeys(List<String> propertyKeys) {
            this.propertyKeys = propertyKeys;
            return this;
        }

        /**
         * Build call for listIdentifierDefinitions
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested list of Identifier Definitions </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listIdentifierDefinitionsCall(effectiveAt, asAt, page, limit, filter, sortBy, propertyKeys, _callback);
        }

        /**
         * Execute listIdentifierDefinitions request
         * @return PagedResourceListOfIdentifierDefinition
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested list of Identifier Definitions </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public PagedResourceListOfIdentifierDefinition execute() throws ApiException {
            ApiResponse<PagedResourceListOfIdentifierDefinition> localVarResp = listIdentifierDefinitionsWithHttpInfo(effectiveAt, asAt, page, limit, filter, sortBy, propertyKeys);
            return localVarResp.getData();
        }

        /**
         * Execute listIdentifierDefinitions request. Use any specified configuration options to override any other configuration for this request only.
         * @return PagedResourceListOfIdentifierDefinition
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested list of Identifier Definitions </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public PagedResourceListOfIdentifierDefinition execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<PagedResourceListOfIdentifierDefinition> localVarResp = listIdentifierDefinitionsWithHttpInfo(effectiveAt, asAt, page, limit, filter, sortBy, propertyKeys, opts);
            return localVarResp.getData();
        }

        /**
         * Execute listIdentifierDefinitions request with HTTP info returned
         * @return ApiResponse&lt;PagedResourceListOfIdentifierDefinition&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested list of Identifier Definitions </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PagedResourceListOfIdentifierDefinition> executeWithHttpInfo() throws ApiException {
            return listIdentifierDefinitionsWithHttpInfo(effectiveAt, asAt, page, limit, filter, sortBy, propertyKeys);
        }

        /**
         * Execute listIdentifierDefinitions request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;PagedResourceListOfIdentifierDefinition&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested list of Identifier Definitions </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PagedResourceListOfIdentifierDefinition> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return listIdentifierDefinitionsWithHttpInfo(effectiveAt, asAt, page, limit, filter, sortBy, propertyKeys, opts);
        }

        /**
         * Execute listIdentifierDefinitions request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested list of Identifier Definitions </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PagedResourceListOfIdentifierDefinition> _callback) throws ApiException {
            return listIdentifierDefinitionsAsync(effectiveAt, asAt, page, limit, filter, sortBy, propertyKeys, _callback);
        }

        /**
         * Execute listIdentifierDefinitions request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested list of Identifier Definitions </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PagedResourceListOfIdentifierDefinition> _callback, ConfigurationOptions opts) throws ApiException {
            return listIdentifierDefinitionsAsync(effectiveAt, asAt, page, limit, filter, sortBy, propertyKeys, _callback, opts);
        }
    }

    /**
     * [EXPERIMENTAL] ListIdentifierDefinitions: List Identifier Definitions
     * Retrieves all Identifier Definitions that fit the filter, in a specific order if sortBy is provided  Supports pagination
     * @return APIlistIdentifierDefinitionsRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested list of Identifier Definitions </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIlistIdentifierDefinitionsRequest listIdentifierDefinitions() {
        return new APIlistIdentifierDefinitionsRequest();
    }
    private okhttp3.Call updateIdentifierDefinitionCall(String domain, String identifierScope, String identifierType, UpdateIdentifierDefinitionRequest updateIdentifierDefinitionRequest, final ApiCallback _callback) throws ApiException {
        return updateIdentifierDefinitionCall(domain, identifierScope, identifierType, updateIdentifierDefinitionRequest,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call updateIdentifierDefinitionCall(String domain, String identifierScope, String identifierType, UpdateIdentifierDefinitionRequest updateIdentifierDefinitionRequest, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateIdentifierDefinitionRequest;

        // create path and map variables
        String localVarPath = "/api/identifierdefinitions/{domain}/{identifierScope}/{identifierType}"
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()))
            .replace("{" + "identifierScope" + "}", localVarApiClient.escapeString(identifierScope.toString()))
            .replace("{" + "identifierType" + "}", localVarApiClient.escapeString(identifierType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateIdentifierDefinitionValidateBeforeCall(String domain, String identifierScope, String identifierType, UpdateIdentifierDefinitionRequest updateIdentifierDefinitionRequest, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling updateIdentifierDefinition(Async)");
        }

        // verify the required parameter 'identifierScope' is set
        if (identifierScope == null) {
            throw new ApiException("Missing the required parameter 'identifierScope' when calling updateIdentifierDefinition(Async)");
        }

        // verify the required parameter 'identifierType' is set
        if (identifierType == null) {
            throw new ApiException("Missing the required parameter 'identifierType' when calling updateIdentifierDefinition(Async)");
        }

        return updateIdentifierDefinitionCall(domain, identifierScope, identifierType, updateIdentifierDefinitionRequest, _callback, opts);

    }


    private ApiResponse<IdentifierDefinition> updateIdentifierDefinitionWithHttpInfo(String domain, String identifierScope, String identifierType, UpdateIdentifierDefinitionRequest updateIdentifierDefinitionRequest) throws ApiException {
        okhttp3.Call localVarCall = updateIdentifierDefinitionValidateBeforeCall(domain, identifierScope, identifierType, updateIdentifierDefinitionRequest, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<IdentifierDefinition>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<IdentifierDefinition> updateIdentifierDefinitionWithHttpInfo(String domain, String identifierScope, String identifierType, UpdateIdentifierDefinitionRequest updateIdentifierDefinitionRequest, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = updateIdentifierDefinitionValidateBeforeCall(domain, identifierScope, identifierType, updateIdentifierDefinitionRequest, null, opts);
        Type localVarReturnType = new TypeToken<IdentifierDefinition>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateIdentifierDefinitionAsync(String domain, String identifierScope, String identifierType, UpdateIdentifierDefinitionRequest updateIdentifierDefinitionRequest, final ApiCallback<IdentifierDefinition> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateIdentifierDefinitionValidateBeforeCall(domain, identifierScope, identifierType, updateIdentifierDefinitionRequest, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<IdentifierDefinition>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call updateIdentifierDefinitionAsync(String domain, String identifierScope, String identifierType, UpdateIdentifierDefinitionRequest updateIdentifierDefinitionRequest, final ApiCallback<IdentifierDefinition> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = updateIdentifierDefinitionValidateBeforeCall(domain, identifierScope, identifierType, updateIdentifierDefinitionRequest, _callback, opts);
        Type localVarReturnType = new TypeToken<IdentifierDefinition>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIupdateIdentifierDefinitionRequest {
        private final String domain;
        private final String identifierScope;
        private final String identifierType;
        private UpdateIdentifierDefinitionRequest updateIdentifierDefinitionRequest;

        private APIupdateIdentifierDefinitionRequest(String domain, String identifierScope, String identifierType) {
            this.domain = domain;
            this.identifierScope = identifierScope;
            this.identifierType = identifierType;
        }

        /**
         * Set updateIdentifierDefinitionRequest
         * @param updateIdentifierDefinitionRequest The request containing the updated details of the Identifier Definition. (optional)
         * @return APIupdateIdentifierDefinitionRequest
         */
        public APIupdateIdentifierDefinitionRequest updateIdentifierDefinitionRequest(UpdateIdentifierDefinitionRequest updateIdentifierDefinitionRequest) {
            this.updateIdentifierDefinitionRequest = updateIdentifierDefinitionRequest;
            return this;
        }

        /**
         * Build call for updateIdentifierDefinition
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The updated version of the requested Identifier Definition </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return updateIdentifierDefinitionCall(domain, identifierScope, identifierType, updateIdentifierDefinitionRequest, _callback);
        }

        /**
         * Execute updateIdentifierDefinition request
         * @return IdentifierDefinition
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The updated version of the requested Identifier Definition </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public IdentifierDefinition execute() throws ApiException {
            ApiResponse<IdentifierDefinition> localVarResp = updateIdentifierDefinitionWithHttpInfo(domain, identifierScope, identifierType, updateIdentifierDefinitionRequest);
            return localVarResp.getData();
        }

        /**
         * Execute updateIdentifierDefinition request. Use any specified configuration options to override any other configuration for this request only.
         * @return IdentifierDefinition
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The updated version of the requested Identifier Definition </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public IdentifierDefinition execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<IdentifierDefinition> localVarResp = updateIdentifierDefinitionWithHttpInfo(domain, identifierScope, identifierType, updateIdentifierDefinitionRequest, opts);
            return localVarResp.getData();
        }

        /**
         * Execute updateIdentifierDefinition request with HTTP info returned
         * @return ApiResponse&lt;IdentifierDefinition&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The updated version of the requested Identifier Definition </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<IdentifierDefinition> executeWithHttpInfo() throws ApiException {
            return updateIdentifierDefinitionWithHttpInfo(domain, identifierScope, identifierType, updateIdentifierDefinitionRequest);
        }

        /**
         * Execute updateIdentifierDefinition request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;IdentifierDefinition&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The updated version of the requested Identifier Definition </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<IdentifierDefinition> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return updateIdentifierDefinitionWithHttpInfo(domain, identifierScope, identifierType, updateIdentifierDefinitionRequest, opts);
        }

        /**
         * Execute updateIdentifierDefinition request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The updated version of the requested Identifier Definition </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<IdentifierDefinition> _callback) throws ApiException {
            return updateIdentifierDefinitionAsync(domain, identifierScope, identifierType, updateIdentifierDefinitionRequest, _callback);
        }

        /**
         * Execute updateIdentifierDefinition request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The updated version of the requested Identifier Definition </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<IdentifierDefinition> _callback, ConfigurationOptions opts) throws ApiException {
            return updateIdentifierDefinitionAsync(domain, identifierScope, identifierType, updateIdentifierDefinitionRequest, _callback, opts);
        }
    }

    /**
     * [EXPERIMENTAL] UpdateIdentifierDefinition: Update Identifier Definition defined by domain, identifierScope, and identifierType
     * Overwrites an existing Identifier Definition.
     * @param domain The type of entity to which the identifier relates (required)
     * @param identifierScope The scope that the identifier exists in (required)
     * @param identifierType What the identifier represents. Together with \&quot;domain\&quot; and \&quot;identifierScope\&quot; this uniquely identifies the Identifier Definition (required)
     * @return APIupdateIdentifierDefinitionRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated version of the requested Identifier Definition </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIupdateIdentifierDefinitionRequest updateIdentifierDefinition(String domain, String identifierScope, String identifierType) {
        return new APIupdateIdentifierDefinitionRequest(domain, identifierScope, identifierType);
    }
}
