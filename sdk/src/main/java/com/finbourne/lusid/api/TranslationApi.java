/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.api;

import com.finbourne.lusid.ApiCallback;
import com.finbourne.lusid.ApiClient;
import com.finbourne.lusid.ApiException;
import com.finbourne.lusid.ApiResponse;
import com.finbourne.lusid.Configuration;
import com.finbourne.lusid.Pair;
import com.finbourne.lusid.ProgressRequestBody;
import com.finbourne.lusid.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.finbourne.lusid.model.LusidProblemDetails;
import com.finbourne.lusid.model.LusidValidationProblemDetails;
import com.finbourne.lusid.model.TranslateInstrumentDefinitionsRequest;
import com.finbourne.lusid.model.TranslateInstrumentDefinitionsResponse;
import com.finbourne.lusid.model.TranslateTradeTicketRequest;
import com.finbourne.lusid.model.TranslateTradeTicketsResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TranslationApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TranslationApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TranslationApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call translateInstrumentDefinitionsCall(TranslateInstrumentDefinitionsRequest translateInstrumentDefinitionsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = translateInstrumentDefinitionsRequest;

        // create path and map variables
        String localVarPath = "/api/translation/instrumentdefinitions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call translateInstrumentDefinitionsValidateBeforeCall(TranslateInstrumentDefinitionsRequest translateInstrumentDefinitionsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'translateInstrumentDefinitionsRequest' is set
        if (translateInstrumentDefinitionsRequest == null) {
            throw new ApiException("Missing the required parameter 'translateInstrumentDefinitionsRequest' when calling translateInstrumentDefinitions(Async)");
        }

        return translateInstrumentDefinitionsCall(translateInstrumentDefinitionsRequest, _callback);

    }


    private ApiResponse<TranslateInstrumentDefinitionsResponse> translateInstrumentDefinitionsWithHttpInfo(TranslateInstrumentDefinitionsRequest translateInstrumentDefinitionsRequest) throws ApiException {
        okhttp3.Call localVarCall = translateInstrumentDefinitionsValidateBeforeCall(translateInstrumentDefinitionsRequest, null);
        Type localVarReturnType = new TypeToken<TranslateInstrumentDefinitionsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call translateInstrumentDefinitionsAsync(TranslateInstrumentDefinitionsRequest translateInstrumentDefinitionsRequest, final ApiCallback<TranslateInstrumentDefinitionsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = translateInstrumentDefinitionsValidateBeforeCall(translateInstrumentDefinitionsRequest, _callback);
        Type localVarReturnType = new TypeToken<TranslateInstrumentDefinitionsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APItranslateInstrumentDefinitionsRequest {
        private final TranslateInstrumentDefinitionsRequest translateInstrumentDefinitionsRequest;

        private APItranslateInstrumentDefinitionsRequest(TranslateInstrumentDefinitionsRequest translateInstrumentDefinitionsRequest) {
            this.translateInstrumentDefinitionsRequest = translateInstrumentDefinitionsRequest;
        }

        /**
         * Build call for translateInstrumentDefinitions
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The successfully translated instruments along with any failures </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return translateInstrumentDefinitionsCall(translateInstrumentDefinitionsRequest, _callback);
        }

        /**
         * Execute translateInstrumentDefinitions request
         * @return TranslateInstrumentDefinitionsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The successfully translated instruments along with any failures </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public TranslateInstrumentDefinitionsResponse execute() throws ApiException {
            ApiResponse<TranslateInstrumentDefinitionsResponse> localVarResp = translateInstrumentDefinitionsWithHttpInfo(translateInstrumentDefinitionsRequest);
            return localVarResp.getData();
        }

        /**
         * Execute translateInstrumentDefinitions request with HTTP info returned
         * @return ApiResponse&lt;TranslateInstrumentDefinitionsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The successfully translated instruments along with any failures </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TranslateInstrumentDefinitionsResponse> executeWithHttpInfo() throws ApiException {
            return translateInstrumentDefinitionsWithHttpInfo(translateInstrumentDefinitionsRequest);
        }

        /**
         * Execute translateInstrumentDefinitions request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The successfully translated instruments along with any failures </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TranslateInstrumentDefinitionsResponse> _callback) throws ApiException {
            return translateInstrumentDefinitionsAsync(translateInstrumentDefinitionsRequest, _callback);
        }
    }

    /**
     * [EXPERIMENTAL] TranslateInstrumentDefinitions: Translate instruments
     * Translates one or more instruments into the given target dialect.     In the request each instrument definition should be keyed by a unique correlation id. This id is ephemeral  and is not stored by LUSID. It serves only as a way to easily identify each instrument in the response.     Any instrument that is not already in the LUSID dialect should be given as an ExoticInstrument.     The response will return both the collection of successfully translated instruments in the target dialect,  as well as those that failed.  For the failures a reason will be provided explaining why the instrument could not be updated or inserted.
     * @param translateInstrumentDefinitionsRequest The definitions of the instruments to translate along with the target dialect. (required)
     * @return APItranslateInstrumentDefinitionsRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The successfully translated instruments along with any failures </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APItranslateInstrumentDefinitionsRequest translateInstrumentDefinitions(TranslateInstrumentDefinitionsRequest translateInstrumentDefinitionsRequest) {
        return new APItranslateInstrumentDefinitionsRequest(translateInstrumentDefinitionsRequest);
    }
    private okhttp3.Call translateTradeTicketsCall(TranslateTradeTicketRequest translateTradeTicketRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = translateTradeTicketRequest;

        // create path and map variables
        String localVarPath = "/api/translation/tradetickets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call translateTradeTicketsValidateBeforeCall(TranslateTradeTicketRequest translateTradeTicketRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'translateTradeTicketRequest' is set
        if (translateTradeTicketRequest == null) {
            throw new ApiException("Missing the required parameter 'translateTradeTicketRequest' when calling translateTradeTickets(Async)");
        }

        return translateTradeTicketsCall(translateTradeTicketRequest, _callback);

    }


    private ApiResponse<TranslateTradeTicketsResponse> translateTradeTicketsWithHttpInfo(TranslateTradeTicketRequest translateTradeTicketRequest) throws ApiException {
        okhttp3.Call localVarCall = translateTradeTicketsValidateBeforeCall(translateTradeTicketRequest, null);
        Type localVarReturnType = new TypeToken<TranslateTradeTicketsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call translateTradeTicketsAsync(TranslateTradeTicketRequest translateTradeTicketRequest, final ApiCallback<TranslateTradeTicketsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = translateTradeTicketsValidateBeforeCall(translateTradeTicketRequest, _callback);
        Type localVarReturnType = new TypeToken<TranslateTradeTicketsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APItranslateTradeTicketsRequest {
        private final TranslateTradeTicketRequest translateTradeTicketRequest;

        private APItranslateTradeTicketsRequest(TranslateTradeTicketRequest translateTradeTicketRequest) {
            this.translateTradeTicketRequest = translateTradeTicketRequest;
        }

        /**
         * Build call for translateTradeTickets
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The successfully translated trade ticket along with any failures </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return translateTradeTicketsCall(translateTradeTicketRequest, _callback);
        }

        /**
         * Execute translateTradeTickets request
         * @return TranslateTradeTicketsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The successfully translated trade ticket along with any failures </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public TranslateTradeTicketsResponse execute() throws ApiException {
            ApiResponse<TranslateTradeTicketsResponse> localVarResp = translateTradeTicketsWithHttpInfo(translateTradeTicketRequest);
            return localVarResp.getData();
        }

        /**
         * Execute translateTradeTickets request with HTTP info returned
         * @return ApiResponse&lt;TranslateTradeTicketsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The successfully translated trade ticket along with any failures </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TranslateTradeTicketsResponse> executeWithHttpInfo() throws ApiException {
            return translateTradeTicketsWithHttpInfo(translateTradeTicketRequest);
        }

        /**
         * Execute translateTradeTickets request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The successfully translated trade ticket along with any failures </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TranslateTradeTicketsResponse> _callback) throws ApiException {
            return translateTradeTicketsAsync(translateTradeTicketRequest, _callback);
        }
    }

    /**
     * [EXPERIMENTAL] TranslateTradeTickets: Translate trade ticket
     * Translates one or more trade tickets into the given target dialect.     In the request each trade ticket definition should be keyed by a unique correlation id. This id is ephemeral  and is not stored by LUSID. It serves only as a way to easily identify each trade ticket in the response.     The response will return both the collection of successfully translated trade tickets in the target dialect,  as well as those that failed.  For the failures a reason will be provided explaining why the trade ticket could not be updated or inserted.
     * @param translateTradeTicketRequest The definitions of the trade ticket to translate along with the target dialect. (required)
     * @return APItranslateTradeTicketsRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The successfully translated trade ticket along with any failures </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APItranslateTradeTicketsRequest translateTradeTickets(TranslateTradeTicketRequest translateTradeTicketRequest) {
        return new APItranslateTradeTicketsRequest(translateTradeTicketRequest);
    }
}
