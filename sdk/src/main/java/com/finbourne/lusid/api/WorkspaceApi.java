/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.api;

import com.finbourne.lusid.ApiCallback;
import com.finbourne.lusid.ApiClient;
import com.finbourne.lusid.ApiException;
import com.finbourne.lusid.ApiResponse;
import com.finbourne.lusid.Configuration;
import com.finbourne.lusid.Pair;
import com.finbourne.lusid.ProgressRequestBody;
import com.finbourne.lusid.ProgressResponseBody;
import com.finbourne.lusid.extensions.ConfigurationOptions;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.finbourne.lusid.model.DeletedEntityResponse;
import com.finbourne.lusid.model.LusidProblemDetails;
import com.finbourne.lusid.model.LusidValidationProblemDetails;
import java.time.OffsetDateTime;
import com.finbourne.lusid.model.PagedResourceListOfWorkspace;
import com.finbourne.lusid.model.PagedResourceListOfWorkspaceItem;
import com.finbourne.lusid.model.Workspace;
import com.finbourne.lusid.model.WorkspaceCreationRequest;
import com.finbourne.lusid.model.WorkspaceItem;
import com.finbourne.lusid.model.WorkspaceItemCreationRequest;
import com.finbourne.lusid.model.WorkspaceItemUpdateRequest;
import com.finbourne.lusid.model.WorkspaceUpdateRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class WorkspaceApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public WorkspaceApi() {
        this(Configuration.getDefaultApiClient());
    }

    public WorkspaceApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createItemCall(String visibility, String workspaceName, WorkspaceItemCreationRequest workspaceItemCreationRequest, final ApiCallback _callback) throws ApiException {
        return createItemCall(visibility, workspaceName, workspaceItemCreationRequest,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call createItemCall(String visibility, String workspaceName, WorkspaceItemCreationRequest workspaceItemCreationRequest, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = workspaceItemCreationRequest;

        // create path and map variables
        String localVarPath = "/api/workspaces/{visibility}/{workspaceName}/items"
            .replace("{" + "visibility" + "}", localVarApiClient.escapeString(visibility.toString()))
            .replace("{" + "workspaceName" + "}", localVarApiClient.escapeString(workspaceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createItemValidateBeforeCall(String visibility, String workspaceName, WorkspaceItemCreationRequest workspaceItemCreationRequest, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'visibility' is set
        if (visibility == null) {
            throw new ApiException("Missing the required parameter 'visibility' when calling createItem(Async)");
        }

        // verify the required parameter 'workspaceName' is set
        if (workspaceName == null) {
            throw new ApiException("Missing the required parameter 'workspaceName' when calling createItem(Async)");
        }

        return createItemCall(visibility, workspaceName, workspaceItemCreationRequest, _callback, opts);

    }


    private ApiResponse<WorkspaceItem> createItemWithHttpInfo(String visibility, String workspaceName, WorkspaceItemCreationRequest workspaceItemCreationRequest) throws ApiException {
        okhttp3.Call localVarCall = createItemValidateBeforeCall(visibility, workspaceName, workspaceItemCreationRequest, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<WorkspaceItem>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<WorkspaceItem> createItemWithHttpInfo(String visibility, String workspaceName, WorkspaceItemCreationRequest workspaceItemCreationRequest, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = createItemValidateBeforeCall(visibility, workspaceName, workspaceItemCreationRequest, null, opts);
        Type localVarReturnType = new TypeToken<WorkspaceItem>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createItemAsync(String visibility, String workspaceName, WorkspaceItemCreationRequest workspaceItemCreationRequest, final ApiCallback<WorkspaceItem> _callback) throws ApiException {

        okhttp3.Call localVarCall = createItemValidateBeforeCall(visibility, workspaceName, workspaceItemCreationRequest, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<WorkspaceItem>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call createItemAsync(String visibility, String workspaceName, WorkspaceItemCreationRequest workspaceItemCreationRequest, final ApiCallback<WorkspaceItem> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = createItemValidateBeforeCall(visibility, workspaceName, workspaceItemCreationRequest, _callback, opts);
        Type localVarReturnType = new TypeToken<WorkspaceItem>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIcreateItemRequest {
        private final String visibility;
        private final String workspaceName;
        private WorkspaceItemCreationRequest workspaceItemCreationRequest;

        private APIcreateItemRequest(String visibility, String workspaceName) {
            this.visibility = visibility;
            this.workspaceName = workspaceName;
        }

        /**
         * Set workspaceItemCreationRequest
         * @param workspaceItemCreationRequest The item to be created. (optional)
         * @return APIcreateItemRequest
         */
        public APIcreateItemRequest workspaceItemCreationRequest(WorkspaceItemCreationRequest workspaceItemCreationRequest) {
            this.workspaceItemCreationRequest = workspaceItemCreationRequest;
            return this;
        }

        /**
         * Build call for createItem
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The workspace item created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return createItemCall(visibility, workspaceName, workspaceItemCreationRequest, _callback);
        }

        /**
         * Execute createItem request
         * @return WorkspaceItem
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The workspace item created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public WorkspaceItem execute() throws ApiException {
            ApiResponse<WorkspaceItem> localVarResp = createItemWithHttpInfo(visibility, workspaceName, workspaceItemCreationRequest);
            return localVarResp.getData();
        }

        /**
         * Execute createItem request. Use any specified configuration options to override any other configuration for this request only.
         * @return WorkspaceItem
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The workspace item created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public WorkspaceItem execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<WorkspaceItem> localVarResp = createItemWithHttpInfo(visibility, workspaceName, workspaceItemCreationRequest, opts);
            return localVarResp.getData();
        }

        /**
         * Execute createItem request with HTTP info returned
         * @return ApiResponse&lt;WorkspaceItem&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The workspace item created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WorkspaceItem> executeWithHttpInfo() throws ApiException {
            return createItemWithHttpInfo(visibility, workspaceName, workspaceItemCreationRequest);
        }

        /**
         * Execute createItem request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;WorkspaceItem&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The workspace item created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WorkspaceItem> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return createItemWithHttpInfo(visibility, workspaceName, workspaceItemCreationRequest, opts);
        }

        /**
         * Execute createItem request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The workspace item created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WorkspaceItem> _callback) throws ApiException {
            return createItemAsync(visibility, workspaceName, workspaceItemCreationRequest, _callback);
        }

        /**
         * Execute createItem request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The workspace item created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WorkspaceItem> _callback, ConfigurationOptions opts) throws ApiException {
            return createItemAsync(visibility, workspaceName, workspaceItemCreationRequest, _callback, opts);
        }
    }

    /**
     * [EXPERIMENTAL] CreateItem: Create a new item in a workspace.
     * Create a new item in a workspace.
     * @param visibility The visibility for the containing workspace. Must be &#x60;shared&#x60; or &#x60;personal&#x60;; case is important. (required)
     * @param workspaceName The item&#39;s workspace name. (required)
     * @return APIcreateItemRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The workspace item created. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIcreateItemRequest createItem(String visibility, String workspaceName) {
        return new APIcreateItemRequest(visibility, workspaceName);
    }
    private okhttp3.Call createWorkspaceCall(String visibility, WorkspaceCreationRequest workspaceCreationRequest, final ApiCallback _callback) throws ApiException {
        return createWorkspaceCall(visibility, workspaceCreationRequest,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call createWorkspaceCall(String visibility, WorkspaceCreationRequest workspaceCreationRequest, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = workspaceCreationRequest;

        // create path and map variables
        String localVarPath = "/api/workspaces/{visibility}"
            .replace("{" + "visibility" + "}", localVarApiClient.escapeString(visibility.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createWorkspaceValidateBeforeCall(String visibility, WorkspaceCreationRequest workspaceCreationRequest, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'visibility' is set
        if (visibility == null) {
            throw new ApiException("Missing the required parameter 'visibility' when calling createWorkspace(Async)");
        }

        return createWorkspaceCall(visibility, workspaceCreationRequest, _callback, opts);

    }


    private ApiResponse<Workspace> createWorkspaceWithHttpInfo(String visibility, WorkspaceCreationRequest workspaceCreationRequest) throws ApiException {
        okhttp3.Call localVarCall = createWorkspaceValidateBeforeCall(visibility, workspaceCreationRequest, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<Workspace>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<Workspace> createWorkspaceWithHttpInfo(String visibility, WorkspaceCreationRequest workspaceCreationRequest, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = createWorkspaceValidateBeforeCall(visibility, workspaceCreationRequest, null, opts);
        Type localVarReturnType = new TypeToken<Workspace>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createWorkspaceAsync(String visibility, WorkspaceCreationRequest workspaceCreationRequest, final ApiCallback<Workspace> _callback) throws ApiException {

        okhttp3.Call localVarCall = createWorkspaceValidateBeforeCall(visibility, workspaceCreationRequest, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<Workspace>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call createWorkspaceAsync(String visibility, WorkspaceCreationRequest workspaceCreationRequest, final ApiCallback<Workspace> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = createWorkspaceValidateBeforeCall(visibility, workspaceCreationRequest, _callback, opts);
        Type localVarReturnType = new TypeToken<Workspace>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIcreateWorkspaceRequest {
        private final String visibility;
        private WorkspaceCreationRequest workspaceCreationRequest;

        private APIcreateWorkspaceRequest(String visibility) {
            this.visibility = visibility;
        }

        /**
         * Set workspaceCreationRequest
         * @param workspaceCreationRequest The workspace to be created. (optional)
         * @return APIcreateWorkspaceRequest
         */
        public APIcreateWorkspaceRequest workspaceCreationRequest(WorkspaceCreationRequest workspaceCreationRequest) {
            this.workspaceCreationRequest = workspaceCreationRequest;
            return this;
        }

        /**
         * Build call for createWorkspace
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The workspace created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return createWorkspaceCall(visibility, workspaceCreationRequest, _callback);
        }

        /**
         * Execute createWorkspace request
         * @return Workspace
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The workspace created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public Workspace execute() throws ApiException {
            ApiResponse<Workspace> localVarResp = createWorkspaceWithHttpInfo(visibility, workspaceCreationRequest);
            return localVarResp.getData();
        }

        /**
         * Execute createWorkspace request. Use any specified configuration options to override any other configuration for this request only.
         * @return Workspace
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The workspace created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public Workspace execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<Workspace> localVarResp = createWorkspaceWithHttpInfo(visibility, workspaceCreationRequest, opts);
            return localVarResp.getData();
        }

        /**
         * Execute createWorkspace request with HTTP info returned
         * @return ApiResponse&lt;Workspace&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The workspace created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Workspace> executeWithHttpInfo() throws ApiException {
            return createWorkspaceWithHttpInfo(visibility, workspaceCreationRequest);
        }

        /**
         * Execute createWorkspace request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;Workspace&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The workspace created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Workspace> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return createWorkspaceWithHttpInfo(visibility, workspaceCreationRequest, opts);
        }

        /**
         * Execute createWorkspace request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The workspace created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Workspace> _callback) throws ApiException {
            return createWorkspaceAsync(visibility, workspaceCreationRequest, _callback);
        }

        /**
         * Execute createWorkspace request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The workspace created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Workspace> _callback, ConfigurationOptions opts) throws ApiException {
            return createWorkspaceAsync(visibility, workspaceCreationRequest, _callback, opts);
        }
    }

    /**
     * [EXPERIMENTAL] CreateWorkspace: Create a new workspace.
     * Create a new workspace.
     * @param visibility The visibility for the workspace being created. Must be &#x60;shared&#x60; or &#x60;personal&#x60;; case is important. (required)
     * @return APIcreateWorkspaceRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The workspace created. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIcreateWorkspaceRequest createWorkspace(String visibility) {
        return new APIcreateWorkspaceRequest(visibility);
    }
    private okhttp3.Call deleteItemCall(String visibility, String workspaceName, String groupName, String itemName, final ApiCallback _callback) throws ApiException {
        return deleteItemCall(visibility, workspaceName, groupName, itemName,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call deleteItemCall(String visibility, String workspaceName, String groupName, String itemName, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/workspaces/{visibility}/{workspaceName}/items/{groupName}/{itemName}"
            .replace("{" + "visibility" + "}", localVarApiClient.escapeString(visibility.toString()))
            .replace("{" + "workspaceName" + "}", localVarApiClient.escapeString(workspaceName.toString()))
            .replace("{" + "groupName" + "}", localVarApiClient.escapeString(groupName.toString()))
            .replace("{" + "itemName" + "}", localVarApiClient.escapeString(itemName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteItemValidateBeforeCall(String visibility, String workspaceName, String groupName, String itemName, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'visibility' is set
        if (visibility == null) {
            throw new ApiException("Missing the required parameter 'visibility' when calling deleteItem(Async)");
        }

        // verify the required parameter 'workspaceName' is set
        if (workspaceName == null) {
            throw new ApiException("Missing the required parameter 'workspaceName' when calling deleteItem(Async)");
        }

        // verify the required parameter 'groupName' is set
        if (groupName == null) {
            throw new ApiException("Missing the required parameter 'groupName' when calling deleteItem(Async)");
        }

        // verify the required parameter 'itemName' is set
        if (itemName == null) {
            throw new ApiException("Missing the required parameter 'itemName' when calling deleteItem(Async)");
        }

        return deleteItemCall(visibility, workspaceName, groupName, itemName, _callback, opts);

    }


    private ApiResponse<DeletedEntityResponse> deleteItemWithHttpInfo(String visibility, String workspaceName, String groupName, String itemName) throws ApiException {
        okhttp3.Call localVarCall = deleteItemValidateBeforeCall(visibility, workspaceName, groupName, itemName, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<DeletedEntityResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<DeletedEntityResponse> deleteItemWithHttpInfo(String visibility, String workspaceName, String groupName, String itemName, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = deleteItemValidateBeforeCall(visibility, workspaceName, groupName, itemName, null, opts);
        Type localVarReturnType = new TypeToken<DeletedEntityResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteItemAsync(String visibility, String workspaceName, String groupName, String itemName, final ApiCallback<DeletedEntityResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteItemValidateBeforeCall(visibility, workspaceName, groupName, itemName, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<DeletedEntityResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call deleteItemAsync(String visibility, String workspaceName, String groupName, String itemName, final ApiCallback<DeletedEntityResponse> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = deleteItemValidateBeforeCall(visibility, workspaceName, groupName, itemName, _callback, opts);
        Type localVarReturnType = new TypeToken<DeletedEntityResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIdeleteItemRequest {
        private final String visibility;
        private final String workspaceName;
        private final String groupName;
        private final String itemName;

        private APIdeleteItemRequest(String visibility, String workspaceName, String groupName, String itemName) {
            this.visibility = visibility;
            this.workspaceName = workspaceName;
            this.groupName = groupName;
            this.itemName = itemName;
        }

        /**
         * Build call for deleteItem
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The result of deleting a workspace item. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteItemCall(visibility, workspaceName, groupName, itemName, _callback);
        }

        /**
         * Execute deleteItem request
         * @return DeletedEntityResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The result of deleting a workspace item. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public DeletedEntityResponse execute() throws ApiException {
            ApiResponse<DeletedEntityResponse> localVarResp = deleteItemWithHttpInfo(visibility, workspaceName, groupName, itemName);
            return localVarResp.getData();
        }

        /**
         * Execute deleteItem request. Use any specified configuration options to override any other configuration for this request only.
         * @return DeletedEntityResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The result of deleting a workspace item. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public DeletedEntityResponse execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<DeletedEntityResponse> localVarResp = deleteItemWithHttpInfo(visibility, workspaceName, groupName, itemName, opts);
            return localVarResp.getData();
        }

        /**
         * Execute deleteItem request with HTTP info returned
         * @return ApiResponse&lt;DeletedEntityResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The result of deleting a workspace item. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DeletedEntityResponse> executeWithHttpInfo() throws ApiException {
            return deleteItemWithHttpInfo(visibility, workspaceName, groupName, itemName);
        }

        /**
         * Execute deleteItem request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;DeletedEntityResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The result of deleting a workspace item. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DeletedEntityResponse> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return deleteItemWithHttpInfo(visibility, workspaceName, groupName, itemName, opts);
        }

        /**
         * Execute deleteItem request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The result of deleting a workspace item. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DeletedEntityResponse> _callback) throws ApiException {
            return deleteItemAsync(visibility, workspaceName, groupName, itemName, _callback);
        }

        /**
         * Execute deleteItem request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The result of deleting a workspace item. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DeletedEntityResponse> _callback, ConfigurationOptions opts) throws ApiException {
            return deleteItemAsync(visibility, workspaceName, groupName, itemName, _callback, opts);
        }
    }

    /**
     * [EXPERIMENTAL] DeleteItem: Delete an item from a workspace.
     * Delete an item from a workspace.
     * @param visibility The visibility for the containing workspace. Must be &#x60;shared&#x60; or &#x60;personal&#x60;; case is important. (required)
     * @param workspaceName The name of the workspace. (required)
     * @param groupName The group containing the item. (required)
     * @param itemName The name of the item. (required)
     * @return APIdeleteItemRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The result of deleting a workspace item. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIdeleteItemRequest deleteItem(String visibility, String workspaceName, String groupName, String itemName) {
        return new APIdeleteItemRequest(visibility, workspaceName, groupName, itemName);
    }
    private okhttp3.Call deleteWorkspaceCall(String visibility, String workspaceName, final ApiCallback _callback) throws ApiException {
        return deleteWorkspaceCall(visibility, workspaceName,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call deleteWorkspaceCall(String visibility, String workspaceName, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/workspaces/{visibility}/{workspaceName}"
            .replace("{" + "visibility" + "}", localVarApiClient.escapeString(visibility.toString()))
            .replace("{" + "workspaceName" + "}", localVarApiClient.escapeString(workspaceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteWorkspaceValidateBeforeCall(String visibility, String workspaceName, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'visibility' is set
        if (visibility == null) {
            throw new ApiException("Missing the required parameter 'visibility' when calling deleteWorkspace(Async)");
        }

        // verify the required parameter 'workspaceName' is set
        if (workspaceName == null) {
            throw new ApiException("Missing the required parameter 'workspaceName' when calling deleteWorkspace(Async)");
        }

        return deleteWorkspaceCall(visibility, workspaceName, _callback, opts);

    }


    private ApiResponse<DeletedEntityResponse> deleteWorkspaceWithHttpInfo(String visibility, String workspaceName) throws ApiException {
        okhttp3.Call localVarCall = deleteWorkspaceValidateBeforeCall(visibility, workspaceName, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<DeletedEntityResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<DeletedEntityResponse> deleteWorkspaceWithHttpInfo(String visibility, String workspaceName, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = deleteWorkspaceValidateBeforeCall(visibility, workspaceName, null, opts);
        Type localVarReturnType = new TypeToken<DeletedEntityResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteWorkspaceAsync(String visibility, String workspaceName, final ApiCallback<DeletedEntityResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteWorkspaceValidateBeforeCall(visibility, workspaceName, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<DeletedEntityResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call deleteWorkspaceAsync(String visibility, String workspaceName, final ApiCallback<DeletedEntityResponse> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = deleteWorkspaceValidateBeforeCall(visibility, workspaceName, _callback, opts);
        Type localVarReturnType = new TypeToken<DeletedEntityResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIdeleteWorkspaceRequest {
        private final String visibility;
        private final String workspaceName;

        private APIdeleteWorkspaceRequest(String visibility, String workspaceName) {
            this.visibility = visibility;
            this.workspaceName = workspaceName;
        }

        /**
         * Build call for deleteWorkspace
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The result of deleting a workspace. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteWorkspaceCall(visibility, workspaceName, _callback);
        }

        /**
         * Execute deleteWorkspace request
         * @return DeletedEntityResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The result of deleting a workspace. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public DeletedEntityResponse execute() throws ApiException {
            ApiResponse<DeletedEntityResponse> localVarResp = deleteWorkspaceWithHttpInfo(visibility, workspaceName);
            return localVarResp.getData();
        }

        /**
         * Execute deleteWorkspace request. Use any specified configuration options to override any other configuration for this request only.
         * @return DeletedEntityResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The result of deleting a workspace. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public DeletedEntityResponse execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<DeletedEntityResponse> localVarResp = deleteWorkspaceWithHttpInfo(visibility, workspaceName, opts);
            return localVarResp.getData();
        }

        /**
         * Execute deleteWorkspace request with HTTP info returned
         * @return ApiResponse&lt;DeletedEntityResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The result of deleting a workspace. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DeletedEntityResponse> executeWithHttpInfo() throws ApiException {
            return deleteWorkspaceWithHttpInfo(visibility, workspaceName);
        }

        /**
         * Execute deleteWorkspace request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;DeletedEntityResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The result of deleting a workspace. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DeletedEntityResponse> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return deleteWorkspaceWithHttpInfo(visibility, workspaceName, opts);
        }

        /**
         * Execute deleteWorkspace request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The result of deleting a workspace. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DeletedEntityResponse> _callback) throws ApiException {
            return deleteWorkspaceAsync(visibility, workspaceName, _callback);
        }

        /**
         * Execute deleteWorkspace request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The result of deleting a workspace. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DeletedEntityResponse> _callback, ConfigurationOptions opts) throws ApiException {
            return deleteWorkspaceAsync(visibility, workspaceName, _callback, opts);
        }
    }

    /**
     * [EXPERIMENTAL] DeleteWorkspace: Delete a workspace.
     * Delete a workspace.
     * @param visibility The visibility for the workspace. Must be &#x60;shared&#x60; or &#x60;personal&#x60;; case is important. (required)
     * @param workspaceName The name of the workspace. (required)
     * @return APIdeleteWorkspaceRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The result of deleting a workspace. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIdeleteWorkspaceRequest deleteWorkspace(String visibility, String workspaceName) {
        return new APIdeleteWorkspaceRequest(visibility, workspaceName);
    }
    private okhttp3.Call getItemCall(String visibility, String workspaceName, String groupName, String itemName, OffsetDateTime asAt, final ApiCallback _callback) throws ApiException {
        return getItemCall(visibility, workspaceName, groupName, itemName, asAt,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call getItemCall(String visibility, String workspaceName, String groupName, String itemName, OffsetDateTime asAt, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/workspaces/{visibility}/{workspaceName}/items/{groupName}/{itemName}"
            .replace("{" + "visibility" + "}", localVarApiClient.escapeString(visibility.toString()))
            .replace("{" + "workspaceName" + "}", localVarApiClient.escapeString(workspaceName.toString()))
            .replace("{" + "groupName" + "}", localVarApiClient.escapeString(groupName.toString()))
            .replace("{" + "itemName" + "}", localVarApiClient.escapeString(itemName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (asAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asAt", asAt));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getItemValidateBeforeCall(String visibility, String workspaceName, String groupName, String itemName, OffsetDateTime asAt, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'visibility' is set
        if (visibility == null) {
            throw new ApiException("Missing the required parameter 'visibility' when calling getItem(Async)");
        }

        // verify the required parameter 'workspaceName' is set
        if (workspaceName == null) {
            throw new ApiException("Missing the required parameter 'workspaceName' when calling getItem(Async)");
        }

        // verify the required parameter 'groupName' is set
        if (groupName == null) {
            throw new ApiException("Missing the required parameter 'groupName' when calling getItem(Async)");
        }

        // verify the required parameter 'itemName' is set
        if (itemName == null) {
            throw new ApiException("Missing the required parameter 'itemName' when calling getItem(Async)");
        }

        return getItemCall(visibility, workspaceName, groupName, itemName, asAt, _callback, opts);

    }


    private ApiResponse<WorkspaceItem> getItemWithHttpInfo(String visibility, String workspaceName, String groupName, String itemName, OffsetDateTime asAt) throws ApiException {
        okhttp3.Call localVarCall = getItemValidateBeforeCall(visibility, workspaceName, groupName, itemName, asAt, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<WorkspaceItem>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<WorkspaceItem> getItemWithHttpInfo(String visibility, String workspaceName, String groupName, String itemName, OffsetDateTime asAt, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = getItemValidateBeforeCall(visibility, workspaceName, groupName, itemName, asAt, null, opts);
        Type localVarReturnType = new TypeToken<WorkspaceItem>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getItemAsync(String visibility, String workspaceName, String groupName, String itemName, OffsetDateTime asAt, final ApiCallback<WorkspaceItem> _callback) throws ApiException {

        okhttp3.Call localVarCall = getItemValidateBeforeCall(visibility, workspaceName, groupName, itemName, asAt, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<WorkspaceItem>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call getItemAsync(String visibility, String workspaceName, String groupName, String itemName, OffsetDateTime asAt, final ApiCallback<WorkspaceItem> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = getItemValidateBeforeCall(visibility, workspaceName, groupName, itemName, asAt, _callback, opts);
        Type localVarReturnType = new TypeToken<WorkspaceItem>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetItemRequest {
        private final String visibility;
        private final String workspaceName;
        private final String groupName;
        private final String itemName;
        private OffsetDateTime asAt;

        private APIgetItemRequest(String visibility, String workspaceName, String groupName, String itemName) {
            this.visibility = visibility;
            this.workspaceName = workspaceName;
            this.groupName = groupName;
            this.itemName = itemName;
        }

        /**
         * Set asAt
         * @param asAt The datetime at which to request the workspace item. If not provided, defaults to &#39;latest&#39;. (optional)
         * @return APIgetItemRequest
         */
        public APIgetItemRequest asAt(OffsetDateTime asAt) {
            this.asAt = asAt;
            return this;
        }

        /**
         * Build call for getItem
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The workspace item requested. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getItemCall(visibility, workspaceName, groupName, itemName, asAt, _callback);
        }

        /**
         * Execute getItem request
         * @return WorkspaceItem
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The workspace item requested. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public WorkspaceItem execute() throws ApiException {
            ApiResponse<WorkspaceItem> localVarResp = getItemWithHttpInfo(visibility, workspaceName, groupName, itemName, asAt);
            return localVarResp.getData();
        }

        /**
         * Execute getItem request. Use any specified configuration options to override any other configuration for this request only.
         * @return WorkspaceItem
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The workspace item requested. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public WorkspaceItem execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<WorkspaceItem> localVarResp = getItemWithHttpInfo(visibility, workspaceName, groupName, itemName, asAt, opts);
            return localVarResp.getData();
        }

        /**
         * Execute getItem request with HTTP info returned
         * @return ApiResponse&lt;WorkspaceItem&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The workspace item requested. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WorkspaceItem> executeWithHttpInfo() throws ApiException {
            return getItemWithHttpInfo(visibility, workspaceName, groupName, itemName, asAt);
        }

        /**
         * Execute getItem request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;WorkspaceItem&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The workspace item requested. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WorkspaceItem> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return getItemWithHttpInfo(visibility, workspaceName, groupName, itemName, asAt, opts);
        }

        /**
         * Execute getItem request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The workspace item requested. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WorkspaceItem> _callback) throws ApiException {
            return getItemAsync(visibility, workspaceName, groupName, itemName, asAt, _callback);
        }

        /**
         * Execute getItem request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The workspace item requested. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WorkspaceItem> _callback, ConfigurationOptions opts) throws ApiException {
            return getItemAsync(visibility, workspaceName, groupName, itemName, asAt, _callback, opts);
        }
    }

    /**
     * [EXPERIMENTAL] GetItem: Get a single workspace item.
     * Get a single workspace item.
     * @param visibility The visibility for the containing workspace. Must be &#x60;shared&#x60; or &#x60;personal&#x60;; case is important. (required)
     * @param workspaceName The name of the workspace. (required)
     * @param groupName The group containing the item. (required)
     * @param itemName The name of the item. (required)
     * @return APIgetItemRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The workspace item requested. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIgetItemRequest getItem(String visibility, String workspaceName, String groupName, String itemName) {
        return new APIgetItemRequest(visibility, workspaceName, groupName, itemName);
    }
    private okhttp3.Call getWorkspaceCall(String visibility, String workspaceName, OffsetDateTime asAt, final ApiCallback _callback) throws ApiException {
        return getWorkspaceCall(visibility, workspaceName, asAt,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call getWorkspaceCall(String visibility, String workspaceName, OffsetDateTime asAt, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/workspaces/{visibility}/{workspaceName}"
            .replace("{" + "visibility" + "}", localVarApiClient.escapeString(visibility.toString()))
            .replace("{" + "workspaceName" + "}", localVarApiClient.escapeString(workspaceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (asAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asAt", asAt));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getWorkspaceValidateBeforeCall(String visibility, String workspaceName, OffsetDateTime asAt, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'visibility' is set
        if (visibility == null) {
            throw new ApiException("Missing the required parameter 'visibility' when calling getWorkspace(Async)");
        }

        // verify the required parameter 'workspaceName' is set
        if (workspaceName == null) {
            throw new ApiException("Missing the required parameter 'workspaceName' when calling getWorkspace(Async)");
        }

        return getWorkspaceCall(visibility, workspaceName, asAt, _callback, opts);

    }


    private ApiResponse<Workspace> getWorkspaceWithHttpInfo(String visibility, String workspaceName, OffsetDateTime asAt) throws ApiException {
        okhttp3.Call localVarCall = getWorkspaceValidateBeforeCall(visibility, workspaceName, asAt, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<Workspace>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<Workspace> getWorkspaceWithHttpInfo(String visibility, String workspaceName, OffsetDateTime asAt, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = getWorkspaceValidateBeforeCall(visibility, workspaceName, asAt, null, opts);
        Type localVarReturnType = new TypeToken<Workspace>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getWorkspaceAsync(String visibility, String workspaceName, OffsetDateTime asAt, final ApiCallback<Workspace> _callback) throws ApiException {

        okhttp3.Call localVarCall = getWorkspaceValidateBeforeCall(visibility, workspaceName, asAt, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<Workspace>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call getWorkspaceAsync(String visibility, String workspaceName, OffsetDateTime asAt, final ApiCallback<Workspace> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = getWorkspaceValidateBeforeCall(visibility, workspaceName, asAt, _callback, opts);
        Type localVarReturnType = new TypeToken<Workspace>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetWorkspaceRequest {
        private final String visibility;
        private final String workspaceName;
        private OffsetDateTime asAt;

        private APIgetWorkspaceRequest(String visibility, String workspaceName) {
            this.visibility = visibility;
            this.workspaceName = workspaceName;
        }

        /**
         * Set asAt
         * @param asAt The asAt datetime at which to retrieve workspaces. Defaults to &#39;latest&#39; if not specified. (optional)
         * @return APIgetWorkspaceRequest
         */
        public APIgetWorkspaceRequest asAt(OffsetDateTime asAt) {
            this.asAt = asAt;
            return this;
        }

        /**
         * Build call for getWorkspace
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The workspace. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getWorkspaceCall(visibility, workspaceName, asAt, _callback);
        }

        /**
         * Execute getWorkspace request
         * @return Workspace
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The workspace. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public Workspace execute() throws ApiException {
            ApiResponse<Workspace> localVarResp = getWorkspaceWithHttpInfo(visibility, workspaceName, asAt);
            return localVarResp.getData();
        }

        /**
         * Execute getWorkspace request. Use any specified configuration options to override any other configuration for this request only.
         * @return Workspace
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The workspace. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public Workspace execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<Workspace> localVarResp = getWorkspaceWithHttpInfo(visibility, workspaceName, asAt, opts);
            return localVarResp.getData();
        }

        /**
         * Execute getWorkspace request with HTTP info returned
         * @return ApiResponse&lt;Workspace&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The workspace. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Workspace> executeWithHttpInfo() throws ApiException {
            return getWorkspaceWithHttpInfo(visibility, workspaceName, asAt);
        }

        /**
         * Execute getWorkspace request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;Workspace&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The workspace. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Workspace> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return getWorkspaceWithHttpInfo(visibility, workspaceName, asAt, opts);
        }

        /**
         * Execute getWorkspace request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The workspace. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Workspace> _callback) throws ApiException {
            return getWorkspaceAsync(visibility, workspaceName, asAt, _callback);
        }

        /**
         * Execute getWorkspace request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The workspace. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Workspace> _callback, ConfigurationOptions opts) throws ApiException {
            return getWorkspaceAsync(visibility, workspaceName, asAt, _callback, opts);
        }
    }

    /**
     * [EXPERIMENTAL] GetWorkspace: Get a workspace.
     * Get a workspace.
     * @param visibility The visibility for the workspace. Must be &#x60;shared&#x60; or &#x60;personal&#x60;; case is important. (required)
     * @param workspaceName The workspace name. (required)
     * @return APIgetWorkspaceRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The workspace. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIgetWorkspaceRequest getWorkspace(String visibility, String workspaceName) {
        return new APIgetWorkspaceRequest(visibility, workspaceName);
    }
    private okhttp3.Call listItemsCall(String visibility, String workspaceName, OffsetDateTime asAt, String page, List<String> sortBy, Integer limit, String filter, final ApiCallback _callback) throws ApiException {
        return listItemsCall(visibility, workspaceName, asAt, page, sortBy, limit, filter,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call listItemsCall(String visibility, String workspaceName, OffsetDateTime asAt, String page, List<String> sortBy, Integer limit, String filter, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/workspaces/{visibility}/{workspaceName}/items"
            .replace("{" + "visibility" + "}", localVarApiClient.escapeString(visibility.toString()))
            .replace("{" + "workspaceName" + "}", localVarApiClient.escapeString(workspaceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (asAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asAt", asAt));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (sortBy != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "sortBy", sortBy));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listItemsValidateBeforeCall(String visibility, String workspaceName, OffsetDateTime asAt, String page, List<String> sortBy, Integer limit, String filter, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'visibility' is set
        if (visibility == null) {
            throw new ApiException("Missing the required parameter 'visibility' when calling listItems(Async)");
        }

        // verify the required parameter 'workspaceName' is set
        if (workspaceName == null) {
            throw new ApiException("Missing the required parameter 'workspaceName' when calling listItems(Async)");
        }

        return listItemsCall(visibility, workspaceName, asAt, page, sortBy, limit, filter, _callback, opts);

    }


    private ApiResponse<PagedResourceListOfWorkspaceItem> listItemsWithHttpInfo(String visibility, String workspaceName, OffsetDateTime asAt, String page, List<String> sortBy, Integer limit, String filter) throws ApiException {
        okhttp3.Call localVarCall = listItemsValidateBeforeCall(visibility, workspaceName, asAt, page, sortBy, limit, filter, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<PagedResourceListOfWorkspaceItem>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<PagedResourceListOfWorkspaceItem> listItemsWithHttpInfo(String visibility, String workspaceName, OffsetDateTime asAt, String page, List<String> sortBy, Integer limit, String filter, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = listItemsValidateBeforeCall(visibility, workspaceName, asAt, page, sortBy, limit, filter, null, opts);
        Type localVarReturnType = new TypeToken<PagedResourceListOfWorkspaceItem>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listItemsAsync(String visibility, String workspaceName, OffsetDateTime asAt, String page, List<String> sortBy, Integer limit, String filter, final ApiCallback<PagedResourceListOfWorkspaceItem> _callback) throws ApiException {

        okhttp3.Call localVarCall = listItemsValidateBeforeCall(visibility, workspaceName, asAt, page, sortBy, limit, filter, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<PagedResourceListOfWorkspaceItem>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call listItemsAsync(String visibility, String workspaceName, OffsetDateTime asAt, String page, List<String> sortBy, Integer limit, String filter, final ApiCallback<PagedResourceListOfWorkspaceItem> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = listItemsValidateBeforeCall(visibility, workspaceName, asAt, page, sortBy, limit, filter, _callback, opts);
        Type localVarReturnType = new TypeToken<PagedResourceListOfWorkspaceItem>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIlistItemsRequest {
        private final String visibility;
        private final String workspaceName;
        private OffsetDateTime asAt;
        private String page;
        private List<String> sortBy;
        private Integer limit;
        private String filter;

        private APIlistItemsRequest(String visibility, String workspaceName) {
            this.visibility = visibility;
            this.workspaceName = workspaceName;
        }

        /**
         * Set asAt
         * @param asAt The asAt datetime at which to retrieve workspace items. Defaults to &#39;latest&#39; if not specified. (optional)
         * @return APIlistItemsRequest
         */
        public APIlistItemsRequest asAt(OffsetDateTime asAt) {
            this.asAt = asAt;
            return this;
        }

        /**
         * Set page
         * @param page The pagination token to use to continue listing workspaces items from a previous call to list workspaces items.   This value is returned from the previous call. If a pagination token is provided the sortBy, filter, effectiveAt, and asAt fields   must not have changed since the original request. (optional)
         * @return APIlistItemsRequest
         */
        public APIlistItemsRequest page(String page) {
            this.page = page;
            return this;
        }

        /**
         * Set sortBy
         * @param sortBy A list of field names to sort by, each suffixed by \&quot; ASC\&quot; or \&quot; DESC\&quot;. (optional)
         * @return APIlistItemsRequest
         */
        public APIlistItemsRequest sortBy(List<String> sortBy) {
            this.sortBy = sortBy;
            return this;
        }

        /**
         * Set limit
         * @param limit When paginating, limit the number of returned results to this many. (optional)
         * @return APIlistItemsRequest
         */
        public APIlistItemsRequest limit(Integer limit) {
            this.limit = limit;
            return this;
        }

        /**
         * Set filter
         * @param filter Expression to filter the result set. Read more about filtering results from LUSID here:   https://support.lusid.com/filtering-results-from-lusid. (optional)
         * @return APIlistItemsRequest
         */
        public APIlistItemsRequest filter(String filter) {
            this.filter = filter;
            return this;
        }

        /**
         * Build call for listItems
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The items in a workspace. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listItemsCall(visibility, workspaceName, asAt, page, sortBy, limit, filter, _callback);
        }

        /**
         * Execute listItems request
         * @return PagedResourceListOfWorkspaceItem
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The items in a workspace. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public PagedResourceListOfWorkspaceItem execute() throws ApiException {
            ApiResponse<PagedResourceListOfWorkspaceItem> localVarResp = listItemsWithHttpInfo(visibility, workspaceName, asAt, page, sortBy, limit, filter);
            return localVarResp.getData();
        }

        /**
         * Execute listItems request. Use any specified configuration options to override any other configuration for this request only.
         * @return PagedResourceListOfWorkspaceItem
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The items in a workspace. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public PagedResourceListOfWorkspaceItem execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<PagedResourceListOfWorkspaceItem> localVarResp = listItemsWithHttpInfo(visibility, workspaceName, asAt, page, sortBy, limit, filter, opts);
            return localVarResp.getData();
        }

        /**
         * Execute listItems request with HTTP info returned
         * @return ApiResponse&lt;PagedResourceListOfWorkspaceItem&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The items in a workspace. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PagedResourceListOfWorkspaceItem> executeWithHttpInfo() throws ApiException {
            return listItemsWithHttpInfo(visibility, workspaceName, asAt, page, sortBy, limit, filter);
        }

        /**
         * Execute listItems request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;PagedResourceListOfWorkspaceItem&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The items in a workspace. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PagedResourceListOfWorkspaceItem> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return listItemsWithHttpInfo(visibility, workspaceName, asAt, page, sortBy, limit, filter, opts);
        }

        /**
         * Execute listItems request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The items in a workspace. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PagedResourceListOfWorkspaceItem> _callback) throws ApiException {
            return listItemsAsync(visibility, workspaceName, asAt, page, sortBy, limit, filter, _callback);
        }

        /**
         * Execute listItems request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The items in a workspace. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PagedResourceListOfWorkspaceItem> _callback, ConfigurationOptions opts) throws ApiException {
            return listItemsAsync(visibility, workspaceName, asAt, page, sortBy, limit, filter, _callback, opts);
        }
    }

    /**
     * [EXPERIMENTAL] ListItems: List the items in a workspace.
     * List the items in a workspace.
     * @param visibility The visibility for the containing workspace. Must be &#x60;shared&#x60; or &#x60;personal&#x60;; case is important. (required)
     * @param workspaceName The item&#39;s workspace name. (required)
     * @return APIlistItemsRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The items in a workspace. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIlistItemsRequest listItems(String visibility, String workspaceName) {
        return new APIlistItemsRequest(visibility, workspaceName);
    }
    private okhttp3.Call listWorkspacesCall(String visibility, OffsetDateTime asAt, String page, List<String> sortBy, Integer limit, String filter, final ApiCallback _callback) throws ApiException {
        return listWorkspacesCall(visibility, asAt, page, sortBy, limit, filter,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call listWorkspacesCall(String visibility, OffsetDateTime asAt, String page, List<String> sortBy, Integer limit, String filter, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/workspaces/{visibility}"
            .replace("{" + "visibility" + "}", localVarApiClient.escapeString(visibility.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (asAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asAt", asAt));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (sortBy != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "sortBy", sortBy));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listWorkspacesValidateBeforeCall(String visibility, OffsetDateTime asAt, String page, List<String> sortBy, Integer limit, String filter, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'visibility' is set
        if (visibility == null) {
            throw new ApiException("Missing the required parameter 'visibility' when calling listWorkspaces(Async)");
        }

        return listWorkspacesCall(visibility, asAt, page, sortBy, limit, filter, _callback, opts);

    }


    private ApiResponse<PagedResourceListOfWorkspace> listWorkspacesWithHttpInfo(String visibility, OffsetDateTime asAt, String page, List<String> sortBy, Integer limit, String filter) throws ApiException {
        okhttp3.Call localVarCall = listWorkspacesValidateBeforeCall(visibility, asAt, page, sortBy, limit, filter, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<PagedResourceListOfWorkspace>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<PagedResourceListOfWorkspace> listWorkspacesWithHttpInfo(String visibility, OffsetDateTime asAt, String page, List<String> sortBy, Integer limit, String filter, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = listWorkspacesValidateBeforeCall(visibility, asAt, page, sortBy, limit, filter, null, opts);
        Type localVarReturnType = new TypeToken<PagedResourceListOfWorkspace>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listWorkspacesAsync(String visibility, OffsetDateTime asAt, String page, List<String> sortBy, Integer limit, String filter, final ApiCallback<PagedResourceListOfWorkspace> _callback) throws ApiException {

        okhttp3.Call localVarCall = listWorkspacesValidateBeforeCall(visibility, asAt, page, sortBy, limit, filter, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<PagedResourceListOfWorkspace>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call listWorkspacesAsync(String visibility, OffsetDateTime asAt, String page, List<String> sortBy, Integer limit, String filter, final ApiCallback<PagedResourceListOfWorkspace> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = listWorkspacesValidateBeforeCall(visibility, asAt, page, sortBy, limit, filter, _callback, opts);
        Type localVarReturnType = new TypeToken<PagedResourceListOfWorkspace>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIlistWorkspacesRequest {
        private final String visibility;
        private OffsetDateTime asAt;
        private String page;
        private List<String> sortBy;
        private Integer limit;
        private String filter;

        private APIlistWorkspacesRequest(String visibility) {
            this.visibility = visibility;
        }

        /**
         * Set asAt
         * @param asAt The asAt datetime at which to retrieve workspaces. Defaults to &#39;latest&#39; if not specified. (optional)
         * @return APIlistWorkspacesRequest
         */
        public APIlistWorkspacesRequest asAt(OffsetDateTime asAt) {
            this.asAt = asAt;
            return this;
        }

        /**
         * Set page
         * @param page The pagination token to use to continue listing workspaces from a previous call to list workspaces.   This value is returned from the previous call. If a pagination token is provided the sortBy, filter, effectiveAt, and asAt fields   must not have changed since the original request. (optional)
         * @return APIlistWorkspacesRequest
         */
        public APIlistWorkspacesRequest page(String page) {
            this.page = page;
            return this;
        }

        /**
         * Set sortBy
         * @param sortBy A list of field names to sort by, each suffixed by \&quot; ASC\&quot; or \&quot; DESC\&quot;. (optional)
         * @return APIlistWorkspacesRequest
         */
        public APIlistWorkspacesRequest sortBy(List<String> sortBy) {
            this.sortBy = sortBy;
            return this;
        }

        /**
         * Set limit
         * @param limit When paginating, limit the number of returned results to this many. (optional)
         * @return APIlistWorkspacesRequest
         */
        public APIlistWorkspacesRequest limit(Integer limit) {
            this.limit = limit;
            return this;
        }

        /**
         * Set filter
         * @param filter Expression to filter the result set. Read more about filtering results from LUSID here:   https://support.lusid.com/filtering-results-from-lusid. (optional)
         * @return APIlistWorkspacesRequest
         */
        public APIlistWorkspacesRequest filter(String filter) {
            this.filter = filter;
            return this;
        }

        /**
         * Build call for listWorkspaces
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The workspaces. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listWorkspacesCall(visibility, asAt, page, sortBy, limit, filter, _callback);
        }

        /**
         * Execute listWorkspaces request
         * @return PagedResourceListOfWorkspace
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The workspaces. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public PagedResourceListOfWorkspace execute() throws ApiException {
            ApiResponse<PagedResourceListOfWorkspace> localVarResp = listWorkspacesWithHttpInfo(visibility, asAt, page, sortBy, limit, filter);
            return localVarResp.getData();
        }

        /**
         * Execute listWorkspaces request. Use any specified configuration options to override any other configuration for this request only.
         * @return PagedResourceListOfWorkspace
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The workspaces. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public PagedResourceListOfWorkspace execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<PagedResourceListOfWorkspace> localVarResp = listWorkspacesWithHttpInfo(visibility, asAt, page, sortBy, limit, filter, opts);
            return localVarResp.getData();
        }

        /**
         * Execute listWorkspaces request with HTTP info returned
         * @return ApiResponse&lt;PagedResourceListOfWorkspace&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The workspaces. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PagedResourceListOfWorkspace> executeWithHttpInfo() throws ApiException {
            return listWorkspacesWithHttpInfo(visibility, asAt, page, sortBy, limit, filter);
        }

        /**
         * Execute listWorkspaces request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;PagedResourceListOfWorkspace&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The workspaces. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PagedResourceListOfWorkspace> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return listWorkspacesWithHttpInfo(visibility, asAt, page, sortBy, limit, filter, opts);
        }

        /**
         * Execute listWorkspaces request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The workspaces. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PagedResourceListOfWorkspace> _callback) throws ApiException {
            return listWorkspacesAsync(visibility, asAt, page, sortBy, limit, filter, _callback);
        }

        /**
         * Execute listWorkspaces request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The workspaces. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PagedResourceListOfWorkspace> _callback, ConfigurationOptions opts) throws ApiException {
            return listWorkspacesAsync(visibility, asAt, page, sortBy, limit, filter, _callback, opts);
        }
    }

    /**
     * [EXPERIMENTAL] ListWorkspaces: List workspaces.
     * List workspaces.
     * @param visibility The visibility for the workspaces. Must be &#x60;shared&#x60; or &#x60;personal&#x60;; case is important. (required)
     * @return APIlistWorkspacesRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The workspaces. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIlistWorkspacesRequest listWorkspaces(String visibility) {
        return new APIlistWorkspacesRequest(visibility);
    }
    private okhttp3.Call updateItemCall(String visibility, String workspaceName, String groupName, String itemName, WorkspaceItemUpdateRequest workspaceItemUpdateRequest, final ApiCallback _callback) throws ApiException {
        return updateItemCall(visibility, workspaceName, groupName, itemName, workspaceItemUpdateRequest,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call updateItemCall(String visibility, String workspaceName, String groupName, String itemName, WorkspaceItemUpdateRequest workspaceItemUpdateRequest, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = workspaceItemUpdateRequest;

        // create path and map variables
        String localVarPath = "/api/workspaces/{visibility}/{workspaceName}/items/{groupName}/{itemName}"
            .replace("{" + "visibility" + "}", localVarApiClient.escapeString(visibility.toString()))
            .replace("{" + "workspaceName" + "}", localVarApiClient.escapeString(workspaceName.toString()))
            .replace("{" + "groupName" + "}", localVarApiClient.escapeString(groupName.toString()))
            .replace("{" + "itemName" + "}", localVarApiClient.escapeString(itemName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateItemValidateBeforeCall(String visibility, String workspaceName, String groupName, String itemName, WorkspaceItemUpdateRequest workspaceItemUpdateRequest, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'visibility' is set
        if (visibility == null) {
            throw new ApiException("Missing the required parameter 'visibility' when calling updateItem(Async)");
        }

        // verify the required parameter 'workspaceName' is set
        if (workspaceName == null) {
            throw new ApiException("Missing the required parameter 'workspaceName' when calling updateItem(Async)");
        }

        // verify the required parameter 'groupName' is set
        if (groupName == null) {
            throw new ApiException("Missing the required parameter 'groupName' when calling updateItem(Async)");
        }

        // verify the required parameter 'itemName' is set
        if (itemName == null) {
            throw new ApiException("Missing the required parameter 'itemName' when calling updateItem(Async)");
        }

        return updateItemCall(visibility, workspaceName, groupName, itemName, workspaceItemUpdateRequest, _callback, opts);

    }


    private ApiResponse<WorkspaceItem> updateItemWithHttpInfo(String visibility, String workspaceName, String groupName, String itemName, WorkspaceItemUpdateRequest workspaceItemUpdateRequest) throws ApiException {
        okhttp3.Call localVarCall = updateItemValidateBeforeCall(visibility, workspaceName, groupName, itemName, workspaceItemUpdateRequest, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<WorkspaceItem>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<WorkspaceItem> updateItemWithHttpInfo(String visibility, String workspaceName, String groupName, String itemName, WorkspaceItemUpdateRequest workspaceItemUpdateRequest, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = updateItemValidateBeforeCall(visibility, workspaceName, groupName, itemName, workspaceItemUpdateRequest, null, opts);
        Type localVarReturnType = new TypeToken<WorkspaceItem>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateItemAsync(String visibility, String workspaceName, String groupName, String itemName, WorkspaceItemUpdateRequest workspaceItemUpdateRequest, final ApiCallback<WorkspaceItem> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateItemValidateBeforeCall(visibility, workspaceName, groupName, itemName, workspaceItemUpdateRequest, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<WorkspaceItem>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call updateItemAsync(String visibility, String workspaceName, String groupName, String itemName, WorkspaceItemUpdateRequest workspaceItemUpdateRequest, final ApiCallback<WorkspaceItem> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = updateItemValidateBeforeCall(visibility, workspaceName, groupName, itemName, workspaceItemUpdateRequest, _callback, opts);
        Type localVarReturnType = new TypeToken<WorkspaceItem>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIupdateItemRequest {
        private final String visibility;
        private final String workspaceName;
        private final String groupName;
        private final String itemName;
        private WorkspaceItemUpdateRequest workspaceItemUpdateRequest;

        private APIupdateItemRequest(String visibility, String workspaceName, String groupName, String itemName) {
            this.visibility = visibility;
            this.workspaceName = workspaceName;
            this.groupName = groupName;
            this.itemName = itemName;
        }

        /**
         * Set workspaceItemUpdateRequest
         * @param workspaceItemUpdateRequest The new item details. (optional)
         * @return APIupdateItemRequest
         */
        public APIupdateItemRequest workspaceItemUpdateRequest(WorkspaceItemUpdateRequest workspaceItemUpdateRequest) {
            this.workspaceItemUpdateRequest = workspaceItemUpdateRequest;
            return this;
        }

        /**
         * Build call for updateItem
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The workspace item updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return updateItemCall(visibility, workspaceName, groupName, itemName, workspaceItemUpdateRequest, _callback);
        }

        /**
         * Execute updateItem request
         * @return WorkspaceItem
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The workspace item updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public WorkspaceItem execute() throws ApiException {
            ApiResponse<WorkspaceItem> localVarResp = updateItemWithHttpInfo(visibility, workspaceName, groupName, itemName, workspaceItemUpdateRequest);
            return localVarResp.getData();
        }

        /**
         * Execute updateItem request. Use any specified configuration options to override any other configuration for this request only.
         * @return WorkspaceItem
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The workspace item updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public WorkspaceItem execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<WorkspaceItem> localVarResp = updateItemWithHttpInfo(visibility, workspaceName, groupName, itemName, workspaceItemUpdateRequest, opts);
            return localVarResp.getData();
        }

        /**
         * Execute updateItem request with HTTP info returned
         * @return ApiResponse&lt;WorkspaceItem&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The workspace item updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WorkspaceItem> executeWithHttpInfo() throws ApiException {
            return updateItemWithHttpInfo(visibility, workspaceName, groupName, itemName, workspaceItemUpdateRequest);
        }

        /**
         * Execute updateItem request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;WorkspaceItem&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The workspace item updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WorkspaceItem> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return updateItemWithHttpInfo(visibility, workspaceName, groupName, itemName, workspaceItemUpdateRequest, opts);
        }

        /**
         * Execute updateItem request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The workspace item updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WorkspaceItem> _callback) throws ApiException {
            return updateItemAsync(visibility, workspaceName, groupName, itemName, workspaceItemUpdateRequest, _callback);
        }

        /**
         * Execute updateItem request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The workspace item updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WorkspaceItem> _callback, ConfigurationOptions opts) throws ApiException {
            return updateItemAsync(visibility, workspaceName, groupName, itemName, workspaceItemUpdateRequest, _callback, opts);
        }
    }

    /**
     * [EXPERIMENTAL] UpdateItem: Update an item in a workspace.
     * Update an item in a workspace.
     * @param visibility The visibility for the containing workspace. Must be &#x60;shared&#x60; or &#x60;personal&#x60;; case is important. (required)
     * @param workspaceName The workspace name. (required)
     * @param groupName The group containing the item. (required)
     * @param itemName The item name. (required)
     * @return APIupdateItemRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The workspace item updated. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIupdateItemRequest updateItem(String visibility, String workspaceName, String groupName, String itemName) {
        return new APIupdateItemRequest(visibility, workspaceName, groupName, itemName);
    }
    private okhttp3.Call updateWorkspaceCall(String visibility, String workspaceName, WorkspaceUpdateRequest workspaceUpdateRequest, final ApiCallback _callback) throws ApiException {
        return updateWorkspaceCall(visibility, workspaceName, workspaceUpdateRequest,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call updateWorkspaceCall(String visibility, String workspaceName, WorkspaceUpdateRequest workspaceUpdateRequest, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = workspaceUpdateRequest;

        // create path and map variables
        String localVarPath = "/api/workspaces/{visibility}/{workspaceName}"
            .replace("{" + "visibility" + "}", localVarApiClient.escapeString(visibility.toString()))
            .replace("{" + "workspaceName" + "}", localVarApiClient.escapeString(workspaceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateWorkspaceValidateBeforeCall(String visibility, String workspaceName, WorkspaceUpdateRequest workspaceUpdateRequest, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'visibility' is set
        if (visibility == null) {
            throw new ApiException("Missing the required parameter 'visibility' when calling updateWorkspace(Async)");
        }

        // verify the required parameter 'workspaceName' is set
        if (workspaceName == null) {
            throw new ApiException("Missing the required parameter 'workspaceName' when calling updateWorkspace(Async)");
        }

        return updateWorkspaceCall(visibility, workspaceName, workspaceUpdateRequest, _callback, opts);

    }


    private ApiResponse<Workspace> updateWorkspaceWithHttpInfo(String visibility, String workspaceName, WorkspaceUpdateRequest workspaceUpdateRequest) throws ApiException {
        okhttp3.Call localVarCall = updateWorkspaceValidateBeforeCall(visibility, workspaceName, workspaceUpdateRequest, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<Workspace>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<Workspace> updateWorkspaceWithHttpInfo(String visibility, String workspaceName, WorkspaceUpdateRequest workspaceUpdateRequest, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = updateWorkspaceValidateBeforeCall(visibility, workspaceName, workspaceUpdateRequest, null, opts);
        Type localVarReturnType = new TypeToken<Workspace>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateWorkspaceAsync(String visibility, String workspaceName, WorkspaceUpdateRequest workspaceUpdateRequest, final ApiCallback<Workspace> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateWorkspaceValidateBeforeCall(visibility, workspaceName, workspaceUpdateRequest, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<Workspace>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call updateWorkspaceAsync(String visibility, String workspaceName, WorkspaceUpdateRequest workspaceUpdateRequest, final ApiCallback<Workspace> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = updateWorkspaceValidateBeforeCall(visibility, workspaceName, workspaceUpdateRequest, _callback, opts);
        Type localVarReturnType = new TypeToken<Workspace>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIupdateWorkspaceRequest {
        private final String visibility;
        private final String workspaceName;
        private WorkspaceUpdateRequest workspaceUpdateRequest;

        private APIupdateWorkspaceRequest(String visibility, String workspaceName) {
            this.visibility = visibility;
            this.workspaceName = workspaceName;
        }

        /**
         * Set workspaceUpdateRequest
         * @param workspaceUpdateRequest The new workspace details. (optional)
         * @return APIupdateWorkspaceRequest
         */
        public APIupdateWorkspaceRequest workspaceUpdateRequest(WorkspaceUpdateRequest workspaceUpdateRequest) {
            this.workspaceUpdateRequest = workspaceUpdateRequest;
            return this;
        }

        /**
         * Build call for updateWorkspace
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The workspace updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return updateWorkspaceCall(visibility, workspaceName, workspaceUpdateRequest, _callback);
        }

        /**
         * Execute updateWorkspace request
         * @return Workspace
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The workspace updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public Workspace execute() throws ApiException {
            ApiResponse<Workspace> localVarResp = updateWorkspaceWithHttpInfo(visibility, workspaceName, workspaceUpdateRequest);
            return localVarResp.getData();
        }

        /**
         * Execute updateWorkspace request. Use any specified configuration options to override any other configuration for this request only.
         * @return Workspace
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The workspace updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public Workspace execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<Workspace> localVarResp = updateWorkspaceWithHttpInfo(visibility, workspaceName, workspaceUpdateRequest, opts);
            return localVarResp.getData();
        }

        /**
         * Execute updateWorkspace request with HTTP info returned
         * @return ApiResponse&lt;Workspace&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The workspace updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Workspace> executeWithHttpInfo() throws ApiException {
            return updateWorkspaceWithHttpInfo(visibility, workspaceName, workspaceUpdateRequest);
        }

        /**
         * Execute updateWorkspace request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;Workspace&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The workspace updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Workspace> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return updateWorkspaceWithHttpInfo(visibility, workspaceName, workspaceUpdateRequest, opts);
        }

        /**
         * Execute updateWorkspace request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The workspace updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Workspace> _callback) throws ApiException {
            return updateWorkspaceAsync(visibility, workspaceName, workspaceUpdateRequest, _callback);
        }

        /**
         * Execute updateWorkspace request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The workspace updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Workspace> _callback, ConfigurationOptions opts) throws ApiException {
            return updateWorkspaceAsync(visibility, workspaceName, workspaceUpdateRequest, _callback, opts);
        }
    }

    /**
     * [EXPERIMENTAL] UpdateWorkspace: Update a workspace.
     * Update a workspace.
     * @param visibility The visibility for the workspace. Must be &#x60;shared&#x60; or &#x60;personal&#x60;; case is important. (required)
     * @param workspaceName The workspace name. (required)
     * @return APIupdateWorkspaceRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The workspace updated. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIupdateWorkspaceRequest updateWorkspace(String visibility, String workspaceName) {
        return new APIupdateWorkspaceRequest(visibility, workspaceName);
    }
}
