/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.api;

import com.finbourne.lusid.ApiCallback;
import com.finbourne.lusid.ApiClient;
import com.finbourne.lusid.ApiException;
import com.finbourne.lusid.ApiResponse;
import com.finbourne.lusid.Configuration;
import com.finbourne.lusid.Pair;
import com.finbourne.lusid.ProgressRequestBody;
import com.finbourne.lusid.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.finbourne.lusid.model.DeletedEntityResponse;
import com.finbourne.lusid.model.LusidProblemDetails;
import com.finbourne.lusid.model.LusidValidationProblemDetails;
import java.time.OffsetDateTime;
import com.finbourne.lusid.model.PagedResourceListOfWorkspace;
import com.finbourne.lusid.model.PagedResourceListOfWorkspaceItem;
import com.finbourne.lusid.model.Workspace;
import com.finbourne.lusid.model.WorkspaceCreationRequest;
import com.finbourne.lusid.model.WorkspaceItem;
import com.finbourne.lusid.model.WorkspaceItemCreationRequest;
import com.finbourne.lusid.model.WorkspaceItemUpdateRequest;
import com.finbourne.lusid.model.WorkspaceUpdateRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class WorkspaceApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public WorkspaceApi() {
        this(Configuration.getDefaultApiClient());
    }

    public WorkspaceApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createPersonalItemCall(String workspaceName, WorkspaceItemCreationRequest workspaceItemCreationRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = workspaceItemCreationRequest;

        // create path and map variables
        String localVarPath = "/api/workspaces/personal/{workspaceName}/items"
            .replace("{" + "workspaceName" + "}", localVarApiClient.escapeString(workspaceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createPersonalItemValidateBeforeCall(String workspaceName, WorkspaceItemCreationRequest workspaceItemCreationRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspaceName' is set
        if (workspaceName == null) {
            throw new ApiException("Missing the required parameter 'workspaceName' when calling createPersonalItem(Async)");
        }

        return createPersonalItemCall(workspaceName, workspaceItemCreationRequest, _callback);

    }


    private ApiResponse<WorkspaceItem> createPersonalItemWithHttpInfo(String workspaceName, WorkspaceItemCreationRequest workspaceItemCreationRequest) throws ApiException {
        okhttp3.Call localVarCall = createPersonalItemValidateBeforeCall(workspaceName, workspaceItemCreationRequest, null);
        Type localVarReturnType = new TypeToken<WorkspaceItem>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createPersonalItemAsync(String workspaceName, WorkspaceItemCreationRequest workspaceItemCreationRequest, final ApiCallback<WorkspaceItem> _callback) throws ApiException {

        okhttp3.Call localVarCall = createPersonalItemValidateBeforeCall(workspaceName, workspaceItemCreationRequest, _callback);
        Type localVarReturnType = new TypeToken<WorkspaceItem>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIcreatePersonalItemRequest {
        private final String workspaceName;
        private WorkspaceItemCreationRequest workspaceItemCreationRequest;

        private APIcreatePersonalItemRequest(String workspaceName) {
            this.workspaceName = workspaceName;
        }

        /**
         * Set workspaceItemCreationRequest
         * @param workspaceItemCreationRequest The item to be created. (optional)
         * @return APIcreatePersonalItemRequest
         */
        public APIcreatePersonalItemRequest workspaceItemCreationRequest(WorkspaceItemCreationRequest workspaceItemCreationRequest) {
            this.workspaceItemCreationRequest = workspaceItemCreationRequest;
            return this;
        }

        /**
         * Build call for createPersonalItem
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The workspace item created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return createPersonalItemCall(workspaceName, workspaceItemCreationRequest, _callback);
        }

        /**
         * Execute createPersonalItem request
         * @return WorkspaceItem
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The workspace item created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public WorkspaceItem execute() throws ApiException {
            ApiResponse<WorkspaceItem> localVarResp = createPersonalItemWithHttpInfo(workspaceName, workspaceItemCreationRequest);
            return localVarResp.getData();
        }

        /**
         * Execute createPersonalItem request with HTTP info returned
         * @return ApiResponse&lt;WorkspaceItem&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The workspace item created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WorkspaceItem> executeWithHttpInfo() throws ApiException {
            return createPersonalItemWithHttpInfo(workspaceName, workspaceItemCreationRequest);
        }

        /**
         * Execute createPersonalItem request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The workspace item created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WorkspaceItem> _callback) throws ApiException {
            return createPersonalItemAsync(workspaceName, workspaceItemCreationRequest, _callback);
        }
    }

    /**
     * [EARLY ACCESS] CreatePersonalItem: Create a new item in a personal workspace.
     * Create a new item in a personal workspace.
     * @param workspaceName The item&#39;s workspace name. (required)
     * @return APIcreatePersonalItemRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The workspace item created. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIcreatePersonalItemRequest createPersonalItem(String workspaceName) {
        return new APIcreatePersonalItemRequest(workspaceName);
    }
    private okhttp3.Call createPersonalWorkspaceCall(WorkspaceCreationRequest workspaceCreationRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = workspaceCreationRequest;

        // create path and map variables
        String localVarPath = "/api/workspaces/personal";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createPersonalWorkspaceValidateBeforeCall(WorkspaceCreationRequest workspaceCreationRequest, final ApiCallback _callback) throws ApiException {
        return createPersonalWorkspaceCall(workspaceCreationRequest, _callback);

    }


    private ApiResponse<Workspace> createPersonalWorkspaceWithHttpInfo(WorkspaceCreationRequest workspaceCreationRequest) throws ApiException {
        okhttp3.Call localVarCall = createPersonalWorkspaceValidateBeforeCall(workspaceCreationRequest, null);
        Type localVarReturnType = new TypeToken<Workspace>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createPersonalWorkspaceAsync(WorkspaceCreationRequest workspaceCreationRequest, final ApiCallback<Workspace> _callback) throws ApiException {

        okhttp3.Call localVarCall = createPersonalWorkspaceValidateBeforeCall(workspaceCreationRequest, _callback);
        Type localVarReturnType = new TypeToken<Workspace>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIcreatePersonalWorkspaceRequest {
        private WorkspaceCreationRequest workspaceCreationRequest;

        private APIcreatePersonalWorkspaceRequest() {
        }

        /**
         * Set workspaceCreationRequest
         * @param workspaceCreationRequest The workspace to be created. (optional)
         * @return APIcreatePersonalWorkspaceRequest
         */
        public APIcreatePersonalWorkspaceRequest workspaceCreationRequest(WorkspaceCreationRequest workspaceCreationRequest) {
            this.workspaceCreationRequest = workspaceCreationRequest;
            return this;
        }

        /**
         * Build call for createPersonalWorkspace
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The workspace created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return createPersonalWorkspaceCall(workspaceCreationRequest, _callback);
        }

        /**
         * Execute createPersonalWorkspace request
         * @return Workspace
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The workspace created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public Workspace execute() throws ApiException {
            ApiResponse<Workspace> localVarResp = createPersonalWorkspaceWithHttpInfo(workspaceCreationRequest);
            return localVarResp.getData();
        }

        /**
         * Execute createPersonalWorkspace request with HTTP info returned
         * @return ApiResponse&lt;Workspace&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The workspace created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Workspace> executeWithHttpInfo() throws ApiException {
            return createPersonalWorkspaceWithHttpInfo(workspaceCreationRequest);
        }

        /**
         * Execute createPersonalWorkspace request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The workspace created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Workspace> _callback) throws ApiException {
            return createPersonalWorkspaceAsync(workspaceCreationRequest, _callback);
        }
    }

    /**
     * [EARLY ACCESS] CreatePersonalWorkspace: Create a new personal workspace.
     * Create a new personal workspace.
     * @return APIcreatePersonalWorkspaceRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The workspace created. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIcreatePersonalWorkspaceRequest createPersonalWorkspace() {
        return new APIcreatePersonalWorkspaceRequest();
    }
    private okhttp3.Call createSharedItemCall(String workspaceName, WorkspaceItemCreationRequest workspaceItemCreationRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = workspaceItemCreationRequest;

        // create path and map variables
        String localVarPath = "/api/workspaces/shared/{workspaceName}/items"
            .replace("{" + "workspaceName" + "}", localVarApiClient.escapeString(workspaceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createSharedItemValidateBeforeCall(String workspaceName, WorkspaceItemCreationRequest workspaceItemCreationRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspaceName' is set
        if (workspaceName == null) {
            throw new ApiException("Missing the required parameter 'workspaceName' when calling createSharedItem(Async)");
        }

        return createSharedItemCall(workspaceName, workspaceItemCreationRequest, _callback);

    }


    private ApiResponse<WorkspaceItem> createSharedItemWithHttpInfo(String workspaceName, WorkspaceItemCreationRequest workspaceItemCreationRequest) throws ApiException {
        okhttp3.Call localVarCall = createSharedItemValidateBeforeCall(workspaceName, workspaceItemCreationRequest, null);
        Type localVarReturnType = new TypeToken<WorkspaceItem>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createSharedItemAsync(String workspaceName, WorkspaceItemCreationRequest workspaceItemCreationRequest, final ApiCallback<WorkspaceItem> _callback) throws ApiException {

        okhttp3.Call localVarCall = createSharedItemValidateBeforeCall(workspaceName, workspaceItemCreationRequest, _callback);
        Type localVarReturnType = new TypeToken<WorkspaceItem>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIcreateSharedItemRequest {
        private final String workspaceName;
        private WorkspaceItemCreationRequest workspaceItemCreationRequest;

        private APIcreateSharedItemRequest(String workspaceName) {
            this.workspaceName = workspaceName;
        }

        /**
         * Set workspaceItemCreationRequest
         * @param workspaceItemCreationRequest The item to be created. (optional)
         * @return APIcreateSharedItemRequest
         */
        public APIcreateSharedItemRequest workspaceItemCreationRequest(WorkspaceItemCreationRequest workspaceItemCreationRequest) {
            this.workspaceItemCreationRequest = workspaceItemCreationRequest;
            return this;
        }

        /**
         * Build call for createSharedItem
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The workspace item created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return createSharedItemCall(workspaceName, workspaceItemCreationRequest, _callback);
        }

        /**
         * Execute createSharedItem request
         * @return WorkspaceItem
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The workspace item created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public WorkspaceItem execute() throws ApiException {
            ApiResponse<WorkspaceItem> localVarResp = createSharedItemWithHttpInfo(workspaceName, workspaceItemCreationRequest);
            return localVarResp.getData();
        }

        /**
         * Execute createSharedItem request with HTTP info returned
         * @return ApiResponse&lt;WorkspaceItem&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The workspace item created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WorkspaceItem> executeWithHttpInfo() throws ApiException {
            return createSharedItemWithHttpInfo(workspaceName, workspaceItemCreationRequest);
        }

        /**
         * Execute createSharedItem request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The workspace item created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WorkspaceItem> _callback) throws ApiException {
            return createSharedItemAsync(workspaceName, workspaceItemCreationRequest, _callback);
        }
    }

    /**
     * [EARLY ACCESS] CreateSharedItem: Create a new item in a shared workspace.
     * Create a new item in a shared workspace.
     * @param workspaceName The item&#39;s workspace name. (required)
     * @return APIcreateSharedItemRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The workspace item created. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIcreateSharedItemRequest createSharedItem(String workspaceName) {
        return new APIcreateSharedItemRequest(workspaceName);
    }
    private okhttp3.Call createSharedWorkspaceCall(WorkspaceCreationRequest workspaceCreationRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = workspaceCreationRequest;

        // create path and map variables
        String localVarPath = "/api/workspaces/shared";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createSharedWorkspaceValidateBeforeCall(WorkspaceCreationRequest workspaceCreationRequest, final ApiCallback _callback) throws ApiException {
        return createSharedWorkspaceCall(workspaceCreationRequest, _callback);

    }


    private ApiResponse<Workspace> createSharedWorkspaceWithHttpInfo(WorkspaceCreationRequest workspaceCreationRequest) throws ApiException {
        okhttp3.Call localVarCall = createSharedWorkspaceValidateBeforeCall(workspaceCreationRequest, null);
        Type localVarReturnType = new TypeToken<Workspace>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createSharedWorkspaceAsync(WorkspaceCreationRequest workspaceCreationRequest, final ApiCallback<Workspace> _callback) throws ApiException {

        okhttp3.Call localVarCall = createSharedWorkspaceValidateBeforeCall(workspaceCreationRequest, _callback);
        Type localVarReturnType = new TypeToken<Workspace>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIcreateSharedWorkspaceRequest {
        private WorkspaceCreationRequest workspaceCreationRequest;

        private APIcreateSharedWorkspaceRequest() {
        }

        /**
         * Set workspaceCreationRequest
         * @param workspaceCreationRequest The workspace to be created. (optional)
         * @return APIcreateSharedWorkspaceRequest
         */
        public APIcreateSharedWorkspaceRequest workspaceCreationRequest(WorkspaceCreationRequest workspaceCreationRequest) {
            this.workspaceCreationRequest = workspaceCreationRequest;
            return this;
        }

        /**
         * Build call for createSharedWorkspace
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The workspace created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return createSharedWorkspaceCall(workspaceCreationRequest, _callback);
        }

        /**
         * Execute createSharedWorkspace request
         * @return Workspace
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The workspace created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public Workspace execute() throws ApiException {
            ApiResponse<Workspace> localVarResp = createSharedWorkspaceWithHttpInfo(workspaceCreationRequest);
            return localVarResp.getData();
        }

        /**
         * Execute createSharedWorkspace request with HTTP info returned
         * @return ApiResponse&lt;Workspace&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The workspace created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Workspace> executeWithHttpInfo() throws ApiException {
            return createSharedWorkspaceWithHttpInfo(workspaceCreationRequest);
        }

        /**
         * Execute createSharedWorkspace request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The workspace created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Workspace> _callback) throws ApiException {
            return createSharedWorkspaceAsync(workspaceCreationRequest, _callback);
        }
    }

    /**
     * [EARLY ACCESS] CreateSharedWorkspace: Create a new shared workspace.
     * Create a new shared workspace.
     * @return APIcreateSharedWorkspaceRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The workspace created. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIcreateSharedWorkspaceRequest createSharedWorkspace() {
        return new APIcreateSharedWorkspaceRequest();
    }
    private okhttp3.Call deletePersonalItemCall(String workspaceName, String itemName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/workspaces/personal/{workspaceName}/items/{itemName}"
            .replace("{" + "workspaceName" + "}", localVarApiClient.escapeString(workspaceName.toString()))
            .replace("{" + "itemName" + "}", localVarApiClient.escapeString(itemName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deletePersonalItemValidateBeforeCall(String workspaceName, String itemName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspaceName' is set
        if (workspaceName == null) {
            throw new ApiException("Missing the required parameter 'workspaceName' when calling deletePersonalItem(Async)");
        }

        // verify the required parameter 'itemName' is set
        if (itemName == null) {
            throw new ApiException("Missing the required parameter 'itemName' when calling deletePersonalItem(Async)");
        }

        return deletePersonalItemCall(workspaceName, itemName, _callback);

    }


    private ApiResponse<DeletedEntityResponse> deletePersonalItemWithHttpInfo(String workspaceName, String itemName) throws ApiException {
        okhttp3.Call localVarCall = deletePersonalItemValidateBeforeCall(workspaceName, itemName, null);
        Type localVarReturnType = new TypeToken<DeletedEntityResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deletePersonalItemAsync(String workspaceName, String itemName, final ApiCallback<DeletedEntityResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deletePersonalItemValidateBeforeCall(workspaceName, itemName, _callback);
        Type localVarReturnType = new TypeToken<DeletedEntityResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIdeletePersonalItemRequest {
        private final String workspaceName;
        private final String itemName;

        private APIdeletePersonalItemRequest(String workspaceName, String itemName) {
            this.workspaceName = workspaceName;
            this.itemName = itemName;
        }

        /**
         * Build call for deletePersonalItem
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The result of deleting a personal workspace item. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deletePersonalItemCall(workspaceName, itemName, _callback);
        }

        /**
         * Execute deletePersonalItem request
         * @return DeletedEntityResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The result of deleting a personal workspace item. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public DeletedEntityResponse execute() throws ApiException {
            ApiResponse<DeletedEntityResponse> localVarResp = deletePersonalItemWithHttpInfo(workspaceName, itemName);
            return localVarResp.getData();
        }

        /**
         * Execute deletePersonalItem request with HTTP info returned
         * @return ApiResponse&lt;DeletedEntityResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The result of deleting a personal workspace item. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DeletedEntityResponse> executeWithHttpInfo() throws ApiException {
            return deletePersonalItemWithHttpInfo(workspaceName, itemName);
        }

        /**
         * Execute deletePersonalItem request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The result of deleting a personal workspace item. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DeletedEntityResponse> _callback) throws ApiException {
            return deletePersonalItemAsync(workspaceName, itemName, _callback);
        }
    }

    /**
     * [EARLY ACCESS] DeletePersonalItem: Delete an item from a personal workspace.
     * Delete an item from a personal workspace.
     * @param workspaceName The name of the personal workspace. (required)
     * @param itemName The name of the item. (required)
     * @return APIdeletePersonalItemRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The result of deleting a personal workspace item. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIdeletePersonalItemRequest deletePersonalItem(String workspaceName, String itemName) {
        return new APIdeletePersonalItemRequest(workspaceName, itemName);
    }
    private okhttp3.Call deletePersonalWorkspaceCall(String workspaceName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/workspaces/personal/{workspaceName}"
            .replace("{" + "workspaceName" + "}", localVarApiClient.escapeString(workspaceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deletePersonalWorkspaceValidateBeforeCall(String workspaceName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspaceName' is set
        if (workspaceName == null) {
            throw new ApiException("Missing the required parameter 'workspaceName' when calling deletePersonalWorkspace(Async)");
        }

        return deletePersonalWorkspaceCall(workspaceName, _callback);

    }


    private ApiResponse<DeletedEntityResponse> deletePersonalWorkspaceWithHttpInfo(String workspaceName) throws ApiException {
        okhttp3.Call localVarCall = deletePersonalWorkspaceValidateBeforeCall(workspaceName, null);
        Type localVarReturnType = new TypeToken<DeletedEntityResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deletePersonalWorkspaceAsync(String workspaceName, final ApiCallback<DeletedEntityResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deletePersonalWorkspaceValidateBeforeCall(workspaceName, _callback);
        Type localVarReturnType = new TypeToken<DeletedEntityResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIdeletePersonalWorkspaceRequest {
        private final String workspaceName;

        private APIdeletePersonalWorkspaceRequest(String workspaceName) {
            this.workspaceName = workspaceName;
        }

        /**
         * Build call for deletePersonalWorkspace
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The result of deleting a personal workspace. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deletePersonalWorkspaceCall(workspaceName, _callback);
        }

        /**
         * Execute deletePersonalWorkspace request
         * @return DeletedEntityResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The result of deleting a personal workspace. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public DeletedEntityResponse execute() throws ApiException {
            ApiResponse<DeletedEntityResponse> localVarResp = deletePersonalWorkspaceWithHttpInfo(workspaceName);
            return localVarResp.getData();
        }

        /**
         * Execute deletePersonalWorkspace request with HTTP info returned
         * @return ApiResponse&lt;DeletedEntityResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The result of deleting a personal workspace. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DeletedEntityResponse> executeWithHttpInfo() throws ApiException {
            return deletePersonalWorkspaceWithHttpInfo(workspaceName);
        }

        /**
         * Execute deletePersonalWorkspace request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The result of deleting a personal workspace. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DeletedEntityResponse> _callback) throws ApiException {
            return deletePersonalWorkspaceAsync(workspaceName, _callback);
        }
    }

    /**
     * [EARLY ACCESS] DeletePersonalWorkspace: Delete a personal workspace.
     * Delete a personal workspace.
     * @param workspaceName The name of the personal workspace. (required)
     * @return APIdeletePersonalWorkspaceRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The result of deleting a personal workspace. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIdeletePersonalWorkspaceRequest deletePersonalWorkspace(String workspaceName) {
        return new APIdeletePersonalWorkspaceRequest(workspaceName);
    }
    private okhttp3.Call deleteSharedItemCall(String workspaceName, String itemName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/workspaces/shared/{workspaceName}/items/{itemName}"
            .replace("{" + "workspaceName" + "}", localVarApiClient.escapeString(workspaceName.toString()))
            .replace("{" + "itemName" + "}", localVarApiClient.escapeString(itemName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteSharedItemValidateBeforeCall(String workspaceName, String itemName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspaceName' is set
        if (workspaceName == null) {
            throw new ApiException("Missing the required parameter 'workspaceName' when calling deleteSharedItem(Async)");
        }

        // verify the required parameter 'itemName' is set
        if (itemName == null) {
            throw new ApiException("Missing the required parameter 'itemName' when calling deleteSharedItem(Async)");
        }

        return deleteSharedItemCall(workspaceName, itemName, _callback);

    }


    private ApiResponse<DeletedEntityResponse> deleteSharedItemWithHttpInfo(String workspaceName, String itemName) throws ApiException {
        okhttp3.Call localVarCall = deleteSharedItemValidateBeforeCall(workspaceName, itemName, null);
        Type localVarReturnType = new TypeToken<DeletedEntityResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteSharedItemAsync(String workspaceName, String itemName, final ApiCallback<DeletedEntityResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteSharedItemValidateBeforeCall(workspaceName, itemName, _callback);
        Type localVarReturnType = new TypeToken<DeletedEntityResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIdeleteSharedItemRequest {
        private final String workspaceName;
        private final String itemName;

        private APIdeleteSharedItemRequest(String workspaceName, String itemName) {
            this.workspaceName = workspaceName;
            this.itemName = itemName;
        }

        /**
         * Build call for deleteSharedItem
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The result of deleting a shared workspace item. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteSharedItemCall(workspaceName, itemName, _callback);
        }

        /**
         * Execute deleteSharedItem request
         * @return DeletedEntityResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The result of deleting a shared workspace item. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public DeletedEntityResponse execute() throws ApiException {
            ApiResponse<DeletedEntityResponse> localVarResp = deleteSharedItemWithHttpInfo(workspaceName, itemName);
            return localVarResp.getData();
        }

        /**
         * Execute deleteSharedItem request with HTTP info returned
         * @return ApiResponse&lt;DeletedEntityResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The result of deleting a shared workspace item. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DeletedEntityResponse> executeWithHttpInfo() throws ApiException {
            return deleteSharedItemWithHttpInfo(workspaceName, itemName);
        }

        /**
         * Execute deleteSharedItem request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The result of deleting a shared workspace item. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DeletedEntityResponse> _callback) throws ApiException {
            return deleteSharedItemAsync(workspaceName, itemName, _callback);
        }
    }

    /**
     * [EARLY ACCESS] DeleteSharedItem: Delete an item from a shared workspace.
     * Delete an item from a shared workspace.
     * @param workspaceName The name of the shared workspace. (required)
     * @param itemName The name of the item. (required)
     * @return APIdeleteSharedItemRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The result of deleting a shared workspace item. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIdeleteSharedItemRequest deleteSharedItem(String workspaceName, String itemName) {
        return new APIdeleteSharedItemRequest(workspaceName, itemName);
    }
    private okhttp3.Call deleteSharedWorkspaceCall(String workspaceName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/workspaces/shared/{workspaceName}"
            .replace("{" + "workspaceName" + "}", localVarApiClient.escapeString(workspaceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteSharedWorkspaceValidateBeforeCall(String workspaceName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspaceName' is set
        if (workspaceName == null) {
            throw new ApiException("Missing the required parameter 'workspaceName' when calling deleteSharedWorkspace(Async)");
        }

        return deleteSharedWorkspaceCall(workspaceName, _callback);

    }


    private ApiResponse<DeletedEntityResponse> deleteSharedWorkspaceWithHttpInfo(String workspaceName) throws ApiException {
        okhttp3.Call localVarCall = deleteSharedWorkspaceValidateBeforeCall(workspaceName, null);
        Type localVarReturnType = new TypeToken<DeletedEntityResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteSharedWorkspaceAsync(String workspaceName, final ApiCallback<DeletedEntityResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteSharedWorkspaceValidateBeforeCall(workspaceName, _callback);
        Type localVarReturnType = new TypeToken<DeletedEntityResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIdeleteSharedWorkspaceRequest {
        private final String workspaceName;

        private APIdeleteSharedWorkspaceRequest(String workspaceName) {
            this.workspaceName = workspaceName;
        }

        /**
         * Build call for deleteSharedWorkspace
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The result of deleting a shared workspace. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteSharedWorkspaceCall(workspaceName, _callback);
        }

        /**
         * Execute deleteSharedWorkspace request
         * @return DeletedEntityResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The result of deleting a shared workspace. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public DeletedEntityResponse execute() throws ApiException {
            ApiResponse<DeletedEntityResponse> localVarResp = deleteSharedWorkspaceWithHttpInfo(workspaceName);
            return localVarResp.getData();
        }

        /**
         * Execute deleteSharedWorkspace request with HTTP info returned
         * @return ApiResponse&lt;DeletedEntityResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The result of deleting a shared workspace. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DeletedEntityResponse> executeWithHttpInfo() throws ApiException {
            return deleteSharedWorkspaceWithHttpInfo(workspaceName);
        }

        /**
         * Execute deleteSharedWorkspace request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The result of deleting a shared workspace. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DeletedEntityResponse> _callback) throws ApiException {
            return deleteSharedWorkspaceAsync(workspaceName, _callback);
        }
    }

    /**
     * [EARLY ACCESS] DeleteSharedWorkspace: Delete a shared workspace.
     * Delete a shared workspace.
     * @param workspaceName The name of the shared workspace. (required)
     * @return APIdeleteSharedWorkspaceRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The result of deleting a shared workspace. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIdeleteSharedWorkspaceRequest deleteSharedWorkspace(String workspaceName) {
        return new APIdeleteSharedWorkspaceRequest(workspaceName);
    }
    private okhttp3.Call getPersonalItemCall(String workspaceName, String itemName, OffsetDateTime asAt, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/workspaces/personal/{workspaceName}/items/{itemName}"
            .replace("{" + "workspaceName" + "}", localVarApiClient.escapeString(workspaceName.toString()))
            .replace("{" + "itemName" + "}", localVarApiClient.escapeString(itemName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (asAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asAt", asAt));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPersonalItemValidateBeforeCall(String workspaceName, String itemName, OffsetDateTime asAt, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspaceName' is set
        if (workspaceName == null) {
            throw new ApiException("Missing the required parameter 'workspaceName' when calling getPersonalItem(Async)");
        }

        // verify the required parameter 'itemName' is set
        if (itemName == null) {
            throw new ApiException("Missing the required parameter 'itemName' when calling getPersonalItem(Async)");
        }

        return getPersonalItemCall(workspaceName, itemName, asAt, _callback);

    }


    private ApiResponse<WorkspaceItem> getPersonalItemWithHttpInfo(String workspaceName, String itemName, OffsetDateTime asAt) throws ApiException {
        okhttp3.Call localVarCall = getPersonalItemValidateBeforeCall(workspaceName, itemName, asAt, null);
        Type localVarReturnType = new TypeToken<WorkspaceItem>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getPersonalItemAsync(String workspaceName, String itemName, OffsetDateTime asAt, final ApiCallback<WorkspaceItem> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPersonalItemValidateBeforeCall(workspaceName, itemName, asAt, _callback);
        Type localVarReturnType = new TypeToken<WorkspaceItem>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetPersonalItemRequest {
        private final String workspaceName;
        private final String itemName;
        private OffsetDateTime asAt;

        private APIgetPersonalItemRequest(String workspaceName, String itemName) {
            this.workspaceName = workspaceName;
            this.itemName = itemName;
        }

        /**
         * Set asAt
         * @param asAt The datetime at which to request the workspace item. If not provided, defaults to &#39;latest&#39;. (optional)
         * @return APIgetPersonalItemRequest
         */
        public APIgetPersonalItemRequest asAt(OffsetDateTime asAt) {
            this.asAt = asAt;
            return this;
        }

        /**
         * Build call for getPersonalItem
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The workspace item requested. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getPersonalItemCall(workspaceName, itemName, asAt, _callback);
        }

        /**
         * Execute getPersonalItem request
         * @return WorkspaceItem
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The workspace item requested. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public WorkspaceItem execute() throws ApiException {
            ApiResponse<WorkspaceItem> localVarResp = getPersonalItemWithHttpInfo(workspaceName, itemName, asAt);
            return localVarResp.getData();
        }

        /**
         * Execute getPersonalItem request with HTTP info returned
         * @return ApiResponse&lt;WorkspaceItem&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The workspace item requested. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WorkspaceItem> executeWithHttpInfo() throws ApiException {
            return getPersonalItemWithHttpInfo(workspaceName, itemName, asAt);
        }

        /**
         * Execute getPersonalItem request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The workspace item requested. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WorkspaceItem> _callback) throws ApiException {
            return getPersonalItemAsync(workspaceName, itemName, asAt, _callback);
        }
    }

    /**
     * [EARLY ACCESS] GetPersonalItem: Get a single personal workspace item.
     * Get a single personal workspace item.
     * @param workspaceName The name of the personal workspace. (required)
     * @param itemName The name of the item. (required)
     * @return APIgetPersonalItemRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The workspace item requested. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIgetPersonalItemRequest getPersonalItem(String workspaceName, String itemName) {
        return new APIgetPersonalItemRequest(workspaceName, itemName);
    }
    private okhttp3.Call getPersonalWorkspaceCall(String workspaceName, OffsetDateTime asAt, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/workspaces/personal/{workspaceName}"
            .replace("{" + "workspaceName" + "}", localVarApiClient.escapeString(workspaceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (asAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asAt", asAt));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPersonalWorkspaceValidateBeforeCall(String workspaceName, OffsetDateTime asAt, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspaceName' is set
        if (workspaceName == null) {
            throw new ApiException("Missing the required parameter 'workspaceName' when calling getPersonalWorkspace(Async)");
        }

        return getPersonalWorkspaceCall(workspaceName, asAt, _callback);

    }


    private ApiResponse<Workspace> getPersonalWorkspaceWithHttpInfo(String workspaceName, OffsetDateTime asAt) throws ApiException {
        okhttp3.Call localVarCall = getPersonalWorkspaceValidateBeforeCall(workspaceName, asAt, null);
        Type localVarReturnType = new TypeToken<Workspace>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getPersonalWorkspaceAsync(String workspaceName, OffsetDateTime asAt, final ApiCallback<Workspace> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPersonalWorkspaceValidateBeforeCall(workspaceName, asAt, _callback);
        Type localVarReturnType = new TypeToken<Workspace>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetPersonalWorkspaceRequest {
        private final String workspaceName;
        private OffsetDateTime asAt;

        private APIgetPersonalWorkspaceRequest(String workspaceName) {
            this.workspaceName = workspaceName;
        }

        /**
         * Set asAt
         * @param asAt The asAt datetime at which to retrieve workspaces. Defaults to &#39;latest&#39; if not specified. (optional)
         * @return APIgetPersonalWorkspaceRequest
         */
        public APIgetPersonalWorkspaceRequest asAt(OffsetDateTime asAt) {
            this.asAt = asAt;
            return this;
        }

        /**
         * Build call for getPersonalWorkspace
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The personal workspace. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getPersonalWorkspaceCall(workspaceName, asAt, _callback);
        }

        /**
         * Execute getPersonalWorkspace request
         * @return Workspace
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The personal workspace. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public Workspace execute() throws ApiException {
            ApiResponse<Workspace> localVarResp = getPersonalWorkspaceWithHttpInfo(workspaceName, asAt);
            return localVarResp.getData();
        }

        /**
         * Execute getPersonalWorkspace request with HTTP info returned
         * @return ApiResponse&lt;Workspace&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The personal workspace. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Workspace> executeWithHttpInfo() throws ApiException {
            return getPersonalWorkspaceWithHttpInfo(workspaceName, asAt);
        }

        /**
         * Execute getPersonalWorkspace request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The personal workspace. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Workspace> _callback) throws ApiException {
            return getPersonalWorkspaceAsync(workspaceName, asAt, _callback);
        }
    }

    /**
     * [EARLY ACCESS] GetPersonalWorkspace: Get a personal workspace.
     * Get a personal workspace.
     * @param workspaceName The personal workspace name. (required)
     * @return APIgetPersonalWorkspaceRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The personal workspace. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIgetPersonalWorkspaceRequest getPersonalWorkspace(String workspaceName) {
        return new APIgetPersonalWorkspaceRequest(workspaceName);
    }
    private okhttp3.Call getSharedItemCall(String workspaceName, String itemName, OffsetDateTime asAt, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/workspaces/shared/{workspaceName}/items/{itemName}"
            .replace("{" + "workspaceName" + "}", localVarApiClient.escapeString(workspaceName.toString()))
            .replace("{" + "itemName" + "}", localVarApiClient.escapeString(itemName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (asAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asAt", asAt));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSharedItemValidateBeforeCall(String workspaceName, String itemName, OffsetDateTime asAt, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspaceName' is set
        if (workspaceName == null) {
            throw new ApiException("Missing the required parameter 'workspaceName' when calling getSharedItem(Async)");
        }

        // verify the required parameter 'itemName' is set
        if (itemName == null) {
            throw new ApiException("Missing the required parameter 'itemName' when calling getSharedItem(Async)");
        }

        return getSharedItemCall(workspaceName, itemName, asAt, _callback);

    }


    private ApiResponse<WorkspaceItem> getSharedItemWithHttpInfo(String workspaceName, String itemName, OffsetDateTime asAt) throws ApiException {
        okhttp3.Call localVarCall = getSharedItemValidateBeforeCall(workspaceName, itemName, asAt, null);
        Type localVarReturnType = new TypeToken<WorkspaceItem>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSharedItemAsync(String workspaceName, String itemName, OffsetDateTime asAt, final ApiCallback<WorkspaceItem> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSharedItemValidateBeforeCall(workspaceName, itemName, asAt, _callback);
        Type localVarReturnType = new TypeToken<WorkspaceItem>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetSharedItemRequest {
        private final String workspaceName;
        private final String itemName;
        private OffsetDateTime asAt;

        private APIgetSharedItemRequest(String workspaceName, String itemName) {
            this.workspaceName = workspaceName;
            this.itemName = itemName;
        }

        /**
         * Set asAt
         * @param asAt The datetime at which to request the workspace item. If not provided, defaults to &#39;latest&#39;. (optional)
         * @return APIgetSharedItemRequest
         */
        public APIgetSharedItemRequest asAt(OffsetDateTime asAt) {
            this.asAt = asAt;
            return this;
        }

        /**
         * Build call for getSharedItem
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The workspace item requested. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSharedItemCall(workspaceName, itemName, asAt, _callback);
        }

        /**
         * Execute getSharedItem request
         * @return WorkspaceItem
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The workspace item requested. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public WorkspaceItem execute() throws ApiException {
            ApiResponse<WorkspaceItem> localVarResp = getSharedItemWithHttpInfo(workspaceName, itemName, asAt);
            return localVarResp.getData();
        }

        /**
         * Execute getSharedItem request with HTTP info returned
         * @return ApiResponse&lt;WorkspaceItem&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The workspace item requested. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WorkspaceItem> executeWithHttpInfo() throws ApiException {
            return getSharedItemWithHttpInfo(workspaceName, itemName, asAt);
        }

        /**
         * Execute getSharedItem request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The workspace item requested. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WorkspaceItem> _callback) throws ApiException {
            return getSharedItemAsync(workspaceName, itemName, asAt, _callback);
        }
    }

    /**
     * [EARLY ACCESS] GetSharedItem: Get a single shared workspace item.
     * Get a single shared workspace item.
     * @param workspaceName The name of the shared workspace. (required)
     * @param itemName The name of the item. (required)
     * @return APIgetSharedItemRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The workspace item requested. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIgetSharedItemRequest getSharedItem(String workspaceName, String itemName) {
        return new APIgetSharedItemRequest(workspaceName, itemName);
    }
    private okhttp3.Call getSharedWorkspaceCall(String workspaceName, OffsetDateTime asAt, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/workspaces/shared/{workspaceName}"
            .replace("{" + "workspaceName" + "}", localVarApiClient.escapeString(workspaceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (asAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asAt", asAt));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSharedWorkspaceValidateBeforeCall(String workspaceName, OffsetDateTime asAt, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspaceName' is set
        if (workspaceName == null) {
            throw new ApiException("Missing the required parameter 'workspaceName' when calling getSharedWorkspace(Async)");
        }

        return getSharedWorkspaceCall(workspaceName, asAt, _callback);

    }


    private ApiResponse<Workspace> getSharedWorkspaceWithHttpInfo(String workspaceName, OffsetDateTime asAt) throws ApiException {
        okhttp3.Call localVarCall = getSharedWorkspaceValidateBeforeCall(workspaceName, asAt, null);
        Type localVarReturnType = new TypeToken<Workspace>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSharedWorkspaceAsync(String workspaceName, OffsetDateTime asAt, final ApiCallback<Workspace> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSharedWorkspaceValidateBeforeCall(workspaceName, asAt, _callback);
        Type localVarReturnType = new TypeToken<Workspace>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetSharedWorkspaceRequest {
        private final String workspaceName;
        private OffsetDateTime asAt;

        private APIgetSharedWorkspaceRequest(String workspaceName) {
            this.workspaceName = workspaceName;
        }

        /**
         * Set asAt
         * @param asAt The asAt datetime at which to retrieve workspaces. Defaults to &#39;latest&#39; if not specified. (optional)
         * @return APIgetSharedWorkspaceRequest
         */
        public APIgetSharedWorkspaceRequest asAt(OffsetDateTime asAt) {
            this.asAt = asAt;
            return this;
        }

        /**
         * Build call for getSharedWorkspace
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The shared workspace. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSharedWorkspaceCall(workspaceName, asAt, _callback);
        }

        /**
         * Execute getSharedWorkspace request
         * @return Workspace
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The shared workspace. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public Workspace execute() throws ApiException {
            ApiResponse<Workspace> localVarResp = getSharedWorkspaceWithHttpInfo(workspaceName, asAt);
            return localVarResp.getData();
        }

        /**
         * Execute getSharedWorkspace request with HTTP info returned
         * @return ApiResponse&lt;Workspace&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The shared workspace. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Workspace> executeWithHttpInfo() throws ApiException {
            return getSharedWorkspaceWithHttpInfo(workspaceName, asAt);
        }

        /**
         * Execute getSharedWorkspace request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The shared workspace. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Workspace> _callback) throws ApiException {
            return getSharedWorkspaceAsync(workspaceName, asAt, _callback);
        }
    }

    /**
     * [EARLY ACCESS] GetSharedWorkspace: Get a shared workspace.
     * Get a shared workspace.
     * @param workspaceName The shared workspace name. (required)
     * @return APIgetSharedWorkspaceRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The shared workspace. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIgetSharedWorkspaceRequest getSharedWorkspace(String workspaceName) {
        return new APIgetSharedWorkspaceRequest(workspaceName);
    }
    private okhttp3.Call listPersonalItemsCall(String workspaceName, OffsetDateTime asAt, String page, List<String> sortBy, Integer limit, String filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/workspaces/personal/{workspaceName}/items"
            .replace("{" + "workspaceName" + "}", localVarApiClient.escapeString(workspaceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (asAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asAt", asAt));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (sortBy != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "sortBy", sortBy));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listPersonalItemsValidateBeforeCall(String workspaceName, OffsetDateTime asAt, String page, List<String> sortBy, Integer limit, String filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspaceName' is set
        if (workspaceName == null) {
            throw new ApiException("Missing the required parameter 'workspaceName' when calling listPersonalItems(Async)");
        }

        return listPersonalItemsCall(workspaceName, asAt, page, sortBy, limit, filter, _callback);

    }


    private ApiResponse<PagedResourceListOfWorkspaceItem> listPersonalItemsWithHttpInfo(String workspaceName, OffsetDateTime asAt, String page, List<String> sortBy, Integer limit, String filter) throws ApiException {
        okhttp3.Call localVarCall = listPersonalItemsValidateBeforeCall(workspaceName, asAt, page, sortBy, limit, filter, null);
        Type localVarReturnType = new TypeToken<PagedResourceListOfWorkspaceItem>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listPersonalItemsAsync(String workspaceName, OffsetDateTime asAt, String page, List<String> sortBy, Integer limit, String filter, final ApiCallback<PagedResourceListOfWorkspaceItem> _callback) throws ApiException {

        okhttp3.Call localVarCall = listPersonalItemsValidateBeforeCall(workspaceName, asAt, page, sortBy, limit, filter, _callback);
        Type localVarReturnType = new TypeToken<PagedResourceListOfWorkspaceItem>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIlistPersonalItemsRequest {
        private final String workspaceName;
        private OffsetDateTime asAt;
        private String page;
        private List<String> sortBy;
        private Integer limit;
        private String filter;

        private APIlistPersonalItemsRequest(String workspaceName) {
            this.workspaceName = workspaceName;
        }

        /**
         * Set asAt
         * @param asAt The asAt datetime at which to retrieve workspace items. Defaults to &#39;latest&#39; if not specified. (optional)
         * @return APIlistPersonalItemsRequest
         */
        public APIlistPersonalItemsRequest asAt(OffsetDateTime asAt) {
            this.asAt = asAt;
            return this;
        }

        /**
         * Set page
         * @param page The pagination token to use to continue listing workspaces items from a previous call to list workspaces items.   This value is returned from the previous call. If a pagination token is provided the sortBy, filter, effectiveAt, and asAt fields   must not have changed since the original request. (optional)
         * @return APIlistPersonalItemsRequest
         */
        public APIlistPersonalItemsRequest page(String page) {
            this.page = page;
            return this;
        }

        /**
         * Set sortBy
         * @param sortBy A list of field names to sort by, each suffixed by \&quot; ASC\&quot; or \&quot; DESC\&quot;. (optional)
         * @return APIlistPersonalItemsRequest
         */
        public APIlistPersonalItemsRequest sortBy(List<String> sortBy) {
            this.sortBy = sortBy;
            return this;
        }

        /**
         * Set limit
         * @param limit When paginating, limit the number of returned results to this many. (optional)
         * @return APIlistPersonalItemsRequest
         */
        public APIlistPersonalItemsRequest limit(Integer limit) {
            this.limit = limit;
            return this;
        }

        /**
         * Set filter
         * @param filter Expression to filter the result set. Read more about filtering results from LUSID here:   https://support.lusid.com/filtering-results-from-lusid. (optional)
         * @return APIlistPersonalItemsRequest
         */
        public APIlistPersonalItemsRequest filter(String filter) {
            this.filter = filter;
            return this;
        }

        /**
         * Build call for listPersonalItems
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The items in a personal workspace. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listPersonalItemsCall(workspaceName, asAt, page, sortBy, limit, filter, _callback);
        }

        /**
         * Execute listPersonalItems request
         * @return PagedResourceListOfWorkspaceItem
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The items in a personal workspace. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public PagedResourceListOfWorkspaceItem execute() throws ApiException {
            ApiResponse<PagedResourceListOfWorkspaceItem> localVarResp = listPersonalItemsWithHttpInfo(workspaceName, asAt, page, sortBy, limit, filter);
            return localVarResp.getData();
        }

        /**
         * Execute listPersonalItems request with HTTP info returned
         * @return ApiResponse&lt;PagedResourceListOfWorkspaceItem&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The items in a personal workspace. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PagedResourceListOfWorkspaceItem> executeWithHttpInfo() throws ApiException {
            return listPersonalItemsWithHttpInfo(workspaceName, asAt, page, sortBy, limit, filter);
        }

        /**
         * Execute listPersonalItems request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The items in a personal workspace. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PagedResourceListOfWorkspaceItem> _callback) throws ApiException {
            return listPersonalItemsAsync(workspaceName, asAt, page, sortBy, limit, filter, _callback);
        }
    }

    /**
     * [EARLY ACCESS] ListPersonalItems: List the items in a personal workspace.
     * List the items in a personal workspace.
     * @param workspaceName The item&#39;s workspace name. (required)
     * @return APIlistPersonalItemsRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The items in a personal workspace. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIlistPersonalItemsRequest listPersonalItems(String workspaceName) {
        return new APIlistPersonalItemsRequest(workspaceName);
    }
    private okhttp3.Call listPersonalWorkspacesCall(OffsetDateTime asAt, String page, List<String> sortBy, Integer limit, String filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/workspaces/personal";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (asAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asAt", asAt));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (sortBy != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "sortBy", sortBy));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listPersonalWorkspacesValidateBeforeCall(OffsetDateTime asAt, String page, List<String> sortBy, Integer limit, String filter, final ApiCallback _callback) throws ApiException {
        return listPersonalWorkspacesCall(asAt, page, sortBy, limit, filter, _callback);

    }


    private ApiResponse<PagedResourceListOfWorkspace> listPersonalWorkspacesWithHttpInfo(OffsetDateTime asAt, String page, List<String> sortBy, Integer limit, String filter) throws ApiException {
        okhttp3.Call localVarCall = listPersonalWorkspacesValidateBeforeCall(asAt, page, sortBy, limit, filter, null);
        Type localVarReturnType = new TypeToken<PagedResourceListOfWorkspace>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listPersonalWorkspacesAsync(OffsetDateTime asAt, String page, List<String> sortBy, Integer limit, String filter, final ApiCallback<PagedResourceListOfWorkspace> _callback) throws ApiException {

        okhttp3.Call localVarCall = listPersonalWorkspacesValidateBeforeCall(asAt, page, sortBy, limit, filter, _callback);
        Type localVarReturnType = new TypeToken<PagedResourceListOfWorkspace>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIlistPersonalWorkspacesRequest {
        private OffsetDateTime asAt;
        private String page;
        private List<String> sortBy;
        private Integer limit;
        private String filter;

        private APIlistPersonalWorkspacesRequest() {
        }

        /**
         * Set asAt
         * @param asAt The asAt datetime at which to retrieve workspaces. Defaults to &#39;latest&#39; if not specified. (optional)
         * @return APIlistPersonalWorkspacesRequest
         */
        public APIlistPersonalWorkspacesRequest asAt(OffsetDateTime asAt) {
            this.asAt = asAt;
            return this;
        }

        /**
         * Set page
         * @param page The pagination token to use to continue listing workspaces from a previous call to list workspaces.   This value is returned from the previous call. If a pagination token is provided the sortBy, filter, effectiveAt, and asAt fields   must not have changed since the original request. (optional)
         * @return APIlistPersonalWorkspacesRequest
         */
        public APIlistPersonalWorkspacesRequest page(String page) {
            this.page = page;
            return this;
        }

        /**
         * Set sortBy
         * @param sortBy A list of field names to sort by, each suffixed by \&quot; ASC\&quot; or \&quot; DESC\&quot;. (optional)
         * @return APIlistPersonalWorkspacesRequest
         */
        public APIlistPersonalWorkspacesRequest sortBy(List<String> sortBy) {
            this.sortBy = sortBy;
            return this;
        }

        /**
         * Set limit
         * @param limit When paginating, limit the number of returned results to this many. (optional)
         * @return APIlistPersonalWorkspacesRequest
         */
        public APIlistPersonalWorkspacesRequest limit(Integer limit) {
            this.limit = limit;
            return this;
        }

        /**
         * Set filter
         * @param filter Expression to filter the result set. Read more about filtering results from LUSID here:   https://support.lusid.com/filtering-results-from-lusid. (optional)
         * @return APIlistPersonalWorkspacesRequest
         */
        public APIlistPersonalWorkspacesRequest filter(String filter) {
            this.filter = filter;
            return this;
        }

        /**
         * Build call for listPersonalWorkspaces
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The personal workspaces. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listPersonalWorkspacesCall(asAt, page, sortBy, limit, filter, _callback);
        }

        /**
         * Execute listPersonalWorkspaces request
         * @return PagedResourceListOfWorkspace
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The personal workspaces. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public PagedResourceListOfWorkspace execute() throws ApiException {
            ApiResponse<PagedResourceListOfWorkspace> localVarResp = listPersonalWorkspacesWithHttpInfo(asAt, page, sortBy, limit, filter);
            return localVarResp.getData();
        }

        /**
         * Execute listPersonalWorkspaces request with HTTP info returned
         * @return ApiResponse&lt;PagedResourceListOfWorkspace&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The personal workspaces. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PagedResourceListOfWorkspace> executeWithHttpInfo() throws ApiException {
            return listPersonalWorkspacesWithHttpInfo(asAt, page, sortBy, limit, filter);
        }

        /**
         * Execute listPersonalWorkspaces request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The personal workspaces. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PagedResourceListOfWorkspace> _callback) throws ApiException {
            return listPersonalWorkspacesAsync(asAt, page, sortBy, limit, filter, _callback);
        }
    }

    /**
     * [EARLY ACCESS] ListPersonalWorkspaces: List personal workspaces.
     * List personal workspaces.
     * @return APIlistPersonalWorkspacesRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The personal workspaces. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIlistPersonalWorkspacesRequest listPersonalWorkspaces() {
        return new APIlistPersonalWorkspacesRequest();
    }
    private okhttp3.Call listSharedItemsCall(String workspaceName, OffsetDateTime asAt, String page, List<String> sortBy, Integer limit, String filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/workspaces/shared/{workspaceName}/items"
            .replace("{" + "workspaceName" + "}", localVarApiClient.escapeString(workspaceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (asAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asAt", asAt));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (sortBy != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "sortBy", sortBy));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listSharedItemsValidateBeforeCall(String workspaceName, OffsetDateTime asAt, String page, List<String> sortBy, Integer limit, String filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspaceName' is set
        if (workspaceName == null) {
            throw new ApiException("Missing the required parameter 'workspaceName' when calling listSharedItems(Async)");
        }

        return listSharedItemsCall(workspaceName, asAt, page, sortBy, limit, filter, _callback);

    }


    private ApiResponse<PagedResourceListOfWorkspaceItem> listSharedItemsWithHttpInfo(String workspaceName, OffsetDateTime asAt, String page, List<String> sortBy, Integer limit, String filter) throws ApiException {
        okhttp3.Call localVarCall = listSharedItemsValidateBeforeCall(workspaceName, asAt, page, sortBy, limit, filter, null);
        Type localVarReturnType = new TypeToken<PagedResourceListOfWorkspaceItem>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listSharedItemsAsync(String workspaceName, OffsetDateTime asAt, String page, List<String> sortBy, Integer limit, String filter, final ApiCallback<PagedResourceListOfWorkspaceItem> _callback) throws ApiException {

        okhttp3.Call localVarCall = listSharedItemsValidateBeforeCall(workspaceName, asAt, page, sortBy, limit, filter, _callback);
        Type localVarReturnType = new TypeToken<PagedResourceListOfWorkspaceItem>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIlistSharedItemsRequest {
        private final String workspaceName;
        private OffsetDateTime asAt;
        private String page;
        private List<String> sortBy;
        private Integer limit;
        private String filter;

        private APIlistSharedItemsRequest(String workspaceName) {
            this.workspaceName = workspaceName;
        }

        /**
         * Set asAt
         * @param asAt The asAt datetime at which to retrieve workspace items. Defaults to &#39;latest&#39; if not specified. (optional)
         * @return APIlistSharedItemsRequest
         */
        public APIlistSharedItemsRequest asAt(OffsetDateTime asAt) {
            this.asAt = asAt;
            return this;
        }

        /**
         * Set page
         * @param page The pagination token to use to continue listing workspaces items from a previous call to list workspaces items.   This value is returned from the previous call. If a pagination token is provided the sortBy, filter, effectiveAt, and asAt fields   must not have changed since the original request. (optional)
         * @return APIlistSharedItemsRequest
         */
        public APIlistSharedItemsRequest page(String page) {
            this.page = page;
            return this;
        }

        /**
         * Set sortBy
         * @param sortBy A list of field names to sort by, each suffixed by \&quot; ASC\&quot; or \&quot; DESC\&quot;. (optional)
         * @return APIlistSharedItemsRequest
         */
        public APIlistSharedItemsRequest sortBy(List<String> sortBy) {
            this.sortBy = sortBy;
            return this;
        }

        /**
         * Set limit
         * @param limit When paginating, limit the number of returned results to this many. (optional)
         * @return APIlistSharedItemsRequest
         */
        public APIlistSharedItemsRequest limit(Integer limit) {
            this.limit = limit;
            return this;
        }

        /**
         * Set filter
         * @param filter Expression to filter the result set. Read more about filtering results from LUSID here:   https://support.lusid.com/filtering-results-from-lusid. (optional)
         * @return APIlistSharedItemsRequest
         */
        public APIlistSharedItemsRequest filter(String filter) {
            this.filter = filter;
            return this;
        }

        /**
         * Build call for listSharedItems
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The items in a shared workspace. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listSharedItemsCall(workspaceName, asAt, page, sortBy, limit, filter, _callback);
        }

        /**
         * Execute listSharedItems request
         * @return PagedResourceListOfWorkspaceItem
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The items in a shared workspace. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public PagedResourceListOfWorkspaceItem execute() throws ApiException {
            ApiResponse<PagedResourceListOfWorkspaceItem> localVarResp = listSharedItemsWithHttpInfo(workspaceName, asAt, page, sortBy, limit, filter);
            return localVarResp.getData();
        }

        /**
         * Execute listSharedItems request with HTTP info returned
         * @return ApiResponse&lt;PagedResourceListOfWorkspaceItem&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The items in a shared workspace. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PagedResourceListOfWorkspaceItem> executeWithHttpInfo() throws ApiException {
            return listSharedItemsWithHttpInfo(workspaceName, asAt, page, sortBy, limit, filter);
        }

        /**
         * Execute listSharedItems request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The items in a shared workspace. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PagedResourceListOfWorkspaceItem> _callback) throws ApiException {
            return listSharedItemsAsync(workspaceName, asAt, page, sortBy, limit, filter, _callback);
        }
    }

    /**
     * [EARLY ACCESS] ListSharedItems: List the items in a shared workspace.
     * List the items in a shared workspace.
     * @param workspaceName The item&#39;s workspace name. (required)
     * @return APIlistSharedItemsRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The items in a shared workspace. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIlistSharedItemsRequest listSharedItems(String workspaceName) {
        return new APIlistSharedItemsRequest(workspaceName);
    }
    private okhttp3.Call listSharedWorkspacesCall(OffsetDateTime asAt, String page, List<String> sortBy, Integer limit, String filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/workspaces/shared";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (asAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asAt", asAt));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (sortBy != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "sortBy", sortBy));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listSharedWorkspacesValidateBeforeCall(OffsetDateTime asAt, String page, List<String> sortBy, Integer limit, String filter, final ApiCallback _callback) throws ApiException {
        return listSharedWorkspacesCall(asAt, page, sortBy, limit, filter, _callback);

    }


    private ApiResponse<PagedResourceListOfWorkspace> listSharedWorkspacesWithHttpInfo(OffsetDateTime asAt, String page, List<String> sortBy, Integer limit, String filter) throws ApiException {
        okhttp3.Call localVarCall = listSharedWorkspacesValidateBeforeCall(asAt, page, sortBy, limit, filter, null);
        Type localVarReturnType = new TypeToken<PagedResourceListOfWorkspace>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listSharedWorkspacesAsync(OffsetDateTime asAt, String page, List<String> sortBy, Integer limit, String filter, final ApiCallback<PagedResourceListOfWorkspace> _callback) throws ApiException {

        okhttp3.Call localVarCall = listSharedWorkspacesValidateBeforeCall(asAt, page, sortBy, limit, filter, _callback);
        Type localVarReturnType = new TypeToken<PagedResourceListOfWorkspace>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIlistSharedWorkspacesRequest {
        private OffsetDateTime asAt;
        private String page;
        private List<String> sortBy;
        private Integer limit;
        private String filter;

        private APIlistSharedWorkspacesRequest() {
        }

        /**
         * Set asAt
         * @param asAt The asAt datetime at which to retrieve workspaces. Defaults to &#39;latest&#39; if not specified. (optional)
         * @return APIlistSharedWorkspacesRequest
         */
        public APIlistSharedWorkspacesRequest asAt(OffsetDateTime asAt) {
            this.asAt = asAt;
            return this;
        }

        /**
         * Set page
         * @param page The pagination token to use to continue listing workspaces from a previous call to list workspaces.   This value is returned from the previous call. If a pagination token is provided the sortBy, filter, effectiveAt, and asAt fields   must not have changed since the original request. (optional)
         * @return APIlistSharedWorkspacesRequest
         */
        public APIlistSharedWorkspacesRequest page(String page) {
            this.page = page;
            return this;
        }

        /**
         * Set sortBy
         * @param sortBy A list of field names to sort by, each suffixed by \&quot; ASC\&quot; or \&quot; DESC\&quot;. (optional)
         * @return APIlistSharedWorkspacesRequest
         */
        public APIlistSharedWorkspacesRequest sortBy(List<String> sortBy) {
            this.sortBy = sortBy;
            return this;
        }

        /**
         * Set limit
         * @param limit When paginating, limit the number of returned results to this many. (optional)
         * @return APIlistSharedWorkspacesRequest
         */
        public APIlistSharedWorkspacesRequest limit(Integer limit) {
            this.limit = limit;
            return this;
        }

        /**
         * Set filter
         * @param filter Expression to filter the result set. Read more about filtering results from LUSID here:   https://support.lusid.com/filtering-results-from-lusid. (optional)
         * @return APIlistSharedWorkspacesRequest
         */
        public APIlistSharedWorkspacesRequest filter(String filter) {
            this.filter = filter;
            return this;
        }

        /**
         * Build call for listSharedWorkspaces
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The shared workspaces. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listSharedWorkspacesCall(asAt, page, sortBy, limit, filter, _callback);
        }

        /**
         * Execute listSharedWorkspaces request
         * @return PagedResourceListOfWorkspace
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The shared workspaces. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public PagedResourceListOfWorkspace execute() throws ApiException {
            ApiResponse<PagedResourceListOfWorkspace> localVarResp = listSharedWorkspacesWithHttpInfo(asAt, page, sortBy, limit, filter);
            return localVarResp.getData();
        }

        /**
         * Execute listSharedWorkspaces request with HTTP info returned
         * @return ApiResponse&lt;PagedResourceListOfWorkspace&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The shared workspaces. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PagedResourceListOfWorkspace> executeWithHttpInfo() throws ApiException {
            return listSharedWorkspacesWithHttpInfo(asAt, page, sortBy, limit, filter);
        }

        /**
         * Execute listSharedWorkspaces request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The shared workspaces. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PagedResourceListOfWorkspace> _callback) throws ApiException {
            return listSharedWorkspacesAsync(asAt, page, sortBy, limit, filter, _callback);
        }
    }

    /**
     * [EARLY ACCESS] ListSharedWorkspaces: List shared workspaces.
     * List shared workspaces.
     * @return APIlistSharedWorkspacesRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The shared workspaces. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIlistSharedWorkspacesRequest listSharedWorkspaces() {
        return new APIlistSharedWorkspacesRequest();
    }
    private okhttp3.Call updatePersonalItemCall(String workspaceName, String itemName, WorkspaceItemUpdateRequest workspaceItemUpdateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = workspaceItemUpdateRequest;

        // create path and map variables
        String localVarPath = "/api/workspaces/personal/{workspaceName}/items/{itemName}"
            .replace("{" + "workspaceName" + "}", localVarApiClient.escapeString(workspaceName.toString()))
            .replace("{" + "itemName" + "}", localVarApiClient.escapeString(itemName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updatePersonalItemValidateBeforeCall(String workspaceName, String itemName, WorkspaceItemUpdateRequest workspaceItemUpdateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspaceName' is set
        if (workspaceName == null) {
            throw new ApiException("Missing the required parameter 'workspaceName' when calling updatePersonalItem(Async)");
        }

        // verify the required parameter 'itemName' is set
        if (itemName == null) {
            throw new ApiException("Missing the required parameter 'itemName' when calling updatePersonalItem(Async)");
        }

        return updatePersonalItemCall(workspaceName, itemName, workspaceItemUpdateRequest, _callback);

    }


    private ApiResponse<WorkspaceItem> updatePersonalItemWithHttpInfo(String workspaceName, String itemName, WorkspaceItemUpdateRequest workspaceItemUpdateRequest) throws ApiException {
        okhttp3.Call localVarCall = updatePersonalItemValidateBeforeCall(workspaceName, itemName, workspaceItemUpdateRequest, null);
        Type localVarReturnType = new TypeToken<WorkspaceItem>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updatePersonalItemAsync(String workspaceName, String itemName, WorkspaceItemUpdateRequest workspaceItemUpdateRequest, final ApiCallback<WorkspaceItem> _callback) throws ApiException {

        okhttp3.Call localVarCall = updatePersonalItemValidateBeforeCall(workspaceName, itemName, workspaceItemUpdateRequest, _callback);
        Type localVarReturnType = new TypeToken<WorkspaceItem>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIupdatePersonalItemRequest {
        private final String workspaceName;
        private final String itemName;
        private WorkspaceItemUpdateRequest workspaceItemUpdateRequest;

        private APIupdatePersonalItemRequest(String workspaceName, String itemName) {
            this.workspaceName = workspaceName;
            this.itemName = itemName;
        }

        /**
         * Set workspaceItemUpdateRequest
         * @param workspaceItemUpdateRequest The new item details. (optional)
         * @return APIupdatePersonalItemRequest
         */
        public APIupdatePersonalItemRequest workspaceItemUpdateRequest(WorkspaceItemUpdateRequest workspaceItemUpdateRequest) {
            this.workspaceItemUpdateRequest = workspaceItemUpdateRequest;
            return this;
        }

        /**
         * Build call for updatePersonalItem
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The workspace item updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return updatePersonalItemCall(workspaceName, itemName, workspaceItemUpdateRequest, _callback);
        }

        /**
         * Execute updatePersonalItem request
         * @return WorkspaceItem
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The workspace item updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public WorkspaceItem execute() throws ApiException {
            ApiResponse<WorkspaceItem> localVarResp = updatePersonalItemWithHttpInfo(workspaceName, itemName, workspaceItemUpdateRequest);
            return localVarResp.getData();
        }

        /**
         * Execute updatePersonalItem request with HTTP info returned
         * @return ApiResponse&lt;WorkspaceItem&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The workspace item updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WorkspaceItem> executeWithHttpInfo() throws ApiException {
            return updatePersonalItemWithHttpInfo(workspaceName, itemName, workspaceItemUpdateRequest);
        }

        /**
         * Execute updatePersonalItem request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The workspace item updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WorkspaceItem> _callback) throws ApiException {
            return updatePersonalItemAsync(workspaceName, itemName, workspaceItemUpdateRequest, _callback);
        }
    }

    /**
     * [EARLY ACCESS] UpdatePersonalItem: Update an item in a personal workspace.
     * Update an item in a personal workspace.
     * @param workspaceName The personal workspace name. (required)
     * @param itemName The item name. (required)
     * @return APIupdatePersonalItemRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The workspace item updated. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIupdatePersonalItemRequest updatePersonalItem(String workspaceName, String itemName) {
        return new APIupdatePersonalItemRequest(workspaceName, itemName);
    }
    private okhttp3.Call updatePersonalWorkspaceCall(String workspaceName, WorkspaceUpdateRequest workspaceUpdateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = workspaceUpdateRequest;

        // create path and map variables
        String localVarPath = "/api/workspaces/personal/{workspaceName}"
            .replace("{" + "workspaceName" + "}", localVarApiClient.escapeString(workspaceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updatePersonalWorkspaceValidateBeforeCall(String workspaceName, WorkspaceUpdateRequest workspaceUpdateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspaceName' is set
        if (workspaceName == null) {
            throw new ApiException("Missing the required parameter 'workspaceName' when calling updatePersonalWorkspace(Async)");
        }

        return updatePersonalWorkspaceCall(workspaceName, workspaceUpdateRequest, _callback);

    }


    private ApiResponse<Workspace> updatePersonalWorkspaceWithHttpInfo(String workspaceName, WorkspaceUpdateRequest workspaceUpdateRequest) throws ApiException {
        okhttp3.Call localVarCall = updatePersonalWorkspaceValidateBeforeCall(workspaceName, workspaceUpdateRequest, null);
        Type localVarReturnType = new TypeToken<Workspace>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updatePersonalWorkspaceAsync(String workspaceName, WorkspaceUpdateRequest workspaceUpdateRequest, final ApiCallback<Workspace> _callback) throws ApiException {

        okhttp3.Call localVarCall = updatePersonalWorkspaceValidateBeforeCall(workspaceName, workspaceUpdateRequest, _callback);
        Type localVarReturnType = new TypeToken<Workspace>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIupdatePersonalWorkspaceRequest {
        private final String workspaceName;
        private WorkspaceUpdateRequest workspaceUpdateRequest;

        private APIupdatePersonalWorkspaceRequest(String workspaceName) {
            this.workspaceName = workspaceName;
        }

        /**
         * Set workspaceUpdateRequest
         * @param workspaceUpdateRequest The new workspace details. (optional)
         * @return APIupdatePersonalWorkspaceRequest
         */
        public APIupdatePersonalWorkspaceRequest workspaceUpdateRequest(WorkspaceUpdateRequest workspaceUpdateRequest) {
            this.workspaceUpdateRequest = workspaceUpdateRequest;
            return this;
        }

        /**
         * Build call for updatePersonalWorkspace
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The workspace updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return updatePersonalWorkspaceCall(workspaceName, workspaceUpdateRequest, _callback);
        }

        /**
         * Execute updatePersonalWorkspace request
         * @return Workspace
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The workspace updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public Workspace execute() throws ApiException {
            ApiResponse<Workspace> localVarResp = updatePersonalWorkspaceWithHttpInfo(workspaceName, workspaceUpdateRequest);
            return localVarResp.getData();
        }

        /**
         * Execute updatePersonalWorkspace request with HTTP info returned
         * @return ApiResponse&lt;Workspace&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The workspace updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Workspace> executeWithHttpInfo() throws ApiException {
            return updatePersonalWorkspaceWithHttpInfo(workspaceName, workspaceUpdateRequest);
        }

        /**
         * Execute updatePersonalWorkspace request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The workspace updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Workspace> _callback) throws ApiException {
            return updatePersonalWorkspaceAsync(workspaceName, workspaceUpdateRequest, _callback);
        }
    }

    /**
     * [EARLY ACCESS] UpdatePersonalWorkspace: Update a personal workspace.
     * Update a personal workspace.
     * @param workspaceName The personal workspace name. (required)
     * @return APIupdatePersonalWorkspaceRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The workspace updated. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIupdatePersonalWorkspaceRequest updatePersonalWorkspace(String workspaceName) {
        return new APIupdatePersonalWorkspaceRequest(workspaceName);
    }
    private okhttp3.Call updateSharedItemCall(String workspaceName, String itemName, WorkspaceItemUpdateRequest workspaceItemUpdateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = workspaceItemUpdateRequest;

        // create path and map variables
        String localVarPath = "/api/workspaces/shared/{workspaceName}/items/{itemName}"
            .replace("{" + "workspaceName" + "}", localVarApiClient.escapeString(workspaceName.toString()))
            .replace("{" + "itemName" + "}", localVarApiClient.escapeString(itemName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateSharedItemValidateBeforeCall(String workspaceName, String itemName, WorkspaceItemUpdateRequest workspaceItemUpdateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspaceName' is set
        if (workspaceName == null) {
            throw new ApiException("Missing the required parameter 'workspaceName' when calling updateSharedItem(Async)");
        }

        // verify the required parameter 'itemName' is set
        if (itemName == null) {
            throw new ApiException("Missing the required parameter 'itemName' when calling updateSharedItem(Async)");
        }

        return updateSharedItemCall(workspaceName, itemName, workspaceItemUpdateRequest, _callback);

    }


    private ApiResponse<WorkspaceItem> updateSharedItemWithHttpInfo(String workspaceName, String itemName, WorkspaceItemUpdateRequest workspaceItemUpdateRequest) throws ApiException {
        okhttp3.Call localVarCall = updateSharedItemValidateBeforeCall(workspaceName, itemName, workspaceItemUpdateRequest, null);
        Type localVarReturnType = new TypeToken<WorkspaceItem>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateSharedItemAsync(String workspaceName, String itemName, WorkspaceItemUpdateRequest workspaceItemUpdateRequest, final ApiCallback<WorkspaceItem> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateSharedItemValidateBeforeCall(workspaceName, itemName, workspaceItemUpdateRequest, _callback);
        Type localVarReturnType = new TypeToken<WorkspaceItem>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIupdateSharedItemRequest {
        private final String workspaceName;
        private final String itemName;
        private WorkspaceItemUpdateRequest workspaceItemUpdateRequest;

        private APIupdateSharedItemRequest(String workspaceName, String itemName) {
            this.workspaceName = workspaceName;
            this.itemName = itemName;
        }

        /**
         * Set workspaceItemUpdateRequest
         * @param workspaceItemUpdateRequest The new item details. (optional)
         * @return APIupdateSharedItemRequest
         */
        public APIupdateSharedItemRequest workspaceItemUpdateRequest(WorkspaceItemUpdateRequest workspaceItemUpdateRequest) {
            this.workspaceItemUpdateRequest = workspaceItemUpdateRequest;
            return this;
        }

        /**
         * Build call for updateSharedItem
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The workspace item updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return updateSharedItemCall(workspaceName, itemName, workspaceItemUpdateRequest, _callback);
        }

        /**
         * Execute updateSharedItem request
         * @return WorkspaceItem
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The workspace item updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public WorkspaceItem execute() throws ApiException {
            ApiResponse<WorkspaceItem> localVarResp = updateSharedItemWithHttpInfo(workspaceName, itemName, workspaceItemUpdateRequest);
            return localVarResp.getData();
        }

        /**
         * Execute updateSharedItem request with HTTP info returned
         * @return ApiResponse&lt;WorkspaceItem&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The workspace item updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WorkspaceItem> executeWithHttpInfo() throws ApiException {
            return updateSharedItemWithHttpInfo(workspaceName, itemName, workspaceItemUpdateRequest);
        }

        /**
         * Execute updateSharedItem request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The workspace item updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WorkspaceItem> _callback) throws ApiException {
            return updateSharedItemAsync(workspaceName, itemName, workspaceItemUpdateRequest, _callback);
        }
    }

    /**
     * [EARLY ACCESS] UpdateSharedItem: Update an item in a shared workspace.
     * Update an item in a shared workspace.
     * @param workspaceName The shared workspace name. (required)
     * @param itemName The item name. (required)
     * @return APIupdateSharedItemRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The workspace item updated. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIupdateSharedItemRequest updateSharedItem(String workspaceName, String itemName) {
        return new APIupdateSharedItemRequest(workspaceName, itemName);
    }
    private okhttp3.Call updateSharedWorkspaceCall(String workspaceName, WorkspaceUpdateRequest workspaceUpdateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = workspaceUpdateRequest;

        // create path and map variables
        String localVarPath = "/api/workspaces/shared/{workspaceName}"
            .replace("{" + "workspaceName" + "}", localVarApiClient.escapeString(workspaceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateSharedWorkspaceValidateBeforeCall(String workspaceName, WorkspaceUpdateRequest workspaceUpdateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspaceName' is set
        if (workspaceName == null) {
            throw new ApiException("Missing the required parameter 'workspaceName' when calling updateSharedWorkspace(Async)");
        }

        return updateSharedWorkspaceCall(workspaceName, workspaceUpdateRequest, _callback);

    }


    private ApiResponse<Workspace> updateSharedWorkspaceWithHttpInfo(String workspaceName, WorkspaceUpdateRequest workspaceUpdateRequest) throws ApiException {
        okhttp3.Call localVarCall = updateSharedWorkspaceValidateBeforeCall(workspaceName, workspaceUpdateRequest, null);
        Type localVarReturnType = new TypeToken<Workspace>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateSharedWorkspaceAsync(String workspaceName, WorkspaceUpdateRequest workspaceUpdateRequest, final ApiCallback<Workspace> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateSharedWorkspaceValidateBeforeCall(workspaceName, workspaceUpdateRequest, _callback);
        Type localVarReturnType = new TypeToken<Workspace>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIupdateSharedWorkspaceRequest {
        private final String workspaceName;
        private WorkspaceUpdateRequest workspaceUpdateRequest;

        private APIupdateSharedWorkspaceRequest(String workspaceName) {
            this.workspaceName = workspaceName;
        }

        /**
         * Set workspaceUpdateRequest
         * @param workspaceUpdateRequest The new workspace details. (optional)
         * @return APIupdateSharedWorkspaceRequest
         */
        public APIupdateSharedWorkspaceRequest workspaceUpdateRequest(WorkspaceUpdateRequest workspaceUpdateRequest) {
            this.workspaceUpdateRequest = workspaceUpdateRequest;
            return this;
        }

        /**
         * Build call for updateSharedWorkspace
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The workspace updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return updateSharedWorkspaceCall(workspaceName, workspaceUpdateRequest, _callback);
        }

        /**
         * Execute updateSharedWorkspace request
         * @return Workspace
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The workspace updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public Workspace execute() throws ApiException {
            ApiResponse<Workspace> localVarResp = updateSharedWorkspaceWithHttpInfo(workspaceName, workspaceUpdateRequest);
            return localVarResp.getData();
        }

        /**
         * Execute updateSharedWorkspace request with HTTP info returned
         * @return ApiResponse&lt;Workspace&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The workspace updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Workspace> executeWithHttpInfo() throws ApiException {
            return updateSharedWorkspaceWithHttpInfo(workspaceName, workspaceUpdateRequest);
        }

        /**
         * Execute updateSharedWorkspace request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The workspace updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Workspace> _callback) throws ApiException {
            return updateSharedWorkspaceAsync(workspaceName, workspaceUpdateRequest, _callback);
        }
    }

    /**
     * [EARLY ACCESS] UpdateSharedWorkspace: Update a shared workspace.
     * Update a shared workspace.
     * @param workspaceName The shared workspace name. (required)
     * @return APIupdateSharedWorkspaceRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The workspace updated. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIupdateSharedWorkspaceRequest updateSharedWorkspace(String workspaceName) {
        return new APIupdateSharedWorkspaceRequest(workspaceName);
    }
}
