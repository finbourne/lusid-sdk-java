/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.api;

import com.finbourne.lusid.ApiCallback;
import com.finbourne.lusid.ApiClient;
import com.finbourne.lusid.ApiException;
import com.finbourne.lusid.ApiResponse;
import com.finbourne.lusid.Configuration;
import com.finbourne.lusid.Pair;
import com.finbourne.lusid.ProgressRequestBody;
import com.finbourne.lusid.ProgressResponseBody;
import com.finbourne.lusid.extensions.ConfigurationOptions;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.finbourne.lusid.model.DeletedEntityResponse;
import com.finbourne.lusid.model.FeeTransactionTemplateSpecification;
import com.finbourne.lusid.model.FeeType;
import com.finbourne.lusid.model.FeeTypeRequest;
import com.finbourne.lusid.model.LusidProblemDetails;
import com.finbourne.lusid.model.LusidValidationProblemDetails;
import java.time.OffsetDateTime;
import com.finbourne.lusid.model.PagedResourceListOfFeeType;
import com.finbourne.lusid.model.UpdateFeeTypeRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class FeeTypesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public FeeTypesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public FeeTypesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createFeeTypeCall(String scope, FeeTypeRequest feeTypeRequest, final ApiCallback _callback) throws ApiException {
        return createFeeTypeCall(scope, feeTypeRequest,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call createFeeTypeCall(String scope, FeeTypeRequest feeTypeRequest, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = feeTypeRequest;

        // create path and map variables
        String localVarPath = "/api/feetypes/{scope}"
            .replace("{" + "scope" + "}", localVarApiClient.escapeString(scope.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createFeeTypeValidateBeforeCall(String scope, FeeTypeRequest feeTypeRequest, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling createFeeType(Async)");
        }

        // verify the required parameter 'feeTypeRequest' is set
        if (feeTypeRequest == null) {
            throw new ApiException("Missing the required parameter 'feeTypeRequest' when calling createFeeType(Async)");
        }

        return createFeeTypeCall(scope, feeTypeRequest, _callback, opts);

    }


    private ApiResponse<FeeType> createFeeTypeWithHttpInfo(String scope, FeeTypeRequest feeTypeRequest) throws ApiException {
        okhttp3.Call localVarCall = createFeeTypeValidateBeforeCall(scope, feeTypeRequest, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<FeeType>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<FeeType> createFeeTypeWithHttpInfo(String scope, FeeTypeRequest feeTypeRequest, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = createFeeTypeValidateBeforeCall(scope, feeTypeRequest, null, opts);
        Type localVarReturnType = new TypeToken<FeeType>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createFeeTypeAsync(String scope, FeeTypeRequest feeTypeRequest, final ApiCallback<FeeType> _callback) throws ApiException {

        okhttp3.Call localVarCall = createFeeTypeValidateBeforeCall(scope, feeTypeRequest, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<FeeType>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call createFeeTypeAsync(String scope, FeeTypeRequest feeTypeRequest, final ApiCallback<FeeType> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = createFeeTypeValidateBeforeCall(scope, feeTypeRequest, _callback, opts);
        Type localVarReturnType = new TypeToken<FeeType>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIcreateFeeTypeRequest {
        private final String scope;
        private final FeeTypeRequest feeTypeRequest;

        private APIcreateFeeTypeRequest(String scope, FeeTypeRequest feeTypeRequest) {
            this.scope = scope;
            this.feeTypeRequest = feeTypeRequest;
        }

        /**
         * Build call for createFeeType
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Create a FeeType. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return createFeeTypeCall(scope, feeTypeRequest, _callback);
        }

        /**
         * Execute createFeeType request
         * @return FeeType
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Create a FeeType. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public FeeType execute() throws ApiException {
            ApiResponse<FeeType> localVarResp = createFeeTypeWithHttpInfo(scope, feeTypeRequest);
            return localVarResp.getData();
        }

        /**
         * Execute createFeeType request. Use any specified configuration options to override any other configuration for this request only.
         * @return FeeType
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Create a FeeType. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public FeeType execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<FeeType> localVarResp = createFeeTypeWithHttpInfo(scope, feeTypeRequest, opts);
            return localVarResp.getData();
        }

        /**
         * Execute createFeeType request with HTTP info returned
         * @return ApiResponse&lt;FeeType&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Create a FeeType. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<FeeType> executeWithHttpInfo() throws ApiException {
            return createFeeTypeWithHttpInfo(scope, feeTypeRequest);
        }

        /**
         * Execute createFeeType request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;FeeType&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Create a FeeType. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<FeeType> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return createFeeTypeWithHttpInfo(scope, feeTypeRequest, opts);
        }

        /**
         * Execute createFeeType request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Create a FeeType. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<FeeType> _callback) throws ApiException {
            return createFeeTypeAsync(scope, feeTypeRequest, _callback);
        }

        /**
         * Execute createFeeType request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Create a FeeType. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<FeeType> _callback, ConfigurationOptions opts) throws ApiException {
            return createFeeTypeAsync(scope, feeTypeRequest, _callback, opts);
        }
    }

    /**
     * [EXPERIMENTAL] CreateFeeType: Create a FeeType.
     * Create a FeeType that contains templates used to create fee transactions.
     * @param scope The scope of the FeeType. (required)
     * @param feeTypeRequest The contents of the FeeType. (required)
     * @return APIcreateFeeTypeRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Create a FeeType. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIcreateFeeTypeRequest createFeeType(String scope, FeeTypeRequest feeTypeRequest) {
        return new APIcreateFeeTypeRequest(scope, feeTypeRequest);
    }
    private okhttp3.Call deleteFeeTypeCall(String scope, String code, final ApiCallback _callback) throws ApiException {
        return deleteFeeTypeCall(scope, code,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call deleteFeeTypeCall(String scope, String code, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/feetypes/{scope}/{code}"
            .replace("{" + "scope" + "}", localVarApiClient.escapeString(scope.toString()))
            .replace("{" + "code" + "}", localVarApiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteFeeTypeValidateBeforeCall(String scope, String code, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling deleteFeeType(Async)");
        }

        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling deleteFeeType(Async)");
        }

        return deleteFeeTypeCall(scope, code, _callback, opts);

    }


    private ApiResponse<DeletedEntityResponse> deleteFeeTypeWithHttpInfo(String scope, String code) throws ApiException {
        okhttp3.Call localVarCall = deleteFeeTypeValidateBeforeCall(scope, code, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<DeletedEntityResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<DeletedEntityResponse> deleteFeeTypeWithHttpInfo(String scope, String code, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = deleteFeeTypeValidateBeforeCall(scope, code, null, opts);
        Type localVarReturnType = new TypeToken<DeletedEntityResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteFeeTypeAsync(String scope, String code, final ApiCallback<DeletedEntityResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteFeeTypeValidateBeforeCall(scope, code, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<DeletedEntityResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call deleteFeeTypeAsync(String scope, String code, final ApiCallback<DeletedEntityResponse> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = deleteFeeTypeValidateBeforeCall(scope, code, _callback, opts);
        Type localVarReturnType = new TypeToken<DeletedEntityResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIdeleteFeeTypeRequest {
        private final String scope;
        private final String code;

        private APIdeleteFeeTypeRequest(String scope, String code) {
            this.scope = scope;
            this.code = code;
        }

        /**
         * Build call for deleteFeeType
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Delete a FeeType. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteFeeTypeCall(scope, code, _callback);
        }

        /**
         * Execute deleteFeeType request
         * @return DeletedEntityResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Delete a FeeType. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public DeletedEntityResponse execute() throws ApiException {
            ApiResponse<DeletedEntityResponse> localVarResp = deleteFeeTypeWithHttpInfo(scope, code);
            return localVarResp.getData();
        }

        /**
         * Execute deleteFeeType request. Use any specified configuration options to override any other configuration for this request only.
         * @return DeletedEntityResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Delete a FeeType. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public DeletedEntityResponse execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<DeletedEntityResponse> localVarResp = deleteFeeTypeWithHttpInfo(scope, code, opts);
            return localVarResp.getData();
        }

        /**
         * Execute deleteFeeType request with HTTP info returned
         * @return ApiResponse&lt;DeletedEntityResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Delete a FeeType. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DeletedEntityResponse> executeWithHttpInfo() throws ApiException {
            return deleteFeeTypeWithHttpInfo(scope, code);
        }

        /**
         * Execute deleteFeeType request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;DeletedEntityResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Delete a FeeType. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DeletedEntityResponse> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return deleteFeeTypeWithHttpInfo(scope, code, opts);
        }

        /**
         * Execute deleteFeeType request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Delete a FeeType. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DeletedEntityResponse> _callback) throws ApiException {
            return deleteFeeTypeAsync(scope, code, _callback);
        }

        /**
         * Execute deleteFeeType request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Delete a FeeType. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DeletedEntityResponse> _callback, ConfigurationOptions opts) throws ApiException {
            return deleteFeeTypeAsync(scope, code, _callback, opts);
        }
    }

    /**
     * [EXPERIMENTAL] DeleteFeeType: Delete a FeeType.
     * Delete a FeeType that contains templates used to create fee transactions.
     * @param scope The scope of the FeeType. (required)
     * @param code The code of the fee type (required)
     * @return APIdeleteFeeTypeRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete a FeeType. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIdeleteFeeTypeRequest deleteFeeType(String scope, String code) {
        return new APIdeleteFeeTypeRequest(scope, code);
    }
    private okhttp3.Call getFeeTemplateSpecificationsCall(final ApiCallback _callback) throws ApiException {
        return getFeeTemplateSpecificationsCall( _callback, new ConfigurationOptions());
    }

    private okhttp3.Call getFeeTemplateSpecificationsCall(final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/feetypes/feetransactiontemplatespecification";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFeeTemplateSpecificationsValidateBeforeCall(final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        return getFeeTemplateSpecificationsCall(_callback, opts);

    }


    private ApiResponse<FeeTransactionTemplateSpecification> getFeeTemplateSpecificationsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getFeeTemplateSpecificationsValidateBeforeCall(null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<FeeTransactionTemplateSpecification>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<FeeTransactionTemplateSpecification> getFeeTemplateSpecificationsWithHttpInfo(ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = getFeeTemplateSpecificationsValidateBeforeCall(null, opts);
        Type localVarReturnType = new TypeToken<FeeTransactionTemplateSpecification>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getFeeTemplateSpecificationsAsync(final ApiCallback<FeeTransactionTemplateSpecification> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFeeTemplateSpecificationsValidateBeforeCall(_callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<FeeTransactionTemplateSpecification>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call getFeeTemplateSpecificationsAsync(final ApiCallback<FeeTransactionTemplateSpecification> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = getFeeTemplateSpecificationsValidateBeforeCall(_callback, opts);
        Type localVarReturnType = new TypeToken<FeeTransactionTemplateSpecification>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetFeeTemplateSpecificationsRequest {

        private APIgetFeeTemplateSpecificationsRequest() {
        }

        /**
         * Build call for getFeeTemplateSpecifications
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Fee template specifications used with a FeeType. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getFeeTemplateSpecificationsCall(_callback);
        }

        /**
         * Execute getFeeTemplateSpecifications request
         * @return FeeTransactionTemplateSpecification
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Fee template specifications used with a FeeType. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public FeeTransactionTemplateSpecification execute() throws ApiException {
            ApiResponse<FeeTransactionTemplateSpecification> localVarResp = getFeeTemplateSpecificationsWithHttpInfo();
            return localVarResp.getData();
        }

        /**
         * Execute getFeeTemplateSpecifications request. Use any specified configuration options to override any other configuration for this request only.
         * @return FeeTransactionTemplateSpecification
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Fee template specifications used with a FeeType. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public FeeTransactionTemplateSpecification execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<FeeTransactionTemplateSpecification> localVarResp = getFeeTemplateSpecificationsWithHttpInfo(opts);
            return localVarResp.getData();
        }

        /**
         * Execute getFeeTemplateSpecifications request with HTTP info returned
         * @return ApiResponse&lt;FeeTransactionTemplateSpecification&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Fee template specifications used with a FeeType. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<FeeTransactionTemplateSpecification> executeWithHttpInfo() throws ApiException {
            return getFeeTemplateSpecificationsWithHttpInfo();
        }

        /**
         * Execute getFeeTemplateSpecifications request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;FeeTransactionTemplateSpecification&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Fee template specifications used with a FeeType. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<FeeTransactionTemplateSpecification> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return getFeeTemplateSpecificationsWithHttpInfo(opts);
        }

        /**
         * Execute getFeeTemplateSpecifications request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Fee template specifications used with a FeeType. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<FeeTransactionTemplateSpecification> _callback) throws ApiException {
            return getFeeTemplateSpecificationsAsync(_callback);
        }

        /**
         * Execute getFeeTemplateSpecifications request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Fee template specifications used with a FeeType. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<FeeTransactionTemplateSpecification> _callback, ConfigurationOptions opts) throws ApiException {
            return getFeeTemplateSpecificationsAsync(_callback, opts);
        }
    }

    /**
     * [EXPERIMENTAL] GetFeeTemplateSpecifications: Get FeeTemplateSpecifications used in the FeeType.
     * Get FeeTemplateSpecifications used in the FeeType.
     * @return APIgetFeeTemplateSpecificationsRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Fee template specifications used with a FeeType. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIgetFeeTemplateSpecificationsRequest getFeeTemplateSpecifications() {
        return new APIgetFeeTemplateSpecificationsRequest();
    }
    private okhttp3.Call getFeeTypeCall(String scope, String code, OffsetDateTime asAt, final ApiCallback _callback) throws ApiException {
        return getFeeTypeCall(scope, code, asAt,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call getFeeTypeCall(String scope, String code, OffsetDateTime asAt, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/feetypes/{scope}/{code}"
            .replace("{" + "scope" + "}", localVarApiClient.escapeString(scope.toString()))
            .replace("{" + "code" + "}", localVarApiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (asAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asAt", asAt));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFeeTypeValidateBeforeCall(String scope, String code, OffsetDateTime asAt, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling getFeeType(Async)");
        }

        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling getFeeType(Async)");
        }

        return getFeeTypeCall(scope, code, asAt, _callback, opts);

    }


    private ApiResponse<FeeType> getFeeTypeWithHttpInfo(String scope, String code, OffsetDateTime asAt) throws ApiException {
        okhttp3.Call localVarCall = getFeeTypeValidateBeforeCall(scope, code, asAt, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<FeeType>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<FeeType> getFeeTypeWithHttpInfo(String scope, String code, OffsetDateTime asAt, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = getFeeTypeValidateBeforeCall(scope, code, asAt, null, opts);
        Type localVarReturnType = new TypeToken<FeeType>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getFeeTypeAsync(String scope, String code, OffsetDateTime asAt, final ApiCallback<FeeType> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFeeTypeValidateBeforeCall(scope, code, asAt, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<FeeType>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call getFeeTypeAsync(String scope, String code, OffsetDateTime asAt, final ApiCallback<FeeType> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = getFeeTypeValidateBeforeCall(scope, code, asAt, _callback, opts);
        Type localVarReturnType = new TypeToken<FeeType>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetFeeTypeRequest {
        private final String scope;
        private final String code;
        private OffsetDateTime asAt;

        private APIgetFeeTypeRequest(String scope, String code) {
            this.scope = scope;
            this.code = code;
        }

        /**
         * Set asAt
         * @param asAt The asAt datetime at which to retrieve the FeeType. Defaults to returning the latest version of the FeeType, if not specified. (optional)
         * @return APIgetFeeTypeRequest
         */
        public APIgetFeeTypeRequest asAt(OffsetDateTime asAt) {
            this.asAt = asAt;
            return this;
        }

        /**
         * Build call for getFeeType
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested FeeType. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getFeeTypeCall(scope, code, asAt, _callback);
        }

        /**
         * Execute getFeeType request
         * @return FeeType
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested FeeType. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public FeeType execute() throws ApiException {
            ApiResponse<FeeType> localVarResp = getFeeTypeWithHttpInfo(scope, code, asAt);
            return localVarResp.getData();
        }

        /**
         * Execute getFeeType request. Use any specified configuration options to override any other configuration for this request only.
         * @return FeeType
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested FeeType. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public FeeType execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<FeeType> localVarResp = getFeeTypeWithHttpInfo(scope, code, asAt, opts);
            return localVarResp.getData();
        }

        /**
         * Execute getFeeType request with HTTP info returned
         * @return ApiResponse&lt;FeeType&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested FeeType. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<FeeType> executeWithHttpInfo() throws ApiException {
            return getFeeTypeWithHttpInfo(scope, code, asAt);
        }

        /**
         * Execute getFeeType request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;FeeType&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested FeeType. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<FeeType> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return getFeeTypeWithHttpInfo(scope, code, asAt, opts);
        }

        /**
         * Execute getFeeType request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested FeeType. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<FeeType> _callback) throws ApiException {
            return getFeeTypeAsync(scope, code, asAt, _callback);
        }

        /**
         * Execute getFeeType request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested FeeType. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<FeeType> _callback, ConfigurationOptions opts) throws ApiException {
            return getFeeTypeAsync(scope, code, asAt, _callback, opts);
        }
    }

    /**
     * [EXPERIMENTAL] GetFeeType: Get a FeeType
     * Get a FeeType that contains templates used to create fee transactions.
     * @param scope The scope of the FeeType (required)
     * @param code The code of the FeeType (required)
     * @return APIgetFeeTypeRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested FeeType. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIgetFeeTypeRequest getFeeType(String scope, String code) {
        return new APIgetFeeTypeRequest(scope, code);
    }
    private okhttp3.Call listFeeTypesCall(OffsetDateTime asAt, String page, Integer limit, String filter, List<String> sortBy, final ApiCallback _callback) throws ApiException {
        return listFeeTypesCall(asAt, page, limit, filter, sortBy,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call listFeeTypesCall(OffsetDateTime asAt, String page, Integer limit, String filter, List<String> sortBy, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/feetypes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (asAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asAt", asAt));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (sortBy != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "sortBy", sortBy));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listFeeTypesValidateBeforeCall(OffsetDateTime asAt, String page, Integer limit, String filter, List<String> sortBy, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        return listFeeTypesCall(asAt, page, limit, filter, sortBy, _callback, opts);

    }


    private ApiResponse<PagedResourceListOfFeeType> listFeeTypesWithHttpInfo(OffsetDateTime asAt, String page, Integer limit, String filter, List<String> sortBy) throws ApiException {
        okhttp3.Call localVarCall = listFeeTypesValidateBeforeCall(asAt, page, limit, filter, sortBy, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<PagedResourceListOfFeeType>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<PagedResourceListOfFeeType> listFeeTypesWithHttpInfo(OffsetDateTime asAt, String page, Integer limit, String filter, List<String> sortBy, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = listFeeTypesValidateBeforeCall(asAt, page, limit, filter, sortBy, null, opts);
        Type localVarReturnType = new TypeToken<PagedResourceListOfFeeType>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listFeeTypesAsync(OffsetDateTime asAt, String page, Integer limit, String filter, List<String> sortBy, final ApiCallback<PagedResourceListOfFeeType> _callback) throws ApiException {

        okhttp3.Call localVarCall = listFeeTypesValidateBeforeCall(asAt, page, limit, filter, sortBy, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<PagedResourceListOfFeeType>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call listFeeTypesAsync(OffsetDateTime asAt, String page, Integer limit, String filter, List<String> sortBy, final ApiCallback<PagedResourceListOfFeeType> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = listFeeTypesValidateBeforeCall(asAt, page, limit, filter, sortBy, _callback, opts);
        Type localVarReturnType = new TypeToken<PagedResourceListOfFeeType>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIlistFeeTypesRequest {
        private OffsetDateTime asAt;
        private String page;
        private Integer limit;
        private String filter;
        private List<String> sortBy;

        private APIlistFeeTypesRequest() {
        }

        /**
         * Set asAt
         * @param asAt The asAt datetime at which to list the FeeTypes. Defaults to returning the latest version of each FeeType if not specified. (optional)
         * @return APIlistFeeTypesRequest
         */
        public APIlistFeeTypesRequest asAt(OffsetDateTime asAt) {
            this.asAt = asAt;
            return this;
        }

        /**
         * Set page
         * @param page The pagination token to use to continue listing FeeTypes; this   value is returned from the previous call. If a pagination token is provided, the filter, effectiveAt   and asAt fields must not have changed since the original request. (optional)
         * @return APIlistFeeTypesRequest
         */
        public APIlistFeeTypesRequest page(String page) {
            this.page = page;
            return this;
        }

        /**
         * Set limit
         * @param limit When paginating, limit the results to this number. Defaults to 100 if not specified. (optional)
         * @return APIlistFeeTypesRequest
         */
        public APIlistFeeTypesRequest limit(Integer limit) {
            this.limit = limit;
            return this;
        }

        /**
         * Set filter
         * @param filter Expression to filter the results.   For example, to filter on the Code of the FeeType type, specify \&quot;id.Code eq &#39;FeeType1&#39;\&quot;. For more information about filtering   results, see https://support.lusid.com/knowledgebase/article/KA-01914. (optional)
         * @return APIlistFeeTypesRequest
         */
        public APIlistFeeTypesRequest filter(String filter) {
            this.filter = filter;
            return this;
        }

        /**
         * Set sortBy
         * @param sortBy A list of field names or properties to sort by, each suffixed by \&quot; ASC\&quot; or \&quot; DESC\&quot; (optional)
         * @return APIlistFeeTypesRequest
         */
        public APIlistFeeTypesRequest sortBy(List<String> sortBy) {
            this.sortBy = sortBy;
            return this;
        }

        /**
         * Build call for listFeeTypes
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested Fee Types </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listFeeTypesCall(asAt, page, limit, filter, sortBy, _callback);
        }

        /**
         * Execute listFeeTypes request
         * @return PagedResourceListOfFeeType
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested Fee Types </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public PagedResourceListOfFeeType execute() throws ApiException {
            ApiResponse<PagedResourceListOfFeeType> localVarResp = listFeeTypesWithHttpInfo(asAt, page, limit, filter, sortBy);
            return localVarResp.getData();
        }

        /**
         * Execute listFeeTypes request. Use any specified configuration options to override any other configuration for this request only.
         * @return PagedResourceListOfFeeType
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested Fee Types </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public PagedResourceListOfFeeType execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<PagedResourceListOfFeeType> localVarResp = listFeeTypesWithHttpInfo(asAt, page, limit, filter, sortBy, opts);
            return localVarResp.getData();
        }

        /**
         * Execute listFeeTypes request with HTTP info returned
         * @return ApiResponse&lt;PagedResourceListOfFeeType&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested Fee Types </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PagedResourceListOfFeeType> executeWithHttpInfo() throws ApiException {
            return listFeeTypesWithHttpInfo(asAt, page, limit, filter, sortBy);
        }

        /**
         * Execute listFeeTypes request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;PagedResourceListOfFeeType&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested Fee Types </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PagedResourceListOfFeeType> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return listFeeTypesWithHttpInfo(asAt, page, limit, filter, sortBy, opts);
        }

        /**
         * Execute listFeeTypes request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested Fee Types </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PagedResourceListOfFeeType> _callback) throws ApiException {
            return listFeeTypesAsync(asAt, page, limit, filter, sortBy, _callback);
        }

        /**
         * Execute listFeeTypes request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested Fee Types </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PagedResourceListOfFeeType> _callback, ConfigurationOptions opts) throws ApiException {
            return listFeeTypesAsync(asAt, page, limit, filter, sortBy, _callback, opts);
        }
    }

    /**
     * [EXPERIMENTAL] ListFeeTypes: List FeeTypes
     * List FeeTypes that contain templates used to create fee transactions.
     * @return APIlistFeeTypesRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested Fee Types </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIlistFeeTypesRequest listFeeTypes() {
        return new APIlistFeeTypesRequest();
    }
    private okhttp3.Call updateFeeTypeCall(String scope, String code, UpdateFeeTypeRequest updateFeeTypeRequest, final ApiCallback _callback) throws ApiException {
        return updateFeeTypeCall(scope, code, updateFeeTypeRequest,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call updateFeeTypeCall(String scope, String code, UpdateFeeTypeRequest updateFeeTypeRequest, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateFeeTypeRequest;

        // create path and map variables
        String localVarPath = "/api/feetypes/{scope}/{code}"
            .replace("{" + "scope" + "}", localVarApiClient.escapeString(scope.toString()))
            .replace("{" + "code" + "}", localVarApiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateFeeTypeValidateBeforeCall(String scope, String code, UpdateFeeTypeRequest updateFeeTypeRequest, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling updateFeeType(Async)");
        }

        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling updateFeeType(Async)");
        }

        // verify the required parameter 'updateFeeTypeRequest' is set
        if (updateFeeTypeRequest == null) {
            throw new ApiException("Missing the required parameter 'updateFeeTypeRequest' when calling updateFeeType(Async)");
        }

        return updateFeeTypeCall(scope, code, updateFeeTypeRequest, _callback, opts);

    }


    private ApiResponse<FeeType> updateFeeTypeWithHttpInfo(String scope, String code, UpdateFeeTypeRequest updateFeeTypeRequest) throws ApiException {
        okhttp3.Call localVarCall = updateFeeTypeValidateBeforeCall(scope, code, updateFeeTypeRequest, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<FeeType>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<FeeType> updateFeeTypeWithHttpInfo(String scope, String code, UpdateFeeTypeRequest updateFeeTypeRequest, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = updateFeeTypeValidateBeforeCall(scope, code, updateFeeTypeRequest, null, opts);
        Type localVarReturnType = new TypeToken<FeeType>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateFeeTypeAsync(String scope, String code, UpdateFeeTypeRequest updateFeeTypeRequest, final ApiCallback<FeeType> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateFeeTypeValidateBeforeCall(scope, code, updateFeeTypeRequest, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<FeeType>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call updateFeeTypeAsync(String scope, String code, UpdateFeeTypeRequest updateFeeTypeRequest, final ApiCallback<FeeType> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = updateFeeTypeValidateBeforeCall(scope, code, updateFeeTypeRequest, _callback, opts);
        Type localVarReturnType = new TypeToken<FeeType>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIupdateFeeTypeRequest {
        private final String scope;
        private final String code;
        private final UpdateFeeTypeRequest updateFeeTypeRequest;

        private APIupdateFeeTypeRequest(String scope, String code, UpdateFeeTypeRequest updateFeeTypeRequest) {
            this.scope = scope;
            this.code = code;
            this.updateFeeTypeRequest = updateFeeTypeRequest;
        }

        /**
         * Build call for updateFeeType
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Update a FeeType. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return updateFeeTypeCall(scope, code, updateFeeTypeRequest, _callback);
        }

        /**
         * Execute updateFeeType request
         * @return FeeType
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Update a FeeType. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public FeeType execute() throws ApiException {
            ApiResponse<FeeType> localVarResp = updateFeeTypeWithHttpInfo(scope, code, updateFeeTypeRequest);
            return localVarResp.getData();
        }

        /**
         * Execute updateFeeType request. Use any specified configuration options to override any other configuration for this request only.
         * @return FeeType
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Update a FeeType. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public FeeType execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<FeeType> localVarResp = updateFeeTypeWithHttpInfo(scope, code, updateFeeTypeRequest, opts);
            return localVarResp.getData();
        }

        /**
         * Execute updateFeeType request with HTTP info returned
         * @return ApiResponse&lt;FeeType&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Update a FeeType. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<FeeType> executeWithHttpInfo() throws ApiException {
            return updateFeeTypeWithHttpInfo(scope, code, updateFeeTypeRequest);
        }

        /**
         * Execute updateFeeType request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;FeeType&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Update a FeeType. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<FeeType> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return updateFeeTypeWithHttpInfo(scope, code, updateFeeTypeRequest, opts);
        }

        /**
         * Execute updateFeeType request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Update a FeeType. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<FeeType> _callback) throws ApiException {
            return updateFeeTypeAsync(scope, code, updateFeeTypeRequest, _callback);
        }

        /**
         * Execute updateFeeType request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Update a FeeType. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<FeeType> _callback, ConfigurationOptions opts) throws ApiException {
            return updateFeeTypeAsync(scope, code, updateFeeTypeRequest, _callback, opts);
        }
    }

    /**
     * [EXPERIMENTAL] UpdateFeeType: Update a FeeType.
     * Update a FeeType that contains templates used to create fee transactions.
     * @param scope The scope of the FeeType. (required)
     * @param code The code of the fee type (required)
     * @param updateFeeTypeRequest The contents of the FeeType. (required)
     * @return APIupdateFeeTypeRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update a FeeType. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIupdateFeeTypeRequest updateFeeType(String scope, String code, UpdateFeeTypeRequest updateFeeTypeRequest) {
        return new APIupdateFeeTypeRequest(scope, code, updateFeeTypeRequest);
    }
}
