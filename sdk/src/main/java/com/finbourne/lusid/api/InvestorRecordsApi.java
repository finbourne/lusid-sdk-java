/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.api;

import com.finbourne.lusid.ApiCallback;
import com.finbourne.lusid.ApiClient;
import com.finbourne.lusid.ApiException;
import com.finbourne.lusid.ApiResponse;
import com.finbourne.lusid.Configuration;
import com.finbourne.lusid.Pair;
import com.finbourne.lusid.ProgressRequestBody;
import com.finbourne.lusid.ProgressResponseBody;
import com.finbourne.lusid.extensions.ConfigurationOptions;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.finbourne.lusid.model.DeletedEntityResponse;
import com.finbourne.lusid.model.InvestorRecord;
import com.finbourne.lusid.model.LusidProblemDetails;
import com.finbourne.lusid.model.LusidValidationProblemDetails;
import java.time.OffsetDateTime;
import com.finbourne.lusid.model.ResourceListOfInvestorRecord;
import com.finbourne.lusid.model.UpsertInvestorRecordRequest;
import com.finbourne.lusid.model.UpsertInvestorRecordsResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class InvestorRecordsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public InvestorRecordsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public InvestorRecordsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call deleteInvestorRecordCall(String identifierType, String identifierValue, String scope, String identifierScope, final ApiCallback _callback) throws ApiException {
        return deleteInvestorRecordCall(identifierType, identifierValue, scope, identifierScope,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call deleteInvestorRecordCall(String identifierType, String identifierValue, String scope, String identifierScope, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/investorrecords/{identifierType}/{identifierValue}"
            .replace("{" + "identifierType" + "}", localVarApiClient.escapeString(identifierType.toString()))
            .replace("{" + "identifierValue" + "}", localVarApiClient.escapeString(identifierValue.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (scope != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scope", scope));
        }

        if (identifierScope != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("identifierScope", identifierScope));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteInvestorRecordValidateBeforeCall(String identifierType, String identifierValue, String scope, String identifierScope, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'identifierType' is set
        if (identifierType == null) {
            throw new ApiException("Missing the required parameter 'identifierType' when calling deleteInvestorRecord(Async)");
        }

        // verify the required parameter 'identifierValue' is set
        if (identifierValue == null) {
            throw new ApiException("Missing the required parameter 'identifierValue' when calling deleteInvestorRecord(Async)");
        }

        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling deleteInvestorRecord(Async)");
        }

        // verify the required parameter 'identifierScope' is set
        if (identifierScope == null) {
            throw new ApiException("Missing the required parameter 'identifierScope' when calling deleteInvestorRecord(Async)");
        }

        return deleteInvestorRecordCall(identifierType, identifierValue, scope, identifierScope, _callback, opts);

    }


    private ApiResponse<DeletedEntityResponse> deleteInvestorRecordWithHttpInfo(String identifierType, String identifierValue, String scope, String identifierScope) throws ApiException {
        okhttp3.Call localVarCall = deleteInvestorRecordValidateBeforeCall(identifierType, identifierValue, scope, identifierScope, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<DeletedEntityResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<DeletedEntityResponse> deleteInvestorRecordWithHttpInfo(String identifierType, String identifierValue, String scope, String identifierScope, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = deleteInvestorRecordValidateBeforeCall(identifierType, identifierValue, scope, identifierScope, null, opts);
        Type localVarReturnType = new TypeToken<DeletedEntityResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteInvestorRecordAsync(String identifierType, String identifierValue, String scope, String identifierScope, final ApiCallback<DeletedEntityResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteInvestorRecordValidateBeforeCall(identifierType, identifierValue, scope, identifierScope, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<DeletedEntityResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call deleteInvestorRecordAsync(String identifierType, String identifierValue, String scope, String identifierScope, final ApiCallback<DeletedEntityResponse> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = deleteInvestorRecordValidateBeforeCall(identifierType, identifierValue, scope, identifierScope, _callback, opts);
        Type localVarReturnType = new TypeToken<DeletedEntityResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIdeleteInvestorRecordRequest {
        private final String identifierType;
        private final String identifierValue;
        private final String scope;
        private final String identifierScope;

        private APIdeleteInvestorRecordRequest(String identifierType, String identifierValue, String scope, String identifierScope) {
            this.identifierType = identifierType;
            this.identifierValue = identifierValue;
            this.scope = scope;
            this.identifierScope = identifierScope;
        }

        /**
         * Build call for deleteInvestorRecord
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The response from deleting investor record. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteInvestorRecordCall(identifierType, identifierValue, scope, identifierScope, _callback);
        }

        /**
         * Execute deleteInvestorRecord request
         * @return DeletedEntityResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The response from deleting investor record. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public DeletedEntityResponse execute() throws ApiException {
            ApiResponse<DeletedEntityResponse> localVarResp = deleteInvestorRecordWithHttpInfo(identifierType, identifierValue, scope, identifierScope);
            return localVarResp.getData();
        }

        /**
         * Execute deleteInvestorRecord request. Use any specified configuration options to override any other configuration for this request only.
         * @return DeletedEntityResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The response from deleting investor record. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public DeletedEntityResponse execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<DeletedEntityResponse> localVarResp = deleteInvestorRecordWithHttpInfo(identifierType, identifierValue, scope, identifierScope, opts);
            return localVarResp.getData();
        }

        /**
         * Execute deleteInvestorRecord request with HTTP info returned
         * @return ApiResponse&lt;DeletedEntityResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The response from deleting investor record. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DeletedEntityResponse> executeWithHttpInfo() throws ApiException {
            return deleteInvestorRecordWithHttpInfo(identifierType, identifierValue, scope, identifierScope);
        }

        /**
         * Execute deleteInvestorRecord request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;DeletedEntityResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The response from deleting investor record. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DeletedEntityResponse> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return deleteInvestorRecordWithHttpInfo(identifierType, identifierValue, scope, identifierScope, opts);
        }

        /**
         * Execute deleteInvestorRecord request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The response from deleting investor record. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DeletedEntityResponse> _callback) throws ApiException {
            return deleteInvestorRecordAsync(identifierType, identifierValue, scope, identifierScope, _callback);
        }

        /**
         * Execute deleteInvestorRecord request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The response from deleting investor record. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DeletedEntityResponse> _callback, ConfigurationOptions opts) throws ApiException {
            return deleteInvestorRecordAsync(identifierType, identifierValue, scope, identifierScope, _callback, opts);
        }
    }

    /**
     * [EARLY ACCESS] DeleteInvestorRecord: Delete Investor Record
     * Delete an investor record. Deletion will be valid from the investor record&#39;s creation datetime.  This means that the investor record will no longer exist at any effective datetime from the asAt datetime of deletion.
     * @param identifierType Code of the investor record identifier type. (required)
     * @param identifierValue Code of the investor record under specified identifier type&#39;s scope and code. (required)
     * @param scope The scope of the investor record entity. (required)
     * @param identifierScope Scope of the investor record identifier type. (required)
     * @return APIdeleteInvestorRecordRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The response from deleting investor record. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIdeleteInvestorRecordRequest deleteInvestorRecord(String identifierType, String identifierValue, String scope, String identifierScope) {
        return new APIdeleteInvestorRecordRequest(identifierType, identifierValue, scope, identifierScope);
    }
    private okhttp3.Call getInvestorRecordCall(String identifierType, String identifierValue, String scope, String identifierScope, List<String> propertyKeys, String effectiveAt, OffsetDateTime asAt, List<String> relationshipDefinitionIds, final ApiCallback _callback) throws ApiException {
        return getInvestorRecordCall(identifierType, identifierValue, scope, identifierScope, propertyKeys, effectiveAt, asAt, relationshipDefinitionIds,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call getInvestorRecordCall(String identifierType, String identifierValue, String scope, String identifierScope, List<String> propertyKeys, String effectiveAt, OffsetDateTime asAt, List<String> relationshipDefinitionIds, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/investorrecords/{identifierType}/{identifierValue}"
            .replace("{" + "identifierType" + "}", localVarApiClient.escapeString(identifierType.toString()))
            .replace("{" + "identifierValue" + "}", localVarApiClient.escapeString(identifierValue.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (scope != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scope", scope));
        }

        if (identifierScope != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("identifierScope", identifierScope));
        }

        if (propertyKeys != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "propertyKeys", propertyKeys));
        }

        if (effectiveAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("effectiveAt", effectiveAt));
        }

        if (asAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asAt", asAt));
        }

        if (relationshipDefinitionIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "relationshipDefinitionIds", relationshipDefinitionIds));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getInvestorRecordValidateBeforeCall(String identifierType, String identifierValue, String scope, String identifierScope, List<String> propertyKeys, String effectiveAt, OffsetDateTime asAt, List<String> relationshipDefinitionIds, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'identifierType' is set
        if (identifierType == null) {
            throw new ApiException("Missing the required parameter 'identifierType' when calling getInvestorRecord(Async)");
        }

        // verify the required parameter 'identifierValue' is set
        if (identifierValue == null) {
            throw new ApiException("Missing the required parameter 'identifierValue' when calling getInvestorRecord(Async)");
        }

        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling getInvestorRecord(Async)");
        }

        // verify the required parameter 'identifierScope' is set
        if (identifierScope == null) {
            throw new ApiException("Missing the required parameter 'identifierScope' when calling getInvestorRecord(Async)");
        }

        return getInvestorRecordCall(identifierType, identifierValue, scope, identifierScope, propertyKeys, effectiveAt, asAt, relationshipDefinitionIds, _callback, opts);

    }


    private ApiResponse<InvestorRecord> getInvestorRecordWithHttpInfo(String identifierType, String identifierValue, String scope, String identifierScope, List<String> propertyKeys, String effectiveAt, OffsetDateTime asAt, List<String> relationshipDefinitionIds) throws ApiException {
        okhttp3.Call localVarCall = getInvestorRecordValidateBeforeCall(identifierType, identifierValue, scope, identifierScope, propertyKeys, effectiveAt, asAt, relationshipDefinitionIds, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<InvestorRecord>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<InvestorRecord> getInvestorRecordWithHttpInfo(String identifierType, String identifierValue, String scope, String identifierScope, List<String> propertyKeys, String effectiveAt, OffsetDateTime asAt, List<String> relationshipDefinitionIds, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = getInvestorRecordValidateBeforeCall(identifierType, identifierValue, scope, identifierScope, propertyKeys, effectiveAt, asAt, relationshipDefinitionIds, null, opts);
        Type localVarReturnType = new TypeToken<InvestorRecord>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getInvestorRecordAsync(String identifierType, String identifierValue, String scope, String identifierScope, List<String> propertyKeys, String effectiveAt, OffsetDateTime asAt, List<String> relationshipDefinitionIds, final ApiCallback<InvestorRecord> _callback) throws ApiException {

        okhttp3.Call localVarCall = getInvestorRecordValidateBeforeCall(identifierType, identifierValue, scope, identifierScope, propertyKeys, effectiveAt, asAt, relationshipDefinitionIds, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<InvestorRecord>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call getInvestorRecordAsync(String identifierType, String identifierValue, String scope, String identifierScope, List<String> propertyKeys, String effectiveAt, OffsetDateTime asAt, List<String> relationshipDefinitionIds, final ApiCallback<InvestorRecord> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = getInvestorRecordValidateBeforeCall(identifierType, identifierValue, scope, identifierScope, propertyKeys, effectiveAt, asAt, relationshipDefinitionIds, _callback, opts);
        Type localVarReturnType = new TypeToken<InvestorRecord>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetInvestorRecordRequest {
        private final String identifierType;
        private final String identifierValue;
        private final String scope;
        private final String identifierScope;
        private List<String> propertyKeys;
        private String effectiveAt;
        private OffsetDateTime asAt;
        private List<String> relationshipDefinitionIds;

        private APIgetInvestorRecordRequest(String identifierType, String identifierValue, String scope, String identifierScope) {
            this.identifierType = identifierType;
            this.identifierValue = identifierValue;
            this.scope = scope;
            this.identifierScope = identifierScope;
        }

        /**
         * Set propertyKeys
         * @param propertyKeys A list of property keys or identifier types (as property keys) from the \&quot;InvestorRecord\&quot; domain   to include for found investor record, or from any domain that supports relationships to decorate onto related entities.   These take the format {domain}/{scope}/{code} e.g. \&quot;InvestorRecord/ContactDetails/Address\&quot;. (optional)
         * @return APIgetInvestorRecordRequest
         */
        public APIgetInvestorRecordRequest propertyKeys(List<String> propertyKeys) {
            this.propertyKeys = propertyKeys;
            return this;
        }

        /**
         * Set effectiveAt
         * @param effectiveAt The effective datetime or cut label at which to retrieve the investor record. Defaults to the current LUSID system datetime if not specified. (optional)
         * @return APIgetInvestorRecordRequest
         */
        public APIgetInvestorRecordRequest effectiveAt(String effectiveAt) {
            this.effectiveAt = effectiveAt;
            return this;
        }

        /**
         * Set asAt
         * @param asAt The asAt datetime at which to retrieve the investor record. Defaults to return the latest version of the investor record if not specified. (optional)
         * @return APIgetInvestorRecordRequest
         */
        public APIgetInvestorRecordRequest asAt(OffsetDateTime asAt) {
            this.asAt = asAt;
            return this;
        }

        /**
         * Set relationshipDefinitionIds
         * @param relationshipDefinitionIds A list of relationship definitions that are used to decorate related entities   onto the investor record in the response. These must take the form {relationshipDefinitionScope}/{relationshipDefinitionCode}. (optional)
         * @return APIgetInvestorRecordRequest
         */
        public APIgetInvestorRecordRequest relationshipDefinitionIds(List<String> relationshipDefinitionIds) {
            this.relationshipDefinitionIds = relationshipDefinitionIds;
            return this;
        }

        /**
         * Build call for getInvestorRecord
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested investor record </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getInvestorRecordCall(identifierType, identifierValue, scope, identifierScope, propertyKeys, effectiveAt, asAt, relationshipDefinitionIds, _callback);
        }

        /**
         * Execute getInvestorRecord request
         * @return InvestorRecord
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested investor record </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public InvestorRecord execute() throws ApiException {
            ApiResponse<InvestorRecord> localVarResp = getInvestorRecordWithHttpInfo(identifierType, identifierValue, scope, identifierScope, propertyKeys, effectiveAt, asAt, relationshipDefinitionIds);
            return localVarResp.getData();
        }

        /**
         * Execute getInvestorRecord request. Use any specified configuration options to override any other configuration for this request only.
         * @return InvestorRecord
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested investor record </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public InvestorRecord execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<InvestorRecord> localVarResp = getInvestorRecordWithHttpInfo(identifierType, identifierValue, scope, identifierScope, propertyKeys, effectiveAt, asAt, relationshipDefinitionIds, opts);
            return localVarResp.getData();
        }

        /**
         * Execute getInvestorRecord request with HTTP info returned
         * @return ApiResponse&lt;InvestorRecord&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested investor record </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<InvestorRecord> executeWithHttpInfo() throws ApiException {
            return getInvestorRecordWithHttpInfo(identifierType, identifierValue, scope, identifierScope, propertyKeys, effectiveAt, asAt, relationshipDefinitionIds);
        }

        /**
         * Execute getInvestorRecord request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;InvestorRecord&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested investor record </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<InvestorRecord> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return getInvestorRecordWithHttpInfo(identifierType, identifierValue, scope, identifierScope, propertyKeys, effectiveAt, asAt, relationshipDefinitionIds, opts);
        }

        /**
         * Execute getInvestorRecord request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested investor record </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<InvestorRecord> _callback) throws ApiException {
            return getInvestorRecordAsync(identifierType, identifierValue, scope, identifierScope, propertyKeys, effectiveAt, asAt, relationshipDefinitionIds, _callback);
        }

        /**
         * Execute getInvestorRecord request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested investor record </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<InvestorRecord> _callback, ConfigurationOptions opts) throws ApiException {
            return getInvestorRecordAsync(identifierType, identifierValue, scope, identifierScope, propertyKeys, effectiveAt, asAt, relationshipDefinitionIds, _callback, opts);
        }
    }

    /**
     * [EARLY ACCESS] GetInvestorRecord: Get Investor Record
     * Retrieve the definition of a investor record.
     * @param identifierType Code of the investor record identifier type. (required)
     * @param identifierValue Code of the investor record under specified identifier type&#39;s scope and code. (required)
     * @param scope The scope of the investor record entity. (required)
     * @param identifierScope Scope of the investor record identifier type. (required)
     * @return APIgetInvestorRecordRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested investor record </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIgetInvestorRecordRequest getInvestorRecord(String identifierType, String identifierValue, String scope, String identifierScope) {
        return new APIgetInvestorRecordRequest(identifierType, identifierValue, scope, identifierScope);
    }
    private okhttp3.Call listAllInvestorRecordsCall(String effectiveAt, OffsetDateTime asAt, String page, Integer limit, String filter, List<String> sortBy, List<String> propertyKeys, List<String> relationshipDefinitionIds, final ApiCallback _callback) throws ApiException {
        return listAllInvestorRecordsCall(effectiveAt, asAt, page, limit, filter, sortBy, propertyKeys, relationshipDefinitionIds,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call listAllInvestorRecordsCall(String effectiveAt, OffsetDateTime asAt, String page, Integer limit, String filter, List<String> sortBy, List<String> propertyKeys, List<String> relationshipDefinitionIds, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/investorrecords";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (effectiveAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("effectiveAt", effectiveAt));
        }

        if (asAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asAt", asAt));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (sortBy != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "sortBy", sortBy));
        }

        if (propertyKeys != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "propertyKeys", propertyKeys));
        }

        if (relationshipDefinitionIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "relationshipDefinitionIds", relationshipDefinitionIds));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAllInvestorRecordsValidateBeforeCall(String effectiveAt, OffsetDateTime asAt, String page, Integer limit, String filter, List<String> sortBy, List<String> propertyKeys, List<String> relationshipDefinitionIds, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        return listAllInvestorRecordsCall(effectiveAt, asAt, page, limit, filter, sortBy, propertyKeys, relationshipDefinitionIds, _callback, opts);

    }


    private ApiResponse<ResourceListOfInvestorRecord> listAllInvestorRecordsWithHttpInfo(String effectiveAt, OffsetDateTime asAt, String page, Integer limit, String filter, List<String> sortBy, List<String> propertyKeys, List<String> relationshipDefinitionIds) throws ApiException {
        okhttp3.Call localVarCall = listAllInvestorRecordsValidateBeforeCall(effectiveAt, asAt, page, limit, filter, sortBy, propertyKeys, relationshipDefinitionIds, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<ResourceListOfInvestorRecord>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<ResourceListOfInvestorRecord> listAllInvestorRecordsWithHttpInfo(String effectiveAt, OffsetDateTime asAt, String page, Integer limit, String filter, List<String> sortBy, List<String> propertyKeys, List<String> relationshipDefinitionIds, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = listAllInvestorRecordsValidateBeforeCall(effectiveAt, asAt, page, limit, filter, sortBy, propertyKeys, relationshipDefinitionIds, null, opts);
        Type localVarReturnType = new TypeToken<ResourceListOfInvestorRecord>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAllInvestorRecordsAsync(String effectiveAt, OffsetDateTime asAt, String page, Integer limit, String filter, List<String> sortBy, List<String> propertyKeys, List<String> relationshipDefinitionIds, final ApiCallback<ResourceListOfInvestorRecord> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAllInvestorRecordsValidateBeforeCall(effectiveAt, asAt, page, limit, filter, sortBy, propertyKeys, relationshipDefinitionIds, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<ResourceListOfInvestorRecord>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call listAllInvestorRecordsAsync(String effectiveAt, OffsetDateTime asAt, String page, Integer limit, String filter, List<String> sortBy, List<String> propertyKeys, List<String> relationshipDefinitionIds, final ApiCallback<ResourceListOfInvestorRecord> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = listAllInvestorRecordsValidateBeforeCall(effectiveAt, asAt, page, limit, filter, sortBy, propertyKeys, relationshipDefinitionIds, _callback, opts);
        Type localVarReturnType = new TypeToken<ResourceListOfInvestorRecord>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIlistAllInvestorRecordsRequest {
        private String effectiveAt;
        private OffsetDateTime asAt;
        private String page;
        private Integer limit;
        private String filter;
        private List<String> sortBy;
        private List<String> propertyKeys;
        private List<String> relationshipDefinitionIds;

        private APIlistAllInvestorRecordsRequest() {
        }

        /**
         * Set effectiveAt
         * @param effectiveAt The effective datetime or cut label at which to list the investor records. Defaults to the current LUSID   system datetime if not specified. (optional)
         * @return APIlistAllInvestorRecordsRequest
         */
        public APIlistAllInvestorRecordsRequest effectiveAt(String effectiveAt) {
            this.effectiveAt = effectiveAt;
            return this;
        }

        /**
         * Set asAt
         * @param asAt The asAt datetime at which to list the investor records. Defaults to return the latest version   of each investor records if not specified. (optional)
         * @return APIlistAllInvestorRecordsRequest
         */
        public APIlistAllInvestorRecordsRequest asAt(OffsetDateTime asAt) {
            this.asAt = asAt;
            return this;
        }

        /**
         * Set page
         * @param page The pagination token to use to continue listing investor records from a previous call to list investor records. This  value is returned from the previous call. If a pagination token is provided the filter, effectiveAt, sortBy  and asAt fields must not have changed since the original request. (optional)
         * @return APIlistAllInvestorRecordsRequest
         */
        public APIlistAllInvestorRecordsRequest page(String page) {
            this.page = page;
            return this;
        }

        /**
         * Set limit
         * @param limit When paginating, limit the number of returned results to this many. Defaults to 5000 if not specified. (optional)
         * @return APIlistAllInvestorRecordsRequest
         */
        public APIlistAllInvestorRecordsRequest limit(Integer limit) {
            this.limit = limit;
            return this;
        }

        /**
         * Set filter
         * @param filter Expression to filter the result set.    Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid. (optional)
         * @return APIlistAllInvestorRecordsRequest
         */
        public APIlistAllInvestorRecordsRequest filter(String filter) {
            this.filter = filter;
            return this;
        }

        /**
         * Set sortBy
         * @param sortBy A list of field names or properties to sort by, each suffixed by \&quot; ASC\&quot; or \&quot; DESC\&quot;. (optional)
         * @return APIlistAllInvestorRecordsRequest
         */
        public APIlistAllInvestorRecordsRequest sortBy(List<String> sortBy) {
            this.sortBy = sortBy;
            return this;
        }

        /**
         * Set propertyKeys
         * @param propertyKeys A list of property keys or identifier types (as property keys) from the \&quot;InvestorRecord\&quot; domain   to include for each investor record, or from any domain that supports relationships to decorate onto related entities.   These take the format {domain}/{scope}/{code} e.g. \&quot;InvestorRecord/ContactDetails/Address\&quot;. (optional)
         * @return APIlistAllInvestorRecordsRequest
         */
        public APIlistAllInvestorRecordsRequest propertyKeys(List<String> propertyKeys) {
            this.propertyKeys = propertyKeys;
            return this;
        }

        /**
         * Set relationshipDefinitionIds
         * @param relationshipDefinitionIds A list of relationship definitions that are used to decorate related entities   onto each portfolio in the response. These must take the form {relationshipDefinitionScope}/{relationshipDefinitionCode}. (optional)
         * @return APIlistAllInvestorRecordsRequest
         */
        public APIlistAllInvestorRecordsRequest relationshipDefinitionIds(List<String> relationshipDefinitionIds) {
            this.relationshipDefinitionIds = relationshipDefinitionIds;
            return this;
        }

        /**
         * Build call for listAllInvestorRecords
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> All existing Investor Records </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listAllInvestorRecordsCall(effectiveAt, asAt, page, limit, filter, sortBy, propertyKeys, relationshipDefinitionIds, _callback);
        }

        /**
         * Execute listAllInvestorRecords request
         * @return ResourceListOfInvestorRecord
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> All existing Investor Records </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ResourceListOfInvestorRecord execute() throws ApiException {
            ApiResponse<ResourceListOfInvestorRecord> localVarResp = listAllInvestorRecordsWithHttpInfo(effectiveAt, asAt, page, limit, filter, sortBy, propertyKeys, relationshipDefinitionIds);
            return localVarResp.getData();
        }

        /**
         * Execute listAllInvestorRecords request. Use any specified configuration options to override any other configuration for this request only.
         * @return ResourceListOfInvestorRecord
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> All existing Investor Records </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ResourceListOfInvestorRecord execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<ResourceListOfInvestorRecord> localVarResp = listAllInvestorRecordsWithHttpInfo(effectiveAt, asAt, page, limit, filter, sortBy, propertyKeys, relationshipDefinitionIds, opts);
            return localVarResp.getData();
        }

        /**
         * Execute listAllInvestorRecords request with HTTP info returned
         * @return ApiResponse&lt;ResourceListOfInvestorRecord&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> All existing Investor Records </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ResourceListOfInvestorRecord> executeWithHttpInfo() throws ApiException {
            return listAllInvestorRecordsWithHttpInfo(effectiveAt, asAt, page, limit, filter, sortBy, propertyKeys, relationshipDefinitionIds);
        }

        /**
         * Execute listAllInvestorRecords request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;ResourceListOfInvestorRecord&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> All existing Investor Records </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ResourceListOfInvestorRecord> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return listAllInvestorRecordsWithHttpInfo(effectiveAt, asAt, page, limit, filter, sortBy, propertyKeys, relationshipDefinitionIds, opts);
        }

        /**
         * Execute listAllInvestorRecords request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> All existing Investor Records </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ResourceListOfInvestorRecord> _callback) throws ApiException {
            return listAllInvestorRecordsAsync(effectiveAt, asAt, page, limit, filter, sortBy, propertyKeys, relationshipDefinitionIds, _callback);
        }

        /**
         * Execute listAllInvestorRecords request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> All existing Investor Records </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ResourceListOfInvestorRecord> _callback, ConfigurationOptions opts) throws ApiException {
            return listAllInvestorRecordsAsync(effectiveAt, asAt, page, limit, filter, sortBy, propertyKeys, relationshipDefinitionIds, _callback, opts);
        }
    }

    /**
     * [EARLY ACCESS] ListAllInvestorRecords: List Investor Records
     * List all investor records which the user is entitled to see.
     * @return APIlistAllInvestorRecordsRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All existing Investor Records </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIlistAllInvestorRecordsRequest listAllInvestorRecords() {
        return new APIlistAllInvestorRecordsRequest();
    }
    private okhttp3.Call upsertInvestorRecordsCall(String successMode, Map<String, UpsertInvestorRecordRequest> requestBody, final ApiCallback _callback) throws ApiException {
        return upsertInvestorRecordsCall(successMode, requestBody,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call upsertInvestorRecordsCall(String successMode, Map<String, UpsertInvestorRecordRequest> requestBody, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/api/investorrecords/$batchUpsert";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (successMode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("successMode", successMode));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call upsertInvestorRecordsValidateBeforeCall(String successMode, Map<String, UpsertInvestorRecordRequest> requestBody, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'successMode' is set
        if (successMode == null) {
            throw new ApiException("Missing the required parameter 'successMode' when calling upsertInvestorRecords(Async)");
        }

        // verify the required parameter 'requestBody' is set
        if (requestBody == null) {
            throw new ApiException("Missing the required parameter 'requestBody' when calling upsertInvestorRecords(Async)");
        }

        return upsertInvestorRecordsCall(successMode, requestBody, _callback, opts);

    }


    private ApiResponse<UpsertInvestorRecordsResponse> upsertInvestorRecordsWithHttpInfo(String successMode, Map<String, UpsertInvestorRecordRequest> requestBody) throws ApiException {
        okhttp3.Call localVarCall = upsertInvestorRecordsValidateBeforeCall(successMode, requestBody, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<UpsertInvestorRecordsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<UpsertInvestorRecordsResponse> upsertInvestorRecordsWithHttpInfo(String successMode, Map<String, UpsertInvestorRecordRequest> requestBody, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = upsertInvestorRecordsValidateBeforeCall(successMode, requestBody, null, opts);
        Type localVarReturnType = new TypeToken<UpsertInvestorRecordsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call upsertInvestorRecordsAsync(String successMode, Map<String, UpsertInvestorRecordRequest> requestBody, final ApiCallback<UpsertInvestorRecordsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = upsertInvestorRecordsValidateBeforeCall(successMode, requestBody, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<UpsertInvestorRecordsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call upsertInvestorRecordsAsync(String successMode, Map<String, UpsertInvestorRecordRequest> requestBody, final ApiCallback<UpsertInvestorRecordsResponse> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = upsertInvestorRecordsValidateBeforeCall(successMode, requestBody, _callback, opts);
        Type localVarReturnType = new TypeToken<UpsertInvestorRecordsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIupsertInvestorRecordsRequest {
        private final String successMode;
        private final Map<String, UpsertInvestorRecordRequest> requestBody;

        private APIupsertInvestorRecordsRequest(String successMode, Map<String, UpsertInvestorRecordRequest> requestBody) {
            this.successMode = successMode;
            this.requestBody = requestBody;
        }

        /**
         * Build call for upsertInvestorRecords
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The successfully created or updated investor records along with any failures </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return upsertInvestorRecordsCall(successMode, requestBody, _callback);
        }

        /**
         * Execute upsertInvestorRecords request
         * @return UpsertInvestorRecordsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The successfully created or updated investor records along with any failures </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public UpsertInvestorRecordsResponse execute() throws ApiException {
            ApiResponse<UpsertInvestorRecordsResponse> localVarResp = upsertInvestorRecordsWithHttpInfo(successMode, requestBody);
            return localVarResp.getData();
        }

        /**
         * Execute upsertInvestorRecords request. Use any specified configuration options to override any other configuration for this request only.
         * @return UpsertInvestorRecordsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The successfully created or updated investor records along with any failures </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public UpsertInvestorRecordsResponse execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<UpsertInvestorRecordsResponse> localVarResp = upsertInvestorRecordsWithHttpInfo(successMode, requestBody, opts);
            return localVarResp.getData();
        }

        /**
         * Execute upsertInvestorRecords request with HTTP info returned
         * @return ApiResponse&lt;UpsertInvestorRecordsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The successfully created or updated investor records along with any failures </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UpsertInvestorRecordsResponse> executeWithHttpInfo() throws ApiException {
            return upsertInvestorRecordsWithHttpInfo(successMode, requestBody);
        }

        /**
         * Execute upsertInvestorRecords request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;UpsertInvestorRecordsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The successfully created or updated investor records along with any failures </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UpsertInvestorRecordsResponse> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return upsertInvestorRecordsWithHttpInfo(successMode, requestBody, opts);
        }

        /**
         * Execute upsertInvestorRecords request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The successfully created or updated investor records along with any failures </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UpsertInvestorRecordsResponse> _callback) throws ApiException {
            return upsertInvestorRecordsAsync(successMode, requestBody, _callback);
        }

        /**
         * Execute upsertInvestorRecords request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The successfully created or updated investor records along with any failures </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UpsertInvestorRecordsResponse> _callback, ConfigurationOptions opts) throws ApiException {
            return upsertInvestorRecordsAsync(successMode, requestBody, _callback, opts);
        }
    }

    /**
     * [EARLY ACCESS] UpsertInvestorRecords: Upsert investor records
     * Creates or updates a collection of Investor Records
     * @param successMode Whether the batch request should fail Atomically or in a Partial fashion - Allowed Values: Atomic, Partial (required)
     * @param requestBody A collection of requests to create or update Investor Records. (required)
     * @return APIupsertInvestorRecordsRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The successfully created or updated investor records along with any failures </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIupsertInvestorRecordsRequest upsertInvestorRecords(String successMode, Map<String, UpsertInvestorRecordRequest> requestBody) {
        return new APIupsertInvestorRecordsRequest(successMode, requestBody);
    }
}
