/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.api;

import com.finbourne.lusid.ApiCallback;
import com.finbourne.lusid.ApiClient;
import com.finbourne.lusid.ApiException;
import com.finbourne.lusid.ApiResponse;
import com.finbourne.lusid.Configuration;
import com.finbourne.lusid.Pair;
import com.finbourne.lusid.ProgressRequestBody;
import com.finbourne.lusid.ProgressResponseBody;
import com.finbourne.lusid.extensions.ConfigurationOptions;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.finbourne.lusid.model.AmortisationRuleSet;
import com.finbourne.lusid.model.CreateAmortisationRuleSetRequest;
import com.finbourne.lusid.model.DeletedEntityResponse;
import com.finbourne.lusid.model.LusidProblemDetails;
import com.finbourne.lusid.model.LusidValidationProblemDetails;
import java.time.OffsetDateTime;
import com.finbourne.lusid.model.PagedResourceListOfAmortisationRuleSet;
import com.finbourne.lusid.model.SetAmortisationRulesRequest;
import com.finbourne.lusid.model.UpdateAmortisationRuleSetDetailsRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AmortisationRuleSetsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AmortisationRuleSetsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AmortisationRuleSetsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createAmortisationRuleSetCall(String scope, CreateAmortisationRuleSetRequest createAmortisationRuleSetRequest, final ApiCallback _callback) throws ApiException {
        return createAmortisationRuleSetCall(scope, createAmortisationRuleSetRequest,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call createAmortisationRuleSetCall(String scope, CreateAmortisationRuleSetRequest createAmortisationRuleSetRequest, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createAmortisationRuleSetRequest;

        // create path and map variables
        String localVarPath = "/api/amortisation/rulesets/{scope}"
            .replace("{" + "scope" + "}", localVarApiClient.escapeString(scope.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createAmortisationRuleSetValidateBeforeCall(String scope, CreateAmortisationRuleSetRequest createAmortisationRuleSetRequest, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling createAmortisationRuleSet(Async)");
        }

        // verify the required parameter 'createAmortisationRuleSetRequest' is set
        if (createAmortisationRuleSetRequest == null) {
            throw new ApiException("Missing the required parameter 'createAmortisationRuleSetRequest' when calling createAmortisationRuleSet(Async)");
        }

        return createAmortisationRuleSetCall(scope, createAmortisationRuleSetRequest, _callback, opts);

    }


    private ApiResponse<AmortisationRuleSet> createAmortisationRuleSetWithHttpInfo(String scope, CreateAmortisationRuleSetRequest createAmortisationRuleSetRequest) throws ApiException {
        okhttp3.Call localVarCall = createAmortisationRuleSetValidateBeforeCall(scope, createAmortisationRuleSetRequest, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<AmortisationRuleSet>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<AmortisationRuleSet> createAmortisationRuleSetWithHttpInfo(String scope, CreateAmortisationRuleSetRequest createAmortisationRuleSetRequest, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = createAmortisationRuleSetValidateBeforeCall(scope, createAmortisationRuleSetRequest, null, opts);
        Type localVarReturnType = new TypeToken<AmortisationRuleSet>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createAmortisationRuleSetAsync(String scope, CreateAmortisationRuleSetRequest createAmortisationRuleSetRequest, final ApiCallback<AmortisationRuleSet> _callback) throws ApiException {

        okhttp3.Call localVarCall = createAmortisationRuleSetValidateBeforeCall(scope, createAmortisationRuleSetRequest, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<AmortisationRuleSet>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call createAmortisationRuleSetAsync(String scope, CreateAmortisationRuleSetRequest createAmortisationRuleSetRequest, final ApiCallback<AmortisationRuleSet> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = createAmortisationRuleSetValidateBeforeCall(scope, createAmortisationRuleSetRequest, _callback, opts);
        Type localVarReturnType = new TypeToken<AmortisationRuleSet>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIcreateAmortisationRuleSetRequest {
        private final String scope;
        private final CreateAmortisationRuleSetRequest createAmortisationRuleSetRequest;

        private APIcreateAmortisationRuleSetRequest(String scope, CreateAmortisationRuleSetRequest createAmortisationRuleSetRequest) {
            this.scope = scope;
            this.createAmortisationRuleSetRequest = createAmortisationRuleSetRequest;
        }

        /**
         * Build call for createAmortisationRuleSet
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Create a rule set for amortisation. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return createAmortisationRuleSetCall(scope, createAmortisationRuleSetRequest, _callback);
        }

        /**
         * Execute createAmortisationRuleSet request
         * @return AmortisationRuleSet
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Create a rule set for amortisation. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public AmortisationRuleSet execute() throws ApiException {
            ApiResponse<AmortisationRuleSet> localVarResp = createAmortisationRuleSetWithHttpInfo(scope, createAmortisationRuleSetRequest);
            return localVarResp.getData();
        }

        /**
         * Execute createAmortisationRuleSet request. Use any specified configuration options to override any other configuration for this request only.
         * @return AmortisationRuleSet
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Create a rule set for amortisation. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public AmortisationRuleSet execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<AmortisationRuleSet> localVarResp = createAmortisationRuleSetWithHttpInfo(scope, createAmortisationRuleSetRequest, opts);
            return localVarResp.getData();
        }

        /**
         * Execute createAmortisationRuleSet request with HTTP info returned
         * @return ApiResponse&lt;AmortisationRuleSet&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Create a rule set for amortisation. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AmortisationRuleSet> executeWithHttpInfo() throws ApiException {
            return createAmortisationRuleSetWithHttpInfo(scope, createAmortisationRuleSetRequest);
        }

        /**
         * Execute createAmortisationRuleSet request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;AmortisationRuleSet&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Create a rule set for amortisation. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AmortisationRuleSet> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return createAmortisationRuleSetWithHttpInfo(scope, createAmortisationRuleSetRequest, opts);
        }

        /**
         * Execute createAmortisationRuleSet request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Create a rule set for amortisation. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AmortisationRuleSet> _callback) throws ApiException {
            return createAmortisationRuleSetAsync(scope, createAmortisationRuleSetRequest, _callback);
        }

        /**
         * Execute createAmortisationRuleSet request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Create a rule set for amortisation. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AmortisationRuleSet> _callback, ConfigurationOptions opts) throws ApiException {
            return createAmortisationRuleSetAsync(scope, createAmortisationRuleSetRequest, _callback, opts);
        }
    }

    /**
     * [EXPERIMENTAL] CreateAmortisationRuleSet: Create an amortisation rule set.
     * Creates an amortisation rule set definition at the given effective time.  The user must be entitled to read any properties specified in each rule.
     * @param scope The scope of the rule set. (required)
     * @param createAmortisationRuleSetRequest The contents of the rule set. (required)
     * @return APIcreateAmortisationRuleSetRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Create a rule set for amortisation. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIcreateAmortisationRuleSetRequest createAmortisationRuleSet(String scope, CreateAmortisationRuleSetRequest createAmortisationRuleSetRequest) {
        return new APIcreateAmortisationRuleSetRequest(scope, createAmortisationRuleSetRequest);
    }
    private okhttp3.Call deleteAmortisationRulesetCall(String scope, String code, final ApiCallback _callback) throws ApiException {
        return deleteAmortisationRulesetCall(scope, code,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call deleteAmortisationRulesetCall(String scope, String code, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/amortisation/rulesets/{scope}/{code}"
            .replace("{" + "scope" + "}", localVarApiClient.escapeString(scope.toString()))
            .replace("{" + "code" + "}", localVarApiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteAmortisationRulesetValidateBeforeCall(String scope, String code, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling deleteAmortisationRuleset(Async)");
        }

        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling deleteAmortisationRuleset(Async)");
        }

        return deleteAmortisationRulesetCall(scope, code, _callback, opts);

    }


    private ApiResponse<DeletedEntityResponse> deleteAmortisationRulesetWithHttpInfo(String scope, String code) throws ApiException {
        okhttp3.Call localVarCall = deleteAmortisationRulesetValidateBeforeCall(scope, code, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<DeletedEntityResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<DeletedEntityResponse> deleteAmortisationRulesetWithHttpInfo(String scope, String code, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = deleteAmortisationRulesetValidateBeforeCall(scope, code, null, opts);
        Type localVarReturnType = new TypeToken<DeletedEntityResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteAmortisationRulesetAsync(String scope, String code, final ApiCallback<DeletedEntityResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteAmortisationRulesetValidateBeforeCall(scope, code, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<DeletedEntityResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call deleteAmortisationRulesetAsync(String scope, String code, final ApiCallback<DeletedEntityResponse> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = deleteAmortisationRulesetValidateBeforeCall(scope, code, _callback, opts);
        Type localVarReturnType = new TypeToken<DeletedEntityResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIdeleteAmortisationRulesetRequest {
        private final String scope;
        private final String code;

        private APIdeleteAmortisationRulesetRequest(String scope, String code) {
            this.scope = scope;
            this.code = code;
        }

        /**
         * Build call for deleteAmortisationRuleset
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteAmortisationRulesetCall(scope, code, _callback);
        }

        /**
         * Execute deleteAmortisationRuleset request
         * @return DeletedEntityResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public DeletedEntityResponse execute() throws ApiException {
            ApiResponse<DeletedEntityResponse> localVarResp = deleteAmortisationRulesetWithHttpInfo(scope, code);
            return localVarResp.getData();
        }

        /**
         * Execute deleteAmortisationRuleset request. Use any specified configuration options to override any other configuration for this request only.
         * @return DeletedEntityResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public DeletedEntityResponse execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<DeletedEntityResponse> localVarResp = deleteAmortisationRulesetWithHttpInfo(scope, code, opts);
            return localVarResp.getData();
        }

        /**
         * Execute deleteAmortisationRuleset request with HTTP info returned
         * @return ApiResponse&lt;DeletedEntityResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DeletedEntityResponse> executeWithHttpInfo() throws ApiException {
            return deleteAmortisationRulesetWithHttpInfo(scope, code);
        }

        /**
         * Execute deleteAmortisationRuleset request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;DeletedEntityResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DeletedEntityResponse> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return deleteAmortisationRulesetWithHttpInfo(scope, code, opts);
        }

        /**
         * Execute deleteAmortisationRuleset request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DeletedEntityResponse> _callback) throws ApiException {
            return deleteAmortisationRulesetAsync(scope, code, _callback);
        }

        /**
         * Execute deleteAmortisationRuleset request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DeletedEntityResponse> _callback, ConfigurationOptions opts) throws ApiException {
            return deleteAmortisationRulesetAsync(scope, code, _callback, opts);
        }
    }

    /**
     * [EXPERIMENTAL] DeleteAmortisationRuleset: Delete an amortisation rule set.
     * &lt;br&gt;   Deletes the rule set perpetually, including its rules.     &lt;br&gt;   The rule set will remain viewable at previous as at times, but it will no longer be considered applicable.     &lt;br&gt;   This cannot be undone.   
     * @param scope The rule set scope. (required)
     * @param code The rule set code. (required)
     * @return APIdeleteAmortisationRulesetRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIdeleteAmortisationRulesetRequest deleteAmortisationRuleset(String scope, String code) {
        return new APIdeleteAmortisationRulesetRequest(scope, code);
    }
    private okhttp3.Call getAmortisationRuleSetCall(String scope, String code, String effectiveAt, OffsetDateTime asAt, final ApiCallback _callback) throws ApiException {
        return getAmortisationRuleSetCall(scope, code, effectiveAt, asAt,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call getAmortisationRuleSetCall(String scope, String code, String effectiveAt, OffsetDateTime asAt, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/amortisation/rulesets/{scope}/{code}"
            .replace("{" + "scope" + "}", localVarApiClient.escapeString(scope.toString()))
            .replace("{" + "code" + "}", localVarApiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (effectiveAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("effectiveAt", effectiveAt));
        }

        if (asAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asAt", asAt));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAmortisationRuleSetValidateBeforeCall(String scope, String code, String effectiveAt, OffsetDateTime asAt, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling getAmortisationRuleSet(Async)");
        }

        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling getAmortisationRuleSet(Async)");
        }

        return getAmortisationRuleSetCall(scope, code, effectiveAt, asAt, _callback, opts);

    }


    private ApiResponse<AmortisationRuleSet> getAmortisationRuleSetWithHttpInfo(String scope, String code, String effectiveAt, OffsetDateTime asAt) throws ApiException {
        okhttp3.Call localVarCall = getAmortisationRuleSetValidateBeforeCall(scope, code, effectiveAt, asAt, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<AmortisationRuleSet>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<AmortisationRuleSet> getAmortisationRuleSetWithHttpInfo(String scope, String code, String effectiveAt, OffsetDateTime asAt, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = getAmortisationRuleSetValidateBeforeCall(scope, code, effectiveAt, asAt, null, opts);
        Type localVarReturnType = new TypeToken<AmortisationRuleSet>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAmortisationRuleSetAsync(String scope, String code, String effectiveAt, OffsetDateTime asAt, final ApiCallback<AmortisationRuleSet> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAmortisationRuleSetValidateBeforeCall(scope, code, effectiveAt, asAt, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<AmortisationRuleSet>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call getAmortisationRuleSetAsync(String scope, String code, String effectiveAt, OffsetDateTime asAt, final ApiCallback<AmortisationRuleSet> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = getAmortisationRuleSetValidateBeforeCall(scope, code, effectiveAt, asAt, _callback, opts);
        Type localVarReturnType = new TypeToken<AmortisationRuleSet>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetAmortisationRuleSetRequest {
        private final String scope;
        private final String code;
        private String effectiveAt;
        private OffsetDateTime asAt;

        private APIgetAmortisationRuleSetRequest(String scope, String code) {
            this.scope = scope;
            this.code = code;
        }

        /**
         * Set effectiveAt
         * @param effectiveAt The effective datetime or cut label at which to retrieve the rule definition.  Defaults to the current LUSID system datetime if not specified. (optional)
         * @return APIgetAmortisationRuleSetRequest
         */
        public APIgetAmortisationRuleSetRequest effectiveAt(String effectiveAt) {
            this.effectiveAt = effectiveAt;
            return this;
        }

        /**
         * Set asAt
         * @param asAt The asAt datetime at which to retrieve the rule definition. Defaults to returning the latest version if not  specified. (optional)
         * @return APIgetAmortisationRuleSetRequest
         */
        public APIgetAmortisationRuleSetRequest asAt(OffsetDateTime asAt) {
            this.asAt = asAt;
            return this;
        }

        /**
         * Build call for getAmortisationRuleSet
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Details of one rule set. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAmortisationRuleSetCall(scope, code, effectiveAt, asAt, _callback);
        }

        /**
         * Execute getAmortisationRuleSet request
         * @return AmortisationRuleSet
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Details of one rule set. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public AmortisationRuleSet execute() throws ApiException {
            ApiResponse<AmortisationRuleSet> localVarResp = getAmortisationRuleSetWithHttpInfo(scope, code, effectiveAt, asAt);
            return localVarResp.getData();
        }

        /**
         * Execute getAmortisationRuleSet request. Use any specified configuration options to override any other configuration for this request only.
         * @return AmortisationRuleSet
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Details of one rule set. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public AmortisationRuleSet execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<AmortisationRuleSet> localVarResp = getAmortisationRuleSetWithHttpInfo(scope, code, effectiveAt, asAt, opts);
            return localVarResp.getData();
        }

        /**
         * Execute getAmortisationRuleSet request with HTTP info returned
         * @return ApiResponse&lt;AmortisationRuleSet&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Details of one rule set. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AmortisationRuleSet> executeWithHttpInfo() throws ApiException {
            return getAmortisationRuleSetWithHttpInfo(scope, code, effectiveAt, asAt);
        }

        /**
         * Execute getAmortisationRuleSet request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;AmortisationRuleSet&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Details of one rule set. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AmortisationRuleSet> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return getAmortisationRuleSetWithHttpInfo(scope, code, effectiveAt, asAt, opts);
        }

        /**
         * Execute getAmortisationRuleSet request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Details of one rule set. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AmortisationRuleSet> _callback) throws ApiException {
            return getAmortisationRuleSetAsync(scope, code, effectiveAt, asAt, _callback);
        }

        /**
         * Execute getAmortisationRuleSet request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Details of one rule set. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AmortisationRuleSet> _callback, ConfigurationOptions opts) throws ApiException {
            return getAmortisationRuleSetAsync(scope, code, effectiveAt, asAt, _callback, opts);
        }
    }

    /**
     * [EXPERIMENTAL] GetAmortisationRuleSet: Retrieve the definition of a single amortisation rule set
     * Retrieves the amortisation rule set definition at the given effective and as at times.
     * @param scope The rule set scope. (required)
     * @param code The rule set code. (required)
     * @return APIgetAmortisationRuleSetRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Details of one rule set. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIgetAmortisationRuleSetRequest getAmortisationRuleSet(String scope, String code) {
        return new APIgetAmortisationRuleSetRequest(scope, code);
    }
    private okhttp3.Call listAmortisationRuleSetsCall(String effectiveAt, OffsetDateTime asAt, String page, Integer limit, String filter, List<String> sortBy, final ApiCallback _callback) throws ApiException {
        return listAmortisationRuleSetsCall(effectiveAt, asAt, page, limit, filter, sortBy,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call listAmortisationRuleSetsCall(String effectiveAt, OffsetDateTime asAt, String page, Integer limit, String filter, List<String> sortBy, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/amortisation/rulesets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (effectiveAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("effectiveAt", effectiveAt));
        }

        if (asAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asAt", asAt));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (sortBy != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "sortBy", sortBy));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAmortisationRuleSetsValidateBeforeCall(String effectiveAt, OffsetDateTime asAt, String page, Integer limit, String filter, List<String> sortBy, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        return listAmortisationRuleSetsCall(effectiveAt, asAt, page, limit, filter, sortBy, _callback, opts);

    }


    private ApiResponse<PagedResourceListOfAmortisationRuleSet> listAmortisationRuleSetsWithHttpInfo(String effectiveAt, OffsetDateTime asAt, String page, Integer limit, String filter, List<String> sortBy) throws ApiException {
        okhttp3.Call localVarCall = listAmortisationRuleSetsValidateBeforeCall(effectiveAt, asAt, page, limit, filter, sortBy, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<PagedResourceListOfAmortisationRuleSet>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<PagedResourceListOfAmortisationRuleSet> listAmortisationRuleSetsWithHttpInfo(String effectiveAt, OffsetDateTime asAt, String page, Integer limit, String filter, List<String> sortBy, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = listAmortisationRuleSetsValidateBeforeCall(effectiveAt, asAt, page, limit, filter, sortBy, null, opts);
        Type localVarReturnType = new TypeToken<PagedResourceListOfAmortisationRuleSet>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAmortisationRuleSetsAsync(String effectiveAt, OffsetDateTime asAt, String page, Integer limit, String filter, List<String> sortBy, final ApiCallback<PagedResourceListOfAmortisationRuleSet> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAmortisationRuleSetsValidateBeforeCall(effectiveAt, asAt, page, limit, filter, sortBy, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<PagedResourceListOfAmortisationRuleSet>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call listAmortisationRuleSetsAsync(String effectiveAt, OffsetDateTime asAt, String page, Integer limit, String filter, List<String> sortBy, final ApiCallback<PagedResourceListOfAmortisationRuleSet> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = listAmortisationRuleSetsValidateBeforeCall(effectiveAt, asAt, page, limit, filter, sortBy, _callback, opts);
        Type localVarReturnType = new TypeToken<PagedResourceListOfAmortisationRuleSet>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIlistAmortisationRuleSetsRequest {
        private String effectiveAt;
        private OffsetDateTime asAt;
        private String page;
        private Integer limit;
        private String filter;
        private List<String> sortBy;

        private APIlistAmortisationRuleSetsRequest() {
        }

        /**
         * Set effectiveAt
         * @param effectiveAt The effective datetime or cut label at which to retrieve the rule definitions.  Defaults to the current LUSID system datetime if not specified. (optional)
         * @return APIlistAmortisationRuleSetsRequest
         */
        public APIlistAmortisationRuleSetsRequest effectiveAt(String effectiveAt) {
            this.effectiveAt = effectiveAt;
            return this;
        }

        /**
         * Set asAt
         * @param asAt The asAt datetime at which to retrieve the rule definitions. Defaults to returning the latest version if not  specified. (optional)
         * @return APIlistAmortisationRuleSetsRequest
         */
        public APIlistAmortisationRuleSetsRequest asAt(OffsetDateTime asAt) {
            this.asAt = asAt;
            return this;
        }

        /**
         * Set page
         * @param page The pagination token to use to continue listing AmortisationRuleSets; this   value is returned from the previous call. If a pagination token is provided, the filter, effectiveAt   and asAt fields must not have changed since the original request. (optional)
         * @return APIlistAmortisationRuleSetsRequest
         */
        public APIlistAmortisationRuleSetsRequest page(String page) {
            this.page = page;
            return this;
        }

        /**
         * Set limit
         * @param limit When paginating, limit the results to this number. Defaults to 100 if not specified. (optional)
         * @return APIlistAmortisationRuleSetsRequest
         */
        public APIlistAmortisationRuleSetsRequest limit(Integer limit) {
            this.limit = limit;
            return this;
        }

        /**
         * Set filter
         * @param filter Expression to filter the results.   For more information about filtering results, see https://support.lusid.com/knowledgebase/article/KA-01914. (optional)
         * @return APIlistAmortisationRuleSetsRequest
         */
        public APIlistAmortisationRuleSetsRequest filter(String filter) {
            this.filter = filter;
            return this;
        }

        /**
         * Set sortBy
         * @param sortBy A list of field names or properties to sort by, each suffixed by \&quot; ASC\&quot; or \&quot; DESC\&quot; (optional)
         * @return APIlistAmortisationRuleSetsRequest
         */
        public APIlistAmortisationRuleSetsRequest sortBy(List<String> sortBy) {
            this.sortBy = sortBy;
            return this;
        }

        /**
         * Build call for listAmortisationRuleSets
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A list of rule sets available. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listAmortisationRuleSetsCall(effectiveAt, asAt, page, limit, filter, sortBy, _callback);
        }

        /**
         * Execute listAmortisationRuleSets request
         * @return PagedResourceListOfAmortisationRuleSet
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A list of rule sets available. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public PagedResourceListOfAmortisationRuleSet execute() throws ApiException {
            ApiResponse<PagedResourceListOfAmortisationRuleSet> localVarResp = listAmortisationRuleSetsWithHttpInfo(effectiveAt, asAt, page, limit, filter, sortBy);
            return localVarResp.getData();
        }

        /**
         * Execute listAmortisationRuleSets request. Use any specified configuration options to override any other configuration for this request only.
         * @return PagedResourceListOfAmortisationRuleSet
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A list of rule sets available. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public PagedResourceListOfAmortisationRuleSet execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<PagedResourceListOfAmortisationRuleSet> localVarResp = listAmortisationRuleSetsWithHttpInfo(effectiveAt, asAt, page, limit, filter, sortBy, opts);
            return localVarResp.getData();
        }

        /**
         * Execute listAmortisationRuleSets request with HTTP info returned
         * @return ApiResponse&lt;PagedResourceListOfAmortisationRuleSet&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A list of rule sets available. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PagedResourceListOfAmortisationRuleSet> executeWithHttpInfo() throws ApiException {
            return listAmortisationRuleSetsWithHttpInfo(effectiveAt, asAt, page, limit, filter, sortBy);
        }

        /**
         * Execute listAmortisationRuleSets request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;PagedResourceListOfAmortisationRuleSet&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A list of rule sets available. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PagedResourceListOfAmortisationRuleSet> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return listAmortisationRuleSetsWithHttpInfo(effectiveAt, asAt, page, limit, filter, sortBy, opts);
        }

        /**
         * Execute listAmortisationRuleSets request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A list of rule sets available. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PagedResourceListOfAmortisationRuleSet> _callback) throws ApiException {
            return listAmortisationRuleSetsAsync(effectiveAt, asAt, page, limit, filter, sortBy, _callback);
        }

        /**
         * Execute listAmortisationRuleSets request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A list of rule sets available. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PagedResourceListOfAmortisationRuleSet> _callback, ConfigurationOptions opts) throws ApiException {
            return listAmortisationRuleSetsAsync(effectiveAt, asAt, page, limit, filter, sortBy, _callback, opts);
        }
    }

    /**
     * [EXPERIMENTAL] ListAmortisationRuleSets: List amortisation rule sets.
     * Retrieves all amortisation rule sets at the given effective and as at times
     * @return APIlistAmortisationRuleSetsRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of rule sets available. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIlistAmortisationRuleSetsRequest listAmortisationRuleSets() {
        return new APIlistAmortisationRuleSetsRequest();
    }
    private okhttp3.Call setAmortisationRulesCall(String scope, String code, SetAmortisationRulesRequest setAmortisationRulesRequest, final ApiCallback _callback) throws ApiException {
        return setAmortisationRulesCall(scope, code, setAmortisationRulesRequest,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call setAmortisationRulesCall(String scope, String code, SetAmortisationRulesRequest setAmortisationRulesRequest, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = setAmortisationRulesRequest;

        // create path and map variables
        String localVarPath = "/api/amortisation/rulesets/{scope}/{code}/rules"
            .replace("{" + "scope" + "}", localVarApiClient.escapeString(scope.toString()))
            .replace("{" + "code" + "}", localVarApiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setAmortisationRulesValidateBeforeCall(String scope, String code, SetAmortisationRulesRequest setAmortisationRulesRequest, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling setAmortisationRules(Async)");
        }

        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling setAmortisationRules(Async)");
        }

        // verify the required parameter 'setAmortisationRulesRequest' is set
        if (setAmortisationRulesRequest == null) {
            throw new ApiException("Missing the required parameter 'setAmortisationRulesRequest' when calling setAmortisationRules(Async)");
        }

        return setAmortisationRulesCall(scope, code, setAmortisationRulesRequest, _callback, opts);

    }


    private ApiResponse<AmortisationRuleSet> setAmortisationRulesWithHttpInfo(String scope, String code, SetAmortisationRulesRequest setAmortisationRulesRequest) throws ApiException {
        okhttp3.Call localVarCall = setAmortisationRulesValidateBeforeCall(scope, code, setAmortisationRulesRequest, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<AmortisationRuleSet>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<AmortisationRuleSet> setAmortisationRulesWithHttpInfo(String scope, String code, SetAmortisationRulesRequest setAmortisationRulesRequest, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = setAmortisationRulesValidateBeforeCall(scope, code, setAmortisationRulesRequest, null, opts);
        Type localVarReturnType = new TypeToken<AmortisationRuleSet>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call setAmortisationRulesAsync(String scope, String code, SetAmortisationRulesRequest setAmortisationRulesRequest, final ApiCallback<AmortisationRuleSet> _callback) throws ApiException {

        okhttp3.Call localVarCall = setAmortisationRulesValidateBeforeCall(scope, code, setAmortisationRulesRequest, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<AmortisationRuleSet>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call setAmortisationRulesAsync(String scope, String code, SetAmortisationRulesRequest setAmortisationRulesRequest, final ApiCallback<AmortisationRuleSet> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = setAmortisationRulesValidateBeforeCall(scope, code, setAmortisationRulesRequest, _callback, opts);
        Type localVarReturnType = new TypeToken<AmortisationRuleSet>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIsetAmortisationRulesRequest {
        private final String scope;
        private final String code;
        private final SetAmortisationRulesRequest setAmortisationRulesRequest;

        private APIsetAmortisationRulesRequest(String scope, String code, SetAmortisationRulesRequest setAmortisationRulesRequest) {
            this.scope = scope;
            this.code = code;
            this.setAmortisationRulesRequest = setAmortisationRulesRequest;
        }

        /**
         * Build call for setAmortisationRules
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Update the rules for an amortisation rule set. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return setAmortisationRulesCall(scope, code, setAmortisationRulesRequest, _callback);
        }

        /**
         * Execute setAmortisationRules request
         * @return AmortisationRuleSet
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Update the rules for an amortisation rule set. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public AmortisationRuleSet execute() throws ApiException {
            ApiResponse<AmortisationRuleSet> localVarResp = setAmortisationRulesWithHttpInfo(scope, code, setAmortisationRulesRequest);
            return localVarResp.getData();
        }

        /**
         * Execute setAmortisationRules request. Use any specified configuration options to override any other configuration for this request only.
         * @return AmortisationRuleSet
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Update the rules for an amortisation rule set. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public AmortisationRuleSet execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<AmortisationRuleSet> localVarResp = setAmortisationRulesWithHttpInfo(scope, code, setAmortisationRulesRequest, opts);
            return localVarResp.getData();
        }

        /**
         * Execute setAmortisationRules request with HTTP info returned
         * @return ApiResponse&lt;AmortisationRuleSet&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Update the rules for an amortisation rule set. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AmortisationRuleSet> executeWithHttpInfo() throws ApiException {
            return setAmortisationRulesWithHttpInfo(scope, code, setAmortisationRulesRequest);
        }

        /**
         * Execute setAmortisationRules request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;AmortisationRuleSet&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Update the rules for an amortisation rule set. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AmortisationRuleSet> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return setAmortisationRulesWithHttpInfo(scope, code, setAmortisationRulesRequest, opts);
        }

        /**
         * Execute setAmortisationRules request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Update the rules for an amortisation rule set. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AmortisationRuleSet> _callback) throws ApiException {
            return setAmortisationRulesAsync(scope, code, setAmortisationRulesRequest, _callback);
        }

        /**
         * Execute setAmortisationRules request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Update the rules for an amortisation rule set. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AmortisationRuleSet> _callback, ConfigurationOptions opts) throws ApiException {
            return setAmortisationRulesAsync(scope, code, setAmortisationRulesRequest, _callback, opts);
        }
    }

    /**
     * [EXPERIMENTAL] SetAmortisationRules: Set Amortisation Rules on an existing Amortisation Rule Set.
     * Sets the rules on the Amortisation Rule Set, replacing the existing rules with the set provided.
     * @param scope The rule set scope. (required)
     * @param code The rule set code. (required)
     * @param setAmortisationRulesRequest The contents of the rules. (required)
     * @return APIsetAmortisationRulesRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update the rules for an amortisation rule set. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIsetAmortisationRulesRequest setAmortisationRules(String scope, String code, SetAmortisationRulesRequest setAmortisationRulesRequest) {
        return new APIsetAmortisationRulesRequest(scope, code, setAmortisationRulesRequest);
    }
    private okhttp3.Call updateAmortisationRuleSetDetailsCall(String scope, String code, UpdateAmortisationRuleSetDetailsRequest updateAmortisationRuleSetDetailsRequest, final ApiCallback _callback) throws ApiException {
        return updateAmortisationRuleSetDetailsCall(scope, code, updateAmortisationRuleSetDetailsRequest,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call updateAmortisationRuleSetDetailsCall(String scope, String code, UpdateAmortisationRuleSetDetailsRequest updateAmortisationRuleSetDetailsRequest, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateAmortisationRuleSetDetailsRequest;

        // create path and map variables
        String localVarPath = "/api/amortisation/rulesets/{scope}/{code}/details"
            .replace("{" + "scope" + "}", localVarApiClient.escapeString(scope.toString()))
            .replace("{" + "code" + "}", localVarApiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateAmortisationRuleSetDetailsValidateBeforeCall(String scope, String code, UpdateAmortisationRuleSetDetailsRequest updateAmortisationRuleSetDetailsRequest, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling updateAmortisationRuleSetDetails(Async)");
        }

        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling updateAmortisationRuleSetDetails(Async)");
        }

        // verify the required parameter 'updateAmortisationRuleSetDetailsRequest' is set
        if (updateAmortisationRuleSetDetailsRequest == null) {
            throw new ApiException("Missing the required parameter 'updateAmortisationRuleSetDetailsRequest' when calling updateAmortisationRuleSetDetails(Async)");
        }

        return updateAmortisationRuleSetDetailsCall(scope, code, updateAmortisationRuleSetDetailsRequest, _callback, opts);

    }


    private ApiResponse<AmortisationRuleSet> updateAmortisationRuleSetDetailsWithHttpInfo(String scope, String code, UpdateAmortisationRuleSetDetailsRequest updateAmortisationRuleSetDetailsRequest) throws ApiException {
        okhttp3.Call localVarCall = updateAmortisationRuleSetDetailsValidateBeforeCall(scope, code, updateAmortisationRuleSetDetailsRequest, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<AmortisationRuleSet>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<AmortisationRuleSet> updateAmortisationRuleSetDetailsWithHttpInfo(String scope, String code, UpdateAmortisationRuleSetDetailsRequest updateAmortisationRuleSetDetailsRequest, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = updateAmortisationRuleSetDetailsValidateBeforeCall(scope, code, updateAmortisationRuleSetDetailsRequest, null, opts);
        Type localVarReturnType = new TypeToken<AmortisationRuleSet>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateAmortisationRuleSetDetailsAsync(String scope, String code, UpdateAmortisationRuleSetDetailsRequest updateAmortisationRuleSetDetailsRequest, final ApiCallback<AmortisationRuleSet> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateAmortisationRuleSetDetailsValidateBeforeCall(scope, code, updateAmortisationRuleSetDetailsRequest, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<AmortisationRuleSet>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call updateAmortisationRuleSetDetailsAsync(String scope, String code, UpdateAmortisationRuleSetDetailsRequest updateAmortisationRuleSetDetailsRequest, final ApiCallback<AmortisationRuleSet> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = updateAmortisationRuleSetDetailsValidateBeforeCall(scope, code, updateAmortisationRuleSetDetailsRequest, _callback, opts);
        Type localVarReturnType = new TypeToken<AmortisationRuleSet>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIupdateAmortisationRuleSetDetailsRequest {
        private final String scope;
        private final String code;
        private final UpdateAmortisationRuleSetDetailsRequest updateAmortisationRuleSetDetailsRequest;

        private APIupdateAmortisationRuleSetDetailsRequest(String scope, String code, UpdateAmortisationRuleSetDetailsRequest updateAmortisationRuleSetDetailsRequest) {
            this.scope = scope;
            this.code = code;
            this.updateAmortisationRuleSetDetailsRequest = updateAmortisationRuleSetDetailsRequest;
        }

        /**
         * Build call for updateAmortisationRuleSetDetails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Update the details of an Amortisation Rule Set. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return updateAmortisationRuleSetDetailsCall(scope, code, updateAmortisationRuleSetDetailsRequest, _callback);
        }

        /**
         * Execute updateAmortisationRuleSetDetails request
         * @return AmortisationRuleSet
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Update the details of an Amortisation Rule Set. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public AmortisationRuleSet execute() throws ApiException {
            ApiResponse<AmortisationRuleSet> localVarResp = updateAmortisationRuleSetDetailsWithHttpInfo(scope, code, updateAmortisationRuleSetDetailsRequest);
            return localVarResp.getData();
        }

        /**
         * Execute updateAmortisationRuleSetDetails request. Use any specified configuration options to override any other configuration for this request only.
         * @return AmortisationRuleSet
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Update the details of an Amortisation Rule Set. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public AmortisationRuleSet execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<AmortisationRuleSet> localVarResp = updateAmortisationRuleSetDetailsWithHttpInfo(scope, code, updateAmortisationRuleSetDetailsRequest, opts);
            return localVarResp.getData();
        }

        /**
         * Execute updateAmortisationRuleSetDetails request with HTTP info returned
         * @return ApiResponse&lt;AmortisationRuleSet&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Update the details of an Amortisation Rule Set. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AmortisationRuleSet> executeWithHttpInfo() throws ApiException {
            return updateAmortisationRuleSetDetailsWithHttpInfo(scope, code, updateAmortisationRuleSetDetailsRequest);
        }

        /**
         * Execute updateAmortisationRuleSetDetails request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;AmortisationRuleSet&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Update the details of an Amortisation Rule Set. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AmortisationRuleSet> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return updateAmortisationRuleSetDetailsWithHttpInfo(scope, code, updateAmortisationRuleSetDetailsRequest, opts);
        }

        /**
         * Execute updateAmortisationRuleSetDetails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Update the details of an Amortisation Rule Set. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AmortisationRuleSet> _callback) throws ApiException {
            return updateAmortisationRuleSetDetailsAsync(scope, code, updateAmortisationRuleSetDetailsRequest, _callback);
        }

        /**
         * Execute updateAmortisationRuleSetDetails request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Update the details of an Amortisation Rule Set. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AmortisationRuleSet> _callback, ConfigurationOptions opts) throws ApiException {
            return updateAmortisationRuleSetDetailsAsync(scope, code, updateAmortisationRuleSetDetailsRequest, _callback, opts);
        }
    }

    /**
     * [EXPERIMENTAL] UpdateAmortisationRuleSetDetails: Update an amortisation rule set.
     * Updates the amortisation rule set definition for all effective time.
     * @param scope The rule set scope. (required)
     * @param code The rule set code. (required)
     * @param updateAmortisationRuleSetDetailsRequest The contents of the rule set. (required)
     * @return APIupdateAmortisationRuleSetDetailsRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update the details of an Amortisation Rule Set. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIupdateAmortisationRuleSetDetailsRequest updateAmortisationRuleSetDetails(String scope, String code, UpdateAmortisationRuleSetDetailsRequest updateAmortisationRuleSetDetailsRequest) {
        return new APIupdateAmortisationRuleSetDetailsRequest(scope, code, updateAmortisationRuleSetDetailsRequest);
    }
}
