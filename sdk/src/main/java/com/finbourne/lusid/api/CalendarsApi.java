/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.api;

import com.finbourne.lusid.ApiCallback;
import com.finbourne.lusid.ApiClient;
import com.finbourne.lusid.ApiException;
import com.finbourne.lusid.ApiResponse;
import com.finbourne.lusid.Configuration;
import com.finbourne.lusid.Pair;
import com.finbourne.lusid.ProgressRequestBody;
import com.finbourne.lusid.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.finbourne.lusid.model.AddBusinessDaysToDateRequest;
import com.finbourne.lusid.model.AddBusinessDaysToDateResponse;
import com.finbourne.lusid.model.Calendar;
import com.finbourne.lusid.model.CalendarDate;
import com.finbourne.lusid.model.CreateCalendarRequest;
import com.finbourne.lusid.model.CreateDateRequest;
import com.finbourne.lusid.model.IsBusinessDayResponse;
import com.finbourne.lusid.model.LusidProblemDetails;
import com.finbourne.lusid.model.LusidValidationProblemDetails;
import java.time.OffsetDateTime;
import com.finbourne.lusid.model.PagedResourceListOfCalendar;
import com.finbourne.lusid.model.ResourceListOfCalendarDate;
import com.finbourne.lusid.model.UpdateCalendarRequest;
import com.finbourne.lusid.model.ValuationSchedule;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CalendarsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CalendarsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CalendarsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addBusinessDaysToDateCall(String scope, AddBusinessDaysToDateRequest addBusinessDaysToDateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = addBusinessDaysToDateRequest;

        // create path and map variables
        String localVarPath = "/api/calendars/businessday/{scope}/add"
            .replace("{" + "scope" + "}", localVarApiClient.escapeString(scope.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addBusinessDaysToDateValidateBeforeCall(String scope, AddBusinessDaysToDateRequest addBusinessDaysToDateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling addBusinessDaysToDate(Async)");
        }

        // verify the required parameter 'addBusinessDaysToDateRequest' is set
        if (addBusinessDaysToDateRequest == null) {
            throw new ApiException("Missing the required parameter 'addBusinessDaysToDateRequest' when calling addBusinessDaysToDate(Async)");
        }

        return addBusinessDaysToDateCall(scope, addBusinessDaysToDateRequest, _callback);

    }


    private ApiResponse<AddBusinessDaysToDateResponse> addBusinessDaysToDateWithHttpInfo(String scope, AddBusinessDaysToDateRequest addBusinessDaysToDateRequest) throws ApiException {
        okhttp3.Call localVarCall = addBusinessDaysToDateValidateBeforeCall(scope, addBusinessDaysToDateRequest, null);
        Type localVarReturnType = new TypeToken<AddBusinessDaysToDateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addBusinessDaysToDateAsync(String scope, AddBusinessDaysToDateRequest addBusinessDaysToDateRequest, final ApiCallback<AddBusinessDaysToDateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = addBusinessDaysToDateValidateBeforeCall(scope, addBusinessDaysToDateRequest, _callback);
        Type localVarReturnType = new TypeToken<AddBusinessDaysToDateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIaddBusinessDaysToDateRequest {
        private final String scope;
        private final AddBusinessDaysToDateRequest addBusinessDaysToDateRequest;

        private APIaddBusinessDaysToDateRequest(String scope, AddBusinessDaysToDateRequest addBusinessDaysToDateRequest) {
            this.scope = scope;
            this.addBusinessDaysToDateRequest = addBusinessDaysToDateRequest;
        }

        /**
         * Build call for addBusinessDaysToDate
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The business day that is a number of business days after the given date as determined by the given calendar codes </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return addBusinessDaysToDateCall(scope, addBusinessDaysToDateRequest, _callback);
        }

        /**
         * Execute addBusinessDaysToDate request
         * @return AddBusinessDaysToDateResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The business day that is a number of business days after the given date as determined by the given calendar codes </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public AddBusinessDaysToDateResponse execute() throws ApiException {
            ApiResponse<AddBusinessDaysToDateResponse> localVarResp = addBusinessDaysToDateWithHttpInfo(scope, addBusinessDaysToDateRequest);
            return localVarResp.getData();
        }

        /**
         * Execute addBusinessDaysToDate request with HTTP info returned
         * @return ApiResponse&lt;AddBusinessDaysToDateResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The business day that is a number of business days after the given date as determined by the given calendar codes </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AddBusinessDaysToDateResponse> executeWithHttpInfo() throws ApiException {
            return addBusinessDaysToDateWithHttpInfo(scope, addBusinessDaysToDateRequest);
        }

        /**
         * Execute addBusinessDaysToDate request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The business day that is a number of business days after the given date as determined by the given calendar codes </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AddBusinessDaysToDateResponse> _callback) throws ApiException {
            return addBusinessDaysToDateAsync(scope, addBusinessDaysToDateRequest, _callback);
        }
    }

    /**
     * [EARLY ACCESS] AddBusinessDaysToDate: Adds the requested number of Business Days to the provided date.
     * A Business day is defined as a point in time that:   generate justfile Does not represent a day in the calendar&#39;s weekend   generate justfile Does not represent a day in the calendar&#39;s list of holidays (e.g. Christmas Day in the UK)     All dates specified must be UTC and the upper bound of a calendar is not inclusive     e.g. From: 2020-12-24-00-00-00:   Adding 3 business days returns 2020-12-30, assuming Saturday and Sunday are weekends, and the 25th and 28th are holidays.   Adding -2 business days returns 2020-12-22 under the same assumptions.     If the provided number of days to add is zero, returns a failure.
     * @param scope Scope within which to search for the calendars (required)
     * @param addBusinessDaysToDateRequest Request Details: start date, number of days to add (which can be negative, but not zero), calendar codes and optionally an AsAt date for searching the calendar store (required)
     * @return APIaddBusinessDaysToDateRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The business day that is a number of business days after the given date as determined by the given calendar codes </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIaddBusinessDaysToDateRequest addBusinessDaysToDate(String scope, AddBusinessDaysToDateRequest addBusinessDaysToDateRequest) {
        return new APIaddBusinessDaysToDateRequest(scope, addBusinessDaysToDateRequest);
    }
    private okhttp3.Call addDateToCalendarCall(String scope, String code, CreateDateRequest createDateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createDateRequest;

        // create path and map variables
        String localVarPath = "/api/calendars/generic/{scope}/{code}/dates"
            .replace("{" + "scope" + "}", localVarApiClient.escapeString(scope.toString()))
            .replace("{" + "code" + "}", localVarApiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addDateToCalendarValidateBeforeCall(String scope, String code, CreateDateRequest createDateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling addDateToCalendar(Async)");
        }

        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling addDateToCalendar(Async)");
        }

        // verify the required parameter 'createDateRequest' is set
        if (createDateRequest == null) {
            throw new ApiException("Missing the required parameter 'createDateRequest' when calling addDateToCalendar(Async)");
        }

        return addDateToCalendarCall(scope, code, createDateRequest, _callback);

    }


    private ApiResponse<CalendarDate> addDateToCalendarWithHttpInfo(String scope, String code, CreateDateRequest createDateRequest) throws ApiException {
        okhttp3.Call localVarCall = addDateToCalendarValidateBeforeCall(scope, code, createDateRequest, null);
        Type localVarReturnType = new TypeToken<CalendarDate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addDateToCalendarAsync(String scope, String code, CreateDateRequest createDateRequest, final ApiCallback<CalendarDate> _callback) throws ApiException {

        okhttp3.Call localVarCall = addDateToCalendarValidateBeforeCall(scope, code, createDateRequest, _callback);
        Type localVarReturnType = new TypeToken<CalendarDate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIaddDateToCalendarRequest {
        private final String scope;
        private final String code;
        private final CreateDateRequest createDateRequest;

        private APIaddDateToCalendarRequest(String scope, String code, CreateDateRequest createDateRequest) {
            this.scope = scope;
            this.code = code;
            this.createDateRequest = createDateRequest;
        }

        /**
         * Build call for addDateToCalendar
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The created date </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return addDateToCalendarCall(scope, code, createDateRequest, _callback);
        }

        /**
         * Execute addDateToCalendar request
         * @return CalendarDate
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The created date </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public CalendarDate execute() throws ApiException {
            ApiResponse<CalendarDate> localVarResp = addDateToCalendarWithHttpInfo(scope, code, createDateRequest);
            return localVarResp.getData();
        }

        /**
         * Execute addDateToCalendar request with HTTP info returned
         * @return ApiResponse&lt;CalendarDate&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The created date </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CalendarDate> executeWithHttpInfo() throws ApiException {
            return addDateToCalendarWithHttpInfo(scope, code, createDateRequest);
        }

        /**
         * Execute addDateToCalendar request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The created date </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CalendarDate> _callback) throws ApiException {
            return addDateToCalendarAsync(scope, code, createDateRequest, _callback);
        }
    }

    /**
     * [EARLY ACCESS] AddDateToCalendar: Add a date to a calendar
     * Add an event to the calendar. These Events can be a maximum of 24 hours and must be specified in UTC.  A local date will be calculated by the system and applied to the calendar before processing.
     * @param scope Scope of the calendar (required)
     * @param code Code of the calendar (required)
     * @param createDateRequest Add date to calendar request (required)
     * @return APIaddDateToCalendarRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The created date </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIaddDateToCalendarRequest addDateToCalendar(String scope, String code, CreateDateRequest createDateRequest) {
        return new APIaddDateToCalendarRequest(scope, code, createDateRequest);
    }
    private okhttp3.Call createCalendarCall(CreateCalendarRequest createCalendarRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createCalendarRequest;

        // create path and map variables
        String localVarPath = "/api/calendars/generic";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createCalendarValidateBeforeCall(CreateCalendarRequest createCalendarRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createCalendarRequest' is set
        if (createCalendarRequest == null) {
            throw new ApiException("Missing the required parameter 'createCalendarRequest' when calling createCalendar(Async)");
        }

        return createCalendarCall(createCalendarRequest, _callback);

    }


    private ApiResponse<Calendar> createCalendarWithHttpInfo(CreateCalendarRequest createCalendarRequest) throws ApiException {
        okhttp3.Call localVarCall = createCalendarValidateBeforeCall(createCalendarRequest, null);
        Type localVarReturnType = new TypeToken<Calendar>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createCalendarAsync(CreateCalendarRequest createCalendarRequest, final ApiCallback<Calendar> _callback) throws ApiException {

        okhttp3.Call localVarCall = createCalendarValidateBeforeCall(createCalendarRequest, _callback);
        Type localVarReturnType = new TypeToken<Calendar>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIcreateCalendarRequest {
        private final CreateCalendarRequest createCalendarRequest;

        private APIcreateCalendarRequest(CreateCalendarRequest createCalendarRequest) {
            this.createCalendarRequest = createCalendarRequest;
        }

        /**
         * Build call for createCalendar
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The created calendar </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return createCalendarCall(createCalendarRequest, _callback);
        }

        /**
         * Execute createCalendar request
         * @return Calendar
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The created calendar </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public Calendar execute() throws ApiException {
            ApiResponse<Calendar> localVarResp = createCalendarWithHttpInfo(createCalendarRequest);
            return localVarResp.getData();
        }

        /**
         * Execute createCalendar request with HTTP info returned
         * @return ApiResponse&lt;Calendar&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The created calendar </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Calendar> executeWithHttpInfo() throws ApiException {
            return createCalendarWithHttpInfo(createCalendarRequest);
        }

        /**
         * Execute createCalendar request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The created calendar </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Calendar> _callback) throws ApiException {
            return createCalendarAsync(createCalendarRequest, _callback);
        }
    }

    /**
     * [EARLY ACCESS] CreateCalendar: Create a calendar in its generic form
     * Create a calendar in a generic form which can be used to store date events.
     * @param createCalendarRequest A request to create the calendar (required)
     * @return APIcreateCalendarRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The created calendar </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIcreateCalendarRequest createCalendar(CreateCalendarRequest createCalendarRequest) {
        return new APIcreateCalendarRequest(createCalendarRequest);
    }
    private okhttp3.Call deleteCalendarCall(String scope, String code, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/calendars/generic/{scope}/{code}"
            .replace("{" + "scope" + "}", localVarApiClient.escapeString(scope.toString()))
            .replace("{" + "code" + "}", localVarApiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteCalendarValidateBeforeCall(String scope, String code, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling deleteCalendar(Async)");
        }

        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling deleteCalendar(Async)");
        }

        return deleteCalendarCall(scope, code, _callback);

    }


    private ApiResponse<Calendar> deleteCalendarWithHttpInfo(String scope, String code) throws ApiException {
        okhttp3.Call localVarCall = deleteCalendarValidateBeforeCall(scope, code, null);
        Type localVarReturnType = new TypeToken<Calendar>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteCalendarAsync(String scope, String code, final ApiCallback<Calendar> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteCalendarValidateBeforeCall(scope, code, _callback);
        Type localVarReturnType = new TypeToken<Calendar>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIdeleteCalendarRequest {
        private final String scope;
        private final String code;

        private APIdeleteCalendarRequest(String scope, String code) {
            this.scope = scope;
            this.code = code;
        }

        /**
         * Build call for deleteCalendar
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The deleted calendar </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteCalendarCall(scope, code, _callback);
        }

        /**
         * Execute deleteCalendar request
         * @return Calendar
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The deleted calendar </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public Calendar execute() throws ApiException {
            ApiResponse<Calendar> localVarResp = deleteCalendarWithHttpInfo(scope, code);
            return localVarResp.getData();
        }

        /**
         * Execute deleteCalendar request with HTTP info returned
         * @return ApiResponse&lt;Calendar&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The deleted calendar </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Calendar> executeWithHttpInfo() throws ApiException {
            return deleteCalendarWithHttpInfo(scope, code);
        }

        /**
         * Execute deleteCalendar request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The deleted calendar </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Calendar> _callback) throws ApiException {
            return deleteCalendarAsync(scope, code, _callback);
        }
    }

    /**
     * [EARLY ACCESS] DeleteCalendar: Delete a calendar
     * Delete a calendar and all of its respective dates
     * @param scope Scope of the calendar (required)
     * @param code Code of the calendar (required)
     * @return APIdeleteCalendarRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The deleted calendar </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIdeleteCalendarRequest deleteCalendar(String scope, String code) {
        return new APIdeleteCalendarRequest(scope, code);
    }
    private okhttp3.Call deleteDateFromCalendarCall(String scope, String code, String dateId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/calendars/generic/{scope}/{code}/dates/{dateId}"
            .replace("{" + "scope" + "}", localVarApiClient.escapeString(scope.toString()))
            .replace("{" + "code" + "}", localVarApiClient.escapeString(code.toString()))
            .replace("{" + "dateId" + "}", localVarApiClient.escapeString(dateId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteDateFromCalendarValidateBeforeCall(String scope, String code, String dateId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling deleteDateFromCalendar(Async)");
        }

        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling deleteDateFromCalendar(Async)");
        }

        // verify the required parameter 'dateId' is set
        if (dateId == null) {
            throw new ApiException("Missing the required parameter 'dateId' when calling deleteDateFromCalendar(Async)");
        }

        return deleteDateFromCalendarCall(scope, code, dateId, _callback);

    }


    private ApiResponse<CalendarDate> deleteDateFromCalendarWithHttpInfo(String scope, String code, String dateId) throws ApiException {
        okhttp3.Call localVarCall = deleteDateFromCalendarValidateBeforeCall(scope, code, dateId, null);
        Type localVarReturnType = new TypeToken<CalendarDate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteDateFromCalendarAsync(String scope, String code, String dateId, final ApiCallback<CalendarDate> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteDateFromCalendarValidateBeforeCall(scope, code, dateId, _callback);
        Type localVarReturnType = new TypeToken<CalendarDate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIdeleteDateFromCalendarRequest {
        private final String scope;
        private final String code;
        private final String dateId;

        private APIdeleteDateFromCalendarRequest(String scope, String code, String dateId) {
            this.scope = scope;
            this.code = code;
            this.dateId = dateId;
        }

        /**
         * Build call for deleteDateFromCalendar
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The deleted date </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteDateFromCalendarCall(scope, code, dateId, _callback);
        }

        /**
         * Execute deleteDateFromCalendar request
         * @return CalendarDate
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The deleted date </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public CalendarDate execute() throws ApiException {
            ApiResponse<CalendarDate> localVarResp = deleteDateFromCalendarWithHttpInfo(scope, code, dateId);
            return localVarResp.getData();
        }

        /**
         * Execute deleteDateFromCalendar request with HTTP info returned
         * @return ApiResponse&lt;CalendarDate&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The deleted date </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CalendarDate> executeWithHttpInfo() throws ApiException {
            return deleteDateFromCalendarWithHttpInfo(scope, code, dateId);
        }

        /**
         * Execute deleteDateFromCalendar request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The deleted date </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CalendarDate> _callback) throws ApiException {
            return deleteDateFromCalendarAsync(scope, code, dateId, _callback);
        }
    }

    /**
     * [EARLY ACCESS] DeleteDateFromCalendar: Remove a date from a calendar
     * Remove a date from a calendar.
     * @param scope Scope of the calendar (required)
     * @param code Code of the calendar (required)
     * @param dateId Identifier of the date to be removed (required)
     * @return APIdeleteDateFromCalendarRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The deleted date </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIdeleteDateFromCalendarRequest deleteDateFromCalendar(String scope, String code, String dateId) {
        return new APIdeleteDateFromCalendarRequest(scope, code, dateId);
    }
    private okhttp3.Call generateScheduleCall(String scope, ValuationSchedule valuationSchedule, OffsetDateTime asAt, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = valuationSchedule;

        // create path and map variables
        String localVarPath = "/api/calendars/schedule/{scope}"
            .replace("{" + "scope" + "}", localVarApiClient.escapeString(scope.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (asAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asAt", asAt));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call generateScheduleValidateBeforeCall(String scope, ValuationSchedule valuationSchedule, OffsetDateTime asAt, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling generateSchedule(Async)");
        }

        // verify the required parameter 'valuationSchedule' is set
        if (valuationSchedule == null) {
            throw new ApiException("Missing the required parameter 'valuationSchedule' when calling generateSchedule(Async)");
        }

        return generateScheduleCall(scope, valuationSchedule, asAt, _callback);

    }


    private ApiResponse<List<OffsetDateTime>> generateScheduleWithHttpInfo(String scope, ValuationSchedule valuationSchedule, OffsetDateTime asAt) throws ApiException {
        okhttp3.Call localVarCall = generateScheduleValidateBeforeCall(scope, valuationSchedule, asAt, null);
        Type localVarReturnType = new TypeToken<List<OffsetDateTime>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call generateScheduleAsync(String scope, ValuationSchedule valuationSchedule, OffsetDateTime asAt, final ApiCallback<List<OffsetDateTime>> _callback) throws ApiException {

        okhttp3.Call localVarCall = generateScheduleValidateBeforeCall(scope, valuationSchedule, asAt, _callback);
        Type localVarReturnType = new TypeToken<List<OffsetDateTime>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgenerateScheduleRequest {
        private final String scope;
        private final ValuationSchedule valuationSchedule;
        private OffsetDateTime asAt;

        private APIgenerateScheduleRequest(String scope, ValuationSchedule valuationSchedule) {
            this.scope = scope;
            this.valuationSchedule = valuationSchedule;
        }

        /**
         * Set asAt
         * @param asAt Optional AsAt for searching the calendar store. Defaults to Latest. (optional)
         * @return APIgenerateScheduleRequest
         */
        public APIgenerateScheduleRequest asAt(OffsetDateTime asAt) {
            this.asAt = asAt;
            return this;
        }

        /**
         * Build call for generateSchedule
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> An array of dates in chronological order. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return generateScheduleCall(scope, valuationSchedule, asAt, _callback);
        }

        /**
         * Execute generateSchedule request
         * @return List&lt;OffsetDateTime&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> An array of dates in chronological order. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public List<OffsetDateTime> execute() throws ApiException {
            ApiResponse<List<OffsetDateTime>> localVarResp = generateScheduleWithHttpInfo(scope, valuationSchedule, asAt);
            return localVarResp.getData();
        }

        /**
         * Execute generateSchedule request with HTTP info returned
         * @return ApiResponse&lt;List&lt;OffsetDateTime&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> An array of dates in chronological order. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<OffsetDateTime>> executeWithHttpInfo() throws ApiException {
            return generateScheduleWithHttpInfo(scope, valuationSchedule, asAt);
        }

        /**
         * Execute generateSchedule request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> An array of dates in chronological order. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<OffsetDateTime>> _callback) throws ApiException {
            return generateScheduleAsync(scope, valuationSchedule, asAt, _callback);
        }
    }

    /**
     * [EARLY ACCESS] GenerateSchedule: Generate an ordered schedule of dates.
     * Returns an ordered array of dates. The dates will only fall on business  days as defined by the scope and calendar codes in the valuation schedule.     Valuations are made at a frequency defined by the valuation schedule&#39;s tenor, e.g. every day (\&quot;1D\&quot;),  every other week (\&quot;2W\&quot;) etc. These dates will be adjusted onto business days as defined by the schedule&#39;s  rollConvention.
     * @param scope Scope of the calendars to use (required)
     * @param valuationSchedule The ValuationSchedule to generate schedule dates from (required)
     * @return APIgenerateScheduleRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An array of dates in chronological order. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIgenerateScheduleRequest generateSchedule(String scope, ValuationSchedule valuationSchedule) {
        return new APIgenerateScheduleRequest(scope, valuationSchedule);
    }
    private okhttp3.Call getCalendarCall(String scope, String code, List<String> propertyKeys, OffsetDateTime asAt, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/calendars/generic/{scope}/{code}"
            .replace("{" + "scope" + "}", localVarApiClient.escapeString(scope.toString()))
            .replace("{" + "code" + "}", localVarApiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (propertyKeys != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "propertyKeys", propertyKeys));
        }

        if (asAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asAt", asAt));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCalendarValidateBeforeCall(String scope, String code, List<String> propertyKeys, OffsetDateTime asAt, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling getCalendar(Async)");
        }

        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling getCalendar(Async)");
        }

        return getCalendarCall(scope, code, propertyKeys, asAt, _callback);

    }


    private ApiResponse<Calendar> getCalendarWithHttpInfo(String scope, String code, List<String> propertyKeys, OffsetDateTime asAt) throws ApiException {
        okhttp3.Call localVarCall = getCalendarValidateBeforeCall(scope, code, propertyKeys, asAt, null);
        Type localVarReturnType = new TypeToken<Calendar>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCalendarAsync(String scope, String code, List<String> propertyKeys, OffsetDateTime asAt, final ApiCallback<Calendar> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCalendarValidateBeforeCall(scope, code, propertyKeys, asAt, _callback);
        Type localVarReturnType = new TypeToken<Calendar>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetCalendarRequest {
        private final String scope;
        private final String code;
        private List<String> propertyKeys;
        private OffsetDateTime asAt;

        private APIgetCalendarRequest(String scope, String code) {
            this.scope = scope;
            this.code = code;
        }

        /**
         * Set propertyKeys
         * @param propertyKeys A list of property keys from the \&quot;Calendar\&quot; domain to decorate onto the calendar,    These take the format {domain}/{scope}/{code} e.g. \&quot;Calendar/System/Name\&quot;. (optional)
         * @return APIgetCalendarRequest
         */
        public APIgetCalendarRequest propertyKeys(List<String> propertyKeys) {
            this.propertyKeys = propertyKeys;
            return this;
        }

        /**
         * Set asAt
         * @param asAt The AsAt datetime at which to retrieve the calendar (optional)
         * @return APIgetCalendarRequest
         */
        public APIgetCalendarRequest asAt(OffsetDateTime asAt) {
            this.asAt = asAt;
            return this;
        }

        /**
         * Build call for getCalendar
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested calendar </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCalendarCall(scope, code, propertyKeys, asAt, _callback);
        }

        /**
         * Execute getCalendar request
         * @return Calendar
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested calendar </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public Calendar execute() throws ApiException {
            ApiResponse<Calendar> localVarResp = getCalendarWithHttpInfo(scope, code, propertyKeys, asAt);
            return localVarResp.getData();
        }

        /**
         * Execute getCalendar request with HTTP info returned
         * @return ApiResponse&lt;Calendar&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested calendar </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Calendar> executeWithHttpInfo() throws ApiException {
            return getCalendarWithHttpInfo(scope, code, propertyKeys, asAt);
        }

        /**
         * Execute getCalendar request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested calendar </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Calendar> _callback) throws ApiException {
            return getCalendarAsync(scope, code, propertyKeys, asAt, _callback);
        }
    }

    /**
     * [EARLY ACCESS] GetCalendar: Get a calendar in its generic form
     * Retrieve a generic calendar by a specific ID at a point in AsAt time
     * @param scope Scope of the calendar identifier (required)
     * @param code Code of the calendar identifier (required)
     * @return APIgetCalendarRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested calendar </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIgetCalendarRequest getCalendar(String scope, String code) {
        return new APIgetCalendarRequest(scope, code);
    }
    private okhttp3.Call getDatesCall(String scope, String code, String fromEffectiveAt, String toEffectiveAt, OffsetDateTime asAt, List<String> idFilter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/calendars/generic/{scope}/{code}/dates"
            .replace("{" + "scope" + "}", localVarApiClient.escapeString(scope.toString()))
            .replace("{" + "code" + "}", localVarApiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fromEffectiveAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fromEffectiveAt", fromEffectiveAt));
        }

        if (toEffectiveAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("toEffectiveAt", toEffectiveAt));
        }

        if (asAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asAt", asAt));
        }

        if (idFilter != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "idFilter", idFilter));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDatesValidateBeforeCall(String scope, String code, String fromEffectiveAt, String toEffectiveAt, OffsetDateTime asAt, List<String> idFilter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling getDates(Async)");
        }

        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling getDates(Async)");
        }

        return getDatesCall(scope, code, fromEffectiveAt, toEffectiveAt, asAt, idFilter, _callback);

    }


    private ApiResponse<ResourceListOfCalendarDate> getDatesWithHttpInfo(String scope, String code, String fromEffectiveAt, String toEffectiveAt, OffsetDateTime asAt, List<String> idFilter) throws ApiException {
        okhttp3.Call localVarCall = getDatesValidateBeforeCall(scope, code, fromEffectiveAt, toEffectiveAt, asAt, idFilter, null);
        Type localVarReturnType = new TypeToken<ResourceListOfCalendarDate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getDatesAsync(String scope, String code, String fromEffectiveAt, String toEffectiveAt, OffsetDateTime asAt, List<String> idFilter, final ApiCallback<ResourceListOfCalendarDate> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDatesValidateBeforeCall(scope, code, fromEffectiveAt, toEffectiveAt, asAt, idFilter, _callback);
        Type localVarReturnType = new TypeToken<ResourceListOfCalendarDate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetDatesRequest {
        private final String scope;
        private final String code;
        private String fromEffectiveAt;
        private String toEffectiveAt;
        private OffsetDateTime asAt;
        private List<String> idFilter;

        private APIgetDatesRequest(String scope, String code) {
            this.scope = scope;
            this.code = code;
        }

        /**
         * Set fromEffectiveAt
         * @param fromEffectiveAt Where the effective window of dates should begin from (optional)
         * @return APIgetDatesRequest
         */
        public APIgetDatesRequest fromEffectiveAt(String fromEffectiveAt) {
            this.fromEffectiveAt = fromEffectiveAt;
            return this;
        }

        /**
         * Set toEffectiveAt
         * @param toEffectiveAt Where the effective window of dates should end (optional)
         * @return APIgetDatesRequest
         */
        public APIgetDatesRequest toEffectiveAt(String toEffectiveAt) {
            this.toEffectiveAt = toEffectiveAt;
            return this;
        }

        /**
         * Set asAt
         * @param asAt AsAt the dates should be retrieved at (optional)
         * @return APIgetDatesRequest
         */
        public APIgetDatesRequest asAt(OffsetDateTime asAt) {
            this.asAt = asAt;
            return this;
        }

        /**
         * Set idFilter
         * @param idFilter An additional filter that will filter dates based on their identifer (optional)
         * @return APIgetDatesRequest
         */
        public APIgetDatesRequest idFilter(List<String> idFilter) {
            this.idFilter = idFilter;
            return this;
        }

        /**
         * Build call for getDates
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested date </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getDatesCall(scope, code, fromEffectiveAt, toEffectiveAt, asAt, idFilter, _callback);
        }

        /**
         * Execute getDates request
         * @return ResourceListOfCalendarDate
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested date </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ResourceListOfCalendarDate execute() throws ApiException {
            ApiResponse<ResourceListOfCalendarDate> localVarResp = getDatesWithHttpInfo(scope, code, fromEffectiveAt, toEffectiveAt, asAt, idFilter);
            return localVarResp.getData();
        }

        /**
         * Execute getDates request with HTTP info returned
         * @return ApiResponse&lt;ResourceListOfCalendarDate&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested date </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ResourceListOfCalendarDate> executeWithHttpInfo() throws ApiException {
            return getDatesWithHttpInfo(scope, code, fromEffectiveAt, toEffectiveAt, asAt, idFilter);
        }

        /**
         * Execute getDates request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested date </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ResourceListOfCalendarDate> _callback) throws ApiException {
            return getDatesAsync(scope, code, fromEffectiveAt, toEffectiveAt, asAt, idFilter, _callback);
        }
    }

    /**
     * [EARLY ACCESS] GetDates: Get dates for a specific calendar
     * Get dates from a specific calendar within a specific window of effective time, at a point in AsAt time.  Providing an id filter can further refine the results.
     * @param scope Scope of the calendar (required)
     * @param code Code of the calendar (required)
     * @return APIgetDatesRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested date </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIgetDatesRequest getDates(String scope, String code) {
        return new APIgetDatesRequest(scope, code);
    }
    private okhttp3.Call isBusinessDateTimeCall(OffsetDateTime dateTime, String scope, String code, OffsetDateTime asAt, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/calendars/businessday/{scope}/{code}"
            .replace("{" + "scope" + "}", localVarApiClient.escapeString(scope.toString()))
            .replace("{" + "code" + "}", localVarApiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (dateTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dateTime", dateTime));
        }

        if (asAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asAt", asAt));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call isBusinessDateTimeValidateBeforeCall(OffsetDateTime dateTime, String scope, String code, OffsetDateTime asAt, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dateTime' is set
        if (dateTime == null) {
            throw new ApiException("Missing the required parameter 'dateTime' when calling isBusinessDateTime(Async)");
        }

        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling isBusinessDateTime(Async)");
        }

        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling isBusinessDateTime(Async)");
        }

        return isBusinessDateTimeCall(dateTime, scope, code, asAt, _callback);

    }


    private ApiResponse<IsBusinessDayResponse> isBusinessDateTimeWithHttpInfo(OffsetDateTime dateTime, String scope, String code, OffsetDateTime asAt) throws ApiException {
        okhttp3.Call localVarCall = isBusinessDateTimeValidateBeforeCall(dateTime, scope, code, asAt, null);
        Type localVarReturnType = new TypeToken<IsBusinessDayResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call isBusinessDateTimeAsync(OffsetDateTime dateTime, String scope, String code, OffsetDateTime asAt, final ApiCallback<IsBusinessDayResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = isBusinessDateTimeValidateBeforeCall(dateTime, scope, code, asAt, _callback);
        Type localVarReturnType = new TypeToken<IsBusinessDayResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIisBusinessDateTimeRequest {
        private final OffsetDateTime dateTime;
        private final String scope;
        private final String code;
        private OffsetDateTime asAt;

        private APIisBusinessDateTimeRequest(OffsetDateTime dateTime, String scope, String code) {
            this.dateTime = dateTime;
            this.scope = scope;
            this.code = code;
        }

        /**
         * Set asAt
         * @param asAt AsAt for the request (optional)
         * @return APIisBusinessDateTimeRequest
         */
        public APIisBusinessDateTimeRequest asAt(OffsetDateTime asAt) {
            this.asAt = asAt;
            return this;
        }

        /**
         * Build call for isBusinessDateTime
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Whether or not the requested DateTime is a BusinessDay or not </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return isBusinessDateTimeCall(dateTime, scope, code, asAt, _callback);
        }

        /**
         * Execute isBusinessDateTime request
         * @return IsBusinessDayResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Whether or not the requested DateTime is a BusinessDay or not </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public IsBusinessDayResponse execute() throws ApiException {
            ApiResponse<IsBusinessDayResponse> localVarResp = isBusinessDateTimeWithHttpInfo(dateTime, scope, code, asAt);
            return localVarResp.getData();
        }

        /**
         * Execute isBusinessDateTime request with HTTP info returned
         * @return ApiResponse&lt;IsBusinessDayResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Whether or not the requested DateTime is a BusinessDay or not </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<IsBusinessDayResponse> executeWithHttpInfo() throws ApiException {
            return isBusinessDateTimeWithHttpInfo(dateTime, scope, code, asAt);
        }

        /**
         * Execute isBusinessDateTime request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Whether or not the requested DateTime is a BusinessDay or not </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<IsBusinessDayResponse> _callback) throws ApiException {
            return isBusinessDateTimeAsync(dateTime, scope, code, asAt, _callback);
        }
    }

    /**
     * [EARLY ACCESS] IsBusinessDateTime: Check whether a DateTime is a \&quot;Business DateTime\&quot;
     * A Business DateTime is defined as a point in time that:   generate justfile Does not represent a day that overlaps with the calendars WeekendMask   generate justfile If the calendar is a \&quot;Holiday Calendar\&quot; Does not overlap with any dates in the calendar   generate justfile If the calendar is a \&quot;TradingHours Calendar\&quot; Does overlap with a date in the calendar     All dates specified must be UTC and the upper bound of a calendar is not inclusive   e.g. From: 2020-12-25-00-00-00    To: 2020-12-26-00-00-00  IsBusinessDay(2020-12-26-00-00-00) &#x3D;&#x3D; false
     * @param dateTime DateTime to check - This DateTime must be UTC (required)
     * @param scope Scope of the calendar (required)
     * @param code Code of the calendar (required)
     * @return APIisBusinessDateTimeRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Whether or not the requested DateTime is a BusinessDay or not </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIisBusinessDateTimeRequest isBusinessDateTime(OffsetDateTime dateTime, String scope, String code) {
        return new APIisBusinessDateTimeRequest(dateTime, scope, code);
    }
    private okhttp3.Call listCalendarsCall(OffsetDateTime asAt, String page, Integer limit, List<String> propertyKeys, String filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/calendars/generic";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (asAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asAt", asAt));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (propertyKeys != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "propertyKeys", propertyKeys));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listCalendarsValidateBeforeCall(OffsetDateTime asAt, String page, Integer limit, List<String> propertyKeys, String filter, final ApiCallback _callback) throws ApiException {
        return listCalendarsCall(asAt, page, limit, propertyKeys, filter, _callback);

    }


    private ApiResponse<PagedResourceListOfCalendar> listCalendarsWithHttpInfo(OffsetDateTime asAt, String page, Integer limit, List<String> propertyKeys, String filter) throws ApiException {
        okhttp3.Call localVarCall = listCalendarsValidateBeforeCall(asAt, page, limit, propertyKeys, filter, null);
        Type localVarReturnType = new TypeToken<PagedResourceListOfCalendar>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listCalendarsAsync(OffsetDateTime asAt, String page, Integer limit, List<String> propertyKeys, String filter, final ApiCallback<PagedResourceListOfCalendar> _callback) throws ApiException {

        okhttp3.Call localVarCall = listCalendarsValidateBeforeCall(asAt, page, limit, propertyKeys, filter, _callback);
        Type localVarReturnType = new TypeToken<PagedResourceListOfCalendar>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIlistCalendarsRequest {
        private OffsetDateTime asAt;
        private String page;
        private Integer limit;
        private List<String> propertyKeys;
        private String filter;

        private APIlistCalendarsRequest() {
        }

        /**
         * Set asAt
         * @param asAt The AsAt datetime at which to retrieve the calendars (optional)
         * @return APIlistCalendarsRequest
         */
        public APIlistCalendarsRequest asAt(OffsetDateTime asAt) {
            this.asAt = asAt;
            return this;
        }

        /**
         * Set page
         * @param page The pagination token to use to continue listing calendars from a previous call to list calendars.   This value is returned from the previous call. If a pagination token is provided the sortBy, filter, and asAt fields   must not have changed since the original request. (optional)
         * @return APIlistCalendarsRequest
         */
        public APIlistCalendarsRequest page(String page) {
            this.page = page;
            return this;
        }

        /**
         * Set limit
         * @param limit When paginating, limit the number of returned results to this many. (optional)
         * @return APIlistCalendarsRequest
         */
        public APIlistCalendarsRequest limit(Integer limit) {
            this.limit = limit;
            return this;
        }

        /**
         * Set propertyKeys
         * @param propertyKeys A list of property keys from the \&quot;Calendar\&quot; domain to decorate onto the calendar,    These take the format {domain}/{scope}/{code} e.g. \&quot;Calendar/System/Name\&quot;. (optional)
         * @return APIlistCalendarsRequest
         */
        public APIlistCalendarsRequest propertyKeys(List<String> propertyKeys) {
            this.propertyKeys = propertyKeys;
            return this;
        }

        /**
         * Set filter
         * @param filter Expression to filter the result set. Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid. (optional)
         * @return APIlistCalendarsRequest
         */
        public APIlistCalendarsRequest filter(String filter) {
            this.filter = filter;
            return this;
        }

        /**
         * Build call for listCalendars
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List Calendars </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listCalendarsCall(asAt, page, limit, propertyKeys, filter, _callback);
        }

        /**
         * Execute listCalendars request
         * @return PagedResourceListOfCalendar
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List Calendars </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public PagedResourceListOfCalendar execute() throws ApiException {
            ApiResponse<PagedResourceListOfCalendar> localVarResp = listCalendarsWithHttpInfo(asAt, page, limit, propertyKeys, filter);
            return localVarResp.getData();
        }

        /**
         * Execute listCalendars request with HTTP info returned
         * @return ApiResponse&lt;PagedResourceListOfCalendar&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List Calendars </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PagedResourceListOfCalendar> executeWithHttpInfo() throws ApiException {
            return listCalendarsWithHttpInfo(asAt, page, limit, propertyKeys, filter);
        }

        /**
         * Execute listCalendars request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List Calendars </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PagedResourceListOfCalendar> _callback) throws ApiException {
            return listCalendarsAsync(asAt, page, limit, propertyKeys, filter, _callback);
        }
    }

    /**
     * [EARLY ACCESS] ListCalendars: List Calendars
     * List calendars at a point in AsAt time.
     * @return APIlistCalendarsRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Calendars </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIlistCalendarsRequest listCalendars() {
        return new APIlistCalendarsRequest();
    }
    private okhttp3.Call listCalendarsInScopeCall(String scope, OffsetDateTime asAt, String page, Integer limit, List<String> propertyKeys, String filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/calendars/generic/{scope}"
            .replace("{" + "scope" + "}", localVarApiClient.escapeString(scope.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (asAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asAt", asAt));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (propertyKeys != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "propertyKeys", propertyKeys));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listCalendarsInScopeValidateBeforeCall(String scope, OffsetDateTime asAt, String page, Integer limit, List<String> propertyKeys, String filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling listCalendarsInScope(Async)");
        }

        return listCalendarsInScopeCall(scope, asAt, page, limit, propertyKeys, filter, _callback);

    }


    private ApiResponse<PagedResourceListOfCalendar> listCalendarsInScopeWithHttpInfo(String scope, OffsetDateTime asAt, String page, Integer limit, List<String> propertyKeys, String filter) throws ApiException {
        okhttp3.Call localVarCall = listCalendarsInScopeValidateBeforeCall(scope, asAt, page, limit, propertyKeys, filter, null);
        Type localVarReturnType = new TypeToken<PagedResourceListOfCalendar>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listCalendarsInScopeAsync(String scope, OffsetDateTime asAt, String page, Integer limit, List<String> propertyKeys, String filter, final ApiCallback<PagedResourceListOfCalendar> _callback) throws ApiException {

        okhttp3.Call localVarCall = listCalendarsInScopeValidateBeforeCall(scope, asAt, page, limit, propertyKeys, filter, _callback);
        Type localVarReturnType = new TypeToken<PagedResourceListOfCalendar>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIlistCalendarsInScopeRequest {
        private final String scope;
        private OffsetDateTime asAt;
        private String page;
        private Integer limit;
        private List<String> propertyKeys;
        private String filter;

        private APIlistCalendarsInScopeRequest(String scope) {
            this.scope = scope;
        }

        /**
         * Set asAt
         * @param asAt The AsAt datetime at which to retrieve the calendars (optional)
         * @return APIlistCalendarsInScopeRequest
         */
        public APIlistCalendarsInScopeRequest asAt(OffsetDateTime asAt) {
            this.asAt = asAt;
            return this;
        }

        /**
         * Set page
         * @param page The pagination token to use to continue listing calendars from a previous call to list calendars.   This value is returned from the previous call. If a pagination token is provided the sortBy, filter, and asAt fields   must not have changed since the original request. (optional)
         * @return APIlistCalendarsInScopeRequest
         */
        public APIlistCalendarsInScopeRequest page(String page) {
            this.page = page;
            return this;
        }

        /**
         * Set limit
         * @param limit When paginating, limit the number of returned results to this many. (optional)
         * @return APIlistCalendarsInScopeRequest
         */
        public APIlistCalendarsInScopeRequest limit(Integer limit) {
            this.limit = limit;
            return this;
        }

        /**
         * Set propertyKeys
         * @param propertyKeys A list of property keys from the \&quot;Calendar\&quot; domain to decorate onto the calendar,    These take the format {domain}/{scope}/{code} e.g. \&quot;Calendar/System/Name\&quot;. (optional)
         * @return APIlistCalendarsInScopeRequest
         */
        public APIlistCalendarsInScopeRequest propertyKeys(List<String> propertyKeys) {
            this.propertyKeys = propertyKeys;
            return this;
        }

        /**
         * Set filter
         * @param filter Expression to filter the result set. Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid. (optional)
         * @return APIlistCalendarsInScopeRequest
         */
        public APIlistCalendarsInScopeRequest filter(String filter) {
            this.filter = filter;
            return this;
        }

        /**
         * Build call for listCalendarsInScope
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Calendars in the requested scope </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listCalendarsInScopeCall(scope, asAt, page, limit, propertyKeys, filter, _callback);
        }

        /**
         * Execute listCalendarsInScope request
         * @return PagedResourceListOfCalendar
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Calendars in the requested scope </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public PagedResourceListOfCalendar execute() throws ApiException {
            ApiResponse<PagedResourceListOfCalendar> localVarResp = listCalendarsInScopeWithHttpInfo(scope, asAt, page, limit, propertyKeys, filter);
            return localVarResp.getData();
        }

        /**
         * Execute listCalendarsInScope request with HTTP info returned
         * @return ApiResponse&lt;PagedResourceListOfCalendar&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Calendars in the requested scope </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PagedResourceListOfCalendar> executeWithHttpInfo() throws ApiException {
            return listCalendarsInScopeWithHttpInfo(scope, asAt, page, limit, propertyKeys, filter);
        }

        /**
         * Execute listCalendarsInScope request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Calendars in the requested scope </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PagedResourceListOfCalendar> _callback) throws ApiException {
            return listCalendarsInScopeAsync(scope, asAt, page, limit, propertyKeys, filter, _callback);
        }
    }

    /**
     * [EARLY ACCESS] ListCalendarsInScope: List all calenders in a specified scope
     * List calendars in a Scope at a point in AsAt time.
     * @param scope Scope of the calendars (required)
     * @return APIlistCalendarsInScopeRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Calendars in the requested scope </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIlistCalendarsInScopeRequest listCalendarsInScope(String scope) {
        return new APIlistCalendarsInScopeRequest(scope);
    }
    private okhttp3.Call updateCalendarCall(String scope, String code, UpdateCalendarRequest updateCalendarRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateCalendarRequest;

        // create path and map variables
        String localVarPath = "/api/calendars/generic/{scope}/{code}"
            .replace("{" + "scope" + "}", localVarApiClient.escapeString(scope.toString()))
            .replace("{" + "code" + "}", localVarApiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateCalendarValidateBeforeCall(String scope, String code, UpdateCalendarRequest updateCalendarRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling updateCalendar(Async)");
        }

        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling updateCalendar(Async)");
        }

        // verify the required parameter 'updateCalendarRequest' is set
        if (updateCalendarRequest == null) {
            throw new ApiException("Missing the required parameter 'updateCalendarRequest' when calling updateCalendar(Async)");
        }

        return updateCalendarCall(scope, code, updateCalendarRequest, _callback);

    }


    private ApiResponse<Calendar> updateCalendarWithHttpInfo(String scope, String code, UpdateCalendarRequest updateCalendarRequest) throws ApiException {
        okhttp3.Call localVarCall = updateCalendarValidateBeforeCall(scope, code, updateCalendarRequest, null);
        Type localVarReturnType = new TypeToken<Calendar>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateCalendarAsync(String scope, String code, UpdateCalendarRequest updateCalendarRequest, final ApiCallback<Calendar> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateCalendarValidateBeforeCall(scope, code, updateCalendarRequest, _callback);
        Type localVarReturnType = new TypeToken<Calendar>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIupdateCalendarRequest {
        private final String scope;
        private final String code;
        private final UpdateCalendarRequest updateCalendarRequest;

        private APIupdateCalendarRequest(String scope, String code, UpdateCalendarRequest updateCalendarRequest) {
            this.scope = scope;
            this.code = code;
            this.updateCalendarRequest = updateCalendarRequest;
        }

        /**
         * Build call for updateCalendar
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The updated calendar </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return updateCalendarCall(scope, code, updateCalendarRequest, _callback);
        }

        /**
         * Execute updateCalendar request
         * @return Calendar
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The updated calendar </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public Calendar execute() throws ApiException {
            ApiResponse<Calendar> localVarResp = updateCalendarWithHttpInfo(scope, code, updateCalendarRequest);
            return localVarResp.getData();
        }

        /**
         * Execute updateCalendar request with HTTP info returned
         * @return ApiResponse&lt;Calendar&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The updated calendar </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Calendar> executeWithHttpInfo() throws ApiException {
            return updateCalendarWithHttpInfo(scope, code, updateCalendarRequest);
        }

        /**
         * Execute updateCalendar request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The updated calendar </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Calendar> _callback) throws ApiException {
            return updateCalendarAsync(scope, code, updateCalendarRequest, _callback);
        }
    }

    /**
     * [EARLY ACCESS] UpdateCalendar: Update a calendar
     * Update the calendars WeekendMask, SourceProvider or Properties
     * @param scope Scope of the request (required)
     * @param code Code of the request (required)
     * @param updateCalendarRequest The new state of the calendar (required)
     * @return APIupdateCalendarRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated calendar </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIupdateCalendarRequest updateCalendar(String scope, String code, UpdateCalendarRequest updateCalendarRequest) {
        return new APIupdateCalendarRequest(scope, code, updateCalendarRequest);
    }
}
