/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.api;

import com.finbourne.lusid.ApiCallback;
import com.finbourne.lusid.ApiClient;
import com.finbourne.lusid.ApiException;
import com.finbourne.lusid.ApiResponse;
import com.finbourne.lusid.Configuration;
import com.finbourne.lusid.Pair;
import com.finbourne.lusid.ProgressRequestBody;
import com.finbourne.lusid.ProgressResponseBody;
import com.finbourne.lusid.extensions.ConfigurationOptions;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.finbourne.lusid.model.ClosedPeriod;
import com.finbourne.lusid.model.CreateClosedPeriodRequest;
import com.finbourne.lusid.model.CreateTimelineRequest;
import com.finbourne.lusid.model.DeletedEntityResponse;
import com.finbourne.lusid.model.LusidProblemDetails;
import com.finbourne.lusid.model.LusidValidationProblemDetails;
import java.time.OffsetDateTime;
import com.finbourne.lusid.model.PagedResourceListOfClosedPeriod;
import com.finbourne.lusid.model.Timeline;
import com.finbourne.lusid.model.UpdateTimelineRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TimelinesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TimelinesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TimelinesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createClosedPeriodCall(String scope, String code, CreateClosedPeriodRequest createClosedPeriodRequest, final ApiCallback _callback) throws ApiException {
        return createClosedPeriodCall(scope, code, createClosedPeriodRequest,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call createClosedPeriodCall(String scope, String code, CreateClosedPeriodRequest createClosedPeriodRequest, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createClosedPeriodRequest;

        // create path and map variables
        String localVarPath = "/api/timelines/{scope}/{code}/closedperiods"
            .replace("{" + "scope" + "}", localVarApiClient.escapeString(scope.toString()))
            .replace("{" + "code" + "}", localVarApiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createClosedPeriodValidateBeforeCall(String scope, String code, CreateClosedPeriodRequest createClosedPeriodRequest, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling createClosedPeriod(Async)");
        }

        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling createClosedPeriod(Async)");
        }

        return createClosedPeriodCall(scope, code, createClosedPeriodRequest, _callback, opts);

    }


    private ApiResponse<ClosedPeriod> createClosedPeriodWithHttpInfo(String scope, String code, CreateClosedPeriodRequest createClosedPeriodRequest) throws ApiException {
        okhttp3.Call localVarCall = createClosedPeriodValidateBeforeCall(scope, code, createClosedPeriodRequest, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<ClosedPeriod>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<ClosedPeriod> createClosedPeriodWithHttpInfo(String scope, String code, CreateClosedPeriodRequest createClosedPeriodRequest, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = createClosedPeriodValidateBeforeCall(scope, code, createClosedPeriodRequest, null, opts);
        Type localVarReturnType = new TypeToken<ClosedPeriod>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createClosedPeriodAsync(String scope, String code, CreateClosedPeriodRequest createClosedPeriodRequest, final ApiCallback<ClosedPeriod> _callback) throws ApiException {

        okhttp3.Call localVarCall = createClosedPeriodValidateBeforeCall(scope, code, createClosedPeriodRequest, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<ClosedPeriod>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call createClosedPeriodAsync(String scope, String code, CreateClosedPeriodRequest createClosedPeriodRequest, final ApiCallback<ClosedPeriod> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = createClosedPeriodValidateBeforeCall(scope, code, createClosedPeriodRequest, _callback, opts);
        Type localVarReturnType = new TypeToken<ClosedPeriod>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIcreateClosedPeriodRequest {
        private final String scope;
        private final String code;
        private CreateClosedPeriodRequest createClosedPeriodRequest;

        private APIcreateClosedPeriodRequest(String scope, String code) {
            this.scope = scope;
            this.code = code;
        }

        /**
         * Set createClosedPeriodRequest
         * @param createClosedPeriodRequest The request containing the details of the Closed Period (optional)
         * @return APIcreateClosedPeriodRequest
         */
        public APIcreateClosedPeriodRequest createClosedPeriodRequest(CreateClosedPeriodRequest createClosedPeriodRequest) {
            this.createClosedPeriodRequest = createClosedPeriodRequest;
            return this;
        }

        /**
         * Build call for createClosedPeriod
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The created closed period </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return createClosedPeriodCall(scope, code, createClosedPeriodRequest, _callback);
        }

        /**
         * Execute createClosedPeriod request
         * @return ClosedPeriod
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The created closed period </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ClosedPeriod execute() throws ApiException {
            ApiResponse<ClosedPeriod> localVarResp = createClosedPeriodWithHttpInfo(scope, code, createClosedPeriodRequest);
            return localVarResp.getData();
        }

        /**
         * Execute createClosedPeriod request. Use any specified configuration options to override any other configuration for this request only.
         * @return ClosedPeriod
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The created closed period </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ClosedPeriod execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<ClosedPeriod> localVarResp = createClosedPeriodWithHttpInfo(scope, code, createClosedPeriodRequest, opts);
            return localVarResp.getData();
        }

        /**
         * Execute createClosedPeriod request with HTTP info returned
         * @return ApiResponse&lt;ClosedPeriod&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The created closed period </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ClosedPeriod> executeWithHttpInfo() throws ApiException {
            return createClosedPeriodWithHttpInfo(scope, code, createClosedPeriodRequest);
        }

        /**
         * Execute createClosedPeriod request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;ClosedPeriod&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The created closed period </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ClosedPeriod> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return createClosedPeriodWithHttpInfo(scope, code, createClosedPeriodRequest, opts);
        }

        /**
         * Execute createClosedPeriod request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The created closed period </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ClosedPeriod> _callback) throws ApiException {
            return createClosedPeriodAsync(scope, code, createClosedPeriodRequest, _callback);
        }

        /**
         * Execute createClosedPeriod request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The created closed period </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ClosedPeriod> _callback, ConfigurationOptions opts) throws ApiException {
            return createClosedPeriodAsync(scope, code, createClosedPeriodRequest, _callback, opts);
        }
    }

    /**
     * [EXPERIMENTAL] CreateClosedPeriod: Create a new closed period against a timeline entity
     * Creates a new closed period against a timeline entity  Returns the newly created closed period entity with properties
     * @param scope The scope of the specified Timeline. (required)
     * @param code The code of the specified Timeline. Together with the domain and scope this uniquely identifies the Timeline. (required)
     * @return APIcreateClosedPeriodRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The created closed period </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIcreateClosedPeriodRequest createClosedPeriod(String scope, String code) {
        return new APIcreateClosedPeriodRequest(scope, code);
    }
    private okhttp3.Call createTimelineCall(CreateTimelineRequest createTimelineRequest, final ApiCallback _callback) throws ApiException {
        return createTimelineCall(createTimelineRequest,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call createTimelineCall(CreateTimelineRequest createTimelineRequest, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createTimelineRequest;

        // create path and map variables
        String localVarPath = "/api/timelines";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createTimelineValidateBeforeCall(CreateTimelineRequest createTimelineRequest, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        return createTimelineCall(createTimelineRequest, _callback, opts);

    }


    private ApiResponse<Timeline> createTimelineWithHttpInfo(CreateTimelineRequest createTimelineRequest) throws ApiException {
        okhttp3.Call localVarCall = createTimelineValidateBeforeCall(createTimelineRequest, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<Timeline>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<Timeline> createTimelineWithHttpInfo(CreateTimelineRequest createTimelineRequest, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = createTimelineValidateBeforeCall(createTimelineRequest, null, opts);
        Type localVarReturnType = new TypeToken<Timeline>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createTimelineAsync(CreateTimelineRequest createTimelineRequest, final ApiCallback<Timeline> _callback) throws ApiException {

        okhttp3.Call localVarCall = createTimelineValidateBeforeCall(createTimelineRequest, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<Timeline>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call createTimelineAsync(CreateTimelineRequest createTimelineRequest, final ApiCallback<Timeline> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = createTimelineValidateBeforeCall(createTimelineRequest, _callback, opts);
        Type localVarReturnType = new TypeToken<Timeline>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIcreateTimelineRequest {
        private CreateTimelineRequest createTimelineRequest;

        private APIcreateTimelineRequest() {
        }

        /**
         * Set createTimelineRequest
         * @param createTimelineRequest The request containing the details of the Timeline (optional)
         * @return APIcreateTimelineRequest
         */
        public APIcreateTimelineRequest createTimelineRequest(CreateTimelineRequest createTimelineRequest) {
            this.createTimelineRequest = createTimelineRequest;
            return this;
        }

        /**
         * Build call for createTimeline
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The created Timeline </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return createTimelineCall(createTimelineRequest, _callback);
        }

        /**
         * Execute createTimeline request
         * @return Timeline
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The created Timeline </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public Timeline execute() throws ApiException {
            ApiResponse<Timeline> localVarResp = createTimelineWithHttpInfo(createTimelineRequest);
            return localVarResp.getData();
        }

        /**
         * Execute createTimeline request. Use any specified configuration options to override any other configuration for this request only.
         * @return Timeline
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The created Timeline </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public Timeline execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<Timeline> localVarResp = createTimelineWithHttpInfo(createTimelineRequest, opts);
            return localVarResp.getData();
        }

        /**
         * Execute createTimeline request with HTTP info returned
         * @return ApiResponse&lt;Timeline&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The created Timeline </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Timeline> executeWithHttpInfo() throws ApiException {
            return createTimelineWithHttpInfo(createTimelineRequest);
        }

        /**
         * Execute createTimeline request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;Timeline&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The created Timeline </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Timeline> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return createTimelineWithHttpInfo(createTimelineRequest, opts);
        }

        /**
         * Execute createTimeline request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The created Timeline </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Timeline> _callback) throws ApiException {
            return createTimelineAsync(createTimelineRequest, _callback);
        }

        /**
         * Execute createTimeline request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The created Timeline </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Timeline> _callback, ConfigurationOptions opts) throws ApiException {
            return createTimelineAsync(createTimelineRequest, _callback, opts);
        }
    }

    /**
     * [EXPERIMENTAL] CreateTimeline: Create a Timeline
     * Creates a Timeline. Returns the created Timeline at the current effectiveAt.  Note that Timelines are mono-temporal, however they can have Time-Variant Properties.  Upserted Properties will be returned at the latest AsAt and EffectiveAt
     * @return APIcreateTimelineRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The created Timeline </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIcreateTimelineRequest createTimeline() {
        return new APIcreateTimelineRequest();
    }
    private okhttp3.Call deleteTimelineCall(String scope, String code, final ApiCallback _callback) throws ApiException {
        return deleteTimelineCall(scope, code,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call deleteTimelineCall(String scope, String code, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/timelines/{scope}/{code}"
            .replace("{" + "scope" + "}", localVarApiClient.escapeString(scope.toString()))
            .replace("{" + "code" + "}", localVarApiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteTimelineValidateBeforeCall(String scope, String code, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling deleteTimeline(Async)");
        }

        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling deleteTimeline(Async)");
        }

        return deleteTimelineCall(scope, code, _callback, opts);

    }


    private ApiResponse<DeletedEntityResponse> deleteTimelineWithHttpInfo(String scope, String code) throws ApiException {
        okhttp3.Call localVarCall = deleteTimelineValidateBeforeCall(scope, code, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<DeletedEntityResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<DeletedEntityResponse> deleteTimelineWithHttpInfo(String scope, String code, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = deleteTimelineValidateBeforeCall(scope, code, null, opts);
        Type localVarReturnType = new TypeToken<DeletedEntityResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteTimelineAsync(String scope, String code, final ApiCallback<DeletedEntityResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteTimelineValidateBeforeCall(scope, code, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<DeletedEntityResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call deleteTimelineAsync(String scope, String code, final ApiCallback<DeletedEntityResponse> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = deleteTimelineValidateBeforeCall(scope, code, _callback, opts);
        Type localVarReturnType = new TypeToken<DeletedEntityResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIdeleteTimelineRequest {
        private final String scope;
        private final String code;

        private APIdeleteTimelineRequest(String scope, String code) {
            this.scope = scope;
            this.code = code;
        }

        /**
         * Build call for deleteTimeline
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The deleted entity metadata </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteTimelineCall(scope, code, _callback);
        }

        /**
         * Execute deleteTimeline request
         * @return DeletedEntityResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The deleted entity metadata </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public DeletedEntityResponse execute() throws ApiException {
            ApiResponse<DeletedEntityResponse> localVarResp = deleteTimelineWithHttpInfo(scope, code);
            return localVarResp.getData();
        }

        /**
         * Execute deleteTimeline request. Use any specified configuration options to override any other configuration for this request only.
         * @return DeletedEntityResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The deleted entity metadata </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public DeletedEntityResponse execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<DeletedEntityResponse> localVarResp = deleteTimelineWithHttpInfo(scope, code, opts);
            return localVarResp.getData();
        }

        /**
         * Execute deleteTimeline request with HTTP info returned
         * @return ApiResponse&lt;DeletedEntityResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The deleted entity metadata </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DeletedEntityResponse> executeWithHttpInfo() throws ApiException {
            return deleteTimelineWithHttpInfo(scope, code);
        }

        /**
         * Execute deleteTimeline request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;DeletedEntityResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The deleted entity metadata </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DeletedEntityResponse> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return deleteTimelineWithHttpInfo(scope, code, opts);
        }

        /**
         * Execute deleteTimeline request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The deleted entity metadata </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DeletedEntityResponse> _callback) throws ApiException {
            return deleteTimelineAsync(scope, code, _callback);
        }

        /**
         * Execute deleteTimeline request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The deleted entity metadata </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DeletedEntityResponse> _callback, ConfigurationOptions opts) throws ApiException {
            return deleteTimelineAsync(scope, code, _callback, opts);
        }
    }

    /**
     * [EXPERIMENTAL] DeleteTimeline: Deletes a particular Timeline
     * The deletion will take effect from the Timeline deletion datetime.  i.e. will no longer exist at any asAt datetime after the asAt datetime of deletion.
     * @param scope The scope of the specified Timeline. (required)
     * @param code The code of the specified Timeline. Together with the domain and scope this uniquely   identifies the Timeline. (required)
     * @return APIdeleteTimelineRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The deleted entity metadata </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIdeleteTimelineRequest deleteTimeline(String scope, String code) {
        return new APIdeleteTimelineRequest(scope, code);
    }
    private okhttp3.Call getClosedPeriodCall(String scope, String code, String closedPeriodId, OffsetDateTime asAt, List<String> propertyKeys, final ApiCallback _callback) throws ApiException {
        return getClosedPeriodCall(scope, code, closedPeriodId, asAt, propertyKeys,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call getClosedPeriodCall(String scope, String code, String closedPeriodId, OffsetDateTime asAt, List<String> propertyKeys, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/timelines/{scope}/{code}/closedperiods/{closedPeriodId}"
            .replace("{" + "scope" + "}", localVarApiClient.escapeString(scope.toString()))
            .replace("{" + "code" + "}", localVarApiClient.escapeString(code.toString()))
            .replace("{" + "closedPeriodId" + "}", localVarApiClient.escapeString(closedPeriodId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (asAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asAt", asAt));
        }

        if (propertyKeys != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "propertyKeys", propertyKeys));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getClosedPeriodValidateBeforeCall(String scope, String code, String closedPeriodId, OffsetDateTime asAt, List<String> propertyKeys, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling getClosedPeriod(Async)");
        }

        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling getClosedPeriod(Async)");
        }

        // verify the required parameter 'closedPeriodId' is set
        if (closedPeriodId == null) {
            throw new ApiException("Missing the required parameter 'closedPeriodId' when calling getClosedPeriod(Async)");
        }

        return getClosedPeriodCall(scope, code, closedPeriodId, asAt, propertyKeys, _callback, opts);

    }


    private ApiResponse<ClosedPeriod> getClosedPeriodWithHttpInfo(String scope, String code, String closedPeriodId, OffsetDateTime asAt, List<String> propertyKeys) throws ApiException {
        okhttp3.Call localVarCall = getClosedPeriodValidateBeforeCall(scope, code, closedPeriodId, asAt, propertyKeys, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<ClosedPeriod>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<ClosedPeriod> getClosedPeriodWithHttpInfo(String scope, String code, String closedPeriodId, OffsetDateTime asAt, List<String> propertyKeys, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = getClosedPeriodValidateBeforeCall(scope, code, closedPeriodId, asAt, propertyKeys, null, opts);
        Type localVarReturnType = new TypeToken<ClosedPeriod>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getClosedPeriodAsync(String scope, String code, String closedPeriodId, OffsetDateTime asAt, List<String> propertyKeys, final ApiCallback<ClosedPeriod> _callback) throws ApiException {

        okhttp3.Call localVarCall = getClosedPeriodValidateBeforeCall(scope, code, closedPeriodId, asAt, propertyKeys, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<ClosedPeriod>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call getClosedPeriodAsync(String scope, String code, String closedPeriodId, OffsetDateTime asAt, List<String> propertyKeys, final ApiCallback<ClosedPeriod> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = getClosedPeriodValidateBeforeCall(scope, code, closedPeriodId, asAt, propertyKeys, _callback, opts);
        Type localVarReturnType = new TypeToken<ClosedPeriod>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetClosedPeriodRequest {
        private final String scope;
        private final String code;
        private final String closedPeriodId;
        private OffsetDateTime asAt;
        private List<String> propertyKeys;

        private APIgetClosedPeriodRequest(String scope, String code, String closedPeriodId) {
            this.scope = scope;
            this.code = code;
            this.closedPeriodId = closedPeriodId;
        }

        /**
         * Set asAt
         * @param asAt The asAt datetime at which to retrieve the ClosedPeriod definition. Defaults to return   the latest version of the definition if not specified. (optional)
         * @return APIgetClosedPeriodRequest
         */
        public APIgetClosedPeriodRequest asAt(OffsetDateTime asAt) {
            this.asAt = asAt;
            return this;
        }

        /**
         * Set propertyKeys
         * @param propertyKeys A list of property keys from the &#39;ClosedPeriod&#39; domain to decorate onto   the ClosedPeriod.   These must have the format {domain}/{scope}/{code}, for example &#39;ClosedPeriod/system/Name&#39;. (optional)
         * @return APIgetClosedPeriodRequest
         */
        public APIgetClosedPeriodRequest propertyKeys(List<String> propertyKeys) {
            this.propertyKeys = propertyKeys;
            return this;
        }

        /**
         * Build call for getClosedPeriod
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested closed period </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getClosedPeriodCall(scope, code, closedPeriodId, asAt, propertyKeys, _callback);
        }

        /**
         * Execute getClosedPeriod request
         * @return ClosedPeriod
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested closed period </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ClosedPeriod execute() throws ApiException {
            ApiResponse<ClosedPeriod> localVarResp = getClosedPeriodWithHttpInfo(scope, code, closedPeriodId, asAt, propertyKeys);
            return localVarResp.getData();
        }

        /**
         * Execute getClosedPeriod request. Use any specified configuration options to override any other configuration for this request only.
         * @return ClosedPeriod
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested closed period </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ClosedPeriod execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<ClosedPeriod> localVarResp = getClosedPeriodWithHttpInfo(scope, code, closedPeriodId, asAt, propertyKeys, opts);
            return localVarResp.getData();
        }

        /**
         * Execute getClosedPeriod request with HTTP info returned
         * @return ApiResponse&lt;ClosedPeriod&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested closed period </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ClosedPeriod> executeWithHttpInfo() throws ApiException {
            return getClosedPeriodWithHttpInfo(scope, code, closedPeriodId, asAt, propertyKeys);
        }

        /**
         * Execute getClosedPeriod request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;ClosedPeriod&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested closed period </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ClosedPeriod> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return getClosedPeriodWithHttpInfo(scope, code, closedPeriodId, asAt, propertyKeys, opts);
        }

        /**
         * Execute getClosedPeriod request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested closed period </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ClosedPeriod> _callback) throws ApiException {
            return getClosedPeriodAsync(scope, code, closedPeriodId, asAt, propertyKeys, _callback);
        }

        /**
         * Execute getClosedPeriod request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested closed period </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ClosedPeriod> _callback, ConfigurationOptions opts) throws ApiException {
            return getClosedPeriodAsync(scope, code, closedPeriodId, asAt, propertyKeys, _callback, opts);
        }
    }

    /**
     * [EXPERIMENTAL] GetClosedPeriod: Gets a Closed Period entity.
     * Retrieves one ClosedPeriod uniquely defined by the Timelines Scope/Code and a ClosedPeriodId.
     * @param scope The scope of the Timeline. (required)
     * @param code The code of the Timeline. Together with the scope this uniquely   identifies the Timeline. (required)
     * @param closedPeriodId The id of the Closed Period. Together with the scope and code of the Timeline,   this uniquely identifies the ClosedPeriod (required)
     * @return APIgetClosedPeriodRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested closed period </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIgetClosedPeriodRequest getClosedPeriod(String scope, String code, String closedPeriodId) {
        return new APIgetClosedPeriodRequest(scope, code, closedPeriodId);
    }
    private okhttp3.Call getTimelineCall(String scope, String code, OffsetDateTime asAt, String effectiveAt, List<String> propertyKeys, final ApiCallback _callback) throws ApiException {
        return getTimelineCall(scope, code, asAt, effectiveAt, propertyKeys,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call getTimelineCall(String scope, String code, OffsetDateTime asAt, String effectiveAt, List<String> propertyKeys, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/timelines/{scope}/{code}"
            .replace("{" + "scope" + "}", localVarApiClient.escapeString(scope.toString()))
            .replace("{" + "code" + "}", localVarApiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (asAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asAt", asAt));
        }

        if (effectiveAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("effectiveAt", effectiveAt));
        }

        if (propertyKeys != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "propertyKeys", propertyKeys));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTimelineValidateBeforeCall(String scope, String code, OffsetDateTime asAt, String effectiveAt, List<String> propertyKeys, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling getTimeline(Async)");
        }

        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling getTimeline(Async)");
        }

        return getTimelineCall(scope, code, asAt, effectiveAt, propertyKeys, _callback, opts);

    }


    private ApiResponse<Timeline> getTimelineWithHttpInfo(String scope, String code, OffsetDateTime asAt, String effectiveAt, List<String> propertyKeys) throws ApiException {
        okhttp3.Call localVarCall = getTimelineValidateBeforeCall(scope, code, asAt, effectiveAt, propertyKeys, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<Timeline>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<Timeline> getTimelineWithHttpInfo(String scope, String code, OffsetDateTime asAt, String effectiveAt, List<String> propertyKeys, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = getTimelineValidateBeforeCall(scope, code, asAt, effectiveAt, propertyKeys, null, opts);
        Type localVarReturnType = new TypeToken<Timeline>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getTimelineAsync(String scope, String code, OffsetDateTime asAt, String effectiveAt, List<String> propertyKeys, final ApiCallback<Timeline> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTimelineValidateBeforeCall(scope, code, asAt, effectiveAt, propertyKeys, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<Timeline>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call getTimelineAsync(String scope, String code, OffsetDateTime asAt, String effectiveAt, List<String> propertyKeys, final ApiCallback<Timeline> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = getTimelineValidateBeforeCall(scope, code, asAt, effectiveAt, propertyKeys, _callback, opts);
        Type localVarReturnType = new TypeToken<Timeline>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetTimelineRequest {
        private final String scope;
        private final String code;
        private OffsetDateTime asAt;
        private String effectiveAt;
        private List<String> propertyKeys;

        private APIgetTimelineRequest(String scope, String code) {
            this.scope = scope;
            this.code = code;
        }

        /**
         * Set asAt
         * @param asAt The asAt datetime at which to retrieve the Timeline definition. Defaults to return   the latest version of the definition if not specified. (optional)
         * @return APIgetTimelineRequest
         */
        public APIgetTimelineRequest asAt(OffsetDateTime asAt) {
            this.asAt = asAt;
            return this;
        }

        /**
         * Set effectiveAt
         * @param effectiveAt The effective datetime or cut label at which to retrieve the timeline properties.   Defaults to the current LUSID system datetime if not specified. (optional)
         * @return APIgetTimelineRequest
         */
        public APIgetTimelineRequest effectiveAt(String effectiveAt) {
            this.effectiveAt = effectiveAt;
            return this;
        }

        /**
         * Set propertyKeys
         * @param propertyKeys A list of property keys from the &#39;Timeline&#39; domain to decorate onto   the Timeline.   These must have the format {domain}/{scope}/{code}, for example &#39;Timeline/system/Name&#39;. (optional)
         * @return APIgetTimelineRequest
         */
        public APIgetTimelineRequest propertyKeys(List<String> propertyKeys) {
            this.propertyKeys = propertyKeys;
            return this;
        }

        /**
         * Build call for getTimeline
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested Timeline </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getTimelineCall(scope, code, asAt, effectiveAt, propertyKeys, _callback);
        }

        /**
         * Execute getTimeline request
         * @return Timeline
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested Timeline </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public Timeline execute() throws ApiException {
            ApiResponse<Timeline> localVarResp = getTimelineWithHttpInfo(scope, code, asAt, effectiveAt, propertyKeys);
            return localVarResp.getData();
        }

        /**
         * Execute getTimeline request. Use any specified configuration options to override any other configuration for this request only.
         * @return Timeline
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested Timeline </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public Timeline execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<Timeline> localVarResp = getTimelineWithHttpInfo(scope, code, asAt, effectiveAt, propertyKeys, opts);
            return localVarResp.getData();
        }

        /**
         * Execute getTimeline request with HTTP info returned
         * @return ApiResponse&lt;Timeline&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested Timeline </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Timeline> executeWithHttpInfo() throws ApiException {
            return getTimelineWithHttpInfo(scope, code, asAt, effectiveAt, propertyKeys);
        }

        /**
         * Execute getTimeline request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;Timeline&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested Timeline </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Timeline> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return getTimelineWithHttpInfo(scope, code, asAt, effectiveAt, propertyKeys, opts);
        }

        /**
         * Execute getTimeline request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested Timeline </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Timeline> _callback) throws ApiException {
            return getTimelineAsync(scope, code, asAt, effectiveAt, propertyKeys, _callback);
        }

        /**
         * Execute getTimeline request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested Timeline </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Timeline> _callback, ConfigurationOptions opts) throws ApiException {
            return getTimelineAsync(scope, code, asAt, effectiveAt, propertyKeys, _callback, opts);
        }
    }

    /**
     * [EXPERIMENTAL] GetTimeline: Get a single Timeline by scope and code.
     * Retrieves one Timeline by scope and code.  Timelines are mono-temporal. The EffectiveAt is only applied to Time-Variant Properties.
     * @param scope The scope of the specified Timeline. (required)
     * @param code The code of the specified Timeline. Together with the scope this uniquely   identifies the Timeline. (required)
     * @return APIgetTimelineRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested Timeline </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIgetTimelineRequest getTimeline(String scope, String code) {
        return new APIgetTimelineRequest(scope, code);
    }
    private okhttp3.Call listClosedPeriodsCall(String scope, String code, OffsetDateTime asAt, String page, Integer limit, String filter, List<String> sortBy, List<String> propertyKeys, final ApiCallback _callback) throws ApiException {
        return listClosedPeriodsCall(scope, code, asAt, page, limit, filter, sortBy, propertyKeys,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call listClosedPeriodsCall(String scope, String code, OffsetDateTime asAt, String page, Integer limit, String filter, List<String> sortBy, List<String> propertyKeys, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/timelines/{scope}/{code}/closedperiods"
            .replace("{" + "scope" + "}", localVarApiClient.escapeString(scope.toString()))
            .replace("{" + "code" + "}", localVarApiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (asAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asAt", asAt));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (sortBy != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "sortBy", sortBy));
        }

        if (propertyKeys != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "propertyKeys", propertyKeys));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listClosedPeriodsValidateBeforeCall(String scope, String code, OffsetDateTime asAt, String page, Integer limit, String filter, List<String> sortBy, List<String> propertyKeys, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling listClosedPeriods(Async)");
        }

        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling listClosedPeriods(Async)");
        }

        return listClosedPeriodsCall(scope, code, asAt, page, limit, filter, sortBy, propertyKeys, _callback, opts);

    }


    private ApiResponse<PagedResourceListOfClosedPeriod> listClosedPeriodsWithHttpInfo(String scope, String code, OffsetDateTime asAt, String page, Integer limit, String filter, List<String> sortBy, List<String> propertyKeys) throws ApiException {
        okhttp3.Call localVarCall = listClosedPeriodsValidateBeforeCall(scope, code, asAt, page, limit, filter, sortBy, propertyKeys, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<PagedResourceListOfClosedPeriod>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<PagedResourceListOfClosedPeriod> listClosedPeriodsWithHttpInfo(String scope, String code, OffsetDateTime asAt, String page, Integer limit, String filter, List<String> sortBy, List<String> propertyKeys, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = listClosedPeriodsValidateBeforeCall(scope, code, asAt, page, limit, filter, sortBy, propertyKeys, null, opts);
        Type localVarReturnType = new TypeToken<PagedResourceListOfClosedPeriod>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listClosedPeriodsAsync(String scope, String code, OffsetDateTime asAt, String page, Integer limit, String filter, List<String> sortBy, List<String> propertyKeys, final ApiCallback<PagedResourceListOfClosedPeriod> _callback) throws ApiException {

        okhttp3.Call localVarCall = listClosedPeriodsValidateBeforeCall(scope, code, asAt, page, limit, filter, sortBy, propertyKeys, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<PagedResourceListOfClosedPeriod>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call listClosedPeriodsAsync(String scope, String code, OffsetDateTime asAt, String page, Integer limit, String filter, List<String> sortBy, List<String> propertyKeys, final ApiCallback<PagedResourceListOfClosedPeriod> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = listClosedPeriodsValidateBeforeCall(scope, code, asAt, page, limit, filter, sortBy, propertyKeys, _callback, opts);
        Type localVarReturnType = new TypeToken<PagedResourceListOfClosedPeriod>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIlistClosedPeriodsRequest {
        private final String scope;
        private final String code;
        private OffsetDateTime asAt;
        private String page;
        private Integer limit;
        private String filter;
        private List<String> sortBy;
        private List<String> propertyKeys;

        private APIlistClosedPeriodsRequest(String scope, String code) {
            this.scope = scope;
            this.code = code;
        }

        /**
         * Set asAt
         * @param asAt The asAt datetime at which to list the ClosedPeriods. Defaults to returning the latest version of each ClosedPeriod if not specified. (optional)
         * @return APIlistClosedPeriodsRequest
         */
        public APIlistClosedPeriodsRequest asAt(OffsetDateTime asAt) {
            this.asAt = asAt;
            return this;
        }

        /**
         * Set page
         * @param page The pagination token to use to continue listing ClosedPeriods; this   value is returned from the previous call. If a pagination token is provided, the filter, effectiveAt   and asAt fields must not have changed since the original request. (optional)
         * @return APIlistClosedPeriodsRequest
         */
        public APIlistClosedPeriodsRequest page(String page) {
            this.page = page;
            return this;
        }

        /**
         * Set limit
         * @param limit When paginating, limit the results to this number. Defaults to 100 if not specified. (optional)
         * @return APIlistClosedPeriodsRequest
         */
        public APIlistClosedPeriodsRequest limit(Integer limit) {
            this.limit = limit;
            return this;
        }

        /**
         * Set filter
         * @param filter Expression to filter the results.   For example, to filter on the effectiveEnd, specify \&quot;effectiveEnd gt 2019-01-15T10:00:00\&quot;. For more information about filtering   results, see https://support.lusid.com/knowledgebase/article/KA-01914. (optional)
         * @return APIlistClosedPeriodsRequest
         */
        public APIlistClosedPeriodsRequest filter(String filter) {
            this.filter = filter;
            return this;
        }

        /**
         * Set sortBy
         * @param sortBy A list of field names or properties to sort by, each suffixed by \&quot; ASC\&quot; or \&quot; DESC\&quot; (optional)
         * @return APIlistClosedPeriodsRequest
         */
        public APIlistClosedPeriodsRequest sortBy(List<String> sortBy) {
            this.sortBy = sortBy;
            return this;
        }

        /**
         * Set propertyKeys
         * @param propertyKeys A list of property keys from the &#39;ClosedPeriod&#39; domain to decorate onto each ClosedPeriod.   These must take the format {domain}/{scope}/{code}, for example &#39;ClosedPeriod/Account/id&#39;. (optional)
         * @return APIlistClosedPeriodsRequest
         */
        public APIlistClosedPeriodsRequest propertyKeys(List<String> propertyKeys) {
            this.propertyKeys = propertyKeys;
            return this;
        }

        /**
         * Build call for listClosedPeriods
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested ClosedPeriods. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listClosedPeriodsCall(scope, code, asAt, page, limit, filter, sortBy, propertyKeys, _callback);
        }

        /**
         * Execute listClosedPeriods request
         * @return PagedResourceListOfClosedPeriod
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested ClosedPeriods. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public PagedResourceListOfClosedPeriod execute() throws ApiException {
            ApiResponse<PagedResourceListOfClosedPeriod> localVarResp = listClosedPeriodsWithHttpInfo(scope, code, asAt, page, limit, filter, sortBy, propertyKeys);
            return localVarResp.getData();
        }

        /**
         * Execute listClosedPeriods request. Use any specified configuration options to override any other configuration for this request only.
         * @return PagedResourceListOfClosedPeriod
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested ClosedPeriods. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public PagedResourceListOfClosedPeriod execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<PagedResourceListOfClosedPeriod> localVarResp = listClosedPeriodsWithHttpInfo(scope, code, asAt, page, limit, filter, sortBy, propertyKeys, opts);
            return localVarResp.getData();
        }

        /**
         * Execute listClosedPeriods request with HTTP info returned
         * @return ApiResponse&lt;PagedResourceListOfClosedPeriod&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested ClosedPeriods. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PagedResourceListOfClosedPeriod> executeWithHttpInfo() throws ApiException {
            return listClosedPeriodsWithHttpInfo(scope, code, asAt, page, limit, filter, sortBy, propertyKeys);
        }

        /**
         * Execute listClosedPeriods request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;PagedResourceListOfClosedPeriod&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested ClosedPeriods. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PagedResourceListOfClosedPeriod> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return listClosedPeriodsWithHttpInfo(scope, code, asAt, page, limit, filter, sortBy, propertyKeys, opts);
        }

        /**
         * Execute listClosedPeriods request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested ClosedPeriods. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PagedResourceListOfClosedPeriod> _callback) throws ApiException {
            return listClosedPeriodsAsync(scope, code, asAt, page, limit, filter, sortBy, propertyKeys, _callback);
        }

        /**
         * Execute listClosedPeriods request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested ClosedPeriods. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PagedResourceListOfClosedPeriod> _callback, ConfigurationOptions opts) throws ApiException {
            return listClosedPeriodsAsync(scope, code, asAt, page, limit, filter, sortBy, propertyKeys, _callback, opts);
        }
    }

    /**
     * [EXPERIMENTAL] ListClosedPeriods: List ClosedPeriods for a specified Timeline.
     * List all the ClosedPeriods matching a particular criteria.
     * @param scope The scope of the Timeline. (required)
     * @param code The code of the Timeline. (required)
     * @return APIlistClosedPeriodsRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested ClosedPeriods. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIlistClosedPeriodsRequest listClosedPeriods(String scope, String code) {
        return new APIlistClosedPeriodsRequest(scope, code);
    }
    private okhttp3.Call updateTimelineCall(String scope, String code, UpdateTimelineRequest updateTimelineRequest, final ApiCallback _callback) throws ApiException {
        return updateTimelineCall(scope, code, updateTimelineRequest,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call updateTimelineCall(String scope, String code, UpdateTimelineRequest updateTimelineRequest, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateTimelineRequest;

        // create path and map variables
        String localVarPath = "/api/timelines/{scope}/{code}"
            .replace("{" + "scope" + "}", localVarApiClient.escapeString(scope.toString()))
            .replace("{" + "code" + "}", localVarApiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateTimelineValidateBeforeCall(String scope, String code, UpdateTimelineRequest updateTimelineRequest, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling updateTimeline(Async)");
        }

        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling updateTimeline(Async)");
        }

        return updateTimelineCall(scope, code, updateTimelineRequest, _callback, opts);

    }


    private ApiResponse<Timeline> updateTimelineWithHttpInfo(String scope, String code, UpdateTimelineRequest updateTimelineRequest) throws ApiException {
        okhttp3.Call localVarCall = updateTimelineValidateBeforeCall(scope, code, updateTimelineRequest, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<Timeline>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<Timeline> updateTimelineWithHttpInfo(String scope, String code, UpdateTimelineRequest updateTimelineRequest, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = updateTimelineValidateBeforeCall(scope, code, updateTimelineRequest, null, opts);
        Type localVarReturnType = new TypeToken<Timeline>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateTimelineAsync(String scope, String code, UpdateTimelineRequest updateTimelineRequest, final ApiCallback<Timeline> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateTimelineValidateBeforeCall(scope, code, updateTimelineRequest, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<Timeline>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call updateTimelineAsync(String scope, String code, UpdateTimelineRequest updateTimelineRequest, final ApiCallback<Timeline> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = updateTimelineValidateBeforeCall(scope, code, updateTimelineRequest, _callback, opts);
        Type localVarReturnType = new TypeToken<Timeline>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIupdateTimelineRequest {
        private final String scope;
        private final String code;
        private UpdateTimelineRequest updateTimelineRequest;

        private APIupdateTimelineRequest(String scope, String code) {
            this.scope = scope;
            this.code = code;
        }

        /**
         * Set updateTimelineRequest
         * @param updateTimelineRequest The request containing the updated details of the Timeline (optional)
         * @return APIupdateTimelineRequest
         */
        public APIupdateTimelineRequest updateTimelineRequest(UpdateTimelineRequest updateTimelineRequest) {
            this.updateTimelineRequest = updateTimelineRequest;
            return this;
        }

        /**
         * Build call for updateTimeline
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The updated version of the requested Timeline </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return updateTimelineCall(scope, code, updateTimelineRequest, _callback);
        }

        /**
         * Execute updateTimeline request
         * @return Timeline
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The updated version of the requested Timeline </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public Timeline execute() throws ApiException {
            ApiResponse<Timeline> localVarResp = updateTimelineWithHttpInfo(scope, code, updateTimelineRequest);
            return localVarResp.getData();
        }

        /**
         * Execute updateTimeline request. Use any specified configuration options to override any other configuration for this request only.
         * @return Timeline
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The updated version of the requested Timeline </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public Timeline execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<Timeline> localVarResp = updateTimelineWithHttpInfo(scope, code, updateTimelineRequest, opts);
            return localVarResp.getData();
        }

        /**
         * Execute updateTimeline request with HTTP info returned
         * @return ApiResponse&lt;Timeline&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The updated version of the requested Timeline </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Timeline> executeWithHttpInfo() throws ApiException {
            return updateTimelineWithHttpInfo(scope, code, updateTimelineRequest);
        }

        /**
         * Execute updateTimeline request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;Timeline&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The updated version of the requested Timeline </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Timeline> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return updateTimelineWithHttpInfo(scope, code, updateTimelineRequest, opts);
        }

        /**
         * Execute updateTimeline request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The updated version of the requested Timeline </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Timeline> _callback) throws ApiException {
            return updateTimelineAsync(scope, code, updateTimelineRequest, _callback);
        }

        /**
         * Execute updateTimeline request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The updated version of the requested Timeline </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Timeline> _callback, ConfigurationOptions opts) throws ApiException {
            return updateTimelineAsync(scope, code, updateTimelineRequest, _callback, opts);
        }
    }

    /**
     * [EXPERIMENTAL] UpdateTimeline: Update Timeline defined by scope and code
     * Overwrites an existing Timeline  Update request has the same required fields as Create apart from the id.  Returns the updated Timeline at the current effectiveAt.  Note that Timelines are mono-temporal, however they can have Time-Variant Properties.  Updated Properties will be returned at the latest AsAt and EffectiveAt
     * @param scope The scope of the specified Timeline. (required)
     * @param code The code of the specified Timeline. Together with the domain and scope this uniquely identifies the Timeline. (required)
     * @return APIupdateTimelineRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated version of the requested Timeline </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIupdateTimelineRequest updateTimeline(String scope, String code) {
        return new APIupdateTimelineRequest(scope, code);
    }
}
