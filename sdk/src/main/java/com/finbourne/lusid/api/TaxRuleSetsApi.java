/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.api;

import com.finbourne.lusid.ApiCallback;
import com.finbourne.lusid.ApiClient;
import com.finbourne.lusid.ApiException;
import com.finbourne.lusid.ApiResponse;
import com.finbourne.lusid.Configuration;
import com.finbourne.lusid.Pair;
import com.finbourne.lusid.ProgressRequestBody;
import com.finbourne.lusid.ProgressResponseBody;
import com.finbourne.lusid.extensions.ConfigurationOptions;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.finbourne.lusid.model.CreateTaxRuleSetRequest;
import com.finbourne.lusid.model.DeletedEntityResponse;
import com.finbourne.lusid.model.LusidProblemDetails;
import com.finbourne.lusid.model.LusidValidationProblemDetails;
import java.time.OffsetDateTime;
import com.finbourne.lusid.model.ResourceListOfTaxRuleSet;
import com.finbourne.lusid.model.TaxRuleSet;
import com.finbourne.lusid.model.UpdateTaxRuleSetRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TaxRuleSetsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TaxRuleSetsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TaxRuleSetsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createTaxRuleSetCall(CreateTaxRuleSetRequest createTaxRuleSetRequest, String effectiveAt, final ApiCallback _callback) throws ApiException {
        return createTaxRuleSetCall(createTaxRuleSetRequest, effectiveAt,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call createTaxRuleSetCall(CreateTaxRuleSetRequest createTaxRuleSetRequest, String effectiveAt, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createTaxRuleSetRequest;

        // create path and map variables
        String localVarPath = "/api/tax/rulesets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (effectiveAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("effectiveAt", effectiveAt));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createTaxRuleSetValidateBeforeCall(CreateTaxRuleSetRequest createTaxRuleSetRequest, String effectiveAt, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'createTaxRuleSetRequest' is set
        if (createTaxRuleSetRequest == null) {
            throw new ApiException("Missing the required parameter 'createTaxRuleSetRequest' when calling createTaxRuleSet(Async)");
        }

        return createTaxRuleSetCall(createTaxRuleSetRequest, effectiveAt, _callback, opts);

    }


    private ApiResponse<TaxRuleSet> createTaxRuleSetWithHttpInfo(CreateTaxRuleSetRequest createTaxRuleSetRequest, String effectiveAt) throws ApiException {
        okhttp3.Call localVarCall = createTaxRuleSetValidateBeforeCall(createTaxRuleSetRequest, effectiveAt, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<TaxRuleSet>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<TaxRuleSet> createTaxRuleSetWithHttpInfo(CreateTaxRuleSetRequest createTaxRuleSetRequest, String effectiveAt, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = createTaxRuleSetValidateBeforeCall(createTaxRuleSetRequest, effectiveAt, null, opts);
        Type localVarReturnType = new TypeToken<TaxRuleSet>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createTaxRuleSetAsync(CreateTaxRuleSetRequest createTaxRuleSetRequest, String effectiveAt, final ApiCallback<TaxRuleSet> _callback) throws ApiException {

        okhttp3.Call localVarCall = createTaxRuleSetValidateBeforeCall(createTaxRuleSetRequest, effectiveAt, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<TaxRuleSet>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call createTaxRuleSetAsync(CreateTaxRuleSetRequest createTaxRuleSetRequest, String effectiveAt, final ApiCallback<TaxRuleSet> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = createTaxRuleSetValidateBeforeCall(createTaxRuleSetRequest, effectiveAt, _callback, opts);
        Type localVarReturnType = new TypeToken<TaxRuleSet>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIcreateTaxRuleSetRequest {
        private final CreateTaxRuleSetRequest createTaxRuleSetRequest;
        private String effectiveAt;

        private APIcreateTaxRuleSetRequest(CreateTaxRuleSetRequest createTaxRuleSetRequest) {
            this.createTaxRuleSetRequest = createTaxRuleSetRequest;
        }

        /**
         * Set effectiveAt
         * @param effectiveAt The effective datetime or cut label at which the rule set will take effect.  Defaults to the current LUSID system datetime if not specified. (optional)
         * @return APIcreateTaxRuleSetRequest
         */
        public APIcreateTaxRuleSetRequest effectiveAt(String effectiveAt) {
            this.effectiveAt = effectiveAt;
            return this;
        }

        /**
         * Build call for createTaxRuleSet
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Create a rule set for tax calculations. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return createTaxRuleSetCall(createTaxRuleSetRequest, effectiveAt, _callback);
        }

        /**
         * Execute createTaxRuleSet request
         * @return TaxRuleSet
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Create a rule set for tax calculations. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public TaxRuleSet execute() throws ApiException {
            ApiResponse<TaxRuleSet> localVarResp = createTaxRuleSetWithHttpInfo(createTaxRuleSetRequest, effectiveAt);
            return localVarResp.getData();
        }

        /**
         * Execute createTaxRuleSet request. Use any specified configuration options to override any other configuration for this request only.
         * @return TaxRuleSet
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Create a rule set for tax calculations. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public TaxRuleSet execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<TaxRuleSet> localVarResp = createTaxRuleSetWithHttpInfo(createTaxRuleSetRequest, effectiveAt, opts);
            return localVarResp.getData();
        }

        /**
         * Execute createTaxRuleSet request with HTTP info returned
         * @return ApiResponse&lt;TaxRuleSet&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Create a rule set for tax calculations. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TaxRuleSet> executeWithHttpInfo() throws ApiException {
            return createTaxRuleSetWithHttpInfo(createTaxRuleSetRequest, effectiveAt);
        }

        /**
         * Execute createTaxRuleSet request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;TaxRuleSet&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Create a rule set for tax calculations. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TaxRuleSet> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return createTaxRuleSetWithHttpInfo(createTaxRuleSetRequest, effectiveAt, opts);
        }

        /**
         * Execute createTaxRuleSet request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Create a rule set for tax calculations. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TaxRuleSet> _callback) throws ApiException {
            return createTaxRuleSetAsync(createTaxRuleSetRequest, effectiveAt, _callback);
        }

        /**
         * Execute createTaxRuleSet request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Create a rule set for tax calculations. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TaxRuleSet> _callback, ConfigurationOptions opts) throws ApiException {
            return createTaxRuleSetAsync(createTaxRuleSetRequest, effectiveAt, _callback, opts);
        }
    }

    /**
     * [EXPERIMENTAL] CreateTaxRuleSet: Create a tax rule set.
     * Creates a tax rule set definition at the given effective time.  The user must be entitled to read any properties specified in each rule.
     * @param createTaxRuleSetRequest The contents of the rule set. (required)
     * @return APIcreateTaxRuleSetRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create a rule set for tax calculations. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIcreateTaxRuleSetRequest createTaxRuleSet(CreateTaxRuleSetRequest createTaxRuleSetRequest) {
        return new APIcreateTaxRuleSetRequest(createTaxRuleSetRequest);
    }
    private okhttp3.Call deleteTaxRuleSetCall(String scope, String code, final ApiCallback _callback) throws ApiException {
        return deleteTaxRuleSetCall(scope, code,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call deleteTaxRuleSetCall(String scope, String code, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/tax/rulesets/{scope}/{code}"
            .replace("{" + "scope" + "}", localVarApiClient.escapeString(scope.toString()))
            .replace("{" + "code" + "}", localVarApiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteTaxRuleSetValidateBeforeCall(String scope, String code, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling deleteTaxRuleSet(Async)");
        }

        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling deleteTaxRuleSet(Async)");
        }

        return deleteTaxRuleSetCall(scope, code, _callback, opts);

    }


    private ApiResponse<DeletedEntityResponse> deleteTaxRuleSetWithHttpInfo(String scope, String code) throws ApiException {
        okhttp3.Call localVarCall = deleteTaxRuleSetValidateBeforeCall(scope, code, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<DeletedEntityResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<DeletedEntityResponse> deleteTaxRuleSetWithHttpInfo(String scope, String code, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = deleteTaxRuleSetValidateBeforeCall(scope, code, null, opts);
        Type localVarReturnType = new TypeToken<DeletedEntityResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteTaxRuleSetAsync(String scope, String code, final ApiCallback<DeletedEntityResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteTaxRuleSetValidateBeforeCall(scope, code, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<DeletedEntityResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call deleteTaxRuleSetAsync(String scope, String code, final ApiCallback<DeletedEntityResponse> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = deleteTaxRuleSetValidateBeforeCall(scope, code, _callback, opts);
        Type localVarReturnType = new TypeToken<DeletedEntityResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIdeleteTaxRuleSetRequest {
        private final String scope;
        private final String code;

        private APIdeleteTaxRuleSetRequest(String scope, String code) {
            this.scope = scope;
            this.code = code;
        }

        /**
         * Build call for deleteTaxRuleSet
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteTaxRuleSetCall(scope, code, _callback);
        }

        /**
         * Execute deleteTaxRuleSet request
         * @return DeletedEntityResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public DeletedEntityResponse execute() throws ApiException {
            ApiResponse<DeletedEntityResponse> localVarResp = deleteTaxRuleSetWithHttpInfo(scope, code);
            return localVarResp.getData();
        }

        /**
         * Execute deleteTaxRuleSet request. Use any specified configuration options to override any other configuration for this request only.
         * @return DeletedEntityResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public DeletedEntityResponse execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<DeletedEntityResponse> localVarResp = deleteTaxRuleSetWithHttpInfo(scope, code, opts);
            return localVarResp.getData();
        }

        /**
         * Execute deleteTaxRuleSet request with HTTP info returned
         * @return ApiResponse&lt;DeletedEntityResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DeletedEntityResponse> executeWithHttpInfo() throws ApiException {
            return deleteTaxRuleSetWithHttpInfo(scope, code);
        }

        /**
         * Execute deleteTaxRuleSet request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;DeletedEntityResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DeletedEntityResponse> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return deleteTaxRuleSetWithHttpInfo(scope, code, opts);
        }

        /**
         * Execute deleteTaxRuleSet request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DeletedEntityResponse> _callback) throws ApiException {
            return deleteTaxRuleSetAsync(scope, code, _callback);
        }

        /**
         * Execute deleteTaxRuleSet request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DeletedEntityResponse> _callback, ConfigurationOptions opts) throws ApiException {
            return deleteTaxRuleSetAsync(scope, code, _callback, opts);
        }
    }

    /**
     * [EXPERIMENTAL] DeleteTaxRuleSet: Delete a tax rule set.
     * &lt;br&gt;   Deletes the rule set for all effective time.     &lt;br&gt;   The rule set will remain viewable at previous as at times, but it will no longer be considered applicable.     &lt;br&gt;   This cannot be undone.   
     * @param scope The rule set scope. (required)
     * @param code The rule set code. (required)
     * @return APIdeleteTaxRuleSetRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIdeleteTaxRuleSetRequest deleteTaxRuleSet(String scope, String code) {
        return new APIdeleteTaxRuleSetRequest(scope, code);
    }
    private okhttp3.Call getTaxRuleSetCall(String scope, String code, String effectiveAt, OffsetDateTime asAt, final ApiCallback _callback) throws ApiException {
        return getTaxRuleSetCall(scope, code, effectiveAt, asAt,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call getTaxRuleSetCall(String scope, String code, String effectiveAt, OffsetDateTime asAt, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/tax/rulesets/{scope}/{code}"
            .replace("{" + "scope" + "}", localVarApiClient.escapeString(scope.toString()))
            .replace("{" + "code" + "}", localVarApiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (effectiveAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("effectiveAt", effectiveAt));
        }

        if (asAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asAt", asAt));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTaxRuleSetValidateBeforeCall(String scope, String code, String effectiveAt, OffsetDateTime asAt, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling getTaxRuleSet(Async)");
        }

        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling getTaxRuleSet(Async)");
        }

        return getTaxRuleSetCall(scope, code, effectiveAt, asAt, _callback, opts);

    }


    private ApiResponse<TaxRuleSet> getTaxRuleSetWithHttpInfo(String scope, String code, String effectiveAt, OffsetDateTime asAt) throws ApiException {
        okhttp3.Call localVarCall = getTaxRuleSetValidateBeforeCall(scope, code, effectiveAt, asAt, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<TaxRuleSet>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<TaxRuleSet> getTaxRuleSetWithHttpInfo(String scope, String code, String effectiveAt, OffsetDateTime asAt, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = getTaxRuleSetValidateBeforeCall(scope, code, effectiveAt, asAt, null, opts);
        Type localVarReturnType = new TypeToken<TaxRuleSet>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getTaxRuleSetAsync(String scope, String code, String effectiveAt, OffsetDateTime asAt, final ApiCallback<TaxRuleSet> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTaxRuleSetValidateBeforeCall(scope, code, effectiveAt, asAt, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<TaxRuleSet>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call getTaxRuleSetAsync(String scope, String code, String effectiveAt, OffsetDateTime asAt, final ApiCallback<TaxRuleSet> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = getTaxRuleSetValidateBeforeCall(scope, code, effectiveAt, asAt, _callback, opts);
        Type localVarReturnType = new TypeToken<TaxRuleSet>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetTaxRuleSetRequest {
        private final String scope;
        private final String code;
        private String effectiveAt;
        private OffsetDateTime asAt;

        private APIgetTaxRuleSetRequest(String scope, String code) {
            this.scope = scope;
            this.code = code;
        }

        /**
         * Set effectiveAt
         * @param effectiveAt The effective datetime or cut label at which to retrieve the rule definition.  Defaults to the current LUSID system datetime if not specified. (optional)
         * @return APIgetTaxRuleSetRequest
         */
        public APIgetTaxRuleSetRequest effectiveAt(String effectiveAt) {
            this.effectiveAt = effectiveAt;
            return this;
        }

        /**
         * Set asAt
         * @param asAt The asAt datetime at which to retrieve the rule definition. Defaults to returning the latest version if not  specified. (optional)
         * @return APIgetTaxRuleSetRequest
         */
        public APIgetTaxRuleSetRequest asAt(OffsetDateTime asAt) {
            this.asAt = asAt;
            return this;
        }

        /**
         * Build call for getTaxRuleSet
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Details of one rule set. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getTaxRuleSetCall(scope, code, effectiveAt, asAt, _callback);
        }

        /**
         * Execute getTaxRuleSet request
         * @return TaxRuleSet
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Details of one rule set. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public TaxRuleSet execute() throws ApiException {
            ApiResponse<TaxRuleSet> localVarResp = getTaxRuleSetWithHttpInfo(scope, code, effectiveAt, asAt);
            return localVarResp.getData();
        }

        /**
         * Execute getTaxRuleSet request. Use any specified configuration options to override any other configuration for this request only.
         * @return TaxRuleSet
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Details of one rule set. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public TaxRuleSet execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<TaxRuleSet> localVarResp = getTaxRuleSetWithHttpInfo(scope, code, effectiveAt, asAt, opts);
            return localVarResp.getData();
        }

        /**
         * Execute getTaxRuleSet request with HTTP info returned
         * @return ApiResponse&lt;TaxRuleSet&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Details of one rule set. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TaxRuleSet> executeWithHttpInfo() throws ApiException {
            return getTaxRuleSetWithHttpInfo(scope, code, effectiveAt, asAt);
        }

        /**
         * Execute getTaxRuleSet request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;TaxRuleSet&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Details of one rule set. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TaxRuleSet> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return getTaxRuleSetWithHttpInfo(scope, code, effectiveAt, asAt, opts);
        }

        /**
         * Execute getTaxRuleSet request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Details of one rule set. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TaxRuleSet> _callback) throws ApiException {
            return getTaxRuleSetAsync(scope, code, effectiveAt, asAt, _callback);
        }

        /**
         * Execute getTaxRuleSet request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Details of one rule set. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TaxRuleSet> _callback, ConfigurationOptions opts) throws ApiException {
            return getTaxRuleSetAsync(scope, code, effectiveAt, asAt, _callback, opts);
        }
    }

    /**
     * [EXPERIMENTAL] GetTaxRuleSet: Retrieve the definition of single tax rule set.
     * Retrieves the tax rule set definition at the given effective and as at times.
     * @param scope The rule set scope. (required)
     * @param code The rule set code. (required)
     * @return APIgetTaxRuleSetRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Details of one rule set. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIgetTaxRuleSetRequest getTaxRuleSet(String scope, String code) {
        return new APIgetTaxRuleSetRequest(scope, code);
    }
    private okhttp3.Call listTaxRuleSetsCall(String effectiveAt, OffsetDateTime asAt, final ApiCallback _callback) throws ApiException {
        return listTaxRuleSetsCall(effectiveAt, asAt,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call listTaxRuleSetsCall(String effectiveAt, OffsetDateTime asAt, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/tax/rulesets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (effectiveAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("effectiveAt", effectiveAt));
        }

        if (asAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asAt", asAt));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listTaxRuleSetsValidateBeforeCall(String effectiveAt, OffsetDateTime asAt, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        return listTaxRuleSetsCall(effectiveAt, asAt, _callback, opts);

    }


    private ApiResponse<ResourceListOfTaxRuleSet> listTaxRuleSetsWithHttpInfo(String effectiveAt, OffsetDateTime asAt) throws ApiException {
        okhttp3.Call localVarCall = listTaxRuleSetsValidateBeforeCall(effectiveAt, asAt, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<ResourceListOfTaxRuleSet>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<ResourceListOfTaxRuleSet> listTaxRuleSetsWithHttpInfo(String effectiveAt, OffsetDateTime asAt, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = listTaxRuleSetsValidateBeforeCall(effectiveAt, asAt, null, opts);
        Type localVarReturnType = new TypeToken<ResourceListOfTaxRuleSet>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listTaxRuleSetsAsync(String effectiveAt, OffsetDateTime asAt, final ApiCallback<ResourceListOfTaxRuleSet> _callback) throws ApiException {

        okhttp3.Call localVarCall = listTaxRuleSetsValidateBeforeCall(effectiveAt, asAt, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<ResourceListOfTaxRuleSet>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call listTaxRuleSetsAsync(String effectiveAt, OffsetDateTime asAt, final ApiCallback<ResourceListOfTaxRuleSet> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = listTaxRuleSetsValidateBeforeCall(effectiveAt, asAt, _callback, opts);
        Type localVarReturnType = new TypeToken<ResourceListOfTaxRuleSet>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIlistTaxRuleSetsRequest {
        private String effectiveAt;
        private OffsetDateTime asAt;

        private APIlistTaxRuleSetsRequest() {
        }

        /**
         * Set effectiveAt
         * @param effectiveAt The effective datetime or cut label at which to retrieve the rule definitions.  Defaults to the current LUSID system datetime if not specified. (optional)
         * @return APIlistTaxRuleSetsRequest
         */
        public APIlistTaxRuleSetsRequest effectiveAt(String effectiveAt) {
            this.effectiveAt = effectiveAt;
            return this;
        }

        /**
         * Set asAt
         * @param asAt The asAt datetime at which to retrieve the rule definitions. Defaults to returning the latest version if not  specified. (optional)
         * @return APIlistTaxRuleSetsRequest
         */
        public APIlistTaxRuleSetsRequest asAt(OffsetDateTime asAt) {
            this.asAt = asAt;
            return this;
        }

        /**
         * Build call for listTaxRuleSets
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A list of rule sets available. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listTaxRuleSetsCall(effectiveAt, asAt, _callback);
        }

        /**
         * Execute listTaxRuleSets request
         * @return ResourceListOfTaxRuleSet
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A list of rule sets available. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ResourceListOfTaxRuleSet execute() throws ApiException {
            ApiResponse<ResourceListOfTaxRuleSet> localVarResp = listTaxRuleSetsWithHttpInfo(effectiveAt, asAt);
            return localVarResp.getData();
        }

        /**
         * Execute listTaxRuleSets request. Use any specified configuration options to override any other configuration for this request only.
         * @return ResourceListOfTaxRuleSet
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A list of rule sets available. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ResourceListOfTaxRuleSet execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<ResourceListOfTaxRuleSet> localVarResp = listTaxRuleSetsWithHttpInfo(effectiveAt, asAt, opts);
            return localVarResp.getData();
        }

        /**
         * Execute listTaxRuleSets request with HTTP info returned
         * @return ApiResponse&lt;ResourceListOfTaxRuleSet&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A list of rule sets available. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ResourceListOfTaxRuleSet> executeWithHttpInfo() throws ApiException {
            return listTaxRuleSetsWithHttpInfo(effectiveAt, asAt);
        }

        /**
         * Execute listTaxRuleSets request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;ResourceListOfTaxRuleSet&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A list of rule sets available. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ResourceListOfTaxRuleSet> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return listTaxRuleSetsWithHttpInfo(effectiveAt, asAt, opts);
        }

        /**
         * Execute listTaxRuleSets request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A list of rule sets available. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ResourceListOfTaxRuleSet> _callback) throws ApiException {
            return listTaxRuleSetsAsync(effectiveAt, asAt, _callback);
        }

        /**
         * Execute listTaxRuleSets request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A list of rule sets available. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ResourceListOfTaxRuleSet> _callback, ConfigurationOptions opts) throws ApiException {
            return listTaxRuleSetsAsync(effectiveAt, asAt, _callback, opts);
        }
    }

    /**
     * [EXPERIMENTAL] ListTaxRuleSets: List tax rule sets.
     * Retrieves all tax rule set definitions at the given effective and as at times
     * @return APIlistTaxRuleSetsRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of rule sets available. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIlistTaxRuleSetsRequest listTaxRuleSets() {
        return new APIlistTaxRuleSetsRequest();
    }
    private okhttp3.Call updateTaxRuleSetCall(String scope, String code, UpdateTaxRuleSetRequest updateTaxRuleSetRequest, String effectiveAt, final ApiCallback _callback) throws ApiException {
        return updateTaxRuleSetCall(scope, code, updateTaxRuleSetRequest, effectiveAt,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call updateTaxRuleSetCall(String scope, String code, UpdateTaxRuleSetRequest updateTaxRuleSetRequest, String effectiveAt, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateTaxRuleSetRequest;

        // create path and map variables
        String localVarPath = "/api/tax/rulesets/{scope}/{code}"
            .replace("{" + "scope" + "}", localVarApiClient.escapeString(scope.toString()))
            .replace("{" + "code" + "}", localVarApiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (effectiveAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("effectiveAt", effectiveAt));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateTaxRuleSetValidateBeforeCall(String scope, String code, UpdateTaxRuleSetRequest updateTaxRuleSetRequest, String effectiveAt, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling updateTaxRuleSet(Async)");
        }

        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling updateTaxRuleSet(Async)");
        }

        // verify the required parameter 'updateTaxRuleSetRequest' is set
        if (updateTaxRuleSetRequest == null) {
            throw new ApiException("Missing the required parameter 'updateTaxRuleSetRequest' when calling updateTaxRuleSet(Async)");
        }

        return updateTaxRuleSetCall(scope, code, updateTaxRuleSetRequest, effectiveAt, _callback, opts);

    }


    private ApiResponse<TaxRuleSet> updateTaxRuleSetWithHttpInfo(String scope, String code, UpdateTaxRuleSetRequest updateTaxRuleSetRequest, String effectiveAt) throws ApiException {
        okhttp3.Call localVarCall = updateTaxRuleSetValidateBeforeCall(scope, code, updateTaxRuleSetRequest, effectiveAt, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<TaxRuleSet>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<TaxRuleSet> updateTaxRuleSetWithHttpInfo(String scope, String code, UpdateTaxRuleSetRequest updateTaxRuleSetRequest, String effectiveAt, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = updateTaxRuleSetValidateBeforeCall(scope, code, updateTaxRuleSetRequest, effectiveAt, null, opts);
        Type localVarReturnType = new TypeToken<TaxRuleSet>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateTaxRuleSetAsync(String scope, String code, UpdateTaxRuleSetRequest updateTaxRuleSetRequest, String effectiveAt, final ApiCallback<TaxRuleSet> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateTaxRuleSetValidateBeforeCall(scope, code, updateTaxRuleSetRequest, effectiveAt, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<TaxRuleSet>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call updateTaxRuleSetAsync(String scope, String code, UpdateTaxRuleSetRequest updateTaxRuleSetRequest, String effectiveAt, final ApiCallback<TaxRuleSet> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = updateTaxRuleSetValidateBeforeCall(scope, code, updateTaxRuleSetRequest, effectiveAt, _callback, opts);
        Type localVarReturnType = new TypeToken<TaxRuleSet>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIupdateTaxRuleSetRequest {
        private final String scope;
        private final String code;
        private final UpdateTaxRuleSetRequest updateTaxRuleSetRequest;
        private String effectiveAt;

        private APIupdateTaxRuleSetRequest(String scope, String code, UpdateTaxRuleSetRequest updateTaxRuleSetRequest) {
            this.scope = scope;
            this.code = code;
            this.updateTaxRuleSetRequest = updateTaxRuleSetRequest;
        }

        /**
         * Set effectiveAt
         * @param effectiveAt The effective datetime or cut label at which the rule set will take effect.  Defaults to the current LUSID system datetime if not specified. (optional)
         * @return APIupdateTaxRuleSetRequest
         */
        public APIupdateTaxRuleSetRequest effectiveAt(String effectiveAt) {
            this.effectiveAt = effectiveAt;
            return this;
        }

        /**
         * Build call for updateTaxRuleSet
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Update rules for tax calculations. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return updateTaxRuleSetCall(scope, code, updateTaxRuleSetRequest, effectiveAt, _callback);
        }

        /**
         * Execute updateTaxRuleSet request
         * @return TaxRuleSet
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Update rules for tax calculations. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public TaxRuleSet execute() throws ApiException {
            ApiResponse<TaxRuleSet> localVarResp = updateTaxRuleSetWithHttpInfo(scope, code, updateTaxRuleSetRequest, effectiveAt);
            return localVarResp.getData();
        }

        /**
         * Execute updateTaxRuleSet request. Use any specified configuration options to override any other configuration for this request only.
         * @return TaxRuleSet
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Update rules for tax calculations. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public TaxRuleSet execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<TaxRuleSet> localVarResp = updateTaxRuleSetWithHttpInfo(scope, code, updateTaxRuleSetRequest, effectiveAt, opts);
            return localVarResp.getData();
        }

        /**
         * Execute updateTaxRuleSet request with HTTP info returned
         * @return ApiResponse&lt;TaxRuleSet&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Update rules for tax calculations. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TaxRuleSet> executeWithHttpInfo() throws ApiException {
            return updateTaxRuleSetWithHttpInfo(scope, code, updateTaxRuleSetRequest, effectiveAt);
        }

        /**
         * Execute updateTaxRuleSet request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;TaxRuleSet&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Update rules for tax calculations. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TaxRuleSet> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return updateTaxRuleSetWithHttpInfo(scope, code, updateTaxRuleSetRequest, effectiveAt, opts);
        }

        /**
         * Execute updateTaxRuleSet request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Update rules for tax calculations. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TaxRuleSet> _callback) throws ApiException {
            return updateTaxRuleSetAsync(scope, code, updateTaxRuleSetRequest, effectiveAt, _callback);
        }

        /**
         * Execute updateTaxRuleSet request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Update rules for tax calculations. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TaxRuleSet> _callback, ConfigurationOptions opts) throws ApiException {
            return updateTaxRuleSetAsync(scope, code, updateTaxRuleSetRequest, effectiveAt, _callback, opts);
        }
    }

    /**
     * [EXPERIMENTAL] UpdateTaxRuleSet: Update a tax rule set.
     * Updates the tax rule set definition at the given effective time.  The changes will take place from this effective time until the next effective time that the rule has been updated at.  For example, consider a rule that has been created or updated effective at the first day of the coming month.  An upsert effective from the current day will only change the definition until that day.  An additional upsert at the same time (first day of the month) is required if the newly-updated definition is to supersede the future definition.  The user must be entitled to read any properties specified in each rule.
     * @param scope The rule set scope. (required)
     * @param code The rule set code. (required)
     * @param updateTaxRuleSetRequest The contents of the rule set. (required)
     * @return APIupdateTaxRuleSetRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update rules for tax calculations. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIupdateTaxRuleSetRequest updateTaxRuleSet(String scope, String code, UpdateTaxRuleSetRequest updateTaxRuleSetRequest) {
        return new APIupdateTaxRuleSetRequest(scope, code, updateTaxRuleSetRequest);
    }
}
