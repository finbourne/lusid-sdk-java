/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.api;

import com.finbourne.lusid.ApiCallback;
import com.finbourne.lusid.ApiClient;
import com.finbourne.lusid.ApiException;
import com.finbourne.lusid.ApiResponse;
import com.finbourne.lusid.Configuration;
import com.finbourne.lusid.Pair;
import com.finbourne.lusid.ProgressRequestBody;
import com.finbourne.lusid.ProgressResponseBody;
import com.finbourne.lusid.extensions.ConfigurationOptions;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.finbourne.lusid.model.CreateGroupReconciliationComparisonRulesetRequest;
import com.finbourne.lusid.model.GroupReconciliationComparisonRuleset;
import com.finbourne.lusid.model.LusidProblemDetails;
import com.finbourne.lusid.model.LusidValidationProblemDetails;
import java.time.OffsetDateTime;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class GroupReconciliationsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public GroupReconciliationsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public GroupReconciliationsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createComparisonRulesetCall(CreateGroupReconciliationComparisonRulesetRequest createGroupReconciliationComparisonRulesetRequest, final ApiCallback _callback) throws ApiException {
        return createComparisonRulesetCall(createGroupReconciliationComparisonRulesetRequest,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call createComparisonRulesetCall(CreateGroupReconciliationComparisonRulesetRequest createGroupReconciliationComparisonRulesetRequest, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createGroupReconciliationComparisonRulesetRequest;

        // create path and map variables
        String localVarPath = "/api/reconciliations/comparisonrulesets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createComparisonRulesetValidateBeforeCall(CreateGroupReconciliationComparisonRulesetRequest createGroupReconciliationComparisonRulesetRequest, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        return createComparisonRulesetCall(createGroupReconciliationComparisonRulesetRequest, _callback, opts);

    }


    private ApiResponse<GroupReconciliationComparisonRuleset> createComparisonRulesetWithHttpInfo(CreateGroupReconciliationComparisonRulesetRequest createGroupReconciliationComparisonRulesetRequest) throws ApiException {
        okhttp3.Call localVarCall = createComparisonRulesetValidateBeforeCall(createGroupReconciliationComparisonRulesetRequest, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<GroupReconciliationComparisonRuleset>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<GroupReconciliationComparisonRuleset> createComparisonRulesetWithHttpInfo(CreateGroupReconciliationComparisonRulesetRequest createGroupReconciliationComparisonRulesetRequest, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = createComparisonRulesetValidateBeforeCall(createGroupReconciliationComparisonRulesetRequest, null, opts);
        Type localVarReturnType = new TypeToken<GroupReconciliationComparisonRuleset>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createComparisonRulesetAsync(CreateGroupReconciliationComparisonRulesetRequest createGroupReconciliationComparisonRulesetRequest, final ApiCallback<GroupReconciliationComparisonRuleset> _callback) throws ApiException {

        okhttp3.Call localVarCall = createComparisonRulesetValidateBeforeCall(createGroupReconciliationComparisonRulesetRequest, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<GroupReconciliationComparisonRuleset>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call createComparisonRulesetAsync(CreateGroupReconciliationComparisonRulesetRequest createGroupReconciliationComparisonRulesetRequest, final ApiCallback<GroupReconciliationComparisonRuleset> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = createComparisonRulesetValidateBeforeCall(createGroupReconciliationComparisonRulesetRequest, _callback, opts);
        Type localVarReturnType = new TypeToken<GroupReconciliationComparisonRuleset>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIcreateComparisonRulesetRequest {
        private CreateGroupReconciliationComparisonRulesetRequest createGroupReconciliationComparisonRulesetRequest;

        private APIcreateComparisonRulesetRequest() {
        }

        /**
         * Set createGroupReconciliationComparisonRulesetRequest
         * @param createGroupReconciliationComparisonRulesetRequest The request containing the details of the ruleset (optional)
         * @return APIcreateComparisonRulesetRequest
         */
        public APIcreateComparisonRulesetRequest createGroupReconciliationComparisonRulesetRequest(CreateGroupReconciliationComparisonRulesetRequest createGroupReconciliationComparisonRulesetRequest) {
            this.createGroupReconciliationComparisonRulesetRequest = createGroupReconciliationComparisonRulesetRequest;
            return this;
        }

        /**
         * Build call for createComparisonRuleset
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The created comparison ruleset </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return createComparisonRulesetCall(createGroupReconciliationComparisonRulesetRequest, _callback);
        }

        /**
         * Execute createComparisonRuleset request
         * @return GroupReconciliationComparisonRuleset
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The created comparison ruleset </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public GroupReconciliationComparisonRuleset execute() throws ApiException {
            ApiResponse<GroupReconciliationComparisonRuleset> localVarResp = createComparisonRulesetWithHttpInfo(createGroupReconciliationComparisonRulesetRequest);
            return localVarResp.getData();
        }

        /**
         * Execute createComparisonRuleset request. Use any specified configuration options to override any other configuration for this request only.
         * @return GroupReconciliationComparisonRuleset
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The created comparison ruleset </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public GroupReconciliationComparisonRuleset execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<GroupReconciliationComparisonRuleset> localVarResp = createComparisonRulesetWithHttpInfo(createGroupReconciliationComparisonRulesetRequest, opts);
            return localVarResp.getData();
        }

        /**
         * Execute createComparisonRuleset request with HTTP info returned
         * @return ApiResponse&lt;GroupReconciliationComparisonRuleset&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The created comparison ruleset </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GroupReconciliationComparisonRuleset> executeWithHttpInfo() throws ApiException {
            return createComparisonRulesetWithHttpInfo(createGroupReconciliationComparisonRulesetRequest);
        }

        /**
         * Execute createComparisonRuleset request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;GroupReconciliationComparisonRuleset&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The created comparison ruleset </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GroupReconciliationComparisonRuleset> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return createComparisonRulesetWithHttpInfo(createGroupReconciliationComparisonRulesetRequest, opts);
        }

        /**
         * Execute createComparisonRuleset request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The created comparison ruleset </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GroupReconciliationComparisonRuleset> _callback) throws ApiException {
            return createComparisonRulesetAsync(createGroupReconciliationComparisonRulesetRequest, _callback);
        }

        /**
         * Execute createComparisonRuleset request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The created comparison ruleset </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GroupReconciliationComparisonRuleset> _callback, ConfigurationOptions opts) throws ApiException {
            return createComparisonRulesetAsync(createGroupReconciliationComparisonRulesetRequest, _callback, opts);
        }
    }

    /**
     * [EXPERIMENTAL] CreateComparisonRuleset: Create a Group Reconciliation Comparison Ruleset
     * Creates a set of core and aggregate rules to be run for a group reconciliation
     * @return APIcreateComparisonRulesetRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The created comparison ruleset </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIcreateComparisonRulesetRequest createComparisonRuleset() {
        return new APIcreateComparisonRulesetRequest();
    }
    private okhttp3.Call getComparisonRulesetCall(String scope, String code, OffsetDateTime asAt, final ApiCallback _callback) throws ApiException {
        return getComparisonRulesetCall(scope, code, asAt,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call getComparisonRulesetCall(String scope, String code, OffsetDateTime asAt, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/reconciliations/comparisonrulesets/{scope}/{code}"
            .replace("{" + "scope" + "}", localVarApiClient.escapeString(scope.toString()))
            .replace("{" + "code" + "}", localVarApiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (asAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asAt", asAt));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getComparisonRulesetValidateBeforeCall(String scope, String code, OffsetDateTime asAt, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling getComparisonRuleset(Async)");
        }

        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling getComparisonRuleset(Async)");
        }

        return getComparisonRulesetCall(scope, code, asAt, _callback, opts);

    }


    private ApiResponse<GroupReconciliationComparisonRuleset> getComparisonRulesetWithHttpInfo(String scope, String code, OffsetDateTime asAt) throws ApiException {
        okhttp3.Call localVarCall = getComparisonRulesetValidateBeforeCall(scope, code, asAt, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<GroupReconciliationComparisonRuleset>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<GroupReconciliationComparisonRuleset> getComparisonRulesetWithHttpInfo(String scope, String code, OffsetDateTime asAt, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = getComparisonRulesetValidateBeforeCall(scope, code, asAt, null, opts);
        Type localVarReturnType = new TypeToken<GroupReconciliationComparisonRuleset>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getComparisonRulesetAsync(String scope, String code, OffsetDateTime asAt, final ApiCallback<GroupReconciliationComparisonRuleset> _callback) throws ApiException {

        okhttp3.Call localVarCall = getComparisonRulesetValidateBeforeCall(scope, code, asAt, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<GroupReconciliationComparisonRuleset>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call getComparisonRulesetAsync(String scope, String code, OffsetDateTime asAt, final ApiCallback<GroupReconciliationComparisonRuleset> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = getComparisonRulesetValidateBeforeCall(scope, code, asAt, _callback, opts);
        Type localVarReturnType = new TypeToken<GroupReconciliationComparisonRuleset>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetComparisonRulesetRequest {
        private final String scope;
        private final String code;
        private OffsetDateTime asAt;

        private APIgetComparisonRulesetRequest(String scope, String code) {
            this.scope = scope;
            this.code = code;
        }

        /**
         * Set asAt
         * @param asAt The asAt datetime at which to retrieve the comparison ruleset definition. Defaults to return   the latest version of the definition if not specified. (optional)
         * @return APIgetComparisonRulesetRequest
         */
        public APIgetComparisonRulesetRequest asAt(OffsetDateTime asAt) {
            this.asAt = asAt;
            return this;
        }

        /**
         * Build call for getComparisonRuleset
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested comparison ruleset </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getComparisonRulesetCall(scope, code, asAt, _callback);
        }

        /**
         * Execute getComparisonRuleset request
         * @return GroupReconciliationComparisonRuleset
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested comparison ruleset </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public GroupReconciliationComparisonRuleset execute() throws ApiException {
            ApiResponse<GroupReconciliationComparisonRuleset> localVarResp = getComparisonRulesetWithHttpInfo(scope, code, asAt);
            return localVarResp.getData();
        }

        /**
         * Execute getComparisonRuleset request. Use any specified configuration options to override any other configuration for this request only.
         * @return GroupReconciliationComparisonRuleset
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested comparison ruleset </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public GroupReconciliationComparisonRuleset execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<GroupReconciliationComparisonRuleset> localVarResp = getComparisonRulesetWithHttpInfo(scope, code, asAt, opts);
            return localVarResp.getData();
        }

        /**
         * Execute getComparisonRuleset request with HTTP info returned
         * @return ApiResponse&lt;GroupReconciliationComparisonRuleset&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested comparison ruleset </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GroupReconciliationComparisonRuleset> executeWithHttpInfo() throws ApiException {
            return getComparisonRulesetWithHttpInfo(scope, code, asAt);
        }

        /**
         * Execute getComparisonRuleset request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;GroupReconciliationComparisonRuleset&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested comparison ruleset </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GroupReconciliationComparisonRuleset> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return getComparisonRulesetWithHttpInfo(scope, code, asAt, opts);
        }

        /**
         * Execute getComparisonRuleset request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested comparison ruleset </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GroupReconciliationComparisonRuleset> _callback) throws ApiException {
            return getComparisonRulesetAsync(scope, code, asAt, _callback);
        }

        /**
         * Execute getComparisonRuleset request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested comparison ruleset </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GroupReconciliationComparisonRuleset> _callback, ConfigurationOptions opts) throws ApiException {
            return getComparisonRulesetAsync(scope, code, asAt, _callback, opts);
        }
    }

    /**
     * [EXPERIMENTAL] GetComparisonRuleset: Get a single Group Reconciliation Comparison Ruleset by scope and code
     * Retrieves one Group Reconciliation Comparison Ruleset by scope and code
     * @param scope The scope of the specified comparison ruleset. (required)
     * @param code The code of the specified comparison ruleset. Together with the domain and scope this uniquely   identifies the reconciliation comparison ruleset. (required)
     * @return APIgetComparisonRulesetRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested comparison ruleset </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIgetComparisonRulesetRequest getComparisonRuleset(String scope, String code) {
        return new APIgetComparisonRulesetRequest(scope, code);
    }
}
