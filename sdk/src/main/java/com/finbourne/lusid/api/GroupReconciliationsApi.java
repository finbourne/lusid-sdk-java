/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.api;

import com.finbourne.lusid.ApiCallback;
import com.finbourne.lusid.ApiClient;
import com.finbourne.lusid.ApiException;
import com.finbourne.lusid.ApiResponse;
import com.finbourne.lusid.Configuration;
import com.finbourne.lusid.Pair;
import com.finbourne.lusid.ProgressRequestBody;
import com.finbourne.lusid.ProgressResponseBody;
import com.finbourne.lusid.extensions.ConfigurationOptions;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.finbourne.lusid.model.CreateGroupReconciliationComparisonRulesetRequest;
import com.finbourne.lusid.model.CreateGroupReconciliationDefinitionRequest;
import com.finbourne.lusid.model.DeletedEntityResponse;
import com.finbourne.lusid.model.GroupReconciliationComparisonResult;
import com.finbourne.lusid.model.GroupReconciliationComparisonRuleset;
import com.finbourne.lusid.model.GroupReconciliationDefinition;
import com.finbourne.lusid.model.LusidProblemDetails;
import com.finbourne.lusid.model.LusidValidationProblemDetails;
import java.time.OffsetDateTime;
import com.finbourne.lusid.model.PagedResourceListOfGroupReconciliationComparisonResult;
import com.finbourne.lusid.model.PagedResourceListOfGroupReconciliationComparisonRuleset;
import com.finbourne.lusid.model.PagedResourceListOfGroupReconciliationDefinition;
import com.finbourne.lusid.model.UpdateGroupReconciliationComparisonRulesetRequest;
import com.finbourne.lusid.model.UpdateGroupReconciliationDefinitionRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class GroupReconciliationsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public GroupReconciliationsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public GroupReconciliationsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createComparisonRulesetCall(CreateGroupReconciliationComparisonRulesetRequest createGroupReconciliationComparisonRulesetRequest, final ApiCallback _callback) throws ApiException {
        return createComparisonRulesetCall(createGroupReconciliationComparisonRulesetRequest,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call createComparisonRulesetCall(CreateGroupReconciliationComparisonRulesetRequest createGroupReconciliationComparisonRulesetRequest, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createGroupReconciliationComparisonRulesetRequest;

        // create path and map variables
        String localVarPath = "/api/reconciliations/comparisonrulesets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createComparisonRulesetValidateBeforeCall(CreateGroupReconciliationComparisonRulesetRequest createGroupReconciliationComparisonRulesetRequest, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        return createComparisonRulesetCall(createGroupReconciliationComparisonRulesetRequest, _callback, opts);

    }


    private ApiResponse<GroupReconciliationComparisonRuleset> createComparisonRulesetWithHttpInfo(CreateGroupReconciliationComparisonRulesetRequest createGroupReconciliationComparisonRulesetRequest) throws ApiException {
        okhttp3.Call localVarCall = createComparisonRulesetValidateBeforeCall(createGroupReconciliationComparisonRulesetRequest, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<GroupReconciliationComparisonRuleset>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<GroupReconciliationComparisonRuleset> createComparisonRulesetWithHttpInfo(CreateGroupReconciliationComparisonRulesetRequest createGroupReconciliationComparisonRulesetRequest, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = createComparisonRulesetValidateBeforeCall(createGroupReconciliationComparisonRulesetRequest, null, opts);
        Type localVarReturnType = new TypeToken<GroupReconciliationComparisonRuleset>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createComparisonRulesetAsync(CreateGroupReconciliationComparisonRulesetRequest createGroupReconciliationComparisonRulesetRequest, final ApiCallback<GroupReconciliationComparisonRuleset> _callback) throws ApiException {

        okhttp3.Call localVarCall = createComparisonRulesetValidateBeforeCall(createGroupReconciliationComparisonRulesetRequest, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<GroupReconciliationComparisonRuleset>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call createComparisonRulesetAsync(CreateGroupReconciliationComparisonRulesetRequest createGroupReconciliationComparisonRulesetRequest, final ApiCallback<GroupReconciliationComparisonRuleset> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = createComparisonRulesetValidateBeforeCall(createGroupReconciliationComparisonRulesetRequest, _callback, opts);
        Type localVarReturnType = new TypeToken<GroupReconciliationComparisonRuleset>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIcreateComparisonRulesetRequest {
        private CreateGroupReconciliationComparisonRulesetRequest createGroupReconciliationComparisonRulesetRequest;

        private APIcreateComparisonRulesetRequest() {
        }

        /**
         * Set createGroupReconciliationComparisonRulesetRequest
         * @param createGroupReconciliationComparisonRulesetRequest The request containing the details of the ruleset (optional)
         * @return APIcreateComparisonRulesetRequest
         */
        public APIcreateComparisonRulesetRequest createGroupReconciliationComparisonRulesetRequest(CreateGroupReconciliationComparisonRulesetRequest createGroupReconciliationComparisonRulesetRequest) {
            this.createGroupReconciliationComparisonRulesetRequest = createGroupReconciliationComparisonRulesetRequest;
            return this;
        }

        /**
         * Build call for createComparisonRuleset
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The created comparison ruleset </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return createComparisonRulesetCall(createGroupReconciliationComparisonRulesetRequest, _callback);
        }

        /**
         * Execute createComparisonRuleset request
         * @return GroupReconciliationComparisonRuleset
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The created comparison ruleset </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public GroupReconciliationComparisonRuleset execute() throws ApiException {
            ApiResponse<GroupReconciliationComparisonRuleset> localVarResp = createComparisonRulesetWithHttpInfo(createGroupReconciliationComparisonRulesetRequest);
            return localVarResp.getData();
        }

        /**
         * Execute createComparisonRuleset request. Use any specified configuration options to override any other configuration for this request only.
         * @return GroupReconciliationComparisonRuleset
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The created comparison ruleset </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public GroupReconciliationComparisonRuleset execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<GroupReconciliationComparisonRuleset> localVarResp = createComparisonRulesetWithHttpInfo(createGroupReconciliationComparisonRulesetRequest, opts);
            return localVarResp.getData();
        }

        /**
         * Execute createComparisonRuleset request with HTTP info returned
         * @return ApiResponse&lt;GroupReconciliationComparisonRuleset&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The created comparison ruleset </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GroupReconciliationComparisonRuleset> executeWithHttpInfo() throws ApiException {
            return createComparisonRulesetWithHttpInfo(createGroupReconciliationComparisonRulesetRequest);
        }

        /**
         * Execute createComparisonRuleset request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;GroupReconciliationComparisonRuleset&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The created comparison ruleset </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GroupReconciliationComparisonRuleset> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return createComparisonRulesetWithHttpInfo(createGroupReconciliationComparisonRulesetRequest, opts);
        }

        /**
         * Execute createComparisonRuleset request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The created comparison ruleset </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GroupReconciliationComparisonRuleset> _callback) throws ApiException {
            return createComparisonRulesetAsync(createGroupReconciliationComparisonRulesetRequest, _callback);
        }

        /**
         * Execute createComparisonRuleset request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The created comparison ruleset </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GroupReconciliationComparisonRuleset> _callback, ConfigurationOptions opts) throws ApiException {
            return createComparisonRulesetAsync(createGroupReconciliationComparisonRulesetRequest, _callback, opts);
        }
    }

    /**
     * [EXPERIMENTAL] CreateComparisonRuleset: Create a Group Reconciliation Comparison Ruleset
     * Creates a set of core and aggregate rules to be run for a group reconciliation
     * @return APIcreateComparisonRulesetRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The created comparison ruleset </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIcreateComparisonRulesetRequest createComparisonRuleset() {
        return new APIcreateComparisonRulesetRequest();
    }
    private okhttp3.Call createGroupReconciliationDefinitionCall(CreateGroupReconciliationDefinitionRequest createGroupReconciliationDefinitionRequest, final ApiCallback _callback) throws ApiException {
        return createGroupReconciliationDefinitionCall(createGroupReconciliationDefinitionRequest,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call createGroupReconciliationDefinitionCall(CreateGroupReconciliationDefinitionRequest createGroupReconciliationDefinitionRequest, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createGroupReconciliationDefinitionRequest;

        // create path and map variables
        String localVarPath = "/api/reconciliations/groupreconciliationdefinitions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createGroupReconciliationDefinitionValidateBeforeCall(CreateGroupReconciliationDefinitionRequest createGroupReconciliationDefinitionRequest, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        return createGroupReconciliationDefinitionCall(createGroupReconciliationDefinitionRequest, _callback, opts);

    }


    private ApiResponse<GroupReconciliationDefinition> createGroupReconciliationDefinitionWithHttpInfo(CreateGroupReconciliationDefinitionRequest createGroupReconciliationDefinitionRequest) throws ApiException {
        okhttp3.Call localVarCall = createGroupReconciliationDefinitionValidateBeforeCall(createGroupReconciliationDefinitionRequest, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<GroupReconciliationDefinition>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<GroupReconciliationDefinition> createGroupReconciliationDefinitionWithHttpInfo(CreateGroupReconciliationDefinitionRequest createGroupReconciliationDefinitionRequest, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = createGroupReconciliationDefinitionValidateBeforeCall(createGroupReconciliationDefinitionRequest, null, opts);
        Type localVarReturnType = new TypeToken<GroupReconciliationDefinition>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createGroupReconciliationDefinitionAsync(CreateGroupReconciliationDefinitionRequest createGroupReconciliationDefinitionRequest, final ApiCallback<GroupReconciliationDefinition> _callback) throws ApiException {

        okhttp3.Call localVarCall = createGroupReconciliationDefinitionValidateBeforeCall(createGroupReconciliationDefinitionRequest, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<GroupReconciliationDefinition>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call createGroupReconciliationDefinitionAsync(CreateGroupReconciliationDefinitionRequest createGroupReconciliationDefinitionRequest, final ApiCallback<GroupReconciliationDefinition> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = createGroupReconciliationDefinitionValidateBeforeCall(createGroupReconciliationDefinitionRequest, _callback, opts);
        Type localVarReturnType = new TypeToken<GroupReconciliationDefinition>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIcreateGroupReconciliationDefinitionRequest {
        private CreateGroupReconciliationDefinitionRequest createGroupReconciliationDefinitionRequest;

        private APIcreateGroupReconciliationDefinitionRequest() {
        }

        /**
         * Set createGroupReconciliationDefinitionRequest
         * @param createGroupReconciliationDefinitionRequest The definition Group Reconciliation Definition details (optional)
         * @return APIcreateGroupReconciliationDefinitionRequest
         */
        public APIcreateGroupReconciliationDefinitionRequest createGroupReconciliationDefinitionRequest(CreateGroupReconciliationDefinitionRequest createGroupReconciliationDefinitionRequest) {
            this.createGroupReconciliationDefinitionRequest = createGroupReconciliationDefinitionRequest;
            return this;
        }

        /**
         * Build call for createGroupReconciliationDefinition
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The newly created Group Reconciliation Definition </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return createGroupReconciliationDefinitionCall(createGroupReconciliationDefinitionRequest, _callback);
        }

        /**
         * Execute createGroupReconciliationDefinition request
         * @return GroupReconciliationDefinition
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The newly created Group Reconciliation Definition </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public GroupReconciliationDefinition execute() throws ApiException {
            ApiResponse<GroupReconciliationDefinition> localVarResp = createGroupReconciliationDefinitionWithHttpInfo(createGroupReconciliationDefinitionRequest);
            return localVarResp.getData();
        }

        /**
         * Execute createGroupReconciliationDefinition request. Use any specified configuration options to override any other configuration for this request only.
         * @return GroupReconciliationDefinition
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The newly created Group Reconciliation Definition </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public GroupReconciliationDefinition execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<GroupReconciliationDefinition> localVarResp = createGroupReconciliationDefinitionWithHttpInfo(createGroupReconciliationDefinitionRequest, opts);
            return localVarResp.getData();
        }

        /**
         * Execute createGroupReconciliationDefinition request with HTTP info returned
         * @return ApiResponse&lt;GroupReconciliationDefinition&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The newly created Group Reconciliation Definition </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GroupReconciliationDefinition> executeWithHttpInfo() throws ApiException {
            return createGroupReconciliationDefinitionWithHttpInfo(createGroupReconciliationDefinitionRequest);
        }

        /**
         * Execute createGroupReconciliationDefinition request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;GroupReconciliationDefinition&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The newly created Group Reconciliation Definition </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GroupReconciliationDefinition> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return createGroupReconciliationDefinitionWithHttpInfo(createGroupReconciliationDefinitionRequest, opts);
        }

        /**
         * Execute createGroupReconciliationDefinition request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The newly created Group Reconciliation Definition </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GroupReconciliationDefinition> _callback) throws ApiException {
            return createGroupReconciliationDefinitionAsync(createGroupReconciliationDefinitionRequest, _callback);
        }

        /**
         * Execute createGroupReconciliationDefinition request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The newly created Group Reconciliation Definition </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GroupReconciliationDefinition> _callback, ConfigurationOptions opts) throws ApiException {
            return createGroupReconciliationDefinitionAsync(createGroupReconciliationDefinitionRequest, _callback, opts);
        }
    }

    /**
     * [EXPERIMENTAL] CreateGroupReconciliationDefinition: Create Group Reconciliation Definition
     * Creates a Group Reconciliation Definition
     * @return APIcreateGroupReconciliationDefinitionRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The newly created Group Reconciliation Definition </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIcreateGroupReconciliationDefinitionRequest createGroupReconciliationDefinition() {
        return new APIcreateGroupReconciliationDefinitionRequest();
    }
    private okhttp3.Call deleteComparisonRulesetCall(String scope, String code, final ApiCallback _callback) throws ApiException {
        return deleteComparisonRulesetCall(scope, code,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call deleteComparisonRulesetCall(String scope, String code, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/reconciliations/comparisonrulesets/{scope}/{code}"
            .replace("{" + "scope" + "}", localVarApiClient.escapeString(scope.toString()))
            .replace("{" + "code" + "}", localVarApiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteComparisonRulesetValidateBeforeCall(String scope, String code, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling deleteComparisonRuleset(Async)");
        }

        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling deleteComparisonRuleset(Async)");
        }

        return deleteComparisonRulesetCall(scope, code, _callback, opts);

    }


    private ApiResponse<DeletedEntityResponse> deleteComparisonRulesetWithHttpInfo(String scope, String code) throws ApiException {
        okhttp3.Call localVarCall = deleteComparisonRulesetValidateBeforeCall(scope, code, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<DeletedEntityResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<DeletedEntityResponse> deleteComparisonRulesetWithHttpInfo(String scope, String code, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = deleteComparisonRulesetValidateBeforeCall(scope, code, null, opts);
        Type localVarReturnType = new TypeToken<DeletedEntityResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteComparisonRulesetAsync(String scope, String code, final ApiCallback<DeletedEntityResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteComparisonRulesetValidateBeforeCall(scope, code, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<DeletedEntityResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call deleteComparisonRulesetAsync(String scope, String code, final ApiCallback<DeletedEntityResponse> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = deleteComparisonRulesetValidateBeforeCall(scope, code, _callback, opts);
        Type localVarReturnType = new TypeToken<DeletedEntityResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIdeleteComparisonRulesetRequest {
        private final String scope;
        private final String code;

        private APIdeleteComparisonRulesetRequest(String scope, String code) {
            this.scope = scope;
            this.code = code;
        }

        /**
         * Build call for deleteComparisonRuleset
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The deleted entity metadata </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteComparisonRulesetCall(scope, code, _callback);
        }

        /**
         * Execute deleteComparisonRuleset request
         * @return DeletedEntityResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The deleted entity metadata </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public DeletedEntityResponse execute() throws ApiException {
            ApiResponse<DeletedEntityResponse> localVarResp = deleteComparisonRulesetWithHttpInfo(scope, code);
            return localVarResp.getData();
        }

        /**
         * Execute deleteComparisonRuleset request. Use any specified configuration options to override any other configuration for this request only.
         * @return DeletedEntityResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The deleted entity metadata </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public DeletedEntityResponse execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<DeletedEntityResponse> localVarResp = deleteComparisonRulesetWithHttpInfo(scope, code, opts);
            return localVarResp.getData();
        }

        /**
         * Execute deleteComparisonRuleset request with HTTP info returned
         * @return ApiResponse&lt;DeletedEntityResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The deleted entity metadata </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DeletedEntityResponse> executeWithHttpInfo() throws ApiException {
            return deleteComparisonRulesetWithHttpInfo(scope, code);
        }

        /**
         * Execute deleteComparisonRuleset request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;DeletedEntityResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The deleted entity metadata </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DeletedEntityResponse> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return deleteComparisonRulesetWithHttpInfo(scope, code, opts);
        }

        /**
         * Execute deleteComparisonRuleset request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The deleted entity metadata </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DeletedEntityResponse> _callback) throws ApiException {
            return deleteComparisonRulesetAsync(scope, code, _callback);
        }

        /**
         * Execute deleteComparisonRuleset request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The deleted entity metadata </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DeletedEntityResponse> _callback, ConfigurationOptions opts) throws ApiException {
            return deleteComparisonRulesetAsync(scope, code, _callback, opts);
        }
    }

    /**
     * [EXPERIMENTAL] DeleteComparisonRuleset: Deletes a particular Group Reconciliation Comparison Ruleset
     * The deletion will take effect from the reconciliation comparison ruleset deletion datetime.  i.e. will no longer exist at any asAt datetime after the asAt datetime of deletion.
     * @param scope The scope of the specified comparison ruleset. (required)
     * @param code The code of the specified comparison ruleset. Together with the domain and scope this uniquely   identifies the reconciliation comparison ruleset. (required)
     * @return APIdeleteComparisonRulesetRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The deleted entity metadata </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIdeleteComparisonRulesetRequest deleteComparisonRuleset(String scope, String code) {
        return new APIdeleteComparisonRulesetRequest(scope, code);
    }
    private okhttp3.Call deleteGroupReconciliationDefinitionCall(String scope, String code, final ApiCallback _callback) throws ApiException {
        return deleteGroupReconciliationDefinitionCall(scope, code,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call deleteGroupReconciliationDefinitionCall(String scope, String code, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/reconciliations/groupreconciliationdefinitions/{scope}/{code}"
            .replace("{" + "scope" + "}", localVarApiClient.escapeString(scope.toString()))
            .replace("{" + "code" + "}", localVarApiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteGroupReconciliationDefinitionValidateBeforeCall(String scope, String code, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling deleteGroupReconciliationDefinition(Async)");
        }

        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling deleteGroupReconciliationDefinition(Async)");
        }

        return deleteGroupReconciliationDefinitionCall(scope, code, _callback, opts);

    }


    private ApiResponse<DeletedEntityResponse> deleteGroupReconciliationDefinitionWithHttpInfo(String scope, String code) throws ApiException {
        okhttp3.Call localVarCall = deleteGroupReconciliationDefinitionValidateBeforeCall(scope, code, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<DeletedEntityResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<DeletedEntityResponse> deleteGroupReconciliationDefinitionWithHttpInfo(String scope, String code, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = deleteGroupReconciliationDefinitionValidateBeforeCall(scope, code, null, opts);
        Type localVarReturnType = new TypeToken<DeletedEntityResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteGroupReconciliationDefinitionAsync(String scope, String code, final ApiCallback<DeletedEntityResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteGroupReconciliationDefinitionValidateBeforeCall(scope, code, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<DeletedEntityResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call deleteGroupReconciliationDefinitionAsync(String scope, String code, final ApiCallback<DeletedEntityResponse> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = deleteGroupReconciliationDefinitionValidateBeforeCall(scope, code, _callback, opts);
        Type localVarReturnType = new TypeToken<DeletedEntityResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIdeleteGroupReconciliationDefinitionRequest {
        private final String scope;
        private final String code;

        private APIdeleteGroupReconciliationDefinitionRequest(String scope, String code) {
            this.scope = scope;
            this.code = code;
        }

        /**
         * Build call for deleteGroupReconciliationDefinition
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The datetime that the group reconciliation definition was deleted </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteGroupReconciliationDefinitionCall(scope, code, _callback);
        }

        /**
         * Execute deleteGroupReconciliationDefinition request
         * @return DeletedEntityResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The datetime that the group reconciliation definition was deleted </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public DeletedEntityResponse execute() throws ApiException {
            ApiResponse<DeletedEntityResponse> localVarResp = deleteGroupReconciliationDefinitionWithHttpInfo(scope, code);
            return localVarResp.getData();
        }

        /**
         * Execute deleteGroupReconciliationDefinition request. Use any specified configuration options to override any other configuration for this request only.
         * @return DeletedEntityResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The datetime that the group reconciliation definition was deleted </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public DeletedEntityResponse execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<DeletedEntityResponse> localVarResp = deleteGroupReconciliationDefinitionWithHttpInfo(scope, code, opts);
            return localVarResp.getData();
        }

        /**
         * Execute deleteGroupReconciliationDefinition request with HTTP info returned
         * @return ApiResponse&lt;DeletedEntityResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The datetime that the group reconciliation definition was deleted </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DeletedEntityResponse> executeWithHttpInfo() throws ApiException {
            return deleteGroupReconciliationDefinitionWithHttpInfo(scope, code);
        }

        /**
         * Execute deleteGroupReconciliationDefinition request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;DeletedEntityResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The datetime that the group reconciliation definition was deleted </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DeletedEntityResponse> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return deleteGroupReconciliationDefinitionWithHttpInfo(scope, code, opts);
        }

        /**
         * Execute deleteGroupReconciliationDefinition request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The datetime that the group reconciliation definition was deleted </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DeletedEntityResponse> _callback) throws ApiException {
            return deleteGroupReconciliationDefinitionAsync(scope, code, _callback);
        }

        /**
         * Execute deleteGroupReconciliationDefinition request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The datetime that the group reconciliation definition was deleted </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DeletedEntityResponse> _callback, ConfigurationOptions opts) throws ApiException {
            return deleteGroupReconciliationDefinitionAsync(scope, code, _callback, opts);
        }
    }

    /**
     * [EXPERIMENTAL] DeleteGroupReconciliationDefinition: Delete Group Reconciliation Definition
     * Delete the group reconciliation definition.
     * @param scope The scope of the group reconciliation definition to delete. (required)
     * @param code The code of the group reconciliation definition to delete. Together with the scope this uniquely identifies the group reconciliation definition to delete. (required)
     * @return APIdeleteGroupReconciliationDefinitionRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The datetime that the group reconciliation definition was deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIdeleteGroupReconciliationDefinitionRequest deleteGroupReconciliationDefinition(String scope, String code) {
        return new APIdeleteGroupReconciliationDefinitionRequest(scope, code);
    }
    private okhttp3.Call getComparisonResultCall(String scope, String code, String resultId, OffsetDateTime asAt, final ApiCallback _callback) throws ApiException {
        return getComparisonResultCall(scope, code, resultId, asAt,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call getComparisonResultCall(String scope, String code, String resultId, OffsetDateTime asAt, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/reconciliations/groupreconciliationdefinitions/{scope}/{code}/{resultId}"
            .replace("{" + "scope" + "}", localVarApiClient.escapeString(scope.toString()))
            .replace("{" + "code" + "}", localVarApiClient.escapeString(code.toString()))
            .replace("{" + "resultId" + "}", localVarApiClient.escapeString(resultId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (asAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asAt", asAt));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getComparisonResultValidateBeforeCall(String scope, String code, String resultId, OffsetDateTime asAt, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling getComparisonResult(Async)");
        }

        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling getComparisonResult(Async)");
        }

        // verify the required parameter 'resultId' is set
        if (resultId == null) {
            throw new ApiException("Missing the required parameter 'resultId' when calling getComparisonResult(Async)");
        }

        return getComparisonResultCall(scope, code, resultId, asAt, _callback, opts);

    }


    private ApiResponse<GroupReconciliationComparisonResult> getComparisonResultWithHttpInfo(String scope, String code, String resultId, OffsetDateTime asAt) throws ApiException {
        okhttp3.Call localVarCall = getComparisonResultValidateBeforeCall(scope, code, resultId, asAt, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<GroupReconciliationComparisonResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<GroupReconciliationComparisonResult> getComparisonResultWithHttpInfo(String scope, String code, String resultId, OffsetDateTime asAt, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = getComparisonResultValidateBeforeCall(scope, code, resultId, asAt, null, opts);
        Type localVarReturnType = new TypeToken<GroupReconciliationComparisonResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getComparisonResultAsync(String scope, String code, String resultId, OffsetDateTime asAt, final ApiCallback<GroupReconciliationComparisonResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = getComparisonResultValidateBeforeCall(scope, code, resultId, asAt, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<GroupReconciliationComparisonResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call getComparisonResultAsync(String scope, String code, String resultId, OffsetDateTime asAt, final ApiCallback<GroupReconciliationComparisonResult> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = getComparisonResultValidateBeforeCall(scope, code, resultId, asAt, _callback, opts);
        Type localVarReturnType = new TypeToken<GroupReconciliationComparisonResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetComparisonResultRequest {
        private final String scope;
        private final String code;
        private final String resultId;
        private OffsetDateTime asAt;

        private APIgetComparisonResultRequest(String scope, String code, String resultId) {
            this.scope = scope;
            this.code = code;
            this.resultId = resultId;
        }

        /**
         * Set asAt
         * @param asAt The asAt datetime at which to retrieve the comparison result definition. Defaults to return   the latest version if not specified. (optional)
         * @return APIgetComparisonResultRequest
         */
        public APIgetComparisonResultRequest asAt(OffsetDateTime asAt) {
            this.asAt = asAt;
            return this;
        }

        /**
         * Build call for getComparisonResult
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested comparison result </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getComparisonResultCall(scope, code, resultId, asAt, _callback);
        }

        /**
         * Execute getComparisonResult request
         * @return GroupReconciliationComparisonResult
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested comparison result </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public GroupReconciliationComparisonResult execute() throws ApiException {
            ApiResponse<GroupReconciliationComparisonResult> localVarResp = getComparisonResultWithHttpInfo(scope, code, resultId, asAt);
            return localVarResp.getData();
        }

        /**
         * Execute getComparisonResult request. Use any specified configuration options to override any other configuration for this request only.
         * @return GroupReconciliationComparisonResult
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested comparison result </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public GroupReconciliationComparisonResult execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<GroupReconciliationComparisonResult> localVarResp = getComparisonResultWithHttpInfo(scope, code, resultId, asAt, opts);
            return localVarResp.getData();
        }

        /**
         * Execute getComparisonResult request with HTTP info returned
         * @return ApiResponse&lt;GroupReconciliationComparisonResult&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested comparison result </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GroupReconciliationComparisonResult> executeWithHttpInfo() throws ApiException {
            return getComparisonResultWithHttpInfo(scope, code, resultId, asAt);
        }

        /**
         * Execute getComparisonResult request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;GroupReconciliationComparisonResult&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested comparison result </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GroupReconciliationComparisonResult> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return getComparisonResultWithHttpInfo(scope, code, resultId, asAt, opts);
        }

        /**
         * Execute getComparisonResult request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested comparison result </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GroupReconciliationComparisonResult> _callback) throws ApiException {
            return getComparisonResultAsync(scope, code, resultId, asAt, _callback);
        }

        /**
         * Execute getComparisonResult request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested comparison result </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GroupReconciliationComparisonResult> _callback, ConfigurationOptions opts) throws ApiException {
            return getComparisonResultAsync(scope, code, resultId, asAt, _callback, opts);
        }
    }

    /**
     * [EXPERIMENTAL] GetComparisonResult: Get a single Group Reconciliation Comparison Result by scope and code.
     * Retrieves one Group Reconciliation Comparison Result by scope and code  with the prior validation that its related reconciliation definition exists.
     * @param scope The scope of the specified comparison result and its related reconciliation definition. (required)
     * @param code The code of the reconciliation definition that was used to produce the reconciliation result. (required)
     * @param resultId The code of the specified reconciliation result. Together with the domain and scope this uniquely   identifies the reconciliation comparison result. This value is also the same as the computed result hash based on property values. (required)
     * @return APIgetComparisonResultRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested comparison result </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIgetComparisonResultRequest getComparisonResult(String scope, String code, String resultId) {
        return new APIgetComparisonResultRequest(scope, code, resultId);
    }
    private okhttp3.Call getComparisonRulesetCall(String scope, String code, OffsetDateTime asAt, final ApiCallback _callback) throws ApiException {
        return getComparisonRulesetCall(scope, code, asAt,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call getComparisonRulesetCall(String scope, String code, OffsetDateTime asAt, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/reconciliations/comparisonrulesets/{scope}/{code}"
            .replace("{" + "scope" + "}", localVarApiClient.escapeString(scope.toString()))
            .replace("{" + "code" + "}", localVarApiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (asAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asAt", asAt));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getComparisonRulesetValidateBeforeCall(String scope, String code, OffsetDateTime asAt, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling getComparisonRuleset(Async)");
        }

        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling getComparisonRuleset(Async)");
        }

        return getComparisonRulesetCall(scope, code, asAt, _callback, opts);

    }


    private ApiResponse<GroupReconciliationComparisonRuleset> getComparisonRulesetWithHttpInfo(String scope, String code, OffsetDateTime asAt) throws ApiException {
        okhttp3.Call localVarCall = getComparisonRulesetValidateBeforeCall(scope, code, asAt, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<GroupReconciliationComparisonRuleset>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<GroupReconciliationComparisonRuleset> getComparisonRulesetWithHttpInfo(String scope, String code, OffsetDateTime asAt, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = getComparisonRulesetValidateBeforeCall(scope, code, asAt, null, opts);
        Type localVarReturnType = new TypeToken<GroupReconciliationComparisonRuleset>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getComparisonRulesetAsync(String scope, String code, OffsetDateTime asAt, final ApiCallback<GroupReconciliationComparisonRuleset> _callback) throws ApiException {

        okhttp3.Call localVarCall = getComparisonRulesetValidateBeforeCall(scope, code, asAt, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<GroupReconciliationComparisonRuleset>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call getComparisonRulesetAsync(String scope, String code, OffsetDateTime asAt, final ApiCallback<GroupReconciliationComparisonRuleset> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = getComparisonRulesetValidateBeforeCall(scope, code, asAt, _callback, opts);
        Type localVarReturnType = new TypeToken<GroupReconciliationComparisonRuleset>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetComparisonRulesetRequest {
        private final String scope;
        private final String code;
        private OffsetDateTime asAt;

        private APIgetComparisonRulesetRequest(String scope, String code) {
            this.scope = scope;
            this.code = code;
        }

        /**
         * Set asAt
         * @param asAt The asAt datetime at which to retrieve the comparison ruleset definition. Defaults to return   the latest version of the definition if not specified. (optional)
         * @return APIgetComparisonRulesetRequest
         */
        public APIgetComparisonRulesetRequest asAt(OffsetDateTime asAt) {
            this.asAt = asAt;
            return this;
        }

        /**
         * Build call for getComparisonRuleset
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested comparison ruleset </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getComparisonRulesetCall(scope, code, asAt, _callback);
        }

        /**
         * Execute getComparisonRuleset request
         * @return GroupReconciliationComparisonRuleset
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested comparison ruleset </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public GroupReconciliationComparisonRuleset execute() throws ApiException {
            ApiResponse<GroupReconciliationComparisonRuleset> localVarResp = getComparisonRulesetWithHttpInfo(scope, code, asAt);
            return localVarResp.getData();
        }

        /**
         * Execute getComparisonRuleset request. Use any specified configuration options to override any other configuration for this request only.
         * @return GroupReconciliationComparisonRuleset
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested comparison ruleset </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public GroupReconciliationComparisonRuleset execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<GroupReconciliationComparisonRuleset> localVarResp = getComparisonRulesetWithHttpInfo(scope, code, asAt, opts);
            return localVarResp.getData();
        }

        /**
         * Execute getComparisonRuleset request with HTTP info returned
         * @return ApiResponse&lt;GroupReconciliationComparisonRuleset&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested comparison ruleset </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GroupReconciliationComparisonRuleset> executeWithHttpInfo() throws ApiException {
            return getComparisonRulesetWithHttpInfo(scope, code, asAt);
        }

        /**
         * Execute getComparisonRuleset request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;GroupReconciliationComparisonRuleset&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested comparison ruleset </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GroupReconciliationComparisonRuleset> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return getComparisonRulesetWithHttpInfo(scope, code, asAt, opts);
        }

        /**
         * Execute getComparisonRuleset request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested comparison ruleset </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GroupReconciliationComparisonRuleset> _callback) throws ApiException {
            return getComparisonRulesetAsync(scope, code, asAt, _callback);
        }

        /**
         * Execute getComparisonRuleset request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested comparison ruleset </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GroupReconciliationComparisonRuleset> _callback, ConfigurationOptions opts) throws ApiException {
            return getComparisonRulesetAsync(scope, code, asAt, _callback, opts);
        }
    }

    /**
     * [EXPERIMENTAL] GetComparisonRuleset: Get a single Group Reconciliation Comparison Ruleset by scope and code.
     * Retrieves one Group Reconciliation Comparison Ruleset by scope and code.
     * @param scope The scope of the specified comparison ruleset. (required)
     * @param code The code of the specified comparison ruleset. Together with the domain and scope this uniquely   identifies the reconciliation comparison ruleset. (required)
     * @return APIgetComparisonRulesetRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested comparison ruleset </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIgetComparisonRulesetRequest getComparisonRuleset(String scope, String code) {
        return new APIgetComparisonRulesetRequest(scope, code);
    }
    private okhttp3.Call getGroupReconciliationDefinitionCall(String scope, String code, String effectiveAt, OffsetDateTime asAt, final ApiCallback _callback) throws ApiException {
        return getGroupReconciliationDefinitionCall(scope, code, effectiveAt, asAt,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call getGroupReconciliationDefinitionCall(String scope, String code, String effectiveAt, OffsetDateTime asAt, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/reconciliations/groupreconciliationdefinitions/{scope}/{code}"
            .replace("{" + "scope" + "}", localVarApiClient.escapeString(scope.toString()))
            .replace("{" + "code" + "}", localVarApiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (effectiveAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("effectiveAt", effectiveAt));
        }

        if (asAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asAt", asAt));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGroupReconciliationDefinitionValidateBeforeCall(String scope, String code, String effectiveAt, OffsetDateTime asAt, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling getGroupReconciliationDefinition(Async)");
        }

        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling getGroupReconciliationDefinition(Async)");
        }

        return getGroupReconciliationDefinitionCall(scope, code, effectiveAt, asAt, _callback, opts);

    }


    private ApiResponse<GroupReconciliationDefinition> getGroupReconciliationDefinitionWithHttpInfo(String scope, String code, String effectiveAt, OffsetDateTime asAt) throws ApiException {
        okhttp3.Call localVarCall = getGroupReconciliationDefinitionValidateBeforeCall(scope, code, effectiveAt, asAt, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<GroupReconciliationDefinition>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<GroupReconciliationDefinition> getGroupReconciliationDefinitionWithHttpInfo(String scope, String code, String effectiveAt, OffsetDateTime asAt, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = getGroupReconciliationDefinitionValidateBeforeCall(scope, code, effectiveAt, asAt, null, opts);
        Type localVarReturnType = new TypeToken<GroupReconciliationDefinition>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getGroupReconciliationDefinitionAsync(String scope, String code, String effectiveAt, OffsetDateTime asAt, final ApiCallback<GroupReconciliationDefinition> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGroupReconciliationDefinitionValidateBeforeCall(scope, code, effectiveAt, asAt, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<GroupReconciliationDefinition>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call getGroupReconciliationDefinitionAsync(String scope, String code, String effectiveAt, OffsetDateTime asAt, final ApiCallback<GroupReconciliationDefinition> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = getGroupReconciliationDefinitionValidateBeforeCall(scope, code, effectiveAt, asAt, _callback, opts);
        Type localVarReturnType = new TypeToken<GroupReconciliationDefinition>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetGroupReconciliationDefinitionRequest {
        private final String scope;
        private final String code;
        private String effectiveAt;
        private OffsetDateTime asAt;

        private APIgetGroupReconciliationDefinitionRequest(String scope, String code) {
            this.scope = scope;
            this.code = code;
        }

        /**
         * Set effectiveAt
         * @param effectiveAt The effective datetime or cut label at which to retrieve the group reconciliation definition. Defaults to the current LUSID system datetime if not specified. (optional)
         * @return APIgetGroupReconciliationDefinitionRequest
         */
        public APIgetGroupReconciliationDefinitionRequest effectiveAt(String effectiveAt) {
            this.effectiveAt = effectiveAt;
            return this;
        }

        /**
         * Set asAt
         * @param asAt The asAt datetime at which to retrieve the group reconciliation definition. Defaults to return the latest version of the portfolio group definition if not specified. (optional)
         * @return APIgetGroupReconciliationDefinitionRequest
         */
        public APIgetGroupReconciliationDefinitionRequest asAt(OffsetDateTime asAt) {
            this.asAt = asAt;
            return this;
        }

        /**
         * Build call for getGroupReconciliationDefinition
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested group reconciliation definition </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getGroupReconciliationDefinitionCall(scope, code, effectiveAt, asAt, _callback);
        }

        /**
         * Execute getGroupReconciliationDefinition request
         * @return GroupReconciliationDefinition
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested group reconciliation definition </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public GroupReconciliationDefinition execute() throws ApiException {
            ApiResponse<GroupReconciliationDefinition> localVarResp = getGroupReconciliationDefinitionWithHttpInfo(scope, code, effectiveAt, asAt);
            return localVarResp.getData();
        }

        /**
         * Execute getGroupReconciliationDefinition request. Use any specified configuration options to override any other configuration for this request only.
         * @return GroupReconciliationDefinition
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested group reconciliation definition </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public GroupReconciliationDefinition execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<GroupReconciliationDefinition> localVarResp = getGroupReconciliationDefinitionWithHttpInfo(scope, code, effectiveAt, asAt, opts);
            return localVarResp.getData();
        }

        /**
         * Execute getGroupReconciliationDefinition request with HTTP info returned
         * @return ApiResponse&lt;GroupReconciliationDefinition&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested group reconciliation definition </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GroupReconciliationDefinition> executeWithHttpInfo() throws ApiException {
            return getGroupReconciliationDefinitionWithHttpInfo(scope, code, effectiveAt, asAt);
        }

        /**
         * Execute getGroupReconciliationDefinition request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;GroupReconciliationDefinition&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested group reconciliation definition </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GroupReconciliationDefinition> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return getGroupReconciliationDefinitionWithHttpInfo(scope, code, effectiveAt, asAt, opts);
        }

        /**
         * Execute getGroupReconciliationDefinition request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested group reconciliation definition </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GroupReconciliationDefinition> _callback) throws ApiException {
            return getGroupReconciliationDefinitionAsync(scope, code, effectiveAt, asAt, _callback);
        }

        /**
         * Execute getGroupReconciliationDefinition request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested group reconciliation definition </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GroupReconciliationDefinition> _callback, ConfigurationOptions opts) throws ApiException {
            return getGroupReconciliationDefinitionAsync(scope, code, effectiveAt, asAt, _callback, opts);
        }
    }

    /**
     * [EXPERIMENTAL] GetGroupReconciliationDefinition: Get group reconciliation definition
     * Retrieves a Group Reconciliation Definition by scope and code
     * @param scope The scope of the group reconciliation definition to retrieve. (required)
     * @param code The code of the group reconciliation definition to retrieve. Together with the scope   this uniquely identifies the group reconciliation definition. (required)
     * @return APIgetGroupReconciliationDefinitionRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested group reconciliation definition </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIgetGroupReconciliationDefinitionRequest getGroupReconciliationDefinition(String scope, String code) {
        return new APIgetGroupReconciliationDefinitionRequest(scope, code);
    }
    private okhttp3.Call listComparisonResultsCall(OffsetDateTime asAt, String page, List<String> sortBy, Integer limit, String filter, final ApiCallback _callback) throws ApiException {
        return listComparisonResultsCall(asAt, page, sortBy, limit, filter,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call listComparisonResultsCall(OffsetDateTime asAt, String page, List<String> sortBy, Integer limit, String filter, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/reconciliations/comparisonresults";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (asAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asAt", asAt));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (sortBy != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "sortBy", sortBy));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listComparisonResultsValidateBeforeCall(OffsetDateTime asAt, String page, List<String> sortBy, Integer limit, String filter, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        return listComparisonResultsCall(asAt, page, sortBy, limit, filter, _callback, opts);

    }


    private ApiResponse<PagedResourceListOfGroupReconciliationComparisonResult> listComparisonResultsWithHttpInfo(OffsetDateTime asAt, String page, List<String> sortBy, Integer limit, String filter) throws ApiException {
        okhttp3.Call localVarCall = listComparisonResultsValidateBeforeCall(asAt, page, sortBy, limit, filter, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<PagedResourceListOfGroupReconciliationComparisonResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<PagedResourceListOfGroupReconciliationComparisonResult> listComparisonResultsWithHttpInfo(OffsetDateTime asAt, String page, List<String> sortBy, Integer limit, String filter, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = listComparisonResultsValidateBeforeCall(asAt, page, sortBy, limit, filter, null, opts);
        Type localVarReturnType = new TypeToken<PagedResourceListOfGroupReconciliationComparisonResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listComparisonResultsAsync(OffsetDateTime asAt, String page, List<String> sortBy, Integer limit, String filter, final ApiCallback<PagedResourceListOfGroupReconciliationComparisonResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = listComparisonResultsValidateBeforeCall(asAt, page, sortBy, limit, filter, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<PagedResourceListOfGroupReconciliationComparisonResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call listComparisonResultsAsync(OffsetDateTime asAt, String page, List<String> sortBy, Integer limit, String filter, final ApiCallback<PagedResourceListOfGroupReconciliationComparisonResult> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = listComparisonResultsValidateBeforeCall(asAt, page, sortBy, limit, filter, _callback, opts);
        Type localVarReturnType = new TypeToken<PagedResourceListOfGroupReconciliationComparisonResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIlistComparisonResultsRequest {
        private OffsetDateTime asAt;
        private String page;
        private List<String> sortBy;
        private Integer limit;
        private String filter;

        private APIlistComparisonResultsRequest() {
        }

        /**
         * Set asAt
         * @param asAt The asAt datetime at which to retrieve the comparison results. Defaults to return the latest   version of the comparison results if not specified. (optional)
         * @return APIlistComparisonResultsRequest
         */
        public APIlistComparisonResultsRequest asAt(OffsetDateTime asAt) {
            this.asAt = asAt;
            return this;
        }

        /**
         * Set page
         * @param page The pagination token to use to continue listing comparison results from a previous call to list   comparison results. This value is returned from the previous call. If a pagination token is provided the sortBy,   filter, effectiveAt, and asAt fields must not have changed since the original request. (optional)
         * @return APIlistComparisonResultsRequest
         */
        public APIlistComparisonResultsRequest page(String page) {
            this.page = page;
            return this;
        }

        /**
         * Set sortBy
         * @param sortBy A list of field names to sort by, each suffixed by \&quot; ASC\&quot; or \&quot; DESC\&quot;. (optional)
         * @return APIlistComparisonResultsRequest
         */
        public APIlistComparisonResultsRequest sortBy(List<String> sortBy) {
            this.sortBy = sortBy;
            return this;
        }

        /**
         * Set limit
         * @param limit When paginating, limit the number of returned results to this many per page. (optional)
         * @return APIlistComparisonResultsRequest
         */
        public APIlistComparisonResultsRequest limit(Integer limit) {
            this.limit = limit;
            return this;
        }

        /**
         * Set filter
         * @param filter Expression to filter the result set. Read more about filtering results from LUSID here:   https://support.lusid.com/filtering-results-from-lusid. (optional)
         * @return APIlistComparisonResultsRequest
         */
        public APIlistComparisonResultsRequest filter(String filter) {
            this.filter = filter;
            return this;
        }

        /**
         * Build call for listComparisonResults
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested list of comparison results </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listComparisonResultsCall(asAt, page, sortBy, limit, filter, _callback);
        }

        /**
         * Execute listComparisonResults request
         * @return PagedResourceListOfGroupReconciliationComparisonResult
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested list of comparison results </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public PagedResourceListOfGroupReconciliationComparisonResult execute() throws ApiException {
            ApiResponse<PagedResourceListOfGroupReconciliationComparisonResult> localVarResp = listComparisonResultsWithHttpInfo(asAt, page, sortBy, limit, filter);
            return localVarResp.getData();
        }

        /**
         * Execute listComparisonResults request. Use any specified configuration options to override any other configuration for this request only.
         * @return PagedResourceListOfGroupReconciliationComparisonResult
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested list of comparison results </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public PagedResourceListOfGroupReconciliationComparisonResult execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<PagedResourceListOfGroupReconciliationComparisonResult> localVarResp = listComparisonResultsWithHttpInfo(asAt, page, sortBy, limit, filter, opts);
            return localVarResp.getData();
        }

        /**
         * Execute listComparisonResults request with HTTP info returned
         * @return ApiResponse&lt;PagedResourceListOfGroupReconciliationComparisonResult&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested list of comparison results </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PagedResourceListOfGroupReconciliationComparisonResult> executeWithHttpInfo() throws ApiException {
            return listComparisonResultsWithHttpInfo(asAt, page, sortBy, limit, filter);
        }

        /**
         * Execute listComparisonResults request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;PagedResourceListOfGroupReconciliationComparisonResult&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested list of comparison results </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PagedResourceListOfGroupReconciliationComparisonResult> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return listComparisonResultsWithHttpInfo(asAt, page, sortBy, limit, filter, opts);
        }

        /**
         * Execute listComparisonResults request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested list of comparison results </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PagedResourceListOfGroupReconciliationComparisonResult> _callback) throws ApiException {
            return listComparisonResultsAsync(asAt, page, sortBy, limit, filter, _callback);
        }

        /**
         * Execute listComparisonResults request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested list of comparison results </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PagedResourceListOfGroupReconciliationComparisonResult> _callback, ConfigurationOptions opts) throws ApiException {
            return listComparisonResultsAsync(asAt, page, sortBy, limit, filter, _callback, opts);
        }
    }

    /**
     * [EXPERIMENTAL] ListComparisonResults: Get a set of Group Reconciliation Comparison Results.
     * Retrieves all Group Reconciliation Comparison Results that fit the filter, in a specific order if sortBy is provided.  Supports pagination.
     * @return APIlistComparisonResultsRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested list of comparison results </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIlistComparisonResultsRequest listComparisonResults() {
        return new APIlistComparisonResultsRequest();
    }
    private okhttp3.Call listComparisonRulesetsCall(OffsetDateTime asAt, String page, List<String> sortBy, Integer limit, String filter, final ApiCallback _callback) throws ApiException {
        return listComparisonRulesetsCall(asAt, page, sortBy, limit, filter,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call listComparisonRulesetsCall(OffsetDateTime asAt, String page, List<String> sortBy, Integer limit, String filter, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/reconciliations/comparisonrulesets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (asAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asAt", asAt));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (sortBy != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "sortBy", sortBy));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listComparisonRulesetsValidateBeforeCall(OffsetDateTime asAt, String page, List<String> sortBy, Integer limit, String filter, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        return listComparisonRulesetsCall(asAt, page, sortBy, limit, filter, _callback, opts);

    }


    private ApiResponse<PagedResourceListOfGroupReconciliationComparisonRuleset> listComparisonRulesetsWithHttpInfo(OffsetDateTime asAt, String page, List<String> sortBy, Integer limit, String filter) throws ApiException {
        okhttp3.Call localVarCall = listComparisonRulesetsValidateBeforeCall(asAt, page, sortBy, limit, filter, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<PagedResourceListOfGroupReconciliationComparisonRuleset>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<PagedResourceListOfGroupReconciliationComparisonRuleset> listComparisonRulesetsWithHttpInfo(OffsetDateTime asAt, String page, List<String> sortBy, Integer limit, String filter, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = listComparisonRulesetsValidateBeforeCall(asAt, page, sortBy, limit, filter, null, opts);
        Type localVarReturnType = new TypeToken<PagedResourceListOfGroupReconciliationComparisonRuleset>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listComparisonRulesetsAsync(OffsetDateTime asAt, String page, List<String> sortBy, Integer limit, String filter, final ApiCallback<PagedResourceListOfGroupReconciliationComparisonRuleset> _callback) throws ApiException {

        okhttp3.Call localVarCall = listComparisonRulesetsValidateBeforeCall(asAt, page, sortBy, limit, filter, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<PagedResourceListOfGroupReconciliationComparisonRuleset>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call listComparisonRulesetsAsync(OffsetDateTime asAt, String page, List<String> sortBy, Integer limit, String filter, final ApiCallback<PagedResourceListOfGroupReconciliationComparisonRuleset> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = listComparisonRulesetsValidateBeforeCall(asAt, page, sortBy, limit, filter, _callback, opts);
        Type localVarReturnType = new TypeToken<PagedResourceListOfGroupReconciliationComparisonRuleset>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIlistComparisonRulesetsRequest {
        private OffsetDateTime asAt;
        private String page;
        private List<String> sortBy;
        private Integer limit;
        private String filter;

        private APIlistComparisonRulesetsRequest() {
        }

        /**
         * Set asAt
         * @param asAt The asAt datetime at which to retrieve the comparison rulesets. Defaults to return the latest   version of the comparison rulesets if not specified. (optional)
         * @return APIlistComparisonRulesetsRequest
         */
        public APIlistComparisonRulesetsRequest asAt(OffsetDateTime asAt) {
            this.asAt = asAt;
            return this;
        }

        /**
         * Set page
         * @param page The pagination token to use to continue listing comparison rulesets from a previous call to list   comparison rulesets. This value is returned from the previous call. If a pagination token is provided the sortBy,   filter, effectiveAt, and asAt fields must not have changed since the original request. (optional)
         * @return APIlistComparisonRulesetsRequest
         */
        public APIlistComparisonRulesetsRequest page(String page) {
            this.page = page;
            return this;
        }

        /**
         * Set sortBy
         * @param sortBy A list of field names to sort by, each suffixed by \&quot; ASC\&quot; or \&quot; DESC\&quot; (optional)
         * @return APIlistComparisonRulesetsRequest
         */
        public APIlistComparisonRulesetsRequest sortBy(List<String> sortBy) {
            this.sortBy = sortBy;
            return this;
        }

        /**
         * Set limit
         * @param limit When paginating, limit the number of returned results to this many per page. (optional)
         * @return APIlistComparisonRulesetsRequest
         */
        public APIlistComparisonRulesetsRequest limit(Integer limit) {
            this.limit = limit;
            return this;
        }

        /**
         * Set filter
         * @param filter Expression to filter the result set. Read more about filtering results from LUSID here:   https://support.lusid.com/filtering-results-from-lusid. (optional)
         * @return APIlistComparisonRulesetsRequest
         */
        public APIlistComparisonRulesetsRequest filter(String filter) {
            this.filter = filter;
            return this;
        }

        /**
         * Build call for listComparisonRulesets
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested list of comparison rulesets </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listComparisonRulesetsCall(asAt, page, sortBy, limit, filter, _callback);
        }

        /**
         * Execute listComparisonRulesets request
         * @return PagedResourceListOfGroupReconciliationComparisonRuleset
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested list of comparison rulesets </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public PagedResourceListOfGroupReconciliationComparisonRuleset execute() throws ApiException {
            ApiResponse<PagedResourceListOfGroupReconciliationComparisonRuleset> localVarResp = listComparisonRulesetsWithHttpInfo(asAt, page, sortBy, limit, filter);
            return localVarResp.getData();
        }

        /**
         * Execute listComparisonRulesets request. Use any specified configuration options to override any other configuration for this request only.
         * @return PagedResourceListOfGroupReconciliationComparisonRuleset
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested list of comparison rulesets </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public PagedResourceListOfGroupReconciliationComparisonRuleset execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<PagedResourceListOfGroupReconciliationComparisonRuleset> localVarResp = listComparisonRulesetsWithHttpInfo(asAt, page, sortBy, limit, filter, opts);
            return localVarResp.getData();
        }

        /**
         * Execute listComparisonRulesets request with HTTP info returned
         * @return ApiResponse&lt;PagedResourceListOfGroupReconciliationComparisonRuleset&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested list of comparison rulesets </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PagedResourceListOfGroupReconciliationComparisonRuleset> executeWithHttpInfo() throws ApiException {
            return listComparisonRulesetsWithHttpInfo(asAt, page, sortBy, limit, filter);
        }

        /**
         * Execute listComparisonRulesets request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;PagedResourceListOfGroupReconciliationComparisonRuleset&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested list of comparison rulesets </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PagedResourceListOfGroupReconciliationComparisonRuleset> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return listComparisonRulesetsWithHttpInfo(asAt, page, sortBy, limit, filter, opts);
        }

        /**
         * Execute listComparisonRulesets request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested list of comparison rulesets </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PagedResourceListOfGroupReconciliationComparisonRuleset> _callback) throws ApiException {
            return listComparisonRulesetsAsync(asAt, page, sortBy, limit, filter, _callback);
        }

        /**
         * Execute listComparisonRulesets request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested list of comparison rulesets </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PagedResourceListOfGroupReconciliationComparisonRuleset> _callback, ConfigurationOptions opts) throws ApiException {
            return listComparisonRulesetsAsync(asAt, page, sortBy, limit, filter, _callback, opts);
        }
    }

    /**
     * [EXPERIMENTAL] ListComparisonRulesets: Get a set of Group Reconciliation Comparison Rulesets
     * Retrieves all Group Reconciliation Comparison Ruleset that fit the filter, in a specific order if sortBy is provided  Supports pagination
     * @return APIlistComparisonRulesetsRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested list of comparison rulesets </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIlistComparisonRulesetsRequest listComparisonRulesets() {
        return new APIlistComparisonRulesetsRequest();
    }
    private okhttp3.Call listGroupReconciliationDefinitionsCall(String effectiveAt, OffsetDateTime asAt, String page, Integer limit, String filter, List<String> sortBy, final ApiCallback _callback) throws ApiException {
        return listGroupReconciliationDefinitionsCall(effectiveAt, asAt, page, limit, filter, sortBy,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call listGroupReconciliationDefinitionsCall(String effectiveAt, OffsetDateTime asAt, String page, Integer limit, String filter, List<String> sortBy, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/reconciliations/groupreconciliationdefinitions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (effectiveAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("effectiveAt", effectiveAt));
        }

        if (asAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asAt", asAt));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (sortBy != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "sortBy", sortBy));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listGroupReconciliationDefinitionsValidateBeforeCall(String effectiveAt, OffsetDateTime asAt, String page, Integer limit, String filter, List<String> sortBy, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        return listGroupReconciliationDefinitionsCall(effectiveAt, asAt, page, limit, filter, sortBy, _callback, opts);

    }


    private ApiResponse<PagedResourceListOfGroupReconciliationDefinition> listGroupReconciliationDefinitionsWithHttpInfo(String effectiveAt, OffsetDateTime asAt, String page, Integer limit, String filter, List<String> sortBy) throws ApiException {
        okhttp3.Call localVarCall = listGroupReconciliationDefinitionsValidateBeforeCall(effectiveAt, asAt, page, limit, filter, sortBy, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<PagedResourceListOfGroupReconciliationDefinition>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<PagedResourceListOfGroupReconciliationDefinition> listGroupReconciliationDefinitionsWithHttpInfo(String effectiveAt, OffsetDateTime asAt, String page, Integer limit, String filter, List<String> sortBy, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = listGroupReconciliationDefinitionsValidateBeforeCall(effectiveAt, asAt, page, limit, filter, sortBy, null, opts);
        Type localVarReturnType = new TypeToken<PagedResourceListOfGroupReconciliationDefinition>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listGroupReconciliationDefinitionsAsync(String effectiveAt, OffsetDateTime asAt, String page, Integer limit, String filter, List<String> sortBy, final ApiCallback<PagedResourceListOfGroupReconciliationDefinition> _callback) throws ApiException {

        okhttp3.Call localVarCall = listGroupReconciliationDefinitionsValidateBeforeCall(effectiveAt, asAt, page, limit, filter, sortBy, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<PagedResourceListOfGroupReconciliationDefinition>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call listGroupReconciliationDefinitionsAsync(String effectiveAt, OffsetDateTime asAt, String page, Integer limit, String filter, List<String> sortBy, final ApiCallback<PagedResourceListOfGroupReconciliationDefinition> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = listGroupReconciliationDefinitionsValidateBeforeCall(effectiveAt, asAt, page, limit, filter, sortBy, _callback, opts);
        Type localVarReturnType = new TypeToken<PagedResourceListOfGroupReconciliationDefinition>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIlistGroupReconciliationDefinitionsRequest {
        private String effectiveAt;
        private OffsetDateTime asAt;
        private String page;
        private Integer limit;
        private String filter;
        private List<String> sortBy;

        private APIlistGroupReconciliationDefinitionsRequest() {
        }

        /**
         * Set effectiveAt
         * @param effectiveAt The effective datetime or cut label at which to list the group reconciliation definitions. Defaults to the current LUSID system datetime if not specified. (optional)
         * @return APIlistGroupReconciliationDefinitionsRequest
         */
        public APIlistGroupReconciliationDefinitionsRequest effectiveAt(String effectiveAt) {
            this.effectiveAt = effectiveAt;
            return this;
        }

        /**
         * Set asAt
         * @param asAt The asAt datetime at which to list the group reconciliation definitions. Defaults to return the latest version of each group reconciliation definition if not specified. (optional)
         * @return APIlistGroupReconciliationDefinitionsRequest
         */
        public APIlistGroupReconciliationDefinitionsRequest asAt(OffsetDateTime asAt) {
            this.asAt = asAt;
            return this;
        }

        /**
         * Set page
         * @param page The pagination token to use to continue listing group reconciliation definitions from a previous call to list group reconciliation definitions. This  value is returned from the previous call. If a pagination token is provided the filter, effectiveAt, sortBy  and asAt fields must not have changed since the original request. (optional)
         * @return APIlistGroupReconciliationDefinitionsRequest
         */
        public APIlistGroupReconciliationDefinitionsRequest page(String page) {
            this.page = page;
            return this;
        }

        /**
         * Set limit
         * @param limit When paginating, limit the number of returned results to this many. Defaults to no limit if not specified. (optional)
         * @return APIlistGroupReconciliationDefinitionsRequest
         */
        public APIlistGroupReconciliationDefinitionsRequest limit(Integer limit) {
            this.limit = limit;
            return this;
        }

        /**
         * Set filter
         * @param filter Expression to filter the result set.   For example, to filter on the Display Name, use \&quot;displayName eq &#39;string&#39;\&quot;   Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid. (optional)
         * @return APIlistGroupReconciliationDefinitionsRequest
         */
        public APIlistGroupReconciliationDefinitionsRequest filter(String filter) {
            this.filter = filter;
            return this;
        }

        /**
         * Set sortBy
         * @param sortBy A list of field names to sort by, each suffixed by \&quot; ASC\&quot; or \&quot; DESC\&quot; (optional)
         * @return APIlistGroupReconciliationDefinitionsRequest
         */
        public APIlistGroupReconciliationDefinitionsRequest sortBy(List<String> sortBy) {
            this.sortBy = sortBy;
            return this;
        }

        /**
         * Build call for listGroupReconciliationDefinitions
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The group reconciliation definition in the specified scope </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listGroupReconciliationDefinitionsCall(effectiveAt, asAt, page, limit, filter, sortBy, _callback);
        }

        /**
         * Execute listGroupReconciliationDefinitions request
         * @return PagedResourceListOfGroupReconciliationDefinition
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The group reconciliation definition in the specified scope </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public PagedResourceListOfGroupReconciliationDefinition execute() throws ApiException {
            ApiResponse<PagedResourceListOfGroupReconciliationDefinition> localVarResp = listGroupReconciliationDefinitionsWithHttpInfo(effectiveAt, asAt, page, limit, filter, sortBy);
            return localVarResp.getData();
        }

        /**
         * Execute listGroupReconciliationDefinitions request. Use any specified configuration options to override any other configuration for this request only.
         * @return PagedResourceListOfGroupReconciliationDefinition
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The group reconciliation definition in the specified scope </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public PagedResourceListOfGroupReconciliationDefinition execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<PagedResourceListOfGroupReconciliationDefinition> localVarResp = listGroupReconciliationDefinitionsWithHttpInfo(effectiveAt, asAt, page, limit, filter, sortBy, opts);
            return localVarResp.getData();
        }

        /**
         * Execute listGroupReconciliationDefinitions request with HTTP info returned
         * @return ApiResponse&lt;PagedResourceListOfGroupReconciliationDefinition&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The group reconciliation definition in the specified scope </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PagedResourceListOfGroupReconciliationDefinition> executeWithHttpInfo() throws ApiException {
            return listGroupReconciliationDefinitionsWithHttpInfo(effectiveAt, asAt, page, limit, filter, sortBy);
        }

        /**
         * Execute listGroupReconciliationDefinitions request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;PagedResourceListOfGroupReconciliationDefinition&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The group reconciliation definition in the specified scope </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PagedResourceListOfGroupReconciliationDefinition> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return listGroupReconciliationDefinitionsWithHttpInfo(effectiveAt, asAt, page, limit, filter, sortBy, opts);
        }

        /**
         * Execute listGroupReconciliationDefinitions request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The group reconciliation definition in the specified scope </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PagedResourceListOfGroupReconciliationDefinition> _callback) throws ApiException {
            return listGroupReconciliationDefinitionsAsync(effectiveAt, asAt, page, limit, filter, sortBy, _callback);
        }

        /**
         * Execute listGroupReconciliationDefinitions request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The group reconciliation definition in the specified scope </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PagedResourceListOfGroupReconciliationDefinition> _callback, ConfigurationOptions opts) throws ApiException {
            return listGroupReconciliationDefinitionsAsync(effectiveAt, asAt, page, limit, filter, sortBy, _callback, opts);
        }
    }

    /**
     * [EXPERIMENTAL] ListGroupReconciliationDefinitions: List group reconciliation definitions
     * Lists Group Reconciliation Definitions matching any provided filter, limit and sorting rules
     * @return APIlistGroupReconciliationDefinitionsRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The group reconciliation definition in the specified scope </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIlistGroupReconciliationDefinitionsRequest listGroupReconciliationDefinitions() {
        return new APIlistGroupReconciliationDefinitionsRequest();
    }
    private okhttp3.Call updateComparisonRulesetCall(String scope, String code, UpdateGroupReconciliationComparisonRulesetRequest updateGroupReconciliationComparisonRulesetRequest, final ApiCallback _callback) throws ApiException {
        return updateComparisonRulesetCall(scope, code, updateGroupReconciliationComparisonRulesetRequest,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call updateComparisonRulesetCall(String scope, String code, UpdateGroupReconciliationComparisonRulesetRequest updateGroupReconciliationComparisonRulesetRequest, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateGroupReconciliationComparisonRulesetRequest;

        // create path and map variables
        String localVarPath = "/api/reconciliations/comparisonrulesets/{scope}/{code}"
            .replace("{" + "scope" + "}", localVarApiClient.escapeString(scope.toString()))
            .replace("{" + "code" + "}", localVarApiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateComparisonRulesetValidateBeforeCall(String scope, String code, UpdateGroupReconciliationComparisonRulesetRequest updateGroupReconciliationComparisonRulesetRequest, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling updateComparisonRuleset(Async)");
        }

        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling updateComparisonRuleset(Async)");
        }

        return updateComparisonRulesetCall(scope, code, updateGroupReconciliationComparisonRulesetRequest, _callback, opts);

    }


    private ApiResponse<GroupReconciliationComparisonRuleset> updateComparisonRulesetWithHttpInfo(String scope, String code, UpdateGroupReconciliationComparisonRulesetRequest updateGroupReconciliationComparisonRulesetRequest) throws ApiException {
        okhttp3.Call localVarCall = updateComparisonRulesetValidateBeforeCall(scope, code, updateGroupReconciliationComparisonRulesetRequest, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<GroupReconciliationComparisonRuleset>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<GroupReconciliationComparisonRuleset> updateComparisonRulesetWithHttpInfo(String scope, String code, UpdateGroupReconciliationComparisonRulesetRequest updateGroupReconciliationComparisonRulesetRequest, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = updateComparisonRulesetValidateBeforeCall(scope, code, updateGroupReconciliationComparisonRulesetRequest, null, opts);
        Type localVarReturnType = new TypeToken<GroupReconciliationComparisonRuleset>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateComparisonRulesetAsync(String scope, String code, UpdateGroupReconciliationComparisonRulesetRequest updateGroupReconciliationComparisonRulesetRequest, final ApiCallback<GroupReconciliationComparisonRuleset> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateComparisonRulesetValidateBeforeCall(scope, code, updateGroupReconciliationComparisonRulesetRequest, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<GroupReconciliationComparisonRuleset>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call updateComparisonRulesetAsync(String scope, String code, UpdateGroupReconciliationComparisonRulesetRequest updateGroupReconciliationComparisonRulesetRequest, final ApiCallback<GroupReconciliationComparisonRuleset> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = updateComparisonRulesetValidateBeforeCall(scope, code, updateGroupReconciliationComparisonRulesetRequest, _callback, opts);
        Type localVarReturnType = new TypeToken<GroupReconciliationComparisonRuleset>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIupdateComparisonRulesetRequest {
        private final String scope;
        private final String code;
        private UpdateGroupReconciliationComparisonRulesetRequest updateGroupReconciliationComparisonRulesetRequest;

        private APIupdateComparisonRulesetRequest(String scope, String code) {
            this.scope = scope;
            this.code = code;
        }

        /**
         * Set updateGroupReconciliationComparisonRulesetRequest
         * @param updateGroupReconciliationComparisonRulesetRequest The request containing the updated details of the ruleset (optional)
         * @return APIupdateComparisonRulesetRequest
         */
        public APIupdateComparisonRulesetRequest updateGroupReconciliationComparisonRulesetRequest(UpdateGroupReconciliationComparisonRulesetRequest updateGroupReconciliationComparisonRulesetRequest) {
            this.updateGroupReconciliationComparisonRulesetRequest = updateGroupReconciliationComparisonRulesetRequest;
            return this;
        }

        /**
         * Build call for updateComparisonRuleset
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The updated version of the requested comparison ruleset </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return updateComparisonRulesetCall(scope, code, updateGroupReconciliationComparisonRulesetRequest, _callback);
        }

        /**
         * Execute updateComparisonRuleset request
         * @return GroupReconciliationComparisonRuleset
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The updated version of the requested comparison ruleset </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public GroupReconciliationComparisonRuleset execute() throws ApiException {
            ApiResponse<GroupReconciliationComparisonRuleset> localVarResp = updateComparisonRulesetWithHttpInfo(scope, code, updateGroupReconciliationComparisonRulesetRequest);
            return localVarResp.getData();
        }

        /**
         * Execute updateComparisonRuleset request. Use any specified configuration options to override any other configuration for this request only.
         * @return GroupReconciliationComparisonRuleset
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The updated version of the requested comparison ruleset </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public GroupReconciliationComparisonRuleset execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<GroupReconciliationComparisonRuleset> localVarResp = updateComparisonRulesetWithHttpInfo(scope, code, updateGroupReconciliationComparisonRulesetRequest, opts);
            return localVarResp.getData();
        }

        /**
         * Execute updateComparisonRuleset request with HTTP info returned
         * @return ApiResponse&lt;GroupReconciliationComparisonRuleset&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The updated version of the requested comparison ruleset </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GroupReconciliationComparisonRuleset> executeWithHttpInfo() throws ApiException {
            return updateComparisonRulesetWithHttpInfo(scope, code, updateGroupReconciliationComparisonRulesetRequest);
        }

        /**
         * Execute updateComparisonRuleset request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;GroupReconciliationComparisonRuleset&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The updated version of the requested comparison ruleset </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GroupReconciliationComparisonRuleset> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return updateComparisonRulesetWithHttpInfo(scope, code, updateGroupReconciliationComparisonRulesetRequest, opts);
        }

        /**
         * Execute updateComparisonRuleset request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The updated version of the requested comparison ruleset </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GroupReconciliationComparisonRuleset> _callback) throws ApiException {
            return updateComparisonRulesetAsync(scope, code, updateGroupReconciliationComparisonRulesetRequest, _callback);
        }

        /**
         * Execute updateComparisonRuleset request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The updated version of the requested comparison ruleset </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GroupReconciliationComparisonRuleset> _callback, ConfigurationOptions opts) throws ApiException {
            return updateComparisonRulesetAsync(scope, code, updateGroupReconciliationComparisonRulesetRequest, _callback, opts);
        }
    }

    /**
     * [EXPERIMENTAL] UpdateComparisonRuleset: Update Group Reconciliation Comparison Ruleset defined by scope and code
     * Overwrites an existing Group Reconciliation Comparison Ruleset  Update request has the same required fields as Create apart from the Id
     * @param scope The scope of the specified comparison ruleset. (required)
     * @param code The code of the specified comparison ruleset. Together with the domain and scope this uniquely   identifies the reconciliation comparison ruleset. (required)
     * @return APIupdateComparisonRulesetRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated version of the requested comparison ruleset </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIupdateComparisonRulesetRequest updateComparisonRuleset(String scope, String code) {
        return new APIupdateComparisonRulesetRequest(scope, code);
    }
    private okhttp3.Call updateGroupReconciliationDefinitionCall(String scope, String code, UpdateGroupReconciliationDefinitionRequest updateGroupReconciliationDefinitionRequest, final ApiCallback _callback) throws ApiException {
        return updateGroupReconciliationDefinitionCall(scope, code, updateGroupReconciliationDefinitionRequest,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call updateGroupReconciliationDefinitionCall(String scope, String code, UpdateGroupReconciliationDefinitionRequest updateGroupReconciliationDefinitionRequest, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateGroupReconciliationDefinitionRequest;

        // create path and map variables
        String localVarPath = "/api/reconciliations/groupreconciliationdefinitions/{scope}/{code}"
            .replace("{" + "scope" + "}", localVarApiClient.escapeString(scope.toString()))
            .replace("{" + "code" + "}", localVarApiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateGroupReconciliationDefinitionValidateBeforeCall(String scope, String code, UpdateGroupReconciliationDefinitionRequest updateGroupReconciliationDefinitionRequest, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling updateGroupReconciliationDefinition(Async)");
        }

        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling updateGroupReconciliationDefinition(Async)");
        }

        return updateGroupReconciliationDefinitionCall(scope, code, updateGroupReconciliationDefinitionRequest, _callback, opts);

    }


    private ApiResponse<GroupReconciliationDefinition> updateGroupReconciliationDefinitionWithHttpInfo(String scope, String code, UpdateGroupReconciliationDefinitionRequest updateGroupReconciliationDefinitionRequest) throws ApiException {
        okhttp3.Call localVarCall = updateGroupReconciliationDefinitionValidateBeforeCall(scope, code, updateGroupReconciliationDefinitionRequest, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<GroupReconciliationDefinition>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<GroupReconciliationDefinition> updateGroupReconciliationDefinitionWithHttpInfo(String scope, String code, UpdateGroupReconciliationDefinitionRequest updateGroupReconciliationDefinitionRequest, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = updateGroupReconciliationDefinitionValidateBeforeCall(scope, code, updateGroupReconciliationDefinitionRequest, null, opts);
        Type localVarReturnType = new TypeToken<GroupReconciliationDefinition>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateGroupReconciliationDefinitionAsync(String scope, String code, UpdateGroupReconciliationDefinitionRequest updateGroupReconciliationDefinitionRequest, final ApiCallback<GroupReconciliationDefinition> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateGroupReconciliationDefinitionValidateBeforeCall(scope, code, updateGroupReconciliationDefinitionRequest, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<GroupReconciliationDefinition>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call updateGroupReconciliationDefinitionAsync(String scope, String code, UpdateGroupReconciliationDefinitionRequest updateGroupReconciliationDefinitionRequest, final ApiCallback<GroupReconciliationDefinition> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = updateGroupReconciliationDefinitionValidateBeforeCall(scope, code, updateGroupReconciliationDefinitionRequest, _callback, opts);
        Type localVarReturnType = new TypeToken<GroupReconciliationDefinition>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIupdateGroupReconciliationDefinitionRequest {
        private final String scope;
        private final String code;
        private UpdateGroupReconciliationDefinitionRequest updateGroupReconciliationDefinitionRequest;

        private APIupdateGroupReconciliationDefinitionRequest(String scope, String code) {
            this.scope = scope;
            this.code = code;
        }

        /**
         * Set updateGroupReconciliationDefinitionRequest
         * @param updateGroupReconciliationDefinitionRequest The updated group reconciliation definition. (optional)
         * @return APIupdateGroupReconciliationDefinitionRequest
         */
        public APIupdateGroupReconciliationDefinitionRequest updateGroupReconciliationDefinitionRequest(UpdateGroupReconciliationDefinitionRequest updateGroupReconciliationDefinitionRequest) {
            this.updateGroupReconciliationDefinitionRequest = updateGroupReconciliationDefinitionRequest;
            return this;
        }

        /**
         * Build call for updateGroupReconciliationDefinition
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The updated details of the group reconciliation definition </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return updateGroupReconciliationDefinitionCall(scope, code, updateGroupReconciliationDefinitionRequest, _callback);
        }

        /**
         * Execute updateGroupReconciliationDefinition request
         * @return GroupReconciliationDefinition
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The updated details of the group reconciliation definition </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public GroupReconciliationDefinition execute() throws ApiException {
            ApiResponse<GroupReconciliationDefinition> localVarResp = updateGroupReconciliationDefinitionWithHttpInfo(scope, code, updateGroupReconciliationDefinitionRequest);
            return localVarResp.getData();
        }

        /**
         * Execute updateGroupReconciliationDefinition request. Use any specified configuration options to override any other configuration for this request only.
         * @return GroupReconciliationDefinition
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The updated details of the group reconciliation definition </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public GroupReconciliationDefinition execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<GroupReconciliationDefinition> localVarResp = updateGroupReconciliationDefinitionWithHttpInfo(scope, code, updateGroupReconciliationDefinitionRequest, opts);
            return localVarResp.getData();
        }

        /**
         * Execute updateGroupReconciliationDefinition request with HTTP info returned
         * @return ApiResponse&lt;GroupReconciliationDefinition&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The updated details of the group reconciliation definition </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GroupReconciliationDefinition> executeWithHttpInfo() throws ApiException {
            return updateGroupReconciliationDefinitionWithHttpInfo(scope, code, updateGroupReconciliationDefinitionRequest);
        }

        /**
         * Execute updateGroupReconciliationDefinition request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;GroupReconciliationDefinition&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The updated details of the group reconciliation definition </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GroupReconciliationDefinition> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return updateGroupReconciliationDefinitionWithHttpInfo(scope, code, updateGroupReconciliationDefinitionRequest, opts);
        }

        /**
         * Execute updateGroupReconciliationDefinition request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The updated details of the group reconciliation definition </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GroupReconciliationDefinition> _callback) throws ApiException {
            return updateGroupReconciliationDefinitionAsync(scope, code, updateGroupReconciliationDefinitionRequest, _callback);
        }

        /**
         * Execute updateGroupReconciliationDefinition request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The updated details of the group reconciliation definition </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GroupReconciliationDefinition> _callback, ConfigurationOptions opts) throws ApiException {
            return updateGroupReconciliationDefinitionAsync(scope, code, updateGroupReconciliationDefinitionRequest, _callback, opts);
        }
    }

    /**
     * [EXPERIMENTAL] UpdateGroupReconciliationDefinition: Update group reconciliation definition
     * Update the group reconciliation definition.
     * @param scope The scope of the group reconciliation definition to update the details for. (required)
     * @param code The code of the group reconciliation definition to update the details for. Together with the scope this uniquely identifies the group reconciliation definition. (required)
     * @return APIupdateGroupReconciliationDefinitionRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated details of the group reconciliation definition </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIupdateGroupReconciliationDefinitionRequest updateGroupReconciliationDefinition(String scope, String code) {
        return new APIupdateGroupReconciliationDefinitionRequest(scope, code);
    }
}
