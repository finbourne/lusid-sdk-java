/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.api;

import com.finbourne.lusid.ApiCallback;
import com.finbourne.lusid.ApiClient;
import com.finbourne.lusid.ApiException;
import com.finbourne.lusid.ApiResponse;
import com.finbourne.lusid.Configuration;
import com.finbourne.lusid.Pair;
import com.finbourne.lusid.ProgressRequestBody;
import com.finbourne.lusid.ProgressResponseBody;
import com.finbourne.lusid.extensions.ConfigurationOptions;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.finbourne.lusid.model.DeletedEntityResponse;
import com.finbourne.lusid.model.Execution;
import com.finbourne.lusid.model.ExecutionSetRequest;
import com.finbourne.lusid.model.LusidProblemDetails;
import com.finbourne.lusid.model.LusidValidationProblemDetails;
import java.time.OffsetDateTime;
import com.finbourne.lusid.model.PagedResourceListOfExecution;
import com.finbourne.lusid.model.ResourceListOfExecution;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ExecutionsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ExecutionsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ExecutionsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call deleteExecutionCall(String scope, String code, final ApiCallback _callback) throws ApiException {
        return deleteExecutionCall(scope, code,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call deleteExecutionCall(String scope, String code, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/executions/{scope}/{code}"
            .replace("{" + "scope" + "}", localVarApiClient.escapeString(scope.toString()))
            .replace("{" + "code" + "}", localVarApiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteExecutionValidateBeforeCall(String scope, String code, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling deleteExecution(Async)");
        }

        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling deleteExecution(Async)");
        }

        return deleteExecutionCall(scope, code, _callback, opts);

    }


    private ApiResponse<DeletedEntityResponse> deleteExecutionWithHttpInfo(String scope, String code) throws ApiException {
        okhttp3.Call localVarCall = deleteExecutionValidateBeforeCall(scope, code, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<DeletedEntityResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<DeletedEntityResponse> deleteExecutionWithHttpInfo(String scope, String code, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = deleteExecutionValidateBeforeCall(scope, code, null, opts);
        Type localVarReturnType = new TypeToken<DeletedEntityResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteExecutionAsync(String scope, String code, final ApiCallback<DeletedEntityResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteExecutionValidateBeforeCall(scope, code, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<DeletedEntityResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call deleteExecutionAsync(String scope, String code, final ApiCallback<DeletedEntityResponse> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = deleteExecutionValidateBeforeCall(scope, code, _callback, opts);
        Type localVarReturnType = new TypeToken<DeletedEntityResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIdeleteExecutionRequest {
        private final String scope;
        private final String code;

        private APIdeleteExecutionRequest(String scope, String code) {
            this.scope = scope;
            this.code = code;
        }

        /**
         * Build call for deleteExecution
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The response from deleting an execution. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteExecutionCall(scope, code, _callback);
        }

        /**
         * Execute deleteExecution request
         * @return DeletedEntityResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The response from deleting an execution. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public DeletedEntityResponse execute() throws ApiException {
            ApiResponse<DeletedEntityResponse> localVarResp = deleteExecutionWithHttpInfo(scope, code);
            return localVarResp.getData();
        }

        /**
         * Execute deleteExecution request. Use any specified configuration options to override any other configuration for this request only.
         * @return DeletedEntityResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The response from deleting an execution. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public DeletedEntityResponse execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<DeletedEntityResponse> localVarResp = deleteExecutionWithHttpInfo(scope, code, opts);
            return localVarResp.getData();
        }

        /**
         * Execute deleteExecution request with HTTP info returned
         * @return ApiResponse&lt;DeletedEntityResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The response from deleting an execution. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DeletedEntityResponse> executeWithHttpInfo() throws ApiException {
            return deleteExecutionWithHttpInfo(scope, code);
        }

        /**
         * Execute deleteExecution request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;DeletedEntityResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The response from deleting an execution. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DeletedEntityResponse> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return deleteExecutionWithHttpInfo(scope, code, opts);
        }

        /**
         * Execute deleteExecution request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The response from deleting an execution. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DeletedEntityResponse> _callback) throws ApiException {
            return deleteExecutionAsync(scope, code, _callback);
        }

        /**
         * Execute deleteExecution request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The response from deleting an execution. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DeletedEntityResponse> _callback, ConfigurationOptions opts) throws ApiException {
            return deleteExecutionAsync(scope, code, _callback, opts);
        }
    }

    /**
     * [EARLY ACCESS] DeleteExecution: Delete execution
     * Delete an execution. Deletion will be valid from the execution&#39;s creation datetime.  This means that the execution will no longer exist at any effective datetime from the asAt datetime of deletion.
     * @param scope The execution scope. (required)
     * @param code The execution&#39;s code. This, together with the scope uniquely identifies the execution to delete. (required)
     * @return APIdeleteExecutionRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The response from deleting an execution. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIdeleteExecutionRequest deleteExecution(String scope, String code) {
        return new APIdeleteExecutionRequest(scope, code);
    }
    private okhttp3.Call getExecutionCall(String scope, String code, OffsetDateTime asAt, List<String> propertyKeys, final ApiCallback _callback) throws ApiException {
        return getExecutionCall(scope, code, asAt, propertyKeys,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call getExecutionCall(String scope, String code, OffsetDateTime asAt, List<String> propertyKeys, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/executions/{scope}/{code}"
            .replace("{" + "scope" + "}", localVarApiClient.escapeString(scope.toString()))
            .replace("{" + "code" + "}", localVarApiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (asAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asAt", asAt));
        }

        if (propertyKeys != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "propertyKeys", propertyKeys));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getExecutionValidateBeforeCall(String scope, String code, OffsetDateTime asAt, List<String> propertyKeys, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling getExecution(Async)");
        }

        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling getExecution(Async)");
        }

        return getExecutionCall(scope, code, asAt, propertyKeys, _callback, opts);

    }


    private ApiResponse<Execution> getExecutionWithHttpInfo(String scope, String code, OffsetDateTime asAt, List<String> propertyKeys) throws ApiException {
        okhttp3.Call localVarCall = getExecutionValidateBeforeCall(scope, code, asAt, propertyKeys, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<Execution>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<Execution> getExecutionWithHttpInfo(String scope, String code, OffsetDateTime asAt, List<String> propertyKeys, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = getExecutionValidateBeforeCall(scope, code, asAt, propertyKeys, null, opts);
        Type localVarReturnType = new TypeToken<Execution>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getExecutionAsync(String scope, String code, OffsetDateTime asAt, List<String> propertyKeys, final ApiCallback<Execution> _callback) throws ApiException {

        okhttp3.Call localVarCall = getExecutionValidateBeforeCall(scope, code, asAt, propertyKeys, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<Execution>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call getExecutionAsync(String scope, String code, OffsetDateTime asAt, List<String> propertyKeys, final ApiCallback<Execution> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = getExecutionValidateBeforeCall(scope, code, asAt, propertyKeys, _callback, opts);
        Type localVarReturnType = new TypeToken<Execution>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetExecutionRequest {
        private final String scope;
        private final String code;
        private OffsetDateTime asAt;
        private List<String> propertyKeys;

        private APIgetExecutionRequest(String scope, String code) {
            this.scope = scope;
            this.code = code;
        }

        /**
         * Set asAt
         * @param asAt The asAt datetime at which to retrieve the execution. Defaults to return the latest version of the execution if not specified. (optional)
         * @return APIgetExecutionRequest
         */
        public APIgetExecutionRequest asAt(OffsetDateTime asAt) {
            this.asAt = asAt;
            return this;
        }

        /**
         * Set propertyKeys
         * @param propertyKeys A list of property keys from the \&quot;Execution\&quot; domain to decorate onto the execution.   These take the format {domain}/{scope}/{code} e.g. \&quot;Execution/system/Name\&quot;. (optional)
         * @return APIgetExecutionRequest
         */
        public APIgetExecutionRequest propertyKeys(List<String> propertyKeys) {
            this.propertyKeys = propertyKeys;
            return this;
        }

        /**
         * Build call for getExecution
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The execution matching the given identifier. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getExecutionCall(scope, code, asAt, propertyKeys, _callback);
        }

        /**
         * Execute getExecution request
         * @return Execution
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The execution matching the given identifier. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public Execution execute() throws ApiException {
            ApiResponse<Execution> localVarResp = getExecutionWithHttpInfo(scope, code, asAt, propertyKeys);
            return localVarResp.getData();
        }

        /**
         * Execute getExecution request. Use any specified configuration options to override any other configuration for this request only.
         * @return Execution
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The execution matching the given identifier. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public Execution execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<Execution> localVarResp = getExecutionWithHttpInfo(scope, code, asAt, propertyKeys, opts);
            return localVarResp.getData();
        }

        /**
         * Execute getExecution request with HTTP info returned
         * @return ApiResponse&lt;Execution&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The execution matching the given identifier. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Execution> executeWithHttpInfo() throws ApiException {
            return getExecutionWithHttpInfo(scope, code, asAt, propertyKeys);
        }

        /**
         * Execute getExecution request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;Execution&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The execution matching the given identifier. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Execution> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return getExecutionWithHttpInfo(scope, code, asAt, propertyKeys, opts);
        }

        /**
         * Execute getExecution request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The execution matching the given identifier. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Execution> _callback) throws ApiException {
            return getExecutionAsync(scope, code, asAt, propertyKeys, _callback);
        }

        /**
         * Execute getExecution request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The execution matching the given identifier. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Execution> _callback, ConfigurationOptions opts) throws ApiException {
            return getExecutionAsync(scope, code, asAt, propertyKeys, _callback, opts);
        }
    }

    /**
     * [EARLY ACCESS] GetExecution: Get Execution
     * Fetch a Execution that matches the specified identifier
     * @param scope The scope to which the execution belongs. (required)
     * @param code The execution&#39;s unique identifier. (required)
     * @return APIgetExecutionRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The execution matching the given identifier. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIgetExecutionRequest getExecution(String scope, String code) {
        return new APIgetExecutionRequest(scope, code);
    }
    private okhttp3.Call listExecutionsCall(OffsetDateTime asAt, String page, List<String> sortBy, Integer limit, String filter, List<String> propertyKeys, final ApiCallback _callback) throws ApiException {
        return listExecutionsCall(asAt, page, sortBy, limit, filter, propertyKeys,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call listExecutionsCall(OffsetDateTime asAt, String page, List<String> sortBy, Integer limit, String filter, List<String> propertyKeys, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/executions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (asAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asAt", asAt));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (sortBy != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "sortBy", sortBy));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (propertyKeys != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "propertyKeys", propertyKeys));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listExecutionsValidateBeforeCall(OffsetDateTime asAt, String page, List<String> sortBy, Integer limit, String filter, List<String> propertyKeys, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        return listExecutionsCall(asAt, page, sortBy, limit, filter, propertyKeys, _callback, opts);

    }


    private ApiResponse<PagedResourceListOfExecution> listExecutionsWithHttpInfo(OffsetDateTime asAt, String page, List<String> sortBy, Integer limit, String filter, List<String> propertyKeys) throws ApiException {
        okhttp3.Call localVarCall = listExecutionsValidateBeforeCall(asAt, page, sortBy, limit, filter, propertyKeys, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<PagedResourceListOfExecution>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<PagedResourceListOfExecution> listExecutionsWithHttpInfo(OffsetDateTime asAt, String page, List<String> sortBy, Integer limit, String filter, List<String> propertyKeys, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = listExecutionsValidateBeforeCall(asAt, page, sortBy, limit, filter, propertyKeys, null, opts);
        Type localVarReturnType = new TypeToken<PagedResourceListOfExecution>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listExecutionsAsync(OffsetDateTime asAt, String page, List<String> sortBy, Integer limit, String filter, List<String> propertyKeys, final ApiCallback<PagedResourceListOfExecution> _callback) throws ApiException {

        okhttp3.Call localVarCall = listExecutionsValidateBeforeCall(asAt, page, sortBy, limit, filter, propertyKeys, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<PagedResourceListOfExecution>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call listExecutionsAsync(OffsetDateTime asAt, String page, List<String> sortBy, Integer limit, String filter, List<String> propertyKeys, final ApiCallback<PagedResourceListOfExecution> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = listExecutionsValidateBeforeCall(asAt, page, sortBy, limit, filter, propertyKeys, _callback, opts);
        Type localVarReturnType = new TypeToken<PagedResourceListOfExecution>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIlistExecutionsRequest {
        private OffsetDateTime asAt;
        private String page;
        private List<String> sortBy;
        private Integer limit;
        private String filter;
        private List<String> propertyKeys;

        private APIlistExecutionsRequest() {
        }

        /**
         * Set asAt
         * @param asAt The asAt datetime at which to retrieve the execution. Defaults to return the latest version of the execution if not specified. (optional)
         * @return APIlistExecutionsRequest
         */
        public APIlistExecutionsRequest asAt(OffsetDateTime asAt) {
            this.asAt = asAt;
            return this;
        }

        /**
         * Set page
         * @param page The pagination token to use to continue listing execution from a previous call to list executions.   This value is returned from the previous call. If a pagination token is provided the sortBy, filter, effectiveAt, and asAt fields   must not have changed since the original request. (optional)
         * @return APIlistExecutionsRequest
         */
        public APIlistExecutionsRequest page(String page) {
            this.page = page;
            return this;
        }

        /**
         * Set sortBy
         * @param sortBy A list of field names or properties to sort by, each suffixed by \&quot; ASC\&quot; or \&quot; DESC\&quot;. (optional)
         * @return APIlistExecutionsRequest
         */
        public APIlistExecutionsRequest sortBy(List<String> sortBy) {
            this.sortBy = sortBy;
            return this;
        }

        /**
         * Set limit
         * @param limit When paginating, limit the number of returned results to this many. (optional)
         * @return APIlistExecutionsRequest
         */
        public APIlistExecutionsRequest limit(Integer limit) {
            this.limit = limit;
            return this;
        }

        /**
         * Set filter
         * @param filter Expression to filter the result set. Read more about filtering results from LUSID here:   https://support.lusid.com/filtering-results-from-lusid. (optional)
         * @return APIlistExecutionsRequest
         */
        public APIlistExecutionsRequest filter(String filter) {
            this.filter = filter;
            return this;
        }

        /**
         * Set propertyKeys
         * @param propertyKeys A list of property keys from the \&quot;Execution\&quot; domain to decorate onto each execution.   These take the format {domain}/{scope}/{code} e.g. \&quot;Execution/system/Name\&quot;. (optional)
         * @return APIlistExecutionsRequest
         */
        public APIlistExecutionsRequest propertyKeys(List<String> propertyKeys) {
            this.propertyKeys = propertyKeys;
            return this;
        }

        /**
         * Build call for listExecutions
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Executions in scope. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listExecutionsCall(asAt, page, sortBy, limit, filter, propertyKeys, _callback);
        }

        /**
         * Execute listExecutions request
         * @return PagedResourceListOfExecution
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Executions in scope. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public PagedResourceListOfExecution execute() throws ApiException {
            ApiResponse<PagedResourceListOfExecution> localVarResp = listExecutionsWithHttpInfo(asAt, page, sortBy, limit, filter, propertyKeys);
            return localVarResp.getData();
        }

        /**
         * Execute listExecutions request. Use any specified configuration options to override any other configuration for this request only.
         * @return PagedResourceListOfExecution
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Executions in scope. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public PagedResourceListOfExecution execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<PagedResourceListOfExecution> localVarResp = listExecutionsWithHttpInfo(asAt, page, sortBy, limit, filter, propertyKeys, opts);
            return localVarResp.getData();
        }

        /**
         * Execute listExecutions request with HTTP info returned
         * @return ApiResponse&lt;PagedResourceListOfExecution&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Executions in scope. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PagedResourceListOfExecution> executeWithHttpInfo() throws ApiException {
            return listExecutionsWithHttpInfo(asAt, page, sortBy, limit, filter, propertyKeys);
        }

        /**
         * Execute listExecutions request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;PagedResourceListOfExecution&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Executions in scope. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PagedResourceListOfExecution> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return listExecutionsWithHttpInfo(asAt, page, sortBy, limit, filter, propertyKeys, opts);
        }

        /**
         * Execute listExecutions request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Executions in scope. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PagedResourceListOfExecution> _callback) throws ApiException {
            return listExecutionsAsync(asAt, page, sortBy, limit, filter, propertyKeys, _callback);
        }

        /**
         * Execute listExecutions request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Executions in scope. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PagedResourceListOfExecution> _callback, ConfigurationOptions opts) throws ApiException {
            return listExecutionsAsync(asAt, page, sortBy, limit, filter, propertyKeys, _callback, opts);
        }
    }

    /**
     * ListExecutions: List Executions
     * Fetch the last pre-AsAt date version of each execution in scope (does not fetch the entire history).
     * @return APIlistExecutionsRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Executions in scope. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIlistExecutionsRequest listExecutions() {
        return new APIlistExecutionsRequest();
    }
    private okhttp3.Call upsertExecutionsCall(ExecutionSetRequest executionSetRequest, final ApiCallback _callback) throws ApiException {
        return upsertExecutionsCall(executionSetRequest,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call upsertExecutionsCall(ExecutionSetRequest executionSetRequest, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = executionSetRequest;

        // create path and map variables
        String localVarPath = "/api/executions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call upsertExecutionsValidateBeforeCall(ExecutionSetRequest executionSetRequest, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        return upsertExecutionsCall(executionSetRequest, _callback, opts);

    }


    private ApiResponse<ResourceListOfExecution> upsertExecutionsWithHttpInfo(ExecutionSetRequest executionSetRequest) throws ApiException {
        okhttp3.Call localVarCall = upsertExecutionsValidateBeforeCall(executionSetRequest, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<ResourceListOfExecution>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<ResourceListOfExecution> upsertExecutionsWithHttpInfo(ExecutionSetRequest executionSetRequest, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = upsertExecutionsValidateBeforeCall(executionSetRequest, null, opts);
        Type localVarReturnType = new TypeToken<ResourceListOfExecution>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call upsertExecutionsAsync(ExecutionSetRequest executionSetRequest, final ApiCallback<ResourceListOfExecution> _callback) throws ApiException {

        okhttp3.Call localVarCall = upsertExecutionsValidateBeforeCall(executionSetRequest, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<ResourceListOfExecution>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call upsertExecutionsAsync(ExecutionSetRequest executionSetRequest, final ApiCallback<ResourceListOfExecution> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = upsertExecutionsValidateBeforeCall(executionSetRequest, _callback, opts);
        Type localVarReturnType = new TypeToken<ResourceListOfExecution>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIupsertExecutionsRequest {
        private ExecutionSetRequest executionSetRequest;

        private APIupsertExecutionsRequest() {
        }

        /**
         * Set executionSetRequest
         * @param executionSetRequest The collection of execution requests. (optional)
         * @return APIupsertExecutionsRequest
         */
        public APIupsertExecutionsRequest executionSetRequest(ExecutionSetRequest executionSetRequest) {
            this.executionSetRequest = executionSetRequest;
            return this;
        }

        /**
         * Build call for upsertExecutions
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> A collection of executions. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return upsertExecutionsCall(executionSetRequest, _callback);
        }

        /**
         * Execute upsertExecutions request
         * @return ResourceListOfExecution
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> A collection of executions. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ResourceListOfExecution execute() throws ApiException {
            ApiResponse<ResourceListOfExecution> localVarResp = upsertExecutionsWithHttpInfo(executionSetRequest);
            return localVarResp.getData();
        }

        /**
         * Execute upsertExecutions request. Use any specified configuration options to override any other configuration for this request only.
         * @return ResourceListOfExecution
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> A collection of executions. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ResourceListOfExecution execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<ResourceListOfExecution> localVarResp = upsertExecutionsWithHttpInfo(executionSetRequest, opts);
            return localVarResp.getData();
        }

        /**
         * Execute upsertExecutions request with HTTP info returned
         * @return ApiResponse&lt;ResourceListOfExecution&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> A collection of executions. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ResourceListOfExecution> executeWithHttpInfo() throws ApiException {
            return upsertExecutionsWithHttpInfo(executionSetRequest);
        }

        /**
         * Execute upsertExecutions request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;ResourceListOfExecution&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> A collection of executions. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ResourceListOfExecution> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return upsertExecutionsWithHttpInfo(executionSetRequest, opts);
        }

        /**
         * Execute upsertExecutions request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> A collection of executions. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ResourceListOfExecution> _callback) throws ApiException {
            return upsertExecutionsAsync(executionSetRequest, _callback);
        }

        /**
         * Execute upsertExecutions request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> A collection of executions. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ResourceListOfExecution> _callback, ConfigurationOptions opts) throws ApiException {
            return upsertExecutionsAsync(executionSetRequest, _callback, opts);
        }
    }

    /**
     * UpsertExecutions: Upsert Execution
     * Upsert; update existing executions with given ids, or create new executions otherwise.
     * @return APIupsertExecutionsRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A collection of executions. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIupsertExecutionsRequest upsertExecutions() {
        return new APIupsertExecutionsRequest();
    }
}
