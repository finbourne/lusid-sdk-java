/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.api;

import com.finbourne.lusid.ApiCallback;
import com.finbourne.lusid.ApiClient;
import com.finbourne.lusid.ApiException;
import com.finbourne.lusid.ApiResponse;
import com.finbourne.lusid.Configuration;
import com.finbourne.lusid.Pair;
import com.finbourne.lusid.ProgressRequestBody;
import com.finbourne.lusid.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.finbourne.lusid.model.LusidProblemDetails;
import com.finbourne.lusid.model.LusidValidationProblemDetails;
import java.time.OffsetDateTime;
import com.finbourne.lusid.model.PagedResourceListOfStagedModification;
import com.finbourne.lusid.model.PagedResourceListOfStagedModificationsRequestedChangeInterval;
import com.finbourne.lusid.model.StagedModification;
import com.finbourne.lusid.model.StagedModificationDecisionRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class StagedModificationsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public StagedModificationsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public StagedModificationsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addDecisionCall(String id, StagedModificationDecisionRequest stagedModificationDecisionRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = stagedModificationDecisionRequest;

        // create path and map variables
        String localVarPath = "/api/stagedmodifications/{id}/decision"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addDecisionValidateBeforeCall(String id, StagedModificationDecisionRequest stagedModificationDecisionRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling addDecision(Async)");
        }

        // verify the required parameter 'stagedModificationDecisionRequest' is set
        if (stagedModificationDecisionRequest == null) {
            throw new ApiException("Missing the required parameter 'stagedModificationDecisionRequest' when calling addDecision(Async)");
        }

        return addDecisionCall(id, stagedModificationDecisionRequest, _callback);

    }


    private ApiResponse<StagedModification> addDecisionWithHttpInfo(String id, StagedModificationDecisionRequest stagedModificationDecisionRequest) throws ApiException {
        okhttp3.Call localVarCall = addDecisionValidateBeforeCall(id, stagedModificationDecisionRequest, null);
        Type localVarReturnType = new TypeToken<StagedModification>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addDecisionAsync(String id, StagedModificationDecisionRequest stagedModificationDecisionRequest, final ApiCallback<StagedModification> _callback) throws ApiException {

        okhttp3.Call localVarCall = addDecisionValidateBeforeCall(id, stagedModificationDecisionRequest, _callback);
        Type localVarReturnType = new TypeToken<StagedModification>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIaddDecisionRequest {
        private final String id;
        private final StagedModificationDecisionRequest stagedModificationDecisionRequest;

        private APIaddDecisionRequest(String id, StagedModificationDecisionRequest stagedModificationDecisionRequest) {
            this.id = id;
            this.stagedModificationDecisionRequest = stagedModificationDecisionRequest;
        }

        /**
         * Build call for addDecision
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The staged modification. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return addDecisionCall(id, stagedModificationDecisionRequest, _callback);
        }

        /**
         * Execute addDecision request
         * @return StagedModification
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The staged modification. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public StagedModification execute() throws ApiException {
            ApiResponse<StagedModification> localVarResp = addDecisionWithHttpInfo(id, stagedModificationDecisionRequest);
            return localVarResp.getData();
        }

        /**
         * Execute addDecision request with HTTP info returned
         * @return ApiResponse&lt;StagedModification&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The staged modification. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<StagedModification> executeWithHttpInfo() throws ApiException {
            return addDecisionWithHttpInfo(id, stagedModificationDecisionRequest);
        }

        /**
         * Execute addDecision request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The staged modification. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<StagedModification> _callback) throws ApiException {
            return addDecisionAsync(id, stagedModificationDecisionRequest, _callback);
        }
    }

    /**
     * [EXPERIMENTAL] AddDecision: AddDecision
     * Add decision to staged modification, Approve or Reject.
     * @param id Unique Id for a staged modification.. (required)
     * @param stagedModificationDecisionRequest The decision on the requested staged modification, \&quot;Approve\&quot; or \&quot;Reject\&quot;. (required)
     * @return APIaddDecisionRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The staged modification. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIaddDecisionRequest addDecision(String id, StagedModificationDecisionRequest stagedModificationDecisionRequest) {
        return new APIaddDecisionRequest(id, stagedModificationDecisionRequest);
    }
    private okhttp3.Call getStagedModificationCall(String id, OffsetDateTime asAt, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/stagedmodifications/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (asAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asAt", asAt));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getStagedModificationValidateBeforeCall(String id, OffsetDateTime asAt, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getStagedModification(Async)");
        }

        return getStagedModificationCall(id, asAt, _callback);

    }


    private ApiResponse<StagedModification> getStagedModificationWithHttpInfo(String id, OffsetDateTime asAt) throws ApiException {
        okhttp3.Call localVarCall = getStagedModificationValidateBeforeCall(id, asAt, null);
        Type localVarReturnType = new TypeToken<StagedModification>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getStagedModificationAsync(String id, OffsetDateTime asAt, final ApiCallback<StagedModification> _callback) throws ApiException {

        okhttp3.Call localVarCall = getStagedModificationValidateBeforeCall(id, asAt, _callback);
        Type localVarReturnType = new TypeToken<StagedModification>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetStagedModificationRequest {
        private final String id;
        private OffsetDateTime asAt;

        private APIgetStagedModificationRequest(String id) {
            this.id = id;
        }

        /**
         * Set asAt
         * @param asAt The asAt datetime at which to retrieve the staged modification. Defaults to latest if not specified. (optional)
         * @return APIgetStagedModificationRequest
         */
        public APIgetStagedModificationRequest asAt(OffsetDateTime asAt) {
            this.asAt = asAt;
            return this;
        }

        /**
         * Build call for getStagedModification
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested staged modification. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getStagedModificationCall(id, asAt, _callback);
        }

        /**
         * Execute getStagedModification request
         * @return StagedModification
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested staged modification. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public StagedModification execute() throws ApiException {
            ApiResponse<StagedModification> localVarResp = getStagedModificationWithHttpInfo(id, asAt);
            return localVarResp.getData();
        }

        /**
         * Execute getStagedModification request with HTTP info returned
         * @return ApiResponse&lt;StagedModification&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested staged modification. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<StagedModification> executeWithHttpInfo() throws ApiException {
            return getStagedModificationWithHttpInfo(id, asAt);
        }

        /**
         * Execute getStagedModification request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested staged modification. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<StagedModification> _callback) throws ApiException {
            return getStagedModificationAsync(id, asAt, _callback);
        }
    }

    /**
     * [EXPERIMENTAL] GetStagedModification: GetStagedModification
     * Retrieve the details of a staged modification.
     * @param id The unique identifier for a staged modification. (required)
     * @return APIgetStagedModificationRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested staged modification. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIgetStagedModificationRequest getStagedModification(String id) {
        return new APIgetStagedModificationRequest(id);
    }
    private okhttp3.Call listRequestedChangesCall(String id, OffsetDateTime asAt, String page, Integer limit, String filter, List<String> sortBy, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/stagedmodifications/{id}/requestedChanges"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (asAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asAt", asAt));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (sortBy != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "sortBy", sortBy));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listRequestedChangesValidateBeforeCall(String id, OffsetDateTime asAt, String page, Integer limit, String filter, List<String> sortBy, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling listRequestedChanges(Async)");
        }

        return listRequestedChangesCall(id, asAt, page, limit, filter, sortBy, _callback);

    }


    private ApiResponse<PagedResourceListOfStagedModificationsRequestedChangeInterval> listRequestedChangesWithHttpInfo(String id, OffsetDateTime asAt, String page, Integer limit, String filter, List<String> sortBy) throws ApiException {
        okhttp3.Call localVarCall = listRequestedChangesValidateBeforeCall(id, asAt, page, limit, filter, sortBy, null);
        Type localVarReturnType = new TypeToken<PagedResourceListOfStagedModificationsRequestedChangeInterval>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listRequestedChangesAsync(String id, OffsetDateTime asAt, String page, Integer limit, String filter, List<String> sortBy, final ApiCallback<PagedResourceListOfStagedModificationsRequestedChangeInterval> _callback) throws ApiException {

        okhttp3.Call localVarCall = listRequestedChangesValidateBeforeCall(id, asAt, page, limit, filter, sortBy, _callback);
        Type localVarReturnType = new TypeToken<PagedResourceListOfStagedModificationsRequestedChangeInterval>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIlistRequestedChangesRequest {
        private final String id;
        private OffsetDateTime asAt;
        private String page;
        private Integer limit;
        private String filter;
        private List<String> sortBy;

        private APIlistRequestedChangesRequest(String id) {
            this.id = id;
        }

        /**
         * Set asAt
         * @param asAt The asAt datetime at which to list changes. Defaults to return the latest version   of each staged change if not specified. (optional)
         * @return APIlistRequestedChangesRequest
         */
        public APIlistRequestedChangesRequest asAt(OffsetDateTime asAt) {
            this.asAt = asAt;
            return this;
        }

        /**
         * Set page
         * @param page The pagination token to use to continue listing requested staged modification changes from a previous call to list requested   staged modifications. This value is returned from the previous call. If a pagination token is provided the filter, effectiveAt   and asAt fields must not have changed since the original request. (optional)
         * @return APIlistRequestedChangesRequest
         */
        public APIlistRequestedChangesRequest page(String page) {
            this.page = page;
            return this;
        }

        /**
         * Set limit
         * @param limit When paginating, limit the number of returned results to this many. Defaults to 100 if not specified. (optional)
         * @return APIlistRequestedChangesRequest
         */
        public APIlistRequestedChangesRequest limit(Integer limit) {
            this.limit = limit;
            return this;
        }

        /**
         * Set filter
         * @param filter Expression to filter the result set.   Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid. (optional)
         * @return APIlistRequestedChangesRequest
         */
        public APIlistRequestedChangesRequest filter(String filter) {
            this.filter = filter;
            return this;
        }

        /**
         * Set sortBy
         * @param sortBy A list of field names suffixed by \&quot; ASC\&quot; or \&quot; DESC\&quot; (optional)
         * @return APIlistRequestedChangesRequest
         */
        public APIlistRequestedChangesRequest sortBy(List<String> sortBy) {
            this.sortBy = sortBy;
            return this;
        }

        /**
         * Build call for listRequestedChanges
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Requested changes in staged modification. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listRequestedChangesCall(id, asAt, page, limit, filter, sortBy, _callback);
        }

        /**
         * Execute listRequestedChanges request
         * @return PagedResourceListOfStagedModificationsRequestedChangeInterval
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Requested changes in staged modification. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public PagedResourceListOfStagedModificationsRequestedChangeInterval execute() throws ApiException {
            ApiResponse<PagedResourceListOfStagedModificationsRequestedChangeInterval> localVarResp = listRequestedChangesWithHttpInfo(id, asAt, page, limit, filter, sortBy);
            return localVarResp.getData();
        }

        /**
         * Execute listRequestedChanges request with HTTP info returned
         * @return ApiResponse&lt;PagedResourceListOfStagedModificationsRequestedChangeInterval&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Requested changes in staged modification. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PagedResourceListOfStagedModificationsRequestedChangeInterval> executeWithHttpInfo() throws ApiException {
            return listRequestedChangesWithHttpInfo(id, asAt, page, limit, filter, sortBy);
        }

        /**
         * Execute listRequestedChanges request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Requested changes in staged modification. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PagedResourceListOfStagedModificationsRequestedChangeInterval> _callback) throws ApiException {
            return listRequestedChangesAsync(id, asAt, page, limit, filter, sortBy, _callback);
        }
    }

    /**
     * [EXPERIMENTAL] ListRequestedChanges: ListRequestedChanges
     * List the requested changes for a staged modification.
     * @param id Unique Id for a staged modification.. (required)
     * @return APIlistRequestedChangesRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Requested changes in staged modification. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIlistRequestedChangesRequest listRequestedChanges(String id) {
        return new APIlistRequestedChangesRequest(id);
    }
    private okhttp3.Call listStagedModificationsCall(OffsetDateTime asAt, String page, Integer limit, String filter, List<String> sortBy, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/stagedmodifications";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (asAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asAt", asAt));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (sortBy != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "sortBy", sortBy));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listStagedModificationsValidateBeforeCall(OffsetDateTime asAt, String page, Integer limit, String filter, List<String> sortBy, final ApiCallback _callback) throws ApiException {
        return listStagedModificationsCall(asAt, page, limit, filter, sortBy, _callback);

    }


    private ApiResponse<PagedResourceListOfStagedModification> listStagedModificationsWithHttpInfo(OffsetDateTime asAt, String page, Integer limit, String filter, List<String> sortBy) throws ApiException {
        okhttp3.Call localVarCall = listStagedModificationsValidateBeforeCall(asAt, page, limit, filter, sortBy, null);
        Type localVarReturnType = new TypeToken<PagedResourceListOfStagedModification>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listStagedModificationsAsync(OffsetDateTime asAt, String page, Integer limit, String filter, List<String> sortBy, final ApiCallback<PagedResourceListOfStagedModification> _callback) throws ApiException {

        okhttp3.Call localVarCall = listStagedModificationsValidateBeforeCall(asAt, page, limit, filter, sortBy, _callback);
        Type localVarReturnType = new TypeToken<PagedResourceListOfStagedModification>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIlistStagedModificationsRequest {
        private OffsetDateTime asAt;
        private String page;
        private Integer limit;
        private String filter;
        private List<String> sortBy;

        private APIlistStagedModificationsRequest() {
        }

        /**
         * Set asAt
         * @param asAt The asAt datetime at which to list staged modifications. Defaults to return the latest version   of each staged modification if not specified. (optional)
         * @return APIlistStagedModificationsRequest
         */
        public APIlistStagedModificationsRequest asAt(OffsetDateTime asAt) {
            this.asAt = asAt;
            return this;
        }

        /**
         * Set page
         * @param page The pagination token to use to continue listing staged modifications from a previous call to list staged modifications. This   value is returned from the previous call. If a pagination token is provided the filter, effectiveAt   and asAt fields must not have changed since the original request. (optional)
         * @return APIlistStagedModificationsRequest
         */
        public APIlistStagedModificationsRequest page(String page) {
            this.page = page;
            return this;
        }

        /**
         * Set limit
         * @param limit When paginating, limit the number of returned results to this many. Defaults to 100 if not specified. (optional)
         * @return APIlistStagedModificationsRequest
         */
        public APIlistStagedModificationsRequest limit(Integer limit) {
            this.limit = limit;
            return this;
        }

        /**
         * Set filter
         * @param filter Expression to filter the result set.    Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid. (optional)
         * @return APIlistStagedModificationsRequest
         */
        public APIlistStagedModificationsRequest filter(String filter) {
            this.filter = filter;
            return this;
        }

        /**
         * Set sortBy
         * @param sortBy A list of field names suffixed by \&quot; ASC\&quot; or \&quot; DESC\&quot; (optional)
         * @return APIlistStagedModificationsRequest
         */
        public APIlistStagedModificationsRequest sortBy(List<String> sortBy) {
            this.sortBy = sortBy;
            return this;
        }

        /**
         * Build call for listStagedModifications
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List summary of staged modifications. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listStagedModificationsCall(asAt, page, limit, filter, sortBy, _callback);
        }

        /**
         * Execute listStagedModifications request
         * @return PagedResourceListOfStagedModification
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List summary of staged modifications. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public PagedResourceListOfStagedModification execute() throws ApiException {
            ApiResponse<PagedResourceListOfStagedModification> localVarResp = listStagedModificationsWithHttpInfo(asAt, page, limit, filter, sortBy);
            return localVarResp.getData();
        }

        /**
         * Execute listStagedModifications request with HTTP info returned
         * @return ApiResponse&lt;PagedResourceListOfStagedModification&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List summary of staged modifications. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PagedResourceListOfStagedModification> executeWithHttpInfo() throws ApiException {
            return listStagedModificationsWithHttpInfo(asAt, page, limit, filter, sortBy);
        }

        /**
         * Execute listStagedModifications request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List summary of staged modifications. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PagedResourceListOfStagedModification> _callback) throws ApiException {
            return listStagedModificationsAsync(asAt, page, limit, filter, sortBy, _callback);
        }
    }

    /**
     * [EXPERIMENTAL] ListStagedModifications: ListStagedModifications
     * List summaries of the staged modifications.
     * @return APIlistStagedModificationsRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List summary of staged modifications. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIlistStagedModificationsRequest listStagedModifications() {
        return new APIlistStagedModificationsRequest();
    }
}
