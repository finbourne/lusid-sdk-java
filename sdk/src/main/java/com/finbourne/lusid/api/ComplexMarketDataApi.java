/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.api;

import com.finbourne.lusid.ApiCallback;
import com.finbourne.lusid.ApiClient;
import com.finbourne.lusid.ApiException;
import com.finbourne.lusid.ApiResponse;
import com.finbourne.lusid.Configuration;
import com.finbourne.lusid.Pair;
import com.finbourne.lusid.ProgressRequestBody;
import com.finbourne.lusid.ProgressResponseBody;
import com.finbourne.lusid.extensions.ConfigurationOptions;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.finbourne.lusid.model.AnnulStructuredDataResponse;
import com.finbourne.lusid.model.AppendComplexMarketDataRequest;
import com.finbourne.lusid.model.ComplexMarketDataId;
import com.finbourne.lusid.model.GetComplexMarketDataResponse;
import com.finbourne.lusid.model.LusidProblemDetails;
import com.finbourne.lusid.model.LusidValidationProblemDetails;
import java.time.OffsetDateTime;
import com.finbourne.lusid.model.ResourceListOfListComplexMarketDataWithMetaDataResponse;
import com.finbourne.lusid.model.UpsertComplexMarketDataRequest;
import com.finbourne.lusid.model.UpsertSingleStructuredDataResponse;
import com.finbourne.lusid.model.UpsertStructuredDataResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ComplexMarketDataApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ComplexMarketDataApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ComplexMarketDataApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call deleteComplexMarketDataCall(String scope, Map<String, ComplexMarketDataId> requestBody, final ApiCallback _callback) throws ApiException {
        return deleteComplexMarketDataCall(scope, requestBody,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call deleteComplexMarketDataCall(String scope, Map<String, ComplexMarketDataId> requestBody, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/api/complexmarketdata/{scope}/$delete"
            .replace("{" + "scope" + "}", localVarApiClient.escapeString(scope.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteComplexMarketDataValidateBeforeCall(String scope, Map<String, ComplexMarketDataId> requestBody, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling deleteComplexMarketData(Async)");
        }

        // verify the required parameter 'requestBody' is set
        if (requestBody == null) {
            throw new ApiException("Missing the required parameter 'requestBody' when calling deleteComplexMarketData(Async)");
        }

        return deleteComplexMarketDataCall(scope, requestBody, _callback, opts);

    }


    private ApiResponse<AnnulStructuredDataResponse> deleteComplexMarketDataWithHttpInfo(String scope, Map<String, ComplexMarketDataId> requestBody) throws ApiException {
        okhttp3.Call localVarCall = deleteComplexMarketDataValidateBeforeCall(scope, requestBody, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<AnnulStructuredDataResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<AnnulStructuredDataResponse> deleteComplexMarketDataWithHttpInfo(String scope, Map<String, ComplexMarketDataId> requestBody, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = deleteComplexMarketDataValidateBeforeCall(scope, requestBody, null, opts);
        Type localVarReturnType = new TypeToken<AnnulStructuredDataResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteComplexMarketDataAsync(String scope, Map<String, ComplexMarketDataId> requestBody, final ApiCallback<AnnulStructuredDataResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteComplexMarketDataValidateBeforeCall(scope, requestBody, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<AnnulStructuredDataResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call deleteComplexMarketDataAsync(String scope, Map<String, ComplexMarketDataId> requestBody, final ApiCallback<AnnulStructuredDataResponse> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = deleteComplexMarketDataValidateBeforeCall(scope, requestBody, _callback, opts);
        Type localVarReturnType = new TypeToken<AnnulStructuredDataResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIdeleteComplexMarketDataRequest {
        private final String scope;
        private final Map<String, ComplexMarketDataId> requestBody;

        private APIdeleteComplexMarketDataRequest(String scope, Map<String, ComplexMarketDataId> requestBody) {
            this.scope = scope;
            this.requestBody = requestBody;
        }

        /**
         * Build call for deleteComplexMarketData
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The successfully deleted ComplexMarketData along with any failures </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteComplexMarketDataCall(scope, requestBody, _callback);
        }

        /**
         * Execute deleteComplexMarketData request
         * @return AnnulStructuredDataResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The successfully deleted ComplexMarketData along with any failures </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public AnnulStructuredDataResponse execute() throws ApiException {
            ApiResponse<AnnulStructuredDataResponse> localVarResp = deleteComplexMarketDataWithHttpInfo(scope, requestBody);
            return localVarResp.getData();
        }

        /**
         * Execute deleteComplexMarketData request. Use any specified configuration options to override any other configuration for this request only.
         * @return AnnulStructuredDataResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The successfully deleted ComplexMarketData along with any failures </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public AnnulStructuredDataResponse execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<AnnulStructuredDataResponse> localVarResp = deleteComplexMarketDataWithHttpInfo(scope, requestBody, opts);
            return localVarResp.getData();
        }

        /**
         * Execute deleteComplexMarketData request with HTTP info returned
         * @return ApiResponse&lt;AnnulStructuredDataResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The successfully deleted ComplexMarketData along with any failures </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AnnulStructuredDataResponse> executeWithHttpInfo() throws ApiException {
            return deleteComplexMarketDataWithHttpInfo(scope, requestBody);
        }

        /**
         * Execute deleteComplexMarketData request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;AnnulStructuredDataResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The successfully deleted ComplexMarketData along with any failures </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AnnulStructuredDataResponse> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return deleteComplexMarketDataWithHttpInfo(scope, requestBody, opts);
        }

        /**
         * Execute deleteComplexMarketData request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The successfully deleted ComplexMarketData along with any failures </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AnnulStructuredDataResponse> _callback) throws ApiException {
            return deleteComplexMarketDataAsync(scope, requestBody, _callback);
        }

        /**
         * Execute deleteComplexMarketData request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The successfully deleted ComplexMarketData along with any failures </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AnnulStructuredDataResponse> _callback, ConfigurationOptions opts) throws ApiException {
            return deleteComplexMarketDataAsync(scope, requestBody, _callback, opts);
        }
    }

    /**
     * DeleteComplexMarketData: Delete one or more items of complex market data, assuming they are present.
     * Delete one or more specified complex market data items from a single scope. Each item is identified by a unique id which includes information about its type as well as the exact effective datetime (to the microsecond) at which it entered the system (became valid).   In the request each complex market data item must be keyed by a unique correlation id. This id is ephemeral and is not stored by LUSID. It serves only as a way to easily identify each quote in the response.   The response will return both the collection of successfully deleted complex market data items, as well as those that failed. For the failures a reason will be provided explaining why the it could not be deleted.   It is important to always check the failed set for any unsuccessful results.
     * @param scope The scope of the complex market data to delete. (required)
     * @param requestBody The complex market data Ids to delete, each keyed by a unique correlation id. (required)
     * @return APIdeleteComplexMarketDataRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The successfully deleted ComplexMarketData along with any failures </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIdeleteComplexMarketDataRequest deleteComplexMarketData(String scope, Map<String, ComplexMarketDataId> requestBody) {
        return new APIdeleteComplexMarketDataRequest(scope, requestBody);
    }
    private okhttp3.Call getComplexMarketDataCall(String scope, Map<String, ComplexMarketDataId> requestBody, String effectiveAt, OffsetDateTime asAt, String maxAge, final ApiCallback _callback) throws ApiException {
        return getComplexMarketDataCall(scope, requestBody, effectiveAt, asAt, maxAge,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call getComplexMarketDataCall(String scope, Map<String, ComplexMarketDataId> requestBody, String effectiveAt, OffsetDateTime asAt, String maxAge, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/api/complexmarketdata/{scope}/$get"
            .replace("{" + "scope" + "}", localVarApiClient.escapeString(scope.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (effectiveAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("effectiveAt", effectiveAt));
        }

        if (asAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asAt", asAt));
        }

        if (maxAge != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxAge", maxAge));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getComplexMarketDataValidateBeforeCall(String scope, Map<String, ComplexMarketDataId> requestBody, String effectiveAt, OffsetDateTime asAt, String maxAge, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling getComplexMarketData(Async)");
        }

        // verify the required parameter 'requestBody' is set
        if (requestBody == null) {
            throw new ApiException("Missing the required parameter 'requestBody' when calling getComplexMarketData(Async)");
        }

        return getComplexMarketDataCall(scope, requestBody, effectiveAt, asAt, maxAge, _callback, opts);

    }


    private ApiResponse<GetComplexMarketDataResponse> getComplexMarketDataWithHttpInfo(String scope, Map<String, ComplexMarketDataId> requestBody, String effectiveAt, OffsetDateTime asAt, String maxAge) throws ApiException {
        okhttp3.Call localVarCall = getComplexMarketDataValidateBeforeCall(scope, requestBody, effectiveAt, asAt, maxAge, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<GetComplexMarketDataResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<GetComplexMarketDataResponse> getComplexMarketDataWithHttpInfo(String scope, Map<String, ComplexMarketDataId> requestBody, String effectiveAt, OffsetDateTime asAt, String maxAge, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = getComplexMarketDataValidateBeforeCall(scope, requestBody, effectiveAt, asAt, maxAge, null, opts);
        Type localVarReturnType = new TypeToken<GetComplexMarketDataResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getComplexMarketDataAsync(String scope, Map<String, ComplexMarketDataId> requestBody, String effectiveAt, OffsetDateTime asAt, String maxAge, final ApiCallback<GetComplexMarketDataResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getComplexMarketDataValidateBeforeCall(scope, requestBody, effectiveAt, asAt, maxAge, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<GetComplexMarketDataResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call getComplexMarketDataAsync(String scope, Map<String, ComplexMarketDataId> requestBody, String effectiveAt, OffsetDateTime asAt, String maxAge, final ApiCallback<GetComplexMarketDataResponse> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = getComplexMarketDataValidateBeforeCall(scope, requestBody, effectiveAt, asAt, maxAge, _callback, opts);
        Type localVarReturnType = new TypeToken<GetComplexMarketDataResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetComplexMarketDataRequest {
        private final String scope;
        private final Map<String, ComplexMarketDataId> requestBody;
        private String effectiveAt;
        private OffsetDateTime asAt;
        private String maxAge;

        private APIgetComplexMarketDataRequest(String scope, Map<String, ComplexMarketDataId> requestBody) {
            this.scope = scope;
            this.requestBody = requestBody;
        }

        /**
         * Set effectiveAt
         * @param effectiveAt The effective datetime at which to retrieve the complex market data.  Defaults to the current LUSID system datetime if not specified.  Must match the Effective at of each ComplexMarketDataId given in the request body. (optional)
         * @return APIgetComplexMarketDataRequest
         */
        public APIgetComplexMarketDataRequest effectiveAt(String effectiveAt) {
            this.effectiveAt = effectiveAt;
            return this;
        }

        /**
         * Set asAt
         * @param asAt The asAt datetime at which to retrieve the complex market data. Defaults to return the latest version if not specified. (optional)
         * @return APIgetComplexMarketDataRequest
         */
        public APIgetComplexMarketDataRequest asAt(OffsetDateTime asAt) {
            this.asAt = asAt;
            return this;
        }

        /**
         * Set maxAge
         * @param maxAge The duration of the look back window in an ISO8601 time interval format e.g. P1Y2M3DT4H30M (1 year, 2 months, 3 days, 4 hours and 30 minutes).  This is subtracted from the provided effectiveAt datetime to generate a effective datetime window inside which a complex market data item must exist to be retrieved. (optional)
         * @return APIgetComplexMarketDataRequest
         */
        public APIgetComplexMarketDataRequest maxAge(String maxAge) {
            this.maxAge = maxAge;
            return this;
        }

        /**
         * Build call for getComplexMarketData
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The successfully retrieved complex market data along with any failures </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getComplexMarketDataCall(scope, requestBody, effectiveAt, asAt, maxAge, _callback);
        }

        /**
         * Execute getComplexMarketData request
         * @return GetComplexMarketDataResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The successfully retrieved complex market data along with any failures </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public GetComplexMarketDataResponse execute() throws ApiException {
            ApiResponse<GetComplexMarketDataResponse> localVarResp = getComplexMarketDataWithHttpInfo(scope, requestBody, effectiveAt, asAt, maxAge);
            return localVarResp.getData();
        }

        /**
         * Execute getComplexMarketData request. Use any specified configuration options to override any other configuration for this request only.
         * @return GetComplexMarketDataResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The successfully retrieved complex market data along with any failures </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public GetComplexMarketDataResponse execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<GetComplexMarketDataResponse> localVarResp = getComplexMarketDataWithHttpInfo(scope, requestBody, effectiveAt, asAt, maxAge, opts);
            return localVarResp.getData();
        }

        /**
         * Execute getComplexMarketData request with HTTP info returned
         * @return ApiResponse&lt;GetComplexMarketDataResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The successfully retrieved complex market data along with any failures </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GetComplexMarketDataResponse> executeWithHttpInfo() throws ApiException {
            return getComplexMarketDataWithHttpInfo(scope, requestBody, effectiveAt, asAt, maxAge);
        }

        /**
         * Execute getComplexMarketData request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;GetComplexMarketDataResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The successfully retrieved complex market data along with any failures </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GetComplexMarketDataResponse> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return getComplexMarketDataWithHttpInfo(scope, requestBody, effectiveAt, asAt, maxAge, opts);
        }

        /**
         * Execute getComplexMarketData request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The successfully retrieved complex market data along with any failures </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GetComplexMarketDataResponse> _callback) throws ApiException {
            return getComplexMarketDataAsync(scope, requestBody, effectiveAt, asAt, maxAge, _callback);
        }

        /**
         * Execute getComplexMarketData request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The successfully retrieved complex market data along with any failures </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GetComplexMarketDataResponse> _callback, ConfigurationOptions opts) throws ApiException {
            return getComplexMarketDataAsync(scope, requestBody, effectiveAt, asAt, maxAge, _callback, opts);
        }
    }

    /**
     * GetComplexMarketData: Get complex market data
     * Get one or more items of complex market data from a single scope.   Each item can be identified by its time invariant complex market data identifier.   For each id LUSID will return the most recent matched item with respect to the provided (or default) effective datetime.   An optional maximum age range window can be specified which defines how far back to look back for data from the specified effective datetime. LUSID will return the most recent item within this window.   In the request each complex market data id must be keyed by a unique correlation id. This id is ephemeral and is not stored by LUSID. It serves only as a way to easily identify each item in the response.   The response will return three collections. One, the successfully retrieved complex market data. Two, those that had a valid identifier but could not be found. Three, those that failed because LUSID could not construct a valid identifier from the request.   For the ids that failed to resolve or could not be found a reason will be provided explaining why that is the case.   It is important to always check the failed and not found sets for any unsuccessful results.
     * @param scope The scope of the complex market data to retrieve. (required)
     * @param requestBody The time invariant set of complex data identifiers to retrieve the data for. These need to be  keyed by a unique correlation id allowing the retrieved item to be identified in the response. (required)
     * @return APIgetComplexMarketDataRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The successfully retrieved complex market data along with any failures </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIgetComplexMarketDataRequest getComplexMarketData(String scope, Map<String, ComplexMarketDataId> requestBody) {
        return new APIgetComplexMarketDataRequest(scope, requestBody);
    }
    private okhttp3.Call listComplexMarketDataCall(OffsetDateTime asAt, String effectiveAt, String page, Integer limit, final ApiCallback _callback) throws ApiException {
        return listComplexMarketDataCall(asAt, effectiveAt, page, limit,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call listComplexMarketDataCall(OffsetDateTime asAt, String effectiveAt, String page, Integer limit, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/complexmarketdata";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (asAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asAt", asAt));
        }

        if (effectiveAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("effectiveAt", effectiveAt));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listComplexMarketDataValidateBeforeCall(OffsetDateTime asAt, String effectiveAt, String page, Integer limit, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        return listComplexMarketDataCall(asAt, effectiveAt, page, limit, _callback, opts);

    }


    private ApiResponse<ResourceListOfListComplexMarketDataWithMetaDataResponse> listComplexMarketDataWithHttpInfo(OffsetDateTime asAt, String effectiveAt, String page, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = listComplexMarketDataValidateBeforeCall(asAt, effectiveAt, page, limit, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<ResourceListOfListComplexMarketDataWithMetaDataResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<ResourceListOfListComplexMarketDataWithMetaDataResponse> listComplexMarketDataWithHttpInfo(OffsetDateTime asAt, String effectiveAt, String page, Integer limit, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = listComplexMarketDataValidateBeforeCall(asAt, effectiveAt, page, limit, null, opts);
        Type localVarReturnType = new TypeToken<ResourceListOfListComplexMarketDataWithMetaDataResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listComplexMarketDataAsync(OffsetDateTime asAt, String effectiveAt, String page, Integer limit, final ApiCallback<ResourceListOfListComplexMarketDataWithMetaDataResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listComplexMarketDataValidateBeforeCall(asAt, effectiveAt, page, limit, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<ResourceListOfListComplexMarketDataWithMetaDataResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call listComplexMarketDataAsync(OffsetDateTime asAt, String effectiveAt, String page, Integer limit, final ApiCallback<ResourceListOfListComplexMarketDataWithMetaDataResponse> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = listComplexMarketDataValidateBeforeCall(asAt, effectiveAt, page, limit, _callback, opts);
        Type localVarReturnType = new TypeToken<ResourceListOfListComplexMarketDataWithMetaDataResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIlistComplexMarketDataRequest {
        private OffsetDateTime asAt;
        private String effectiveAt;
        private String page;
        private Integer limit;

        private APIlistComplexMarketDataRequest() {
        }

        /**
         * Set asAt
         * @param asAt The asAt datetime at which to list the ComplexMarketData. Defaults to latest if not specified. (optional)
         * @return APIlistComplexMarketDataRequest
         */
        public APIlistComplexMarketDataRequest asAt(OffsetDateTime asAt) {
            this.asAt = asAt;
            return this;
        }

        /**
         * Set effectiveAt
         * @param effectiveAt The effectiveAt datetime at which to list the ComplexMarketData. Defaults to latest if not specified. Note that this parameter is not implemented at this time and the latest version of the ComplexMarketData will always be returned. (optional)
         * @return APIlistComplexMarketDataRequest
         */
        public APIlistComplexMarketDataRequest effectiveAt(String effectiveAt) {
            this.effectiveAt = effectiveAt;
            return this;
        }

        /**
         * Set page
         * @param page The pagination token to use to continue listing ComplexMarketData; this  value is returned from the previous call. If a pagination token is provided, the effectiveAt  and asAt fields must not have changed since the original request. (optional)
         * @return APIlistComplexMarketDataRequest
         */
        public APIlistComplexMarketDataRequest page(String page) {
            this.page = page;
            return this;
        }

        /**
         * Set limit
         * @param limit When paginating, limit the results to this number. If not specified, no pagination will be applied. It is highly recommended to supply a value for this parameter as the default behaviour will change in the future. (optional)
         * @return APIlistComplexMarketDataRequest
         */
        public APIlistComplexMarketDataRequest limit(Integer limit) {
            this.limit = limit;
            return this;
        }

        /**
         * Build call for listComplexMarketData
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested ComplexMarketData </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listComplexMarketDataCall(asAt, effectiveAt, page, limit, _callback);
        }

        /**
         * Execute listComplexMarketData request
         * @return ResourceListOfListComplexMarketDataWithMetaDataResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested ComplexMarketData </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ResourceListOfListComplexMarketDataWithMetaDataResponse execute() throws ApiException {
            ApiResponse<ResourceListOfListComplexMarketDataWithMetaDataResponse> localVarResp = listComplexMarketDataWithHttpInfo(asAt, effectiveAt, page, limit);
            return localVarResp.getData();
        }

        /**
         * Execute listComplexMarketData request. Use any specified configuration options to override any other configuration for this request only.
         * @return ResourceListOfListComplexMarketDataWithMetaDataResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested ComplexMarketData </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ResourceListOfListComplexMarketDataWithMetaDataResponse execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<ResourceListOfListComplexMarketDataWithMetaDataResponse> localVarResp = listComplexMarketDataWithHttpInfo(asAt, effectiveAt, page, limit, opts);
            return localVarResp.getData();
        }

        /**
         * Execute listComplexMarketData request with HTTP info returned
         * @return ApiResponse&lt;ResourceListOfListComplexMarketDataWithMetaDataResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested ComplexMarketData </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ResourceListOfListComplexMarketDataWithMetaDataResponse> executeWithHttpInfo() throws ApiException {
            return listComplexMarketDataWithHttpInfo(asAt, effectiveAt, page, limit);
        }

        /**
         * Execute listComplexMarketData request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;ResourceListOfListComplexMarketDataWithMetaDataResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested ComplexMarketData </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ResourceListOfListComplexMarketDataWithMetaDataResponse> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return listComplexMarketDataWithHttpInfo(asAt, effectiveAt, page, limit, opts);
        }

        /**
         * Execute listComplexMarketData request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested ComplexMarketData </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ResourceListOfListComplexMarketDataWithMetaDataResponse> _callback) throws ApiException {
            return listComplexMarketDataAsync(asAt, effectiveAt, page, limit, _callback);
        }

        /**
         * Execute listComplexMarketData request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested ComplexMarketData </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ResourceListOfListComplexMarketDataWithMetaDataResponse> _callback, ConfigurationOptions opts) throws ApiException {
            return listComplexMarketDataAsync(asAt, effectiveAt, page, limit, _callback, opts);
        }
    }

    /**
     * ListComplexMarketData: List the set of ComplexMarketData
     * List the set of ComplexMarketData at the specified date/time, along with the scope the data was stored in and its identifier in that scope.
     * @return APIlistComplexMarketDataRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested ComplexMarketData </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIlistComplexMarketDataRequest listComplexMarketData() {
        return new APIlistComplexMarketDataRequest();
    }
    private okhttp3.Call upsertAppendComplexMarketDataCall(String scope, AppendComplexMarketDataRequest appendComplexMarketDataRequest, String effectiveAt, OffsetDateTime asAt, final ApiCallback _callback) throws ApiException {
        return upsertAppendComplexMarketDataCall(scope, appendComplexMarketDataRequest, effectiveAt, asAt,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call upsertAppendComplexMarketDataCall(String scope, AppendComplexMarketDataRequest appendComplexMarketDataRequest, String effectiveAt, OffsetDateTime asAt, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = appendComplexMarketDataRequest;

        // create path and map variables
        String localVarPath = "/api/complexmarketdata/{scope}/$append"
            .replace("{" + "scope" + "}", localVarApiClient.escapeString(scope.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (effectiveAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("effectiveAt", effectiveAt));
        }

        if (asAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asAt", asAt));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call upsertAppendComplexMarketDataValidateBeforeCall(String scope, AppendComplexMarketDataRequest appendComplexMarketDataRequest, String effectiveAt, OffsetDateTime asAt, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling upsertAppendComplexMarketData(Async)");
        }

        // verify the required parameter 'appendComplexMarketDataRequest' is set
        if (appendComplexMarketDataRequest == null) {
            throw new ApiException("Missing the required parameter 'appendComplexMarketDataRequest' when calling upsertAppendComplexMarketData(Async)");
        }

        return upsertAppendComplexMarketDataCall(scope, appendComplexMarketDataRequest, effectiveAt, asAt, _callback, opts);

    }


    private ApiResponse<UpsertSingleStructuredDataResponse> upsertAppendComplexMarketDataWithHttpInfo(String scope, AppendComplexMarketDataRequest appendComplexMarketDataRequest, String effectiveAt, OffsetDateTime asAt) throws ApiException {
        okhttp3.Call localVarCall = upsertAppendComplexMarketDataValidateBeforeCall(scope, appendComplexMarketDataRequest, effectiveAt, asAt, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<UpsertSingleStructuredDataResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<UpsertSingleStructuredDataResponse> upsertAppendComplexMarketDataWithHttpInfo(String scope, AppendComplexMarketDataRequest appendComplexMarketDataRequest, String effectiveAt, OffsetDateTime asAt, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = upsertAppendComplexMarketDataValidateBeforeCall(scope, appendComplexMarketDataRequest, effectiveAt, asAt, null, opts);
        Type localVarReturnType = new TypeToken<UpsertSingleStructuredDataResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call upsertAppendComplexMarketDataAsync(String scope, AppendComplexMarketDataRequest appendComplexMarketDataRequest, String effectiveAt, OffsetDateTime asAt, final ApiCallback<UpsertSingleStructuredDataResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = upsertAppendComplexMarketDataValidateBeforeCall(scope, appendComplexMarketDataRequest, effectiveAt, asAt, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<UpsertSingleStructuredDataResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call upsertAppendComplexMarketDataAsync(String scope, AppendComplexMarketDataRequest appendComplexMarketDataRequest, String effectiveAt, OffsetDateTime asAt, final ApiCallback<UpsertSingleStructuredDataResponse> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = upsertAppendComplexMarketDataValidateBeforeCall(scope, appendComplexMarketDataRequest, effectiveAt, asAt, _callback, opts);
        Type localVarReturnType = new TypeToken<UpsertSingleStructuredDataResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIupsertAppendComplexMarketDataRequest {
        private final String scope;
        private final AppendComplexMarketDataRequest appendComplexMarketDataRequest;
        private String effectiveAt;
        private OffsetDateTime asAt;

        private APIupsertAppendComplexMarketDataRequest(String scope, AppendComplexMarketDataRequest appendComplexMarketDataRequest) {
            this.scope = scope;
            this.appendComplexMarketDataRequest = appendComplexMarketDataRequest;
        }

        /**
         * Set effectiveAt
         * @param effectiveAt The effective datetime at which to retrieve the complex market data.  Defaults to the current LUSID system datetime if not specified.  Must match the effectiveAt of the ComplexMarketDataId given in the request body. (optional)
         * @return APIupsertAppendComplexMarketDataRequest
         */
        public APIupsertAppendComplexMarketDataRequest effectiveAt(String effectiveAt) {
            this.effectiveAt = effectiveAt;
            return this;
        }

        /**
         * Set asAt
         * @param asAt The asAt datetime at which to retrieve the complex market data. Defaults to return the latest version if not specified. (optional)
         * @return APIupsertAppendComplexMarketDataRequest
         */
        public APIupsertAppendComplexMarketDataRequest asAt(OffsetDateTime asAt) {
            this.asAt = asAt;
            return this;
        }

        /**
         * Build call for upsertAppendComplexMarketData
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The successfully appended ComplexMarketData along with any failures </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return upsertAppendComplexMarketDataCall(scope, appendComplexMarketDataRequest, effectiveAt, asAt, _callback);
        }

        /**
         * Execute upsertAppendComplexMarketData request
         * @return UpsertSingleStructuredDataResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The successfully appended ComplexMarketData along with any failures </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public UpsertSingleStructuredDataResponse execute() throws ApiException {
            ApiResponse<UpsertSingleStructuredDataResponse> localVarResp = upsertAppendComplexMarketDataWithHttpInfo(scope, appendComplexMarketDataRequest, effectiveAt, asAt);
            return localVarResp.getData();
        }

        /**
         * Execute upsertAppendComplexMarketData request. Use any specified configuration options to override any other configuration for this request only.
         * @return UpsertSingleStructuredDataResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The successfully appended ComplexMarketData along with any failures </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public UpsertSingleStructuredDataResponse execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<UpsertSingleStructuredDataResponse> localVarResp = upsertAppendComplexMarketDataWithHttpInfo(scope, appendComplexMarketDataRequest, effectiveAt, asAt, opts);
            return localVarResp.getData();
        }

        /**
         * Execute upsertAppendComplexMarketData request with HTTP info returned
         * @return ApiResponse&lt;UpsertSingleStructuredDataResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The successfully appended ComplexMarketData along with any failures </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UpsertSingleStructuredDataResponse> executeWithHttpInfo() throws ApiException {
            return upsertAppendComplexMarketDataWithHttpInfo(scope, appendComplexMarketDataRequest, effectiveAt, asAt);
        }

        /**
         * Execute upsertAppendComplexMarketData request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;UpsertSingleStructuredDataResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The successfully appended ComplexMarketData along with any failures </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UpsertSingleStructuredDataResponse> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return upsertAppendComplexMarketDataWithHttpInfo(scope, appendComplexMarketDataRequest, effectiveAt, asAt, opts);
        }

        /**
         * Execute upsertAppendComplexMarketData request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The successfully appended ComplexMarketData along with any failures </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UpsertSingleStructuredDataResponse> _callback) throws ApiException {
            return upsertAppendComplexMarketDataAsync(scope, appendComplexMarketDataRequest, effectiveAt, asAt, _callback);
        }

        /**
         * Execute upsertAppendComplexMarketData request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The successfully appended ComplexMarketData along with any failures </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UpsertSingleStructuredDataResponse> _callback, ConfigurationOptions opts) throws ApiException {
            return upsertAppendComplexMarketDataAsync(scope, appendComplexMarketDataRequest, effectiveAt, asAt, _callback, opts);
        }
    }

    /**
     * [EARLY ACCESS] UpsertAppendComplexMarketData: Appends a new point to the end of a ComplexMarketData definition.
     * Update a complex market data item in a single scope by appending a new point onto the end.   NOTE: This operation is only supported for FX curves with one of the following data types: FxForwardCurveByQuoteReference, FxForwardCurveData, FxForwardPipsCurveData, FxForwardTenorCurveData, FxForwardTenorPipsCurveData
     * @param scope The scope of the complex market data to append. (required)
     * @param appendComplexMarketDataRequest Request definition of the point to append. (required)
     * @return APIupsertAppendComplexMarketDataRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The successfully appended ComplexMarketData along with any failures </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIupsertAppendComplexMarketDataRequest upsertAppendComplexMarketData(String scope, AppendComplexMarketDataRequest appendComplexMarketDataRequest) {
        return new APIupsertAppendComplexMarketDataRequest(scope, appendComplexMarketDataRequest);
    }
    private okhttp3.Call upsertComplexMarketDataCall(String scope, Map<String, UpsertComplexMarketDataRequest> requestBody, final ApiCallback _callback) throws ApiException {
        return upsertComplexMarketDataCall(scope, requestBody,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call upsertComplexMarketDataCall(String scope, Map<String, UpsertComplexMarketDataRequest> requestBody, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/api/complexmarketdata/{scope}"
            .replace("{" + "scope" + "}", localVarApiClient.escapeString(scope.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call upsertComplexMarketDataValidateBeforeCall(String scope, Map<String, UpsertComplexMarketDataRequest> requestBody, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling upsertComplexMarketData(Async)");
        }

        // verify the required parameter 'requestBody' is set
        if (requestBody == null) {
            throw new ApiException("Missing the required parameter 'requestBody' when calling upsertComplexMarketData(Async)");
        }

        return upsertComplexMarketDataCall(scope, requestBody, _callback, opts);

    }


    private ApiResponse<UpsertStructuredDataResponse> upsertComplexMarketDataWithHttpInfo(String scope, Map<String, UpsertComplexMarketDataRequest> requestBody) throws ApiException {
        okhttp3.Call localVarCall = upsertComplexMarketDataValidateBeforeCall(scope, requestBody, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<UpsertStructuredDataResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<UpsertStructuredDataResponse> upsertComplexMarketDataWithHttpInfo(String scope, Map<String, UpsertComplexMarketDataRequest> requestBody, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = upsertComplexMarketDataValidateBeforeCall(scope, requestBody, null, opts);
        Type localVarReturnType = new TypeToken<UpsertStructuredDataResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call upsertComplexMarketDataAsync(String scope, Map<String, UpsertComplexMarketDataRequest> requestBody, final ApiCallback<UpsertStructuredDataResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = upsertComplexMarketDataValidateBeforeCall(scope, requestBody, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<UpsertStructuredDataResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call upsertComplexMarketDataAsync(String scope, Map<String, UpsertComplexMarketDataRequest> requestBody, final ApiCallback<UpsertStructuredDataResponse> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = upsertComplexMarketDataValidateBeforeCall(scope, requestBody, _callback, opts);
        Type localVarReturnType = new TypeToken<UpsertStructuredDataResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIupsertComplexMarketDataRequest {
        private final String scope;
        private final Map<String, UpsertComplexMarketDataRequest> requestBody;

        private APIupsertComplexMarketDataRequest(String scope, Map<String, UpsertComplexMarketDataRequest> requestBody) {
            this.scope = scope;
            this.requestBody = requestBody;
        }

        /**
         * Build call for upsertComplexMarketData
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The successfully updated or inserted ComplexMarketData along with any failures </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return upsertComplexMarketDataCall(scope, requestBody, _callback);
        }

        /**
         * Execute upsertComplexMarketData request
         * @return UpsertStructuredDataResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The successfully updated or inserted ComplexMarketData along with any failures </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public UpsertStructuredDataResponse execute() throws ApiException {
            ApiResponse<UpsertStructuredDataResponse> localVarResp = upsertComplexMarketDataWithHttpInfo(scope, requestBody);
            return localVarResp.getData();
        }

        /**
         * Execute upsertComplexMarketData request. Use any specified configuration options to override any other configuration for this request only.
         * @return UpsertStructuredDataResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The successfully updated or inserted ComplexMarketData along with any failures </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public UpsertStructuredDataResponse execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<UpsertStructuredDataResponse> localVarResp = upsertComplexMarketDataWithHttpInfo(scope, requestBody, opts);
            return localVarResp.getData();
        }

        /**
         * Execute upsertComplexMarketData request with HTTP info returned
         * @return ApiResponse&lt;UpsertStructuredDataResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The successfully updated or inserted ComplexMarketData along with any failures </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UpsertStructuredDataResponse> executeWithHttpInfo() throws ApiException {
            return upsertComplexMarketDataWithHttpInfo(scope, requestBody);
        }

        /**
         * Execute upsertComplexMarketData request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;UpsertStructuredDataResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The successfully updated or inserted ComplexMarketData along with any failures </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UpsertStructuredDataResponse> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return upsertComplexMarketDataWithHttpInfo(scope, requestBody, opts);
        }

        /**
         * Execute upsertComplexMarketData request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The successfully updated or inserted ComplexMarketData along with any failures </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UpsertStructuredDataResponse> _callback) throws ApiException {
            return upsertComplexMarketDataAsync(scope, requestBody, _callback);
        }

        /**
         * Execute upsertComplexMarketData request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The successfully updated or inserted ComplexMarketData along with any failures </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UpsertStructuredDataResponse> _callback, ConfigurationOptions opts) throws ApiException {
            return upsertComplexMarketDataAsync(scope, requestBody, _callback, opts);
        }
    }

    /**
     * UpsertComplexMarketData: Upsert a set of complex market data items. This creates or updates the data in Lusid.
     * Update or insert one or more complex market data items in a single scope. An item will be updated if it already exists and inserted if it does not.   In the request each complex market data item must be keyed by a unique correlation id. This id is ephemeral and is not stored by LUSID. It serves only as a way to easily identify each complex market data in the response.   The response will return both the collection of successfully updated or inserted complex market data, as well as those that failed. For the failures a reason will be provided explaining why the item could not be updated or inserted.   It is important to always check the failed set for any unsuccessful results.
     * @param scope The scope to use when updating or inserting the complex market data. (required)
     * @param requestBody The set of complex market data items to update or insert keyed by a unique correlation id. (required)
     * @return APIupsertComplexMarketDataRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The successfully updated or inserted ComplexMarketData along with any failures </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIupsertComplexMarketDataRequest upsertComplexMarketData(String scope, Map<String, UpsertComplexMarketDataRequest> requestBody) {
        return new APIupsertComplexMarketDataRequest(scope, requestBody);
    }
}
