/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.api;

import com.finbourne.lusid.ApiCallback;
import com.finbourne.lusid.ApiClient;
import com.finbourne.lusid.ApiException;
import com.finbourne.lusid.ApiResponse;
import com.finbourne.lusid.Configuration;
import com.finbourne.lusid.Pair;
import com.finbourne.lusid.ProgressRequestBody;
import com.finbourne.lusid.ProgressResponseBody;
import com.finbourne.lusid.extensions.ConfigurationOptions;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.finbourne.lusid.model.AcceptEstimateValuationPointResponse;
import com.finbourne.lusid.model.DeletedEntityResponse;
import com.finbourne.lusid.model.DiaryEntry;
import com.finbourne.lusid.model.Fee;
import com.finbourne.lusid.model.FeeProperties;
import com.finbourne.lusid.model.FeeRequest;
import com.finbourne.lusid.model.Fund;
import com.finbourne.lusid.model.FundCalendarEntry;
import com.finbourne.lusid.model.FundDefinitionRequest;
import com.finbourne.lusid.model.FundProperties;
import com.finbourne.lusid.model.FundRequest;
import com.finbourne.lusid.model.FundValuationRequest;
import com.finbourne.lusid.model.ListAggregationResponse;
import com.finbourne.lusid.model.LusidProblemDetails;
import com.finbourne.lusid.model.LusidValidationProblemDetails;
import java.time.OffsetDateTime;
import com.finbourne.lusid.model.Operation;
import com.finbourne.lusid.model.PagedResourceListOfFee;
import com.finbourne.lusid.model.PagedResourceListOfFund;
import com.finbourne.lusid.model.PagedResourceListOfFundCalendarEntry;
import com.finbourne.lusid.model.PagedResourceListOfValuationPointOverview;
import com.finbourne.lusid.model.Property;
import com.finbourne.lusid.model.SetShareClassInstrumentsRequest;
import com.finbourne.lusid.model.SingleValuationPointQueryParameters;
import com.finbourne.lusid.model.UpsertFundBookmarkRequest;
import com.finbourne.lusid.model.UpsertValuationPointRequest;
import com.finbourne.lusid.model.ValuationPointDataQueryParameters;
import com.finbourne.lusid.model.ValuationPointDataRequest;
import com.finbourne.lusid.model.ValuationPointDataResponse;
import com.finbourne.lusid.model.ValuationPointResourceListOfAccountedTransaction;
import com.finbourne.lusid.model.ValuationPointResourceListOfFundJournalEntryLine;
import com.finbourne.lusid.model.ValuationPointResourceListOfPnlJournalEntryLine;
import com.finbourne.lusid.model.ValuationPointResourceListOfTrialBalance;
import com.finbourne.lusid.model.VersionedResourceListOfPortfolioHolding;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class FundsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public FundsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public FundsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call acceptEstimateValuationPointCall(String scope, String code, ValuationPointDataRequest valuationPointDataRequest, String navTypeCode, final ApiCallback _callback) throws ApiException {
        return acceptEstimateValuationPointCall(scope, code, valuationPointDataRequest, navTypeCode,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call acceptEstimateValuationPointCall(String scope, String code, ValuationPointDataRequest valuationPointDataRequest, String navTypeCode, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = valuationPointDataRequest;

        // create path and map variables
        String localVarPath = "/api/funds/{scope}/{code}/valuationpoints/$acceptestimate"
            .replace("{" + "scope" + "}", localVarApiClient.escapeString(scope.toString()))
            .replace("{" + "code" + "}", localVarApiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (navTypeCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("navTypeCode", navTypeCode));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call acceptEstimateValuationPointValidateBeforeCall(String scope, String code, ValuationPointDataRequest valuationPointDataRequest, String navTypeCode, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling acceptEstimateValuationPoint(Async)");
        }

        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling acceptEstimateValuationPoint(Async)");
        }

        // verify the required parameter 'valuationPointDataRequest' is set
        if (valuationPointDataRequest == null) {
            throw new ApiException("Missing the required parameter 'valuationPointDataRequest' when calling acceptEstimateValuationPoint(Async)");
        }

        return acceptEstimateValuationPointCall(scope, code, valuationPointDataRequest, navTypeCode, _callback, opts);

    }


    private ApiResponse<AcceptEstimateValuationPointResponse> acceptEstimateValuationPointWithHttpInfo(String scope, String code, ValuationPointDataRequest valuationPointDataRequest, String navTypeCode) throws ApiException {
        okhttp3.Call localVarCall = acceptEstimateValuationPointValidateBeforeCall(scope, code, valuationPointDataRequest, navTypeCode, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<AcceptEstimateValuationPointResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<AcceptEstimateValuationPointResponse> acceptEstimateValuationPointWithHttpInfo(String scope, String code, ValuationPointDataRequest valuationPointDataRequest, String navTypeCode, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = acceptEstimateValuationPointValidateBeforeCall(scope, code, valuationPointDataRequest, navTypeCode, null, opts);
        Type localVarReturnType = new TypeToken<AcceptEstimateValuationPointResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call acceptEstimateValuationPointAsync(String scope, String code, ValuationPointDataRequest valuationPointDataRequest, String navTypeCode, final ApiCallback<AcceptEstimateValuationPointResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = acceptEstimateValuationPointValidateBeforeCall(scope, code, valuationPointDataRequest, navTypeCode, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<AcceptEstimateValuationPointResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call acceptEstimateValuationPointAsync(String scope, String code, ValuationPointDataRequest valuationPointDataRequest, String navTypeCode, final ApiCallback<AcceptEstimateValuationPointResponse> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = acceptEstimateValuationPointValidateBeforeCall(scope, code, valuationPointDataRequest, navTypeCode, _callback, opts);
        Type localVarReturnType = new TypeToken<AcceptEstimateValuationPointResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIacceptEstimateValuationPointRequest {
        private final String scope;
        private final String code;
        private final ValuationPointDataRequest valuationPointDataRequest;
        private String navTypeCode;

        private APIacceptEstimateValuationPointRequest(String scope, String code, ValuationPointDataRequest valuationPointDataRequest) {
            this.scope = scope;
            this.code = code;
            this.valuationPointDataRequest = valuationPointDataRequest;
        }

        /**
         * Set navTypeCode
         * @param navTypeCode When provided Accepts the Valuation Point of the specified NAV Type. When not provided the Primary NAV Type will be Accepted. (optional)
         * @return APIacceptEstimateValuationPointRequest
         */
        public APIacceptEstimateValuationPointRequest navTypeCode(String navTypeCode) {
            this.navTypeCode = navTypeCode;
            return this;
        }

        /**
         * Build call for acceptEstimateValuationPoint
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The Accepted Estimate point and status after being Accepted </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return acceptEstimateValuationPointCall(scope, code, valuationPointDataRequest, navTypeCode, _callback);
        }

        /**
         * Execute acceptEstimateValuationPoint request
         * @return AcceptEstimateValuationPointResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The Accepted Estimate point and status after being Accepted </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public AcceptEstimateValuationPointResponse execute() throws ApiException {
            ApiResponse<AcceptEstimateValuationPointResponse> localVarResp = acceptEstimateValuationPointWithHttpInfo(scope, code, valuationPointDataRequest, navTypeCode);
            return localVarResp.getData();
        }

        /**
         * Execute acceptEstimateValuationPoint request. Use any specified configuration options to override any other configuration for this request only.
         * @return AcceptEstimateValuationPointResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The Accepted Estimate point and status after being Accepted </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public AcceptEstimateValuationPointResponse execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<AcceptEstimateValuationPointResponse> localVarResp = acceptEstimateValuationPointWithHttpInfo(scope, code, valuationPointDataRequest, navTypeCode, opts);
            return localVarResp.getData();
        }

        /**
         * Execute acceptEstimateValuationPoint request with HTTP info returned
         * @return ApiResponse&lt;AcceptEstimateValuationPointResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The Accepted Estimate point and status after being Accepted </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AcceptEstimateValuationPointResponse> executeWithHttpInfo() throws ApiException {
            return acceptEstimateValuationPointWithHttpInfo(scope, code, valuationPointDataRequest, navTypeCode);
        }

        /**
         * Execute acceptEstimateValuationPoint request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;AcceptEstimateValuationPointResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The Accepted Estimate point and status after being Accepted </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AcceptEstimateValuationPointResponse> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return acceptEstimateValuationPointWithHttpInfo(scope, code, valuationPointDataRequest, navTypeCode, opts);
        }

        /**
         * Execute acceptEstimateValuationPoint request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The Accepted Estimate point and status after being Accepted </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AcceptEstimateValuationPointResponse> _callback) throws ApiException {
            return acceptEstimateValuationPointAsync(scope, code, valuationPointDataRequest, navTypeCode, _callback);
        }

        /**
         * Execute acceptEstimateValuationPoint request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The Accepted Estimate point and status after being Accepted </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AcceptEstimateValuationPointResponse> _callback, ConfigurationOptions opts) throws ApiException {
            return acceptEstimateValuationPointAsync(scope, code, valuationPointDataRequest, navTypeCode, _callback, opts);
        }
    }

    /**
     * [EXPERIMENTAL] AcceptEstimateValuationPoint: Accepts an Estimate Valuation Point.
     * Accepts the specified estimate Valuation Point.  Should the Valuation Point differ since the Valuation Point was last run, both Valuation Points will be returned and status will be marked as &#39;Candidate&#39;,  otherwise it will be marked as &#39;Final&#39;.
     * @param scope The scope of the Fund. (required)
     * @param code The code of the Fund. Together with the scope this uniquely identifies the Fund. (required)
     * @param valuationPointDataRequest The valuationPointDataRequest which contains the Diary Entry code for the Estimate Valuation Point to move to Candidate or Final state. (required)
     * @return APIacceptEstimateValuationPointRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Accepted Estimate point and status after being Accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIacceptEstimateValuationPointRequest acceptEstimateValuationPoint(String scope, String code, ValuationPointDataRequest valuationPointDataRequest) {
        return new APIacceptEstimateValuationPointRequest(scope, code, valuationPointDataRequest);
    }
    private okhttp3.Call createFeeCall(String scope, String code, FeeRequest feeRequest, String navTypeCode, final ApiCallback _callback) throws ApiException {
        return createFeeCall(scope, code, feeRequest, navTypeCode,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call createFeeCall(String scope, String code, FeeRequest feeRequest, String navTypeCode, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = feeRequest;

        // create path and map variables
        String localVarPath = "/api/funds/{scope}/{code}/fees"
            .replace("{" + "scope" + "}", localVarApiClient.escapeString(scope.toString()))
            .replace("{" + "code" + "}", localVarApiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (navTypeCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("navTypeCode", navTypeCode));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createFeeValidateBeforeCall(String scope, String code, FeeRequest feeRequest, String navTypeCode, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling createFee(Async)");
        }

        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling createFee(Async)");
        }

        // verify the required parameter 'feeRequest' is set
        if (feeRequest == null) {
            throw new ApiException("Missing the required parameter 'feeRequest' when calling createFee(Async)");
        }

        return createFeeCall(scope, code, feeRequest, navTypeCode, _callback, opts);

    }


    private ApiResponse<Fee> createFeeWithHttpInfo(String scope, String code, FeeRequest feeRequest, String navTypeCode) throws ApiException {
        okhttp3.Call localVarCall = createFeeValidateBeforeCall(scope, code, feeRequest, navTypeCode, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<Fee>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<Fee> createFeeWithHttpInfo(String scope, String code, FeeRequest feeRequest, String navTypeCode, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = createFeeValidateBeforeCall(scope, code, feeRequest, navTypeCode, null, opts);
        Type localVarReturnType = new TypeToken<Fee>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createFeeAsync(String scope, String code, FeeRequest feeRequest, String navTypeCode, final ApiCallback<Fee> _callback) throws ApiException {

        okhttp3.Call localVarCall = createFeeValidateBeforeCall(scope, code, feeRequest, navTypeCode, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<Fee>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call createFeeAsync(String scope, String code, FeeRequest feeRequest, String navTypeCode, final ApiCallback<Fee> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = createFeeValidateBeforeCall(scope, code, feeRequest, navTypeCode, _callback, opts);
        Type localVarReturnType = new TypeToken<Fee>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIcreateFeeRequest {
        private final String scope;
        private final String code;
        private final FeeRequest feeRequest;
        private String navTypeCode;

        private APIcreateFeeRequest(String scope, String code, FeeRequest feeRequest) {
            this.scope = scope;
            this.code = code;
            this.feeRequest = feeRequest;
        }

        /**
         * Set navTypeCode
         * @param navTypeCode When provided runs against the specified NAV Type, otherwise the Primary NAV Type will be used. (optional)
         * @return APIcreateFeeRequest
         */
        public APIcreateFeeRequest navTypeCode(String navTypeCode) {
            this.navTypeCode = navTypeCode;
            return this;
        }

        /**
         * Build call for createFee
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The newly created Fee. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return createFeeCall(scope, code, feeRequest, navTypeCode, _callback);
        }

        /**
         * Execute createFee request
         * @return Fee
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The newly created Fee. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public Fee execute() throws ApiException {
            ApiResponse<Fee> localVarResp = createFeeWithHttpInfo(scope, code, feeRequest, navTypeCode);
            return localVarResp.getData();
        }

        /**
         * Execute createFee request. Use any specified configuration options to override any other configuration for this request only.
         * @return Fee
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The newly created Fee. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public Fee execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<Fee> localVarResp = createFeeWithHttpInfo(scope, code, feeRequest, navTypeCode, opts);
            return localVarResp.getData();
        }

        /**
         * Execute createFee request with HTTP info returned
         * @return ApiResponse&lt;Fee&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The newly created Fee. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Fee> executeWithHttpInfo() throws ApiException {
            return createFeeWithHttpInfo(scope, code, feeRequest, navTypeCode);
        }

        /**
         * Execute createFee request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;Fee&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The newly created Fee. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Fee> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return createFeeWithHttpInfo(scope, code, feeRequest, navTypeCode, opts);
        }

        /**
         * Execute createFee request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The newly created Fee. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Fee> _callback) throws ApiException {
            return createFeeAsync(scope, code, feeRequest, navTypeCode, _callback);
        }

        /**
         * Execute createFee request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The newly created Fee. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Fee> _callback, ConfigurationOptions opts) throws ApiException {
            return createFeeAsync(scope, code, feeRequest, navTypeCode, _callback, opts);
        }
    }

    /**
     * [EXPERIMENTAL] CreateFee: Create a Fee.
     * Create the given Fee.
     * @param scope The scope of the Fund. (required)
     * @param code The code of the Fund. Together with the scope this uniquely identifies the Fund. (required)
     * @param feeRequest The Fee to create. (required)
     * @return APIcreateFeeRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The newly created Fee. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIcreateFeeRequest createFee(String scope, String code, FeeRequest feeRequest) {
        return new APIcreateFeeRequest(scope, code, feeRequest);
    }
    private okhttp3.Call createFundCall(String scope, FundRequest fundRequest, final ApiCallback _callback) throws ApiException {
        return createFundCall(scope, fundRequest,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call createFundCall(String scope, FundRequest fundRequest, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = fundRequest;

        // create path and map variables
        String localVarPath = "/api/funds/{scope}"
            .replace("{" + "scope" + "}", localVarApiClient.escapeString(scope.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createFundValidateBeforeCall(String scope, FundRequest fundRequest, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling createFund(Async)");
        }

        // verify the required parameter 'fundRequest' is set
        if (fundRequest == null) {
            throw new ApiException("Missing the required parameter 'fundRequest' when calling createFund(Async)");
        }

        return createFundCall(scope, fundRequest, _callback, opts);

    }


    private ApiResponse<Fund> createFundWithHttpInfo(String scope, FundRequest fundRequest) throws ApiException {
        okhttp3.Call localVarCall = createFundValidateBeforeCall(scope, fundRequest, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<Fund>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<Fund> createFundWithHttpInfo(String scope, FundRequest fundRequest, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = createFundValidateBeforeCall(scope, fundRequest, null, opts);
        Type localVarReturnType = new TypeToken<Fund>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createFundAsync(String scope, FundRequest fundRequest, final ApiCallback<Fund> _callback) throws ApiException {

        okhttp3.Call localVarCall = createFundValidateBeforeCall(scope, fundRequest, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<Fund>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call createFundAsync(String scope, FundRequest fundRequest, final ApiCallback<Fund> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = createFundValidateBeforeCall(scope, fundRequest, _callback, opts);
        Type localVarReturnType = new TypeToken<Fund>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIcreateFundRequest {
        private final String scope;
        private final FundRequest fundRequest;

        private APIcreateFundRequest(String scope, FundRequest fundRequest) {
            this.scope = scope;
            this.fundRequest = fundRequest;
        }

        /**
         * Build call for createFund
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The newly created Fund. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return createFundCall(scope, fundRequest, _callback);
        }

        /**
         * Execute createFund request
         * @return Fund
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The newly created Fund. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public Fund execute() throws ApiException {
            ApiResponse<Fund> localVarResp = createFundWithHttpInfo(scope, fundRequest);
            return localVarResp.getData();
        }

        /**
         * Execute createFund request. Use any specified configuration options to override any other configuration for this request only.
         * @return Fund
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The newly created Fund. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public Fund execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<Fund> localVarResp = createFundWithHttpInfo(scope, fundRequest, opts);
            return localVarResp.getData();
        }

        /**
         * Execute createFund request with HTTP info returned
         * @return ApiResponse&lt;Fund&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The newly created Fund. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Fund> executeWithHttpInfo() throws ApiException {
            return createFundWithHttpInfo(scope, fundRequest);
        }

        /**
         * Execute createFund request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;Fund&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The newly created Fund. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Fund> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return createFundWithHttpInfo(scope, fundRequest, opts);
        }

        /**
         * Execute createFund request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The newly created Fund. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Fund> _callback) throws ApiException {
            return createFundAsync(scope, fundRequest, _callback);
        }

        /**
         * Execute createFund request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The newly created Fund. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Fund> _callback, ConfigurationOptions opts) throws ApiException {
            return createFundAsync(scope, fundRequest, _callback, opts);
        }
    }

    /**
     * [EXPERIMENTAL] CreateFund: Create a Fund.
     * Create the given Fund.
     * @param scope The scope of the Fund. (required)
     * @param fundRequest The definition of the Fund. (required)
     * @return APIcreateFundRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The newly created Fund. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIcreateFundRequest createFund(String scope, FundRequest fundRequest) {
        return new APIcreateFundRequest(scope, fundRequest);
    }
    private okhttp3.Call createFundV2Call(String scope, FundDefinitionRequest fundDefinitionRequest, final ApiCallback _callback) throws ApiException {
        return createFundV2Call(scope, fundDefinitionRequest,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call createFundV2Call(String scope, FundDefinitionRequest fundDefinitionRequest, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = fundDefinitionRequest;

        // create path and map variables
        String localVarPath = "/api/funds/v2/{scope}"
            .replace("{" + "scope" + "}", localVarApiClient.escapeString(scope.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createFundV2ValidateBeforeCall(String scope, FundDefinitionRequest fundDefinitionRequest, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling createFundV2(Async)");
        }

        // verify the required parameter 'fundDefinitionRequest' is set
        if (fundDefinitionRequest == null) {
            throw new ApiException("Missing the required parameter 'fundDefinitionRequest' when calling createFundV2(Async)");
        }

        return createFundV2Call(scope, fundDefinitionRequest, _callback, opts);

    }


    private ApiResponse<Fund> createFundV2WithHttpInfo(String scope, FundDefinitionRequest fundDefinitionRequest) throws ApiException {
        okhttp3.Call localVarCall = createFundV2ValidateBeforeCall(scope, fundDefinitionRequest, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<Fund>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<Fund> createFundV2WithHttpInfo(String scope, FundDefinitionRequest fundDefinitionRequest, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = createFundV2ValidateBeforeCall(scope, fundDefinitionRequest, null, opts);
        Type localVarReturnType = new TypeToken<Fund>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createFundV2Async(String scope, FundDefinitionRequest fundDefinitionRequest, final ApiCallback<Fund> _callback) throws ApiException {

        okhttp3.Call localVarCall = createFundV2ValidateBeforeCall(scope, fundDefinitionRequest, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<Fund>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call createFundV2Async(String scope, FundDefinitionRequest fundDefinitionRequest, final ApiCallback<Fund> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = createFundV2ValidateBeforeCall(scope, fundDefinitionRequest, _callback, opts);
        Type localVarReturnType = new TypeToken<Fund>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIcreateFundV2Request {
        private final String scope;
        private final FundDefinitionRequest fundDefinitionRequest;

        private APIcreateFundV2Request(String scope, FundDefinitionRequest fundDefinitionRequest) {
            this.scope = scope;
            this.fundDefinitionRequest = fundDefinitionRequest;
        }

        /**
         * Build call for createFundV2
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The newly created Fund. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return createFundV2Call(scope, fundDefinitionRequest, _callback);
        }

        /**
         * Execute createFundV2 request
         * @return Fund
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The newly created Fund. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public Fund execute() throws ApiException {
            ApiResponse<Fund> localVarResp = createFundV2WithHttpInfo(scope, fundDefinitionRequest);
            return localVarResp.getData();
        }

        /**
         * Execute createFundV2 request. Use any specified configuration options to override any other configuration for this request only.
         * @return Fund
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The newly created Fund. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public Fund execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<Fund> localVarResp = createFundV2WithHttpInfo(scope, fundDefinitionRequest, opts);
            return localVarResp.getData();
        }

        /**
         * Execute createFundV2 request with HTTP info returned
         * @return ApiResponse&lt;Fund&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The newly created Fund. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Fund> executeWithHttpInfo() throws ApiException {
            return createFundV2WithHttpInfo(scope, fundDefinitionRequest);
        }

        /**
         * Execute createFundV2 request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;Fund&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The newly created Fund. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Fund> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return createFundV2WithHttpInfo(scope, fundDefinitionRequest, opts);
        }

        /**
         * Execute createFundV2 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The newly created Fund. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Fund> _callback) throws ApiException {
            return createFundV2Async(scope, fundDefinitionRequest, _callback);
        }

        /**
         * Execute createFundV2 request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The newly created Fund. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Fund> _callback, ConfigurationOptions opts) throws ApiException {
            return createFundV2Async(scope, fundDefinitionRequest, _callback, opts);
        }
    }

    /**
     * [EXPERIMENTAL] CreateFundV2: Create a Fund V2 (Preview).
     * Create the given V2 Fund.
     * @param scope The scope of the Fund. (required)
     * @param fundDefinitionRequest The definition of the Fund. (required)
     * @return APIcreateFundV2Request
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The newly created Fund. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIcreateFundV2Request createFundV2(String scope, FundDefinitionRequest fundDefinitionRequest) {
        return new APIcreateFundV2Request(scope, fundDefinitionRequest);
    }
    private okhttp3.Call deleteBookmarkCall(String scope, String code, String bookmarkCode, String navTypeCode, final ApiCallback _callback) throws ApiException {
        return deleteBookmarkCall(scope, code, bookmarkCode, navTypeCode,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call deleteBookmarkCall(String scope, String code, String bookmarkCode, String navTypeCode, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/funds/{scope}/{code}/bookmarks/{bookmarkCode}"
            .replace("{" + "scope" + "}", localVarApiClient.escapeString(scope.toString()))
            .replace("{" + "code" + "}", localVarApiClient.escapeString(code.toString()))
            .replace("{" + "bookmarkCode" + "}", localVarApiClient.escapeString(bookmarkCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (navTypeCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("navTypeCode", navTypeCode));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteBookmarkValidateBeforeCall(String scope, String code, String bookmarkCode, String navTypeCode, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling deleteBookmark(Async)");
        }

        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling deleteBookmark(Async)");
        }

        // verify the required parameter 'bookmarkCode' is set
        if (bookmarkCode == null) {
            throw new ApiException("Missing the required parameter 'bookmarkCode' when calling deleteBookmark(Async)");
        }

        return deleteBookmarkCall(scope, code, bookmarkCode, navTypeCode, _callback, opts);

    }


    private ApiResponse<DeletedEntityResponse> deleteBookmarkWithHttpInfo(String scope, String code, String bookmarkCode, String navTypeCode) throws ApiException {
        okhttp3.Call localVarCall = deleteBookmarkValidateBeforeCall(scope, code, bookmarkCode, navTypeCode, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<DeletedEntityResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<DeletedEntityResponse> deleteBookmarkWithHttpInfo(String scope, String code, String bookmarkCode, String navTypeCode, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = deleteBookmarkValidateBeforeCall(scope, code, bookmarkCode, navTypeCode, null, opts);
        Type localVarReturnType = new TypeToken<DeletedEntityResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteBookmarkAsync(String scope, String code, String bookmarkCode, String navTypeCode, final ApiCallback<DeletedEntityResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteBookmarkValidateBeforeCall(scope, code, bookmarkCode, navTypeCode, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<DeletedEntityResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call deleteBookmarkAsync(String scope, String code, String bookmarkCode, String navTypeCode, final ApiCallback<DeletedEntityResponse> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = deleteBookmarkValidateBeforeCall(scope, code, bookmarkCode, navTypeCode, _callback, opts);
        Type localVarReturnType = new TypeToken<DeletedEntityResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIdeleteBookmarkRequest {
        private final String scope;
        private final String code;
        private final String bookmarkCode;
        private String navTypeCode;

        private APIdeleteBookmarkRequest(String scope, String code, String bookmarkCode) {
            this.scope = scope;
            this.code = code;
            this.bookmarkCode = bookmarkCode;
        }

        /**
         * Set navTypeCode
         * @param navTypeCode When provided, Deletes the Bookmark against the specified NAV Type. When not provided the Primary NAV Type will be Deleted. (optional)
         * @return APIdeleteBookmarkRequest
         */
        public APIdeleteBookmarkRequest navTypeCode(String navTypeCode) {
            this.navTypeCode = navTypeCode;
            return this;
        }

        /**
         * Build call for deleteBookmark
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The datetime that the Bookmark was deleted </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteBookmarkCall(scope, code, bookmarkCode, navTypeCode, _callback);
        }

        /**
         * Execute deleteBookmark request
         * @return DeletedEntityResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The datetime that the Bookmark was deleted </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public DeletedEntityResponse execute() throws ApiException {
            ApiResponse<DeletedEntityResponse> localVarResp = deleteBookmarkWithHttpInfo(scope, code, bookmarkCode, navTypeCode);
            return localVarResp.getData();
        }

        /**
         * Execute deleteBookmark request. Use any specified configuration options to override any other configuration for this request only.
         * @return DeletedEntityResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The datetime that the Bookmark was deleted </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public DeletedEntityResponse execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<DeletedEntityResponse> localVarResp = deleteBookmarkWithHttpInfo(scope, code, bookmarkCode, navTypeCode, opts);
            return localVarResp.getData();
        }

        /**
         * Execute deleteBookmark request with HTTP info returned
         * @return ApiResponse&lt;DeletedEntityResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The datetime that the Bookmark was deleted </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DeletedEntityResponse> executeWithHttpInfo() throws ApiException {
            return deleteBookmarkWithHttpInfo(scope, code, bookmarkCode, navTypeCode);
        }

        /**
         * Execute deleteBookmark request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;DeletedEntityResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The datetime that the Bookmark was deleted </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DeletedEntityResponse> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return deleteBookmarkWithHttpInfo(scope, code, bookmarkCode, navTypeCode, opts);
        }

        /**
         * Execute deleteBookmark request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The datetime that the Bookmark was deleted </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DeletedEntityResponse> _callback) throws ApiException {
            return deleteBookmarkAsync(scope, code, bookmarkCode, navTypeCode, _callback);
        }

        /**
         * Execute deleteBookmark request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The datetime that the Bookmark was deleted </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DeletedEntityResponse> _callback, ConfigurationOptions opts) throws ApiException {
            return deleteBookmarkAsync(scope, code, bookmarkCode, navTypeCode, _callback, opts);
        }
    }

    /**
     * [EXPERIMENTAL] DeleteBookmark: Delete a Bookmark.
     * Deletes the given Bookmark.
     * @param scope The scope of the Fund for the Bookmark to be deleted. (required)
     * @param code The code of the Fund containing the Bookmark to be deleted. Together with the scope this uniquely identifies the Fund. (required)
     * @param bookmarkCode The bookmark code for the bookmark to be deleted (required)
     * @return APIdeleteBookmarkRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The datetime that the Bookmark was deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIdeleteBookmarkRequest deleteBookmark(String scope, String code, String bookmarkCode) {
        return new APIdeleteBookmarkRequest(scope, code, bookmarkCode);
    }
    private okhttp3.Call deleteFeeCall(String scope, String code, String feeCode, final ApiCallback _callback) throws ApiException {
        return deleteFeeCall(scope, code, feeCode,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call deleteFeeCall(String scope, String code, String feeCode, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/funds/{scope}/{code}/fees/{feeCode}"
            .replace("{" + "scope" + "}", localVarApiClient.escapeString(scope.toString()))
            .replace("{" + "code" + "}", localVarApiClient.escapeString(code.toString()))
            .replace("{" + "feeCode" + "}", localVarApiClient.escapeString(feeCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteFeeValidateBeforeCall(String scope, String code, String feeCode, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling deleteFee(Async)");
        }

        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling deleteFee(Async)");
        }

        // verify the required parameter 'feeCode' is set
        if (feeCode == null) {
            throw new ApiException("Missing the required parameter 'feeCode' when calling deleteFee(Async)");
        }

        return deleteFeeCall(scope, code, feeCode, _callback, opts);

    }


    private ApiResponse<DeletedEntityResponse> deleteFeeWithHttpInfo(String scope, String code, String feeCode) throws ApiException {
        okhttp3.Call localVarCall = deleteFeeValidateBeforeCall(scope, code, feeCode, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<DeletedEntityResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<DeletedEntityResponse> deleteFeeWithHttpInfo(String scope, String code, String feeCode, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = deleteFeeValidateBeforeCall(scope, code, feeCode, null, opts);
        Type localVarReturnType = new TypeToken<DeletedEntityResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteFeeAsync(String scope, String code, String feeCode, final ApiCallback<DeletedEntityResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteFeeValidateBeforeCall(scope, code, feeCode, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<DeletedEntityResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call deleteFeeAsync(String scope, String code, String feeCode, final ApiCallback<DeletedEntityResponse> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = deleteFeeValidateBeforeCall(scope, code, feeCode, _callback, opts);
        Type localVarReturnType = new TypeToken<DeletedEntityResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIdeleteFeeRequest {
        private final String scope;
        private final String code;
        private final String feeCode;

        private APIdeleteFeeRequest(String scope, String code, String feeCode) {
            this.scope = scope;
            this.code = code;
            this.feeCode = feeCode;
        }

        /**
         * Build call for deleteFee
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The datetime that the Fee was deleted </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteFeeCall(scope, code, feeCode, _callback);
        }

        /**
         * Execute deleteFee request
         * @return DeletedEntityResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The datetime that the Fee was deleted </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public DeletedEntityResponse execute() throws ApiException {
            ApiResponse<DeletedEntityResponse> localVarResp = deleteFeeWithHttpInfo(scope, code, feeCode);
            return localVarResp.getData();
        }

        /**
         * Execute deleteFee request. Use any specified configuration options to override any other configuration for this request only.
         * @return DeletedEntityResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The datetime that the Fee was deleted </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public DeletedEntityResponse execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<DeletedEntityResponse> localVarResp = deleteFeeWithHttpInfo(scope, code, feeCode, opts);
            return localVarResp.getData();
        }

        /**
         * Execute deleteFee request with HTTP info returned
         * @return ApiResponse&lt;DeletedEntityResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The datetime that the Fee was deleted </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DeletedEntityResponse> executeWithHttpInfo() throws ApiException {
            return deleteFeeWithHttpInfo(scope, code, feeCode);
        }

        /**
         * Execute deleteFee request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;DeletedEntityResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The datetime that the Fee was deleted </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DeletedEntityResponse> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return deleteFeeWithHttpInfo(scope, code, feeCode, opts);
        }

        /**
         * Execute deleteFee request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The datetime that the Fee was deleted </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DeletedEntityResponse> _callback) throws ApiException {
            return deleteFeeAsync(scope, code, feeCode, _callback);
        }

        /**
         * Execute deleteFee request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The datetime that the Fee was deleted </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DeletedEntityResponse> _callback, ConfigurationOptions opts) throws ApiException {
            return deleteFeeAsync(scope, code, feeCode, _callback, opts);
        }
    }

    /**
     * [EXPERIMENTAL] DeleteFee: Delete a Fee.
     * Delete the given Fee.
     * @param scope The scope of the Fund (required)
     * @param code The code of the Fund. Together with the scope this uniquely identifies the Fund. (required)
     * @param feeCode The code of the Fee to be deleted. (required)
     * @return APIdeleteFeeRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The datetime that the Fee was deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIdeleteFeeRequest deleteFee(String scope, String code, String feeCode) {
        return new APIdeleteFeeRequest(scope, code, feeCode);
    }
    private okhttp3.Call deleteFundCall(String scope, String code, final ApiCallback _callback) throws ApiException {
        return deleteFundCall(scope, code,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call deleteFundCall(String scope, String code, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/funds/{scope}/{code}"
            .replace("{" + "scope" + "}", localVarApiClient.escapeString(scope.toString()))
            .replace("{" + "code" + "}", localVarApiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteFundValidateBeforeCall(String scope, String code, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling deleteFund(Async)");
        }

        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling deleteFund(Async)");
        }

        return deleteFundCall(scope, code, _callback, opts);

    }


    private ApiResponse<DeletedEntityResponse> deleteFundWithHttpInfo(String scope, String code) throws ApiException {
        okhttp3.Call localVarCall = deleteFundValidateBeforeCall(scope, code, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<DeletedEntityResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<DeletedEntityResponse> deleteFundWithHttpInfo(String scope, String code, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = deleteFundValidateBeforeCall(scope, code, null, opts);
        Type localVarReturnType = new TypeToken<DeletedEntityResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteFundAsync(String scope, String code, final ApiCallback<DeletedEntityResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteFundValidateBeforeCall(scope, code, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<DeletedEntityResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call deleteFundAsync(String scope, String code, final ApiCallback<DeletedEntityResponse> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = deleteFundValidateBeforeCall(scope, code, _callback, opts);
        Type localVarReturnType = new TypeToken<DeletedEntityResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIdeleteFundRequest {
        private final String scope;
        private final String code;

        private APIdeleteFundRequest(String scope, String code) {
            this.scope = scope;
            this.code = code;
        }

        /**
         * Build call for deleteFund
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The datetime that the Fund was deleted </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteFundCall(scope, code, _callback);
        }

        /**
         * Execute deleteFund request
         * @return DeletedEntityResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The datetime that the Fund was deleted </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public DeletedEntityResponse execute() throws ApiException {
            ApiResponse<DeletedEntityResponse> localVarResp = deleteFundWithHttpInfo(scope, code);
            return localVarResp.getData();
        }

        /**
         * Execute deleteFund request. Use any specified configuration options to override any other configuration for this request only.
         * @return DeletedEntityResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The datetime that the Fund was deleted </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public DeletedEntityResponse execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<DeletedEntityResponse> localVarResp = deleteFundWithHttpInfo(scope, code, opts);
            return localVarResp.getData();
        }

        /**
         * Execute deleteFund request with HTTP info returned
         * @return ApiResponse&lt;DeletedEntityResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The datetime that the Fund was deleted </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DeletedEntityResponse> executeWithHttpInfo() throws ApiException {
            return deleteFundWithHttpInfo(scope, code);
        }

        /**
         * Execute deleteFund request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;DeletedEntityResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The datetime that the Fund was deleted </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DeletedEntityResponse> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return deleteFundWithHttpInfo(scope, code, opts);
        }

        /**
         * Execute deleteFund request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The datetime that the Fund was deleted </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DeletedEntityResponse> _callback) throws ApiException {
            return deleteFundAsync(scope, code, _callback);
        }

        /**
         * Execute deleteFund request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The datetime that the Fund was deleted </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DeletedEntityResponse> _callback, ConfigurationOptions opts) throws ApiException {
            return deleteFundAsync(scope, code, _callback, opts);
        }
    }

    /**
     * [EXPERIMENTAL] DeleteFund: Delete a Fund.
     * Delete the given Fund.
     * @param scope The scope of the Fund to be deleted. (required)
     * @param code The code of the Fund to be deleted. Together with the scope this uniquely identifies the Fund. (required)
     * @return APIdeleteFundRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The datetime that the Fund was deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIdeleteFundRequest deleteFund(String scope, String code) {
        return new APIdeleteFundRequest(scope, code);
    }
    private okhttp3.Call deleteValuationPointCall(String scope, String code, String diaryEntryCode, String navTypeCode, final ApiCallback _callback) throws ApiException {
        return deleteValuationPointCall(scope, code, diaryEntryCode, navTypeCode,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call deleteValuationPointCall(String scope, String code, String diaryEntryCode, String navTypeCode, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/funds/{scope}/{code}/valuationpoints/{diaryEntryCode}"
            .replace("{" + "scope" + "}", localVarApiClient.escapeString(scope.toString()))
            .replace("{" + "code" + "}", localVarApiClient.escapeString(code.toString()))
            .replace("{" + "diaryEntryCode" + "}", localVarApiClient.escapeString(diaryEntryCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (navTypeCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("navTypeCode", navTypeCode));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteValuationPointValidateBeforeCall(String scope, String code, String diaryEntryCode, String navTypeCode, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling deleteValuationPoint(Async)");
        }

        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling deleteValuationPoint(Async)");
        }

        // verify the required parameter 'diaryEntryCode' is set
        if (diaryEntryCode == null) {
            throw new ApiException("Missing the required parameter 'diaryEntryCode' when calling deleteValuationPoint(Async)");
        }

        return deleteValuationPointCall(scope, code, diaryEntryCode, navTypeCode, _callback, opts);

    }


    private ApiResponse<DeletedEntityResponse> deleteValuationPointWithHttpInfo(String scope, String code, String diaryEntryCode, String navTypeCode) throws ApiException {
        okhttp3.Call localVarCall = deleteValuationPointValidateBeforeCall(scope, code, diaryEntryCode, navTypeCode, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<DeletedEntityResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<DeletedEntityResponse> deleteValuationPointWithHttpInfo(String scope, String code, String diaryEntryCode, String navTypeCode, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = deleteValuationPointValidateBeforeCall(scope, code, diaryEntryCode, navTypeCode, null, opts);
        Type localVarReturnType = new TypeToken<DeletedEntityResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteValuationPointAsync(String scope, String code, String diaryEntryCode, String navTypeCode, final ApiCallback<DeletedEntityResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteValuationPointValidateBeforeCall(scope, code, diaryEntryCode, navTypeCode, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<DeletedEntityResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call deleteValuationPointAsync(String scope, String code, String diaryEntryCode, String navTypeCode, final ApiCallback<DeletedEntityResponse> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = deleteValuationPointValidateBeforeCall(scope, code, diaryEntryCode, navTypeCode, _callback, opts);
        Type localVarReturnType = new TypeToken<DeletedEntityResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIdeleteValuationPointRequest {
        private final String scope;
        private final String code;
        private final String diaryEntryCode;
        private String navTypeCode;

        private APIdeleteValuationPointRequest(String scope, String code, String diaryEntryCode) {
            this.scope = scope;
            this.code = code;
            this.diaryEntryCode = diaryEntryCode;
        }

        /**
         * Set navTypeCode
         * @param navTypeCode When provided, Deletes the Valuation Point against the specified NAV Type. When not provided the Primary NAV Type will be Deleted. (optional)
         * @return APIdeleteValuationPointRequest
         */
        public APIdeleteValuationPointRequest navTypeCode(String navTypeCode) {
            this.navTypeCode = navTypeCode;
            return this;
        }

        /**
         * Build call for deleteValuationPoint
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The datetime that the Valuation Point was deleted </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteValuationPointCall(scope, code, diaryEntryCode, navTypeCode, _callback);
        }

        /**
         * Execute deleteValuationPoint request
         * @return DeletedEntityResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The datetime that the Valuation Point was deleted </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public DeletedEntityResponse execute() throws ApiException {
            ApiResponse<DeletedEntityResponse> localVarResp = deleteValuationPointWithHttpInfo(scope, code, diaryEntryCode, navTypeCode);
            return localVarResp.getData();
        }

        /**
         * Execute deleteValuationPoint request. Use any specified configuration options to override any other configuration for this request only.
         * @return DeletedEntityResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The datetime that the Valuation Point was deleted </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public DeletedEntityResponse execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<DeletedEntityResponse> localVarResp = deleteValuationPointWithHttpInfo(scope, code, diaryEntryCode, navTypeCode, opts);
            return localVarResp.getData();
        }

        /**
         * Execute deleteValuationPoint request with HTTP info returned
         * @return ApiResponse&lt;DeletedEntityResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The datetime that the Valuation Point was deleted </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DeletedEntityResponse> executeWithHttpInfo() throws ApiException {
            return deleteValuationPointWithHttpInfo(scope, code, diaryEntryCode, navTypeCode);
        }

        /**
         * Execute deleteValuationPoint request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;DeletedEntityResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The datetime that the Valuation Point was deleted </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DeletedEntityResponse> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return deleteValuationPointWithHttpInfo(scope, code, diaryEntryCode, navTypeCode, opts);
        }

        /**
         * Execute deleteValuationPoint request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The datetime that the Valuation Point was deleted </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DeletedEntityResponse> _callback) throws ApiException {
            return deleteValuationPointAsync(scope, code, diaryEntryCode, navTypeCode, _callback);
        }

        /**
         * Execute deleteValuationPoint request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The datetime that the Valuation Point was deleted </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DeletedEntityResponse> _callback, ConfigurationOptions opts) throws ApiException {
            return deleteValuationPointAsync(scope, code, diaryEntryCode, navTypeCode, _callback, opts);
        }
    }

    /**
     * [EXPERIMENTAL] DeleteValuationPoint: Delete a Valuation Point.
     * Deletes the given Valuation Point.
     * @param scope The scope of the Fund for the valuation point to be deleted. (required)
     * @param code The code of the Fund containing the Valuation Point to be deleted. Together with the scope this uniquely identifies the Fund. (required)
     * @param diaryEntryCode The diary entry code for the valuation Point to be deleted. (required)
     * @return APIdeleteValuationPointRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The datetime that the Valuation Point was deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIdeleteValuationPointRequest deleteValuationPoint(String scope, String code, String diaryEntryCode) {
        return new APIdeleteValuationPointRequest(scope, code, diaryEntryCode);
    }
    private okhttp3.Call finaliseCandidateValuationPointCall(String scope, String code, ValuationPointDataRequest valuationPointDataRequest, String navTypeCode, final ApiCallback _callback) throws ApiException {
        return finaliseCandidateValuationPointCall(scope, code, valuationPointDataRequest, navTypeCode,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call finaliseCandidateValuationPointCall(String scope, String code, ValuationPointDataRequest valuationPointDataRequest, String navTypeCode, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = valuationPointDataRequest;

        // create path and map variables
        String localVarPath = "/api/funds/{scope}/{code}/valuationpoints/$finalisecandidate"
            .replace("{" + "scope" + "}", localVarApiClient.escapeString(scope.toString()))
            .replace("{" + "code" + "}", localVarApiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (navTypeCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("navTypeCode", navTypeCode));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call finaliseCandidateValuationPointValidateBeforeCall(String scope, String code, ValuationPointDataRequest valuationPointDataRequest, String navTypeCode, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling finaliseCandidateValuationPoint(Async)");
        }

        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling finaliseCandidateValuationPoint(Async)");
        }

        // verify the required parameter 'valuationPointDataRequest' is set
        if (valuationPointDataRequest == null) {
            throw new ApiException("Missing the required parameter 'valuationPointDataRequest' when calling finaliseCandidateValuationPoint(Async)");
        }

        return finaliseCandidateValuationPointCall(scope, code, valuationPointDataRequest, navTypeCode, _callback, opts);

    }


    private ApiResponse<ValuationPointDataResponse> finaliseCandidateValuationPointWithHttpInfo(String scope, String code, ValuationPointDataRequest valuationPointDataRequest, String navTypeCode) throws ApiException {
        okhttp3.Call localVarCall = finaliseCandidateValuationPointValidateBeforeCall(scope, code, valuationPointDataRequest, navTypeCode, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<ValuationPointDataResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<ValuationPointDataResponse> finaliseCandidateValuationPointWithHttpInfo(String scope, String code, ValuationPointDataRequest valuationPointDataRequest, String navTypeCode, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = finaliseCandidateValuationPointValidateBeforeCall(scope, code, valuationPointDataRequest, navTypeCode, null, opts);
        Type localVarReturnType = new TypeToken<ValuationPointDataResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call finaliseCandidateValuationPointAsync(String scope, String code, ValuationPointDataRequest valuationPointDataRequest, String navTypeCode, final ApiCallback<ValuationPointDataResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = finaliseCandidateValuationPointValidateBeforeCall(scope, code, valuationPointDataRequest, navTypeCode, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<ValuationPointDataResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call finaliseCandidateValuationPointAsync(String scope, String code, ValuationPointDataRequest valuationPointDataRequest, String navTypeCode, final ApiCallback<ValuationPointDataResponse> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = finaliseCandidateValuationPointValidateBeforeCall(scope, code, valuationPointDataRequest, navTypeCode, _callback, opts);
        Type localVarReturnType = new TypeToken<ValuationPointDataResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIfinaliseCandidateValuationPointRequest {
        private final String scope;
        private final String code;
        private final ValuationPointDataRequest valuationPointDataRequest;
        private String navTypeCode;

        private APIfinaliseCandidateValuationPointRequest(String scope, String code, ValuationPointDataRequest valuationPointDataRequest) {
            this.scope = scope;
            this.code = code;
            this.valuationPointDataRequest = valuationPointDataRequest;
        }

        /**
         * Set navTypeCode
         * @param navTypeCode When provided Finalises the Valuation Point of the specified NAV Type. When not provided the Primary NAV Type will be Finalised. (optional)
         * @return APIfinaliseCandidateValuationPointRequest
         */
        public APIfinaliseCandidateValuationPointRequest navTypeCode(String navTypeCode) {
            this.navTypeCode = navTypeCode;
            return this;
        }

        /**
         * Build call for finaliseCandidateValuationPoint
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The updated Valuation Point response as a result of it be marked as Final. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return finaliseCandidateValuationPointCall(scope, code, valuationPointDataRequest, navTypeCode, _callback);
        }

        /**
         * Execute finaliseCandidateValuationPoint request
         * @return ValuationPointDataResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The updated Valuation Point response as a result of it be marked as Final. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ValuationPointDataResponse execute() throws ApiException {
            ApiResponse<ValuationPointDataResponse> localVarResp = finaliseCandidateValuationPointWithHttpInfo(scope, code, valuationPointDataRequest, navTypeCode);
            return localVarResp.getData();
        }

        /**
         * Execute finaliseCandidateValuationPoint request. Use any specified configuration options to override any other configuration for this request only.
         * @return ValuationPointDataResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The updated Valuation Point response as a result of it be marked as Final. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ValuationPointDataResponse execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<ValuationPointDataResponse> localVarResp = finaliseCandidateValuationPointWithHttpInfo(scope, code, valuationPointDataRequest, navTypeCode, opts);
            return localVarResp.getData();
        }

        /**
         * Execute finaliseCandidateValuationPoint request with HTTP info returned
         * @return ApiResponse&lt;ValuationPointDataResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The updated Valuation Point response as a result of it be marked as Final. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ValuationPointDataResponse> executeWithHttpInfo() throws ApiException {
            return finaliseCandidateValuationPointWithHttpInfo(scope, code, valuationPointDataRequest, navTypeCode);
        }

        /**
         * Execute finaliseCandidateValuationPoint request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;ValuationPointDataResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The updated Valuation Point response as a result of it be marked as Final. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ValuationPointDataResponse> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return finaliseCandidateValuationPointWithHttpInfo(scope, code, valuationPointDataRequest, navTypeCode, opts);
        }

        /**
         * Execute finaliseCandidateValuationPoint request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The updated Valuation Point response as a result of it be marked as Final. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ValuationPointDataResponse> _callback) throws ApiException {
            return finaliseCandidateValuationPointAsync(scope, code, valuationPointDataRequest, navTypeCode, _callback);
        }

        /**
         * Execute finaliseCandidateValuationPoint request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The updated Valuation Point response as a result of it be marked as Final. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ValuationPointDataResponse> _callback, ConfigurationOptions opts) throws ApiException {
            return finaliseCandidateValuationPointAsync(scope, code, valuationPointDataRequest, navTypeCode, _callback, opts);
        }
    }

    /**
     * [EXPERIMENTAL] FinaliseCandidateValuationPoint: Finalise Candidate.
     * Moves a &#39;Candidate&#39; status Valuation Point to status &#39;Final&#39;.
     * @param scope The scope of the Fund. (required)
     * @param code The code of the Fund. Together with the scope this uniquely identifies the Fund. (required)
     * @param valuationPointDataRequest The valuationPointDataRequest which contains the diary entry code to mark as final. (required)
     * @return APIfinaliseCandidateValuationPointRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated Valuation Point response as a result of it be marked as Final. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIfinaliseCandidateValuationPointRequest finaliseCandidateValuationPoint(String scope, String code, ValuationPointDataRequest valuationPointDataRequest) {
        return new APIfinaliseCandidateValuationPointRequest(scope, code, valuationPointDataRequest);
    }
    private okhttp3.Call getFeeCall(String scope, String code, String feeCode, String effectiveAt, OffsetDateTime asAt, List<String> propertyKeys, final ApiCallback _callback) throws ApiException {
        return getFeeCall(scope, code, feeCode, effectiveAt, asAt, propertyKeys,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call getFeeCall(String scope, String code, String feeCode, String effectiveAt, OffsetDateTime asAt, List<String> propertyKeys, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/funds/{scope}/{code}/fees/{feeCode}"
            .replace("{" + "scope" + "}", localVarApiClient.escapeString(scope.toString()))
            .replace("{" + "code" + "}", localVarApiClient.escapeString(code.toString()))
            .replace("{" + "feeCode" + "}", localVarApiClient.escapeString(feeCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (effectiveAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("effectiveAt", effectiveAt));
        }

        if (asAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asAt", asAt));
        }

        if (propertyKeys != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "propertyKeys", propertyKeys));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFeeValidateBeforeCall(String scope, String code, String feeCode, String effectiveAt, OffsetDateTime asAt, List<String> propertyKeys, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling getFee(Async)");
        }

        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling getFee(Async)");
        }

        // verify the required parameter 'feeCode' is set
        if (feeCode == null) {
            throw new ApiException("Missing the required parameter 'feeCode' when calling getFee(Async)");
        }

        return getFeeCall(scope, code, feeCode, effectiveAt, asAt, propertyKeys, _callback, opts);

    }


    private ApiResponse<Fee> getFeeWithHttpInfo(String scope, String code, String feeCode, String effectiveAt, OffsetDateTime asAt, List<String> propertyKeys) throws ApiException {
        okhttp3.Call localVarCall = getFeeValidateBeforeCall(scope, code, feeCode, effectiveAt, asAt, propertyKeys, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<Fee>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<Fee> getFeeWithHttpInfo(String scope, String code, String feeCode, String effectiveAt, OffsetDateTime asAt, List<String> propertyKeys, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = getFeeValidateBeforeCall(scope, code, feeCode, effectiveAt, asAt, propertyKeys, null, opts);
        Type localVarReturnType = new TypeToken<Fee>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getFeeAsync(String scope, String code, String feeCode, String effectiveAt, OffsetDateTime asAt, List<String> propertyKeys, final ApiCallback<Fee> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFeeValidateBeforeCall(scope, code, feeCode, effectiveAt, asAt, propertyKeys, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<Fee>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call getFeeAsync(String scope, String code, String feeCode, String effectiveAt, OffsetDateTime asAt, List<String> propertyKeys, final ApiCallback<Fee> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = getFeeValidateBeforeCall(scope, code, feeCode, effectiveAt, asAt, propertyKeys, _callback, opts);
        Type localVarReturnType = new TypeToken<Fee>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetFeeRequest {
        private final String scope;
        private final String code;
        private final String feeCode;
        private String effectiveAt;
        private OffsetDateTime asAt;
        private List<String> propertyKeys;

        private APIgetFeeRequest(String scope, String code, String feeCode) {
            this.scope = scope;
            this.code = code;
            this.feeCode = feeCode;
        }

        /**
         * Set effectiveAt
         * @param effectiveAt The effective datetime or cut label at which to retrieve the Fee properties. Defaults to the current LUSID system datetime if not specified. (optional)
         * @return APIgetFeeRequest
         */
        public APIgetFeeRequest effectiveAt(String effectiveAt) {
            this.effectiveAt = effectiveAt;
            return this;
        }

        /**
         * Set asAt
         * @param asAt The asAt datetime at which to retrieve the Fee. Defaults to returning the latest version of the Fee if not specified. (optional)
         * @return APIgetFeeRequest
         */
        public APIgetFeeRequest asAt(OffsetDateTime asAt) {
            this.asAt = asAt;
            return this;
        }

        /**
         * Set propertyKeys
         * @param propertyKeys A list of property keys from the &#39;Fee&#39; domain to decorate onto the Fee.   These must take the format {domain}/{scope}/{code}, for example &#39;Fee/Account/Id&#39;. If no properties are specified, then no properties will be returned. (optional)
         * @return APIgetFeeRequest
         */
        public APIgetFeeRequest propertyKeys(List<String> propertyKeys) {
            this.propertyKeys = propertyKeys;
            return this;
        }

        /**
         * Build call for getFee
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested Fee definition. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getFeeCall(scope, code, feeCode, effectiveAt, asAt, propertyKeys, _callback);
        }

        /**
         * Execute getFee request
         * @return Fee
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested Fee definition. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public Fee execute() throws ApiException {
            ApiResponse<Fee> localVarResp = getFeeWithHttpInfo(scope, code, feeCode, effectiveAt, asAt, propertyKeys);
            return localVarResp.getData();
        }

        /**
         * Execute getFee request. Use any specified configuration options to override any other configuration for this request only.
         * @return Fee
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested Fee definition. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public Fee execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<Fee> localVarResp = getFeeWithHttpInfo(scope, code, feeCode, effectiveAt, asAt, propertyKeys, opts);
            return localVarResp.getData();
        }

        /**
         * Execute getFee request with HTTP info returned
         * @return ApiResponse&lt;Fee&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested Fee definition. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Fee> executeWithHttpInfo() throws ApiException {
            return getFeeWithHttpInfo(scope, code, feeCode, effectiveAt, asAt, propertyKeys);
        }

        /**
         * Execute getFee request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;Fee&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested Fee definition. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Fee> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return getFeeWithHttpInfo(scope, code, feeCode, effectiveAt, asAt, propertyKeys, opts);
        }

        /**
         * Execute getFee request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested Fee definition. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Fee> _callback) throws ApiException {
            return getFeeAsync(scope, code, feeCode, effectiveAt, asAt, propertyKeys, _callback);
        }

        /**
         * Execute getFee request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested Fee definition. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Fee> _callback, ConfigurationOptions opts) throws ApiException {
            return getFeeAsync(scope, code, feeCode, effectiveAt, asAt, propertyKeys, _callback, opts);
        }
    }

    /**
     * [EXPERIMENTAL] GetFee: Get a Fee for a specified Fund.
     * Retrieve a fee for a specified Fund
     * @param scope The scope of the Fund. (required)
     * @param code The code of the Fund. Together with the scope this uniquely identifies the Fund. (required)
     * @param feeCode The code of the Fee. (required)
     * @return APIgetFeeRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested Fee definition. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIgetFeeRequest getFee(String scope, String code, String feeCode) {
        return new APIgetFeeRequest(scope, code, feeCode);
    }
    private okhttp3.Call getFeePropertiesCall(String scope, String code, String feeCode, String effectiveAt, OffsetDateTime asAt, final ApiCallback _callback) throws ApiException {
        return getFeePropertiesCall(scope, code, feeCode, effectiveAt, asAt,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call getFeePropertiesCall(String scope, String code, String feeCode, String effectiveAt, OffsetDateTime asAt, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/funds/{scope}/{code}/fees/{feeCode}/properties"
            .replace("{" + "scope" + "}", localVarApiClient.escapeString(scope.toString()))
            .replace("{" + "code" + "}", localVarApiClient.escapeString(code.toString()))
            .replace("{" + "feeCode" + "}", localVarApiClient.escapeString(feeCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (effectiveAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("effectiveAt", effectiveAt));
        }

        if (asAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asAt", asAt));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFeePropertiesValidateBeforeCall(String scope, String code, String feeCode, String effectiveAt, OffsetDateTime asAt, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling getFeeProperties(Async)");
        }

        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling getFeeProperties(Async)");
        }

        // verify the required parameter 'feeCode' is set
        if (feeCode == null) {
            throw new ApiException("Missing the required parameter 'feeCode' when calling getFeeProperties(Async)");
        }

        return getFeePropertiesCall(scope, code, feeCode, effectiveAt, asAt, _callback, opts);

    }


    private ApiResponse<FeeProperties> getFeePropertiesWithHttpInfo(String scope, String code, String feeCode, String effectiveAt, OffsetDateTime asAt) throws ApiException {
        okhttp3.Call localVarCall = getFeePropertiesValidateBeforeCall(scope, code, feeCode, effectiveAt, asAt, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<FeeProperties>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<FeeProperties> getFeePropertiesWithHttpInfo(String scope, String code, String feeCode, String effectiveAt, OffsetDateTime asAt, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = getFeePropertiesValidateBeforeCall(scope, code, feeCode, effectiveAt, asAt, null, opts);
        Type localVarReturnType = new TypeToken<FeeProperties>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getFeePropertiesAsync(String scope, String code, String feeCode, String effectiveAt, OffsetDateTime asAt, final ApiCallback<FeeProperties> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFeePropertiesValidateBeforeCall(scope, code, feeCode, effectiveAt, asAt, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<FeeProperties>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call getFeePropertiesAsync(String scope, String code, String feeCode, String effectiveAt, OffsetDateTime asAt, final ApiCallback<FeeProperties> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = getFeePropertiesValidateBeforeCall(scope, code, feeCode, effectiveAt, asAt, _callback, opts);
        Type localVarReturnType = new TypeToken<FeeProperties>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetFeePropertiesRequest {
        private final String scope;
        private final String code;
        private final String feeCode;
        private String effectiveAt;
        private OffsetDateTime asAt;

        private APIgetFeePropertiesRequest(String scope, String code, String feeCode) {
            this.scope = scope;
            this.code = code;
            this.feeCode = feeCode;
        }

        /**
         * Set effectiveAt
         * @param effectiveAt The effective datetime or cut label at which to list the Fee&#39;s properties. Defaults to the current LUSID system datetime if not specified. (optional)
         * @return APIgetFeePropertiesRequest
         */
        public APIgetFeePropertiesRequest effectiveAt(String effectiveAt) {
            this.effectiveAt = effectiveAt;
            return this;
        }

        /**
         * Set asAt
         * @param asAt The asAt datetime at which to list the Fee&#39;s properties. Defaults to return the latest version of each property if not specified. (optional)
         * @return APIgetFeePropertiesRequest
         */
        public APIgetFeePropertiesRequest asAt(OffsetDateTime asAt) {
            this.asAt = asAt;
            return this;
        }

        /**
         * Build call for getFeeProperties
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The properties of the specified fee </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getFeePropertiesCall(scope, code, feeCode, effectiveAt, asAt, _callback);
        }

        /**
         * Execute getFeeProperties request
         * @return FeeProperties
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The properties of the specified fee </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public FeeProperties execute() throws ApiException {
            ApiResponse<FeeProperties> localVarResp = getFeePropertiesWithHttpInfo(scope, code, feeCode, effectiveAt, asAt);
            return localVarResp.getData();
        }

        /**
         * Execute getFeeProperties request. Use any specified configuration options to override any other configuration for this request only.
         * @return FeeProperties
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The properties of the specified fee </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public FeeProperties execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<FeeProperties> localVarResp = getFeePropertiesWithHttpInfo(scope, code, feeCode, effectiveAt, asAt, opts);
            return localVarResp.getData();
        }

        /**
         * Execute getFeeProperties request with HTTP info returned
         * @return ApiResponse&lt;FeeProperties&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The properties of the specified fee </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<FeeProperties> executeWithHttpInfo() throws ApiException {
            return getFeePropertiesWithHttpInfo(scope, code, feeCode, effectiveAt, asAt);
        }

        /**
         * Execute getFeeProperties request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;FeeProperties&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The properties of the specified fee </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<FeeProperties> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return getFeePropertiesWithHttpInfo(scope, code, feeCode, effectiveAt, asAt, opts);
        }

        /**
         * Execute getFeeProperties request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The properties of the specified fee </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<FeeProperties> _callback) throws ApiException {
            return getFeePropertiesAsync(scope, code, feeCode, effectiveAt, asAt, _callback);
        }

        /**
         * Execute getFeeProperties request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The properties of the specified fee </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<FeeProperties> _callback, ConfigurationOptions opts) throws ApiException {
            return getFeePropertiesAsync(scope, code, feeCode, effectiveAt, asAt, _callback, opts);
        }
    }

    /**
     * [EXPERIMENTAL] GetFeeProperties: Get Fee properties
     * Get all the properties of a single fee.
     * @param scope The scope of the Fund. (required)
     * @param code The code of the Fund. Together with the scope this uniquely identifies the Fund. (required)
     * @param feeCode The code of the Fee to get the properties for. (required)
     * @return APIgetFeePropertiesRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The properties of the specified fee </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIgetFeePropertiesRequest getFeeProperties(String scope, String code, String feeCode) {
        return new APIgetFeePropertiesRequest(scope, code, feeCode);
    }
    private okhttp3.Call getFundCall(String scope, String code, String effectiveAt, OffsetDateTime asAt, List<String> propertyKeys, final ApiCallback _callback) throws ApiException {
        return getFundCall(scope, code, effectiveAt, asAt, propertyKeys,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call getFundCall(String scope, String code, String effectiveAt, OffsetDateTime asAt, List<String> propertyKeys, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/funds/{scope}/{code}"
            .replace("{" + "scope" + "}", localVarApiClient.escapeString(scope.toString()))
            .replace("{" + "code" + "}", localVarApiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (effectiveAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("effectiveAt", effectiveAt));
        }

        if (asAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asAt", asAt));
        }

        if (propertyKeys != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "propertyKeys", propertyKeys));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFundValidateBeforeCall(String scope, String code, String effectiveAt, OffsetDateTime asAt, List<String> propertyKeys, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling getFund(Async)");
        }

        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling getFund(Async)");
        }

        return getFundCall(scope, code, effectiveAt, asAt, propertyKeys, _callback, opts);

    }


    private ApiResponse<Fund> getFundWithHttpInfo(String scope, String code, String effectiveAt, OffsetDateTime asAt, List<String> propertyKeys) throws ApiException {
        okhttp3.Call localVarCall = getFundValidateBeforeCall(scope, code, effectiveAt, asAt, propertyKeys, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<Fund>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<Fund> getFundWithHttpInfo(String scope, String code, String effectiveAt, OffsetDateTime asAt, List<String> propertyKeys, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = getFundValidateBeforeCall(scope, code, effectiveAt, asAt, propertyKeys, null, opts);
        Type localVarReturnType = new TypeToken<Fund>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getFundAsync(String scope, String code, String effectiveAt, OffsetDateTime asAt, List<String> propertyKeys, final ApiCallback<Fund> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFundValidateBeforeCall(scope, code, effectiveAt, asAt, propertyKeys, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<Fund>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call getFundAsync(String scope, String code, String effectiveAt, OffsetDateTime asAt, List<String> propertyKeys, final ApiCallback<Fund> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = getFundValidateBeforeCall(scope, code, effectiveAt, asAt, propertyKeys, _callback, opts);
        Type localVarReturnType = new TypeToken<Fund>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetFundRequest {
        private final String scope;
        private final String code;
        private String effectiveAt;
        private OffsetDateTime asAt;
        private List<String> propertyKeys;

        private APIgetFundRequest(String scope, String code) {
            this.scope = scope;
            this.code = code;
        }

        /**
         * Set effectiveAt
         * @param effectiveAt The effective datetime or cut label at which to retrieve the Fund properties. Defaults to the current LUSID system datetime if not specified. (optional)
         * @return APIgetFundRequest
         */
        public APIgetFundRequest effectiveAt(String effectiveAt) {
            this.effectiveAt = effectiveAt;
            return this;
        }

        /**
         * Set asAt
         * @param asAt The asAt datetime at which to retrieve the Fund definition. Defaults to returning the latest version of the Fund definition if not specified. (optional)
         * @return APIgetFundRequest
         */
        public APIgetFundRequest asAt(OffsetDateTime asAt) {
            this.asAt = asAt;
            return this;
        }

        /**
         * Set propertyKeys
         * @param propertyKeys A list of property keys from the &#39;Fund&#39; domain to decorate onto the Fund.   These must take the format {domain}/{scope}/{code}, for example &#39;Fund/Manager/Id&#39;. If no properties are specified, then no properties will be returned. (optional)
         * @return APIgetFundRequest
         */
        public APIgetFundRequest propertyKeys(List<String> propertyKeys) {
            this.propertyKeys = propertyKeys;
            return this;
        }

        /**
         * Build call for getFund
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested Fund definition. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getFundCall(scope, code, effectiveAt, asAt, propertyKeys, _callback);
        }

        /**
         * Execute getFund request
         * @return Fund
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested Fund definition. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public Fund execute() throws ApiException {
            ApiResponse<Fund> localVarResp = getFundWithHttpInfo(scope, code, effectiveAt, asAt, propertyKeys);
            return localVarResp.getData();
        }

        /**
         * Execute getFund request. Use any specified configuration options to override any other configuration for this request only.
         * @return Fund
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested Fund definition. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public Fund execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<Fund> localVarResp = getFundWithHttpInfo(scope, code, effectiveAt, asAt, propertyKeys, opts);
            return localVarResp.getData();
        }

        /**
         * Execute getFund request with HTTP info returned
         * @return ApiResponse&lt;Fund&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested Fund definition. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Fund> executeWithHttpInfo() throws ApiException {
            return getFundWithHttpInfo(scope, code, effectiveAt, asAt, propertyKeys);
        }

        /**
         * Execute getFund request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;Fund&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested Fund definition. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Fund> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return getFundWithHttpInfo(scope, code, effectiveAt, asAt, propertyKeys, opts);
        }

        /**
         * Execute getFund request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested Fund definition. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Fund> _callback) throws ApiException {
            return getFundAsync(scope, code, effectiveAt, asAt, propertyKeys, _callback);
        }

        /**
         * Execute getFund request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested Fund definition. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Fund> _callback, ConfigurationOptions opts) throws ApiException {
            return getFundAsync(scope, code, effectiveAt, asAt, propertyKeys, _callback, opts);
        }
    }

    /**
     * [EXPERIMENTAL] GetFund: Get a Fund.
     * Retrieve the definition of a particular Fund.
     * @param scope The scope of the Fund. (required)
     * @param code The code of the Fund. Together with the scope this uniquely identifies the Fund. (required)
     * @return APIgetFundRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested Fund definition. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIgetFundRequest getFund(String scope, String code) {
        return new APIgetFundRequest(scope, code);
    }
    private okhttp3.Call getFundPropertiesCall(String scope, String code, String effectiveAt, OffsetDateTime asAt, final ApiCallback _callback) throws ApiException {
        return getFundPropertiesCall(scope, code, effectiveAt, asAt,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call getFundPropertiesCall(String scope, String code, String effectiveAt, OffsetDateTime asAt, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/funds/{scope}/{code}/properties"
            .replace("{" + "scope" + "}", localVarApiClient.escapeString(scope.toString()))
            .replace("{" + "code" + "}", localVarApiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (effectiveAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("effectiveAt", effectiveAt));
        }

        if (asAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asAt", asAt));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFundPropertiesValidateBeforeCall(String scope, String code, String effectiveAt, OffsetDateTime asAt, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling getFundProperties(Async)");
        }

        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling getFundProperties(Async)");
        }

        return getFundPropertiesCall(scope, code, effectiveAt, asAt, _callback, opts);

    }


    private ApiResponse<FundProperties> getFundPropertiesWithHttpInfo(String scope, String code, String effectiveAt, OffsetDateTime asAt) throws ApiException {
        okhttp3.Call localVarCall = getFundPropertiesValidateBeforeCall(scope, code, effectiveAt, asAt, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<FundProperties>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<FundProperties> getFundPropertiesWithHttpInfo(String scope, String code, String effectiveAt, OffsetDateTime asAt, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = getFundPropertiesValidateBeforeCall(scope, code, effectiveAt, asAt, null, opts);
        Type localVarReturnType = new TypeToken<FundProperties>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getFundPropertiesAsync(String scope, String code, String effectiveAt, OffsetDateTime asAt, final ApiCallback<FundProperties> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFundPropertiesValidateBeforeCall(scope, code, effectiveAt, asAt, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<FundProperties>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call getFundPropertiesAsync(String scope, String code, String effectiveAt, OffsetDateTime asAt, final ApiCallback<FundProperties> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = getFundPropertiesValidateBeforeCall(scope, code, effectiveAt, asAt, _callback, opts);
        Type localVarReturnType = new TypeToken<FundProperties>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetFundPropertiesRequest {
        private final String scope;
        private final String code;
        private String effectiveAt;
        private OffsetDateTime asAt;

        private APIgetFundPropertiesRequest(String scope, String code) {
            this.scope = scope;
            this.code = code;
        }

        /**
         * Set effectiveAt
         * @param effectiveAt The effective datetime or cut label at which to list the Fund&#39;s properties. Defaults to the current LUSID system datetime if not specified. (optional)
         * @return APIgetFundPropertiesRequest
         */
        public APIgetFundPropertiesRequest effectiveAt(String effectiveAt) {
            this.effectiveAt = effectiveAt;
            return this;
        }

        /**
         * Set asAt
         * @param asAt The asAt datetime at which to list the Fund&#39;s properties. Defaults to return the latest version of each property if not specified. (optional)
         * @return APIgetFundPropertiesRequest
         */
        public APIgetFundPropertiesRequest asAt(OffsetDateTime asAt) {
            this.asAt = asAt;
            return this;
        }

        /**
         * Build call for getFundProperties
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The properties of the specified fund </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getFundPropertiesCall(scope, code, effectiveAt, asAt, _callback);
        }

        /**
         * Execute getFundProperties request
         * @return FundProperties
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The properties of the specified fund </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public FundProperties execute() throws ApiException {
            ApiResponse<FundProperties> localVarResp = getFundPropertiesWithHttpInfo(scope, code, effectiveAt, asAt);
            return localVarResp.getData();
        }

        /**
         * Execute getFundProperties request. Use any specified configuration options to override any other configuration for this request only.
         * @return FundProperties
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The properties of the specified fund </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public FundProperties execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<FundProperties> localVarResp = getFundPropertiesWithHttpInfo(scope, code, effectiveAt, asAt, opts);
            return localVarResp.getData();
        }

        /**
         * Execute getFundProperties request with HTTP info returned
         * @return ApiResponse&lt;FundProperties&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The properties of the specified fund </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<FundProperties> executeWithHttpInfo() throws ApiException {
            return getFundPropertiesWithHttpInfo(scope, code, effectiveAt, asAt);
        }

        /**
         * Execute getFundProperties request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;FundProperties&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The properties of the specified fund </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<FundProperties> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return getFundPropertiesWithHttpInfo(scope, code, effectiveAt, asAt, opts);
        }

        /**
         * Execute getFundProperties request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The properties of the specified fund </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<FundProperties> _callback) throws ApiException {
            return getFundPropertiesAsync(scope, code, effectiveAt, asAt, _callback);
        }

        /**
         * Execute getFundProperties request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The properties of the specified fund </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<FundProperties> _callback, ConfigurationOptions opts) throws ApiException {
            return getFundPropertiesAsync(scope, code, effectiveAt, asAt, _callback, opts);
        }
    }

    /**
     * [EXPERIMENTAL] GetFundProperties: Get Fund properties
     * Get all the properties of a single fund.
     * @param scope The scope of the Fund to list the properties for. (required)
     * @param code The code of the Fund to list the properties for. Together with the scope this uniquely identifies the Fund. (required)
     * @return APIgetFundPropertiesRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The properties of the specified fund </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIgetFundPropertiesRequest getFundProperties(String scope, String code) {
        return new APIgetFundPropertiesRequest(scope, code);
    }
    private okhttp3.Call getHoldingsForFundCall(String scope, String code, SingleValuationPointQueryParameters singleValuationPointQueryParameters, String navTypeCode, OffsetDateTime asAt, String filter, List<String> propertyKeys, Boolean byTaxlots, Integer includeSettlementEventsAfterDays, final ApiCallback _callback) throws ApiException {
        return getHoldingsForFundCall(scope, code, singleValuationPointQueryParameters, navTypeCode, asAt, filter, propertyKeys, byTaxlots, includeSettlementEventsAfterDays,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call getHoldingsForFundCall(String scope, String code, SingleValuationPointQueryParameters singleValuationPointQueryParameters, String navTypeCode, OffsetDateTime asAt, String filter, List<String> propertyKeys, Boolean byTaxlots, Integer includeSettlementEventsAfterDays, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = singleValuationPointQueryParameters;

        // create path and map variables
        String localVarPath = "/api/funds/{scope}/{code}/$holdings"
            .replace("{" + "scope" + "}", localVarApiClient.escapeString(scope.toString()))
            .replace("{" + "code" + "}", localVarApiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (navTypeCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("navTypeCode", navTypeCode));
        }

        if (asAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asAt", asAt));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (propertyKeys != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "propertyKeys", propertyKeys));
        }

        if (byTaxlots != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("byTaxlots", byTaxlots));
        }

        if (includeSettlementEventsAfterDays != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeSettlementEventsAfterDays", includeSettlementEventsAfterDays));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getHoldingsForFundValidateBeforeCall(String scope, String code, SingleValuationPointQueryParameters singleValuationPointQueryParameters, String navTypeCode, OffsetDateTime asAt, String filter, List<String> propertyKeys, Boolean byTaxlots, Integer includeSettlementEventsAfterDays, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling getHoldingsForFund(Async)");
        }

        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling getHoldingsForFund(Async)");
        }

        // verify the required parameter 'singleValuationPointQueryParameters' is set
        if (singleValuationPointQueryParameters == null) {
            throw new ApiException("Missing the required parameter 'singleValuationPointQueryParameters' when calling getHoldingsForFund(Async)");
        }

        return getHoldingsForFundCall(scope, code, singleValuationPointQueryParameters, navTypeCode, asAt, filter, propertyKeys, byTaxlots, includeSettlementEventsAfterDays, _callback, opts);

    }


    private ApiResponse<VersionedResourceListOfPortfolioHolding> getHoldingsForFundWithHttpInfo(String scope, String code, SingleValuationPointQueryParameters singleValuationPointQueryParameters, String navTypeCode, OffsetDateTime asAt, String filter, List<String> propertyKeys, Boolean byTaxlots, Integer includeSettlementEventsAfterDays) throws ApiException {
        okhttp3.Call localVarCall = getHoldingsForFundValidateBeforeCall(scope, code, singleValuationPointQueryParameters, navTypeCode, asAt, filter, propertyKeys, byTaxlots, includeSettlementEventsAfterDays, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<VersionedResourceListOfPortfolioHolding>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<VersionedResourceListOfPortfolioHolding> getHoldingsForFundWithHttpInfo(String scope, String code, SingleValuationPointQueryParameters singleValuationPointQueryParameters, String navTypeCode, OffsetDateTime asAt, String filter, List<String> propertyKeys, Boolean byTaxlots, Integer includeSettlementEventsAfterDays, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = getHoldingsForFundValidateBeforeCall(scope, code, singleValuationPointQueryParameters, navTypeCode, asAt, filter, propertyKeys, byTaxlots, includeSettlementEventsAfterDays, null, opts);
        Type localVarReturnType = new TypeToken<VersionedResourceListOfPortfolioHolding>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getHoldingsForFundAsync(String scope, String code, SingleValuationPointQueryParameters singleValuationPointQueryParameters, String navTypeCode, OffsetDateTime asAt, String filter, List<String> propertyKeys, Boolean byTaxlots, Integer includeSettlementEventsAfterDays, final ApiCallback<VersionedResourceListOfPortfolioHolding> _callback) throws ApiException {

        okhttp3.Call localVarCall = getHoldingsForFundValidateBeforeCall(scope, code, singleValuationPointQueryParameters, navTypeCode, asAt, filter, propertyKeys, byTaxlots, includeSettlementEventsAfterDays, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<VersionedResourceListOfPortfolioHolding>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call getHoldingsForFundAsync(String scope, String code, SingleValuationPointQueryParameters singleValuationPointQueryParameters, String navTypeCode, OffsetDateTime asAt, String filter, List<String> propertyKeys, Boolean byTaxlots, Integer includeSettlementEventsAfterDays, final ApiCallback<VersionedResourceListOfPortfolioHolding> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = getHoldingsForFundValidateBeforeCall(scope, code, singleValuationPointQueryParameters, navTypeCode, asAt, filter, propertyKeys, byTaxlots, includeSettlementEventsAfterDays, _callback, opts);
        Type localVarReturnType = new TypeToken<VersionedResourceListOfPortfolioHolding>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetHoldingsForFundRequest {
        private final String scope;
        private final String code;
        private final SingleValuationPointQueryParameters singleValuationPointQueryParameters;
        private String navTypeCode;
        private OffsetDateTime asAt;
        private String filter;
        private List<String> propertyKeys;
        private Boolean byTaxlots;
        private Integer includeSettlementEventsAfterDays;

        private APIgetHoldingsForFundRequest(String scope, String code, SingleValuationPointQueryParameters singleValuationPointQueryParameters) {
            this.scope = scope;
            this.code = code;
            this.singleValuationPointQueryParameters = singleValuationPointQueryParameters;
        }

        /**
         * Set navTypeCode
         * @param navTypeCode When provided runs against the specified NAV Type, otherwise the Primary NAV Type will be used. (optional)
         * @return APIgetHoldingsForFundRequest
         */
        public APIgetHoldingsForFundRequest navTypeCode(String navTypeCode) {
            this.navTypeCode = navTypeCode;
            return this;
        }

        /**
         * Set asAt
         * @param asAt The asAt datetime at which to retrieve the holdings of transaction portfolios in the Fund. Defaults   to return the latest version of the holdings if not specified. (optional)
         * @return APIgetHoldingsForFundRequest
         */
        public APIgetHoldingsForFundRequest asAt(OffsetDateTime asAt) {
            this.asAt = asAt;
            return this;
        }

        /**
         * Set filter
         * @param filter Expression to filter the result set. Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid. (optional)
         * @return APIgetHoldingsForFundRequest
         */
        public APIgetHoldingsForFundRequest filter(String filter) {
            this.filter = filter;
            return this;
        }

        /**
         * Set propertyKeys
         * @param propertyKeys A list of property keys from the \&quot;Instrument\&quot;, \&quot;Holding\&quot; or \&quot;Portfolio\&quot; domain to decorate onto   the holdings. These take the format {domain}/{scope}/{code} e.g. \&quot;Instrument/system/Name\&quot; or \&quot;Holding/system/Cost\&quot;. (optional)
         * @return APIgetHoldingsForFundRequest
         */
        public APIgetHoldingsForFundRequest propertyKeys(List<String> propertyKeys) {
            this.propertyKeys = propertyKeys;
            return this;
        }

        /**
         * Set byTaxlots
         * @param byTaxlots Whether to expand the holdings to return the underlying tax-lots. Defaults to False. (optional)
         * @return APIgetHoldingsForFundRequest
         */
        public APIgetHoldingsForFundRequest byTaxlots(Boolean byTaxlots) {
            this.byTaxlots = byTaxlots;
            return this;
        }

        /**
         * Set includeSettlementEventsAfterDays
         * @param includeSettlementEventsAfterDays Number of days ahead to bring back settlements from, in relation to the specified effectiveAt (optional)
         * @return APIgetHoldingsForFundRequest
         */
        public APIgetHoldingsForFundRequest includeSettlementEventsAfterDays(Integer includeSettlementEventsAfterDays) {
            this.includeSettlementEventsAfterDays = includeSettlementEventsAfterDays;
            return this;
        }

        /**
         * Build call for getHoldingsForFund
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The holdings of transaction portfolios in a specific version of a Fund </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getHoldingsForFundCall(scope, code, singleValuationPointQueryParameters, navTypeCode, asAt, filter, propertyKeys, byTaxlots, includeSettlementEventsAfterDays, _callback);
        }

        /**
         * Execute getHoldingsForFund request
         * @return VersionedResourceListOfPortfolioHolding
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The holdings of transaction portfolios in a specific version of a Fund </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public VersionedResourceListOfPortfolioHolding execute() throws ApiException {
            ApiResponse<VersionedResourceListOfPortfolioHolding> localVarResp = getHoldingsForFundWithHttpInfo(scope, code, singleValuationPointQueryParameters, navTypeCode, asAt, filter, propertyKeys, byTaxlots, includeSettlementEventsAfterDays);
            return localVarResp.getData();
        }

        /**
         * Execute getHoldingsForFund request. Use any specified configuration options to override any other configuration for this request only.
         * @return VersionedResourceListOfPortfolioHolding
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The holdings of transaction portfolios in a specific version of a Fund </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public VersionedResourceListOfPortfolioHolding execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<VersionedResourceListOfPortfolioHolding> localVarResp = getHoldingsForFundWithHttpInfo(scope, code, singleValuationPointQueryParameters, navTypeCode, asAt, filter, propertyKeys, byTaxlots, includeSettlementEventsAfterDays, opts);
            return localVarResp.getData();
        }

        /**
         * Execute getHoldingsForFund request with HTTP info returned
         * @return ApiResponse&lt;VersionedResourceListOfPortfolioHolding&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The holdings of transaction portfolios in a specific version of a Fund </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<VersionedResourceListOfPortfolioHolding> executeWithHttpInfo() throws ApiException {
            return getHoldingsForFundWithHttpInfo(scope, code, singleValuationPointQueryParameters, navTypeCode, asAt, filter, propertyKeys, byTaxlots, includeSettlementEventsAfterDays);
        }

        /**
         * Execute getHoldingsForFund request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;VersionedResourceListOfPortfolioHolding&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The holdings of transaction portfolios in a specific version of a Fund </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<VersionedResourceListOfPortfolioHolding> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return getHoldingsForFundWithHttpInfo(scope, code, singleValuationPointQueryParameters, navTypeCode, asAt, filter, propertyKeys, byTaxlots, includeSettlementEventsAfterDays, opts);
        }

        /**
         * Execute getHoldingsForFund request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The holdings of transaction portfolios in a specific version of a Fund </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<VersionedResourceListOfPortfolioHolding> _callback) throws ApiException {
            return getHoldingsForFundAsync(scope, code, singleValuationPointQueryParameters, navTypeCode, asAt, filter, propertyKeys, byTaxlots, includeSettlementEventsAfterDays, _callback);
        }

        /**
         * Execute getHoldingsForFund request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The holdings of transaction portfolios in a specific version of a Fund </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<VersionedResourceListOfPortfolioHolding> _callback, ConfigurationOptions opts) throws ApiException {
            return getHoldingsForFundAsync(scope, code, singleValuationPointQueryParameters, navTypeCode, asAt, filter, propertyKeys, byTaxlots, includeSettlementEventsAfterDays, _callback, opts);
        }
    }

    /**
     * [EXPERIMENTAL] GetHoldingsForFund: Get holdings for transaction portfolios in a Fund.
     * Get the holdings of transaction portfolios in a specified Fund.
     * @param scope The scope of the Fund. (required)
     * @param code The code of the Fund. Together with the scope this uniquely identifies the Fund. (required)
     * @param singleValuationPointQueryParameters The query parameters used for diary entry or effective date of Holdings (required)
     * @return APIgetHoldingsForFundRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The holdings of transaction portfolios in a specific version of a Fund </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIgetHoldingsForFundRequest getHoldingsForFund(String scope, String code, SingleValuationPointQueryParameters singleValuationPointQueryParameters) {
        return new APIgetHoldingsForFundRequest(scope, code, singleValuationPointQueryParameters);
    }
    private okhttp3.Call getValuationForFundCall(String scope, String code, String navTypeCode, FundValuationRequest fundValuationRequest, final ApiCallback _callback) throws ApiException {
        return getValuationForFundCall(scope, code, navTypeCode, fundValuationRequest,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call getValuationForFundCall(String scope, String code, String navTypeCode, FundValuationRequest fundValuationRequest, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = fundValuationRequest;

        // create path and map variables
        String localVarPath = "/api/funds/{scope}/{code}/$valuation"
            .replace("{" + "scope" + "}", localVarApiClient.escapeString(scope.toString()))
            .replace("{" + "code" + "}", localVarApiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (navTypeCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("navTypeCode", navTypeCode));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getValuationForFundValidateBeforeCall(String scope, String code, String navTypeCode, FundValuationRequest fundValuationRequest, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling getValuationForFund(Async)");
        }

        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling getValuationForFund(Async)");
        }

        return getValuationForFundCall(scope, code, navTypeCode, fundValuationRequest, _callback, opts);

    }


    private ApiResponse<ListAggregationResponse> getValuationForFundWithHttpInfo(String scope, String code, String navTypeCode, FundValuationRequest fundValuationRequest) throws ApiException {
        okhttp3.Call localVarCall = getValuationForFundValidateBeforeCall(scope, code, navTypeCode, fundValuationRequest, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<ListAggregationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<ListAggregationResponse> getValuationForFundWithHttpInfo(String scope, String code, String navTypeCode, FundValuationRequest fundValuationRequest, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = getValuationForFundValidateBeforeCall(scope, code, navTypeCode, fundValuationRequest, null, opts);
        Type localVarReturnType = new TypeToken<ListAggregationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getValuationForFundAsync(String scope, String code, String navTypeCode, FundValuationRequest fundValuationRequest, final ApiCallback<ListAggregationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getValuationForFundValidateBeforeCall(scope, code, navTypeCode, fundValuationRequest, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<ListAggregationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call getValuationForFundAsync(String scope, String code, String navTypeCode, FundValuationRequest fundValuationRequest, final ApiCallback<ListAggregationResponse> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = getValuationForFundValidateBeforeCall(scope, code, navTypeCode, fundValuationRequest, _callback, opts);
        Type localVarReturnType = new TypeToken<ListAggregationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetValuationForFundRequest {
        private final String scope;
        private final String code;
        private String navTypeCode;
        private FundValuationRequest fundValuationRequest;

        private APIgetValuationForFundRequest(String scope, String code) {
            this.scope = scope;
            this.code = code;
        }

        /**
         * Set navTypeCode
         * @param navTypeCode When provided runs against the specified NAV Type, otherwise the Primary NAV Type will be used. (optional)
         * @return APIgetValuationForFundRequest
         */
        public APIgetValuationForFundRequest navTypeCode(String navTypeCode) {
            this.navTypeCode = navTypeCode;
            return this;
        }

        /**
         * Set fundValuationRequest
         * @param fundValuationRequest The request specifying the dates (or DiaryEntry) on which to calculate a set of valuation metrics (optional)
         * @return APIgetValuationForFundRequest
         */
        public APIgetValuationForFundRequest fundValuationRequest(FundValuationRequest fundValuationRequest) {
            this.fundValuationRequest = fundValuationRequest;
            return this;
        }

        /**
         * Build call for getValuationForFund
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getValuationForFundCall(scope, code, navTypeCode, fundValuationRequest, _callback);
        }

        /**
         * Execute getValuationForFund request
         * @return ListAggregationResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ListAggregationResponse execute() throws ApiException {
            ApiResponse<ListAggregationResponse> localVarResp = getValuationForFundWithHttpInfo(scope, code, navTypeCode, fundValuationRequest);
            return localVarResp.getData();
        }

        /**
         * Execute getValuationForFund request. Use any specified configuration options to override any other configuration for this request only.
         * @return ListAggregationResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ListAggregationResponse execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<ListAggregationResponse> localVarResp = getValuationForFundWithHttpInfo(scope, code, navTypeCode, fundValuationRequest, opts);
            return localVarResp.getData();
        }

        /**
         * Execute getValuationForFund request with HTTP info returned
         * @return ApiResponse&lt;ListAggregationResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ListAggregationResponse> executeWithHttpInfo() throws ApiException {
            return getValuationForFundWithHttpInfo(scope, code, navTypeCode, fundValuationRequest);
        }

        /**
         * Execute getValuationForFund request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;ListAggregationResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ListAggregationResponse> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return getValuationForFundWithHttpInfo(scope, code, navTypeCode, fundValuationRequest, opts);
        }

        /**
         * Execute getValuationForFund request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ListAggregationResponse> _callback) throws ApiException {
            return getValuationForFundAsync(scope, code, navTypeCode, fundValuationRequest, _callback);
        }

        /**
         * Execute getValuationForFund request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ListAggregationResponse> _callback, ConfigurationOptions opts) throws ApiException {
            return getValuationForFundAsync(scope, code, navTypeCode, fundValuationRequest, _callback, opts);
        }
    }

    /**
     * [EXPERIMENTAL] GetValuationForFund: Perform valuation for a Fund
     * Perform valuation on a specified Fund.
     * @param scope The scope of the Fund (required)
     * @param code The code of the Fund (required)
     * @return APIgetValuationForFundRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIgetValuationForFundRequest getValuationForFund(String scope, String code) {
        return new APIgetValuationForFundRequest(scope, code);
    }
    private okhttp3.Call getValuationPointDataCall(String scope, String code, ValuationPointDataQueryParameters valuationPointDataQueryParameters, OffsetDateTime asAt, String navTypeCode, final ApiCallback _callback) throws ApiException {
        return getValuationPointDataCall(scope, code, valuationPointDataQueryParameters, asAt, navTypeCode,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call getValuationPointDataCall(String scope, String code, ValuationPointDataQueryParameters valuationPointDataQueryParameters, OffsetDateTime asAt, String navTypeCode, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = valuationPointDataQueryParameters;

        // create path and map variables
        String localVarPath = "/api/funds/{scope}/{code}/valuationpoints/$query"
            .replace("{" + "scope" + "}", localVarApiClient.escapeString(scope.toString()))
            .replace("{" + "code" + "}", localVarApiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (asAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asAt", asAt));
        }

        if (navTypeCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("navTypeCode", navTypeCode));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getValuationPointDataValidateBeforeCall(String scope, String code, ValuationPointDataQueryParameters valuationPointDataQueryParameters, OffsetDateTime asAt, String navTypeCode, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling getValuationPointData(Async)");
        }

        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling getValuationPointData(Async)");
        }

        // verify the required parameter 'valuationPointDataQueryParameters' is set
        if (valuationPointDataQueryParameters == null) {
            throw new ApiException("Missing the required parameter 'valuationPointDataQueryParameters' when calling getValuationPointData(Async)");
        }

        return getValuationPointDataCall(scope, code, valuationPointDataQueryParameters, asAt, navTypeCode, _callback, opts);

    }


    private ApiResponse<ValuationPointDataResponse> getValuationPointDataWithHttpInfo(String scope, String code, ValuationPointDataQueryParameters valuationPointDataQueryParameters, OffsetDateTime asAt, String navTypeCode) throws ApiException {
        okhttp3.Call localVarCall = getValuationPointDataValidateBeforeCall(scope, code, valuationPointDataQueryParameters, asAt, navTypeCode, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<ValuationPointDataResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<ValuationPointDataResponse> getValuationPointDataWithHttpInfo(String scope, String code, ValuationPointDataQueryParameters valuationPointDataQueryParameters, OffsetDateTime asAt, String navTypeCode, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = getValuationPointDataValidateBeforeCall(scope, code, valuationPointDataQueryParameters, asAt, navTypeCode, null, opts);
        Type localVarReturnType = new TypeToken<ValuationPointDataResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getValuationPointDataAsync(String scope, String code, ValuationPointDataQueryParameters valuationPointDataQueryParameters, OffsetDateTime asAt, String navTypeCode, final ApiCallback<ValuationPointDataResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getValuationPointDataValidateBeforeCall(scope, code, valuationPointDataQueryParameters, asAt, navTypeCode, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<ValuationPointDataResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call getValuationPointDataAsync(String scope, String code, ValuationPointDataQueryParameters valuationPointDataQueryParameters, OffsetDateTime asAt, String navTypeCode, final ApiCallback<ValuationPointDataResponse> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = getValuationPointDataValidateBeforeCall(scope, code, valuationPointDataQueryParameters, asAt, navTypeCode, _callback, opts);
        Type localVarReturnType = new TypeToken<ValuationPointDataResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetValuationPointDataRequest {
        private final String scope;
        private final String code;
        private final ValuationPointDataQueryParameters valuationPointDataQueryParameters;
        private OffsetDateTime asAt;
        private String navTypeCode;

        private APIgetValuationPointDataRequest(String scope, String code, ValuationPointDataQueryParameters valuationPointDataQueryParameters) {
            this.scope = scope;
            this.code = code;
            this.valuationPointDataQueryParameters = valuationPointDataQueryParameters;
        }

        /**
         * Set asAt
         * @param asAt The asAt datetime at which to retrieve the Fund definition. Defaults to returning the latest version of the Fund definition if not specified. (optional)
         * @return APIgetValuationPointDataRequest
         */
        public APIgetValuationPointDataRequest asAt(OffsetDateTime asAt) {
            this.asAt = asAt;
            return this;
        }

        /**
         * Set navTypeCode
         * @param navTypeCode When provided runs against the specified NAV Type, otherwise the Primary NAV Type will be used. (optional)
         * @return APIgetValuationPointDataRequest
         */
        public APIgetValuationPointDataRequest navTypeCode(String navTypeCode) {
            this.navTypeCode = navTypeCode;
            return this;
        }

        /**
         * Build call for getValuationPointData
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The specified Valuation Point for the Fund. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getValuationPointDataCall(scope, code, valuationPointDataQueryParameters, asAt, navTypeCode, _callback);
        }

        /**
         * Execute getValuationPointData request
         * @return ValuationPointDataResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The specified Valuation Point for the Fund. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ValuationPointDataResponse execute() throws ApiException {
            ApiResponse<ValuationPointDataResponse> localVarResp = getValuationPointDataWithHttpInfo(scope, code, valuationPointDataQueryParameters, asAt, navTypeCode);
            return localVarResp.getData();
        }

        /**
         * Execute getValuationPointData request. Use any specified configuration options to override any other configuration for this request only.
         * @return ValuationPointDataResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The specified Valuation Point for the Fund. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ValuationPointDataResponse execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<ValuationPointDataResponse> localVarResp = getValuationPointDataWithHttpInfo(scope, code, valuationPointDataQueryParameters, asAt, navTypeCode, opts);
            return localVarResp.getData();
        }

        /**
         * Execute getValuationPointData request with HTTP info returned
         * @return ApiResponse&lt;ValuationPointDataResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The specified Valuation Point for the Fund. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ValuationPointDataResponse> executeWithHttpInfo() throws ApiException {
            return getValuationPointDataWithHttpInfo(scope, code, valuationPointDataQueryParameters, asAt, navTypeCode);
        }

        /**
         * Execute getValuationPointData request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;ValuationPointDataResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The specified Valuation Point for the Fund. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ValuationPointDataResponse> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return getValuationPointDataWithHttpInfo(scope, code, valuationPointDataQueryParameters, asAt, navTypeCode, opts);
        }

        /**
         * Execute getValuationPointData request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The specified Valuation Point for the Fund. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ValuationPointDataResponse> _callback) throws ApiException {
            return getValuationPointDataAsync(scope, code, valuationPointDataQueryParameters, asAt, navTypeCode, _callback);
        }

        /**
         * Execute getValuationPointData request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The specified Valuation Point for the Fund. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ValuationPointDataResponse> _callback, ConfigurationOptions opts) throws ApiException {
            return getValuationPointDataAsync(scope, code, valuationPointDataQueryParameters, asAt, navTypeCode, _callback, opts);
        }
    }

    /**
     * [EXPERIMENTAL] GetValuationPointData: Get Valuation Point Data for a Fund.
     * Retrieves the Valuation Point data for a date or specified Diary Entry Id.  The endpoint will internally extract all &#39;Assets&#39; and &#39;Liabilities&#39; from the related ABOR&#39;s Trial balance to produce a GAV.  Start date will be assumed from the last &#39;official&#39; DiaryEntry and EndDate will be as provided.
     * @param scope The scope of the Fund. (required)
     * @param code The code of the Fund. Together with the scope this uniquely identifies the Fund. (required)
     * @param valuationPointDataQueryParameters The arguments to use for querying the Valuation Point data (required)
     * @return APIgetValuationPointDataRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The specified Valuation Point for the Fund. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIgetValuationPointDataRequest getValuationPointData(String scope, String code, ValuationPointDataQueryParameters valuationPointDataQueryParameters) {
        return new APIgetValuationPointDataRequest(scope, code, valuationPointDataQueryParameters);
    }
    private okhttp3.Call getValuationPointJournalEntryLinesCall(String scope, String code, ValuationPointDataQueryParameters valuationPointDataQueryParameters, String generalLedgerProfileCode, OffsetDateTime asAt, String filter, Integer limit, String page, List<String> propertyKeys, String navTypeCode, final ApiCallback _callback) throws ApiException {
        return getValuationPointJournalEntryLinesCall(scope, code, valuationPointDataQueryParameters, generalLedgerProfileCode, asAt, filter, limit, page, propertyKeys, navTypeCode,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call getValuationPointJournalEntryLinesCall(String scope, String code, ValuationPointDataQueryParameters valuationPointDataQueryParameters, String generalLedgerProfileCode, OffsetDateTime asAt, String filter, Integer limit, String page, List<String> propertyKeys, String navTypeCode, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = valuationPointDataQueryParameters;

        // create path and map variables
        String localVarPath = "/api/funds/{scope}/{code}/valuationpoints/journalentrylines/$query"
            .replace("{" + "scope" + "}", localVarApiClient.escapeString(scope.toString()))
            .replace("{" + "code" + "}", localVarApiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (generalLedgerProfileCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("generalLedgerProfileCode", generalLedgerProfileCode));
        }

        if (asAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asAt", asAt));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (propertyKeys != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "propertyKeys", propertyKeys));
        }

        if (navTypeCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("navTypeCode", navTypeCode));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getValuationPointJournalEntryLinesValidateBeforeCall(String scope, String code, ValuationPointDataQueryParameters valuationPointDataQueryParameters, String generalLedgerProfileCode, OffsetDateTime asAt, String filter, Integer limit, String page, List<String> propertyKeys, String navTypeCode, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling getValuationPointJournalEntryLines(Async)");
        }

        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling getValuationPointJournalEntryLines(Async)");
        }

        // verify the required parameter 'valuationPointDataQueryParameters' is set
        if (valuationPointDataQueryParameters == null) {
            throw new ApiException("Missing the required parameter 'valuationPointDataQueryParameters' when calling getValuationPointJournalEntryLines(Async)");
        }

        return getValuationPointJournalEntryLinesCall(scope, code, valuationPointDataQueryParameters, generalLedgerProfileCode, asAt, filter, limit, page, propertyKeys, navTypeCode, _callback, opts);

    }


    private ApiResponse<ValuationPointResourceListOfFundJournalEntryLine> getValuationPointJournalEntryLinesWithHttpInfo(String scope, String code, ValuationPointDataQueryParameters valuationPointDataQueryParameters, String generalLedgerProfileCode, OffsetDateTime asAt, String filter, Integer limit, String page, List<String> propertyKeys, String navTypeCode) throws ApiException {
        okhttp3.Call localVarCall = getValuationPointJournalEntryLinesValidateBeforeCall(scope, code, valuationPointDataQueryParameters, generalLedgerProfileCode, asAt, filter, limit, page, propertyKeys, navTypeCode, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<ValuationPointResourceListOfFundJournalEntryLine>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<ValuationPointResourceListOfFundJournalEntryLine> getValuationPointJournalEntryLinesWithHttpInfo(String scope, String code, ValuationPointDataQueryParameters valuationPointDataQueryParameters, String generalLedgerProfileCode, OffsetDateTime asAt, String filter, Integer limit, String page, List<String> propertyKeys, String navTypeCode, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = getValuationPointJournalEntryLinesValidateBeforeCall(scope, code, valuationPointDataQueryParameters, generalLedgerProfileCode, asAt, filter, limit, page, propertyKeys, navTypeCode, null, opts);
        Type localVarReturnType = new TypeToken<ValuationPointResourceListOfFundJournalEntryLine>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getValuationPointJournalEntryLinesAsync(String scope, String code, ValuationPointDataQueryParameters valuationPointDataQueryParameters, String generalLedgerProfileCode, OffsetDateTime asAt, String filter, Integer limit, String page, List<String> propertyKeys, String navTypeCode, final ApiCallback<ValuationPointResourceListOfFundJournalEntryLine> _callback) throws ApiException {

        okhttp3.Call localVarCall = getValuationPointJournalEntryLinesValidateBeforeCall(scope, code, valuationPointDataQueryParameters, generalLedgerProfileCode, asAt, filter, limit, page, propertyKeys, navTypeCode, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<ValuationPointResourceListOfFundJournalEntryLine>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call getValuationPointJournalEntryLinesAsync(String scope, String code, ValuationPointDataQueryParameters valuationPointDataQueryParameters, String generalLedgerProfileCode, OffsetDateTime asAt, String filter, Integer limit, String page, List<String> propertyKeys, String navTypeCode, final ApiCallback<ValuationPointResourceListOfFundJournalEntryLine> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = getValuationPointJournalEntryLinesValidateBeforeCall(scope, code, valuationPointDataQueryParameters, generalLedgerProfileCode, asAt, filter, limit, page, propertyKeys, navTypeCode, _callback, opts);
        Type localVarReturnType = new TypeToken<ValuationPointResourceListOfFundJournalEntryLine>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetValuationPointJournalEntryLinesRequest {
        private final String scope;
        private final String code;
        private final ValuationPointDataQueryParameters valuationPointDataQueryParameters;
        private String generalLedgerProfileCode;
        private OffsetDateTime asAt;
        private String filter;
        private Integer limit;
        private String page;
        private List<String> propertyKeys;
        private String navTypeCode;

        private APIgetValuationPointJournalEntryLinesRequest(String scope, String code, ValuationPointDataQueryParameters valuationPointDataQueryParameters) {
            this.scope = scope;
            this.code = code;
            this.valuationPointDataQueryParameters = valuationPointDataQueryParameters;
        }

        /**
         * Set generalLedgerProfileCode
         * @param generalLedgerProfileCode The optional code of a general ledger profile used to decorate journal entry lines with levels. (optional)
         * @return APIgetValuationPointJournalEntryLinesRequest
         */
        public APIgetValuationPointJournalEntryLinesRequest generalLedgerProfileCode(String generalLedgerProfileCode) {
            this.generalLedgerProfileCode = generalLedgerProfileCode;
            return this;
        }

        /**
         * Set asAt
         * @param asAt The asAt datetime at which to retrieve Journal Entry lines. Defaults to returning the latest version   of each transaction if not specified. (optional)
         * @return APIgetValuationPointJournalEntryLinesRequest
         */
        public APIgetValuationPointJournalEntryLinesRequest asAt(OffsetDateTime asAt) {
            this.asAt = asAt;
            return this;
        }

        /**
         * Set filter
         * @param filter Expression to filter the result set. (optional)
         * @return APIgetValuationPointJournalEntryLinesRequest
         */
        public APIgetValuationPointJournalEntryLinesRequest filter(String filter) {
            this.filter = filter;
            return this;
        }

        /**
         * Set limit
         * @param limit When paginating, limit the number of returned results to this many. Defaults to 100 if not specified. (optional)
         * @return APIgetValuationPointJournalEntryLinesRequest
         */
        public APIgetValuationPointJournalEntryLinesRequest limit(Integer limit) {
            this.limit = limit;
            return this;
        }

        /**
         * Set page
         * @param page The pagination token to use to continue listing Journal Entry lines from a previous call to GetValuationPointJournalEntryLines. (optional)
         * @return APIgetValuationPointJournalEntryLinesRequest
         */
        public APIgetValuationPointJournalEntryLinesRequest page(String page) {
            this.page = page;
            return this;
        }

        /**
         * Set propertyKeys
         * @param propertyKeys A list of property keys from the &#39;Instrument&#39;, &#39;Transaction&#39;, &#39;Portfolio&#39;, &#39;Account&#39;, &#39;LegalEntity&#39; or &#39;CustodianAccount&#39;   domain to decorate onto the journal entry lines. (optional)
         * @return APIgetValuationPointJournalEntryLinesRequest
         */
        public APIgetValuationPointJournalEntryLinesRequest propertyKeys(List<String> propertyKeys) {
            this.propertyKeys = propertyKeys;
            return this;
        }

        /**
         * Set navTypeCode
         * @param navTypeCode May be provided to view a specific NAV type. When not provided, Primary NAV will be used. (optional)
         * @return APIgetValuationPointJournalEntryLinesRequest
         */
        public APIgetValuationPointJournalEntryLinesRequest navTypeCode(String navTypeCode) {
            this.navTypeCode = navTypeCode;
            return this;
        }

        /**
         * Build call for getValuationPointJournalEntryLines
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested Journal Entry lines for the specified Valuation Point for a Fund. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getValuationPointJournalEntryLinesCall(scope, code, valuationPointDataQueryParameters, generalLedgerProfileCode, asAt, filter, limit, page, propertyKeys, navTypeCode, _callback);
        }

        /**
         * Execute getValuationPointJournalEntryLines request
         * @return ValuationPointResourceListOfFundJournalEntryLine
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested Journal Entry lines for the specified Valuation Point for a Fund. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ValuationPointResourceListOfFundJournalEntryLine execute() throws ApiException {
            ApiResponse<ValuationPointResourceListOfFundJournalEntryLine> localVarResp = getValuationPointJournalEntryLinesWithHttpInfo(scope, code, valuationPointDataQueryParameters, generalLedgerProfileCode, asAt, filter, limit, page, propertyKeys, navTypeCode);
            return localVarResp.getData();
        }

        /**
         * Execute getValuationPointJournalEntryLines request. Use any specified configuration options to override any other configuration for this request only.
         * @return ValuationPointResourceListOfFundJournalEntryLine
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested Journal Entry lines for the specified Valuation Point for a Fund. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ValuationPointResourceListOfFundJournalEntryLine execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<ValuationPointResourceListOfFundJournalEntryLine> localVarResp = getValuationPointJournalEntryLinesWithHttpInfo(scope, code, valuationPointDataQueryParameters, generalLedgerProfileCode, asAt, filter, limit, page, propertyKeys, navTypeCode, opts);
            return localVarResp.getData();
        }

        /**
         * Execute getValuationPointJournalEntryLines request with HTTP info returned
         * @return ApiResponse&lt;ValuationPointResourceListOfFundJournalEntryLine&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested Journal Entry lines for the specified Valuation Point for a Fund. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ValuationPointResourceListOfFundJournalEntryLine> executeWithHttpInfo() throws ApiException {
            return getValuationPointJournalEntryLinesWithHttpInfo(scope, code, valuationPointDataQueryParameters, generalLedgerProfileCode, asAt, filter, limit, page, propertyKeys, navTypeCode);
        }

        /**
         * Execute getValuationPointJournalEntryLines request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;ValuationPointResourceListOfFundJournalEntryLine&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested Journal Entry lines for the specified Valuation Point for a Fund. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ValuationPointResourceListOfFundJournalEntryLine> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return getValuationPointJournalEntryLinesWithHttpInfo(scope, code, valuationPointDataQueryParameters, generalLedgerProfileCode, asAt, filter, limit, page, propertyKeys, navTypeCode, opts);
        }

        /**
         * Execute getValuationPointJournalEntryLines request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested Journal Entry lines for the specified Valuation Point for a Fund. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ValuationPointResourceListOfFundJournalEntryLine> _callback) throws ApiException {
            return getValuationPointJournalEntryLinesAsync(scope, code, valuationPointDataQueryParameters, generalLedgerProfileCode, asAt, filter, limit, page, propertyKeys, navTypeCode, _callback);
        }

        /**
         * Execute getValuationPointJournalEntryLines request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested Journal Entry lines for the specified Valuation Point for a Fund. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ValuationPointResourceListOfFundJournalEntryLine> _callback, ConfigurationOptions opts) throws ApiException {
            return getValuationPointJournalEntryLinesAsync(scope, code, valuationPointDataQueryParameters, generalLedgerProfileCode, asAt, filter, limit, page, propertyKeys, navTypeCode, _callback, opts);
        }
    }

    /**
     * [EXPERIMENTAL] GetValuationPointJournalEntryLines: Get the Journal Entry lines for the given Fund.
     * Gets the Journal Entry lines for the given Valuation Point for a Fund     The Journal Entry lines have been generated from transactions, translated via posting rules and used in the valuation point
     * @param scope The scope of the Fund. (required)
     * @param code The code of the Fund. Together with the scope is creating the unique identifier for the given Fund. (required)
     * @param valuationPointDataQueryParameters The arguments to use for querying the Journal Entry lines. (required)
     * @return APIgetValuationPointJournalEntryLinesRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested Journal Entry lines for the specified Valuation Point for a Fund. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIgetValuationPointJournalEntryLinesRequest getValuationPointJournalEntryLines(String scope, String code, ValuationPointDataQueryParameters valuationPointDataQueryParameters) {
        return new APIgetValuationPointJournalEntryLinesRequest(scope, code, valuationPointDataQueryParameters);
    }
    private okhttp3.Call getValuationPointPnlSummaryCall(String scope, String code, ValuationPointDataQueryParameters valuationPointDataQueryParameters, String generalLedgerProfileCode, OffsetDateTime asAt, String filter, Integer limit, String page, String navTypeCode, final ApiCallback _callback) throws ApiException {
        return getValuationPointPnlSummaryCall(scope, code, valuationPointDataQueryParameters, generalLedgerProfileCode, asAt, filter, limit, page, navTypeCode,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call getValuationPointPnlSummaryCall(String scope, String code, ValuationPointDataQueryParameters valuationPointDataQueryParameters, String generalLedgerProfileCode, OffsetDateTime asAt, String filter, Integer limit, String page, String navTypeCode, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = valuationPointDataQueryParameters;

        // create path and map variables
        String localVarPath = "/api/funds/{scope}/{code}/valuationpoints/pnlsummary/$query"
            .replace("{" + "scope" + "}", localVarApiClient.escapeString(scope.toString()))
            .replace("{" + "code" + "}", localVarApiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (generalLedgerProfileCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("generalLedgerProfileCode", generalLedgerProfileCode));
        }

        if (asAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asAt", asAt));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (navTypeCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("navTypeCode", navTypeCode));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getValuationPointPnlSummaryValidateBeforeCall(String scope, String code, ValuationPointDataQueryParameters valuationPointDataQueryParameters, String generalLedgerProfileCode, OffsetDateTime asAt, String filter, Integer limit, String page, String navTypeCode, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling getValuationPointPnlSummary(Async)");
        }

        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling getValuationPointPnlSummary(Async)");
        }

        // verify the required parameter 'valuationPointDataQueryParameters' is set
        if (valuationPointDataQueryParameters == null) {
            throw new ApiException("Missing the required parameter 'valuationPointDataQueryParameters' when calling getValuationPointPnlSummary(Async)");
        }

        return getValuationPointPnlSummaryCall(scope, code, valuationPointDataQueryParameters, generalLedgerProfileCode, asAt, filter, limit, page, navTypeCode, _callback, opts);

    }


    private ApiResponse<ValuationPointResourceListOfPnlJournalEntryLine> getValuationPointPnlSummaryWithHttpInfo(String scope, String code, ValuationPointDataQueryParameters valuationPointDataQueryParameters, String generalLedgerProfileCode, OffsetDateTime asAt, String filter, Integer limit, String page, String navTypeCode) throws ApiException {
        okhttp3.Call localVarCall = getValuationPointPnlSummaryValidateBeforeCall(scope, code, valuationPointDataQueryParameters, generalLedgerProfileCode, asAt, filter, limit, page, navTypeCode, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<ValuationPointResourceListOfPnlJournalEntryLine>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<ValuationPointResourceListOfPnlJournalEntryLine> getValuationPointPnlSummaryWithHttpInfo(String scope, String code, ValuationPointDataQueryParameters valuationPointDataQueryParameters, String generalLedgerProfileCode, OffsetDateTime asAt, String filter, Integer limit, String page, String navTypeCode, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = getValuationPointPnlSummaryValidateBeforeCall(scope, code, valuationPointDataQueryParameters, generalLedgerProfileCode, asAt, filter, limit, page, navTypeCode, null, opts);
        Type localVarReturnType = new TypeToken<ValuationPointResourceListOfPnlJournalEntryLine>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getValuationPointPnlSummaryAsync(String scope, String code, ValuationPointDataQueryParameters valuationPointDataQueryParameters, String generalLedgerProfileCode, OffsetDateTime asAt, String filter, Integer limit, String page, String navTypeCode, final ApiCallback<ValuationPointResourceListOfPnlJournalEntryLine> _callback) throws ApiException {

        okhttp3.Call localVarCall = getValuationPointPnlSummaryValidateBeforeCall(scope, code, valuationPointDataQueryParameters, generalLedgerProfileCode, asAt, filter, limit, page, navTypeCode, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<ValuationPointResourceListOfPnlJournalEntryLine>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call getValuationPointPnlSummaryAsync(String scope, String code, ValuationPointDataQueryParameters valuationPointDataQueryParameters, String generalLedgerProfileCode, OffsetDateTime asAt, String filter, Integer limit, String page, String navTypeCode, final ApiCallback<ValuationPointResourceListOfPnlJournalEntryLine> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = getValuationPointPnlSummaryValidateBeforeCall(scope, code, valuationPointDataQueryParameters, generalLedgerProfileCode, asAt, filter, limit, page, navTypeCode, _callback, opts);
        Type localVarReturnType = new TypeToken<ValuationPointResourceListOfPnlJournalEntryLine>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetValuationPointPnlSummaryRequest {
        private final String scope;
        private final String code;
        private final ValuationPointDataQueryParameters valuationPointDataQueryParameters;
        private String generalLedgerProfileCode;
        private OffsetDateTime asAt;
        private String filter;
        private Integer limit;
        private String page;
        private String navTypeCode;

        private APIgetValuationPointPnlSummaryRequest(String scope, String code, ValuationPointDataQueryParameters valuationPointDataQueryParameters) {
            this.scope = scope;
            this.code = code;
            this.valuationPointDataQueryParameters = valuationPointDataQueryParameters;
        }

        /**
         * Set generalLedgerProfileCode
         * @param generalLedgerProfileCode The optional code of a general ledger profile used to decorate journal entry lines with levels. (optional)
         * @return APIgetValuationPointPnlSummaryRequest
         */
        public APIgetValuationPointPnlSummaryRequest generalLedgerProfileCode(String generalLedgerProfileCode) {
            this.generalLedgerProfileCode = generalLedgerProfileCode;
            return this;
        }

        /**
         * Set asAt
         * @param asAt The asAt datetime at which to retrieve PnL summary. Defaults to returning the latest version   of each transaction if not specified. (optional)
         * @return APIgetValuationPointPnlSummaryRequest
         */
        public APIgetValuationPointPnlSummaryRequest asAt(OffsetDateTime asAt) {
            this.asAt = asAt;
            return this;
        }

        /**
         * Set filter
         * @param filter \&quot;Expression to filter the result set.\&quot; (optional)
         * @return APIgetValuationPointPnlSummaryRequest
         */
        public APIgetValuationPointPnlSummaryRequest filter(String filter) {
            this.filter = filter;
            return this;
        }

        /**
         * Set limit
         * @param limit When paginating, limit the number of returned results to this many. Defaults to 100 if not specified. (optional)
         * @return APIgetValuationPointPnlSummaryRequest
         */
        public APIgetValuationPointPnlSummaryRequest limit(Integer limit) {
            this.limit = limit;
            return this;
        }

        /**
         * Set page
         * @param page The pagination token to use to continue listing Trial balance from a previous call to Trial balance. (optional)
         * @return APIgetValuationPointPnlSummaryRequest
         */
        public APIgetValuationPointPnlSummaryRequest page(String page) {
            this.page = page;
            return this;
        }

        /**
         * Set navTypeCode
         * @param navTypeCode May be provided to view a specific NAV type. When not provided, Primary NAV will be used. (optional)
         * @return APIgetValuationPointPnlSummaryRequest
         */
        public APIgetValuationPointPnlSummaryRequest navTypeCode(String navTypeCode) {
            this.navTypeCode = navTypeCode;
            return this;
        }

        /**
         * Build call for getValuationPointPnlSummary
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested PnL summary for the specified Fund. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getValuationPointPnlSummaryCall(scope, code, valuationPointDataQueryParameters, generalLedgerProfileCode, asAt, filter, limit, page, navTypeCode, _callback);
        }

        /**
         * Execute getValuationPointPnlSummary request
         * @return ValuationPointResourceListOfPnlJournalEntryLine
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested PnL summary for the specified Fund. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ValuationPointResourceListOfPnlJournalEntryLine execute() throws ApiException {
            ApiResponse<ValuationPointResourceListOfPnlJournalEntryLine> localVarResp = getValuationPointPnlSummaryWithHttpInfo(scope, code, valuationPointDataQueryParameters, generalLedgerProfileCode, asAt, filter, limit, page, navTypeCode);
            return localVarResp.getData();
        }

        /**
         * Execute getValuationPointPnlSummary request. Use any specified configuration options to override any other configuration for this request only.
         * @return ValuationPointResourceListOfPnlJournalEntryLine
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested PnL summary for the specified Fund. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ValuationPointResourceListOfPnlJournalEntryLine execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<ValuationPointResourceListOfPnlJournalEntryLine> localVarResp = getValuationPointPnlSummaryWithHttpInfo(scope, code, valuationPointDataQueryParameters, generalLedgerProfileCode, asAt, filter, limit, page, navTypeCode, opts);
            return localVarResp.getData();
        }

        /**
         * Execute getValuationPointPnlSummary request with HTTP info returned
         * @return ApiResponse&lt;ValuationPointResourceListOfPnlJournalEntryLine&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested PnL summary for the specified Fund. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ValuationPointResourceListOfPnlJournalEntryLine> executeWithHttpInfo() throws ApiException {
            return getValuationPointPnlSummaryWithHttpInfo(scope, code, valuationPointDataQueryParameters, generalLedgerProfileCode, asAt, filter, limit, page, navTypeCode);
        }

        /**
         * Execute getValuationPointPnlSummary request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;ValuationPointResourceListOfPnlJournalEntryLine&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested PnL summary for the specified Fund. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ValuationPointResourceListOfPnlJournalEntryLine> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return getValuationPointPnlSummaryWithHttpInfo(scope, code, valuationPointDataQueryParameters, generalLedgerProfileCode, asAt, filter, limit, page, navTypeCode, opts);
        }

        /**
         * Execute getValuationPointPnlSummary request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested PnL summary for the specified Fund. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ValuationPointResourceListOfPnlJournalEntryLine> _callback) throws ApiException {
            return getValuationPointPnlSummaryAsync(scope, code, valuationPointDataQueryParameters, generalLedgerProfileCode, asAt, filter, limit, page, navTypeCode, _callback);
        }

        /**
         * Execute getValuationPointPnlSummary request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested PnL summary for the specified Fund. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ValuationPointResourceListOfPnlJournalEntryLine> _callback, ConfigurationOptions opts) throws ApiException {
            return getValuationPointPnlSummaryAsync(scope, code, valuationPointDataQueryParameters, generalLedgerProfileCode, asAt, filter, limit, page, navTypeCode, _callback, opts);
        }
    }

    /**
     * [EXPERIMENTAL] GetValuationPointPnlSummary: Get a PnL summary for the given Valuation Point in the Fund.
     * Gets the PnL Summary lines from the journal entry lines produced when calculating the valuation point.
     * @param scope The scope of the Fund. (required)
     * @param code The code of the Fund. Together with the scope is the unique identifier for the given Fund. (required)
     * @param valuationPointDataQueryParameters The query parameters used in running the generation of the PnL summary (required)
     * @return APIgetValuationPointPnlSummaryRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested PnL summary for the specified Fund. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIgetValuationPointPnlSummaryRequest getValuationPointPnlSummary(String scope, String code, ValuationPointDataQueryParameters valuationPointDataQueryParameters) {
        return new APIgetValuationPointPnlSummaryRequest(scope, code, valuationPointDataQueryParameters);
    }
    private okhttp3.Call getValuationPointTransactionsCall(String scope, String code, ValuationPointDataQueryParameters valuationPointDataQueryParameters, OffsetDateTime asAt, String filter, Integer limit, String page, List<String> propertyKeys, String navTypeCode, final ApiCallback _callback) throws ApiException {
        return getValuationPointTransactionsCall(scope, code, valuationPointDataQueryParameters, asAt, filter, limit, page, propertyKeys, navTypeCode,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call getValuationPointTransactionsCall(String scope, String code, ValuationPointDataQueryParameters valuationPointDataQueryParameters, OffsetDateTime asAt, String filter, Integer limit, String page, List<String> propertyKeys, String navTypeCode, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = valuationPointDataQueryParameters;

        // create path and map variables
        String localVarPath = "/api/funds/{scope}/{code}/valuationpoints/transactions/$query"
            .replace("{" + "scope" + "}", localVarApiClient.escapeString(scope.toString()))
            .replace("{" + "code" + "}", localVarApiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (asAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asAt", asAt));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (propertyKeys != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "propertyKeys", propertyKeys));
        }

        if (navTypeCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("navTypeCode", navTypeCode));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getValuationPointTransactionsValidateBeforeCall(String scope, String code, ValuationPointDataQueryParameters valuationPointDataQueryParameters, OffsetDateTime asAt, String filter, Integer limit, String page, List<String> propertyKeys, String navTypeCode, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling getValuationPointTransactions(Async)");
        }

        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling getValuationPointTransactions(Async)");
        }

        // verify the required parameter 'valuationPointDataQueryParameters' is set
        if (valuationPointDataQueryParameters == null) {
            throw new ApiException("Missing the required parameter 'valuationPointDataQueryParameters' when calling getValuationPointTransactions(Async)");
        }

        return getValuationPointTransactionsCall(scope, code, valuationPointDataQueryParameters, asAt, filter, limit, page, propertyKeys, navTypeCode, _callback, opts);

    }


    private ApiResponse<ValuationPointResourceListOfAccountedTransaction> getValuationPointTransactionsWithHttpInfo(String scope, String code, ValuationPointDataQueryParameters valuationPointDataQueryParameters, OffsetDateTime asAt, String filter, Integer limit, String page, List<String> propertyKeys, String navTypeCode) throws ApiException {
        okhttp3.Call localVarCall = getValuationPointTransactionsValidateBeforeCall(scope, code, valuationPointDataQueryParameters, asAt, filter, limit, page, propertyKeys, navTypeCode, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<ValuationPointResourceListOfAccountedTransaction>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<ValuationPointResourceListOfAccountedTransaction> getValuationPointTransactionsWithHttpInfo(String scope, String code, ValuationPointDataQueryParameters valuationPointDataQueryParameters, OffsetDateTime asAt, String filter, Integer limit, String page, List<String> propertyKeys, String navTypeCode, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = getValuationPointTransactionsValidateBeforeCall(scope, code, valuationPointDataQueryParameters, asAt, filter, limit, page, propertyKeys, navTypeCode, null, opts);
        Type localVarReturnType = new TypeToken<ValuationPointResourceListOfAccountedTransaction>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getValuationPointTransactionsAsync(String scope, String code, ValuationPointDataQueryParameters valuationPointDataQueryParameters, OffsetDateTime asAt, String filter, Integer limit, String page, List<String> propertyKeys, String navTypeCode, final ApiCallback<ValuationPointResourceListOfAccountedTransaction> _callback) throws ApiException {

        okhttp3.Call localVarCall = getValuationPointTransactionsValidateBeforeCall(scope, code, valuationPointDataQueryParameters, asAt, filter, limit, page, propertyKeys, navTypeCode, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<ValuationPointResourceListOfAccountedTransaction>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call getValuationPointTransactionsAsync(String scope, String code, ValuationPointDataQueryParameters valuationPointDataQueryParameters, OffsetDateTime asAt, String filter, Integer limit, String page, List<String> propertyKeys, String navTypeCode, final ApiCallback<ValuationPointResourceListOfAccountedTransaction> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = getValuationPointTransactionsValidateBeforeCall(scope, code, valuationPointDataQueryParameters, asAt, filter, limit, page, propertyKeys, navTypeCode, _callback, opts);
        Type localVarReturnType = new TypeToken<ValuationPointResourceListOfAccountedTransaction>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetValuationPointTransactionsRequest {
        private final String scope;
        private final String code;
        private final ValuationPointDataQueryParameters valuationPointDataQueryParameters;
        private OffsetDateTime asAt;
        private String filter;
        private Integer limit;
        private String page;
        private List<String> propertyKeys;
        private String navTypeCode;

        private APIgetValuationPointTransactionsRequest(String scope, String code, ValuationPointDataQueryParameters valuationPointDataQueryParameters) {
            this.scope = scope;
            this.code = code;
            this.valuationPointDataQueryParameters = valuationPointDataQueryParameters;
        }

        /**
         * Set asAt
         * @param asAt The asAt datetime at which to retrieve transactions. Defaults to returning the latest version   of each transaction if not specified. (optional)
         * @return APIgetValuationPointTransactionsRequest
         */
        public APIgetValuationPointTransactionsRequest asAt(OffsetDateTime asAt) {
            this.asAt = asAt;
            return this;
        }

        /**
         * Set filter
         * @param filter Expression to filter the result set. (optional)
         * @return APIgetValuationPointTransactionsRequest
         */
        public APIgetValuationPointTransactionsRequest filter(String filter) {
            this.filter = filter;
            return this;
        }

        /**
         * Set limit
         * @param limit When paginating, limit the number of returned results to this many. Defaults to 100 if not specified. (optional)
         * @return APIgetValuationPointTransactionsRequest
         */
        public APIgetValuationPointTransactionsRequest limit(Integer limit) {
            this.limit = limit;
            return this;
        }

        /**
         * Set page
         * @param page The pagination token to use to continue listing transactions from a previous call to GetValuationPointTransactions. (optional)
         * @return APIgetValuationPointTransactionsRequest
         */
        public APIgetValuationPointTransactionsRequest page(String page) {
            this.page = page;
            return this;
        }

        /**
         * Set propertyKeys
         * @param propertyKeys A list of property keys from the &#39;Instrument&#39;, &#39;Transaction&#39;, &#39;Portfolio&#39;, &#39;Account&#39;, &#39;LegalEntity&#39; or &#39;CustodianAccount&#39;   domain to decorate onto the journal entry lines. (optional)
         * @return APIgetValuationPointTransactionsRequest
         */
        public APIgetValuationPointTransactionsRequest propertyKeys(List<String> propertyKeys) {
            this.propertyKeys = propertyKeys;
            return this;
        }

        /**
         * Set navTypeCode
         * @param navTypeCode May be provided to view a specific NAV type. When not provided, Primary NAV will be used. (optional)
         * @return APIgetValuationPointTransactionsRequest
         */
        public APIgetValuationPointTransactionsRequest navTypeCode(String navTypeCode) {
            this.navTypeCode = navTypeCode;
            return this;
        }

        /**
         * Build call for getValuationPointTransactions
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested transactions for the specified Valuation Point for a Fund. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getValuationPointTransactionsCall(scope, code, valuationPointDataQueryParameters, asAt, filter, limit, page, propertyKeys, navTypeCode, _callback);
        }

        /**
         * Execute getValuationPointTransactions request
         * @return ValuationPointResourceListOfAccountedTransaction
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested transactions for the specified Valuation Point for a Fund. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ValuationPointResourceListOfAccountedTransaction execute() throws ApiException {
            ApiResponse<ValuationPointResourceListOfAccountedTransaction> localVarResp = getValuationPointTransactionsWithHttpInfo(scope, code, valuationPointDataQueryParameters, asAt, filter, limit, page, propertyKeys, navTypeCode);
            return localVarResp.getData();
        }

        /**
         * Execute getValuationPointTransactions request. Use any specified configuration options to override any other configuration for this request only.
         * @return ValuationPointResourceListOfAccountedTransaction
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested transactions for the specified Valuation Point for a Fund. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ValuationPointResourceListOfAccountedTransaction execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<ValuationPointResourceListOfAccountedTransaction> localVarResp = getValuationPointTransactionsWithHttpInfo(scope, code, valuationPointDataQueryParameters, asAt, filter, limit, page, propertyKeys, navTypeCode, opts);
            return localVarResp.getData();
        }

        /**
         * Execute getValuationPointTransactions request with HTTP info returned
         * @return ApiResponse&lt;ValuationPointResourceListOfAccountedTransaction&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested transactions for the specified Valuation Point for a Fund. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ValuationPointResourceListOfAccountedTransaction> executeWithHttpInfo() throws ApiException {
            return getValuationPointTransactionsWithHttpInfo(scope, code, valuationPointDataQueryParameters, asAt, filter, limit, page, propertyKeys, navTypeCode);
        }

        /**
         * Execute getValuationPointTransactions request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;ValuationPointResourceListOfAccountedTransaction&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested transactions for the specified Valuation Point for a Fund. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ValuationPointResourceListOfAccountedTransaction> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return getValuationPointTransactionsWithHttpInfo(scope, code, valuationPointDataQueryParameters, asAt, filter, limit, page, propertyKeys, navTypeCode, opts);
        }

        /**
         * Execute getValuationPointTransactions request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested transactions for the specified Valuation Point for a Fund. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ValuationPointResourceListOfAccountedTransaction> _callback) throws ApiException {
            return getValuationPointTransactionsAsync(scope, code, valuationPointDataQueryParameters, asAt, filter, limit, page, propertyKeys, navTypeCode, _callback);
        }

        /**
         * Execute getValuationPointTransactions request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested transactions for the specified Valuation Point for a Fund. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ValuationPointResourceListOfAccountedTransaction> _callback, ConfigurationOptions opts) throws ApiException {
            return getValuationPointTransactionsAsync(scope, code, valuationPointDataQueryParameters, asAt, filter, limit, page, propertyKeys, navTypeCode, _callback, opts);
        }
    }

    /**
     * [EXPERIMENTAL] GetValuationPointTransactions: Get the Transactions for the given Fund.
     * Gets the Transactions for the given Valuation Point for a Fund
     * @param scope The scope of the Fund. (required)
     * @param code The code of the Fund. Together with the scope is creating the unique identifier for the given Fund. (required)
     * @param valuationPointDataQueryParameters The arguments to use for querying the transactions. (required)
     * @return APIgetValuationPointTransactionsRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested transactions for the specified Valuation Point for a Fund. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIgetValuationPointTransactionsRequest getValuationPointTransactions(String scope, String code, ValuationPointDataQueryParameters valuationPointDataQueryParameters) {
        return new APIgetValuationPointTransactionsRequest(scope, code, valuationPointDataQueryParameters);
    }
    private okhttp3.Call getValuationPointTrialBalanceCall(String scope, String code, ValuationPointDataQueryParameters valuationPointDataQueryParameters, String generalLedgerProfileCode, OffsetDateTime asAt, String filter, Integer limit, String page, List<String> propertyKeys, String navTypeCode, final ApiCallback _callback) throws ApiException {
        return getValuationPointTrialBalanceCall(scope, code, valuationPointDataQueryParameters, generalLedgerProfileCode, asAt, filter, limit, page, propertyKeys, navTypeCode,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call getValuationPointTrialBalanceCall(String scope, String code, ValuationPointDataQueryParameters valuationPointDataQueryParameters, String generalLedgerProfileCode, OffsetDateTime asAt, String filter, Integer limit, String page, List<String> propertyKeys, String navTypeCode, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = valuationPointDataQueryParameters;

        // create path and map variables
        String localVarPath = "/api/funds/{scope}/{code}/valuationpoints/trialbalance/$query"
            .replace("{" + "scope" + "}", localVarApiClient.escapeString(scope.toString()))
            .replace("{" + "code" + "}", localVarApiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (generalLedgerProfileCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("generalLedgerProfileCode", generalLedgerProfileCode));
        }

        if (asAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asAt", asAt));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (propertyKeys != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "propertyKeys", propertyKeys));
        }

        if (navTypeCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("navTypeCode", navTypeCode));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getValuationPointTrialBalanceValidateBeforeCall(String scope, String code, ValuationPointDataQueryParameters valuationPointDataQueryParameters, String generalLedgerProfileCode, OffsetDateTime asAt, String filter, Integer limit, String page, List<String> propertyKeys, String navTypeCode, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling getValuationPointTrialBalance(Async)");
        }

        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling getValuationPointTrialBalance(Async)");
        }

        // verify the required parameter 'valuationPointDataQueryParameters' is set
        if (valuationPointDataQueryParameters == null) {
            throw new ApiException("Missing the required parameter 'valuationPointDataQueryParameters' when calling getValuationPointTrialBalance(Async)");
        }

        return getValuationPointTrialBalanceCall(scope, code, valuationPointDataQueryParameters, generalLedgerProfileCode, asAt, filter, limit, page, propertyKeys, navTypeCode, _callback, opts);

    }


    private ApiResponse<ValuationPointResourceListOfTrialBalance> getValuationPointTrialBalanceWithHttpInfo(String scope, String code, ValuationPointDataQueryParameters valuationPointDataQueryParameters, String generalLedgerProfileCode, OffsetDateTime asAt, String filter, Integer limit, String page, List<String> propertyKeys, String navTypeCode) throws ApiException {
        okhttp3.Call localVarCall = getValuationPointTrialBalanceValidateBeforeCall(scope, code, valuationPointDataQueryParameters, generalLedgerProfileCode, asAt, filter, limit, page, propertyKeys, navTypeCode, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<ValuationPointResourceListOfTrialBalance>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<ValuationPointResourceListOfTrialBalance> getValuationPointTrialBalanceWithHttpInfo(String scope, String code, ValuationPointDataQueryParameters valuationPointDataQueryParameters, String generalLedgerProfileCode, OffsetDateTime asAt, String filter, Integer limit, String page, List<String> propertyKeys, String navTypeCode, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = getValuationPointTrialBalanceValidateBeforeCall(scope, code, valuationPointDataQueryParameters, generalLedgerProfileCode, asAt, filter, limit, page, propertyKeys, navTypeCode, null, opts);
        Type localVarReturnType = new TypeToken<ValuationPointResourceListOfTrialBalance>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getValuationPointTrialBalanceAsync(String scope, String code, ValuationPointDataQueryParameters valuationPointDataQueryParameters, String generalLedgerProfileCode, OffsetDateTime asAt, String filter, Integer limit, String page, List<String> propertyKeys, String navTypeCode, final ApiCallback<ValuationPointResourceListOfTrialBalance> _callback) throws ApiException {

        okhttp3.Call localVarCall = getValuationPointTrialBalanceValidateBeforeCall(scope, code, valuationPointDataQueryParameters, generalLedgerProfileCode, asAt, filter, limit, page, propertyKeys, navTypeCode, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<ValuationPointResourceListOfTrialBalance>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call getValuationPointTrialBalanceAsync(String scope, String code, ValuationPointDataQueryParameters valuationPointDataQueryParameters, String generalLedgerProfileCode, OffsetDateTime asAt, String filter, Integer limit, String page, List<String> propertyKeys, String navTypeCode, final ApiCallback<ValuationPointResourceListOfTrialBalance> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = getValuationPointTrialBalanceValidateBeforeCall(scope, code, valuationPointDataQueryParameters, generalLedgerProfileCode, asAt, filter, limit, page, propertyKeys, navTypeCode, _callback, opts);
        Type localVarReturnType = new TypeToken<ValuationPointResourceListOfTrialBalance>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetValuationPointTrialBalanceRequest {
        private final String scope;
        private final String code;
        private final ValuationPointDataQueryParameters valuationPointDataQueryParameters;
        private String generalLedgerProfileCode;
        private OffsetDateTime asAt;
        private String filter;
        private Integer limit;
        private String page;
        private List<String> propertyKeys;
        private String navTypeCode;

        private APIgetValuationPointTrialBalanceRequest(String scope, String code, ValuationPointDataQueryParameters valuationPointDataQueryParameters) {
            this.scope = scope;
            this.code = code;
            this.valuationPointDataQueryParameters = valuationPointDataQueryParameters;
        }

        /**
         * Set generalLedgerProfileCode
         * @param generalLedgerProfileCode The optional code of a general ledger profile used to decorate journal entry lines with levels. (optional)
         * @return APIgetValuationPointTrialBalanceRequest
         */
        public APIgetValuationPointTrialBalanceRequest generalLedgerProfileCode(String generalLedgerProfileCode) {
            this.generalLedgerProfileCode = generalLedgerProfileCode;
            return this;
        }

        /**
         * Set asAt
         * @param asAt The asAt datetime at which to retrieve the Trial Balance.   Defaults to returning the latest version if not specified. (optional)
         * @return APIgetValuationPointTrialBalanceRequest
         */
        public APIgetValuationPointTrialBalanceRequest asAt(OffsetDateTime asAt) {
            this.asAt = asAt;
            return this;
        }

        /**
         * Set filter
         * @param filter Expression to filter the results by.   For more information about filtering results, see https://support.lusid.com/knowledgebase/article/KA-01914. (optional)
         * @return APIgetValuationPointTrialBalanceRequest
         */
        public APIgetValuationPointTrialBalanceRequest filter(String filter) {
            this.filter = filter;
            return this;
        }

        /**
         * Set limit
         * @param limit When paginating, limit the number of returned results to this number.   Defaults to 100 if not specified. (optional)
         * @return APIgetValuationPointTrialBalanceRequest
         */
        public APIgetValuationPointTrialBalanceRequest limit(Integer limit) {
            this.limit = limit;
            return this;
        }

        /**
         * Set page
         * @param page The pagination token to use to continue listing Trial Balances.   This token is returned from the previous call.   If a pagination token is provided, the filter, effectiveAt and asAt fields   must not have changed since the original request. (optional)
         * @return APIgetValuationPointTrialBalanceRequest
         */
        public APIgetValuationPointTrialBalanceRequest page(String page) {
            this.page = page;
            return this;
        }

        /**
         * Set propertyKeys
         * @param propertyKeys A list of property keys from the &#39;Instrument&#39;, &#39;Transaction&#39;, &#39;Portfolio&#39;, &#39;Account&#39;, &#39;LegalEntity&#39; or &#39;CustodianAccount&#39;   domain to decorate onto the journal entry lines. (optional)
         * @return APIgetValuationPointTrialBalanceRequest
         */
        public APIgetValuationPointTrialBalanceRequest propertyKeys(List<String> propertyKeys) {
            this.propertyKeys = propertyKeys;
            return this;
        }

        /**
         * Set navTypeCode
         * @param navTypeCode May be provided to view a specific NAV type. When not provided, Primary NAV will be used. (optional)
         * @return APIgetValuationPointTrialBalanceRequest
         */
        public APIgetValuationPointTrialBalanceRequest navTypeCode(String navTypeCode) {
            this.navTypeCode = navTypeCode;
            return this;
        }

        /**
         * Build call for getValuationPointTrialBalance
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested Trial Balance for the specified Fund. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getValuationPointTrialBalanceCall(scope, code, valuationPointDataQueryParameters, generalLedgerProfileCode, asAt, filter, limit, page, propertyKeys, navTypeCode, _callback);
        }

        /**
         * Execute getValuationPointTrialBalance request
         * @return ValuationPointResourceListOfTrialBalance
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested Trial Balance for the specified Fund. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ValuationPointResourceListOfTrialBalance execute() throws ApiException {
            ApiResponse<ValuationPointResourceListOfTrialBalance> localVarResp = getValuationPointTrialBalanceWithHttpInfo(scope, code, valuationPointDataQueryParameters, generalLedgerProfileCode, asAt, filter, limit, page, propertyKeys, navTypeCode);
            return localVarResp.getData();
        }

        /**
         * Execute getValuationPointTrialBalance request. Use any specified configuration options to override any other configuration for this request only.
         * @return ValuationPointResourceListOfTrialBalance
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested Trial Balance for the specified Fund. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ValuationPointResourceListOfTrialBalance execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<ValuationPointResourceListOfTrialBalance> localVarResp = getValuationPointTrialBalanceWithHttpInfo(scope, code, valuationPointDataQueryParameters, generalLedgerProfileCode, asAt, filter, limit, page, propertyKeys, navTypeCode, opts);
            return localVarResp.getData();
        }

        /**
         * Execute getValuationPointTrialBalance request with HTTP info returned
         * @return ApiResponse&lt;ValuationPointResourceListOfTrialBalance&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested Trial Balance for the specified Fund. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ValuationPointResourceListOfTrialBalance> executeWithHttpInfo() throws ApiException {
            return getValuationPointTrialBalanceWithHttpInfo(scope, code, valuationPointDataQueryParameters, generalLedgerProfileCode, asAt, filter, limit, page, propertyKeys, navTypeCode);
        }

        /**
         * Execute getValuationPointTrialBalance request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;ValuationPointResourceListOfTrialBalance&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested Trial Balance for the specified Fund. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ValuationPointResourceListOfTrialBalance> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return getValuationPointTrialBalanceWithHttpInfo(scope, code, valuationPointDataQueryParameters, generalLedgerProfileCode, asAt, filter, limit, page, propertyKeys, navTypeCode, opts);
        }

        /**
         * Execute getValuationPointTrialBalance request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested Trial Balance for the specified Fund. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ValuationPointResourceListOfTrialBalance> _callback) throws ApiException {
            return getValuationPointTrialBalanceAsync(scope, code, valuationPointDataQueryParameters, generalLedgerProfileCode, asAt, filter, limit, page, propertyKeys, navTypeCode, _callback);
        }

        /**
         * Execute getValuationPointTrialBalance request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested Trial Balance for the specified Fund. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ValuationPointResourceListOfTrialBalance> _callback, ConfigurationOptions opts) throws ApiException {
            return getValuationPointTrialBalanceAsync(scope, code, valuationPointDataQueryParameters, generalLedgerProfileCode, asAt, filter, limit, page, propertyKeys, navTypeCode, _callback, opts);
        }
    }

    /**
     * [EXPERIMENTAL] GetValuationPointTrialBalance: Get Trial Balance for the given Fund.
     * Gets the Trial Balance for the given Valuation Point for a Fund.     The Trial Balance has been generated from transactions, translated via Posting Rules  and aggregated based on a General Ledger Profile (where specified).
     * @param scope The scope of the Fund. (required)
     * @param code The code of the Fund. Together with the scope this uniquely identifies the Fund. (required)
     * @param valuationPointDataQueryParameters The query parameters used in running the generation of the Trial Balance. (required)
     * @return APIgetValuationPointTrialBalanceRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested Trial Balance for the specified Fund. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIgetValuationPointTrialBalanceRequest getValuationPointTrialBalance(String scope, String code, ValuationPointDataQueryParameters valuationPointDataQueryParameters) {
        return new APIgetValuationPointTrialBalanceRequest(scope, code, valuationPointDataQueryParameters);
    }
    private okhttp3.Call listFeesCall(String scope, String code, String effectiveAt, OffsetDateTime asAt, String page, Integer limit, String filter, List<String> sortBy, List<String> propertyKeys, final ApiCallback _callback) throws ApiException {
        return listFeesCall(scope, code, effectiveAt, asAt, page, limit, filter, sortBy, propertyKeys,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call listFeesCall(String scope, String code, String effectiveAt, OffsetDateTime asAt, String page, Integer limit, String filter, List<String> sortBy, List<String> propertyKeys, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/funds/{scope}/{code}/fees"
            .replace("{" + "scope" + "}", localVarApiClient.escapeString(scope.toString()))
            .replace("{" + "code" + "}", localVarApiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (effectiveAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("effectiveAt", effectiveAt));
        }

        if (asAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asAt", asAt));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (sortBy != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "sortBy", sortBy));
        }

        if (propertyKeys != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "propertyKeys", propertyKeys));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listFeesValidateBeforeCall(String scope, String code, String effectiveAt, OffsetDateTime asAt, String page, Integer limit, String filter, List<String> sortBy, List<String> propertyKeys, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling listFees(Async)");
        }

        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling listFees(Async)");
        }

        return listFeesCall(scope, code, effectiveAt, asAt, page, limit, filter, sortBy, propertyKeys, _callback, opts);

    }


    private ApiResponse<PagedResourceListOfFee> listFeesWithHttpInfo(String scope, String code, String effectiveAt, OffsetDateTime asAt, String page, Integer limit, String filter, List<String> sortBy, List<String> propertyKeys) throws ApiException {
        okhttp3.Call localVarCall = listFeesValidateBeforeCall(scope, code, effectiveAt, asAt, page, limit, filter, sortBy, propertyKeys, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<PagedResourceListOfFee>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<PagedResourceListOfFee> listFeesWithHttpInfo(String scope, String code, String effectiveAt, OffsetDateTime asAt, String page, Integer limit, String filter, List<String> sortBy, List<String> propertyKeys, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = listFeesValidateBeforeCall(scope, code, effectiveAt, asAt, page, limit, filter, sortBy, propertyKeys, null, opts);
        Type localVarReturnType = new TypeToken<PagedResourceListOfFee>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listFeesAsync(String scope, String code, String effectiveAt, OffsetDateTime asAt, String page, Integer limit, String filter, List<String> sortBy, List<String> propertyKeys, final ApiCallback<PagedResourceListOfFee> _callback) throws ApiException {

        okhttp3.Call localVarCall = listFeesValidateBeforeCall(scope, code, effectiveAt, asAt, page, limit, filter, sortBy, propertyKeys, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<PagedResourceListOfFee>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call listFeesAsync(String scope, String code, String effectiveAt, OffsetDateTime asAt, String page, Integer limit, String filter, List<String> sortBy, List<String> propertyKeys, final ApiCallback<PagedResourceListOfFee> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = listFeesValidateBeforeCall(scope, code, effectiveAt, asAt, page, limit, filter, sortBy, propertyKeys, _callback, opts);
        Type localVarReturnType = new TypeToken<PagedResourceListOfFee>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIlistFeesRequest {
        private final String scope;
        private final String code;
        private String effectiveAt;
        private OffsetDateTime asAt;
        private String page;
        private Integer limit;
        private String filter;
        private List<String> sortBy;
        private List<String> propertyKeys;

        private APIlistFeesRequest(String scope, String code) {
            this.scope = scope;
            this.code = code;
        }

        /**
         * Set effectiveAt
         * @param effectiveAt The effective datetime or cut label at which to list the TimeVariant properties for the Fees. Defaults to the current LUSID   system datetime if not specified. (optional)
         * @return APIlistFeesRequest
         */
        public APIlistFeesRequest effectiveAt(String effectiveAt) {
            this.effectiveAt = effectiveAt;
            return this;
        }

        /**
         * Set asAt
         * @param asAt The asAt datetime at which to list the Fees. Defaults to returning the latest version of each Fee if not specified. (optional)
         * @return APIlistFeesRequest
         */
        public APIlistFeesRequest asAt(OffsetDateTime asAt) {
            this.asAt = asAt;
            return this;
        }

        /**
         * Set page
         * @param page The pagination token to use to continue listing fees; this   value is returned from the previous call. If a pagination token is provided, the filter, effectiveAt   and asAt fields must not have changed since the original request. (optional)
         * @return APIlistFeesRequest
         */
        public APIlistFeesRequest page(String page) {
            this.page = page;
            return this;
        }

        /**
         * Set limit
         * @param limit When paginating, limit the results to this number. Defaults to 100 if not specified. (optional)
         * @return APIlistFeesRequest
         */
        public APIlistFeesRequest limit(Integer limit) {
            this.limit = limit;
            return this;
        }

        /**
         * Set filter
         * @param filter Expression to filter the results.   For example, to filter on the treatment, specify \&quot;treatment eq &#39;Monthly&#39;\&quot;. For more information about filtering   results, see https://support.lusid.com/knowledgebase/article/KA-01914. (optional)
         * @return APIlistFeesRequest
         */
        public APIlistFeesRequest filter(String filter) {
            this.filter = filter;
            return this;
        }

        /**
         * Set sortBy
         * @param sortBy A list of field names or properties to sort by, each suffixed by \&quot; ASC\&quot; or \&quot; DESC\&quot; (optional)
         * @return APIlistFeesRequest
         */
        public APIlistFeesRequest sortBy(List<String> sortBy) {
            this.sortBy = sortBy;
            return this;
        }

        /**
         * Set propertyKeys
         * @param propertyKeys A list of property keys from the &#39;Fee&#39; domain to decorate onto each Fee.   These must take the format {domain}/{scope}/{code}, for example &#39;Fee/Account/Id&#39;. (optional)
         * @return APIlistFeesRequest
         */
        public APIlistFeesRequest propertyKeys(List<String> propertyKeys) {
            this.propertyKeys = propertyKeys;
            return this;
        }

        /**
         * Build call for listFees
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested Fees. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listFeesCall(scope, code, effectiveAt, asAt, page, limit, filter, sortBy, propertyKeys, _callback);
        }

        /**
         * Execute listFees request
         * @return PagedResourceListOfFee
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested Fees. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public PagedResourceListOfFee execute() throws ApiException {
            ApiResponse<PagedResourceListOfFee> localVarResp = listFeesWithHttpInfo(scope, code, effectiveAt, asAt, page, limit, filter, sortBy, propertyKeys);
            return localVarResp.getData();
        }

        /**
         * Execute listFees request. Use any specified configuration options to override any other configuration for this request only.
         * @return PagedResourceListOfFee
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested Fees. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public PagedResourceListOfFee execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<PagedResourceListOfFee> localVarResp = listFeesWithHttpInfo(scope, code, effectiveAt, asAt, page, limit, filter, sortBy, propertyKeys, opts);
            return localVarResp.getData();
        }

        /**
         * Execute listFees request with HTTP info returned
         * @return ApiResponse&lt;PagedResourceListOfFee&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested Fees. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PagedResourceListOfFee> executeWithHttpInfo() throws ApiException {
            return listFeesWithHttpInfo(scope, code, effectiveAt, asAt, page, limit, filter, sortBy, propertyKeys);
        }

        /**
         * Execute listFees request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;PagedResourceListOfFee&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested Fees. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PagedResourceListOfFee> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return listFeesWithHttpInfo(scope, code, effectiveAt, asAt, page, limit, filter, sortBy, propertyKeys, opts);
        }

        /**
         * Execute listFees request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested Fees. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PagedResourceListOfFee> _callback) throws ApiException {
            return listFeesAsync(scope, code, effectiveAt, asAt, page, limit, filter, sortBy, propertyKeys, _callback);
        }

        /**
         * Execute listFees request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested Fees. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PagedResourceListOfFee> _callback, ConfigurationOptions opts) throws ApiException {
            return listFeesAsync(scope, code, effectiveAt, asAt, page, limit, filter, sortBy, propertyKeys, _callback, opts);
        }
    }

    /**
     * [EXPERIMENTAL] ListFees: List Fees for a specified Fund.
     * List all the Fees matching a particular criteria.
     * @param scope The scope of the Fund. (required)
     * @param code The code of the Fund. (required)
     * @return APIlistFeesRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested Fees. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIlistFeesRequest listFees(String scope, String code) {
        return new APIlistFeesRequest(scope, code);
    }
    private okhttp3.Call listFundCalendarCall(String scope, String code, OffsetDateTime asAt, String page, Integer limit, String filter, List<String> sortBy, List<String> propertyKeys, final ApiCallback _callback) throws ApiException {
        return listFundCalendarCall(scope, code, asAt, page, limit, filter, sortBy, propertyKeys,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call listFundCalendarCall(String scope, String code, OffsetDateTime asAt, String page, Integer limit, String filter, List<String> sortBy, List<String> propertyKeys, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/funds/{scope}/{code}/calendar"
            .replace("{" + "scope" + "}", localVarApiClient.escapeString(scope.toString()))
            .replace("{" + "code" + "}", localVarApiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (asAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asAt", asAt));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (sortBy != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "sortBy", sortBy));
        }

        if (propertyKeys != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "propertyKeys", propertyKeys));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listFundCalendarValidateBeforeCall(String scope, String code, OffsetDateTime asAt, String page, Integer limit, String filter, List<String> sortBy, List<String> propertyKeys, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling listFundCalendar(Async)");
        }

        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling listFundCalendar(Async)");
        }

        return listFundCalendarCall(scope, code, asAt, page, limit, filter, sortBy, propertyKeys, _callback, opts);

    }


    private ApiResponse<PagedResourceListOfFundCalendarEntry> listFundCalendarWithHttpInfo(String scope, String code, OffsetDateTime asAt, String page, Integer limit, String filter, List<String> sortBy, List<String> propertyKeys) throws ApiException {
        okhttp3.Call localVarCall = listFundCalendarValidateBeforeCall(scope, code, asAt, page, limit, filter, sortBy, propertyKeys, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<PagedResourceListOfFundCalendarEntry>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<PagedResourceListOfFundCalendarEntry> listFundCalendarWithHttpInfo(String scope, String code, OffsetDateTime asAt, String page, Integer limit, String filter, List<String> sortBy, List<String> propertyKeys, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = listFundCalendarValidateBeforeCall(scope, code, asAt, page, limit, filter, sortBy, propertyKeys, null, opts);
        Type localVarReturnType = new TypeToken<PagedResourceListOfFundCalendarEntry>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listFundCalendarAsync(String scope, String code, OffsetDateTime asAt, String page, Integer limit, String filter, List<String> sortBy, List<String> propertyKeys, final ApiCallback<PagedResourceListOfFundCalendarEntry> _callback) throws ApiException {

        okhttp3.Call localVarCall = listFundCalendarValidateBeforeCall(scope, code, asAt, page, limit, filter, sortBy, propertyKeys, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<PagedResourceListOfFundCalendarEntry>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call listFundCalendarAsync(String scope, String code, OffsetDateTime asAt, String page, Integer limit, String filter, List<String> sortBy, List<String> propertyKeys, final ApiCallback<PagedResourceListOfFundCalendarEntry> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = listFundCalendarValidateBeforeCall(scope, code, asAt, page, limit, filter, sortBy, propertyKeys, _callback, opts);
        Type localVarReturnType = new TypeToken<PagedResourceListOfFundCalendarEntry>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIlistFundCalendarRequest {
        private final String scope;
        private final String code;
        private OffsetDateTime asAt;
        private String page;
        private Integer limit;
        private String filter;
        private List<String> sortBy;
        private List<String> propertyKeys;

        private APIlistFundCalendarRequest(String scope, String code) {
            this.scope = scope;
            this.code = code;
        }

        /**
         * Set asAt
         * @param asAt The asAt datetime at which to list the Calendar. Defaults to returning the latest version of each Calendar Entry if not specified. (optional)
         * @return APIlistFundCalendarRequest
         */
        public APIlistFundCalendarRequest asAt(OffsetDateTime asAt) {
            this.asAt = asAt;
            return this;
        }

        /**
         * Set page
         * @param page The pagination token to use to continue listing Valuation Points; this   value is returned from the previous call. If a pagination token is provided, the filter, effectiveAt   and asAt fields must not have changed since the original request. (optional)
         * @return APIlistFundCalendarRequest
         */
        public APIlistFundCalendarRequest page(String page) {
            this.page = page;
            return this;
        }

        /**
         * Set limit
         * @param limit When paginating, limit the results to this number. Defaults to 100 if not specified. (optional)
         * @return APIlistFundCalendarRequest
         */
        public APIlistFundCalendarRequest limit(Integer limit) {
            this.limit = limit;
            return this;
        }

        /**
         * Set filter
         * @param filter Expression to filter the results.   For example, to filter on the DisplayName, specify \&quot;displayName eq &#39;VP 1&#39;\&quot;. For more information about filtering   results, see https://support.lusid.com/knowledgebase/article/KA-01914. (optional)
         * @return APIlistFundCalendarRequest
         */
        public APIlistFundCalendarRequest filter(String filter) {
            this.filter = filter;
            return this;
        }

        /**
         * Set sortBy
         * @param sortBy A list of field names or properties to sort by, each suffixed by \&quot; ASC\&quot; or \&quot; DESC\&quot; (optional)
         * @return APIlistFundCalendarRequest
         */
        public APIlistFundCalendarRequest sortBy(List<String> sortBy) {
            this.sortBy = sortBy;
            return this;
        }

        /**
         * Set propertyKeys
         * @param propertyKeys A list of property keys from the &#39;ClosedPeriod&#39; domain to decorate onto each item. (optional)
         * @return APIlistFundCalendarRequest
         */
        public APIlistFundCalendarRequest propertyKeys(List<String> propertyKeys) {
            this.propertyKeys = propertyKeys;
            return this;
        }

        /**
         * Build call for listFundCalendar
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested Fund Calendars. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listFundCalendarCall(scope, code, asAt, page, limit, filter, sortBy, propertyKeys, _callback);
        }

        /**
         * Execute listFundCalendar request
         * @return PagedResourceListOfFundCalendarEntry
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested Fund Calendars. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public PagedResourceListOfFundCalendarEntry execute() throws ApiException {
            ApiResponse<PagedResourceListOfFundCalendarEntry> localVarResp = listFundCalendarWithHttpInfo(scope, code, asAt, page, limit, filter, sortBy, propertyKeys);
            return localVarResp.getData();
        }

        /**
         * Execute listFundCalendar request. Use any specified configuration options to override any other configuration for this request only.
         * @return PagedResourceListOfFundCalendarEntry
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested Fund Calendars. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public PagedResourceListOfFundCalendarEntry execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<PagedResourceListOfFundCalendarEntry> localVarResp = listFundCalendarWithHttpInfo(scope, code, asAt, page, limit, filter, sortBy, propertyKeys, opts);
            return localVarResp.getData();
        }

        /**
         * Execute listFundCalendar request with HTTP info returned
         * @return ApiResponse&lt;PagedResourceListOfFundCalendarEntry&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested Fund Calendars. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PagedResourceListOfFundCalendarEntry> executeWithHttpInfo() throws ApiException {
            return listFundCalendarWithHttpInfo(scope, code, asAt, page, limit, filter, sortBy, propertyKeys);
        }

        /**
         * Execute listFundCalendar request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;PagedResourceListOfFundCalendarEntry&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested Fund Calendars. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PagedResourceListOfFundCalendarEntry> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return listFundCalendarWithHttpInfo(scope, code, asAt, page, limit, filter, sortBy, propertyKeys, opts);
        }

        /**
         * Execute listFundCalendar request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested Fund Calendars. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PagedResourceListOfFundCalendarEntry> _callback) throws ApiException {
            return listFundCalendarAsync(scope, code, asAt, page, limit, filter, sortBy, propertyKeys, _callback);
        }

        /**
         * Execute listFundCalendar request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested Fund Calendars. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PagedResourceListOfFundCalendarEntry> _callback, ConfigurationOptions opts) throws ApiException {
            return listFundCalendarAsync(scope, code, asAt, page, limit, filter, sortBy, propertyKeys, _callback, opts);
        }
    }

    /**
     * [EXPERIMENTAL] ListFundCalendar: List Fund Calendar.
     * List all the Calendar Entries associated with the Fund.
     * @param scope The Scope for the Fund. (required)
     * @param code The Code for the Fund. (required)
     * @return APIlistFundCalendarRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested Fund Calendars. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIlistFundCalendarRequest listFundCalendar(String scope, String code) {
        return new APIlistFundCalendarRequest(scope, code);
    }
    private okhttp3.Call listFundsCall(String effectiveAt, OffsetDateTime asAt, String page, Integer limit, String filter, List<String> sortBy, List<String> propertyKeys, final ApiCallback _callback) throws ApiException {
        return listFundsCall(effectiveAt, asAt, page, limit, filter, sortBy, propertyKeys,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call listFundsCall(String effectiveAt, OffsetDateTime asAt, String page, Integer limit, String filter, List<String> sortBy, List<String> propertyKeys, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/funds";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (effectiveAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("effectiveAt", effectiveAt));
        }

        if (asAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asAt", asAt));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (sortBy != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "sortBy", sortBy));
        }

        if (propertyKeys != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "propertyKeys", propertyKeys));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listFundsValidateBeforeCall(String effectiveAt, OffsetDateTime asAt, String page, Integer limit, String filter, List<String> sortBy, List<String> propertyKeys, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        return listFundsCall(effectiveAt, asAt, page, limit, filter, sortBy, propertyKeys, _callback, opts);

    }


    private ApiResponse<PagedResourceListOfFund> listFundsWithHttpInfo(String effectiveAt, OffsetDateTime asAt, String page, Integer limit, String filter, List<String> sortBy, List<String> propertyKeys) throws ApiException {
        okhttp3.Call localVarCall = listFundsValidateBeforeCall(effectiveAt, asAt, page, limit, filter, sortBy, propertyKeys, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<PagedResourceListOfFund>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<PagedResourceListOfFund> listFundsWithHttpInfo(String effectiveAt, OffsetDateTime asAt, String page, Integer limit, String filter, List<String> sortBy, List<String> propertyKeys, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = listFundsValidateBeforeCall(effectiveAt, asAt, page, limit, filter, sortBy, propertyKeys, null, opts);
        Type localVarReturnType = new TypeToken<PagedResourceListOfFund>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listFundsAsync(String effectiveAt, OffsetDateTime asAt, String page, Integer limit, String filter, List<String> sortBy, List<String> propertyKeys, final ApiCallback<PagedResourceListOfFund> _callback) throws ApiException {

        okhttp3.Call localVarCall = listFundsValidateBeforeCall(effectiveAt, asAt, page, limit, filter, sortBy, propertyKeys, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<PagedResourceListOfFund>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call listFundsAsync(String effectiveAt, OffsetDateTime asAt, String page, Integer limit, String filter, List<String> sortBy, List<String> propertyKeys, final ApiCallback<PagedResourceListOfFund> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = listFundsValidateBeforeCall(effectiveAt, asAt, page, limit, filter, sortBy, propertyKeys, _callback, opts);
        Type localVarReturnType = new TypeToken<PagedResourceListOfFund>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIlistFundsRequest {
        private String effectiveAt;
        private OffsetDateTime asAt;
        private String page;
        private Integer limit;
        private String filter;
        private List<String> sortBy;
        private List<String> propertyKeys;

        private APIlistFundsRequest() {
        }

        /**
         * Set effectiveAt
         * @param effectiveAt The effective datetime or cut label at which to list the TimeVariant properties for the Funds. Defaults to the current LUSID   system datetime if not specified. (optional)
         * @return APIlistFundsRequest
         */
        public APIlistFundsRequest effectiveAt(String effectiveAt) {
            this.effectiveAt = effectiveAt;
            return this;
        }

        /**
         * Set asAt
         * @param asAt The asAt datetime at which to list the Funds. Defaults to returning the latest version of each Fund if not specified. (optional)
         * @return APIlistFundsRequest
         */
        public APIlistFundsRequest asAt(OffsetDateTime asAt) {
            this.asAt = asAt;
            return this;
        }

        /**
         * Set page
         * @param page The pagination token to use to continue listing Funds; this   value is returned from the previous call. If a pagination token is provided, the filter, effectiveAt   and asAt fields must not have changed since the original request. (optional)
         * @return APIlistFundsRequest
         */
        public APIlistFundsRequest page(String page) {
            this.page = page;
            return this;
        }

        /**
         * Set limit
         * @param limit When paginating, limit the results to this number. Defaults to 100 if not specified. (optional)
         * @return APIlistFundsRequest
         */
        public APIlistFundsRequest limit(Integer limit) {
            this.limit = limit;
            return this;
        }

        /**
         * Set filter
         * @param filter Expression to filter the results.   For example, to filter on the Fund type, specify \&quot;id.Code eq &#39;Fund1&#39;\&quot;. For more information about filtering   results, see https://support.lusid.com/knowledgebase/article/KA-01914. (optional)
         * @return APIlistFundsRequest
         */
        public APIlistFundsRequest filter(String filter) {
            this.filter = filter;
            return this;
        }

        /**
         * Set sortBy
         * @param sortBy A list of field names or properties to sort by, each suffixed by \&quot; ASC\&quot; or \&quot; DESC\&quot; (optional)
         * @return APIlistFundsRequest
         */
        public APIlistFundsRequest sortBy(List<String> sortBy) {
            this.sortBy = sortBy;
            return this;
        }

        /**
         * Set propertyKeys
         * @param propertyKeys A list of property keys from the &#39;Fund&#39; domain to decorate onto each Fund.   These must take the format {domain}/{scope}/{code}, for example &#39;Fund/Manager/Id&#39;. (optional)
         * @return APIlistFundsRequest
         */
        public APIlistFundsRequest propertyKeys(List<String> propertyKeys) {
            this.propertyKeys = propertyKeys;
            return this;
        }

        /**
         * Build call for listFunds
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested Funds. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listFundsCall(effectiveAt, asAt, page, limit, filter, sortBy, propertyKeys, _callback);
        }

        /**
         * Execute listFunds request
         * @return PagedResourceListOfFund
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested Funds. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public PagedResourceListOfFund execute() throws ApiException {
            ApiResponse<PagedResourceListOfFund> localVarResp = listFundsWithHttpInfo(effectiveAt, asAt, page, limit, filter, sortBy, propertyKeys);
            return localVarResp.getData();
        }

        /**
         * Execute listFunds request. Use any specified configuration options to override any other configuration for this request only.
         * @return PagedResourceListOfFund
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested Funds. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public PagedResourceListOfFund execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<PagedResourceListOfFund> localVarResp = listFundsWithHttpInfo(effectiveAt, asAt, page, limit, filter, sortBy, propertyKeys, opts);
            return localVarResp.getData();
        }

        /**
         * Execute listFunds request with HTTP info returned
         * @return ApiResponse&lt;PagedResourceListOfFund&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested Funds. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PagedResourceListOfFund> executeWithHttpInfo() throws ApiException {
            return listFundsWithHttpInfo(effectiveAt, asAt, page, limit, filter, sortBy, propertyKeys);
        }

        /**
         * Execute listFunds request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;PagedResourceListOfFund&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested Funds. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PagedResourceListOfFund> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return listFundsWithHttpInfo(effectiveAt, asAt, page, limit, filter, sortBy, propertyKeys, opts);
        }

        /**
         * Execute listFunds request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested Funds. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PagedResourceListOfFund> _callback) throws ApiException {
            return listFundsAsync(effectiveAt, asAt, page, limit, filter, sortBy, propertyKeys, _callback);
        }

        /**
         * Execute listFunds request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested Funds. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PagedResourceListOfFund> _callback, ConfigurationOptions opts) throws ApiException {
            return listFundsAsync(effectiveAt, asAt, page, limit, filter, sortBy, propertyKeys, _callback, opts);
        }
    }

    /**
     * [EXPERIMENTAL] ListFunds: List Funds.
     * List all the Funds matching particular criteria.
     * @return APIlistFundsRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested Funds. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIlistFundsRequest listFunds() {
        return new APIlistFundsRequest();
    }
    private okhttp3.Call listValuationPointOverviewCall(String scope, String code, String effectiveAt, OffsetDateTime asAt, String page, Integer limit, String filter, List<String> propertyKeys, String navTypeCode, final ApiCallback _callback) throws ApiException {
        return listValuationPointOverviewCall(scope, code, effectiveAt, asAt, page, limit, filter, propertyKeys, navTypeCode,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call listValuationPointOverviewCall(String scope, String code, String effectiveAt, OffsetDateTime asAt, String page, Integer limit, String filter, List<String> propertyKeys, String navTypeCode, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/funds/{scope}/{code}/valuationPointOverview"
            .replace("{" + "scope" + "}", localVarApiClient.escapeString(scope.toString()))
            .replace("{" + "code" + "}", localVarApiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (effectiveAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("effectiveAt", effectiveAt));
        }

        if (asAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asAt", asAt));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (propertyKeys != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "propertyKeys", propertyKeys));
        }

        if (navTypeCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("navTypeCode", navTypeCode));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listValuationPointOverviewValidateBeforeCall(String scope, String code, String effectiveAt, OffsetDateTime asAt, String page, Integer limit, String filter, List<String> propertyKeys, String navTypeCode, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling listValuationPointOverview(Async)");
        }

        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling listValuationPointOverview(Async)");
        }

        return listValuationPointOverviewCall(scope, code, effectiveAt, asAt, page, limit, filter, propertyKeys, navTypeCode, _callback, opts);

    }


    private ApiResponse<PagedResourceListOfValuationPointOverview> listValuationPointOverviewWithHttpInfo(String scope, String code, String effectiveAt, OffsetDateTime asAt, String page, Integer limit, String filter, List<String> propertyKeys, String navTypeCode) throws ApiException {
        okhttp3.Call localVarCall = listValuationPointOverviewValidateBeforeCall(scope, code, effectiveAt, asAt, page, limit, filter, propertyKeys, navTypeCode, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<PagedResourceListOfValuationPointOverview>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<PagedResourceListOfValuationPointOverview> listValuationPointOverviewWithHttpInfo(String scope, String code, String effectiveAt, OffsetDateTime asAt, String page, Integer limit, String filter, List<String> propertyKeys, String navTypeCode, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = listValuationPointOverviewValidateBeforeCall(scope, code, effectiveAt, asAt, page, limit, filter, propertyKeys, navTypeCode, null, opts);
        Type localVarReturnType = new TypeToken<PagedResourceListOfValuationPointOverview>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listValuationPointOverviewAsync(String scope, String code, String effectiveAt, OffsetDateTime asAt, String page, Integer limit, String filter, List<String> propertyKeys, String navTypeCode, final ApiCallback<PagedResourceListOfValuationPointOverview> _callback) throws ApiException {

        okhttp3.Call localVarCall = listValuationPointOverviewValidateBeforeCall(scope, code, effectiveAt, asAt, page, limit, filter, propertyKeys, navTypeCode, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<PagedResourceListOfValuationPointOverview>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call listValuationPointOverviewAsync(String scope, String code, String effectiveAt, OffsetDateTime asAt, String page, Integer limit, String filter, List<String> propertyKeys, String navTypeCode, final ApiCallback<PagedResourceListOfValuationPointOverview> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = listValuationPointOverviewValidateBeforeCall(scope, code, effectiveAt, asAt, page, limit, filter, propertyKeys, navTypeCode, _callback, opts);
        Type localVarReturnType = new TypeToken<PagedResourceListOfValuationPointOverview>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIlistValuationPointOverviewRequest {
        private final String scope;
        private final String code;
        private String effectiveAt;
        private OffsetDateTime asAt;
        private String page;
        private Integer limit;
        private String filter;
        private List<String> propertyKeys;
        private String navTypeCode;

        private APIlistValuationPointOverviewRequest(String scope, String code) {
            this.scope = scope;
            this.code = code;
        }

        /**
         * Set effectiveAt
         * @param effectiveAt The effective datetime or cut label at which to list the TimeVariant properties for the ValuationPoints. Defaults to the current LUSID   system datetime if not specified. (optional)
         * @return APIlistValuationPointOverviewRequest
         */
        public APIlistValuationPointOverviewRequest effectiveAt(String effectiveAt) {
            this.effectiveAt = effectiveAt;
            return this;
        }

        /**
         * Set asAt
         * @param asAt The asAt datetime at which to list the ValuationPoints. Defaults to returning the latest version of each ValuationPoint if not specified. (optional)
         * @return APIlistValuationPointOverviewRequest
         */
        public APIlistValuationPointOverviewRequest asAt(OffsetDateTime asAt) {
            this.asAt = asAt;
            return this;
        }

        /**
         * Set page
         * @param page The pagination token to use to continue listing ValuationPoints; this   value is returned from the previous call. If a pagination token is provided, the filter, effectiveAt   and asAt fields must not have changed since the original request. (optional)
         * @return APIlistValuationPointOverviewRequest
         */
        public APIlistValuationPointOverviewRequest page(String page) {
            this.page = page;
            return this;
        }

        /**
         * Set limit
         * @param limit When paginating, limit the results to this number. Defaults to 100 if not specified. (optional)
         * @return APIlistValuationPointOverviewRequest
         */
        public APIlistValuationPointOverviewRequest limit(Integer limit) {
            this.limit = limit;
            return this;
        }

        /**
         * Set filter
         * @param filter Expression to filter the results by.   For example, to filter on the NAV, specify \&quot;NAV gt 300\&quot;. For more information about filtering   results, see https://support.lusid.com/knowledgebase/article/KA-01914. (optional)
         * @return APIlistValuationPointOverviewRequest
         */
        public APIlistValuationPointOverviewRequest filter(String filter) {
            this.filter = filter;
            return this;
        }

        /**
         * Set propertyKeys
         * @param propertyKeys A list of property keys from the &#39;DiaryEntry&#39; domain to decorate onto each ValuationPoint.   These must take the format {domain}/{scope}/{code}, for example &#39;DiaryEntry/ValuationPoint/Id&#39;. (optional)
         * @return APIlistValuationPointOverviewRequest
         */
        public APIlistValuationPointOverviewRequest propertyKeys(List<String> propertyKeys) {
            this.propertyKeys = propertyKeys;
            return this;
        }

        /**
         * Set navTypeCode
         * @param navTypeCode May be provided to view a specific NAV type. When not provided, Primary NAV will be used. (optional)
         * @return APIlistValuationPointOverviewRequest
         */
        public APIlistValuationPointOverviewRequest navTypeCode(String navTypeCode) {
            this.navTypeCode = navTypeCode;
            return this;
        }

        /**
         * Build call for listValuationPointOverview
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested ValuationPointOverview. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listValuationPointOverviewCall(scope, code, effectiveAt, asAt, page, limit, filter, propertyKeys, navTypeCode, _callback);
        }

        /**
         * Execute listValuationPointOverview request
         * @return PagedResourceListOfValuationPointOverview
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested ValuationPointOverview. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public PagedResourceListOfValuationPointOverview execute() throws ApiException {
            ApiResponse<PagedResourceListOfValuationPointOverview> localVarResp = listValuationPointOverviewWithHttpInfo(scope, code, effectiveAt, asAt, page, limit, filter, propertyKeys, navTypeCode);
            return localVarResp.getData();
        }

        /**
         * Execute listValuationPointOverview request. Use any specified configuration options to override any other configuration for this request only.
         * @return PagedResourceListOfValuationPointOverview
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested ValuationPointOverview. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public PagedResourceListOfValuationPointOverview execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<PagedResourceListOfValuationPointOverview> localVarResp = listValuationPointOverviewWithHttpInfo(scope, code, effectiveAt, asAt, page, limit, filter, propertyKeys, navTypeCode, opts);
            return localVarResp.getData();
        }

        /**
         * Execute listValuationPointOverview request with HTTP info returned
         * @return ApiResponse&lt;PagedResourceListOfValuationPointOverview&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested ValuationPointOverview. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PagedResourceListOfValuationPointOverview> executeWithHttpInfo() throws ApiException {
            return listValuationPointOverviewWithHttpInfo(scope, code, effectiveAt, asAt, page, limit, filter, propertyKeys, navTypeCode);
        }

        /**
         * Execute listValuationPointOverview request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;PagedResourceListOfValuationPointOverview&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested ValuationPointOverview. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PagedResourceListOfValuationPointOverview> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return listValuationPointOverviewWithHttpInfo(scope, code, effectiveAt, asAt, page, limit, filter, propertyKeys, navTypeCode, opts);
        }

        /**
         * Execute listValuationPointOverview request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested ValuationPointOverview. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PagedResourceListOfValuationPointOverview> _callback) throws ApiException {
            return listValuationPointOverviewAsync(scope, code, effectiveAt, asAt, page, limit, filter, propertyKeys, navTypeCode, _callback);
        }

        /**
         * Execute listValuationPointOverview request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested ValuationPointOverview. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PagedResourceListOfValuationPointOverview> _callback, ConfigurationOptions opts) throws ApiException {
            return listValuationPointOverviewAsync(scope, code, effectiveAt, asAt, page, limit, filter, propertyKeys, navTypeCode, _callback, opts);
        }
    }

    /**
     * [EXPERIMENTAL] ListValuationPointOverview: List Valuation Points Overview for a given Fund.
     * List all the Valuation Points that match the given criteria for a given Fund.
     * @param scope The scope of the Fund. (required)
     * @param code The code of the Fund. (required)
     * @return APIlistValuationPointOverviewRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested ValuationPointOverview. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIlistValuationPointOverviewRequest listValuationPointOverview(String scope, String code) {
        return new APIlistValuationPointOverviewRequest(scope, code);
    }
    private okhttp3.Call patchFeeCall(String scope, String code, String feeCode, List<Operation> operation, final ApiCallback _callback) throws ApiException {
        return patchFeeCall(scope, code, feeCode, operation,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call patchFeeCall(String scope, String code, String feeCode, List<Operation> operation, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = operation;

        // create path and map variables
        String localVarPath = "/api/funds/{scope}/{code}/fees/{feeCode}"
            .replace("{" + "scope" + "}", localVarApiClient.escapeString(scope.toString()))
            .replace("{" + "code" + "}", localVarApiClient.escapeString(code.toString()))
            .replace("{" + "feeCode" + "}", localVarApiClient.escapeString(feeCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call patchFeeValidateBeforeCall(String scope, String code, String feeCode, List<Operation> operation, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling patchFee(Async)");
        }

        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling patchFee(Async)");
        }

        // verify the required parameter 'feeCode' is set
        if (feeCode == null) {
            throw new ApiException("Missing the required parameter 'feeCode' when calling patchFee(Async)");
        }

        // verify the required parameter 'operation' is set
        if (operation == null) {
            throw new ApiException("Missing the required parameter 'operation' when calling patchFee(Async)");
        }

        return patchFeeCall(scope, code, feeCode, operation, _callback, opts);

    }


    private ApiResponse<Fee> patchFeeWithHttpInfo(String scope, String code, String feeCode, List<Operation> operation) throws ApiException {
        okhttp3.Call localVarCall = patchFeeValidateBeforeCall(scope, code, feeCode, operation, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<Fee>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<Fee> patchFeeWithHttpInfo(String scope, String code, String feeCode, List<Operation> operation, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = patchFeeValidateBeforeCall(scope, code, feeCode, operation, null, opts);
        Type localVarReturnType = new TypeToken<Fee>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call patchFeeAsync(String scope, String code, String feeCode, List<Operation> operation, final ApiCallback<Fee> _callback) throws ApiException {

        okhttp3.Call localVarCall = patchFeeValidateBeforeCall(scope, code, feeCode, operation, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<Fee>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call patchFeeAsync(String scope, String code, String feeCode, List<Operation> operation, final ApiCallback<Fee> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = patchFeeValidateBeforeCall(scope, code, feeCode, operation, _callback, opts);
        Type localVarReturnType = new TypeToken<Fee>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIpatchFeeRequest {
        private final String scope;
        private final String code;
        private final String feeCode;
        private final List<Operation> operation;

        private APIpatchFeeRequest(String scope, String code, String feeCode, List<Operation> operation) {
            this.scope = scope;
            this.code = code;
            this.feeCode = feeCode;
            this.operation = operation;
        }

        /**
         * Build call for patchFee
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The newly patched Fee. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return patchFeeCall(scope, code, feeCode, operation, _callback);
        }

        /**
         * Execute patchFee request
         * @return Fee
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The newly patched Fee. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public Fee execute() throws ApiException {
            ApiResponse<Fee> localVarResp = patchFeeWithHttpInfo(scope, code, feeCode, operation);
            return localVarResp.getData();
        }

        /**
         * Execute patchFee request. Use any specified configuration options to override any other configuration for this request only.
         * @return Fee
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The newly patched Fee. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public Fee execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<Fee> localVarResp = patchFeeWithHttpInfo(scope, code, feeCode, operation, opts);
            return localVarResp.getData();
        }

        /**
         * Execute patchFee request with HTTP info returned
         * @return ApiResponse&lt;Fee&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The newly patched Fee. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Fee> executeWithHttpInfo() throws ApiException {
            return patchFeeWithHttpInfo(scope, code, feeCode, operation);
        }

        /**
         * Execute patchFee request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;Fee&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The newly patched Fee. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Fee> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return patchFeeWithHttpInfo(scope, code, feeCode, operation, opts);
        }

        /**
         * Execute patchFee request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The newly patched Fee. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Fee> _callback) throws ApiException {
            return patchFeeAsync(scope, code, feeCode, operation, _callback);
        }

        /**
         * Execute patchFee request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The newly patched Fee. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Fee> _callback, ConfigurationOptions opts) throws ApiException {
            return patchFeeAsync(scope, code, feeCode, operation, _callback, opts);
        }
    }

    /**
     * [EXPERIMENTAL] PatchFee: Patch Fee.
     * Create or update certain fields for a particular Fee.  The behaviour is defined by the JSON Patch specification.    Currently supported fields are: EndDate, ShareClasses.
     * @param scope The scope of the Fund. (required)
     * @param code The code of the Fund. Together with the scope this uniquely identifies the Fund. (required)
     * @param feeCode The code of the Fee. (required)
     * @param operation The json patch document. For more information see: https://datatracker.ietf.org/doc/html/rfc6902. (required)
     * @return APIpatchFeeRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The newly patched Fee. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIpatchFeeRequest patchFee(String scope, String code, String feeCode, List<Operation> operation) {
        return new APIpatchFeeRequest(scope, code, feeCode, operation);
    }
    private okhttp3.Call patchFundCall(String scope, String code, List<Operation> operation, final ApiCallback _callback) throws ApiException {
        return patchFundCall(scope, code, operation,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call patchFundCall(String scope, String code, List<Operation> operation, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = operation;

        // create path and map variables
        String localVarPath = "/api/funds/{scope}/{code}"
            .replace("{" + "scope" + "}", localVarApiClient.escapeString(scope.toString()))
            .replace("{" + "code" + "}", localVarApiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call patchFundValidateBeforeCall(String scope, String code, List<Operation> operation, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling patchFund(Async)");
        }

        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling patchFund(Async)");
        }

        // verify the required parameter 'operation' is set
        if (operation == null) {
            throw new ApiException("Missing the required parameter 'operation' when calling patchFund(Async)");
        }

        return patchFundCall(scope, code, operation, _callback, opts);

    }


    private ApiResponse<Fund> patchFundWithHttpInfo(String scope, String code, List<Operation> operation) throws ApiException {
        okhttp3.Call localVarCall = patchFundValidateBeforeCall(scope, code, operation, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<Fund>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<Fund> patchFundWithHttpInfo(String scope, String code, List<Operation> operation, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = patchFundValidateBeforeCall(scope, code, operation, null, opts);
        Type localVarReturnType = new TypeToken<Fund>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call patchFundAsync(String scope, String code, List<Operation> operation, final ApiCallback<Fund> _callback) throws ApiException {

        okhttp3.Call localVarCall = patchFundValidateBeforeCall(scope, code, operation, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<Fund>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call patchFundAsync(String scope, String code, List<Operation> operation, final ApiCallback<Fund> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = patchFundValidateBeforeCall(scope, code, operation, _callback, opts);
        Type localVarReturnType = new TypeToken<Fund>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIpatchFundRequest {
        private final String scope;
        private final String code;
        private final List<Operation> operation;

        private APIpatchFundRequest(String scope, String code, List<Operation> operation) {
            this.scope = scope;
            this.code = code;
            this.operation = operation;
        }

        /**
         * Build call for patchFund
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The updated Fund. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return patchFundCall(scope, code, operation, _callback);
        }

        /**
         * Execute patchFund request
         * @return Fund
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The updated Fund. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public Fund execute() throws ApiException {
            ApiResponse<Fund> localVarResp = patchFundWithHttpInfo(scope, code, operation);
            return localVarResp.getData();
        }

        /**
         * Execute patchFund request. Use any specified configuration options to override any other configuration for this request only.
         * @return Fund
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The updated Fund. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public Fund execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<Fund> localVarResp = patchFundWithHttpInfo(scope, code, operation, opts);
            return localVarResp.getData();
        }

        /**
         * Execute patchFund request with HTTP info returned
         * @return ApiResponse&lt;Fund&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The updated Fund. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Fund> executeWithHttpInfo() throws ApiException {
            return patchFundWithHttpInfo(scope, code, operation);
        }

        /**
         * Execute patchFund request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;Fund&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The updated Fund. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Fund> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return patchFundWithHttpInfo(scope, code, operation, opts);
        }

        /**
         * Execute patchFund request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The updated Fund. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Fund> _callback) throws ApiException {
            return patchFundAsync(scope, code, operation, _callback);
        }

        /**
         * Execute patchFund request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The updated Fund. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Fund> _callback, ConfigurationOptions opts) throws ApiException {
            return patchFundAsync(scope, code, operation, _callback, opts);
        }
    }

    /**
     * [EXPERIMENTAL] PatchFund: Patch a Fund.
     * Update fields on a Fund.  The behaviour is defined by the JSON Patch specification.    Currently supported fields are: DisplayName, Description, PortfolioIds, FundConfigurationId, ShareClassInstruments, Type, InceptionDate, DecimalPlaces, PrimaryNavType, AdditionalNavTypes, AborId, YearEndDate.
     * @param scope The scope of the Fund. (required)
     * @param code The code of the Fund. Together with the scope this uniquely identifies the Fund. (required)
     * @param operation The json patch document. For more information see: https://datatracker.ietf.org/doc/html/rfc6902. (required)
     * @return APIpatchFundRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated Fund. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIpatchFundRequest patchFund(String scope, String code, List<Operation> operation) {
        return new APIpatchFundRequest(scope, code, operation);
    }
    private okhttp3.Call setShareClassInstrumentsCall(String scope, String code, SetShareClassInstrumentsRequest setShareClassInstrumentsRequest, final ApiCallback _callback) throws ApiException {
        return setShareClassInstrumentsCall(scope, code, setShareClassInstrumentsRequest,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call setShareClassInstrumentsCall(String scope, String code, SetShareClassInstrumentsRequest setShareClassInstrumentsRequest, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = setShareClassInstrumentsRequest;

        // create path and map variables
        String localVarPath = "/api/funds/{scope}/{code}/shareclasses"
            .replace("{" + "scope" + "}", localVarApiClient.escapeString(scope.toString()))
            .replace("{" + "code" + "}", localVarApiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setShareClassInstrumentsValidateBeforeCall(String scope, String code, SetShareClassInstrumentsRequest setShareClassInstrumentsRequest, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling setShareClassInstruments(Async)");
        }

        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling setShareClassInstruments(Async)");
        }

        // verify the required parameter 'setShareClassInstrumentsRequest' is set
        if (setShareClassInstrumentsRequest == null) {
            throw new ApiException("Missing the required parameter 'setShareClassInstrumentsRequest' when calling setShareClassInstruments(Async)");
        }

        return setShareClassInstrumentsCall(scope, code, setShareClassInstrumentsRequest, _callback, opts);

    }


    private ApiResponse<Fund> setShareClassInstrumentsWithHttpInfo(String scope, String code, SetShareClassInstrumentsRequest setShareClassInstrumentsRequest) throws ApiException {
        okhttp3.Call localVarCall = setShareClassInstrumentsValidateBeforeCall(scope, code, setShareClassInstrumentsRequest, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<Fund>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<Fund> setShareClassInstrumentsWithHttpInfo(String scope, String code, SetShareClassInstrumentsRequest setShareClassInstrumentsRequest, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = setShareClassInstrumentsValidateBeforeCall(scope, code, setShareClassInstrumentsRequest, null, opts);
        Type localVarReturnType = new TypeToken<Fund>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call setShareClassInstrumentsAsync(String scope, String code, SetShareClassInstrumentsRequest setShareClassInstrumentsRequest, final ApiCallback<Fund> _callback) throws ApiException {

        okhttp3.Call localVarCall = setShareClassInstrumentsValidateBeforeCall(scope, code, setShareClassInstrumentsRequest, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<Fund>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call setShareClassInstrumentsAsync(String scope, String code, SetShareClassInstrumentsRequest setShareClassInstrumentsRequest, final ApiCallback<Fund> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = setShareClassInstrumentsValidateBeforeCall(scope, code, setShareClassInstrumentsRequest, _callback, opts);
        Type localVarReturnType = new TypeToken<Fund>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIsetShareClassInstrumentsRequest {
        private final String scope;
        private final String code;
        private final SetShareClassInstrumentsRequest setShareClassInstrumentsRequest;

        private APIsetShareClassInstrumentsRequest(String scope, String code, SetShareClassInstrumentsRequest setShareClassInstrumentsRequest) {
            this.scope = scope;
            this.code = code;
            this.setShareClassInstrumentsRequest = setShareClassInstrumentsRequest;
        }

        /**
         * Build call for setShareClassInstruments
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The updated fund. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return setShareClassInstrumentsCall(scope, code, setShareClassInstrumentsRequest, _callback);
        }

        /**
         * Execute setShareClassInstruments request
         * @return Fund
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The updated fund. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public Fund execute() throws ApiException {
            ApiResponse<Fund> localVarResp = setShareClassInstrumentsWithHttpInfo(scope, code, setShareClassInstrumentsRequest);
            return localVarResp.getData();
        }

        /**
         * Execute setShareClassInstruments request. Use any specified configuration options to override any other configuration for this request only.
         * @return Fund
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The updated fund. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public Fund execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<Fund> localVarResp = setShareClassInstrumentsWithHttpInfo(scope, code, setShareClassInstrumentsRequest, opts);
            return localVarResp.getData();
        }

        /**
         * Execute setShareClassInstruments request with HTTP info returned
         * @return ApiResponse&lt;Fund&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The updated fund. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Fund> executeWithHttpInfo() throws ApiException {
            return setShareClassInstrumentsWithHttpInfo(scope, code, setShareClassInstrumentsRequest);
        }

        /**
         * Execute setShareClassInstruments request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;Fund&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The updated fund. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Fund> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return setShareClassInstrumentsWithHttpInfo(scope, code, setShareClassInstrumentsRequest, opts);
        }

        /**
         * Execute setShareClassInstruments request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The updated fund. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Fund> _callback) throws ApiException {
            return setShareClassInstrumentsAsync(scope, code, setShareClassInstrumentsRequest, _callback);
        }

        /**
         * Execute setShareClassInstruments request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The updated fund. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Fund> _callback, ConfigurationOptions opts) throws ApiException {
            return setShareClassInstrumentsAsync(scope, code, setShareClassInstrumentsRequest, _callback, opts);
        }
    }

    /**
     * [EXPERIMENTAL] SetShareClassInstruments: Set the ShareClass Instruments on a fund.
     * Update the ShareClass Instruments on an existing fund with the set of instruments provided.
     * @param scope The scope of the Fund. (required)
     * @param code The code of the Fund. (required)
     * @param setShareClassInstrumentsRequest The scopes and instrument identifiers for the instruments to be set. (required)
     * @return APIsetShareClassInstrumentsRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated fund. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIsetShareClassInstrumentsRequest setShareClassInstruments(String scope, String code, SetShareClassInstrumentsRequest setShareClassInstrumentsRequest) {
        return new APIsetShareClassInstrumentsRequest(scope, code, setShareClassInstrumentsRequest);
    }
    private okhttp3.Call upsertBookmarkCall(String scope, String code, UpsertFundBookmarkRequest upsertFundBookmarkRequest, String navTypeCode, final ApiCallback _callback) throws ApiException {
        return upsertBookmarkCall(scope, code, upsertFundBookmarkRequest, navTypeCode,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call upsertBookmarkCall(String scope, String code, UpsertFundBookmarkRequest upsertFundBookmarkRequest, String navTypeCode, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = upsertFundBookmarkRequest;

        // create path and map variables
        String localVarPath = "/api/funds/{scope}/{code}/bookmarks"
            .replace("{" + "scope" + "}", localVarApiClient.escapeString(scope.toString()))
            .replace("{" + "code" + "}", localVarApiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (navTypeCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("navTypeCode", navTypeCode));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call upsertBookmarkValidateBeforeCall(String scope, String code, UpsertFundBookmarkRequest upsertFundBookmarkRequest, String navTypeCode, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling upsertBookmark(Async)");
        }

        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling upsertBookmark(Async)");
        }

        // verify the required parameter 'upsertFundBookmarkRequest' is set
        if (upsertFundBookmarkRequest == null) {
            throw new ApiException("Missing the required parameter 'upsertFundBookmarkRequest' when calling upsertBookmark(Async)");
        }

        return upsertBookmarkCall(scope, code, upsertFundBookmarkRequest, navTypeCode, _callback, opts);

    }


    private ApiResponse<FundCalendarEntry> upsertBookmarkWithHttpInfo(String scope, String code, UpsertFundBookmarkRequest upsertFundBookmarkRequest, String navTypeCode) throws ApiException {
        okhttp3.Call localVarCall = upsertBookmarkValidateBeforeCall(scope, code, upsertFundBookmarkRequest, navTypeCode, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<FundCalendarEntry>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<FundCalendarEntry> upsertBookmarkWithHttpInfo(String scope, String code, UpsertFundBookmarkRequest upsertFundBookmarkRequest, String navTypeCode, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = upsertBookmarkValidateBeforeCall(scope, code, upsertFundBookmarkRequest, navTypeCode, null, opts);
        Type localVarReturnType = new TypeToken<FundCalendarEntry>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call upsertBookmarkAsync(String scope, String code, UpsertFundBookmarkRequest upsertFundBookmarkRequest, String navTypeCode, final ApiCallback<FundCalendarEntry> _callback) throws ApiException {

        okhttp3.Call localVarCall = upsertBookmarkValidateBeforeCall(scope, code, upsertFundBookmarkRequest, navTypeCode, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<FundCalendarEntry>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call upsertBookmarkAsync(String scope, String code, UpsertFundBookmarkRequest upsertFundBookmarkRequest, String navTypeCode, final ApiCallback<FundCalendarEntry> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = upsertBookmarkValidateBeforeCall(scope, code, upsertFundBookmarkRequest, navTypeCode, _callback, opts);
        Type localVarReturnType = new TypeToken<FundCalendarEntry>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIupsertBookmarkRequest {
        private final String scope;
        private final String code;
        private final UpsertFundBookmarkRequest upsertFundBookmarkRequest;
        private String navTypeCode;

        private APIupsertBookmarkRequest(String scope, String code, UpsertFundBookmarkRequest upsertFundBookmarkRequest) {
            this.scope = scope;
            this.code = code;
            this.upsertFundBookmarkRequest = upsertFundBookmarkRequest;
        }

        /**
         * Set navTypeCode
         * @param navTypeCode When provided, Upserts the Valuation Point against the specified NAV Type. When not provided, the Primary NAV Type will be used. (optional)
         * @return APIupsertBookmarkRequest
         */
        public APIupsertBookmarkRequest navTypeCode(String navTypeCode) {
            this.navTypeCode = navTypeCode;
            return this;
        }

        /**
         * Build call for upsertBookmark
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The updated or inserted Bookmark </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return upsertBookmarkCall(scope, code, upsertFundBookmarkRequest, navTypeCode, _callback);
        }

        /**
         * Execute upsertBookmark request
         * @return FundCalendarEntry
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The updated or inserted Bookmark </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public FundCalendarEntry execute() throws ApiException {
            ApiResponse<FundCalendarEntry> localVarResp = upsertBookmarkWithHttpInfo(scope, code, upsertFundBookmarkRequest, navTypeCode);
            return localVarResp.getData();
        }

        /**
         * Execute upsertBookmark request. Use any specified configuration options to override any other configuration for this request only.
         * @return FundCalendarEntry
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The updated or inserted Bookmark </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public FundCalendarEntry execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<FundCalendarEntry> localVarResp = upsertBookmarkWithHttpInfo(scope, code, upsertFundBookmarkRequest, navTypeCode, opts);
            return localVarResp.getData();
        }

        /**
         * Execute upsertBookmark request with HTTP info returned
         * @return ApiResponse&lt;FundCalendarEntry&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The updated or inserted Bookmark </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<FundCalendarEntry> executeWithHttpInfo() throws ApiException {
            return upsertBookmarkWithHttpInfo(scope, code, upsertFundBookmarkRequest, navTypeCode);
        }

        /**
         * Execute upsertBookmark request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;FundCalendarEntry&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The updated or inserted Bookmark </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<FundCalendarEntry> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return upsertBookmarkWithHttpInfo(scope, code, upsertFundBookmarkRequest, navTypeCode, opts);
        }

        /**
         * Execute upsertBookmark request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The updated or inserted Bookmark </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<FundCalendarEntry> _callback) throws ApiException {
            return upsertBookmarkAsync(scope, code, upsertFundBookmarkRequest, navTypeCode, _callback);
        }

        /**
         * Execute upsertBookmark request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The updated or inserted Bookmark </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<FundCalendarEntry> _callback, ConfigurationOptions opts) throws ApiException {
            return upsertBookmarkAsync(scope, code, upsertFundBookmarkRequest, navTypeCode, _callback, opts);
        }
    }

    /**
     * [EXPERIMENTAL] UpsertBookmark: Upsert a bookmark.
     * This method will update or upsert a Bookmark for the Fund.
     * @param scope The scope of the Fund. (required)
     * @param code The code of the Fund. Together with the scope this uniquely identifies the Fund. (required)
     * @param upsertFundBookmarkRequest The bookmark definition to Upsert (required)
     * @return APIupsertBookmarkRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated or inserted Bookmark </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIupsertBookmarkRequest upsertBookmark(String scope, String code, UpsertFundBookmarkRequest upsertFundBookmarkRequest) {
        return new APIupsertBookmarkRequest(scope, code, upsertFundBookmarkRequest);
    }
    private okhttp3.Call upsertDiaryEntryTypeValuationPointCall(String scope, String code, UpsertValuationPointRequest upsertValuationPointRequest, String navTypeCode, final ApiCallback _callback) throws ApiException {
        return upsertDiaryEntryTypeValuationPointCall(scope, code, upsertValuationPointRequest, navTypeCode,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call upsertDiaryEntryTypeValuationPointCall(String scope, String code, UpsertValuationPointRequest upsertValuationPointRequest, String navTypeCode, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = upsertValuationPointRequest;

        // create path and map variables
        String localVarPath = "/api/funds/{scope}/{code}/valuationpoints"
            .replace("{" + "scope" + "}", localVarApiClient.escapeString(scope.toString()))
            .replace("{" + "code" + "}", localVarApiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (navTypeCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("navTypeCode", navTypeCode));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call upsertDiaryEntryTypeValuationPointValidateBeforeCall(String scope, String code, UpsertValuationPointRequest upsertValuationPointRequest, String navTypeCode, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling upsertDiaryEntryTypeValuationPoint(Async)");
        }

        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling upsertDiaryEntryTypeValuationPoint(Async)");
        }

        // verify the required parameter 'upsertValuationPointRequest' is set
        if (upsertValuationPointRequest == null) {
            throw new ApiException("Missing the required parameter 'upsertValuationPointRequest' when calling upsertDiaryEntryTypeValuationPoint(Async)");
        }

        return upsertDiaryEntryTypeValuationPointCall(scope, code, upsertValuationPointRequest, navTypeCode, _callback, opts);

    }


    private ApiResponse<DiaryEntry> upsertDiaryEntryTypeValuationPointWithHttpInfo(String scope, String code, UpsertValuationPointRequest upsertValuationPointRequest, String navTypeCode) throws ApiException {
        okhttp3.Call localVarCall = upsertDiaryEntryTypeValuationPointValidateBeforeCall(scope, code, upsertValuationPointRequest, navTypeCode, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<DiaryEntry>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<DiaryEntry> upsertDiaryEntryTypeValuationPointWithHttpInfo(String scope, String code, UpsertValuationPointRequest upsertValuationPointRequest, String navTypeCode, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = upsertDiaryEntryTypeValuationPointValidateBeforeCall(scope, code, upsertValuationPointRequest, navTypeCode, null, opts);
        Type localVarReturnType = new TypeToken<DiaryEntry>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call upsertDiaryEntryTypeValuationPointAsync(String scope, String code, UpsertValuationPointRequest upsertValuationPointRequest, String navTypeCode, final ApiCallback<DiaryEntry> _callback) throws ApiException {

        okhttp3.Call localVarCall = upsertDiaryEntryTypeValuationPointValidateBeforeCall(scope, code, upsertValuationPointRequest, navTypeCode, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<DiaryEntry>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call upsertDiaryEntryTypeValuationPointAsync(String scope, String code, UpsertValuationPointRequest upsertValuationPointRequest, String navTypeCode, final ApiCallback<DiaryEntry> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = upsertDiaryEntryTypeValuationPointValidateBeforeCall(scope, code, upsertValuationPointRequest, navTypeCode, _callback, opts);
        Type localVarReturnType = new TypeToken<DiaryEntry>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIupsertDiaryEntryTypeValuationPointRequest {
        private final String scope;
        private final String code;
        private final UpsertValuationPointRequest upsertValuationPointRequest;
        private String navTypeCode;

        private APIupsertDiaryEntryTypeValuationPointRequest(String scope, String code, UpsertValuationPointRequest upsertValuationPointRequest) {
            this.scope = scope;
            this.code = code;
            this.upsertValuationPointRequest = upsertValuationPointRequest;
        }

        /**
         * Set navTypeCode
         * @param navTypeCode When provided, Upserts the Valuation Point against the specified NAV Type. When not provided the Primary NAV Type will be used. (optional)
         * @return APIupsertDiaryEntryTypeValuationPointRequest
         */
        public APIupsertDiaryEntryTypeValuationPointRequest navTypeCode(String navTypeCode) {
            this.navTypeCode = navTypeCode;
            return this;
        }

        /**
         * Build call for upsertDiaryEntryTypeValuationPoint
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The updated or inserted estimated Valuation Point </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return upsertDiaryEntryTypeValuationPointCall(scope, code, upsertValuationPointRequest, navTypeCode, _callback);
        }

        /**
         * Execute upsertDiaryEntryTypeValuationPoint request
         * @return DiaryEntry
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The updated or inserted estimated Valuation Point </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public DiaryEntry execute() throws ApiException {
            ApiResponse<DiaryEntry> localVarResp = upsertDiaryEntryTypeValuationPointWithHttpInfo(scope, code, upsertValuationPointRequest, navTypeCode);
            return localVarResp.getData();
        }

        /**
         * Execute upsertDiaryEntryTypeValuationPoint request. Use any specified configuration options to override any other configuration for this request only.
         * @return DiaryEntry
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The updated or inserted estimated Valuation Point </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public DiaryEntry execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<DiaryEntry> localVarResp = upsertDiaryEntryTypeValuationPointWithHttpInfo(scope, code, upsertValuationPointRequest, navTypeCode, opts);
            return localVarResp.getData();
        }

        /**
         * Execute upsertDiaryEntryTypeValuationPoint request with HTTP info returned
         * @return ApiResponse&lt;DiaryEntry&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The updated or inserted estimated Valuation Point </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DiaryEntry> executeWithHttpInfo() throws ApiException {
            return upsertDiaryEntryTypeValuationPointWithHttpInfo(scope, code, upsertValuationPointRequest, navTypeCode);
        }

        /**
         * Execute upsertDiaryEntryTypeValuationPoint request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;DiaryEntry&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The updated or inserted estimated Valuation Point </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DiaryEntry> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return upsertDiaryEntryTypeValuationPointWithHttpInfo(scope, code, upsertValuationPointRequest, navTypeCode, opts);
        }

        /**
         * Execute upsertDiaryEntryTypeValuationPoint request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The updated or inserted estimated Valuation Point </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DiaryEntry> _callback) throws ApiException {
            return upsertDiaryEntryTypeValuationPointAsync(scope, code, upsertValuationPointRequest, navTypeCode, _callback);
        }

        /**
         * Execute upsertDiaryEntryTypeValuationPoint request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The updated or inserted estimated Valuation Point </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DiaryEntry> _callback, ConfigurationOptions opts) throws ApiException {
            return upsertDiaryEntryTypeValuationPointAsync(scope, code, upsertValuationPointRequest, navTypeCode, _callback, opts);
        }
    }

    /**
     * [EXPERIMENTAL] UpsertDiaryEntryTypeValuationPoint: Upsert Valuation Point.
     * Update or insert the estimate Valuation Point.     If the Valuation Point does not exist, this method will create it in estimate state.     If the Valuation Point already exists and is in estimate state, the Valuation Point will be updated with the newly specified information in this request.
     * @param scope The scope of the Fund. (required)
     * @param code The code of the Fund. Together with the scope this uniquely identifies the Fund. (required)
     * @param upsertValuationPointRequest The Valuation Point Estimate definition to Upsert (required)
     * @return APIupsertDiaryEntryTypeValuationPointRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated or inserted estimated Valuation Point </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIupsertDiaryEntryTypeValuationPointRequest upsertDiaryEntryTypeValuationPoint(String scope, String code, UpsertValuationPointRequest upsertValuationPointRequest) {
        return new APIupsertDiaryEntryTypeValuationPointRequest(scope, code, upsertValuationPointRequest);
    }
    private okhttp3.Call upsertFeePropertiesCall(String scope, String code, String feeCode, Map<String, Property> requestBody, final ApiCallback _callback) throws ApiException {
        return upsertFeePropertiesCall(scope, code, feeCode, requestBody,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call upsertFeePropertiesCall(String scope, String code, String feeCode, Map<String, Property> requestBody, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/api/funds/{scope}/{code}/fees/{feeCode}/properties/$upsert"
            .replace("{" + "scope" + "}", localVarApiClient.escapeString(scope.toString()))
            .replace("{" + "code" + "}", localVarApiClient.escapeString(code.toString()))
            .replace("{" + "feeCode" + "}", localVarApiClient.escapeString(feeCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call upsertFeePropertiesValidateBeforeCall(String scope, String code, String feeCode, Map<String, Property> requestBody, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling upsertFeeProperties(Async)");
        }

        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling upsertFeeProperties(Async)");
        }

        // verify the required parameter 'feeCode' is set
        if (feeCode == null) {
            throw new ApiException("Missing the required parameter 'feeCode' when calling upsertFeeProperties(Async)");
        }

        return upsertFeePropertiesCall(scope, code, feeCode, requestBody, _callback, opts);

    }


    private ApiResponse<FeeProperties> upsertFeePropertiesWithHttpInfo(String scope, String code, String feeCode, Map<String, Property> requestBody) throws ApiException {
        okhttp3.Call localVarCall = upsertFeePropertiesValidateBeforeCall(scope, code, feeCode, requestBody, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<FeeProperties>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<FeeProperties> upsertFeePropertiesWithHttpInfo(String scope, String code, String feeCode, Map<String, Property> requestBody, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = upsertFeePropertiesValidateBeforeCall(scope, code, feeCode, requestBody, null, opts);
        Type localVarReturnType = new TypeToken<FeeProperties>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call upsertFeePropertiesAsync(String scope, String code, String feeCode, Map<String, Property> requestBody, final ApiCallback<FeeProperties> _callback) throws ApiException {

        okhttp3.Call localVarCall = upsertFeePropertiesValidateBeforeCall(scope, code, feeCode, requestBody, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<FeeProperties>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call upsertFeePropertiesAsync(String scope, String code, String feeCode, Map<String, Property> requestBody, final ApiCallback<FeeProperties> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = upsertFeePropertiesValidateBeforeCall(scope, code, feeCode, requestBody, _callback, opts);
        Type localVarReturnType = new TypeToken<FeeProperties>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIupsertFeePropertiesRequest {
        private final String scope;
        private final String code;
        private final String feeCode;
        private Map<String, Property> requestBody;

        private APIupsertFeePropertiesRequest(String scope, String code, String feeCode) {
            this.scope = scope;
            this.code = code;
            this.feeCode = feeCode;
        }

        /**
         * Set requestBody
         * @param requestBody The properties to be updated or inserted onto the Fee. Each property in   the request must be keyed by its unique property key. This has the format {domain}/{scope}/{code} e.g. \&quot;Fee/Manager/Id\&quot;. (optional)
         * @return APIupsertFeePropertiesRequest
         */
        public APIupsertFeePropertiesRequest requestBody(Map<String, Property> requestBody) {
            this.requestBody = requestBody;
            return this;
        }

        /**
         * Build call for upsertFeeProperties
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The updated or inserted properties </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return upsertFeePropertiesCall(scope, code, feeCode, requestBody, _callback);
        }

        /**
         * Execute upsertFeeProperties request
         * @return FeeProperties
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The updated or inserted properties </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public FeeProperties execute() throws ApiException {
            ApiResponse<FeeProperties> localVarResp = upsertFeePropertiesWithHttpInfo(scope, code, feeCode, requestBody);
            return localVarResp.getData();
        }

        /**
         * Execute upsertFeeProperties request. Use any specified configuration options to override any other configuration for this request only.
         * @return FeeProperties
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The updated or inserted properties </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public FeeProperties execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<FeeProperties> localVarResp = upsertFeePropertiesWithHttpInfo(scope, code, feeCode, requestBody, opts);
            return localVarResp.getData();
        }

        /**
         * Execute upsertFeeProperties request with HTTP info returned
         * @return ApiResponse&lt;FeeProperties&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The updated or inserted properties </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<FeeProperties> executeWithHttpInfo() throws ApiException {
            return upsertFeePropertiesWithHttpInfo(scope, code, feeCode, requestBody);
        }

        /**
         * Execute upsertFeeProperties request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;FeeProperties&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The updated or inserted properties </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<FeeProperties> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return upsertFeePropertiesWithHttpInfo(scope, code, feeCode, requestBody, opts);
        }

        /**
         * Execute upsertFeeProperties request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The updated or inserted properties </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<FeeProperties> _callback) throws ApiException {
            return upsertFeePropertiesAsync(scope, code, feeCode, requestBody, _callback);
        }

        /**
         * Execute upsertFeeProperties request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The updated or inserted properties </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<FeeProperties> _callback, ConfigurationOptions opts) throws ApiException {
            return upsertFeePropertiesAsync(scope, code, feeCode, requestBody, _callback, opts);
        }
    }

    /**
     * [EXPERIMENTAL] UpsertFeeProperties: Upsert Fee properties.
     * Update or insert one or more properties onto a single Fee. A property will be updated if it  already exists and inserted if it does not. All properties must be of the domain &#39;Fee&#39;.     Upserting a property that exists for an Fee, with a null value, will delete the instance of the property for that group.     Properties have an &lt;i&gt;effectiveFrom&lt;/i&gt; datetime for which the property is valid, and an &lt;i&gt;effectiveUntil&lt;/i&gt;  datetime until which the property is valid. Not supplying an &lt;i&gt;effectiveUntil&lt;/i&gt; datetime results in the property being  valid indefinitely, or until the next &lt;i&gt;effectiveFrom&lt;/i&gt; datetime of the property.
     * @param scope The scope of the Fund. (required)
     * @param code The code of the Fund. Together with the scope this uniquely identifies the Fund. (required)
     * @param feeCode The code of the Fee to update or insert the properties onto. (required)
     * @return APIupsertFeePropertiesRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated or inserted properties </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIupsertFeePropertiesRequest upsertFeeProperties(String scope, String code, String feeCode) {
        return new APIupsertFeePropertiesRequest(scope, code, feeCode);
    }
    private okhttp3.Call upsertFundPropertiesCall(String scope, String code, Map<String, Property> requestBody, final ApiCallback _callback) throws ApiException {
        return upsertFundPropertiesCall(scope, code, requestBody,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call upsertFundPropertiesCall(String scope, String code, Map<String, Property> requestBody, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/api/funds/{scope}/{code}/properties/$upsert"
            .replace("{" + "scope" + "}", localVarApiClient.escapeString(scope.toString()))
            .replace("{" + "code" + "}", localVarApiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call upsertFundPropertiesValidateBeforeCall(String scope, String code, Map<String, Property> requestBody, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling upsertFundProperties(Async)");
        }

        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling upsertFundProperties(Async)");
        }

        return upsertFundPropertiesCall(scope, code, requestBody, _callback, opts);

    }


    private ApiResponse<FundProperties> upsertFundPropertiesWithHttpInfo(String scope, String code, Map<String, Property> requestBody) throws ApiException {
        okhttp3.Call localVarCall = upsertFundPropertiesValidateBeforeCall(scope, code, requestBody, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<FundProperties>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<FundProperties> upsertFundPropertiesWithHttpInfo(String scope, String code, Map<String, Property> requestBody, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = upsertFundPropertiesValidateBeforeCall(scope, code, requestBody, null, opts);
        Type localVarReturnType = new TypeToken<FundProperties>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call upsertFundPropertiesAsync(String scope, String code, Map<String, Property> requestBody, final ApiCallback<FundProperties> _callback) throws ApiException {

        okhttp3.Call localVarCall = upsertFundPropertiesValidateBeforeCall(scope, code, requestBody, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<FundProperties>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call upsertFundPropertiesAsync(String scope, String code, Map<String, Property> requestBody, final ApiCallback<FundProperties> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = upsertFundPropertiesValidateBeforeCall(scope, code, requestBody, _callback, opts);
        Type localVarReturnType = new TypeToken<FundProperties>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIupsertFundPropertiesRequest {
        private final String scope;
        private final String code;
        private Map<String, Property> requestBody;

        private APIupsertFundPropertiesRequest(String scope, String code) {
            this.scope = scope;
            this.code = code;
        }

        /**
         * Set requestBody
         * @param requestBody The properties to be updated or inserted onto the Fund. Each property in   the request must be keyed by its unique property key. This has the format {domain}/{scope}/{code} e.g. \&quot;Fund/Manager/Id\&quot;. (optional)
         * @return APIupsertFundPropertiesRequest
         */
        public APIupsertFundPropertiesRequest requestBody(Map<String, Property> requestBody) {
            this.requestBody = requestBody;
            return this;
        }

        /**
         * Build call for upsertFundProperties
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The updated or inserted properties </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return upsertFundPropertiesCall(scope, code, requestBody, _callback);
        }

        /**
         * Execute upsertFundProperties request
         * @return FundProperties
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The updated or inserted properties </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public FundProperties execute() throws ApiException {
            ApiResponse<FundProperties> localVarResp = upsertFundPropertiesWithHttpInfo(scope, code, requestBody);
            return localVarResp.getData();
        }

        /**
         * Execute upsertFundProperties request. Use any specified configuration options to override any other configuration for this request only.
         * @return FundProperties
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The updated or inserted properties </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public FundProperties execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<FundProperties> localVarResp = upsertFundPropertiesWithHttpInfo(scope, code, requestBody, opts);
            return localVarResp.getData();
        }

        /**
         * Execute upsertFundProperties request with HTTP info returned
         * @return ApiResponse&lt;FundProperties&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The updated or inserted properties </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<FundProperties> executeWithHttpInfo() throws ApiException {
            return upsertFundPropertiesWithHttpInfo(scope, code, requestBody);
        }

        /**
         * Execute upsertFundProperties request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;FundProperties&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The updated or inserted properties </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<FundProperties> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return upsertFundPropertiesWithHttpInfo(scope, code, requestBody, opts);
        }

        /**
         * Execute upsertFundProperties request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The updated or inserted properties </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<FundProperties> _callback) throws ApiException {
            return upsertFundPropertiesAsync(scope, code, requestBody, _callback);
        }

        /**
         * Execute upsertFundProperties request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The updated or inserted properties </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<FundProperties> _callback, ConfigurationOptions opts) throws ApiException {
            return upsertFundPropertiesAsync(scope, code, requestBody, _callback, opts);
        }
    }

    /**
     * [EXPERIMENTAL] UpsertFundProperties: Upsert Fund properties.
     * Update or insert one or more properties onto a single Fund. A property will be updated if it  already exists and inserted if it does not. All properties must be of the domain &#39;Fund&#39;.     Upserting a property that exists for an Fund, with a null value, will delete the instance of the property for that group.     Properties have an &lt;i&gt;effectiveFrom&lt;/i&gt; datetime for which the property is valid, and an &lt;i&gt;effectiveUntil&lt;/i&gt;  datetime until which the property is valid. Not supplying an &lt;i&gt;effectiveUntil&lt;/i&gt; datetime results in the property being  valid indefinitely, or until the next &lt;i&gt;effectiveFrom&lt;/i&gt; datetime of the property.
     * @param scope The scope of the Fund to update or insert the properties onto. (required)
     * @param code The code of the Fund to update or insert the properties onto. Together with the scope this uniquely identifies the Fund. (required)
     * @return APIupsertFundPropertiesRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated or inserted properties </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIupsertFundPropertiesRequest upsertFundProperties(String scope, String code) {
        return new APIupsertFundPropertiesRequest(scope, code);
    }
}
