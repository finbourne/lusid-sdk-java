/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.api;

import com.finbourne.lusid.ApiCallback;
import com.finbourne.lusid.ApiClient;
import com.finbourne.lusid.ApiException;
import com.finbourne.lusid.ApiResponse;
import com.finbourne.lusid.Configuration;
import com.finbourne.lusid.Pair;
import com.finbourne.lusid.ProgressRequestBody;
import com.finbourne.lusid.ProgressResponseBody;
import com.finbourne.lusid.extensions.ConfigurationOptions;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.finbourne.lusid.model.CheckDefinition;
import com.finbourne.lusid.model.CreateCheckDefinitionRequest;
import com.finbourne.lusid.model.DeleteDataQualityRule;
import com.finbourne.lusid.model.DeletedEntityResponse;
import com.finbourne.lusid.model.LusidProblemDetails;
import com.finbourne.lusid.model.LusidValidationProblemDetails;
import java.time.OffsetDateTime;
import com.finbourne.lusid.model.PagedResourceListOfCheckDefinition;
import com.finbourne.lusid.model.RunCheckRequest;
import com.finbourne.lusid.model.RunCheckResponse;
import com.finbourne.lusid.model.UpdateCheckDefinitionRequest;
import com.finbourne.lusid.model.UpsertDataQualityRule;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CheckDefinitionsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CheckDefinitionsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CheckDefinitionsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createCheckDefinitionCall(CreateCheckDefinitionRequest createCheckDefinitionRequest, final ApiCallback _callback) throws ApiException {
        return createCheckDefinitionCall(createCheckDefinitionRequest,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call createCheckDefinitionCall(CreateCheckDefinitionRequest createCheckDefinitionRequest, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createCheckDefinitionRequest;

        // create path and map variables
        String localVarPath = "/api/dataquality/checkdefinitions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createCheckDefinitionValidateBeforeCall(CreateCheckDefinitionRequest createCheckDefinitionRequest, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        return createCheckDefinitionCall(createCheckDefinitionRequest, _callback, opts);

    }


    private ApiResponse<CheckDefinition> createCheckDefinitionWithHttpInfo(CreateCheckDefinitionRequest createCheckDefinitionRequest) throws ApiException {
        okhttp3.Call localVarCall = createCheckDefinitionValidateBeforeCall(createCheckDefinitionRequest, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<CheckDefinition>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<CheckDefinition> createCheckDefinitionWithHttpInfo(CreateCheckDefinitionRequest createCheckDefinitionRequest, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = createCheckDefinitionValidateBeforeCall(createCheckDefinitionRequest, null, opts);
        Type localVarReturnType = new TypeToken<CheckDefinition>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createCheckDefinitionAsync(CreateCheckDefinitionRequest createCheckDefinitionRequest, final ApiCallback<CheckDefinition> _callback) throws ApiException {

        okhttp3.Call localVarCall = createCheckDefinitionValidateBeforeCall(createCheckDefinitionRequest, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<CheckDefinition>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call createCheckDefinitionAsync(CreateCheckDefinitionRequest createCheckDefinitionRequest, final ApiCallback<CheckDefinition> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = createCheckDefinitionValidateBeforeCall(createCheckDefinitionRequest, _callback, opts);
        Type localVarReturnType = new TypeToken<CheckDefinition>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIcreateCheckDefinitionRequest {
        private CreateCheckDefinitionRequest createCheckDefinitionRequest;

        private APIcreateCheckDefinitionRequest() {
        }

        /**
         * Set createCheckDefinitionRequest
         * @param createCheckDefinitionRequest The request containing the details of the Check Definition (optional)
         * @return APIcreateCheckDefinitionRequest
         */
        public APIcreateCheckDefinitionRequest createCheckDefinitionRequest(CreateCheckDefinitionRequest createCheckDefinitionRequest) {
            this.createCheckDefinitionRequest = createCheckDefinitionRequest;
            return this;
        }

        /**
         * Build call for createCheckDefinition
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The created Check Definition </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return createCheckDefinitionCall(createCheckDefinitionRequest, _callback);
        }

        /**
         * Execute createCheckDefinition request
         * @return CheckDefinition
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The created Check Definition </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public CheckDefinition execute() throws ApiException {
            ApiResponse<CheckDefinition> localVarResp = createCheckDefinitionWithHttpInfo(createCheckDefinitionRequest);
            return localVarResp.getData();
        }

        /**
         * Execute createCheckDefinition request. Use any specified configuration options to override any other configuration for this request only.
         * @return CheckDefinition
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The created Check Definition </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public CheckDefinition execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<CheckDefinition> localVarResp = createCheckDefinitionWithHttpInfo(createCheckDefinitionRequest, opts);
            return localVarResp.getData();
        }

        /**
         * Execute createCheckDefinition request with HTTP info returned
         * @return ApiResponse&lt;CheckDefinition&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The created Check Definition </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CheckDefinition> executeWithHttpInfo() throws ApiException {
            return createCheckDefinitionWithHttpInfo(createCheckDefinitionRequest);
        }

        /**
         * Execute createCheckDefinition request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;CheckDefinition&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The created Check Definition </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CheckDefinition> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return createCheckDefinitionWithHttpInfo(createCheckDefinitionRequest, opts);
        }

        /**
         * Execute createCheckDefinition request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The created Check Definition </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CheckDefinition> _callback) throws ApiException {
            return createCheckDefinitionAsync(createCheckDefinitionRequest, _callback);
        }

        /**
         * Execute createCheckDefinition request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The created Check Definition </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CheckDefinition> _callback, ConfigurationOptions opts) throws ApiException {
            return createCheckDefinitionAsync(createCheckDefinitionRequest, _callback, opts);
        }
    }

    /**
     * [EXPERIMENTAL] CreateCheckDefinition: Create a Check Definition
     * Creates a Check Definition. Returns the created Check Definition at the current effectiveAt.  Note that Check Definitions are mono-temporal, however they can have Time-Variant Properties.  Upserted Properties will be returned at the latest AsAt and EffectiveAt
     * @return APIcreateCheckDefinitionRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The created Check Definition </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIcreateCheckDefinitionRequest createCheckDefinition() {
        return new APIcreateCheckDefinitionRequest();
    }
    private okhttp3.Call deleteCheckDefinitionCall(String scope, String code, final ApiCallback _callback) throws ApiException {
        return deleteCheckDefinitionCall(scope, code,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call deleteCheckDefinitionCall(String scope, String code, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/dataquality/checkdefinitions/{scope}/{code}"
            .replace("{" + "scope" + "}", localVarApiClient.escapeString(scope.toString()))
            .replace("{" + "code" + "}", localVarApiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteCheckDefinitionValidateBeforeCall(String scope, String code, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling deleteCheckDefinition(Async)");
        }

        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling deleteCheckDefinition(Async)");
        }

        return deleteCheckDefinitionCall(scope, code, _callback, opts);

    }


    private ApiResponse<DeletedEntityResponse> deleteCheckDefinitionWithHttpInfo(String scope, String code) throws ApiException {
        okhttp3.Call localVarCall = deleteCheckDefinitionValidateBeforeCall(scope, code, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<DeletedEntityResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<DeletedEntityResponse> deleteCheckDefinitionWithHttpInfo(String scope, String code, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = deleteCheckDefinitionValidateBeforeCall(scope, code, null, opts);
        Type localVarReturnType = new TypeToken<DeletedEntityResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteCheckDefinitionAsync(String scope, String code, final ApiCallback<DeletedEntityResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteCheckDefinitionValidateBeforeCall(scope, code, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<DeletedEntityResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call deleteCheckDefinitionAsync(String scope, String code, final ApiCallback<DeletedEntityResponse> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = deleteCheckDefinitionValidateBeforeCall(scope, code, _callback, opts);
        Type localVarReturnType = new TypeToken<DeletedEntityResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIdeleteCheckDefinitionRequest {
        private final String scope;
        private final String code;

        private APIdeleteCheckDefinitionRequest(String scope, String code) {
            this.scope = scope;
            this.code = code;
        }

        /**
         * Build call for deleteCheckDefinition
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The deleted entity metadata </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteCheckDefinitionCall(scope, code, _callback);
        }

        /**
         * Execute deleteCheckDefinition request
         * @return DeletedEntityResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The deleted entity metadata </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public DeletedEntityResponse execute() throws ApiException {
            ApiResponse<DeletedEntityResponse> localVarResp = deleteCheckDefinitionWithHttpInfo(scope, code);
            return localVarResp.getData();
        }

        /**
         * Execute deleteCheckDefinition request. Use any specified configuration options to override any other configuration for this request only.
         * @return DeletedEntityResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The deleted entity metadata </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public DeletedEntityResponse execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<DeletedEntityResponse> localVarResp = deleteCheckDefinitionWithHttpInfo(scope, code, opts);
            return localVarResp.getData();
        }

        /**
         * Execute deleteCheckDefinition request with HTTP info returned
         * @return ApiResponse&lt;DeletedEntityResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The deleted entity metadata </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DeletedEntityResponse> executeWithHttpInfo() throws ApiException {
            return deleteCheckDefinitionWithHttpInfo(scope, code);
        }

        /**
         * Execute deleteCheckDefinition request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;DeletedEntityResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The deleted entity metadata </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DeletedEntityResponse> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return deleteCheckDefinitionWithHttpInfo(scope, code, opts);
        }

        /**
         * Execute deleteCheckDefinition request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The deleted entity metadata </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DeletedEntityResponse> _callback) throws ApiException {
            return deleteCheckDefinitionAsync(scope, code, _callback);
        }

        /**
         * Execute deleteCheckDefinition request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The deleted entity metadata </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DeletedEntityResponse> _callback, ConfigurationOptions opts) throws ApiException {
            return deleteCheckDefinitionAsync(scope, code, _callback, opts);
        }
    }

    /**
     * [EXPERIMENTAL] DeleteCheckDefinition: Deletes a particular Check Definition
     * The deletion will take effect from the Check Definition deletion datetime.  i.e. will no longer exist at any asAt datetime after the asAt datetime of deletion.
     * @param scope The scope of the specified Check Definition. (required)
     * @param code The code of the specified Check Definition. Together with the domain and scope this uniquely   identifies the Check Definition. (required)
     * @return APIdeleteCheckDefinitionRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The deleted entity metadata </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIdeleteCheckDefinitionRequest deleteCheckDefinition(String scope, String code) {
        return new APIdeleteCheckDefinitionRequest(scope, code);
    }
    private okhttp3.Call deleteRulesCall(String scope, String code, List<DeleteDataQualityRule> deleteDataQualityRule, final ApiCallback _callback) throws ApiException {
        return deleteRulesCall(scope, code, deleteDataQualityRule,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call deleteRulesCall(String scope, String code, List<DeleteDataQualityRule> deleteDataQualityRule, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteDataQualityRule;

        // create path and map variables
        String localVarPath = "/api/dataquality/checkdefinitions/{scope}/{code}/$deleteRules"
            .replace("{" + "scope" + "}", localVarApiClient.escapeString(scope.toString()))
            .replace("{" + "code" + "}", localVarApiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteRulesValidateBeforeCall(String scope, String code, List<DeleteDataQualityRule> deleteDataQualityRule, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling deleteRules(Async)");
        }

        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling deleteRules(Async)");
        }

        return deleteRulesCall(scope, code, deleteDataQualityRule, _callback, opts);

    }


    private ApiResponse<CheckDefinition> deleteRulesWithHttpInfo(String scope, String code, List<DeleteDataQualityRule> deleteDataQualityRule) throws ApiException {
        okhttp3.Call localVarCall = deleteRulesValidateBeforeCall(scope, code, deleteDataQualityRule, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<CheckDefinition>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<CheckDefinition> deleteRulesWithHttpInfo(String scope, String code, List<DeleteDataQualityRule> deleteDataQualityRule, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = deleteRulesValidateBeforeCall(scope, code, deleteDataQualityRule, null, opts);
        Type localVarReturnType = new TypeToken<CheckDefinition>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteRulesAsync(String scope, String code, List<DeleteDataQualityRule> deleteDataQualityRule, final ApiCallback<CheckDefinition> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteRulesValidateBeforeCall(scope, code, deleteDataQualityRule, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<CheckDefinition>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call deleteRulesAsync(String scope, String code, List<DeleteDataQualityRule> deleteDataQualityRule, final ApiCallback<CheckDefinition> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = deleteRulesValidateBeforeCall(scope, code, deleteDataQualityRule, _callback, opts);
        Type localVarReturnType = new TypeToken<CheckDefinition>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIdeleteRulesRequest {
        private final String scope;
        private final String code;
        private List<DeleteDataQualityRule> deleteDataQualityRule;

        private APIdeleteRulesRequest(String scope, String code) {
            this.scope = scope;
            this.code = code;
        }

        /**
         * Set deleteDataQualityRule
         * @param deleteDataQualityRule The request containing the rules to be deleted (optional)
         * @return APIdeleteRulesRequest
         */
        public APIdeleteRulesRequest deleteDataQualityRule(List<DeleteDataQualityRule> deleteDataQualityRule) {
            this.deleteDataQualityRule = deleteDataQualityRule;
            return this;
        }

        /**
         * Build call for deleteRules
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The updated check definition </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteRulesCall(scope, code, deleteDataQualityRule, _callback);
        }

        /**
         * Execute deleteRules request
         * @return CheckDefinition
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The updated check definition </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public CheckDefinition execute() throws ApiException {
            ApiResponse<CheckDefinition> localVarResp = deleteRulesWithHttpInfo(scope, code, deleteDataQualityRule);
            return localVarResp.getData();
        }

        /**
         * Execute deleteRules request. Use any specified configuration options to override any other configuration for this request only.
         * @return CheckDefinition
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The updated check definition </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public CheckDefinition execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<CheckDefinition> localVarResp = deleteRulesWithHttpInfo(scope, code, deleteDataQualityRule, opts);
            return localVarResp.getData();
        }

        /**
         * Execute deleteRules request with HTTP info returned
         * @return ApiResponse&lt;CheckDefinition&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The updated check definition </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CheckDefinition> executeWithHttpInfo() throws ApiException {
            return deleteRulesWithHttpInfo(scope, code, deleteDataQualityRule);
        }

        /**
         * Execute deleteRules request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;CheckDefinition&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The updated check definition </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CheckDefinition> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return deleteRulesWithHttpInfo(scope, code, deleteDataQualityRule, opts);
        }

        /**
         * Execute deleteRules request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The updated check definition </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CheckDefinition> _callback) throws ApiException {
            return deleteRulesAsync(scope, code, deleteDataQualityRule, _callback);
        }

        /**
         * Execute deleteRules request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The updated check definition </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CheckDefinition> _callback, ConfigurationOptions opts) throws ApiException {
            return deleteRulesAsync(scope, code, deleteDataQualityRule, _callback, opts);
        }
    }

    /**
     * [EXPERIMENTAL] DeleteRules: Delete rules on a particular Check Definition
     * Delete rules for a given check definition. This will not affect any other rules that are not included in the request.
     * @param scope The scope of the specified Check Definition. (required)
     * @param code The code of the specified Check Definition. Together with the domain and scope this uniquely   identifies the Check Definition. (required)
     * @return APIdeleteRulesRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated check definition </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIdeleteRulesRequest deleteRules(String scope, String code) {
        return new APIdeleteRulesRequest(scope, code);
    }
    private okhttp3.Call getCheckDefinitionCall(String scope, String code, OffsetDateTime asAt, String effectiveAt, List<String> propertyKeys, final ApiCallback _callback) throws ApiException {
        return getCheckDefinitionCall(scope, code, asAt, effectiveAt, propertyKeys,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call getCheckDefinitionCall(String scope, String code, OffsetDateTime asAt, String effectiveAt, List<String> propertyKeys, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/dataquality/checkdefinitions/{scope}/{code}"
            .replace("{" + "scope" + "}", localVarApiClient.escapeString(scope.toString()))
            .replace("{" + "code" + "}", localVarApiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (asAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asAt", asAt));
        }

        if (effectiveAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("effectiveAt", effectiveAt));
        }

        if (propertyKeys != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "propertyKeys", propertyKeys));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCheckDefinitionValidateBeforeCall(String scope, String code, OffsetDateTime asAt, String effectiveAt, List<String> propertyKeys, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling getCheckDefinition(Async)");
        }

        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling getCheckDefinition(Async)");
        }

        return getCheckDefinitionCall(scope, code, asAt, effectiveAt, propertyKeys, _callback, opts);

    }


    private ApiResponse<CheckDefinition> getCheckDefinitionWithHttpInfo(String scope, String code, OffsetDateTime asAt, String effectiveAt, List<String> propertyKeys) throws ApiException {
        okhttp3.Call localVarCall = getCheckDefinitionValidateBeforeCall(scope, code, asAt, effectiveAt, propertyKeys, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<CheckDefinition>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<CheckDefinition> getCheckDefinitionWithHttpInfo(String scope, String code, OffsetDateTime asAt, String effectiveAt, List<String> propertyKeys, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = getCheckDefinitionValidateBeforeCall(scope, code, asAt, effectiveAt, propertyKeys, null, opts);
        Type localVarReturnType = new TypeToken<CheckDefinition>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCheckDefinitionAsync(String scope, String code, OffsetDateTime asAt, String effectiveAt, List<String> propertyKeys, final ApiCallback<CheckDefinition> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCheckDefinitionValidateBeforeCall(scope, code, asAt, effectiveAt, propertyKeys, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<CheckDefinition>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call getCheckDefinitionAsync(String scope, String code, OffsetDateTime asAt, String effectiveAt, List<String> propertyKeys, final ApiCallback<CheckDefinition> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = getCheckDefinitionValidateBeforeCall(scope, code, asAt, effectiveAt, propertyKeys, _callback, opts);
        Type localVarReturnType = new TypeToken<CheckDefinition>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetCheckDefinitionRequest {
        private final String scope;
        private final String code;
        private OffsetDateTime asAt;
        private String effectiveAt;
        private List<String> propertyKeys;

        private APIgetCheckDefinitionRequest(String scope, String code) {
            this.scope = scope;
            this.code = code;
        }

        /**
         * Set asAt
         * @param asAt The asAt datetime at which to retrieve the Check Definition definition. Defaults to return   the latest version of the definition if not specified. (optional)
         * @return APIgetCheckDefinitionRequest
         */
        public APIgetCheckDefinitionRequest asAt(OffsetDateTime asAt) {
            this.asAt = asAt;
            return this;
        }

        /**
         * Set effectiveAt
         * @param effectiveAt The effective datetime or cut label at which to retrieve the check definition properties.   Defaults to the current LUSID system datetime if not specified. (optional)
         * @return APIgetCheckDefinitionRequest
         */
        public APIgetCheckDefinitionRequest effectiveAt(String effectiveAt) {
            this.effectiveAt = effectiveAt;
            return this;
        }

        /**
         * Set propertyKeys
         * @param propertyKeys A list of property keys from the &#39;CheckDefinition&#39; domain to decorate onto   the Check Definition.   These must have the format {domain}/{scope}/{code}, for example &#39;CheckDefinition/system/Name&#39;. (optional)
         * @return APIgetCheckDefinitionRequest
         */
        public APIgetCheckDefinitionRequest propertyKeys(List<String> propertyKeys) {
            this.propertyKeys = propertyKeys;
            return this;
        }

        /**
         * Build call for getCheckDefinition
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested Check Definition </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCheckDefinitionCall(scope, code, asAt, effectiveAt, propertyKeys, _callback);
        }

        /**
         * Execute getCheckDefinition request
         * @return CheckDefinition
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested Check Definition </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public CheckDefinition execute() throws ApiException {
            ApiResponse<CheckDefinition> localVarResp = getCheckDefinitionWithHttpInfo(scope, code, asAt, effectiveAt, propertyKeys);
            return localVarResp.getData();
        }

        /**
         * Execute getCheckDefinition request. Use any specified configuration options to override any other configuration for this request only.
         * @return CheckDefinition
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested Check Definition </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public CheckDefinition execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<CheckDefinition> localVarResp = getCheckDefinitionWithHttpInfo(scope, code, asAt, effectiveAt, propertyKeys, opts);
            return localVarResp.getData();
        }

        /**
         * Execute getCheckDefinition request with HTTP info returned
         * @return ApiResponse&lt;CheckDefinition&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested Check Definition </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CheckDefinition> executeWithHttpInfo() throws ApiException {
            return getCheckDefinitionWithHttpInfo(scope, code, asAt, effectiveAt, propertyKeys);
        }

        /**
         * Execute getCheckDefinition request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;CheckDefinition&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested Check Definition </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CheckDefinition> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return getCheckDefinitionWithHttpInfo(scope, code, asAt, effectiveAt, propertyKeys, opts);
        }

        /**
         * Execute getCheckDefinition request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested Check Definition </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CheckDefinition> _callback) throws ApiException {
            return getCheckDefinitionAsync(scope, code, asAt, effectiveAt, propertyKeys, _callback);
        }

        /**
         * Execute getCheckDefinition request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested Check Definition </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CheckDefinition> _callback, ConfigurationOptions opts) throws ApiException {
            return getCheckDefinitionAsync(scope, code, asAt, effectiveAt, propertyKeys, _callback, opts);
        }
    }

    /**
     * [EXPERIMENTAL] GetCheckDefinition: Get a single Check Definition by scope and code.
     * Retrieves one Check Definition by scope and code.  Check Definitions are mono-temporal. The EffectiveAt is only applied to Time-Variant Properties.
     * @param scope The scope of the specified Check Definition. (required)
     * @param code The code of the specified Check Definition. Together with the scope this uniquely   identifies the Check Definition. (required)
     * @return APIgetCheckDefinitionRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested Check Definition </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIgetCheckDefinitionRequest getCheckDefinition(String scope, String code) {
        return new APIgetCheckDefinitionRequest(scope, code);
    }
    private okhttp3.Call listCheckDefinitionsCall(OffsetDateTime asAt, String effectiveAt, String page, Integer limit, String filter, List<String> sortBy, List<String> propertyKeys, final ApiCallback _callback) throws ApiException {
        return listCheckDefinitionsCall(asAt, effectiveAt, page, limit, filter, sortBy, propertyKeys,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call listCheckDefinitionsCall(OffsetDateTime asAt, String effectiveAt, String page, Integer limit, String filter, List<String> sortBy, List<String> propertyKeys, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/dataquality/checkdefinitions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (asAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asAt", asAt));
        }

        if (effectiveAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("effectiveAt", effectiveAt));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (sortBy != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "sortBy", sortBy));
        }

        if (propertyKeys != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "propertyKeys", propertyKeys));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listCheckDefinitionsValidateBeforeCall(OffsetDateTime asAt, String effectiveAt, String page, Integer limit, String filter, List<String> sortBy, List<String> propertyKeys, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        return listCheckDefinitionsCall(asAt, effectiveAt, page, limit, filter, sortBy, propertyKeys, _callback, opts);

    }


    private ApiResponse<PagedResourceListOfCheckDefinition> listCheckDefinitionsWithHttpInfo(OffsetDateTime asAt, String effectiveAt, String page, Integer limit, String filter, List<String> sortBy, List<String> propertyKeys) throws ApiException {
        okhttp3.Call localVarCall = listCheckDefinitionsValidateBeforeCall(asAt, effectiveAt, page, limit, filter, sortBy, propertyKeys, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<PagedResourceListOfCheckDefinition>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<PagedResourceListOfCheckDefinition> listCheckDefinitionsWithHttpInfo(OffsetDateTime asAt, String effectiveAt, String page, Integer limit, String filter, List<String> sortBy, List<String> propertyKeys, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = listCheckDefinitionsValidateBeforeCall(asAt, effectiveAt, page, limit, filter, sortBy, propertyKeys, null, opts);
        Type localVarReturnType = new TypeToken<PagedResourceListOfCheckDefinition>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listCheckDefinitionsAsync(OffsetDateTime asAt, String effectiveAt, String page, Integer limit, String filter, List<String> sortBy, List<String> propertyKeys, final ApiCallback<PagedResourceListOfCheckDefinition> _callback) throws ApiException {

        okhttp3.Call localVarCall = listCheckDefinitionsValidateBeforeCall(asAt, effectiveAt, page, limit, filter, sortBy, propertyKeys, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<PagedResourceListOfCheckDefinition>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call listCheckDefinitionsAsync(OffsetDateTime asAt, String effectiveAt, String page, Integer limit, String filter, List<String> sortBy, List<String> propertyKeys, final ApiCallback<PagedResourceListOfCheckDefinition> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = listCheckDefinitionsValidateBeforeCall(asAt, effectiveAt, page, limit, filter, sortBy, propertyKeys, _callback, opts);
        Type localVarReturnType = new TypeToken<PagedResourceListOfCheckDefinition>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIlistCheckDefinitionsRequest {
        private OffsetDateTime asAt;
        private String effectiveAt;
        private String page;
        private Integer limit;
        private String filter;
        private List<String> sortBy;
        private List<String> propertyKeys;

        private APIlistCheckDefinitionsRequest() {
        }

        /**
         * Set asAt
         * @param asAt The asAt datetime at which to list the Check Definitions. Defaults to returning the latest version of each Check Definition if not specified. (optional)
         * @return APIlistCheckDefinitionsRequest
         */
        public APIlistCheckDefinitionsRequest asAt(OffsetDateTime asAt) {
            this.asAt = asAt;
            return this;
        }

        /**
         * Set effectiveAt
         * @param effectiveAt The effective datetime or cut label at which to list the Check Definitions.   Note that Check Definitions are monotemporal, the effectiveAt is for Timevariant Properties on the Check Definition only.   Defaults to the current LUSID system datetime if not specified. (optional)
         * @return APIlistCheckDefinitionsRequest
         */
        public APIlistCheckDefinitionsRequest effectiveAt(String effectiveAt) {
            this.effectiveAt = effectiveAt;
            return this;
        }

        /**
         * Set page
         * @param page The pagination token to use to continue listing Check Definitions; this   value is returned from the previous call. If a pagination token is provided, the filter, effectiveAt   and asAt fields must not have changed since the original request. (optional)
         * @return APIlistCheckDefinitionsRequest
         */
        public APIlistCheckDefinitionsRequest page(String page) {
            this.page = page;
            return this;
        }

        /**
         * Set limit
         * @param limit When paginating, limit the results to this number. Defaults to 100 if not specified. (optional)
         * @return APIlistCheckDefinitionsRequest
         */
        public APIlistCheckDefinitionsRequest limit(Integer limit) {
            this.limit = limit;
            return this;
        }

        /**
         * Set filter
         * @param filter Expression to filter the results.   For example, to filter on the displayName, specify \&quot;displayName eq &#39;MyCheckDefinition&#39;\&quot;. For more information about filtering   results, see https://support.lusid.com/knowledgebase/article/KA-01914. (optional)
         * @return APIlistCheckDefinitionsRequest
         */
        public APIlistCheckDefinitionsRequest filter(String filter) {
            this.filter = filter;
            return this;
        }

        /**
         * Set sortBy
         * @param sortBy A list of field names or properties to sort by, each suffixed by \&quot; ASC\&quot; or \&quot; DESC\&quot; (optional)
         * @return APIlistCheckDefinitionsRequest
         */
        public APIlistCheckDefinitionsRequest sortBy(List<String> sortBy) {
            this.sortBy = sortBy;
            return this;
        }

        /**
         * Set propertyKeys
         * @param propertyKeys A list of property keys from the &#39;CheckDefinition&#39; domain to decorate onto each Check Definition.   These must take the format {domain}/{scope}/{code}, for example &#39;CheckDefinition/Account/id&#39;. (optional)
         * @return APIlistCheckDefinitionsRequest
         */
        public APIlistCheckDefinitionsRequest propertyKeys(List<String> propertyKeys) {
            this.propertyKeys = propertyKeys;
            return this;
        }

        /**
         * Build call for listCheckDefinitions
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested Check Definitions. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listCheckDefinitionsCall(asAt, effectiveAt, page, limit, filter, sortBy, propertyKeys, _callback);
        }

        /**
         * Execute listCheckDefinitions request
         * @return PagedResourceListOfCheckDefinition
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested Check Definitions. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public PagedResourceListOfCheckDefinition execute() throws ApiException {
            ApiResponse<PagedResourceListOfCheckDefinition> localVarResp = listCheckDefinitionsWithHttpInfo(asAt, effectiveAt, page, limit, filter, sortBy, propertyKeys);
            return localVarResp.getData();
        }

        /**
         * Execute listCheckDefinitions request. Use any specified configuration options to override any other configuration for this request only.
         * @return PagedResourceListOfCheckDefinition
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested Check Definitions. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public PagedResourceListOfCheckDefinition execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<PagedResourceListOfCheckDefinition> localVarResp = listCheckDefinitionsWithHttpInfo(asAt, effectiveAt, page, limit, filter, sortBy, propertyKeys, opts);
            return localVarResp.getData();
        }

        /**
         * Execute listCheckDefinitions request with HTTP info returned
         * @return ApiResponse&lt;PagedResourceListOfCheckDefinition&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested Check Definitions. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PagedResourceListOfCheckDefinition> executeWithHttpInfo() throws ApiException {
            return listCheckDefinitionsWithHttpInfo(asAt, effectiveAt, page, limit, filter, sortBy, propertyKeys);
        }

        /**
         * Execute listCheckDefinitions request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;PagedResourceListOfCheckDefinition&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested Check Definitions. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PagedResourceListOfCheckDefinition> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return listCheckDefinitionsWithHttpInfo(asAt, effectiveAt, page, limit, filter, sortBy, propertyKeys, opts);
        }

        /**
         * Execute listCheckDefinitions request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested Check Definitions. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PagedResourceListOfCheckDefinition> _callback) throws ApiException {
            return listCheckDefinitionsAsync(asAt, effectiveAt, page, limit, filter, sortBy, propertyKeys, _callback);
        }

        /**
         * Execute listCheckDefinitions request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested Check Definitions. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PagedResourceListOfCheckDefinition> _callback, ConfigurationOptions opts) throws ApiException {
            return listCheckDefinitionsAsync(asAt, effectiveAt, page, limit, filter, sortBy, propertyKeys, _callback, opts);
        }
    }

    /**
     * [EXPERIMENTAL] ListCheckDefinitions: List Check Definitions
     * List all the Check Definitions matching a particular criteria.
     * @return APIlistCheckDefinitionsRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested Check Definitions. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIlistCheckDefinitionsRequest listCheckDefinitions() {
        return new APIlistCheckDefinitionsRequest();
    }
    private okhttp3.Call runCheckDefinitionCall(String scope, String code, RunCheckRequest runCheckRequest, final ApiCallback _callback) throws ApiException {
        return runCheckDefinitionCall(scope, code, runCheckRequest,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call runCheckDefinitionCall(String scope, String code, RunCheckRequest runCheckRequest, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = runCheckRequest;

        // create path and map variables
        String localVarPath = "/api/dataquality/checkdefinitions/{scope}/{code}/$run"
            .replace("{" + "scope" + "}", localVarApiClient.escapeString(scope.toString()))
            .replace("{" + "code" + "}", localVarApiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call runCheckDefinitionValidateBeforeCall(String scope, String code, RunCheckRequest runCheckRequest, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling runCheckDefinition(Async)");
        }

        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling runCheckDefinition(Async)");
        }

        return runCheckDefinitionCall(scope, code, runCheckRequest, _callback, opts);

    }


    private ApiResponse<RunCheckResponse> runCheckDefinitionWithHttpInfo(String scope, String code, RunCheckRequest runCheckRequest) throws ApiException {
        okhttp3.Call localVarCall = runCheckDefinitionValidateBeforeCall(scope, code, runCheckRequest, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<RunCheckResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<RunCheckResponse> runCheckDefinitionWithHttpInfo(String scope, String code, RunCheckRequest runCheckRequest, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = runCheckDefinitionValidateBeforeCall(scope, code, runCheckRequest, null, opts);
        Type localVarReturnType = new TypeToken<RunCheckResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call runCheckDefinitionAsync(String scope, String code, RunCheckRequest runCheckRequest, final ApiCallback<RunCheckResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = runCheckDefinitionValidateBeforeCall(scope, code, runCheckRequest, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<RunCheckResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call runCheckDefinitionAsync(String scope, String code, RunCheckRequest runCheckRequest, final ApiCallback<RunCheckResponse> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = runCheckDefinitionValidateBeforeCall(scope, code, runCheckRequest, _callback, opts);
        Type localVarReturnType = new TypeToken<RunCheckResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIrunCheckDefinitionRequest {
        private final String scope;
        private final String code;
        private RunCheckRequest runCheckRequest;

        private APIrunCheckDefinitionRequest(String scope, String code) {
            this.scope = scope;
            this.code = code;
        }

        /**
         * Set runCheckRequest
         * @param runCheckRequest Run request defining what dataset to run against. (optional)
         * @return APIrunCheckDefinitionRequest
         */
        public APIrunCheckDefinitionRequest runCheckRequest(RunCheckRequest runCheckRequest) {
            this.runCheckRequest = runCheckRequest;
            return this;
        }

        /**
         * Build call for runCheckDefinition
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return runCheckDefinitionCall(scope, code, runCheckRequest, _callback);
        }

        /**
         * Execute runCheckDefinition request
         * @return RunCheckResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public RunCheckResponse execute() throws ApiException {
            ApiResponse<RunCheckResponse> localVarResp = runCheckDefinitionWithHttpInfo(scope, code, runCheckRequest);
            return localVarResp.getData();
        }

        /**
         * Execute runCheckDefinition request. Use any specified configuration options to override any other configuration for this request only.
         * @return RunCheckResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public RunCheckResponse execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<RunCheckResponse> localVarResp = runCheckDefinitionWithHttpInfo(scope, code, runCheckRequest, opts);
            return localVarResp.getData();
        }

        /**
         * Execute runCheckDefinition request with HTTP info returned
         * @return ApiResponse&lt;RunCheckResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<RunCheckResponse> executeWithHttpInfo() throws ApiException {
            return runCheckDefinitionWithHttpInfo(scope, code, runCheckRequest);
        }

        /**
         * Execute runCheckDefinition request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;RunCheckResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<RunCheckResponse> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return runCheckDefinitionWithHttpInfo(scope, code, runCheckRequest, opts);
        }

        /**
         * Execute runCheckDefinition request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<RunCheckResponse> _callback) throws ApiException {
            return runCheckDefinitionAsync(scope, code, runCheckRequest, _callback);
        }

        /**
         * Execute runCheckDefinition request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<RunCheckResponse> _callback, ConfigurationOptions opts) throws ApiException {
            return runCheckDefinitionAsync(scope, code, runCheckRequest, _callback, opts);
        }
    }

    /**
     * [EXPERIMENTAL] RunCheckDefinition: Runs a Check Definition against given dataset.
     * Runs a Check Definition against given dataset.
     * @param scope Scope of the CheckDefinition to run. (required)
     * @param code Code of the CheckDefinition to run. (required)
     * @return APIrunCheckDefinitionRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIrunCheckDefinitionRequest runCheckDefinition(String scope, String code) {
        return new APIrunCheckDefinitionRequest(scope, code);
    }
    private okhttp3.Call updateCheckDefinitionCall(String scope, String code, UpdateCheckDefinitionRequest updateCheckDefinitionRequest, final ApiCallback _callback) throws ApiException {
        return updateCheckDefinitionCall(scope, code, updateCheckDefinitionRequest,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call updateCheckDefinitionCall(String scope, String code, UpdateCheckDefinitionRequest updateCheckDefinitionRequest, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateCheckDefinitionRequest;

        // create path and map variables
        String localVarPath = "/api/dataquality/checkdefinitions/{scope}/{code}"
            .replace("{" + "scope" + "}", localVarApiClient.escapeString(scope.toString()))
            .replace("{" + "code" + "}", localVarApiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateCheckDefinitionValidateBeforeCall(String scope, String code, UpdateCheckDefinitionRequest updateCheckDefinitionRequest, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling updateCheckDefinition(Async)");
        }

        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling updateCheckDefinition(Async)");
        }

        return updateCheckDefinitionCall(scope, code, updateCheckDefinitionRequest, _callback, opts);

    }


    private ApiResponse<CheckDefinition> updateCheckDefinitionWithHttpInfo(String scope, String code, UpdateCheckDefinitionRequest updateCheckDefinitionRequest) throws ApiException {
        okhttp3.Call localVarCall = updateCheckDefinitionValidateBeforeCall(scope, code, updateCheckDefinitionRequest, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<CheckDefinition>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<CheckDefinition> updateCheckDefinitionWithHttpInfo(String scope, String code, UpdateCheckDefinitionRequest updateCheckDefinitionRequest, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = updateCheckDefinitionValidateBeforeCall(scope, code, updateCheckDefinitionRequest, null, opts);
        Type localVarReturnType = new TypeToken<CheckDefinition>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateCheckDefinitionAsync(String scope, String code, UpdateCheckDefinitionRequest updateCheckDefinitionRequest, final ApiCallback<CheckDefinition> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateCheckDefinitionValidateBeforeCall(scope, code, updateCheckDefinitionRequest, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<CheckDefinition>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call updateCheckDefinitionAsync(String scope, String code, UpdateCheckDefinitionRequest updateCheckDefinitionRequest, final ApiCallback<CheckDefinition> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = updateCheckDefinitionValidateBeforeCall(scope, code, updateCheckDefinitionRequest, _callback, opts);
        Type localVarReturnType = new TypeToken<CheckDefinition>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIupdateCheckDefinitionRequest {
        private final String scope;
        private final String code;
        private UpdateCheckDefinitionRequest updateCheckDefinitionRequest;

        private APIupdateCheckDefinitionRequest(String scope, String code) {
            this.scope = scope;
            this.code = code;
        }

        /**
         * Set updateCheckDefinitionRequest
         * @param updateCheckDefinitionRequest The request containing the updated details of the Check Definition (optional)
         * @return APIupdateCheckDefinitionRequest
         */
        public APIupdateCheckDefinitionRequest updateCheckDefinitionRequest(UpdateCheckDefinitionRequest updateCheckDefinitionRequest) {
            this.updateCheckDefinitionRequest = updateCheckDefinitionRequest;
            return this;
        }

        /**
         * Build call for updateCheckDefinition
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The updated version of the requested Check Definition </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return updateCheckDefinitionCall(scope, code, updateCheckDefinitionRequest, _callback);
        }

        /**
         * Execute updateCheckDefinition request
         * @return CheckDefinition
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The updated version of the requested Check Definition </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public CheckDefinition execute() throws ApiException {
            ApiResponse<CheckDefinition> localVarResp = updateCheckDefinitionWithHttpInfo(scope, code, updateCheckDefinitionRequest);
            return localVarResp.getData();
        }

        /**
         * Execute updateCheckDefinition request. Use any specified configuration options to override any other configuration for this request only.
         * @return CheckDefinition
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The updated version of the requested Check Definition </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public CheckDefinition execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<CheckDefinition> localVarResp = updateCheckDefinitionWithHttpInfo(scope, code, updateCheckDefinitionRequest, opts);
            return localVarResp.getData();
        }

        /**
         * Execute updateCheckDefinition request with HTTP info returned
         * @return ApiResponse&lt;CheckDefinition&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The updated version of the requested Check Definition </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CheckDefinition> executeWithHttpInfo() throws ApiException {
            return updateCheckDefinitionWithHttpInfo(scope, code, updateCheckDefinitionRequest);
        }

        /**
         * Execute updateCheckDefinition request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;CheckDefinition&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The updated version of the requested Check Definition </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CheckDefinition> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return updateCheckDefinitionWithHttpInfo(scope, code, updateCheckDefinitionRequest, opts);
        }

        /**
         * Execute updateCheckDefinition request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The updated version of the requested Check Definition </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CheckDefinition> _callback) throws ApiException {
            return updateCheckDefinitionAsync(scope, code, updateCheckDefinitionRequest, _callback);
        }

        /**
         * Execute updateCheckDefinition request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The updated version of the requested Check Definition </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CheckDefinition> _callback, ConfigurationOptions opts) throws ApiException {
            return updateCheckDefinitionAsync(scope, code, updateCheckDefinitionRequest, _callback, opts);
        }
    }

    /**
     * [EXPERIMENTAL] UpdateCheckDefinition: Update Check Definition defined by scope and code
     * Overwrites an existing Check Definition  Update request has the same required fields as Create apart from the id.  Returns the updated Check Definition at the current effectiveAt.  Note that Check Definitions are mono-temporal, however they can have Time-Variant Properties.  Updated Properties will be returned at the latest AsAt and EffectiveAt
     * @param scope The scope of the specified Check Definition. (required)
     * @param code The code of the specified Check Definition. Together with the domain and scope this uniquely identifies the Check Definition. (required)
     * @return APIupdateCheckDefinitionRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated version of the requested Check Definition </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIupdateCheckDefinitionRequest updateCheckDefinition(String scope, String code) {
        return new APIupdateCheckDefinitionRequest(scope, code);
    }
    private okhttp3.Call upsertRulesCall(String scope, String code, List<UpsertDataQualityRule> upsertDataQualityRule, final ApiCallback _callback) throws ApiException {
        return upsertRulesCall(scope, code, upsertDataQualityRule,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call upsertRulesCall(String scope, String code, List<UpsertDataQualityRule> upsertDataQualityRule, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = upsertDataQualityRule;

        // create path and map variables
        String localVarPath = "/api/dataquality/checkdefinitions/{scope}/{code}/$upsertRules"
            .replace("{" + "scope" + "}", localVarApiClient.escapeString(scope.toString()))
            .replace("{" + "code" + "}", localVarApiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call upsertRulesValidateBeforeCall(String scope, String code, List<UpsertDataQualityRule> upsertDataQualityRule, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling upsertRules(Async)");
        }

        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling upsertRules(Async)");
        }

        return upsertRulesCall(scope, code, upsertDataQualityRule, _callback, opts);

    }


    private ApiResponse<CheckDefinition> upsertRulesWithHttpInfo(String scope, String code, List<UpsertDataQualityRule> upsertDataQualityRule) throws ApiException {
        okhttp3.Call localVarCall = upsertRulesValidateBeforeCall(scope, code, upsertDataQualityRule, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<CheckDefinition>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<CheckDefinition> upsertRulesWithHttpInfo(String scope, String code, List<UpsertDataQualityRule> upsertDataQualityRule, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = upsertRulesValidateBeforeCall(scope, code, upsertDataQualityRule, null, opts);
        Type localVarReturnType = new TypeToken<CheckDefinition>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call upsertRulesAsync(String scope, String code, List<UpsertDataQualityRule> upsertDataQualityRule, final ApiCallback<CheckDefinition> _callback) throws ApiException {

        okhttp3.Call localVarCall = upsertRulesValidateBeforeCall(scope, code, upsertDataQualityRule, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<CheckDefinition>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call upsertRulesAsync(String scope, String code, List<UpsertDataQualityRule> upsertDataQualityRule, final ApiCallback<CheckDefinition> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = upsertRulesValidateBeforeCall(scope, code, upsertDataQualityRule, _callback, opts);
        Type localVarReturnType = new TypeToken<CheckDefinition>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIupsertRulesRequest {
        private final String scope;
        private final String code;
        private List<UpsertDataQualityRule> upsertDataQualityRule;

        private APIupsertRulesRequest(String scope, String code) {
            this.scope = scope;
            this.code = code;
        }

        /**
         * Set upsertDataQualityRule
         * @param upsertDataQualityRule The request containing the rules to be upserted (optional)
         * @return APIupsertRulesRequest
         */
        public APIupsertRulesRequest upsertDataQualityRule(List<UpsertDataQualityRule> upsertDataQualityRule) {
            this.upsertDataQualityRule = upsertDataQualityRule;
            return this;
        }

        /**
         * Build call for upsertRules
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The updated check definition </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return upsertRulesCall(scope, code, upsertDataQualityRule, _callback);
        }

        /**
         * Execute upsertRules request
         * @return CheckDefinition
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The updated check definition </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public CheckDefinition execute() throws ApiException {
            ApiResponse<CheckDefinition> localVarResp = upsertRulesWithHttpInfo(scope, code, upsertDataQualityRule);
            return localVarResp.getData();
        }

        /**
         * Execute upsertRules request. Use any specified configuration options to override any other configuration for this request only.
         * @return CheckDefinition
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The updated check definition </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public CheckDefinition execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<CheckDefinition> localVarResp = upsertRulesWithHttpInfo(scope, code, upsertDataQualityRule, opts);
            return localVarResp.getData();
        }

        /**
         * Execute upsertRules request with HTTP info returned
         * @return ApiResponse&lt;CheckDefinition&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The updated check definition </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CheckDefinition> executeWithHttpInfo() throws ApiException {
            return upsertRulesWithHttpInfo(scope, code, upsertDataQualityRule);
        }

        /**
         * Execute upsertRules request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;CheckDefinition&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The updated check definition </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CheckDefinition> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return upsertRulesWithHttpInfo(scope, code, upsertDataQualityRule, opts);
        }

        /**
         * Execute upsertRules request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The updated check definition </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CheckDefinition> _callback) throws ApiException {
            return upsertRulesAsync(scope, code, upsertDataQualityRule, _callback);
        }

        /**
         * Execute upsertRules request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The updated check definition </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CheckDefinition> _callback, ConfigurationOptions opts) throws ApiException {
            return upsertRulesAsync(scope, code, upsertDataQualityRule, _callback, opts);
        }
    }

    /**
     * [EXPERIMENTAL] UpsertRules: Upsert rules to a particular Check Definition
     * Upsert rules for a given check definition. This will not affect any other rules that are not included in the request.
     * @param scope The scope of the specified Check Definition. (required)
     * @param code The code of the specified Check Definition. Together with the domain and scope this uniquely   identifies the Check Definition. (required)
     * @return APIupsertRulesRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated check definition </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIupsertRulesRequest upsertRules(String scope, String code) {
        return new APIupsertRulesRequest(scope, code);
    }
}
