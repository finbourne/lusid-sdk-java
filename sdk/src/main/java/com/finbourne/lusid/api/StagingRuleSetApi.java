/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.api;

import com.finbourne.lusid.ApiCallback;
import com.finbourne.lusid.ApiClient;
import com.finbourne.lusid.ApiException;
import com.finbourne.lusid.ApiResponse;
import com.finbourne.lusid.Configuration;
import com.finbourne.lusid.Pair;
import com.finbourne.lusid.ProgressRequestBody;
import com.finbourne.lusid.ProgressResponseBody;
import com.finbourne.lusid.extensions.ConfigurationOptions;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.finbourne.lusid.model.CreateStagingRuleSetRequest;
import com.finbourne.lusid.model.DeletedEntityResponse;
import com.finbourne.lusid.model.LusidProblemDetails;
import com.finbourne.lusid.model.LusidValidationProblemDetails;
import java.time.OffsetDateTime;
import com.finbourne.lusid.model.PagedResourceListOfStagingRuleSet;
import com.finbourne.lusid.model.StagingRuleSet;
import com.finbourne.lusid.model.UpdateStagingRuleSetRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class StagingRuleSetApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public StagingRuleSetApi() {
        this(Configuration.getDefaultApiClient());
    }

    public StagingRuleSetApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createStagingRuleSetCall(String entityType, CreateStagingRuleSetRequest createStagingRuleSetRequest, final ApiCallback _callback) throws ApiException {
        return createStagingRuleSetCall(entityType, createStagingRuleSetRequest,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call createStagingRuleSetCall(String entityType, CreateStagingRuleSetRequest createStagingRuleSetRequest, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createStagingRuleSetRequest;

        // create path and map variables
        String localVarPath = "/api/stagingrulesets/{entityType}"
            .replace("{" + "entityType" + "}", localVarApiClient.escapeString(entityType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createStagingRuleSetValidateBeforeCall(String entityType, CreateStagingRuleSetRequest createStagingRuleSetRequest, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'entityType' is set
        if (entityType == null) {
            throw new ApiException("Missing the required parameter 'entityType' when calling createStagingRuleSet(Async)");
        }

        // verify the required parameter 'createStagingRuleSetRequest' is set
        if (createStagingRuleSetRequest == null) {
            throw new ApiException("Missing the required parameter 'createStagingRuleSetRequest' when calling createStagingRuleSet(Async)");
        }

        return createStagingRuleSetCall(entityType, createStagingRuleSetRequest, _callback, opts);

    }


    private ApiResponse<StagingRuleSet> createStagingRuleSetWithHttpInfo(String entityType, CreateStagingRuleSetRequest createStagingRuleSetRequest) throws ApiException {
        okhttp3.Call localVarCall = createStagingRuleSetValidateBeforeCall(entityType, createStagingRuleSetRequest, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<StagingRuleSet>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<StagingRuleSet> createStagingRuleSetWithHttpInfo(String entityType, CreateStagingRuleSetRequest createStagingRuleSetRequest, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = createStagingRuleSetValidateBeforeCall(entityType, createStagingRuleSetRequest, null, opts);
        Type localVarReturnType = new TypeToken<StagingRuleSet>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createStagingRuleSetAsync(String entityType, CreateStagingRuleSetRequest createStagingRuleSetRequest, final ApiCallback<StagingRuleSet> _callback) throws ApiException {

        okhttp3.Call localVarCall = createStagingRuleSetValidateBeforeCall(entityType, createStagingRuleSetRequest, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<StagingRuleSet>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call createStagingRuleSetAsync(String entityType, CreateStagingRuleSetRequest createStagingRuleSetRequest, final ApiCallback<StagingRuleSet> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = createStagingRuleSetValidateBeforeCall(entityType, createStagingRuleSetRequest, _callback, opts);
        Type localVarReturnType = new TypeToken<StagingRuleSet>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIcreateStagingRuleSetRequest {
        private final String entityType;
        private final CreateStagingRuleSetRequest createStagingRuleSetRequest;

        private APIcreateStagingRuleSetRequest(String entityType, CreateStagingRuleSetRequest createStagingRuleSetRequest) {
            this.entityType = entityType;
            this.createStagingRuleSetRequest = createStagingRuleSetRequest;
        }

        /**
         * Build call for createStagingRuleSet
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The newly created staging rule set </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return createStagingRuleSetCall(entityType, createStagingRuleSetRequest, _callback);
        }

        /**
         * Execute createStagingRuleSet request
         * @return StagingRuleSet
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The newly created staging rule set </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public StagingRuleSet execute() throws ApiException {
            ApiResponse<StagingRuleSet> localVarResp = createStagingRuleSetWithHttpInfo(entityType, createStagingRuleSetRequest);
            return localVarResp.getData();
        }

        /**
         * Execute createStagingRuleSet request. Use any specified configuration options to override any other configuration for this request only.
         * @return StagingRuleSet
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The newly created staging rule set </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public StagingRuleSet execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<StagingRuleSet> localVarResp = createStagingRuleSetWithHttpInfo(entityType, createStagingRuleSetRequest, opts);
            return localVarResp.getData();
        }

        /**
         * Execute createStagingRuleSet request with HTTP info returned
         * @return ApiResponse&lt;StagingRuleSet&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The newly created staging rule set </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<StagingRuleSet> executeWithHttpInfo() throws ApiException {
            return createStagingRuleSetWithHttpInfo(entityType, createStagingRuleSetRequest);
        }

        /**
         * Execute createStagingRuleSet request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;StagingRuleSet&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The newly created staging rule set </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<StagingRuleSet> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return createStagingRuleSetWithHttpInfo(entityType, createStagingRuleSetRequest, opts);
        }

        /**
         * Execute createStagingRuleSet request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The newly created staging rule set </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<StagingRuleSet> _callback) throws ApiException {
            return createStagingRuleSetAsync(entityType, createStagingRuleSetRequest, _callback);
        }

        /**
         * Execute createStagingRuleSet request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The newly created staging rule set </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<StagingRuleSet> _callback, ConfigurationOptions opts) throws ApiException {
            return createStagingRuleSetAsync(entityType, createStagingRuleSetRequest, _callback, opts);
        }
    }

    /**
     * [EXPERIMENTAL] CreateStagingRuleSet: Create a StagingRuleSet
     * Create a new staging rule set.
     * @param entityType The entity type for which to create the staging rule set. (required)
     * @param createStagingRuleSetRequest Request to create a staging rule set. (required)
     * @return APIcreateStagingRuleSetRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The newly created staging rule set </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIcreateStagingRuleSetRequest createStagingRuleSet(String entityType, CreateStagingRuleSetRequest createStagingRuleSetRequest) {
        return new APIcreateStagingRuleSetRequest(entityType, createStagingRuleSetRequest);
    }
    private okhttp3.Call deleteStagingRuleSetCall(String entityType, final ApiCallback _callback) throws ApiException {
        return deleteStagingRuleSetCall(entityType,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call deleteStagingRuleSetCall(String entityType, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/stagingrulesets/{entityType}"
            .replace("{" + "entityType" + "}", localVarApiClient.escapeString(entityType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteStagingRuleSetValidateBeforeCall(String entityType, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'entityType' is set
        if (entityType == null) {
            throw new ApiException("Missing the required parameter 'entityType' when calling deleteStagingRuleSet(Async)");
        }

        return deleteStagingRuleSetCall(entityType, _callback, opts);

    }


    private ApiResponse<DeletedEntityResponse> deleteStagingRuleSetWithHttpInfo(String entityType) throws ApiException {
        okhttp3.Call localVarCall = deleteStagingRuleSetValidateBeforeCall(entityType, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<DeletedEntityResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<DeletedEntityResponse> deleteStagingRuleSetWithHttpInfo(String entityType, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = deleteStagingRuleSetValidateBeforeCall(entityType, null, opts);
        Type localVarReturnType = new TypeToken<DeletedEntityResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteStagingRuleSetAsync(String entityType, final ApiCallback<DeletedEntityResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteStagingRuleSetValidateBeforeCall(entityType, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<DeletedEntityResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call deleteStagingRuleSetAsync(String entityType, final ApiCallback<DeletedEntityResponse> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = deleteStagingRuleSetValidateBeforeCall(entityType, _callback, opts);
        Type localVarReturnType = new TypeToken<DeletedEntityResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIdeleteStagingRuleSetRequest {
        private final String entityType;

        private APIdeleteStagingRuleSetRequest(String entityType) {
            this.entityType = entityType;
        }

        /**
         * Build call for deleteStagingRuleSet
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The response from deleting staging rule set </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteStagingRuleSetCall(entityType, _callback);
        }

        /**
         * Execute deleteStagingRuleSet request
         * @return DeletedEntityResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The response from deleting staging rule set </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public DeletedEntityResponse execute() throws ApiException {
            ApiResponse<DeletedEntityResponse> localVarResp = deleteStagingRuleSetWithHttpInfo(entityType);
            return localVarResp.getData();
        }

        /**
         * Execute deleteStagingRuleSet request. Use any specified configuration options to override any other configuration for this request only.
         * @return DeletedEntityResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The response from deleting staging rule set </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public DeletedEntityResponse execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<DeletedEntityResponse> localVarResp = deleteStagingRuleSetWithHttpInfo(entityType, opts);
            return localVarResp.getData();
        }

        /**
         * Execute deleteStagingRuleSet request with HTTP info returned
         * @return ApiResponse&lt;DeletedEntityResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The response from deleting staging rule set </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DeletedEntityResponse> executeWithHttpInfo() throws ApiException {
            return deleteStagingRuleSetWithHttpInfo(entityType);
        }

        /**
         * Execute deleteStagingRuleSet request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;DeletedEntityResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The response from deleting staging rule set </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DeletedEntityResponse> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return deleteStagingRuleSetWithHttpInfo(entityType, opts);
        }

        /**
         * Execute deleteStagingRuleSet request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The response from deleting staging rule set </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DeletedEntityResponse> _callback) throws ApiException {
            return deleteStagingRuleSetAsync(entityType, _callback);
        }

        /**
         * Execute deleteStagingRuleSet request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The response from deleting staging rule set </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DeletedEntityResponse> _callback, ConfigurationOptions opts) throws ApiException {
            return deleteStagingRuleSetAsync(entityType, _callback, opts);
        }
    }

    /**
     * [EXPERIMENTAL] DeleteStagingRuleSet: Delete a StagingRuleSet
     * Delete a staging rule set of a specific entity type. Deletion will be valid from the staging rule set&#39;s creation datetime.  This means that the staging rule set will no longer exist at any effective datetime from the asAt datetime of deletion.
     * @param entityType The entity type for which to delete the staging rule set. (required)
     * @return APIdeleteStagingRuleSetRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The response from deleting staging rule set </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIdeleteStagingRuleSetRequest deleteStagingRuleSet(String entityType) {
        return new APIdeleteStagingRuleSetRequest(entityType);
    }
    private okhttp3.Call getStagingRuleSetCall(String entityType, OffsetDateTime asAt, final ApiCallback _callback) throws ApiException {
        return getStagingRuleSetCall(entityType, asAt,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call getStagingRuleSetCall(String entityType, OffsetDateTime asAt, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/stagingrulesets/{entityType}"
            .replace("{" + "entityType" + "}", localVarApiClient.escapeString(entityType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (asAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asAt", asAt));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getStagingRuleSetValidateBeforeCall(String entityType, OffsetDateTime asAt, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'entityType' is set
        if (entityType == null) {
            throw new ApiException("Missing the required parameter 'entityType' when calling getStagingRuleSet(Async)");
        }

        return getStagingRuleSetCall(entityType, asAt, _callback, opts);

    }


    private ApiResponse<StagingRuleSet> getStagingRuleSetWithHttpInfo(String entityType, OffsetDateTime asAt) throws ApiException {
        okhttp3.Call localVarCall = getStagingRuleSetValidateBeforeCall(entityType, asAt, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<StagingRuleSet>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<StagingRuleSet> getStagingRuleSetWithHttpInfo(String entityType, OffsetDateTime asAt, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = getStagingRuleSetValidateBeforeCall(entityType, asAt, null, opts);
        Type localVarReturnType = new TypeToken<StagingRuleSet>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getStagingRuleSetAsync(String entityType, OffsetDateTime asAt, final ApiCallback<StagingRuleSet> _callback) throws ApiException {

        okhttp3.Call localVarCall = getStagingRuleSetValidateBeforeCall(entityType, asAt, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<StagingRuleSet>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call getStagingRuleSetAsync(String entityType, OffsetDateTime asAt, final ApiCallback<StagingRuleSet> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = getStagingRuleSetValidateBeforeCall(entityType, asAt, _callback, opts);
        Type localVarReturnType = new TypeToken<StagingRuleSet>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetStagingRuleSetRequest {
        private final String entityType;
        private OffsetDateTime asAt;

        private APIgetStagingRuleSetRequest(String entityType) {
            this.entityType = entityType;
        }

        /**
         * Set asAt
         * @param asAt The asAt datetime at which to retrieve the staging rule set. Defaults to return the latest   version of the staging rule set if not specified. (optional)
         * @return APIgetStagingRuleSetRequest
         */
        public APIgetStagingRuleSetRequest asAt(OffsetDateTime asAt) {
            this.asAt = asAt;
            return this;
        }

        /**
         * Build call for getStagingRuleSet
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested staging rule set </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getStagingRuleSetCall(entityType, asAt, _callback);
        }

        /**
         * Execute getStagingRuleSet request
         * @return StagingRuleSet
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested staging rule set </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public StagingRuleSet execute() throws ApiException {
            ApiResponse<StagingRuleSet> localVarResp = getStagingRuleSetWithHttpInfo(entityType, asAt);
            return localVarResp.getData();
        }

        /**
         * Execute getStagingRuleSet request. Use any specified configuration options to override any other configuration for this request only.
         * @return StagingRuleSet
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested staging rule set </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public StagingRuleSet execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<StagingRuleSet> localVarResp = getStagingRuleSetWithHttpInfo(entityType, asAt, opts);
            return localVarResp.getData();
        }

        /**
         * Execute getStagingRuleSet request with HTTP info returned
         * @return ApiResponse&lt;StagingRuleSet&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested staging rule set </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<StagingRuleSet> executeWithHttpInfo() throws ApiException {
            return getStagingRuleSetWithHttpInfo(entityType, asAt);
        }

        /**
         * Execute getStagingRuleSet request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;StagingRuleSet&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested staging rule set </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<StagingRuleSet> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return getStagingRuleSetWithHttpInfo(entityType, asAt, opts);
        }

        /**
         * Execute getStagingRuleSet request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested staging rule set </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<StagingRuleSet> _callback) throws ApiException {
            return getStagingRuleSetAsync(entityType, asAt, _callback);
        }

        /**
         * Execute getStagingRuleSet request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested staging rule set </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<StagingRuleSet> _callback, ConfigurationOptions opts) throws ApiException {
            return getStagingRuleSetAsync(entityType, asAt, _callback, opts);
        }
    }

    /**
     * [EXPERIMENTAL] GetStagingRuleSet: Get a StagingRuleSet
     * Get the staging rule set for the given entity type at the specific asAt time.
     * @param entityType The entity type for which to retrieve the staging rule set. (required)
     * @return APIgetStagingRuleSetRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested staging rule set </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIgetStagingRuleSetRequest getStagingRuleSet(String entityType) {
        return new APIgetStagingRuleSetRequest(entityType);
    }
    private okhttp3.Call listStagingRuleSetsCall(OffsetDateTime asAt, String page, List<String> sortBy, Integer limit, String filter, final ApiCallback _callback) throws ApiException {
        return listStagingRuleSetsCall(asAt, page, sortBy, limit, filter,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call listStagingRuleSetsCall(OffsetDateTime asAt, String page, List<String> sortBy, Integer limit, String filter, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/stagingrulesets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (asAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asAt", asAt));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (sortBy != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "sortBy", sortBy));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listStagingRuleSetsValidateBeforeCall(OffsetDateTime asAt, String page, List<String> sortBy, Integer limit, String filter, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        return listStagingRuleSetsCall(asAt, page, sortBy, limit, filter, _callback, opts);

    }


    private ApiResponse<PagedResourceListOfStagingRuleSet> listStagingRuleSetsWithHttpInfo(OffsetDateTime asAt, String page, List<String> sortBy, Integer limit, String filter) throws ApiException {
        okhttp3.Call localVarCall = listStagingRuleSetsValidateBeforeCall(asAt, page, sortBy, limit, filter, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<PagedResourceListOfStagingRuleSet>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<PagedResourceListOfStagingRuleSet> listStagingRuleSetsWithHttpInfo(OffsetDateTime asAt, String page, List<String> sortBy, Integer limit, String filter, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = listStagingRuleSetsValidateBeforeCall(asAt, page, sortBy, limit, filter, null, opts);
        Type localVarReturnType = new TypeToken<PagedResourceListOfStagingRuleSet>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listStagingRuleSetsAsync(OffsetDateTime asAt, String page, List<String> sortBy, Integer limit, String filter, final ApiCallback<PagedResourceListOfStagingRuleSet> _callback) throws ApiException {

        okhttp3.Call localVarCall = listStagingRuleSetsValidateBeforeCall(asAt, page, sortBy, limit, filter, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<PagedResourceListOfStagingRuleSet>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call listStagingRuleSetsAsync(OffsetDateTime asAt, String page, List<String> sortBy, Integer limit, String filter, final ApiCallback<PagedResourceListOfStagingRuleSet> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = listStagingRuleSetsValidateBeforeCall(asAt, page, sortBy, limit, filter, _callback, opts);
        Type localVarReturnType = new TypeToken<PagedResourceListOfStagingRuleSet>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIlistStagingRuleSetsRequest {
        private OffsetDateTime asAt;
        private String page;
        private List<String> sortBy;
        private Integer limit;
        private String filter;

        private APIlistStagingRuleSetsRequest() {
        }

        /**
         * Set asAt
         * @param asAt The asAt datetime at which to retrieve the staging rule sets. Defaults to return the latest   version of the staging rule sets if not specified. (optional)
         * @return APIlistStagingRuleSetsRequest
         */
        public APIlistStagingRuleSetsRequest asAt(OffsetDateTime asAt) {
            this.asAt = asAt;
            return this;
        }

        /**
         * Set page
         * @param page The pagination token to use to continue listing staging rule sets from a previous call to list   staging rule sets. This value is returned from the previous call. If a pagination token is provided the sortBy,   filter, effectiveAt, and asAt fields must not have changed since the original request. (optional)
         * @return APIlistStagingRuleSetsRequest
         */
        public APIlistStagingRuleSetsRequest page(String page) {
            this.page = page;
            return this;
        }

        /**
         * Set sortBy
         * @param sortBy A list of field names to sort by, each suffixed by \&quot; ASC\&quot; or \&quot; DESC\&quot; (optional)
         * @return APIlistStagingRuleSetsRequest
         */
        public APIlistStagingRuleSetsRequest sortBy(List<String> sortBy) {
            this.sortBy = sortBy;
            return this;
        }

        /**
         * Set limit
         * @param limit When paginating, limit the number of returned results to this many. (optional)
         * @return APIlistStagingRuleSetsRequest
         */
        public APIlistStagingRuleSetsRequest limit(Integer limit) {
            this.limit = limit;
            return this;
        }

        /**
         * Set filter
         * @param filter Expression to filter the result set. Read more about filtering results from LUSID here:   https://support.lusid.com/filtering-results-from-lusid. (optional)
         * @return APIlistStagingRuleSetsRequest
         */
        public APIlistStagingRuleSetsRequest filter(String filter) {
            this.filter = filter;
            return this;
        }

        /**
         * Build call for listStagingRuleSets
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A list of staging rule sets </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listStagingRuleSetsCall(asAt, page, sortBy, limit, filter, _callback);
        }

        /**
         * Execute listStagingRuleSets request
         * @return PagedResourceListOfStagingRuleSet
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A list of staging rule sets </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public PagedResourceListOfStagingRuleSet execute() throws ApiException {
            ApiResponse<PagedResourceListOfStagingRuleSet> localVarResp = listStagingRuleSetsWithHttpInfo(asAt, page, sortBy, limit, filter);
            return localVarResp.getData();
        }

        /**
         * Execute listStagingRuleSets request. Use any specified configuration options to override any other configuration for this request only.
         * @return PagedResourceListOfStagingRuleSet
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A list of staging rule sets </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public PagedResourceListOfStagingRuleSet execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<PagedResourceListOfStagingRuleSet> localVarResp = listStagingRuleSetsWithHttpInfo(asAt, page, sortBy, limit, filter, opts);
            return localVarResp.getData();
        }

        /**
         * Execute listStagingRuleSets request with HTTP info returned
         * @return ApiResponse&lt;PagedResourceListOfStagingRuleSet&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A list of staging rule sets </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PagedResourceListOfStagingRuleSet> executeWithHttpInfo() throws ApiException {
            return listStagingRuleSetsWithHttpInfo(asAt, page, sortBy, limit, filter);
        }

        /**
         * Execute listStagingRuleSets request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;PagedResourceListOfStagingRuleSet&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A list of staging rule sets </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PagedResourceListOfStagingRuleSet> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return listStagingRuleSetsWithHttpInfo(asAt, page, sortBy, limit, filter, opts);
        }

        /**
         * Execute listStagingRuleSets request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A list of staging rule sets </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PagedResourceListOfStagingRuleSet> _callback) throws ApiException {
            return listStagingRuleSetsAsync(asAt, page, sortBy, limit, filter, _callback);
        }

        /**
         * Execute listStagingRuleSets request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A list of staging rule sets </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PagedResourceListOfStagingRuleSet> _callback, ConfigurationOptions opts) throws ApiException {
            return listStagingRuleSetsAsync(asAt, page, sortBy, limit, filter, _callback, opts);
        }
    }

    /**
     * [EXPERIMENTAL] ListStagingRuleSets: List StagingRuleSets
     * List all the staging rule sets matching particular criteria.
     * @return APIlistStagingRuleSetsRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of staging rule sets </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIlistStagingRuleSetsRequest listStagingRuleSets() {
        return new APIlistStagingRuleSetsRequest();
    }
    private okhttp3.Call updateStagingRuleSetCall(String entityType, UpdateStagingRuleSetRequest updateStagingRuleSetRequest, final ApiCallback _callback) throws ApiException {
        return updateStagingRuleSetCall(entityType, updateStagingRuleSetRequest,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call updateStagingRuleSetCall(String entityType, UpdateStagingRuleSetRequest updateStagingRuleSetRequest, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateStagingRuleSetRequest;

        // create path and map variables
        String localVarPath = "/api/stagingrulesets/{entityType}"
            .replace("{" + "entityType" + "}", localVarApiClient.escapeString(entityType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateStagingRuleSetValidateBeforeCall(String entityType, UpdateStagingRuleSetRequest updateStagingRuleSetRequest, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'entityType' is set
        if (entityType == null) {
            throw new ApiException("Missing the required parameter 'entityType' when calling updateStagingRuleSet(Async)");
        }

        // verify the required parameter 'updateStagingRuleSetRequest' is set
        if (updateStagingRuleSetRequest == null) {
            throw new ApiException("Missing the required parameter 'updateStagingRuleSetRequest' when calling updateStagingRuleSet(Async)");
        }

        return updateStagingRuleSetCall(entityType, updateStagingRuleSetRequest, _callback, opts);

    }


    private ApiResponse<StagingRuleSet> updateStagingRuleSetWithHttpInfo(String entityType, UpdateStagingRuleSetRequest updateStagingRuleSetRequest) throws ApiException {
        okhttp3.Call localVarCall = updateStagingRuleSetValidateBeforeCall(entityType, updateStagingRuleSetRequest, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<StagingRuleSet>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<StagingRuleSet> updateStagingRuleSetWithHttpInfo(String entityType, UpdateStagingRuleSetRequest updateStagingRuleSetRequest, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = updateStagingRuleSetValidateBeforeCall(entityType, updateStagingRuleSetRequest, null, opts);
        Type localVarReturnType = new TypeToken<StagingRuleSet>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateStagingRuleSetAsync(String entityType, UpdateStagingRuleSetRequest updateStagingRuleSetRequest, final ApiCallback<StagingRuleSet> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateStagingRuleSetValidateBeforeCall(entityType, updateStagingRuleSetRequest, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<StagingRuleSet>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call updateStagingRuleSetAsync(String entityType, UpdateStagingRuleSetRequest updateStagingRuleSetRequest, final ApiCallback<StagingRuleSet> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = updateStagingRuleSetValidateBeforeCall(entityType, updateStagingRuleSetRequest, _callback, opts);
        Type localVarReturnType = new TypeToken<StagingRuleSet>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIupdateStagingRuleSetRequest {
        private final String entityType;
        private final UpdateStagingRuleSetRequest updateStagingRuleSetRequest;

        private APIupdateStagingRuleSetRequest(String entityType, UpdateStagingRuleSetRequest updateStagingRuleSetRequest) {
            this.entityType = entityType;
            this.updateStagingRuleSetRequest = updateStagingRuleSetRequest;
        }

        /**
         * Build call for updateStagingRuleSet
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The updated staging rule set </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return updateStagingRuleSetCall(entityType, updateStagingRuleSetRequest, _callback);
        }

        /**
         * Execute updateStagingRuleSet request
         * @return StagingRuleSet
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The updated staging rule set </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public StagingRuleSet execute() throws ApiException {
            ApiResponse<StagingRuleSet> localVarResp = updateStagingRuleSetWithHttpInfo(entityType, updateStagingRuleSetRequest);
            return localVarResp.getData();
        }

        /**
         * Execute updateStagingRuleSet request. Use any specified configuration options to override any other configuration for this request only.
         * @return StagingRuleSet
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The updated staging rule set </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public StagingRuleSet execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<StagingRuleSet> localVarResp = updateStagingRuleSetWithHttpInfo(entityType, updateStagingRuleSetRequest, opts);
            return localVarResp.getData();
        }

        /**
         * Execute updateStagingRuleSet request with HTTP info returned
         * @return ApiResponse&lt;StagingRuleSet&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The updated staging rule set </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<StagingRuleSet> executeWithHttpInfo() throws ApiException {
            return updateStagingRuleSetWithHttpInfo(entityType, updateStagingRuleSetRequest);
        }

        /**
         * Execute updateStagingRuleSet request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;StagingRuleSet&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The updated staging rule set </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<StagingRuleSet> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return updateStagingRuleSetWithHttpInfo(entityType, updateStagingRuleSetRequest, opts);
        }

        /**
         * Execute updateStagingRuleSet request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The updated staging rule set </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<StagingRuleSet> _callback) throws ApiException {
            return updateStagingRuleSetAsync(entityType, updateStagingRuleSetRequest, _callback);
        }

        /**
         * Execute updateStagingRuleSet request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The updated staging rule set </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<StagingRuleSet> _callback, ConfigurationOptions opts) throws ApiException {
            return updateStagingRuleSetAsync(entityType, updateStagingRuleSetRequest, _callback, opts);
        }
    }

    /**
     * [EXPERIMENTAL] UpdateStagingRuleSet: Update a StagingRuleSet
     * Update an existing staging rule set.
     * @param entityType The entity type for which to update the staging rule set. (required)
     * @param updateStagingRuleSetRequest Request to update a staging rule set. (required)
     * @return APIupdateStagingRuleSetRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated staging rule set </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIupdateStagingRuleSetRequest updateStagingRuleSet(String entityType, UpdateStagingRuleSetRequest updateStagingRuleSetRequest) {
        return new APIupdateStagingRuleSetRequest(entityType, updateStagingRuleSetRequest);
    }
}
