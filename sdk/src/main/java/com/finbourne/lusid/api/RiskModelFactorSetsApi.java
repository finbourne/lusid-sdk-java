/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.api;

import com.finbourne.lusid.ApiCallback;
import com.finbourne.lusid.ApiClient;
import com.finbourne.lusid.ApiException;
import com.finbourne.lusid.ApiResponse;
import com.finbourne.lusid.Configuration;
import com.finbourne.lusid.Pair;
import com.finbourne.lusid.ProgressRequestBody;
import com.finbourne.lusid.ProgressResponseBody;
import com.finbourne.lusid.extensions.ConfigurationOptions;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.finbourne.lusid.model.CreateRiskModelFactorSetRequest;
import com.finbourne.lusid.model.DeletedEntityResponse;
import com.finbourne.lusid.model.LusidProblemDetails;
import com.finbourne.lusid.model.LusidValidationProblemDetails;
import java.time.OffsetDateTime;
import com.finbourne.lusid.model.PagedResourceListOfRiskModelFactorSet;
import com.finbourne.lusid.model.RiskModelFactorSet;
import com.finbourne.lusid.model.UpdateRiskModelFactorSetRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class RiskModelFactorSetsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public RiskModelFactorSetsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public RiskModelFactorSetsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createRiskModelFactorSetCall(CreateRiskModelFactorSetRequest createRiskModelFactorSetRequest, final ApiCallback _callback) throws ApiException {
        return createRiskModelFactorSetCall(createRiskModelFactorSetRequest,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call createRiskModelFactorSetCall(CreateRiskModelFactorSetRequest createRiskModelFactorSetRequest, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createRiskModelFactorSetRequest;

        // create path and map variables
        String localVarPath = "/api/riskmodels/factorsets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createRiskModelFactorSetValidateBeforeCall(CreateRiskModelFactorSetRequest createRiskModelFactorSetRequest, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        return createRiskModelFactorSetCall(createRiskModelFactorSetRequest, _callback, opts);

    }


    private ApiResponse<RiskModelFactorSet> createRiskModelFactorSetWithHttpInfo(CreateRiskModelFactorSetRequest createRiskModelFactorSetRequest) throws ApiException {
        okhttp3.Call localVarCall = createRiskModelFactorSetValidateBeforeCall(createRiskModelFactorSetRequest, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<RiskModelFactorSet>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<RiskModelFactorSet> createRiskModelFactorSetWithHttpInfo(CreateRiskModelFactorSetRequest createRiskModelFactorSetRequest, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = createRiskModelFactorSetValidateBeforeCall(createRiskModelFactorSetRequest, null, opts);
        Type localVarReturnType = new TypeToken<RiskModelFactorSet>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createRiskModelFactorSetAsync(CreateRiskModelFactorSetRequest createRiskModelFactorSetRequest, final ApiCallback<RiskModelFactorSet> _callback) throws ApiException {

        okhttp3.Call localVarCall = createRiskModelFactorSetValidateBeforeCall(createRiskModelFactorSetRequest, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<RiskModelFactorSet>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call createRiskModelFactorSetAsync(CreateRiskModelFactorSetRequest createRiskModelFactorSetRequest, final ApiCallback<RiskModelFactorSet> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = createRiskModelFactorSetValidateBeforeCall(createRiskModelFactorSetRequest, _callback, opts);
        Type localVarReturnType = new TypeToken<RiskModelFactorSet>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIcreateRiskModelFactorSetRequest {
        private CreateRiskModelFactorSetRequest createRiskModelFactorSetRequest;

        private APIcreateRiskModelFactorSetRequest() {
        }

        /**
         * Set createRiskModelFactorSetRequest
         * @param createRiskModelFactorSetRequest The request containing the details of the factor set (optional)
         * @return APIcreateRiskModelFactorSetRequest
         */
        public APIcreateRiskModelFactorSetRequest createRiskModelFactorSetRequest(CreateRiskModelFactorSetRequest createRiskModelFactorSetRequest) {
            this.createRiskModelFactorSetRequest = createRiskModelFactorSetRequest;
            return this;
        }

        /**
         * Build call for createRiskModelFactorSet
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The created factor set. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return createRiskModelFactorSetCall(createRiskModelFactorSetRequest, _callback);
        }

        /**
         * Execute createRiskModelFactorSet request
         * @return RiskModelFactorSet
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The created factor set. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public RiskModelFactorSet execute() throws ApiException {
            ApiResponse<RiskModelFactorSet> localVarResp = createRiskModelFactorSetWithHttpInfo(createRiskModelFactorSetRequest);
            return localVarResp.getData();
        }

        /**
         * Execute createRiskModelFactorSet request. Use any specified configuration options to override any other configuration for this request only.
         * @return RiskModelFactorSet
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The created factor set. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public RiskModelFactorSet execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<RiskModelFactorSet> localVarResp = createRiskModelFactorSetWithHttpInfo(createRiskModelFactorSetRequest, opts);
            return localVarResp.getData();
        }

        /**
         * Execute createRiskModelFactorSet request with HTTP info returned
         * @return ApiResponse&lt;RiskModelFactorSet&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The created factor set. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<RiskModelFactorSet> executeWithHttpInfo() throws ApiException {
            return createRiskModelFactorSetWithHttpInfo(createRiskModelFactorSetRequest);
        }

        /**
         * Execute createRiskModelFactorSet request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;RiskModelFactorSet&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The created factor set. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<RiskModelFactorSet> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return createRiskModelFactorSetWithHttpInfo(createRiskModelFactorSetRequest, opts);
        }

        /**
         * Execute createRiskModelFactorSet request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The created factor set. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<RiskModelFactorSet> _callback) throws ApiException {
            return createRiskModelFactorSetAsync(createRiskModelFactorSetRequest, _callback);
        }

        /**
         * Execute createRiskModelFactorSet request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The created factor set. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<RiskModelFactorSet> _callback, ConfigurationOptions opts) throws ApiException {
            return createRiskModelFactorSetAsync(createRiskModelFactorSetRequest, _callback, opts);
        }
    }

    /**
     * [EXPERIMENTAL] CreateRiskModelFactorSet: Create a Factor Set
     * Creates a factor set definition with a scoped Id and Name
     * @return APIcreateRiskModelFactorSetRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The created factor set. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIcreateRiskModelFactorSetRequest createRiskModelFactorSet() {
        return new APIcreateRiskModelFactorSetRequest();
    }
    private okhttp3.Call deleteRiskModelFactorSetCall(String scope, String code, final ApiCallback _callback) throws ApiException {
        return deleteRiskModelFactorSetCall(scope, code,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call deleteRiskModelFactorSetCall(String scope, String code, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/riskmodels/factorsets/{scope}/{code}"
            .replace("{" + "scope" + "}", localVarApiClient.escapeString(scope.toString()))
            .replace("{" + "code" + "}", localVarApiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteRiskModelFactorSetValidateBeforeCall(String scope, String code, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling deleteRiskModelFactorSet(Async)");
        }

        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling deleteRiskModelFactorSet(Async)");
        }

        return deleteRiskModelFactorSetCall(scope, code, _callback, opts);

    }


    private ApiResponse<DeletedEntityResponse> deleteRiskModelFactorSetWithHttpInfo(String scope, String code) throws ApiException {
        okhttp3.Call localVarCall = deleteRiskModelFactorSetValidateBeforeCall(scope, code, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<DeletedEntityResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<DeletedEntityResponse> deleteRiskModelFactorSetWithHttpInfo(String scope, String code, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = deleteRiskModelFactorSetValidateBeforeCall(scope, code, null, opts);
        Type localVarReturnType = new TypeToken<DeletedEntityResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteRiskModelFactorSetAsync(String scope, String code, final ApiCallback<DeletedEntityResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteRiskModelFactorSetValidateBeforeCall(scope, code, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<DeletedEntityResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call deleteRiskModelFactorSetAsync(String scope, String code, final ApiCallback<DeletedEntityResponse> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = deleteRiskModelFactorSetValidateBeforeCall(scope, code, _callback, opts);
        Type localVarReturnType = new TypeToken<DeletedEntityResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIdeleteRiskModelFactorSetRequest {
        private final String scope;
        private final String code;

        private APIdeleteRiskModelFactorSetRequest(String scope, String code) {
            this.scope = scope;
            this.code = code;
        }

        /**
         * Build call for deleteRiskModelFactorSet
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The deleted entity metadata </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteRiskModelFactorSetCall(scope, code, _callback);
        }

        /**
         * Execute deleteRiskModelFactorSet request
         * @return DeletedEntityResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The deleted entity metadata </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public DeletedEntityResponse execute() throws ApiException {
            ApiResponse<DeletedEntityResponse> localVarResp = deleteRiskModelFactorSetWithHttpInfo(scope, code);
            return localVarResp.getData();
        }

        /**
         * Execute deleteRiskModelFactorSet request. Use any specified configuration options to override any other configuration for this request only.
         * @return DeletedEntityResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The deleted entity metadata </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public DeletedEntityResponse execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<DeletedEntityResponse> localVarResp = deleteRiskModelFactorSetWithHttpInfo(scope, code, opts);
            return localVarResp.getData();
        }

        /**
         * Execute deleteRiskModelFactorSet request with HTTP info returned
         * @return ApiResponse&lt;DeletedEntityResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The deleted entity metadata </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DeletedEntityResponse> executeWithHttpInfo() throws ApiException {
            return deleteRiskModelFactorSetWithHttpInfo(scope, code);
        }

        /**
         * Execute deleteRiskModelFactorSet request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;DeletedEntityResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The deleted entity metadata </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DeletedEntityResponse> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return deleteRiskModelFactorSetWithHttpInfo(scope, code, opts);
        }

        /**
         * Execute deleteRiskModelFactorSet request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The deleted entity metadata </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DeletedEntityResponse> _callback) throws ApiException {
            return deleteRiskModelFactorSetAsync(scope, code, _callback);
        }

        /**
         * Execute deleteRiskModelFactorSet request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The deleted entity metadata </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DeletedEntityResponse> _callback, ConfigurationOptions opts) throws ApiException {
            return deleteRiskModelFactorSetAsync(scope, code, _callback, opts);
        }
    }

    /**
     * [EXPERIMENTAL] DeleteRiskModelFactorSet: Deletes a particular Factor Set
     * The deletion will take effect from the factor set deletion datetime.  i.e. will no longer exist at any asAt datetime after the asAt datetime of deletion.
     * @param scope The scope of the specified factor set. (required)
     * @param code The code of the specified factor set. Together with the domain and scope this uniquely   identifies the factor set. (required)
     * @return APIdeleteRiskModelFactorSetRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The deleted entity metadata </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIdeleteRiskModelFactorSetRequest deleteRiskModelFactorSet(String scope, String code) {
        return new APIdeleteRiskModelFactorSetRequest(scope, code);
    }
    private okhttp3.Call getRiskModelFactorSetCall(String scope, String code, OffsetDateTime asAt, final ApiCallback _callback) throws ApiException {
        return getRiskModelFactorSetCall(scope, code, asAt,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call getRiskModelFactorSetCall(String scope, String code, OffsetDateTime asAt, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/riskmodels/factorsets/{scope}/{code}"
            .replace("{" + "scope" + "}", localVarApiClient.escapeString(scope.toString()))
            .replace("{" + "code" + "}", localVarApiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (asAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asAt", asAt));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRiskModelFactorSetValidateBeforeCall(String scope, String code, OffsetDateTime asAt, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling getRiskModelFactorSet(Async)");
        }

        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling getRiskModelFactorSet(Async)");
        }

        return getRiskModelFactorSetCall(scope, code, asAt, _callback, opts);

    }


    private ApiResponse<RiskModelFactorSet> getRiskModelFactorSetWithHttpInfo(String scope, String code, OffsetDateTime asAt) throws ApiException {
        okhttp3.Call localVarCall = getRiskModelFactorSetValidateBeforeCall(scope, code, asAt, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<RiskModelFactorSet>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<RiskModelFactorSet> getRiskModelFactorSetWithHttpInfo(String scope, String code, OffsetDateTime asAt, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = getRiskModelFactorSetValidateBeforeCall(scope, code, asAt, null, opts);
        Type localVarReturnType = new TypeToken<RiskModelFactorSet>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getRiskModelFactorSetAsync(String scope, String code, OffsetDateTime asAt, final ApiCallback<RiskModelFactorSet> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRiskModelFactorSetValidateBeforeCall(scope, code, asAt, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<RiskModelFactorSet>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call getRiskModelFactorSetAsync(String scope, String code, OffsetDateTime asAt, final ApiCallback<RiskModelFactorSet> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = getRiskModelFactorSetValidateBeforeCall(scope, code, asAt, _callback, opts);
        Type localVarReturnType = new TypeToken<RiskModelFactorSet>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetRiskModelFactorSetRequest {
        private final String scope;
        private final String code;
        private OffsetDateTime asAt;

        private APIgetRiskModelFactorSetRequest(String scope, String code) {
            this.scope = scope;
            this.code = code;
        }

        /**
         * Set asAt
         * @param asAt The asAt datetime at which to retrieve the factor set definition. Defaults to return   the latest version of the definition if not specified. (optional)
         * @return APIgetRiskModelFactorSetRequest
         */
        public APIgetRiskModelFactorSetRequest asAt(OffsetDateTime asAt) {
            this.asAt = asAt;
            return this;
        }

        /**
         * Build call for getRiskModelFactorSet
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested factor set. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getRiskModelFactorSetCall(scope, code, asAt, _callback);
        }

        /**
         * Execute getRiskModelFactorSet request
         * @return RiskModelFactorSet
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested factor set. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public RiskModelFactorSet execute() throws ApiException {
            ApiResponse<RiskModelFactorSet> localVarResp = getRiskModelFactorSetWithHttpInfo(scope, code, asAt);
            return localVarResp.getData();
        }

        /**
         * Execute getRiskModelFactorSet request. Use any specified configuration options to override any other configuration for this request only.
         * @return RiskModelFactorSet
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested factor set. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public RiskModelFactorSet execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<RiskModelFactorSet> localVarResp = getRiskModelFactorSetWithHttpInfo(scope, code, asAt, opts);
            return localVarResp.getData();
        }

        /**
         * Execute getRiskModelFactorSet request with HTTP info returned
         * @return ApiResponse&lt;RiskModelFactorSet&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested factor set. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<RiskModelFactorSet> executeWithHttpInfo() throws ApiException {
            return getRiskModelFactorSetWithHttpInfo(scope, code, asAt);
        }

        /**
         * Execute getRiskModelFactorSet request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;RiskModelFactorSet&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested factor set. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<RiskModelFactorSet> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return getRiskModelFactorSetWithHttpInfo(scope, code, asAt, opts);
        }

        /**
         * Execute getRiskModelFactorSet request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested factor set. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<RiskModelFactorSet> _callback) throws ApiException {
            return getRiskModelFactorSetAsync(scope, code, asAt, _callback);
        }

        /**
         * Execute getRiskModelFactorSet request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested factor set. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<RiskModelFactorSet> _callback, ConfigurationOptions opts) throws ApiException {
            return getRiskModelFactorSetAsync(scope, code, asAt, _callback, opts);
        }
    }

    /**
     * [EXPERIMENTAL] GetRiskModelFactorSet: Get a single Factor Set by scope and code.
     * Retrieves one Factor Set by scope and code.
     * @param scope The scope of the specified factor set. (required)
     * @param code The code of the specified factor set. Together with the domain and scope this uniquely   identifies the factor set. (required)
     * @return APIgetRiskModelFactorSetRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested factor set. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIgetRiskModelFactorSetRequest getRiskModelFactorSet(String scope, String code) {
        return new APIgetRiskModelFactorSetRequest(scope, code);
    }
    private okhttp3.Call listRiskModelFactorSetsCall(OffsetDateTime asAt, String page, List<String> sortBy, Integer limit, String filter, final ApiCallback _callback) throws ApiException {
        return listRiskModelFactorSetsCall(asAt, page, sortBy, limit, filter,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call listRiskModelFactorSetsCall(OffsetDateTime asAt, String page, List<String> sortBy, Integer limit, String filter, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/riskmodels/factorsets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (asAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asAt", asAt));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (sortBy != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "sortBy", sortBy));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listRiskModelFactorSetsValidateBeforeCall(OffsetDateTime asAt, String page, List<String> sortBy, Integer limit, String filter, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        return listRiskModelFactorSetsCall(asAt, page, sortBy, limit, filter, _callback, opts);

    }


    private ApiResponse<PagedResourceListOfRiskModelFactorSet> listRiskModelFactorSetsWithHttpInfo(OffsetDateTime asAt, String page, List<String> sortBy, Integer limit, String filter) throws ApiException {
        okhttp3.Call localVarCall = listRiskModelFactorSetsValidateBeforeCall(asAt, page, sortBy, limit, filter, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<PagedResourceListOfRiskModelFactorSet>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<PagedResourceListOfRiskModelFactorSet> listRiskModelFactorSetsWithHttpInfo(OffsetDateTime asAt, String page, List<String> sortBy, Integer limit, String filter, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = listRiskModelFactorSetsValidateBeforeCall(asAt, page, sortBy, limit, filter, null, opts);
        Type localVarReturnType = new TypeToken<PagedResourceListOfRiskModelFactorSet>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listRiskModelFactorSetsAsync(OffsetDateTime asAt, String page, List<String> sortBy, Integer limit, String filter, final ApiCallback<PagedResourceListOfRiskModelFactorSet> _callback) throws ApiException {

        okhttp3.Call localVarCall = listRiskModelFactorSetsValidateBeforeCall(asAt, page, sortBy, limit, filter, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<PagedResourceListOfRiskModelFactorSet>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call listRiskModelFactorSetsAsync(OffsetDateTime asAt, String page, List<String> sortBy, Integer limit, String filter, final ApiCallback<PagedResourceListOfRiskModelFactorSet> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = listRiskModelFactorSetsValidateBeforeCall(asAt, page, sortBy, limit, filter, _callback, opts);
        Type localVarReturnType = new TypeToken<PagedResourceListOfRiskModelFactorSet>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIlistRiskModelFactorSetsRequest {
        private OffsetDateTime asAt;
        private String page;
        private List<String> sortBy;
        private Integer limit;
        private String filter;

        private APIlistRiskModelFactorSetsRequest() {
        }

        /**
         * Set asAt
         * @param asAt The asAt datetime at which to retrieve the factor sets. Defaults to return the latest   version of the factor sets if not specified. (optional)
         * @return APIlistRiskModelFactorSetsRequest
         */
        public APIlistRiskModelFactorSetsRequest asAt(OffsetDateTime asAt) {
            this.asAt = asAt;
            return this;
        }

        /**
         * Set page
         * @param page The pagination token to use to continue listing factor sets from a previous call to list   factor sets. This value is returned from the previous call. If a pagination token is provided the sortBy,   filter, effectiveAt, and asAt fields must not have changed since the original request. (optional)
         * @return APIlistRiskModelFactorSetsRequest
         */
        public APIlistRiskModelFactorSetsRequest page(String page) {
            this.page = page;
            return this;
        }

        /**
         * Set sortBy
         * @param sortBy A list of field names to sort by, each suffixed by \&quot; ASC\&quot; or \&quot; DESC\&quot; (optional)
         * @return APIlistRiskModelFactorSetsRequest
         */
        public APIlistRiskModelFactorSetsRequest sortBy(List<String> sortBy) {
            this.sortBy = sortBy;
            return this;
        }

        /**
         * Set limit
         * @param limit Page size. (optional)
         * @return APIlistRiskModelFactorSetsRequest
         */
        public APIlistRiskModelFactorSetsRequest limit(Integer limit) {
            this.limit = limit;
            return this;
        }

        /**
         * Set filter
         * @param filter Expression to filter the result set. Read more about filtering results from LUSID here:   https://support.lusid.com/filtering-results-from-lusid. (optional)
         * @return APIlistRiskModelFactorSetsRequest
         */
        public APIlistRiskModelFactorSetsRequest filter(String filter) {
            this.filter = filter;
            return this;
        }

        /**
         * Build call for listRiskModelFactorSets
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested list of factor sets. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listRiskModelFactorSetsCall(asAt, page, sortBy, limit, filter, _callback);
        }

        /**
         * Execute listRiskModelFactorSets request
         * @return PagedResourceListOfRiskModelFactorSet
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested list of factor sets. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public PagedResourceListOfRiskModelFactorSet execute() throws ApiException {
            ApiResponse<PagedResourceListOfRiskModelFactorSet> localVarResp = listRiskModelFactorSetsWithHttpInfo(asAt, page, sortBy, limit, filter);
            return localVarResp.getData();
        }

        /**
         * Execute listRiskModelFactorSets request. Use any specified configuration options to override any other configuration for this request only.
         * @return PagedResourceListOfRiskModelFactorSet
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested list of factor sets. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public PagedResourceListOfRiskModelFactorSet execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<PagedResourceListOfRiskModelFactorSet> localVarResp = listRiskModelFactorSetsWithHttpInfo(asAt, page, sortBy, limit, filter, opts);
            return localVarResp.getData();
        }

        /**
         * Execute listRiskModelFactorSets request with HTTP info returned
         * @return ApiResponse&lt;PagedResourceListOfRiskModelFactorSet&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested list of factor sets. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PagedResourceListOfRiskModelFactorSet> executeWithHttpInfo() throws ApiException {
            return listRiskModelFactorSetsWithHttpInfo(asAt, page, sortBy, limit, filter);
        }

        /**
         * Execute listRiskModelFactorSets request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;PagedResourceListOfRiskModelFactorSet&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested list of factor sets. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PagedResourceListOfRiskModelFactorSet> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return listRiskModelFactorSetsWithHttpInfo(asAt, page, sortBy, limit, filter, opts);
        }

        /**
         * Execute listRiskModelFactorSets request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested list of factor sets. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PagedResourceListOfRiskModelFactorSet> _callback) throws ApiException {
            return listRiskModelFactorSetsAsync(asAt, page, sortBy, limit, filter, _callback);
        }

        /**
         * Execute listRiskModelFactorSets request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested list of factor sets. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PagedResourceListOfRiskModelFactorSet> _callback, ConfigurationOptions opts) throws ApiException {
            return listRiskModelFactorSetsAsync(asAt, page, sortBy, limit, filter, _callback, opts);
        }
    }

    /**
     * [EXPERIMENTAL] ListRiskModelFactorSets: Get a set of Factor Sets
     * Retrieves all Factor Sets (without related Factors) that fit the filter, in a specific order if sortBy is provided.  Supports pagination
     * @return APIlistRiskModelFactorSetsRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested list of factor sets. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIlistRiskModelFactorSetsRequest listRiskModelFactorSets() {
        return new APIlistRiskModelFactorSetsRequest();
    }
    private okhttp3.Call updateRiskModelFactorSetNameCall(String scope, String code, UpdateRiskModelFactorSetRequest updateRiskModelFactorSetRequest, final ApiCallback _callback) throws ApiException {
        return updateRiskModelFactorSetNameCall(scope, code, updateRiskModelFactorSetRequest,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call updateRiskModelFactorSetNameCall(String scope, String code, UpdateRiskModelFactorSetRequest updateRiskModelFactorSetRequest, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateRiskModelFactorSetRequest;

        // create path and map variables
        String localVarPath = "/api/riskmodels/factorsets/{scope}/{code}"
            .replace("{" + "scope" + "}", localVarApiClient.escapeString(scope.toString()))
            .replace("{" + "code" + "}", localVarApiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateRiskModelFactorSetNameValidateBeforeCall(String scope, String code, UpdateRiskModelFactorSetRequest updateRiskModelFactorSetRequest, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling updateRiskModelFactorSetName(Async)");
        }

        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling updateRiskModelFactorSetName(Async)");
        }

        return updateRiskModelFactorSetNameCall(scope, code, updateRiskModelFactorSetRequest, _callback, opts);

    }


    private ApiResponse<RiskModelFactorSet> updateRiskModelFactorSetNameWithHttpInfo(String scope, String code, UpdateRiskModelFactorSetRequest updateRiskModelFactorSetRequest) throws ApiException {
        okhttp3.Call localVarCall = updateRiskModelFactorSetNameValidateBeforeCall(scope, code, updateRiskModelFactorSetRequest, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<RiskModelFactorSet>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<RiskModelFactorSet> updateRiskModelFactorSetNameWithHttpInfo(String scope, String code, UpdateRiskModelFactorSetRequest updateRiskModelFactorSetRequest, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = updateRiskModelFactorSetNameValidateBeforeCall(scope, code, updateRiskModelFactorSetRequest, null, opts);
        Type localVarReturnType = new TypeToken<RiskModelFactorSet>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateRiskModelFactorSetNameAsync(String scope, String code, UpdateRiskModelFactorSetRequest updateRiskModelFactorSetRequest, final ApiCallback<RiskModelFactorSet> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateRiskModelFactorSetNameValidateBeforeCall(scope, code, updateRiskModelFactorSetRequest, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<RiskModelFactorSet>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call updateRiskModelFactorSetNameAsync(String scope, String code, UpdateRiskModelFactorSetRequest updateRiskModelFactorSetRequest, final ApiCallback<RiskModelFactorSet> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = updateRiskModelFactorSetNameValidateBeforeCall(scope, code, updateRiskModelFactorSetRequest, _callback, opts);
        Type localVarReturnType = new TypeToken<RiskModelFactorSet>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIupdateRiskModelFactorSetNameRequest {
        private final String scope;
        private final String code;
        private UpdateRiskModelFactorSetRequest updateRiskModelFactorSetRequest;

        private APIupdateRiskModelFactorSetNameRequest(String scope, String code) {
            this.scope = scope;
            this.code = code;
        }

        /**
         * Set updateRiskModelFactorSetRequest
         * @param updateRiskModelFactorSetRequest The request containing the updated name of the factor set. (optional)
         * @return APIupdateRiskModelFactorSetNameRequest
         */
        public APIupdateRiskModelFactorSetNameRequest updateRiskModelFactorSetRequest(UpdateRiskModelFactorSetRequest updateRiskModelFactorSetRequest) {
            this.updateRiskModelFactorSetRequest = updateRiskModelFactorSetRequest;
            return this;
        }

        /**
         * Build call for updateRiskModelFactorSetName
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The updated version of the requested factor set. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return updateRiskModelFactorSetNameCall(scope, code, updateRiskModelFactorSetRequest, _callback);
        }

        /**
         * Execute updateRiskModelFactorSetName request
         * @return RiskModelFactorSet
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The updated version of the requested factor set. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public RiskModelFactorSet execute() throws ApiException {
            ApiResponse<RiskModelFactorSet> localVarResp = updateRiskModelFactorSetNameWithHttpInfo(scope, code, updateRiskModelFactorSetRequest);
            return localVarResp.getData();
        }

        /**
         * Execute updateRiskModelFactorSetName request. Use any specified configuration options to override any other configuration for this request only.
         * @return RiskModelFactorSet
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The updated version of the requested factor set. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public RiskModelFactorSet execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<RiskModelFactorSet> localVarResp = updateRiskModelFactorSetNameWithHttpInfo(scope, code, updateRiskModelFactorSetRequest, opts);
            return localVarResp.getData();
        }

        /**
         * Execute updateRiskModelFactorSetName request with HTTP info returned
         * @return ApiResponse&lt;RiskModelFactorSet&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The updated version of the requested factor set. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<RiskModelFactorSet> executeWithHttpInfo() throws ApiException {
            return updateRiskModelFactorSetNameWithHttpInfo(scope, code, updateRiskModelFactorSetRequest);
        }

        /**
         * Execute updateRiskModelFactorSetName request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;RiskModelFactorSet&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The updated version of the requested factor set. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<RiskModelFactorSet> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return updateRiskModelFactorSetNameWithHttpInfo(scope, code, updateRiskModelFactorSetRequest, opts);
        }

        /**
         * Execute updateRiskModelFactorSetName request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The updated version of the requested factor set. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<RiskModelFactorSet> _callback) throws ApiException {
            return updateRiskModelFactorSetNameAsync(scope, code, updateRiskModelFactorSetRequest, _callback);
        }

        /**
         * Execute updateRiskModelFactorSetName request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The updated version of the requested factor set. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<RiskModelFactorSet> _callback, ConfigurationOptions opts) throws ApiException {
            return updateRiskModelFactorSetNameAsync(scope, code, updateRiskModelFactorSetRequest, _callback, opts);
        }
    }

    /**
     * [EXPERIMENTAL] UpdateRiskModelFactorSetName: Update Factor Set Display Name
     * Overwrites an existing Factor Set as per scope and code from the route  Update request has a single property - DisplayName
     * @param scope The scope of the specified factor set. (required)
     * @param code The code of the specified factor set. Together with the domain and scope this uniquely   identifies the factor set. (required)
     * @return APIupdateRiskModelFactorSetNameRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated version of the requested factor set. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIupdateRiskModelFactorSetNameRequest updateRiskModelFactorSetName(String scope, String code) {
        return new APIupdateRiskModelFactorSetNameRequest(scope, code);
    }
}
