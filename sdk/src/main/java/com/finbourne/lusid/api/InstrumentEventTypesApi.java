/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.lusid.api;

import com.finbourne.lusid.ApiCallback;
import com.finbourne.lusid.ApiClient;
import com.finbourne.lusid.ApiException;
import com.finbourne.lusid.ApiResponse;
import com.finbourne.lusid.Configuration;
import com.finbourne.lusid.Pair;
import com.finbourne.lusid.ProgressRequestBody;
import com.finbourne.lusid.ProgressResponseBody;
import com.finbourne.lusid.extensions.ConfigurationOptions;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.finbourne.lusid.model.LusidProblemDetails;
import com.finbourne.lusid.model.LusidValidationProblemDetails;
import java.time.OffsetDateTime;
import com.finbourne.lusid.model.PagedResourceListOfTransactionTemplate;
import com.finbourne.lusid.model.PagedResourceListOfTransactionTemplateSpecification;
import com.finbourne.lusid.model.TransactionTemplate;
import com.finbourne.lusid.model.TransactionTemplateRequest;
import com.finbourne.lusid.model.TransactionTemplateSpecification;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class InstrumentEventTypesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public InstrumentEventTypesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public InstrumentEventTypesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createTransactionTemplateCall(String instrumentEventType, String instrumentType, String scope, TransactionTemplateRequest transactionTemplateRequest, final ApiCallback _callback) throws ApiException {
        return createTransactionTemplateCall(instrumentEventType, instrumentType, scope, transactionTemplateRequest,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call createTransactionTemplateCall(String instrumentEventType, String instrumentType, String scope, TransactionTemplateRequest transactionTemplateRequest, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = transactionTemplateRequest;

        // create path and map variables
        String localVarPath = "/api/instrumenteventtypes/{instrumentEventType}/transactiontemplates/{instrumentType}/{scope}"
            .replace("{" + "instrumentEventType" + "}", localVarApiClient.escapeString(instrumentEventType.toString()))
            .replace("{" + "instrumentType" + "}", localVarApiClient.escapeString(instrumentType.toString()))
            .replace("{" + "scope" + "}", localVarApiClient.escapeString(scope.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createTransactionTemplateValidateBeforeCall(String instrumentEventType, String instrumentType, String scope, TransactionTemplateRequest transactionTemplateRequest, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'instrumentEventType' is set
        if (instrumentEventType == null) {
            throw new ApiException("Missing the required parameter 'instrumentEventType' when calling createTransactionTemplate(Async)");
        }

        // verify the required parameter 'instrumentType' is set
        if (instrumentType == null) {
            throw new ApiException("Missing the required parameter 'instrumentType' when calling createTransactionTemplate(Async)");
        }

        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling createTransactionTemplate(Async)");
        }

        // verify the required parameter 'transactionTemplateRequest' is set
        if (transactionTemplateRequest == null) {
            throw new ApiException("Missing the required parameter 'transactionTemplateRequest' when calling createTransactionTemplate(Async)");
        }

        return createTransactionTemplateCall(instrumentEventType, instrumentType, scope, transactionTemplateRequest, _callback, opts);

    }


    private ApiResponse<TransactionTemplate> createTransactionTemplateWithHttpInfo(String instrumentEventType, String instrumentType, String scope, TransactionTemplateRequest transactionTemplateRequest) throws ApiException {
        okhttp3.Call localVarCall = createTransactionTemplateValidateBeforeCall(instrumentEventType, instrumentType, scope, transactionTemplateRequest, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<TransactionTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<TransactionTemplate> createTransactionTemplateWithHttpInfo(String instrumentEventType, String instrumentType, String scope, TransactionTemplateRequest transactionTemplateRequest, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = createTransactionTemplateValidateBeforeCall(instrumentEventType, instrumentType, scope, transactionTemplateRequest, null, opts);
        Type localVarReturnType = new TypeToken<TransactionTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createTransactionTemplateAsync(String instrumentEventType, String instrumentType, String scope, TransactionTemplateRequest transactionTemplateRequest, final ApiCallback<TransactionTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = createTransactionTemplateValidateBeforeCall(instrumentEventType, instrumentType, scope, transactionTemplateRequest, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<TransactionTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call createTransactionTemplateAsync(String instrumentEventType, String instrumentType, String scope, TransactionTemplateRequest transactionTemplateRequest, final ApiCallback<TransactionTemplate> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = createTransactionTemplateValidateBeforeCall(instrumentEventType, instrumentType, scope, transactionTemplateRequest, _callback, opts);
        Type localVarReturnType = new TypeToken<TransactionTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIcreateTransactionTemplateRequest {
        private final String instrumentEventType;
        private final String instrumentType;
        private final String scope;
        private final TransactionTemplateRequest transactionTemplateRequest;

        private APIcreateTransactionTemplateRequest(String instrumentEventType, String instrumentType, String scope, TransactionTemplateRequest transactionTemplateRequest) {
            this.instrumentEventType = instrumentEventType;
            this.instrumentType = instrumentType;
            this.scope = scope;
            this.transactionTemplateRequest = transactionTemplateRequest;
        }

        /**
         * Build call for createTransactionTemplate
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The response of the transaction template that was created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return createTransactionTemplateCall(instrumentEventType, instrumentType, scope, transactionTemplateRequest, _callback);
        }

        /**
         * Execute createTransactionTemplate request
         * @return TransactionTemplate
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The response of the transaction template that was created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public TransactionTemplate execute() throws ApiException {
            ApiResponse<TransactionTemplate> localVarResp = createTransactionTemplateWithHttpInfo(instrumentEventType, instrumentType, scope, transactionTemplateRequest);
            return localVarResp.getData();
        }

        /**
         * Execute createTransactionTemplate request. Use any specified configuration options to override any other configuration for this request only.
         * @return TransactionTemplate
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The response of the transaction template that was created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public TransactionTemplate execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<TransactionTemplate> localVarResp = createTransactionTemplateWithHttpInfo(instrumentEventType, instrumentType, scope, transactionTemplateRequest, opts);
            return localVarResp.getData();
        }

        /**
         * Execute createTransactionTemplate request with HTTP info returned
         * @return ApiResponse&lt;TransactionTemplate&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The response of the transaction template that was created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TransactionTemplate> executeWithHttpInfo() throws ApiException {
            return createTransactionTemplateWithHttpInfo(instrumentEventType, instrumentType, scope, transactionTemplateRequest);
        }

        /**
         * Execute createTransactionTemplate request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;TransactionTemplate&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The response of the transaction template that was created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TransactionTemplate> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return createTransactionTemplateWithHttpInfo(instrumentEventType, instrumentType, scope, transactionTemplateRequest, opts);
        }

        /**
         * Execute createTransactionTemplate request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The response of the transaction template that was created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TransactionTemplate> _callback) throws ApiException {
            return createTransactionTemplateAsync(instrumentEventType, instrumentType, scope, transactionTemplateRequest, _callback);
        }

        /**
         * Execute createTransactionTemplate request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The response of the transaction template that was created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TransactionTemplate> _callback, ConfigurationOptions opts) throws ApiException {
            return createTransactionTemplateAsync(instrumentEventType, instrumentType, scope, transactionTemplateRequest, _callback, opts);
        }
    }

    /**
     * CreateTransactionTemplate: Create Transaction Template
     * Create a transaction template for a particular instrument event type in a scope.
     * @param instrumentEventType The type of instrument events that the template is applied to. (required)
     * @param instrumentType The instrument type of the transaction template. The combination of the instrument   event type, instrument type and scope uniquely identifies a transaction template (required)
     * @param scope The scope in which the template lies. (required)
     * @param transactionTemplateRequest A request defining a new transaction template to be created. (required)
     * @return APIcreateTransactionTemplateRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The response of the transaction template that was created. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIcreateTransactionTemplateRequest createTransactionTemplate(String instrumentEventType, String instrumentType, String scope, TransactionTemplateRequest transactionTemplateRequest) {
        return new APIcreateTransactionTemplateRequest(instrumentEventType, instrumentType, scope, transactionTemplateRequest);
    }
    private okhttp3.Call deleteTransactionTemplateCall(String instrumentEventType, String instrumentType, String scope, final ApiCallback _callback) throws ApiException {
        return deleteTransactionTemplateCall(instrumentEventType, instrumentType, scope,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call deleteTransactionTemplateCall(String instrumentEventType, String instrumentType, String scope, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/instrumenteventtypes/{instrumentEventType}/transactiontemplates/{instrumentType}/{scope}"
            .replace("{" + "instrumentEventType" + "}", localVarApiClient.escapeString(instrumentEventType.toString()))
            .replace("{" + "instrumentType" + "}", localVarApiClient.escapeString(instrumentType.toString()))
            .replace("{" + "scope" + "}", localVarApiClient.escapeString(scope.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteTransactionTemplateValidateBeforeCall(String instrumentEventType, String instrumentType, String scope, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'instrumentEventType' is set
        if (instrumentEventType == null) {
            throw new ApiException("Missing the required parameter 'instrumentEventType' when calling deleteTransactionTemplate(Async)");
        }

        // verify the required parameter 'instrumentType' is set
        if (instrumentType == null) {
            throw new ApiException("Missing the required parameter 'instrumentType' when calling deleteTransactionTemplate(Async)");
        }

        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling deleteTransactionTemplate(Async)");
        }

        return deleteTransactionTemplateCall(instrumentEventType, instrumentType, scope, _callback, opts);

    }


    private ApiResponse<OffsetDateTime> deleteTransactionTemplateWithHttpInfo(String instrumentEventType, String instrumentType, String scope) throws ApiException {
        okhttp3.Call localVarCall = deleteTransactionTemplateValidateBeforeCall(instrumentEventType, instrumentType, scope, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<OffsetDateTime>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<OffsetDateTime> deleteTransactionTemplateWithHttpInfo(String instrumentEventType, String instrumentType, String scope, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = deleteTransactionTemplateValidateBeforeCall(instrumentEventType, instrumentType, scope, null, opts);
        Type localVarReturnType = new TypeToken<OffsetDateTime>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteTransactionTemplateAsync(String instrumentEventType, String instrumentType, String scope, final ApiCallback<OffsetDateTime> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteTransactionTemplateValidateBeforeCall(instrumentEventType, instrumentType, scope, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<OffsetDateTime>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call deleteTransactionTemplateAsync(String instrumentEventType, String instrumentType, String scope, final ApiCallback<OffsetDateTime> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = deleteTransactionTemplateValidateBeforeCall(instrumentEventType, instrumentType, scope, _callback, opts);
        Type localVarReturnType = new TypeToken<OffsetDateTime>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIdeleteTransactionTemplateRequest {
        private final String instrumentEventType;
        private final String instrumentType;
        private final String scope;

        private APIdeleteTransactionTemplateRequest(String instrumentEventType, String instrumentType, String scope) {
            this.instrumentEventType = instrumentEventType;
            this.instrumentType = instrumentType;
            this.scope = scope;
        }

        /**
         * Build call for deleteTransactionTemplate
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The AsAt Time the Template was deleted. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteTransactionTemplateCall(instrumentEventType, instrumentType, scope, _callback);
        }

        /**
         * Execute deleteTransactionTemplate request
         * @return OffsetDateTime
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The AsAt Time the Template was deleted. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public OffsetDateTime execute() throws ApiException {
            ApiResponse<OffsetDateTime> localVarResp = deleteTransactionTemplateWithHttpInfo(instrumentEventType, instrumentType, scope);
            return localVarResp.getData();
        }

        /**
         * Execute deleteTransactionTemplate request. Use any specified configuration options to override any other configuration for this request only.
         * @return OffsetDateTime
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The AsAt Time the Template was deleted. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public OffsetDateTime execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<OffsetDateTime> localVarResp = deleteTransactionTemplateWithHttpInfo(instrumentEventType, instrumentType, scope, opts);
            return localVarResp.getData();
        }

        /**
         * Execute deleteTransactionTemplate request with HTTP info returned
         * @return ApiResponse&lt;OffsetDateTime&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The AsAt Time the Template was deleted. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<OffsetDateTime> executeWithHttpInfo() throws ApiException {
            return deleteTransactionTemplateWithHttpInfo(instrumentEventType, instrumentType, scope);
        }

        /**
         * Execute deleteTransactionTemplate request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;OffsetDateTime&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The AsAt Time the Template was deleted. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<OffsetDateTime> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return deleteTransactionTemplateWithHttpInfo(instrumentEventType, instrumentType, scope, opts);
        }

        /**
         * Execute deleteTransactionTemplate request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The AsAt Time the Template was deleted. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<OffsetDateTime> _callback) throws ApiException {
            return deleteTransactionTemplateAsync(instrumentEventType, instrumentType, scope, _callback);
        }

        /**
         * Execute deleteTransactionTemplate request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The AsAt Time the Template was deleted. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<OffsetDateTime> _callback, ConfigurationOptions opts) throws ApiException {
            return deleteTransactionTemplateAsync(instrumentEventType, instrumentType, scope, _callback, opts);
        }
    }

    /**
     * DeleteTransactionTemplate: Delete Transaction Template
     * Delete a transaction template for a particular instrument event type in a scope.
     * @param instrumentEventType The type of instrument events that the template is applied to. (required)
     * @param instrumentType The instrument type of the transaction template. The combination of the instrument   event type, instrument type and scope uniquely identifies a transaction template (required)
     * @param scope The scope of the template. (required)
     * @return APIdeleteTransactionTemplateRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The AsAt Time the Template was deleted. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIdeleteTransactionTemplateRequest deleteTransactionTemplate(String instrumentEventType, String instrumentType, String scope) {
        return new APIdeleteTransactionTemplateRequest(instrumentEventType, instrumentType, scope);
    }
    private okhttp3.Call getTransactionTemplateCall(String instrumentEventType, String instrumentType, String scope, OffsetDateTime asAt, final ApiCallback _callback) throws ApiException {
        return getTransactionTemplateCall(instrumentEventType, instrumentType, scope, asAt,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call getTransactionTemplateCall(String instrumentEventType, String instrumentType, String scope, OffsetDateTime asAt, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/instrumenteventtypes/{instrumentEventType}/transactiontemplates/{instrumentType}/{scope}"
            .replace("{" + "instrumentEventType" + "}", localVarApiClient.escapeString(instrumentEventType.toString()))
            .replace("{" + "instrumentType" + "}", localVarApiClient.escapeString(instrumentType.toString()))
            .replace("{" + "scope" + "}", localVarApiClient.escapeString(scope.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (asAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asAt", asAt));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTransactionTemplateValidateBeforeCall(String instrumentEventType, String instrumentType, String scope, OffsetDateTime asAt, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'instrumentEventType' is set
        if (instrumentEventType == null) {
            throw new ApiException("Missing the required parameter 'instrumentEventType' when calling getTransactionTemplate(Async)");
        }

        // verify the required parameter 'instrumentType' is set
        if (instrumentType == null) {
            throw new ApiException("Missing the required parameter 'instrumentType' when calling getTransactionTemplate(Async)");
        }

        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling getTransactionTemplate(Async)");
        }

        return getTransactionTemplateCall(instrumentEventType, instrumentType, scope, asAt, _callback, opts);

    }


    private ApiResponse<TransactionTemplate> getTransactionTemplateWithHttpInfo(String instrumentEventType, String instrumentType, String scope, OffsetDateTime asAt) throws ApiException {
        okhttp3.Call localVarCall = getTransactionTemplateValidateBeforeCall(instrumentEventType, instrumentType, scope, asAt, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<TransactionTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<TransactionTemplate> getTransactionTemplateWithHttpInfo(String instrumentEventType, String instrumentType, String scope, OffsetDateTime asAt, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = getTransactionTemplateValidateBeforeCall(instrumentEventType, instrumentType, scope, asAt, null, opts);
        Type localVarReturnType = new TypeToken<TransactionTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getTransactionTemplateAsync(String instrumentEventType, String instrumentType, String scope, OffsetDateTime asAt, final ApiCallback<TransactionTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTransactionTemplateValidateBeforeCall(instrumentEventType, instrumentType, scope, asAt, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<TransactionTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call getTransactionTemplateAsync(String instrumentEventType, String instrumentType, String scope, OffsetDateTime asAt, final ApiCallback<TransactionTemplate> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = getTransactionTemplateValidateBeforeCall(instrumentEventType, instrumentType, scope, asAt, _callback, opts);
        Type localVarReturnType = new TypeToken<TransactionTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetTransactionTemplateRequest {
        private final String instrumentEventType;
        private final String instrumentType;
        private final String scope;
        private OffsetDateTime asAt;

        private APIgetTransactionTemplateRequest(String instrumentEventType, String instrumentType, String scope) {
            this.instrumentEventType = instrumentEventType;
            this.instrumentType = instrumentType;
            this.scope = scope;
        }

        /**
         * Set asAt
         * @param asAt The AsAt time of the requested Transaction Template (optional)
         * @return APIgetTransactionTemplateRequest
         */
        public APIgetTransactionTemplateRequest asAt(OffsetDateTime asAt) {
            this.asAt = asAt;
            return this;
        }

        /**
         * Build call for getTransactionTemplate
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The transaction template. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getTransactionTemplateCall(instrumentEventType, instrumentType, scope, asAt, _callback);
        }

        /**
         * Execute getTransactionTemplate request
         * @return TransactionTemplate
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The transaction template. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public TransactionTemplate execute() throws ApiException {
            ApiResponse<TransactionTemplate> localVarResp = getTransactionTemplateWithHttpInfo(instrumentEventType, instrumentType, scope, asAt);
            return localVarResp.getData();
        }

        /**
         * Execute getTransactionTemplate request. Use any specified configuration options to override any other configuration for this request only.
         * @return TransactionTemplate
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The transaction template. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public TransactionTemplate execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<TransactionTemplate> localVarResp = getTransactionTemplateWithHttpInfo(instrumentEventType, instrumentType, scope, asAt, opts);
            return localVarResp.getData();
        }

        /**
         * Execute getTransactionTemplate request with HTTP info returned
         * @return ApiResponse&lt;TransactionTemplate&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The transaction template. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TransactionTemplate> executeWithHttpInfo() throws ApiException {
            return getTransactionTemplateWithHttpInfo(instrumentEventType, instrumentType, scope, asAt);
        }

        /**
         * Execute getTransactionTemplate request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;TransactionTemplate&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The transaction template. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TransactionTemplate> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return getTransactionTemplateWithHttpInfo(instrumentEventType, instrumentType, scope, asAt, opts);
        }

        /**
         * Execute getTransactionTemplate request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The transaction template. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TransactionTemplate> _callback) throws ApiException {
            return getTransactionTemplateAsync(instrumentEventType, instrumentType, scope, asAt, _callback);
        }

        /**
         * Execute getTransactionTemplate request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The transaction template. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TransactionTemplate> _callback, ConfigurationOptions opts) throws ApiException {
            return getTransactionTemplateAsync(instrumentEventType, instrumentType, scope, asAt, _callback, opts);
        }
    }

    /**
     * GetTransactionTemplate: Get Transaction Template
     * Gets the Transaction Template that for the instrument event type within the scope specified.
     * @param instrumentEventType The instrument event type of the transaction template (required)
     * @param instrumentType The instrument type of the transaction template. The combination of the instrument   event type, instrument type and scope uniquely identifies a transaction template (required)
     * @param scope The scope in which the template lies. When not supplied the scope is &#39;default&#39;. (required)
     * @return APIgetTransactionTemplateRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The transaction template. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIgetTransactionTemplateRequest getTransactionTemplate(String instrumentEventType, String instrumentType, String scope) {
        return new APIgetTransactionTemplateRequest(instrumentEventType, instrumentType, scope);
    }
    private okhttp3.Call getTransactionTemplateSpecificationCall(String instrumentEventType, final ApiCallback _callback) throws ApiException {
        return getTransactionTemplateSpecificationCall(instrumentEventType,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call getTransactionTemplateSpecificationCall(String instrumentEventType, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/instrumenteventtypes/{instrumentEventType}/transactiontemplatespecification"
            .replace("{" + "instrumentEventType" + "}", localVarApiClient.escapeString(instrumentEventType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTransactionTemplateSpecificationValidateBeforeCall(String instrumentEventType, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'instrumentEventType' is set
        if (instrumentEventType == null) {
            throw new ApiException("Missing the required parameter 'instrumentEventType' when calling getTransactionTemplateSpecification(Async)");
        }

        return getTransactionTemplateSpecificationCall(instrumentEventType, _callback, opts);

    }


    private ApiResponse<TransactionTemplateSpecification> getTransactionTemplateSpecificationWithHttpInfo(String instrumentEventType) throws ApiException {
        okhttp3.Call localVarCall = getTransactionTemplateSpecificationValidateBeforeCall(instrumentEventType, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<TransactionTemplateSpecification>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<TransactionTemplateSpecification> getTransactionTemplateSpecificationWithHttpInfo(String instrumentEventType, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = getTransactionTemplateSpecificationValidateBeforeCall(instrumentEventType, null, opts);
        Type localVarReturnType = new TypeToken<TransactionTemplateSpecification>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getTransactionTemplateSpecificationAsync(String instrumentEventType, final ApiCallback<TransactionTemplateSpecification> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTransactionTemplateSpecificationValidateBeforeCall(instrumentEventType, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<TransactionTemplateSpecification>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call getTransactionTemplateSpecificationAsync(String instrumentEventType, final ApiCallback<TransactionTemplateSpecification> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = getTransactionTemplateSpecificationValidateBeforeCall(instrumentEventType, _callback, opts);
        Type localVarReturnType = new TypeToken<TransactionTemplateSpecification>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetTransactionTemplateSpecificationRequest {
        private final String instrumentEventType;

        private APIgetTransactionTemplateSpecificationRequest(String instrumentEventType) {
            this.instrumentEventType = instrumentEventType;
        }

        /**
         * Build call for getTransactionTemplateSpecification
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested Transaction Template Specification. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getTransactionTemplateSpecificationCall(instrumentEventType, _callback);
        }

        /**
         * Execute getTransactionTemplateSpecification request
         * @return TransactionTemplateSpecification
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested Transaction Template Specification. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public TransactionTemplateSpecification execute() throws ApiException {
            ApiResponse<TransactionTemplateSpecification> localVarResp = getTransactionTemplateSpecificationWithHttpInfo(instrumentEventType);
            return localVarResp.getData();
        }

        /**
         * Execute getTransactionTemplateSpecification request. Use any specified configuration options to override any other configuration for this request only.
         * @return TransactionTemplateSpecification
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested Transaction Template Specification. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public TransactionTemplateSpecification execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<TransactionTemplateSpecification> localVarResp = getTransactionTemplateSpecificationWithHttpInfo(instrumentEventType, opts);
            return localVarResp.getData();
        }

        /**
         * Execute getTransactionTemplateSpecification request with HTTP info returned
         * @return ApiResponse&lt;TransactionTemplateSpecification&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested Transaction Template Specification. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TransactionTemplateSpecification> executeWithHttpInfo() throws ApiException {
            return getTransactionTemplateSpecificationWithHttpInfo(instrumentEventType);
        }

        /**
         * Execute getTransactionTemplateSpecification request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;TransactionTemplateSpecification&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested Transaction Template Specification. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TransactionTemplateSpecification> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return getTransactionTemplateSpecificationWithHttpInfo(instrumentEventType, opts);
        }

        /**
         * Execute getTransactionTemplateSpecification request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested Transaction Template Specification. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TransactionTemplateSpecification> _callback) throws ApiException {
            return getTransactionTemplateSpecificationAsync(instrumentEventType, _callback);
        }

        /**
         * Execute getTransactionTemplateSpecification request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested Transaction Template Specification. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TransactionTemplateSpecification> _callback, ConfigurationOptions opts) throws ApiException {
            return getTransactionTemplateSpecificationAsync(instrumentEventType, _callback, opts);
        }
    }

    /**
     * GetTransactionTemplateSpecification: Get Transaction Template Specification.
     * Retrieve the transaction template specification for a particular event type.
     * @param instrumentEventType The requested instrument event type. (required)
     * @return APIgetTransactionTemplateSpecificationRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested Transaction Template Specification. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIgetTransactionTemplateSpecificationRequest getTransactionTemplateSpecification(String instrumentEventType) {
        return new APIgetTransactionTemplateSpecificationRequest(instrumentEventType);
    }
    private okhttp3.Call listTransactionTemplateSpecificationsCall(OffsetDateTime asAt, String page, Integer limit, String filter, List<String> sortBy, final ApiCallback _callback) throws ApiException {
        return listTransactionTemplateSpecificationsCall(asAt, page, limit, filter, sortBy,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call listTransactionTemplateSpecificationsCall(OffsetDateTime asAt, String page, Integer limit, String filter, List<String> sortBy, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/instrumenteventtypes/transactiontemplatespecifications";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (asAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asAt", asAt));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (sortBy != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "sortBy", sortBy));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listTransactionTemplateSpecificationsValidateBeforeCall(OffsetDateTime asAt, String page, Integer limit, String filter, List<String> sortBy, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        return listTransactionTemplateSpecificationsCall(asAt, page, limit, filter, sortBy, _callback, opts);

    }


    private ApiResponse<PagedResourceListOfTransactionTemplateSpecification> listTransactionTemplateSpecificationsWithHttpInfo(OffsetDateTime asAt, String page, Integer limit, String filter, List<String> sortBy) throws ApiException {
        okhttp3.Call localVarCall = listTransactionTemplateSpecificationsValidateBeforeCall(asAt, page, limit, filter, sortBy, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<PagedResourceListOfTransactionTemplateSpecification>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<PagedResourceListOfTransactionTemplateSpecification> listTransactionTemplateSpecificationsWithHttpInfo(OffsetDateTime asAt, String page, Integer limit, String filter, List<String> sortBy, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = listTransactionTemplateSpecificationsValidateBeforeCall(asAt, page, limit, filter, sortBy, null, opts);
        Type localVarReturnType = new TypeToken<PagedResourceListOfTransactionTemplateSpecification>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listTransactionTemplateSpecificationsAsync(OffsetDateTime asAt, String page, Integer limit, String filter, List<String> sortBy, final ApiCallback<PagedResourceListOfTransactionTemplateSpecification> _callback) throws ApiException {

        okhttp3.Call localVarCall = listTransactionTemplateSpecificationsValidateBeforeCall(asAt, page, limit, filter, sortBy, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<PagedResourceListOfTransactionTemplateSpecification>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call listTransactionTemplateSpecificationsAsync(OffsetDateTime asAt, String page, Integer limit, String filter, List<String> sortBy, final ApiCallback<PagedResourceListOfTransactionTemplateSpecification> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = listTransactionTemplateSpecificationsValidateBeforeCall(asAt, page, limit, filter, sortBy, _callback, opts);
        Type localVarReturnType = new TypeToken<PagedResourceListOfTransactionTemplateSpecification>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIlistTransactionTemplateSpecificationsRequest {
        private OffsetDateTime asAt;
        private String page;
        private Integer limit;
        private String filter;
        private List<String> sortBy;

        private APIlistTransactionTemplateSpecificationsRequest() {
        }

        /**
         * Set asAt
         * @param asAt AsAt of the request (optional)
         * @return APIlistTransactionTemplateSpecificationsRequest
         */
        public APIlistTransactionTemplateSpecificationsRequest asAt(OffsetDateTime asAt) {
            this.asAt = asAt;
            return this;
        }

        /**
         * Set page
         * @param page The pagination token to use to continue listing Transaction Template Specifications from   a previous call to list Transaction Template Specifications.   This value is returned from the previous call. If a pagination token is provided the sortBy, filter, and asAt   fields must not have changed since the original request. (optional)
         * @return APIlistTransactionTemplateSpecificationsRequest
         */
        public APIlistTransactionTemplateSpecificationsRequest page(String page) {
            this.page = page;
            return this;
        }

        /**
         * Set limit
         * @param limit When paginating, limit the number of returned results to this many. (optional)
         * @return APIlistTransactionTemplateSpecificationsRequest
         */
        public APIlistTransactionTemplateSpecificationsRequest limit(Integer limit) {
            this.limit = limit;
            return this;
        }

        /**
         * Set filter
         * @param filter Expression to filter the result set. Read more about filtering results from LUSID here:   https://support.lusid.com/filtering-results-from-lusid. (optional)
         * @return APIlistTransactionTemplateSpecificationsRequest
         */
        public APIlistTransactionTemplateSpecificationsRequest filter(String filter) {
            this.filter = filter;
            return this;
        }

        /**
         * Set sortBy
         * @param sortBy A list of field names to sort by, each suffixed by \&quot; ASC\&quot; or \&quot; DESC\&quot;. (optional)
         * @return APIlistTransactionTemplateSpecificationsRequest
         */
        public APIlistTransactionTemplateSpecificationsRequest sortBy(List<String> sortBy) {
            this.sortBy = sortBy;
            return this;
        }

        /**
         * Build call for listTransactionTemplateSpecifications
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The Transaction Template Specifications. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listTransactionTemplateSpecificationsCall(asAt, page, limit, filter, sortBy, _callback);
        }

        /**
         * Execute listTransactionTemplateSpecifications request
         * @return PagedResourceListOfTransactionTemplateSpecification
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The Transaction Template Specifications. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public PagedResourceListOfTransactionTemplateSpecification execute() throws ApiException {
            ApiResponse<PagedResourceListOfTransactionTemplateSpecification> localVarResp = listTransactionTemplateSpecificationsWithHttpInfo(asAt, page, limit, filter, sortBy);
            return localVarResp.getData();
        }

        /**
         * Execute listTransactionTemplateSpecifications request. Use any specified configuration options to override any other configuration for this request only.
         * @return PagedResourceListOfTransactionTemplateSpecification
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The Transaction Template Specifications. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public PagedResourceListOfTransactionTemplateSpecification execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<PagedResourceListOfTransactionTemplateSpecification> localVarResp = listTransactionTemplateSpecificationsWithHttpInfo(asAt, page, limit, filter, sortBy, opts);
            return localVarResp.getData();
        }

        /**
         * Execute listTransactionTemplateSpecifications request with HTTP info returned
         * @return ApiResponse&lt;PagedResourceListOfTransactionTemplateSpecification&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The Transaction Template Specifications. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PagedResourceListOfTransactionTemplateSpecification> executeWithHttpInfo() throws ApiException {
            return listTransactionTemplateSpecificationsWithHttpInfo(asAt, page, limit, filter, sortBy);
        }

        /**
         * Execute listTransactionTemplateSpecifications request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;PagedResourceListOfTransactionTemplateSpecification&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The Transaction Template Specifications. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PagedResourceListOfTransactionTemplateSpecification> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return listTransactionTemplateSpecificationsWithHttpInfo(asAt, page, limit, filter, sortBy, opts);
        }

        /**
         * Execute listTransactionTemplateSpecifications request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The Transaction Template Specifications. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PagedResourceListOfTransactionTemplateSpecification> _callback) throws ApiException {
            return listTransactionTemplateSpecificationsAsync(asAt, page, limit, filter, sortBy, _callback);
        }

        /**
         * Execute listTransactionTemplateSpecifications request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The Transaction Template Specifications. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PagedResourceListOfTransactionTemplateSpecification> _callback, ConfigurationOptions opts) throws ApiException {
            return listTransactionTemplateSpecificationsAsync(asAt, page, limit, filter, sortBy, _callback, opts);
        }
    }

    /**
     * ListTransactionTemplateSpecifications: List Transaction Template Specifications.
     * Retrieves all transaction template specifications.
     * @return APIlistTransactionTemplateSpecificationsRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Transaction Template Specifications. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIlistTransactionTemplateSpecificationsRequest listTransactionTemplateSpecifications() {
        return new APIlistTransactionTemplateSpecificationsRequest();
    }
    private okhttp3.Call listTransactionTemplatesCall(OffsetDateTime asAt, String page, Integer limit, String filter, List<String> sortBy, final ApiCallback _callback) throws ApiException {
        return listTransactionTemplatesCall(asAt, page, limit, filter, sortBy,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call listTransactionTemplatesCall(OffsetDateTime asAt, String page, Integer limit, String filter, List<String> sortBy, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/instrumenteventtypes/transactiontemplates";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (asAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asAt", asAt));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (sortBy != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "sortBy", sortBy));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listTransactionTemplatesValidateBeforeCall(OffsetDateTime asAt, String page, Integer limit, String filter, List<String> sortBy, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        return listTransactionTemplatesCall(asAt, page, limit, filter, sortBy, _callback, opts);

    }


    private ApiResponse<PagedResourceListOfTransactionTemplate> listTransactionTemplatesWithHttpInfo(OffsetDateTime asAt, String page, Integer limit, String filter, List<String> sortBy) throws ApiException {
        okhttp3.Call localVarCall = listTransactionTemplatesValidateBeforeCall(asAt, page, limit, filter, sortBy, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<PagedResourceListOfTransactionTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<PagedResourceListOfTransactionTemplate> listTransactionTemplatesWithHttpInfo(OffsetDateTime asAt, String page, Integer limit, String filter, List<String> sortBy, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = listTransactionTemplatesValidateBeforeCall(asAt, page, limit, filter, sortBy, null, opts);
        Type localVarReturnType = new TypeToken<PagedResourceListOfTransactionTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listTransactionTemplatesAsync(OffsetDateTime asAt, String page, Integer limit, String filter, List<String> sortBy, final ApiCallback<PagedResourceListOfTransactionTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = listTransactionTemplatesValidateBeforeCall(asAt, page, limit, filter, sortBy, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<PagedResourceListOfTransactionTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call listTransactionTemplatesAsync(OffsetDateTime asAt, String page, Integer limit, String filter, List<String> sortBy, final ApiCallback<PagedResourceListOfTransactionTemplate> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = listTransactionTemplatesValidateBeforeCall(asAt, page, limit, filter, sortBy, _callback, opts);
        Type localVarReturnType = new TypeToken<PagedResourceListOfTransactionTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIlistTransactionTemplatesRequest {
        private OffsetDateTime asAt;
        private String page;
        private Integer limit;
        private String filter;
        private List<String> sortBy;

        private APIlistTransactionTemplatesRequest() {
        }

        /**
         * Set asAt
         * @param asAt The AsAt time at which to retrieve the Transaction Templates (optional)
         * @return APIlistTransactionTemplatesRequest
         */
        public APIlistTransactionTemplatesRequest asAt(OffsetDateTime asAt) {
            this.asAt = asAt;
            return this;
        }

        /**
         * Set page
         * @param page The pagination token to use to continue listing Transaction Templates from a previous call to list Transaction Templates.   This value is returned from the previous call. If a pagination token is provided the sortBy, filter, limit, and asAt fields   must not have changed since the original request. (optional)
         * @return APIlistTransactionTemplatesRequest
         */
        public APIlistTransactionTemplatesRequest page(String page) {
            this.page = page;
            return this;
        }

        /**
         * Set limit
         * @param limit When paginating, limit the number of returned results to this many. (optional)
         * @return APIlistTransactionTemplatesRequest
         */
        public APIlistTransactionTemplatesRequest limit(Integer limit) {
            this.limit = limit;
            return this;
        }

        /**
         * Set filter
         * @param filter Expression to filter the result set. Read more about filtering results from LUSID here:   https://support.lusid.com/filtering-results-from-lusid. (optional)
         * @return APIlistTransactionTemplatesRequest
         */
        public APIlistTransactionTemplatesRequest filter(String filter) {
            this.filter = filter;
            return this;
        }

        /**
         * Set sortBy
         * @param sortBy A list of field names to sort by, each suffixed by \&quot; ASC\&quot; or \&quot; DESC\&quot; (optional)
         * @return APIlistTransactionTemplatesRequest
         */
        public APIlistTransactionTemplatesRequest sortBy(List<String> sortBy) {
            this.sortBy = sortBy;
            return this;
        }

        /**
         * Build call for listTransactionTemplates
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The transaction templates. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listTransactionTemplatesCall(asAt, page, limit, filter, sortBy, _callback);
        }

        /**
         * Execute listTransactionTemplates request
         * @return PagedResourceListOfTransactionTemplate
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The transaction templates. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public PagedResourceListOfTransactionTemplate execute() throws ApiException {
            ApiResponse<PagedResourceListOfTransactionTemplate> localVarResp = listTransactionTemplatesWithHttpInfo(asAt, page, limit, filter, sortBy);
            return localVarResp.getData();
        }

        /**
         * Execute listTransactionTemplates request. Use any specified configuration options to override any other configuration for this request only.
         * @return PagedResourceListOfTransactionTemplate
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The transaction templates. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public PagedResourceListOfTransactionTemplate execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<PagedResourceListOfTransactionTemplate> localVarResp = listTransactionTemplatesWithHttpInfo(asAt, page, limit, filter, sortBy, opts);
            return localVarResp.getData();
        }

        /**
         * Execute listTransactionTemplates request with HTTP info returned
         * @return ApiResponse&lt;PagedResourceListOfTransactionTemplate&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The transaction templates. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PagedResourceListOfTransactionTemplate> executeWithHttpInfo() throws ApiException {
            return listTransactionTemplatesWithHttpInfo(asAt, page, limit, filter, sortBy);
        }

        /**
         * Execute listTransactionTemplates request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;PagedResourceListOfTransactionTemplate&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The transaction templates. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PagedResourceListOfTransactionTemplate> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return listTransactionTemplatesWithHttpInfo(asAt, page, limit, filter, sortBy, opts);
        }

        /**
         * Execute listTransactionTemplates request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The transaction templates. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PagedResourceListOfTransactionTemplate> _callback) throws ApiException {
            return listTransactionTemplatesAsync(asAt, page, limit, filter, sortBy, _callback);
        }

        /**
         * Execute listTransactionTemplates request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The transaction templates. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PagedResourceListOfTransactionTemplate> _callback, ConfigurationOptions opts) throws ApiException {
            return listTransactionTemplatesAsync(asAt, page, limit, filter, sortBy, _callback, opts);
        }
    }

    /**
     * ListTransactionTemplates: List Transaction Templates
     * Lists all Transaction Templates.
     * @return APIlistTransactionTemplatesRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The transaction templates. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIlistTransactionTemplatesRequest listTransactionTemplates() {
        return new APIlistTransactionTemplatesRequest();
    }
    private okhttp3.Call updateTransactionTemplateCall(String instrumentEventType, String instrumentType, String scope, TransactionTemplateRequest transactionTemplateRequest, final ApiCallback _callback) throws ApiException {
        return updateTransactionTemplateCall(instrumentEventType, instrumentType, scope, transactionTemplateRequest,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call updateTransactionTemplateCall(String instrumentEventType, String instrumentType, String scope, TransactionTemplateRequest transactionTemplateRequest, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = transactionTemplateRequest;

        // create path and map variables
        String localVarPath = "/api/instrumenteventtypes/{instrumentEventType}/transactiontemplates/{instrumentType}/{scope}"
            .replace("{" + "instrumentEventType" + "}", localVarApiClient.escapeString(instrumentEventType.toString()))
            .replace("{" + "instrumentType" + "}", localVarApiClient.escapeString(instrumentType.toString()))
            .replace("{" + "scope" + "}", localVarApiClient.escapeString(scope.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateTransactionTemplateValidateBeforeCall(String instrumentEventType, String instrumentType, String scope, TransactionTemplateRequest transactionTemplateRequest, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'instrumentEventType' is set
        if (instrumentEventType == null) {
            throw new ApiException("Missing the required parameter 'instrumentEventType' when calling updateTransactionTemplate(Async)");
        }

        // verify the required parameter 'instrumentType' is set
        if (instrumentType == null) {
            throw new ApiException("Missing the required parameter 'instrumentType' when calling updateTransactionTemplate(Async)");
        }

        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling updateTransactionTemplate(Async)");
        }

        // verify the required parameter 'transactionTemplateRequest' is set
        if (transactionTemplateRequest == null) {
            throw new ApiException("Missing the required parameter 'transactionTemplateRequest' when calling updateTransactionTemplate(Async)");
        }

        return updateTransactionTemplateCall(instrumentEventType, instrumentType, scope, transactionTemplateRequest, _callback, opts);

    }


    private ApiResponse<TransactionTemplate> updateTransactionTemplateWithHttpInfo(String instrumentEventType, String instrumentType, String scope, TransactionTemplateRequest transactionTemplateRequest) throws ApiException {
        okhttp3.Call localVarCall = updateTransactionTemplateValidateBeforeCall(instrumentEventType, instrumentType, scope, transactionTemplateRequest, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<TransactionTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<TransactionTemplate> updateTransactionTemplateWithHttpInfo(String instrumentEventType, String instrumentType, String scope, TransactionTemplateRequest transactionTemplateRequest, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = updateTransactionTemplateValidateBeforeCall(instrumentEventType, instrumentType, scope, transactionTemplateRequest, null, opts);
        Type localVarReturnType = new TypeToken<TransactionTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateTransactionTemplateAsync(String instrumentEventType, String instrumentType, String scope, TransactionTemplateRequest transactionTemplateRequest, final ApiCallback<TransactionTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateTransactionTemplateValidateBeforeCall(instrumentEventType, instrumentType, scope, transactionTemplateRequest, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<TransactionTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call updateTransactionTemplateAsync(String instrumentEventType, String instrumentType, String scope, TransactionTemplateRequest transactionTemplateRequest, final ApiCallback<TransactionTemplate> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = updateTransactionTemplateValidateBeforeCall(instrumentEventType, instrumentType, scope, transactionTemplateRequest, _callback, opts);
        Type localVarReturnType = new TypeToken<TransactionTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIupdateTransactionTemplateRequest {
        private final String instrumentEventType;
        private final String instrumentType;
        private final String scope;
        private final TransactionTemplateRequest transactionTemplateRequest;

        private APIupdateTransactionTemplateRequest(String instrumentEventType, String instrumentType, String scope, TransactionTemplateRequest transactionTemplateRequest) {
            this.instrumentEventType = instrumentEventType;
            this.instrumentType = instrumentType;
            this.scope = scope;
            this.transactionTemplateRequest = transactionTemplateRequest;
        }

        /**
         * Build call for updateTransactionTemplate
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The response of the transaction template that was updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return updateTransactionTemplateCall(instrumentEventType, instrumentType, scope, transactionTemplateRequest, _callback);
        }

        /**
         * Execute updateTransactionTemplate request
         * @return TransactionTemplate
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The response of the transaction template that was updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public TransactionTemplate execute() throws ApiException {
            ApiResponse<TransactionTemplate> localVarResp = updateTransactionTemplateWithHttpInfo(instrumentEventType, instrumentType, scope, transactionTemplateRequest);
            return localVarResp.getData();
        }

        /**
         * Execute updateTransactionTemplate request. Use any specified configuration options to override any other configuration for this request only.
         * @return TransactionTemplate
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The response of the transaction template that was updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public TransactionTemplate execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<TransactionTemplate> localVarResp = updateTransactionTemplateWithHttpInfo(instrumentEventType, instrumentType, scope, transactionTemplateRequest, opts);
            return localVarResp.getData();
        }

        /**
         * Execute updateTransactionTemplate request with HTTP info returned
         * @return ApiResponse&lt;TransactionTemplate&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The response of the transaction template that was updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TransactionTemplate> executeWithHttpInfo() throws ApiException {
            return updateTransactionTemplateWithHttpInfo(instrumentEventType, instrumentType, scope, transactionTemplateRequest);
        }

        /**
         * Execute updateTransactionTemplate request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;TransactionTemplate&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The response of the transaction template that was updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TransactionTemplate> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return updateTransactionTemplateWithHttpInfo(instrumentEventType, instrumentType, scope, transactionTemplateRequest, opts);
        }

        /**
         * Execute updateTransactionTemplate request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The response of the transaction template that was updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TransactionTemplate> _callback) throws ApiException {
            return updateTransactionTemplateAsync(instrumentEventType, instrumentType, scope, transactionTemplateRequest, _callback);
        }

        /**
         * Execute updateTransactionTemplate request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The response of the transaction template that was updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TransactionTemplate> _callback, ConfigurationOptions opts) throws ApiException {
            return updateTransactionTemplateAsync(instrumentEventType, instrumentType, scope, transactionTemplateRequest, _callback, opts);
        }
    }

    /**
     * UpdateTransactionTemplate: Update Transaction Template
     * Update a transaction template for a particular instrument event type in a scope.
     * @param instrumentEventType The type of instrument events that the template is applied to. (required)
     * @param instrumentType The instrument type of the transaction template. The combination of the instrument   event type, instrument type and scope uniquely identifies a transaction template (required)
     * @param scope The scope in which the template lies. (required)
     * @param transactionTemplateRequest A request defining the updated values for the transaction template. (required)
     * @return APIupdateTransactionTemplateRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The response of the transaction template that was updated. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIupdateTransactionTemplateRequest updateTransactionTemplate(String instrumentEventType, String instrumentType, String scope, TransactionTemplateRequest transactionTemplateRequest) {
        return new APIupdateTransactionTemplateRequest(instrumentEventType, instrumentType, scope, transactionTemplateRequest);
    }
}
